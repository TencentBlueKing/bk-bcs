// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/bcs-webconsole.proto

package bcswebconsole

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for BcsWebconsole service

func NewBcsWebconsoleEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for BcsWebconsole service

type BcsWebconsoleService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (BcsWebconsole_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (BcsWebconsole_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (BcsWebconsole_BidiStreamService, error)
}

type bcsWebconsoleService struct {
	c    client.Client
	name string
}

func NewBcsWebconsoleService(name string, c client.Client) BcsWebconsoleService {
	return &bcsWebconsoleService{
		c:    c,
		name: name,
	}
}

func (c *bcsWebconsoleService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "BcsWebconsole.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsWebconsoleService) ClientStream(ctx context.Context, opts ...client.CallOption) (BcsWebconsole_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "BcsWebconsole.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &bcsWebconsoleServiceClientStream{stream}, nil
}

type BcsWebconsole_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ClientStreamRequest) error
}

type bcsWebconsoleServiceClientStream struct {
	stream client.Stream
}

func (x *bcsWebconsoleServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *bcsWebconsoleServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *bcsWebconsoleServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *bcsWebconsoleServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *bcsWebconsoleServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *bcsWebconsoleService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (BcsWebconsole_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "BcsWebconsole.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &bcsWebconsoleServiceServerStream{stream}, nil
}

type BcsWebconsole_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type bcsWebconsoleServiceServerStream struct {
	stream client.Stream
}

func (x *bcsWebconsoleServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *bcsWebconsoleServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *bcsWebconsoleServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *bcsWebconsoleServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *bcsWebconsoleServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bcsWebconsoleService) BidiStream(ctx context.Context, opts ...client.CallOption) (BcsWebconsole_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "BcsWebconsole.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &bcsWebconsoleServiceBidiStream{stream}, nil
}

type BcsWebconsole_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type bcsWebconsoleServiceBidiStream struct {
	stream client.Stream
}

func (x *bcsWebconsoleServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *bcsWebconsoleServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *bcsWebconsoleServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *bcsWebconsoleServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *bcsWebconsoleServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *bcsWebconsoleServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for BcsWebconsole service

type BcsWebconsoleHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, BcsWebconsole_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, BcsWebconsole_ServerStreamStream) error
	BidiStream(context.Context, BcsWebconsole_BidiStreamStream) error
}

func RegisterBcsWebconsoleHandler(s server.Server, hdlr BcsWebconsoleHandler, opts ...server.HandlerOption) error {
	type bcsWebconsole interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
	}
	type BcsWebconsole struct {
		bcsWebconsole
	}
	h := &bcsWebconsoleHandler{hdlr}
	return s.Handle(s.NewHandler(&BcsWebconsole{h}, opts...))
}

type bcsWebconsoleHandler struct {
	BcsWebconsoleHandler
}

func (h *bcsWebconsoleHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.BcsWebconsoleHandler.Call(ctx, in, out)
}

func (h *bcsWebconsoleHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.BcsWebconsoleHandler.ClientStream(ctx, &bcsWebconsoleClientStreamStream{stream})
}

type BcsWebconsole_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type bcsWebconsoleClientStreamStream struct {
	stream server.Stream
}

func (x *bcsWebconsoleClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *bcsWebconsoleClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *bcsWebconsoleClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *bcsWebconsoleClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *bcsWebconsoleClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *bcsWebconsoleHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.BcsWebconsoleHandler.ServerStream(ctx, m, &bcsWebconsoleServerStreamStream{stream})
}

type BcsWebconsole_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type bcsWebconsoleServerStreamStream struct {
	stream server.Stream
}

func (x *bcsWebconsoleServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *bcsWebconsoleServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *bcsWebconsoleServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *bcsWebconsoleServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *bcsWebconsoleServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *bcsWebconsoleHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.BcsWebconsoleHandler.BidiStream(ctx, &bcsWebconsoleBidiStreamStream{stream})
}

type BcsWebconsole_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type bcsWebconsoleBidiStreamStream struct {
	stream server.Stream
}

func (x *bcsWebconsoleBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *bcsWebconsoleBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *bcsWebconsoleBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *bcsWebconsoleBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *bcsWebconsoleBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *bcsWebconsoleBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
