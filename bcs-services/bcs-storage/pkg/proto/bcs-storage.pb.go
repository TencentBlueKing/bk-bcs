// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.1
// source: pkg/proto/bcs-storage.proto

package storage

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	duration "github.com/golang/protobuf/ptypes/duration"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Alarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace    string          `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Message      string          `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Source       string          `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	Module       string          `protobuf:"bytes,5,opt,name=module,proto3" json:"module,omitempty"`
	Type         string          `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	ReceivedTime int64           `protobuf:"varint,7,opt,name=receivedTime,proto3" json:"receivedTime,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Alarm) Reset() {
	*x = Alarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alarm) ProtoMessage() {}

func (x *Alarm) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alarm.ProtoReflect.Descriptor instead.
func (*Alarm) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{0}
}

func (x *Alarm) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Alarm) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Alarm) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Alarm) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Alarm) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *Alarm) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Alarm) GetReceivedTime() int64 {
	if x != nil {
		return x.ReceivedTime
	}
	return 0
}

func (x *Alarm) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type PostAlarmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace    string          `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Message      string          `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Source       string          `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	Module       string          `protobuf:"bytes,5,opt,name=module,proto3" json:"module,omitempty"`
	Type         string          `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	ReceivedTime int64           `protobuf:"varint,7,opt,name=receivedTime,proto3" json:"receivedTime,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PostAlarmRequest) Reset() {
	*x = PostAlarmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAlarmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAlarmRequest) ProtoMessage() {}

func (x *PostAlarmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAlarmRequest.ProtoReflect.Descriptor instead.
func (*PostAlarmRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{1}
}

func (x *PostAlarmRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *PostAlarmRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PostAlarmRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PostAlarmRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PostAlarmRequest) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *PostAlarmRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PostAlarmRequest) GetReceivedTime() int64 {
	if x != nil {
		return x.ReceivedTime
	}
	return 0
}

func (x *PostAlarmRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type PostAlarmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PostAlarmResponse) Reset() {
	*x = PostAlarmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAlarmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAlarmResponse) ProtoMessage() {}

func (x *PostAlarmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAlarmResponse.ProtoReflect.Descriptor instead.
func (*PostAlarmResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{2}
}

func (x *PostAlarmResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PostAlarmResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PostAlarmResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *PostAlarmResponse) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListAlarmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string   `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Source    string   `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Module    string   `protobuf:"bytes,4,opt,name=module,proto3" json:"module,omitempty"`
	Type      string   `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Fields    []string `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`
	TimeBegin int64    `protobuf:"varint,7,opt,name=timeBegin,proto3" json:"timeBegin,omitempty"`
	TimeEnd   int64    `protobuf:"varint,8,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`
	Offset    uint64   `protobuf:"varint,9,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     uint64   `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListAlarmRequest) Reset() {
	*x = ListAlarmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAlarmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAlarmRequest) ProtoMessage() {}

func (x *ListAlarmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAlarmRequest.ProtoReflect.Descriptor instead.
func (*ListAlarmRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{3}
}

func (x *ListAlarmRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListAlarmRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListAlarmRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ListAlarmRequest) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *ListAlarmRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListAlarmRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ListAlarmRequest) GetTimeBegin() int64 {
	if x != nil {
		return x.TimeBegin
	}
	return 0
}

func (x *ListAlarmRequest) GetTimeEnd() int64 {
	if x != nil {
		return x.TimeEnd
	}
	return 0
}

func (x *ListAlarmRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListAlarmRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListAlarmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Extra   *_struct.Struct   `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *ListAlarmResponse) Reset() {
	*x = ListAlarmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAlarmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAlarmResponse) ProtoMessage() {}

func (x *ListAlarmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAlarmResponse.ProtoReflect.Descriptor instead.
func (*ListAlarmResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{4}
}

func (x *ListAlarmResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListAlarmResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListAlarmResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListAlarmResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListAlarmResponse) GetExtra() *_struct.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ClusterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Service   string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *ClusterConfig) Reset() {
	*x = ClusterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig) ProtoMessage() {}

func (x *ClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig.ProtoReflect.Descriptor instead.
func (*ClusterConfig) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{5}
}

func (x *ClusterConfig) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusterConfig) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type GetClusterConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Service   string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *GetClusterConfigRequest) Reset() {
	*x = GetClusterConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterConfigRequest) ProtoMessage() {}

func (x *GetClusterConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterConfigRequest.ProtoReflect.Descriptor instead.
func (*GetClusterConfigRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{6}
}

func (x *GetClusterConfigRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetClusterConfigRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type ConfigSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *_struct.Struct `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Conf   *_struct.Struct `protobuf:"bytes,2,opt,name=conf,proto3" json:"conf,omitempty"`
}

func (x *ConfigSet) Reset() {
	*x = ConfigSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSet) ProtoMessage() {}

func (x *ConfigSet) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSet.ProtoReflect.Descriptor instead.
func (*ConfigSet) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{7}
}

func (x *ConfigSet) GetCommon() *_struct.Struct {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ConfigSet) GetConf() *_struct.Struct {
	if x != nil {
		return x.Conf
	}
	return nil
}

type ClusterSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId     string     `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ClusterConfig *ConfigSet `protobuf:"bytes,2,opt,name=clusterConfig,proto3" json:"clusterConfig,omitempty"`
}

func (x *ClusterSet) Reset() {
	*x = ClusterSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSet) ProtoMessage() {}

func (x *ClusterSet) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSet.ProtoReflect.Descriptor instead.
func (*ClusterSet) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{8}
}

func (x *ClusterSet) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusterSet) GetClusterConfig() *ConfigSet {
	if x != nil {
		return x.ClusterConfig
	}
	return nil
}

type DeployConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service       string        `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	ServiceConfig *ConfigSet    `protobuf:"bytes,2,opt,name=serviceConfig,proto3" json:"serviceConfig,omitempty"`
	Clusters      []*ClusterSet `protobuf:"bytes,3,rep,name=clusters,proto3" json:"clusters,omitempty"`
	StableVersion string        `protobuf:"bytes,4,opt,name=stableVersion,proto3" json:"stableVersion,omitempty"`
}

func (x *DeployConfig) Reset() {
	*x = DeployConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployConfig) ProtoMessage() {}

func (x *DeployConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployConfig.ProtoReflect.Descriptor instead.
func (*DeployConfig) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{9}
}

func (x *DeployConfig) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *DeployConfig) GetServiceConfig() *ConfigSet {
	if x != nil {
		return x.ServiceConfig
	}
	return nil
}

func (x *DeployConfig) GetClusters() []*ClusterSet {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *DeployConfig) GetStableVersion() string {
	if x != nil {
		return x.StableVersion
	}
	return ""
}

type GetClusterConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool          `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *DeployConfig `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetClusterConfigResponse) Reset() {
	*x = GetClusterConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterConfigResponse) ProtoMessage() {}

func (x *GetClusterConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterConfigResponse.ProtoReflect.Descriptor instead.
func (*GetClusterConfigResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{10}
}

func (x *GetClusterConfigResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetClusterConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetClusterConfigResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetClusterConfigResponse) GetData() *DeployConfig {
	if x != nil {
		return x.Data
	}
	return nil
}

type BcsStorageCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service  string   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	ZkIP     []string `protobuf:"bytes,2,rep,name=zkIP,proto3" json:"zkIP,omitempty"`
	MasterIP []string `protobuf:"bytes,3,rep,name=masterIP,proto3" json:"masterIP,omitempty"`
	DnsIP    []string `protobuf:"bytes,4,rep,name=dnsIP,proto3" json:"dnsIP,omitempty"`
	City     string   `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
	JfrogUrl string   `protobuf:"bytes,6,opt,name=jfrogUrl,proto3" json:"jfrogUrl,omitempty"`
	NeedNat  bool     `protobuf:"varint,7,opt,name=needNat,proto3" json:"needNat,omitempty"`
}

func (x *BcsStorageCluster) Reset() {
	*x = BcsStorageCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BcsStorageCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BcsStorageCluster) ProtoMessage() {}

func (x *BcsStorageCluster) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BcsStorageCluster.ProtoReflect.Descriptor instead.
func (*BcsStorageCluster) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{11}
}

func (x *BcsStorageCluster) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *BcsStorageCluster) GetZkIP() []string {
	if x != nil {
		return x.ZkIP
	}
	return nil
}

func (x *BcsStorageCluster) GetMasterIP() []string {
	if x != nil {
		return x.MasterIP
	}
	return nil
}

func (x *BcsStorageCluster) GetDnsIP() []string {
	if x != nil {
		return x.DnsIP
	}
	return nil
}

func (x *BcsStorageCluster) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *BcsStorageCluster) GetJfrogUrl() string {
	if x != nil {
		return x.JfrogUrl
	}
	return ""
}

func (x *BcsStorageCluster) GetNeedNat() bool {
	if x != nil {
		return x.NeedNat
	}
	return false
}

type PutClusterConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string   `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Service   string   `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	ZkIP      []string `protobuf:"bytes,4,rep,name=zkIP,proto3" json:"zkIP,omitempty"`
	MasterIP  []string `protobuf:"bytes,5,rep,name=masterIP,proto3" json:"masterIP,omitempty"`
	DnsIP     []string `protobuf:"bytes,6,rep,name=dnsIP,proto3" json:"dnsIP,omitempty"`
	City      string   `protobuf:"bytes,7,opt,name=city,proto3" json:"city,omitempty"`
	JfrogUrl  string   `protobuf:"bytes,8,opt,name=jfrogUrl,proto3" json:"jfrogUrl,omitempty"`
	NeedNat   bool     `protobuf:"varint,9,opt,name=needNat,proto3" json:"needNat,omitempty"`
}

func (x *PutClusterConfigRequest) Reset() {
	*x = PutClusterConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutClusterConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutClusterConfigRequest) ProtoMessage() {}

func (x *PutClusterConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutClusterConfigRequest.ProtoReflect.Descriptor instead.
func (*PutClusterConfigRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{12}
}

func (x *PutClusterConfigRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *PutClusterConfigRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *PutClusterConfigRequest) GetZkIP() []string {
	if x != nil {
		return x.ZkIP
	}
	return nil
}

func (x *PutClusterConfigRequest) GetMasterIP() []string {
	if x != nil {
		return x.MasterIP
	}
	return nil
}

func (x *PutClusterConfigRequest) GetDnsIP() []string {
	if x != nil {
		return x.DnsIP
	}
	return nil
}

func (x *PutClusterConfigRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *PutClusterConfigRequest) GetJfrogUrl() string {
	if x != nil {
		return x.JfrogUrl
	}
	return ""
}

func (x *PutClusterConfigRequest) GetNeedNat() bool {
	if x != nil {
		return x.NeedNat
	}
	return false
}

type PutClusterConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool          `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *DeployConfig `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PutClusterConfigResponse) Reset() {
	*x = PutClusterConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutClusterConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutClusterConfigResponse) ProtoMessage() {}

func (x *PutClusterConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutClusterConfigResponse.ProtoReflect.Descriptor instead.
func (*PutClusterConfigResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{13}
}

func (x *PutClusterConfigResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PutClusterConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PutClusterConfigResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *PutClusterConfigResponse) GetData() *DeployConfig {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetServiceConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ClusterIdNot string `protobuf:"bytes,2,opt,name=clusterIdNot,proto3" json:"clusterIdNot,omitempty"`
	Service      string `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *GetServiceConfigRequest) Reset() {
	*x = GetServiceConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceConfigRequest) ProtoMessage() {}

func (x *GetServiceConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceConfigRequest.ProtoReflect.Descriptor instead.
func (*GetServiceConfigRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{14}
}

func (x *GetServiceConfigRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetServiceConfigRequest) GetClusterIdNot() string {
	if x != nil {
		return x.ClusterIdNot
	}
	return ""
}

func (x *GetServiceConfigRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type GetServiceConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool          `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *DeployConfig `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetServiceConfigResponse) Reset() {
	*x = GetServiceConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceConfigResponse) ProtoMessage() {}

func (x *GetServiceConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceConfigResponse.ProtoReflect.Descriptor instead.
func (*GetServiceConfigResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{15}
}

func (x *GetServiceConfigResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetServiceConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetServiceConfigResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetServiceConfigResponse) GetData() *DeployConfig {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetStableVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *GetStableVersionRequest) Reset() {
	*x = GetStableVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStableVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStableVersionRequest) ProtoMessage() {}

func (x *GetStableVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStableVersionRequest.ProtoReflect.Descriptor instead.
func (*GetStableVersionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{16}
}

func (x *GetStableVersionRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type GetStableVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetStableVersionResponse) Reset() {
	*x = GetStableVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStableVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStableVersionResponse) ProtoMessage() {}

func (x *GetStableVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStableVersionResponse.ProtoReflect.Descriptor instead.
func (*GetStableVersionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{17}
}

func (x *GetStableVersionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetStableVersionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetStableVersionResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetStableVersionResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type PutStableVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *PutStableVersionRequest) Reset() {
	*x = PutStableVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutStableVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutStableVersionRequest) ProtoMessage() {}

func (x *PutStableVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutStableVersionRequest.ProtoReflect.Descriptor instead.
func (*PutStableVersionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{18}
}

func (x *PutStableVersionRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *PutStableVersionRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type PutStableVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PutStableVersionResponse) Reset() {
	*x = PutStableVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutStableVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutStableVersionResponse) ProtoMessage() {}

func (x *PutStableVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutStableVersionResponse.ProtoReflect.Descriptor instead.
func (*PutStableVersionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{19}
}

func (x *PutStableVersionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PutStableVersionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PutStableVersionResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *PutStableVersionResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type Resources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace    string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceType string `protobuf:"bytes,3,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceName string `protobuf:"bytes,4,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
}

func (x *Resources) Reset() {
	*x = Resources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resources) ProtoMessage() {}

func (x *Resources) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resources.ProtoReflect.Descriptor instead.
func (*Resources) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{20}
}

func (x *Resources) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Resources) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Resources) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *Resources) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

type GetNamespaceResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId        string   `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace        string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceType     string   `protobuf:"bytes,3,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceName     string   `protobuf:"bytes,4,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	Extra            string   `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`
	LabelSelector    string   `protobuf:"bytes,6,opt,name=labelSelector,proto3" json:"labelSelector,omitempty"`
	UpdateTimeBefore int64    `protobuf:"varint,7,opt,name=updateTimeBefore,proto3" json:"updateTimeBefore,omitempty"`
	Offset           uint64   `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit            uint64   `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
	Fields           []string `protobuf:"bytes,10,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *GetNamespaceResourcesRequest) Reset() {
	*x = GetNamespaceResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNamespaceResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamespaceResourcesRequest) ProtoMessage() {}

func (x *GetNamespaceResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamespaceResourcesRequest.ProtoReflect.Descriptor instead.
func (*GetNamespaceResourcesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{21}
}

func (x *GetNamespaceResourcesRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetNamespaceResourcesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetNamespaceResourcesRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *GetNamespaceResourcesRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *GetNamespaceResourcesRequest) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *GetNamespaceResourcesRequest) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

func (x *GetNamespaceResourcesRequest) GetUpdateTimeBefore() int64 {
	if x != nil {
		return x.UpdateTimeBefore
	}
	return 0
}

func (x *GetNamespaceResourcesRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetNamespaceResourcesRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetNamespaceResourcesRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type GetNamespaceResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNamespaceResourcesResponse) Reset() {
	*x = GetNamespaceResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNamespaceResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamespaceResourcesResponse) ProtoMessage() {}

func (x *GetNamespaceResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamespaceResourcesResponse.ProtoReflect.Descriptor instead.
func (*GetNamespaceResourcesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{22}
}

func (x *GetNamespaceResourcesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetNamespaceResourcesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetNamespaceResourcesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetNamespaceResourcesResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type PutNamespaceResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace    string          `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceType string          `protobuf:"bytes,3,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceName string          `protobuf:"bytes,4,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	Extra        string          `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PutNamespaceResourcesRequest) Reset() {
	*x = PutNamespaceResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutNamespaceResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutNamespaceResourcesRequest) ProtoMessage() {}

func (x *PutNamespaceResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutNamespaceResourcesRequest.ProtoReflect.Descriptor instead.
func (*PutNamespaceResourcesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{23}
}

func (x *PutNamespaceResourcesRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *PutNamespaceResourcesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PutNamespaceResourcesRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *PutNamespaceResourcesRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *PutNamespaceResourcesRequest) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *PutNamespaceResourcesRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type PutNamespaceResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PutNamespaceResourcesResponse) Reset() {
	*x = PutNamespaceResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutNamespaceResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutNamespaceResourcesResponse) ProtoMessage() {}

func (x *PutNamespaceResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutNamespaceResourcesResponse.ProtoReflect.Descriptor instead.
func (*PutNamespaceResourcesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{24}
}

func (x *PutNamespaceResourcesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PutNamespaceResourcesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PutNamespaceResourcesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *PutNamespaceResourcesResponse) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteNamespaceResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace    string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceType string `protobuf:"bytes,3,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceName string `protobuf:"bytes,4,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
}

func (x *DeleteNamespaceResourcesRequest) Reset() {
	*x = DeleteNamespaceResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNamespaceResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNamespaceResourcesRequest) ProtoMessage() {}

func (x *DeleteNamespaceResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNamespaceResourcesRequest.ProtoReflect.Descriptor instead.
func (*DeleteNamespaceResourcesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteNamespaceResourcesRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteNamespaceResourcesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteNamespaceResourcesRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *DeleteNamespaceResourcesRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

type DeleteNamespaceResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteNamespaceResourcesResponse) Reset() {
	*x = DeleteNamespaceResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNamespaceResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNamespaceResourcesResponse) ProtoMessage() {}

func (x *DeleteNamespaceResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNamespaceResourcesResponse.ProtoReflect.Descriptor instead.
func (*DeleteNamespaceResourcesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteNamespaceResourcesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteNamespaceResourcesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteNamespaceResourcesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DeleteNamespaceResourcesResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListNamespaceResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId        string   `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace        string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceType     string   `protobuf:"bytes,3,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	Extra            string   `protobuf:"bytes,4,opt,name=extra,proto3" json:"extra,omitempty"`
	LabelSelector    string   `protobuf:"bytes,5,opt,name=labelSelector,proto3" json:"labelSelector,omitempty"`
	UpdateTimeBefore int64    `protobuf:"varint,6,opt,name=updateTimeBefore,proto3" json:"updateTimeBefore,omitempty"`
	Offset           uint64   `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit            uint64   `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	Fields           []string `protobuf:"bytes,9,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ListNamespaceResourcesRequest) Reset() {
	*x = ListNamespaceResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespaceResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespaceResourcesRequest) ProtoMessage() {}

func (x *ListNamespaceResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespaceResourcesRequest.ProtoReflect.Descriptor instead.
func (*ListNamespaceResourcesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{27}
}

func (x *ListNamespaceResourcesRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListNamespaceResourcesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListNamespaceResourcesRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ListNamespaceResourcesRequest) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *ListNamespaceResourcesRequest) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

func (x *ListNamespaceResourcesRequest) GetUpdateTimeBefore() int64 {
	if x != nil {
		return x.UpdateTimeBefore
	}
	return 0
}

func (x *ListNamespaceResourcesRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListNamespaceResourcesRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListNamespaceResourcesRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ListNamespaceResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListNamespaceResourcesResponse) Reset() {
	*x = ListNamespaceResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespaceResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespaceResourcesResponse) ProtoMessage() {}

func (x *ListNamespaceResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespaceResourcesResponse.ProtoReflect.Descriptor instead.
func (*ListNamespaceResourcesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{28}
}

func (x *ListNamespaceResourcesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListNamespaceResourcesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListNamespaceResourcesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListNamespaceResourcesResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteBatchNamespaceResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId       string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace       string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceType    string `protobuf:"bytes,3,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	UpdateTimeBegin int64  `protobuf:"varint,4,opt,name=updateTimeBegin,proto3" json:"updateTimeBegin,omitempty"`
	UpdateTimeEnd   int64  `protobuf:"varint,5,opt,name=updateTimeEnd,proto3" json:"updateTimeEnd,omitempty"`
}

func (x *DeleteBatchNamespaceResourceRequest) Reset() {
	*x = DeleteBatchNamespaceResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBatchNamespaceResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBatchNamespaceResourceRequest) ProtoMessage() {}

func (x *DeleteBatchNamespaceResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBatchNamespaceResourceRequest.ProtoReflect.Descriptor instead.
func (*DeleteBatchNamespaceResourceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteBatchNamespaceResourceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteBatchNamespaceResourceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteBatchNamespaceResourceRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *DeleteBatchNamespaceResourceRequest) GetUpdateTimeBegin() int64 {
	if x != nil {
		return x.UpdateTimeBegin
	}
	return 0
}

func (x *DeleteBatchNamespaceResourceRequest) GetUpdateTimeEnd() int64 {
	if x != nil {
		return x.UpdateTimeEnd
	}
	return 0
}

type DeleteBatchNamespaceResourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteBatchNamespaceResourceResponse) Reset() {
	*x = DeleteBatchNamespaceResourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBatchNamespaceResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBatchNamespaceResourceResponse) ProtoMessage() {}

func (x *DeleteBatchNamespaceResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBatchNamespaceResourceResponse.ProtoReflect.Descriptor instead.
func (*DeleteBatchNamespaceResourceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteBatchNamespaceResourceResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteBatchNamespaceResourceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteBatchNamespaceResourceResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DeleteBatchNamespaceResourceResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetClusterResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId        string   `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ResourceType     string   `protobuf:"bytes,2,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceName     string   `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	Extra            string   `protobuf:"bytes,4,opt,name=extra,proto3" json:"extra,omitempty"`
	LabelSelector    string   `protobuf:"bytes,5,opt,name=labelSelector,proto3" json:"labelSelector,omitempty"`
	UpdateTimeBefore int64    `protobuf:"varint,6,opt,name=updateTimeBefore,proto3" json:"updateTimeBefore,omitempty"`
	Offset           uint64   `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit            uint64   `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	Fields           []string `protobuf:"bytes,9,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *GetClusterResourcesRequest) Reset() {
	*x = GetClusterResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterResourcesRequest) ProtoMessage() {}

func (x *GetClusterResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterResourcesRequest.ProtoReflect.Descriptor instead.
func (*GetClusterResourcesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{31}
}

func (x *GetClusterResourcesRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetClusterResourcesRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *GetClusterResourcesRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *GetClusterResourcesRequest) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *GetClusterResourcesRequest) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

func (x *GetClusterResourcesRequest) GetUpdateTimeBefore() int64 {
	if x != nil {
		return x.UpdateTimeBefore
	}
	return 0
}

func (x *GetClusterResourcesRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetClusterResourcesRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetClusterResourcesRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type GetClusterResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetClusterResourcesResponse) Reset() {
	*x = GetClusterResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterResourcesResponse) ProtoMessage() {}

func (x *GetClusterResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterResourcesResponse.ProtoReflect.Descriptor instead.
func (*GetClusterResourcesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{32}
}

func (x *GetClusterResourcesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetClusterResourcesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetClusterResourcesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetClusterResourcesResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type PutClusterResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ResourceType string          `protobuf:"bytes,2,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceName string          `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	Extra        string          `protobuf:"bytes,4,opt,name=extra,proto3" json:"extra,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PutClusterResourcesRequest) Reset() {
	*x = PutClusterResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutClusterResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutClusterResourcesRequest) ProtoMessage() {}

func (x *PutClusterResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutClusterResourcesRequest.ProtoReflect.Descriptor instead.
func (*PutClusterResourcesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{33}
}

func (x *PutClusterResourcesRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *PutClusterResourcesRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *PutClusterResourcesRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *PutClusterResourcesRequest) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *PutClusterResourcesRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type PutClusterResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PutClusterResourcesResponse) Reset() {
	*x = PutClusterResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutClusterResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutClusterResourcesResponse) ProtoMessage() {}

func (x *PutClusterResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutClusterResourcesResponse.ProtoReflect.Descriptor instead.
func (*PutClusterResourcesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{34}
}

func (x *PutClusterResourcesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PutClusterResourcesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PutClusterResourcesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *PutClusterResourcesResponse) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteClusterResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ResourceType string `protobuf:"bytes,2,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceName string `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
}

func (x *DeleteClusterResourcesRequest) Reset() {
	*x = DeleteClusterResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterResourcesRequest) ProtoMessage() {}

func (x *DeleteClusterResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterResourcesRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterResourcesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteClusterResourcesRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterResourcesRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *DeleteClusterResourcesRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

type DeleteClusterResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteClusterResourcesResponse) Reset() {
	*x = DeleteClusterResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterResourcesResponse) ProtoMessage() {}

func (x *DeleteClusterResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterResourcesResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterResourcesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteClusterResourcesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteClusterResourcesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteClusterResourcesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DeleteClusterResourcesResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListClusterResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId        string   `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ResourceType     string   `protobuf:"bytes,2,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	Extra            string   `protobuf:"bytes,3,opt,name=extra,proto3" json:"extra,omitempty"`
	LabelSelector    string   `protobuf:"bytes,4,opt,name=labelSelector,proto3" json:"labelSelector,omitempty"`
	UpdateTimeBefore int64    `protobuf:"varint,5,opt,name=updateTimeBefore,proto3" json:"updateTimeBefore,omitempty"`
	Offset           uint64   `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit            uint64   `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Fields           []string `protobuf:"bytes,8,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ListClusterResourcesRequest) Reset() {
	*x = ListClusterResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterResourcesRequest) ProtoMessage() {}

func (x *ListClusterResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterResourcesRequest.ProtoReflect.Descriptor instead.
func (*ListClusterResourcesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{37}
}

func (x *ListClusterResourcesRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterResourcesRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ListClusterResourcesRequest) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *ListClusterResourcesRequest) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

func (x *ListClusterResourcesRequest) GetUpdateTimeBefore() int64 {
	if x != nil {
		return x.UpdateTimeBefore
	}
	return 0
}

func (x *ListClusterResourcesRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListClusterResourcesRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListClusterResourcesRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ListClusterResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListClusterResourcesResponse) Reset() {
	*x = ListClusterResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterResourcesResponse) ProtoMessage() {}

func (x *ListClusterResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterResourcesResponse.ProtoReflect.Descriptor instead.
func (*ListClusterResourcesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{38}
}

func (x *ListClusterResourcesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListClusterResourcesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListClusterResourcesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListClusterResourcesResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteBatchClusterResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId       string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ResourceType    string `protobuf:"bytes,2,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	UpdateTimeBegin int64  `protobuf:"varint,3,opt,name=updateTimeBegin,proto3" json:"updateTimeBegin,omitempty"`
	UpdateTimeEnd   int64  `protobuf:"varint,4,opt,name=updateTimeEnd,proto3" json:"updateTimeEnd,omitempty"`
}

func (x *DeleteBatchClusterResourceRequest) Reset() {
	*x = DeleteBatchClusterResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBatchClusterResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBatchClusterResourceRequest) ProtoMessage() {}

func (x *DeleteBatchClusterResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBatchClusterResourceRequest.ProtoReflect.Descriptor instead.
func (*DeleteBatchClusterResourceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{39}
}

func (x *DeleteBatchClusterResourceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteBatchClusterResourceRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *DeleteBatchClusterResourceRequest) GetUpdateTimeBegin() int64 {
	if x != nil {
		return x.UpdateTimeBegin
	}
	return 0
}

func (x *DeleteBatchClusterResourceRequest) GetUpdateTimeEnd() int64 {
	if x != nil {
		return x.UpdateTimeEnd
	}
	return 0
}

type DeleteBatchClusterResourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteBatchClusterResourceResponse) Reset() {
	*x = DeleteBatchClusterResourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBatchClusterResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBatchClusterResourceResponse) ProtoMessage() {}

func (x *DeleteBatchClusterResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBatchClusterResourceResponse.ProtoReflect.Descriptor instead.
func (*DeleteBatchClusterResourceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{40}
}

func (x *DeleteBatchClusterResourceResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteBatchClusterResourceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteBatchClusterResourceResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DeleteBatchClusterResourceResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCustomResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId        string   `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace        string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceType     string   `protobuf:"bytes,3,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceName     string   `protobuf:"bytes,4,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	Extra            string   `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`
	LabelSelector    string   `protobuf:"bytes,6,opt,name=labelSelector,proto3" json:"labelSelector,omitempty"`
	UpdateTimeBefore int64    `protobuf:"varint,7,opt,name=updateTimeBefore,proto3" json:"updateTimeBefore,omitempty"`
	Offset           uint64   `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit            uint64   `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
	Fields           []string `protobuf:"bytes,10,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *GetCustomResourcesRequest) Reset() {
	*x = GetCustomResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomResourcesRequest) ProtoMessage() {}

func (x *GetCustomResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomResourcesRequest.ProtoReflect.Descriptor instead.
func (*GetCustomResourcesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{41}
}

func (x *GetCustomResourcesRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetCustomResourcesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetCustomResourcesRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *GetCustomResourcesRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *GetCustomResourcesRequest) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *GetCustomResourcesRequest) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

func (x *GetCustomResourcesRequest) GetUpdateTimeBefore() int64 {
	if x != nil {
		return x.UpdateTimeBefore
	}
	return 0
}

func (x *GetCustomResourcesRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCustomResourcesRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCustomResourcesRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type GetCustomResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message  string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result   bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data     []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Total    int64             `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
	PageSize int64             `protobuf:"varint,6,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Offset   int64             `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetCustomResourcesResponse) Reset() {
	*x = GetCustomResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomResourcesResponse) ProtoMessage() {}

func (x *GetCustomResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomResourcesResponse.ProtoReflect.Descriptor instead.
func (*GetCustomResourcesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{42}
}

func (x *GetCustomResourcesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCustomResourcesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCustomResourcesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetCustomResourcesResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetCustomResourcesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetCustomResourcesResponse) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetCustomResourcesResponse) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type DeleteCustomResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType string `protobuf:"bytes,1,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
}

func (x *DeleteCustomResourcesRequest) Reset() {
	*x = DeleteCustomResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCustomResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCustomResourcesRequest) ProtoMessage() {}

func (x *DeleteCustomResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCustomResourcesRequest.ProtoReflect.Descriptor instead.
func (*DeleteCustomResourcesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{43}
}

func (x *DeleteCustomResourcesRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

type DeleteCustomResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteCustomResourcesResponse) Reset() {
	*x = DeleteCustomResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCustomResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCustomResourcesResponse) ProtoMessage() {}

func (x *DeleteCustomResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCustomResourcesResponse.ProtoReflect.Descriptor instead.
func (*DeleteCustomResourcesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{44}
}

func (x *DeleteCustomResourcesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteCustomResourcesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteCustomResourcesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DeleteCustomResourcesResponse) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type PutCustomResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType string          `protobuf:"bytes,1,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PutCustomResourcesRequest) Reset() {
	*x = PutCustomResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutCustomResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutCustomResourcesRequest) ProtoMessage() {}

func (x *PutCustomResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutCustomResourcesRequest.ProtoReflect.Descriptor instead.
func (*PutCustomResourcesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{45}
}

func (x *PutCustomResourcesRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *PutCustomResourcesRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type PutCustomResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PutCustomResourcesResponse) Reset() {
	*x = PutCustomResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutCustomResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutCustomResourcesResponse) ProtoMessage() {}

func (x *PutCustomResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutCustomResourcesResponse.ProtoReflect.Descriptor instead.
func (*PutCustomResourcesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{46}
}

func (x *PutCustomResourcesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PutCustomResourcesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PutCustomResourcesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *PutCustomResourcesResponse) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateCustomResourcesIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType string          `protobuf:"bytes,1,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	IndexName    string          `protobuf:"bytes,2,opt,name=indexName,proto3" json:"indexName,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateCustomResourcesIndexRequest) Reset() {
	*x = CreateCustomResourcesIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCustomResourcesIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCustomResourcesIndexRequest) ProtoMessage() {}

func (x *CreateCustomResourcesIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCustomResourcesIndexRequest.ProtoReflect.Descriptor instead.
func (*CreateCustomResourcesIndexRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{47}
}

func (x *CreateCustomResourcesIndexRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *CreateCustomResourcesIndexRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *CreateCustomResourcesIndexRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateCustomResourcesIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateCustomResourcesIndexResponse) Reset() {
	*x = CreateCustomResourcesIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCustomResourcesIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCustomResourcesIndexResponse) ProtoMessage() {}

func (x *CreateCustomResourcesIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCustomResourcesIndexResponse.ProtoReflect.Descriptor instead.
func (*CreateCustomResourcesIndexResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{48}
}

func (x *CreateCustomResourcesIndexResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateCustomResourcesIndexResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateCustomResourcesIndexResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CreateCustomResourcesIndexResponse) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteCustomResourcesIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType string `protobuf:"bytes,1,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	IndexName    string `protobuf:"bytes,2,opt,name=indexName,proto3" json:"indexName,omitempty"`
}

func (x *DeleteCustomResourcesIndexRequest) Reset() {
	*x = DeleteCustomResourcesIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCustomResourcesIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCustomResourcesIndexRequest) ProtoMessage() {}

func (x *DeleteCustomResourcesIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCustomResourcesIndexRequest.ProtoReflect.Descriptor instead.
func (*DeleteCustomResourcesIndexRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{49}
}

func (x *DeleteCustomResourcesIndexRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *DeleteCustomResourcesIndexRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type DeleteCustomResourcesIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteCustomResourcesIndexResponse) Reset() {
	*x = DeleteCustomResourcesIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCustomResourcesIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCustomResourcesIndexResponse) ProtoMessage() {}

func (x *DeleteCustomResourcesIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCustomResourcesIndexResponse.ProtoReflect.Descriptor instead.
func (*DeleteCustomResourcesIndexResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{50}
}

func (x *DeleteCustomResourcesIndexResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteCustomResourcesIndexResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteCustomResourcesIndexResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DeleteCustomResourcesIndexResponse) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

//
//dynamic-query.proto
type IPPoolStatic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ResourceName string          `protobuf:"bytes,2,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ResourceType string          `protobuf:"bytes,3,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	CreateTime   string          `protobuf:"bytes,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string          `protobuf:"bytes,5,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	XId          string          `protobuf:"bytes,7,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *IPPoolStatic) Reset() {
	*x = IPPoolStatic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPPoolStatic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPPoolStatic) ProtoMessage() {}

func (x *IPPoolStatic) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPPoolStatic.ProtoReflect.Descriptor instead.
func (*IPPoolStatic) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{51}
}

func (x *IPPoolStatic) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *IPPoolStatic) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *IPPoolStatic) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *IPPoolStatic) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *IPPoolStatic) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *IPPoolStatic) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *IPPoolStatic) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type IPPoolStaticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ResourceName string          `protobuf:"bytes,2,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ResourceType string          `protobuf:"bytes,3,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	CreateTime   string          `protobuf:"bytes,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string          `protobuf:"bytes,5,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Field        []string        `protobuf:"bytes,7,rep,name=field,proto3" json:"field,omitempty"`
	Offset       uint64          `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit        uint64          `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *IPPoolStaticRequest) Reset() {
	*x = IPPoolStaticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPPoolStaticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPPoolStaticRequest) ProtoMessage() {}

func (x *IPPoolStaticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPPoolStaticRequest.ProtoReflect.Descriptor instead.
func (*IPPoolStaticRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{52}
}

func (x *IPPoolStaticRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *IPPoolStaticRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *IPPoolStaticRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *IPPoolStaticRequest) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *IPPoolStaticRequest) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *IPPoolStaticRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *IPPoolStaticRequest) GetField() []string {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *IPPoolStaticRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *IPPoolStaticRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type IPPoolStaticResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *IPPoolStaticResponse) Reset() {
	*x = IPPoolStaticResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPPoolStaticResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPPoolStaticResponse) ProtoMessage() {}

func (x *IPPoolStaticResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPPoolStaticResponse.ProtoReflect.Descriptor instead.
func (*IPPoolStaticResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{53}
}

func (x *IPPoolStaticResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *IPPoolStaticResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *IPPoolStaticResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *IPPoolStaticResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type IPPoolStaticDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ResourceName string          `protobuf:"bytes,2,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ResourceType string          `protobuf:"bytes,3,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	CreateTime   string          `protobuf:"bytes,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string          `protobuf:"bytes,5,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	XId          string          `protobuf:"bytes,7,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *IPPoolStaticDetail) Reset() {
	*x = IPPoolStaticDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPPoolStaticDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPPoolStaticDetail) ProtoMessage() {}

func (x *IPPoolStaticDetail) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPPoolStaticDetail.ProtoReflect.Descriptor instead.
func (*IPPoolStaticDetail) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{54}
}

func (x *IPPoolStaticDetail) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *IPPoolStaticDetail) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *IPPoolStaticDetail) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *IPPoolStaticDetail) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *IPPoolStaticDetail) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *IPPoolStaticDetail) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *IPPoolStaticDetail) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type IPPoolStaticDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ResourceName string          `protobuf:"bytes,2,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ResourceType string          `protobuf:"bytes,3,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	CreateTime   string          `protobuf:"bytes,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string          `protobuf:"bytes,5,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Field        []string        `protobuf:"bytes,7,rep,name=field,proto3" json:"field,omitempty"`
	Offset       uint64          `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit        uint64          `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *IPPoolStaticDetailRequest) Reset() {
	*x = IPPoolStaticDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPPoolStaticDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPPoolStaticDetailRequest) ProtoMessage() {}

func (x *IPPoolStaticDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPPoolStaticDetailRequest.ProtoReflect.Descriptor instead.
func (*IPPoolStaticDetailRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{55}
}

func (x *IPPoolStaticDetailRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *IPPoolStaticDetailRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *IPPoolStaticDetailRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *IPPoolStaticDetailRequest) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *IPPoolStaticDetailRequest) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *IPPoolStaticDetailRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *IPPoolStaticDetailRequest) GetField() []string {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *IPPoolStaticDetailRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *IPPoolStaticDetailRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type IPPoolStaticDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *IPPoolStaticDetailResponse) Reset() {
	*x = IPPoolStaticDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPPoolStaticDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPPoolStaticDetailResponse) ProtoMessage() {}

func (x *IPPoolStaticDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPPoolStaticDetailResponse.ProtoReflect.Descriptor instead.
func (*IPPoolStaticDetailResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{56}
}

func (x *IPPoolStaticDetailResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *IPPoolStaticDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *IPPoolStaticDetailResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *IPPoolStaticDetailResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type Pod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace    string          `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceName string          `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ResourceType string          `protobuf:"bytes,4,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	CreateTime   string          `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string          `protobuf:"bytes,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	XId          string          `protobuf:"bytes,8,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *Pod) Reset() {
	*x = Pod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pod) ProtoMessage() {}

func (x *Pod) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pod.ProtoReflect.Descriptor instead.
func (*Pod) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{57}
}

func (x *Pod) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Pod) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Pod) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *Pod) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *Pod) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Pod) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Pod) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Pod) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type PodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId      string   `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Name           string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace      string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	HostIP         string   `protobuf:"bytes,4,opt,name=hostIP,proto3" json:"hostIP,omitempty"`
	PodIP          string   `protobuf:"bytes,5,opt,name=podIP,proto3" json:"podIP,omitempty"`
	Status         string   `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	StartTimeBegin string   `protobuf:"bytes,7,opt,name=startTimeBegin,proto3" json:"startTimeBegin,omitempty"`
	StartTimeEnd   string   `protobuf:"bytes,8,opt,name=startTimeEnd,proto3" json:"startTimeEnd,omitempty"`
	Field          []string `protobuf:"bytes,9,rep,name=field,proto3" json:"field,omitempty"`
	Offset         uint64   `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit          uint64   `protobuf:"varint,11,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *PodRequest) Reset() {
	*x = PodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodRequest) ProtoMessage() {}

func (x *PodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodRequest.ProtoReflect.Descriptor instead.
func (*PodRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{58}
}

func (x *PodRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *PodRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PodRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PodRequest) GetHostIP() string {
	if x != nil {
		return x.HostIP
	}
	return ""
}

func (x *PodRequest) GetPodIP() string {
	if x != nil {
		return x.PodIP
	}
	return ""
}

func (x *PodRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PodRequest) GetStartTimeBegin() string {
	if x != nil {
		return x.StartTimeBegin
	}
	return ""
}

func (x *PodRequest) GetStartTimeEnd() string {
	if x != nil {
		return x.StartTimeEnd
	}
	return ""
}

func (x *PodRequest) GetField() []string {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *PodRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PodRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type PodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PodResponse) Reset() {
	*x = PodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodResponse) ProtoMessage() {}

func (x *PodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodResponse.ProtoReflect.Descriptor instead.
func (*PodResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{59}
}

func (x *PodResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PodResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PodResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *PodResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReplicaSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace    string          `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceName string          `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ResourceType string          `protobuf:"bytes,4,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	CreateTime   string          `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string          `protobuf:"bytes,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	XId          string          `protobuf:"bytes,8,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *ReplicaSet) Reset() {
	*x = ReplicaSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaSet) ProtoMessage() {}

func (x *ReplicaSet) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaSet.ProtoReflect.Descriptor instead.
func (*ReplicaSet) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{60}
}

func (x *ReplicaSet) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ReplicaSet) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ReplicaSet) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *ReplicaSet) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ReplicaSet) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ReplicaSet) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ReplicaSet) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReplicaSet) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type ReplicaSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId         string   `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Name              string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace         string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Replicas          string   `protobuf:"bytes,4,opt,name=replicas,proto3" json:"replicas,omitempty"`
	AvailableReplicas string   `protobuf:"bytes,5,opt,name=availableReplicas,proto3" json:"availableReplicas,omitempty"`
	ReadyReplicas     string   `protobuf:"bytes,6,opt,name=readyReplicas,proto3" json:"readyReplicas,omitempty"`
	CreateTimeBegin   string   `protobuf:"bytes,7,opt,name=createTimeBegin,proto3" json:"createTimeBegin,omitempty"`
	CreateTimeEnd     string   `protobuf:"bytes,8,opt,name=createTimeEnd,proto3" json:"createTimeEnd,omitempty"`
	Field             []string `protobuf:"bytes,9,rep,name=field,proto3" json:"field,omitempty"`
	Offset            uint64   `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit             uint64   `protobuf:"varint,11,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ReplicaSetRequest) Reset() {
	*x = ReplicaSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaSetRequest) ProtoMessage() {}

func (x *ReplicaSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaSetRequest.ProtoReflect.Descriptor instead.
func (*ReplicaSetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{61}
}

func (x *ReplicaSetRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ReplicaSetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReplicaSetRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ReplicaSetRequest) GetReplicas() string {
	if x != nil {
		return x.Replicas
	}
	return ""
}

func (x *ReplicaSetRequest) GetAvailableReplicas() string {
	if x != nil {
		return x.AvailableReplicas
	}
	return ""
}

func (x *ReplicaSetRequest) GetReadyReplicas() string {
	if x != nil {
		return x.ReadyReplicas
	}
	return ""
}

func (x *ReplicaSetRequest) GetCreateTimeBegin() string {
	if x != nil {
		return x.CreateTimeBegin
	}
	return ""
}

func (x *ReplicaSetRequest) GetCreateTimeEnd() string {
	if x != nil {
		return x.CreateTimeEnd
	}
	return ""
}

func (x *ReplicaSetRequest) GetField() []string {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *ReplicaSetRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ReplicaSetRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ReplicaSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ReplicaSetResponse) Reset() {
	*x = ReplicaSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaSetResponse) ProtoMessage() {}

func (x *ReplicaSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaSetResponse.ProtoReflect.Descriptor instead.
func (*ReplicaSetResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{62}
}

func (x *ReplicaSetResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ReplicaSetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReplicaSetResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ReplicaSetResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeploymentK8S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace    string          `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceName string          `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ResourceType string          `protobuf:"bytes,4,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	CreateTime   string          `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string          `protobuf:"bytes,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	XId          string          `protobuf:"bytes,8,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *DeploymentK8S) Reset() {
	*x = DeploymentK8S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentK8S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentK8S) ProtoMessage() {}

func (x *DeploymentK8S) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentK8S.ProtoReflect.Descriptor instead.
func (*DeploymentK8S) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{63}
}

func (x *DeploymentK8S) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeploymentK8S) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeploymentK8S) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *DeploymentK8S) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *DeploymentK8S) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *DeploymentK8S) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *DeploymentK8S) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeploymentK8S) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type DeploymentK8SRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId         string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Name              string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace         string          `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Replicas          string          `protobuf:"bytes,4,opt,name=replicas,proto3" json:"replicas,omitempty"`
	AvailableReplicas string          `protobuf:"bytes,5,opt,name=availableReplicas,proto3" json:"availableReplicas,omitempty"`
	UpdatedReplicas   string          `protobuf:"bytes,6,opt,name=updatedReplicas,proto3" json:"updatedReplicas,omitempty"`
	StrategyType      string          `protobuf:"bytes,7,opt,name=strategyType,proto3" json:"strategyType,omitempty"`
	DnsPolicy         string          `protobuf:"bytes,8,opt,name=dnsPolicy,proto3" json:"dnsPolicy,omitempty"`
	RestartPolicy     string          `protobuf:"bytes,9,opt,name=restartPolicy,proto3" json:"restartPolicy,omitempty"`
	CreateTimeBegin   string          `protobuf:"bytes,10,opt,name=createTimeBegin,proto3" json:"createTimeBegin,omitempty"`
	CreateTimeEnd     string          `protobuf:"bytes,11,opt,name=createTimeEnd,proto3" json:"createTimeEnd,omitempty"`
	Data              *_struct.Struct `protobuf:"bytes,12,opt,name=Data,proto3" json:"Data,omitempty"`
	Field             []string        `protobuf:"bytes,13,rep,name=field,proto3" json:"field,omitempty"`
	Offset            uint64          `protobuf:"varint,14,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit             uint64          `protobuf:"varint,15,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *DeploymentK8SRequest) Reset() {
	*x = DeploymentK8SRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentK8SRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentK8SRequest) ProtoMessage() {}

func (x *DeploymentK8SRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentK8SRequest.ProtoReflect.Descriptor instead.
func (*DeploymentK8SRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{64}
}

func (x *DeploymentK8SRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeploymentK8SRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeploymentK8SRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeploymentK8SRequest) GetReplicas() string {
	if x != nil {
		return x.Replicas
	}
	return ""
}

func (x *DeploymentK8SRequest) GetAvailableReplicas() string {
	if x != nil {
		return x.AvailableReplicas
	}
	return ""
}

func (x *DeploymentK8SRequest) GetUpdatedReplicas() string {
	if x != nil {
		return x.UpdatedReplicas
	}
	return ""
}

func (x *DeploymentK8SRequest) GetStrategyType() string {
	if x != nil {
		return x.StrategyType
	}
	return ""
}

func (x *DeploymentK8SRequest) GetDnsPolicy() string {
	if x != nil {
		return x.DnsPolicy
	}
	return ""
}

func (x *DeploymentK8SRequest) GetRestartPolicy() string {
	if x != nil {
		return x.RestartPolicy
	}
	return ""
}

func (x *DeploymentK8SRequest) GetCreateTimeBegin() string {
	if x != nil {
		return x.CreateTimeBegin
	}
	return ""
}

func (x *DeploymentK8SRequest) GetCreateTimeEnd() string {
	if x != nil {
		return x.CreateTimeEnd
	}
	return ""
}

func (x *DeploymentK8SRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeploymentK8SRequest) GetField() []string {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *DeploymentK8SRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *DeploymentK8SRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type DeploymentK8SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DeploymentK8SResponse) Reset() {
	*x = DeploymentK8SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentK8SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentK8SResponse) ProtoMessage() {}

func (x *DeploymentK8SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentK8SResponse.ProtoReflect.Descriptor instead.
func (*DeploymentK8SResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{65}
}

func (x *DeploymentK8SResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeploymentK8SResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeploymentK8SResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DeploymentK8SResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type ServiceK8S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace    string          `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceName string          `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ResourceType string          `protobuf:"bytes,4,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	CreateTime   string          `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string          `protobuf:"bytes,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	XId          string          `protobuf:"bytes,8,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *ServiceK8S) Reset() {
	*x = ServiceK8S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceK8S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceK8S) ProtoMessage() {}

func (x *ServiceK8S) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceK8S.ProtoReflect.Descriptor instead.
func (*ServiceK8S) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{66}
}

func (x *ServiceK8S) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ServiceK8S) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ServiceK8S) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *ServiceK8S) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ServiceK8S) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ServiceK8S) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ServiceK8S) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ServiceK8S) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type ServiceK8SRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId       string   `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Name            string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace       string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ClusterIP       string   `protobuf:"bytes,4,opt,name=clusterIP,proto3" json:"clusterIP,omitempty"`
	Type            string   `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	CreateTimeBegin string   `protobuf:"bytes,6,opt,name=createTimeBegin,proto3" json:"createTimeBegin,omitempty"`
	CreateTimeEnd   string   `protobuf:"bytes,7,opt,name=createTimeEnd,proto3" json:"createTimeEnd,omitempty"`
	Field           []string `protobuf:"bytes,8,rep,name=field,proto3" json:"field,omitempty"`
	Offset          uint64   `protobuf:"varint,9,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit           uint64   `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ServiceK8SRequest) Reset() {
	*x = ServiceK8SRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceK8SRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceK8SRequest) ProtoMessage() {}

func (x *ServiceK8SRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceK8SRequest.ProtoReflect.Descriptor instead.
func (*ServiceK8SRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{67}
}

func (x *ServiceK8SRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ServiceK8SRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceK8SRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ServiceK8SRequest) GetClusterIP() string {
	if x != nil {
		return x.ClusterIP
	}
	return ""
}

func (x *ServiceK8SRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ServiceK8SRequest) GetCreateTimeBegin() string {
	if x != nil {
		return x.CreateTimeBegin
	}
	return ""
}

func (x *ServiceK8SRequest) GetCreateTimeEnd() string {
	if x != nil {
		return x.CreateTimeEnd
	}
	return ""
}

func (x *ServiceK8SRequest) GetField() []string {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *ServiceK8SRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ServiceK8SRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ServiceK8SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ServiceK8SResponse) Reset() {
	*x = ServiceK8SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceK8SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceK8SResponse) ProtoMessage() {}

func (x *ServiceK8SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceK8SResponse.ProtoReflect.Descriptor instead.
func (*ServiceK8SResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{68}
}

func (x *ServiceK8SResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ServiceK8SResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ServiceK8SResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ServiceK8SResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type ConfigMapK8S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace    string          `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceName string          `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ResourceType string          `protobuf:"bytes,4,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	CreateTime   string          `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string          `protobuf:"bytes,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	XId          string          `protobuf:"bytes,8,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *ConfigMapK8S) Reset() {
	*x = ConfigMapK8S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigMapK8S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMapK8S) ProtoMessage() {}

func (x *ConfigMapK8S) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMapK8S.ProtoReflect.Descriptor instead.
func (*ConfigMapK8S) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{69}
}

func (x *ConfigMapK8S) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ConfigMapK8S) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ConfigMapK8S) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *ConfigMapK8S) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ConfigMapK8S) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ConfigMapK8S) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ConfigMapK8S) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ConfigMapK8S) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type ConfigMapK8SRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId       string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Name            string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace       string          `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	CreateTimeBegin string          `protobuf:"bytes,4,opt,name=createTimeBegin,proto3" json:"createTimeBegin,omitempty"`
	CreateTimeEnd   string          `protobuf:"bytes,5,opt,name=createTimeEnd,proto3" json:"createTimeEnd,omitempty"`
	Data            *_struct.Struct `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Field           []string        `protobuf:"bytes,7,rep,name=field,proto3" json:"field,omitempty"`
	Offset          uint64          `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit           uint64          `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ConfigMapK8SRequest) Reset() {
	*x = ConfigMapK8SRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigMapK8SRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMapK8SRequest) ProtoMessage() {}

func (x *ConfigMapK8SRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMapK8SRequest.ProtoReflect.Descriptor instead.
func (*ConfigMapK8SRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{70}
}

func (x *ConfigMapK8SRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ConfigMapK8SRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigMapK8SRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ConfigMapK8SRequest) GetCreateTimeBegin() string {
	if x != nil {
		return x.CreateTimeBegin
	}
	return ""
}

func (x *ConfigMapK8SRequest) GetCreateTimeEnd() string {
	if x != nil {
		return x.CreateTimeEnd
	}
	return ""
}

func (x *ConfigMapK8SRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ConfigMapK8SRequest) GetField() []string {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *ConfigMapK8SRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ConfigMapK8SRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ConfigMapK8SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ConfigMapK8SResponse) Reset() {
	*x = ConfigMapK8SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigMapK8SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMapK8SResponse) ProtoMessage() {}

func (x *ConfigMapK8SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMapK8SResponse.ProtoReflect.Descriptor instead.
func (*ConfigMapK8SResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{71}
}

func (x *ConfigMapK8SResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ConfigMapK8SResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ConfigMapK8SResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ConfigMapK8SResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type SecretK8S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace    string          `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceName string          `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ResourceType string          `protobuf:"bytes,4,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	CreateTime   string          `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string          `protobuf:"bytes,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	XId          string          `protobuf:"bytes,8,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *SecretK8S) Reset() {
	*x = SecretK8S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretK8S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretK8S) ProtoMessage() {}

func (x *SecretK8S) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretK8S.ProtoReflect.Descriptor instead.
func (*SecretK8S) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{72}
}

func (x *SecretK8S) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *SecretK8S) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SecretK8S) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *SecretK8S) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *SecretK8S) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *SecretK8S) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *SecretK8S) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SecretK8S) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type SecretK8SRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId       string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Name            string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace       string          `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	CreateTimeBegin string          `protobuf:"bytes,4,opt,name=createTimeBegin,proto3" json:"createTimeBegin,omitempty"`
	CreateTimeEnd   string          `protobuf:"bytes,5,opt,name=createTimeEnd,proto3" json:"createTimeEnd,omitempty"`
	ResourceName    string          `protobuf:"bytes,6,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ResourceType    string          `protobuf:"bytes,7,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	CreateTime      string          `protobuf:"bytes,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime      string          `protobuf:"bytes,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Data            *_struct.Struct `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
	Field           []string        `protobuf:"bytes,11,rep,name=field,proto3" json:"field,omitempty"`
	Offset          uint64          `protobuf:"varint,12,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit           uint64          `protobuf:"varint,13,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SecretK8SRequest) Reset() {
	*x = SecretK8SRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretK8SRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretK8SRequest) ProtoMessage() {}

func (x *SecretK8SRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretK8SRequest.ProtoReflect.Descriptor instead.
func (*SecretK8SRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{73}
}

func (x *SecretK8SRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *SecretK8SRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecretK8SRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SecretK8SRequest) GetCreateTimeBegin() string {
	if x != nil {
		return x.CreateTimeBegin
	}
	return ""
}

func (x *SecretK8SRequest) GetCreateTimeEnd() string {
	if x != nil {
		return x.CreateTimeEnd
	}
	return ""
}

func (x *SecretK8SRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *SecretK8SRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *SecretK8SRequest) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *SecretK8SRequest) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *SecretK8SRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SecretK8SRequest) GetField() []string {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *SecretK8SRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SecretK8SRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SecretK8SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SecretK8SResponse) Reset() {
	*x = SecretK8SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretK8SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretK8SResponse) ProtoMessage() {}

func (x *SecretK8SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretK8SResponse.ProtoReflect.Descriptor instead.
func (*SecretK8SResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{74}
}

func (x *SecretK8SResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SecretK8SResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SecretK8SResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *SecretK8SResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type EndpointsK8S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace    string          `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceName string          `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ResourceType string          `protobuf:"bytes,4,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	CreateTime   string          `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string          `protobuf:"bytes,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	XId          string          `protobuf:"bytes,8,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *EndpointsK8S) Reset() {
	*x = EndpointsK8S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointsK8S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointsK8S) ProtoMessage() {}

func (x *EndpointsK8S) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointsK8S.ProtoReflect.Descriptor instead.
func (*EndpointsK8S) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{75}
}

func (x *EndpointsK8S) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *EndpointsK8S) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *EndpointsK8S) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *EndpointsK8S) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *EndpointsK8S) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *EndpointsK8S) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *EndpointsK8S) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *EndpointsK8S) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type EndpointsK8SRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string   `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Name      string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Field     []string `protobuf:"bytes,4,rep,name=field,proto3" json:"field,omitempty"`
	Offset    uint64   `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     uint64   `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *EndpointsK8SRequest) Reset() {
	*x = EndpointsK8SRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointsK8SRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointsK8SRequest) ProtoMessage() {}

func (x *EndpointsK8SRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointsK8SRequest.ProtoReflect.Descriptor instead.
func (*EndpointsK8SRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{76}
}

func (x *EndpointsK8SRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *EndpointsK8SRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EndpointsK8SRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *EndpointsK8SRequest) GetField() []string {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *EndpointsK8SRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *EndpointsK8SRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type EndpointsK8SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *EndpointsK8SResponse) Reset() {
	*x = EndpointsK8SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointsK8SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointsK8SResponse) ProtoMessage() {}

func (x *EndpointsK8SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointsK8SResponse.ProtoReflect.Descriptor instead.
func (*EndpointsK8SResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{77}
}

func (x *EndpointsK8SResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *EndpointsK8SResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EndpointsK8SResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *EndpointsK8SResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type Ingress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace    string          `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceName string          `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ResourceType string          `protobuf:"bytes,4,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	CreateTime   string          `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string          `protobuf:"bytes,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	XId          string          `protobuf:"bytes,8,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *Ingress) Reset() {
	*x = Ingress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingress) ProtoMessage() {}

func (x *Ingress) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingress.ProtoReflect.Descriptor instead.
func (*Ingress) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{78}
}

func (x *Ingress) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Ingress) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Ingress) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *Ingress) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *Ingress) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Ingress) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Ingress) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Ingress) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type IngressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId       string   `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Name            string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace       string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	CreateTimeBegin string   `protobuf:"bytes,4,opt,name=createTimeBegin,proto3" json:"createTimeBegin,omitempty"`
	CreateTimeEnd   string   `protobuf:"bytes,5,opt,name=createTimeEnd,proto3" json:"createTimeEnd,omitempty"`
	Field           []string `protobuf:"bytes,6,rep,name=field,proto3" json:"field,omitempty"`
	Offset          uint64   `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit           uint64   `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *IngressRequest) Reset() {
	*x = IngressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressRequest) ProtoMessage() {}

func (x *IngressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressRequest.ProtoReflect.Descriptor instead.
func (*IngressRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{79}
}

func (x *IngressRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *IngressRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IngressRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *IngressRequest) GetCreateTimeBegin() string {
	if x != nil {
		return x.CreateTimeBegin
	}
	return ""
}

func (x *IngressRequest) GetCreateTimeEnd() string {
	if x != nil {
		return x.CreateTimeEnd
	}
	return ""
}

func (x *IngressRequest) GetField() []string {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *IngressRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *IngressRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type IngressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *IngressResponse) Reset() {
	*x = IngressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressResponse) ProtoMessage() {}

func (x *IngressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressResponse.ProtoReflect.Descriptor instead.
func (*IngressResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{80}
}

func (x *IngressResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *IngressResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *IngressResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *IngressResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type Namespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ResourceName string          `protobuf:"bytes,2,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ResourceType string          `protobuf:"bytes,3,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	CreateTime   string          `protobuf:"bytes,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string          `protobuf:"bytes,5,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	XId          string          `protobuf:"bytes,7,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *Namespace) Reset() {
	*x = Namespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace) ProtoMessage() {}

func (x *Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace.ProtoReflect.Descriptor instead.
func (*Namespace) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{81}
}

func (x *Namespace) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Namespace) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *Namespace) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *Namespace) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Namespace) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Namespace) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Namespace) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type NamespaceK8SRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId       string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Name            string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status          string          `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	CreateTimeBegin string          `protobuf:"bytes,4,opt,name=createTimeBegin,proto3" json:"createTimeBegin,omitempty"`
	CreateTimeEnd   string          `protobuf:"bytes,5,opt,name=createTimeEnd,proto3" json:"createTimeEnd,omitempty"`
	Data            *_struct.Struct `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Field           []string        `protobuf:"bytes,7,rep,name=field,proto3" json:"field,omitempty"`
	Used            string          `protobuf:"bytes,8,opt,name=used,proto3" json:"used,omitempty"`
	Offset          uint64          `protobuf:"varint,9,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit           uint64          `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *NamespaceK8SRequest) Reset() {
	*x = NamespaceK8SRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceK8SRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceK8SRequest) ProtoMessage() {}

func (x *NamespaceK8SRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceK8SRequest.ProtoReflect.Descriptor instead.
func (*NamespaceK8SRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{82}
}

func (x *NamespaceK8SRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *NamespaceK8SRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamespaceK8SRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NamespaceK8SRequest) GetCreateTimeBegin() string {
	if x != nil {
		return x.CreateTimeBegin
	}
	return ""
}

func (x *NamespaceK8SRequest) GetCreateTimeEnd() string {
	if x != nil {
		return x.CreateTimeEnd
	}
	return ""
}

func (x *NamespaceK8SRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *NamespaceK8SRequest) GetField() []string {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *NamespaceK8SRequest) GetUsed() string {
	if x != nil {
		return x.Used
	}
	return ""
}

func (x *NamespaceK8SRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *NamespaceK8SRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type NamespaceK8SResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *NamespaceK8SResponse) Reset() {
	*x = NamespaceK8SResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceK8SResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceK8SResponse) ProtoMessage() {}

func (x *NamespaceK8SResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceK8SResponse.ProtoReflect.Descriptor instead.
func (*NamespaceK8SResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{83}
}

func (x *NamespaceK8SResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NamespaceK8SResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NamespaceK8SResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *NamespaceK8SResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ResourceName string          `protobuf:"bytes,2,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ResourceType string          `protobuf:"bytes,3,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	CreateTime   string          `protobuf:"bytes,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string          `protobuf:"bytes,5,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	XId          string          `protobuf:"bytes,7,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{84}
}

func (x *Node) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Node) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *Node) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *Node) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Node) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Node) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Node) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type NodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId       string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Name            string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ExternalID      string          `protobuf:"bytes,3,opt,name=externalID,proto3" json:"externalID,omitempty"`
	CreateTimeBegin string          `protobuf:"bytes,4,opt,name=createTimeBegin,proto3" json:"createTimeBegin,omitempty"`
	CreateTimeEnd   string          `protobuf:"bytes,5,opt,name=createTimeEnd,proto3" json:"createTimeEnd,omitempty"`
	Data            *_struct.Struct `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Field           []string        `protobuf:"bytes,7,rep,name=field,proto3" json:"field,omitempty"`
	Offset          uint64          `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit           uint64          `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *NodeRequest) Reset() {
	*x = NodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRequest) ProtoMessage() {}

func (x *NodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRequest.ProtoReflect.Descriptor instead.
func (*NodeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{85}
}

func (x *NodeRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *NodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeRequest) GetExternalID() string {
	if x != nil {
		return x.ExternalID
	}
	return ""
}

func (x *NodeRequest) GetCreateTimeBegin() string {
	if x != nil {
		return x.CreateTimeBegin
	}
	return ""
}

func (x *NodeRequest) GetCreateTimeEnd() string {
	if x != nil {
		return x.CreateTimeEnd
	}
	return ""
}

func (x *NodeRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *NodeRequest) GetField() []string {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *NodeRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *NodeRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type NodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *NodeResponse) Reset() {
	*x = NodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeResponse) ProtoMessage() {}

func (x *NodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeResponse.ProtoReflect.Descriptor instead.
func (*NodeResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{86}
}

func (x *NodeResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NodeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NodeResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *NodeResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type DaemonSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace    string          `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceName string          `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ResourceType string          `protobuf:"bytes,4,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	CreateTime   string          `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string          `protobuf:"bytes,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	XId          string          `protobuf:"bytes,8,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *DaemonSet) Reset() {
	*x = DaemonSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaemonSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaemonSet) ProtoMessage() {}

func (x *DaemonSet) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaemonSet.ProtoReflect.Descriptor instead.
func (*DaemonSet) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{87}
}

func (x *DaemonSet) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DaemonSet) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DaemonSet) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *DaemonSet) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *DaemonSet) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *DaemonSet) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *DaemonSet) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DaemonSet) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type DaemonSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId       string   `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Name            string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace       string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	CreateTimeBegin string   `protobuf:"bytes,4,opt,name=createTimeBegin,proto3" json:"createTimeBegin,omitempty"`
	CreateTimeEnd   string   `protobuf:"bytes,5,opt,name=createTimeEnd,proto3" json:"createTimeEnd,omitempty"`
	ResourceVersion string   `protobuf:"bytes,6,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	UID             string   `protobuf:"bytes,7,opt,name=uID,proto3" json:"uID,omitempty"`
	Generation      string   `protobuf:"bytes,8,opt,name=generation,proto3" json:"generation,omitempty"`
	TemplateGen     string   `protobuf:"bytes,9,opt,name=templateGen,proto3" json:"templateGen,omitempty"`
	StrategyType    string   `protobuf:"bytes,10,opt,name=strategyType,proto3" json:"strategyType,omitempty"`
	Field           []string `protobuf:"bytes,11,rep,name=field,proto3" json:"field,omitempty"`
	Offset          uint64   `protobuf:"varint,12,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit           uint64   `protobuf:"varint,13,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *DaemonSetRequest) Reset() {
	*x = DaemonSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaemonSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaemonSetRequest) ProtoMessage() {}

func (x *DaemonSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaemonSetRequest.ProtoReflect.Descriptor instead.
func (*DaemonSetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{88}
}

func (x *DaemonSetRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DaemonSetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DaemonSetRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DaemonSetRequest) GetCreateTimeBegin() string {
	if x != nil {
		return x.CreateTimeBegin
	}
	return ""
}

func (x *DaemonSetRequest) GetCreateTimeEnd() string {
	if x != nil {
		return x.CreateTimeEnd
	}
	return ""
}

func (x *DaemonSetRequest) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *DaemonSetRequest) GetUID() string {
	if x != nil {
		return x.UID
	}
	return ""
}

func (x *DaemonSetRequest) GetGeneration() string {
	if x != nil {
		return x.Generation
	}
	return ""
}

func (x *DaemonSetRequest) GetTemplateGen() string {
	if x != nil {
		return x.TemplateGen
	}
	return ""
}

func (x *DaemonSetRequest) GetStrategyType() string {
	if x != nil {
		return x.StrategyType
	}
	return ""
}

func (x *DaemonSetRequest) GetField() []string {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *DaemonSetRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *DaemonSetRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type DaemonSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DaemonSetResponse) Reset() {
	*x = DaemonSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaemonSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaemonSetResponse) ProtoMessage() {}

func (x *DaemonSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaemonSetResponse.ProtoReflect.Descriptor instead.
func (*DaemonSetResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{89}
}

func (x *DaemonSetResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DaemonSetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DaemonSetResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DaemonSetResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace    string          `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceName string          `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ResourceType string          `protobuf:"bytes,4,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	CreateTime   string          `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string          `protobuf:"bytes,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	XId          string          `protobuf:"bytes,8,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{90}
}

func (x *Job) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Job) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Job) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *Job) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *Job) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Job) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Job) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Job) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type JobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId       string   `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Name            string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace       string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	CreateTimeBegin string   `protobuf:"bytes,4,opt,name=createTimeBegin,proto3" json:"createTimeBegin,omitempty"`
	CreateTimeEnd   string   `protobuf:"bytes,5,opt,name=createTimeEnd,proto3" json:"createTimeEnd,omitempty"`
	ResourceVersion string   `protobuf:"bytes,6,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	UID             string   `protobuf:"bytes,7,opt,name=uID,proto3" json:"uID,omitempty"`
	Field           []string `protobuf:"bytes,8,rep,name=field,proto3" json:"field,omitempty"`
	Offset          uint64   `protobuf:"varint,9,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit           uint64   `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *JobRequest) Reset() {
	*x = JobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRequest) ProtoMessage() {}

func (x *JobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRequest.ProtoReflect.Descriptor instead.
func (*JobRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{91}
}

func (x *JobRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *JobRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *JobRequest) GetCreateTimeBegin() string {
	if x != nil {
		return x.CreateTimeBegin
	}
	return ""
}

func (x *JobRequest) GetCreateTimeEnd() string {
	if x != nil {
		return x.CreateTimeEnd
	}
	return ""
}

func (x *JobRequest) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *JobRequest) GetUID() string {
	if x != nil {
		return x.UID
	}
	return ""
}

func (x *JobRequest) GetField() []string {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *JobRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *JobRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type JobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *JobResponse) Reset() {
	*x = JobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResponse) ProtoMessage() {}

func (x *JobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobResponse.ProtoReflect.Descriptor instead.
func (*JobResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{92}
}

func (x *JobResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *JobResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *JobResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *JobResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type StatefulSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace    string          `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceName string          `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ResourceType string          `protobuf:"bytes,4,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	CreateTime   string          `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string          `protobuf:"bytes,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	XId          string          `protobuf:"bytes,8,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *StatefulSet) Reset() {
	*x = StatefulSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatefulSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatefulSet) ProtoMessage() {}

func (x *StatefulSet) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatefulSet.ProtoReflect.Descriptor instead.
func (*StatefulSet) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{93}
}

func (x *StatefulSet) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *StatefulSet) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *StatefulSet) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *StatefulSet) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *StatefulSet) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *StatefulSet) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *StatefulSet) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StatefulSet) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type StatefulSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId       string   `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Name            string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace       string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	CreateTimeBegin string   `protobuf:"bytes,4,opt,name=createTimeBegin,proto3" json:"createTimeBegin,omitempty"`
	CreateTimeEnd   string   `protobuf:"bytes,5,opt,name=createTimeEnd,proto3" json:"createTimeEnd,omitempty"`
	ResourceVersion string   `protobuf:"bytes,6,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	UID             string   `protobuf:"bytes,7,opt,name=uID,proto3" json:"uID,omitempty"`
	Generation      string   `protobuf:"bytes,8,opt,name=generation,proto3" json:"generation,omitempty"`
	PodMPolicy      string   `protobuf:"bytes,9,opt,name=podMPolicy,proto3" json:"podMPolicy,omitempty"`
	StrategyType    string   `protobuf:"bytes,10,opt,name=strategyType,proto3" json:"strategyType,omitempty"`
	ServiceName     string   `protobuf:"bytes,11,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	Field           []string `protobuf:"bytes,12,rep,name=field,proto3" json:"field,omitempty"`
	Offset          uint64   `protobuf:"varint,13,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit           uint64   `protobuf:"varint,14,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *StatefulSetRequest) Reset() {
	*x = StatefulSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatefulSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatefulSetRequest) ProtoMessage() {}

func (x *StatefulSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatefulSetRequest.ProtoReflect.Descriptor instead.
func (*StatefulSetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{94}
}

func (x *StatefulSetRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *StatefulSetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StatefulSetRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *StatefulSetRequest) GetCreateTimeBegin() string {
	if x != nil {
		return x.CreateTimeBegin
	}
	return ""
}

func (x *StatefulSetRequest) GetCreateTimeEnd() string {
	if x != nil {
		return x.CreateTimeEnd
	}
	return ""
}

func (x *StatefulSetRequest) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *StatefulSetRequest) GetUID() string {
	if x != nil {
		return x.UID
	}
	return ""
}

func (x *StatefulSetRequest) GetGeneration() string {
	if x != nil {
		return x.Generation
	}
	return ""
}

func (x *StatefulSetRequest) GetPodMPolicy() string {
	if x != nil {
		return x.PodMPolicy
	}
	return ""
}

func (x *StatefulSetRequest) GetStrategyType() string {
	if x != nil {
		return x.StrategyType
	}
	return ""
}

func (x *StatefulSetRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *StatefulSetRequest) GetField() []string {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *StatefulSetRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *StatefulSetRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type StatefulSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*_struct.Struct `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *StatefulSetResponse) Reset() {
	*x = StatefulSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatefulSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatefulSetResponse) ProtoMessage() {}

func (x *StatefulSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatefulSetResponse.ProtoReflect.Descriptor instead.
func (*StatefulSetResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{95}
}

func (x *StatefulSetResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *StatefulSetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StatefulSetResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *StatefulSetResponse) GetData() []*_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type WatchDynamicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string            `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ResourceType string            `protobuf:"bytes,2,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	Option       *StoreWatchOption `protobuf:"bytes,3,opt,name=option,proto3" json:"option,omitempty"`
}

func (x *WatchDynamicRequest) Reset() {
	*x = WatchDynamicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchDynamicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchDynamicRequest) ProtoMessage() {}

func (x *WatchDynamicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchDynamicRequest.ProtoReflect.Descriptor instead.
func (*WatchDynamicRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{96}
}

func (x *WatchDynamicRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *WatchDynamicRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *WatchDynamicRequest) GetOption() *StoreWatchOption {
	if x != nil {
		return x.Option
	}
	return nil
}

type WatchDynamicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  int32           `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Value *_struct.Struct `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WatchDynamicResponse) Reset() {
	*x = WatchDynamicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchDynamicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchDynamicResponse) ProtoMessage() {}

func (x *WatchDynamicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchDynamicResponse.ProtoReflect.Descriptor instead.
func (*WatchDynamicResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{97}
}

func (x *WatchDynamicResponse) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *WatchDynamicResponse) GetValue() *_struct.Struct {
	if x != nil {
		return x.Value
	}
	return nil
}

type WatchContainerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string            `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Option    *StoreWatchOption `protobuf:"bytes,2,opt,name=option,proto3" json:"option,omitempty"`
}

func (x *WatchContainerRequest) Reset() {
	*x = WatchContainerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchContainerRequest) ProtoMessage() {}

func (x *WatchContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchContainerRequest.ProtoReflect.Descriptor instead.
func (*WatchContainerRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{98}
}

func (x *WatchContainerRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *WatchContainerRequest) GetOption() *StoreWatchOption {
	if x != nil {
		return x.Option
	}
	return nil
}

type WatchContainerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  int32           `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Value *_struct.Struct `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WatchContainerResponse) Reset() {
	*x = WatchContainerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchContainerResponse) ProtoMessage() {}

func (x *WatchContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchContainerResponse.ProtoReflect.Descriptor instead.
func (*WatchContainerResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{99}
}

func (x *WatchContainerResponse) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *WatchContainerResponse) GetValue() *_struct.Struct {
	if x != nil {
		return x.Value
	}
	return nil
}

type EventExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Kind      string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *EventExtraInfo) Reset() {
	*x = EventExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventExtraInfo) ProtoMessage() {}

func (x *EventExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventExtraInfo.ProtoReflect.Descriptor instead.
func (*EventExtraInfo) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{100}
}

func (x *EventExtraInfo) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *EventExtraInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventExtraInfo) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type BcsStorageEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId  string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Kind       string          `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	ExtraInfo  *EventExtraInfo `protobuf:"bytes,3,opt,name=extraInfo,proto3" json:"extraInfo,omitempty"`
	CreateTime string          `protobuf:"bytes,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Env        string          `protobuf:"bytes,5,opt,name=env,proto3" json:"env,omitempty"`
	Component  string          `protobuf:"bytes,6,opt,name=component,proto3" json:"component,omitempty"`
	Type       string          `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	Data       *_struct.Struct `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	Level      string          `protobuf:"bytes,9,opt,name=level,proto3" json:"level,omitempty"`
	EventTime  string          `protobuf:"bytes,10,opt,name=eventTime,proto3" json:"eventTime,omitempty"`
	Describe   string          `protobuf:"bytes,11,opt,name=describe,proto3" json:"describe,omitempty"`
	XId        string          `protobuf:"bytes,12,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *BcsStorageEvent) Reset() {
	*x = BcsStorageEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BcsStorageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BcsStorageEvent) ProtoMessage() {}

func (x *BcsStorageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BcsStorageEvent.ProtoReflect.Descriptor instead.
func (*BcsStorageEvent) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{101}
}

func (x *BcsStorageEvent) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *BcsStorageEvent) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *BcsStorageEvent) GetExtraInfo() *EventExtraInfo {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

func (x *BcsStorageEvent) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *BcsStorageEvent) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *BcsStorageEvent) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *BcsStorageEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BcsStorageEvent) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BcsStorageEvent) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *BcsStorageEvent) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

func (x *BcsStorageEvent) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *BcsStorageEvent) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type PutEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Env       string          `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	Kind      string          `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	Level     string          `protobuf:"bytes,4,opt,name=level,proto3" json:"level,omitempty"`
	Component string          `protobuf:"bytes,5,opt,name=component,proto3" json:"component,omitempty"`
	Type      string          `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Describe  string          `protobuf:"bytes,7,opt,name=describe,proto3" json:"describe,omitempty"`
	ClusterId string          `protobuf:"bytes,8,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	EventTime int64           `protobuf:"varint,9,opt,name=eventTime,proto3" json:"eventTime,omitempty"`
	ExtraInfo *EventExtraInfo `protobuf:"bytes,10,opt,name=extraInfo,proto3" json:"extraInfo,omitempty"`
	Data      *_struct.Struct `protobuf:"bytes,11,opt,name=data,proto3" json:"data,omitempty"`
	Field     string          `protobuf:"bytes,12,opt,name=field,proto3" json:"field,omitempty"`
	Offset    uint64          `protobuf:"varint,13,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     uint64          `protobuf:"varint,14,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *PutEventRequest) Reset() {
	*x = PutEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutEventRequest) ProtoMessage() {}

func (x *PutEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutEventRequest.ProtoReflect.Descriptor instead.
func (*PutEventRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{102}
}

func (x *PutEventRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PutEventRequest) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *PutEventRequest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *PutEventRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *PutEventRequest) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *PutEventRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PutEventRequest) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *PutEventRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *PutEventRequest) GetEventTime() int64 {
	if x != nil {
		return x.EventTime
	}
	return 0
}

func (x *PutEventRequest) GetExtraInfo() *EventExtraInfo {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

func (x *PutEventRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PutEventRequest) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *PutEventRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PutEventRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type PutEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PutEventResponse) Reset() {
	*x = PutEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutEventResponse) ProtoMessage() {}

func (x *PutEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutEventResponse.ProtoReflect.Descriptor instead.
func (*PutEventResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{103}
}

func (x *PutEventResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PutEventResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PutEventResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *PutEventResponse) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Env          string          `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	Kind         string          `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	Level        string          `protobuf:"bytes,4,opt,name=level,proto3" json:"level,omitempty"`
	Component    string          `protobuf:"bytes,5,opt,name=component,proto3" json:"component,omitempty"`
	Type         string          `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	ClusterId    string          `protobuf:"bytes,7,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ExtraInfo    *EventExtraInfo `protobuf:"bytes,8,opt,name=extraInfo,proto3" json:"extraInfo,omitempty"`
	Field        []string        `protobuf:"bytes,9,rep,name=field,proto3" json:"field,omitempty"`
	Extra        *_struct.Struct `protobuf:"bytes,10,opt,name=extra,proto3" json:"extra,omitempty"`
	ExtraContain *_struct.Struct `protobuf:"bytes,11,opt,name=extraContain,proto3" json:"extraContain,omitempty"`
	TimeBegin    int64           `protobuf:"varint,12,opt,name=timeBegin,proto3" json:"timeBegin,omitempty"`
	TimeEnd      int64           `protobuf:"varint,13,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`
	Offset       uint64          `protobuf:"varint,14,opt,name=offset,proto3" json:"offset,omitempty"`
	Length       uint64          `protobuf:"varint,15,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *ListEventRequest) Reset() {
	*x = ListEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventRequest) ProtoMessage() {}

func (x *ListEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventRequest.ProtoReflect.Descriptor instead.
func (*ListEventRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{104}
}

func (x *ListEventRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListEventRequest) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *ListEventRequest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ListEventRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *ListEventRequest) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *ListEventRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListEventRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListEventRequest) GetExtraInfo() *EventExtraInfo {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

func (x *ListEventRequest) GetField() []string {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *ListEventRequest) GetExtra() *_struct.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *ListEventRequest) GetExtraContain() *_struct.Struct {
	if x != nil {
		return x.ExtraContain
	}
	return nil
}

func (x *ListEventRequest) GetTimeBegin() int64 {
	if x != nil {
		return x.TimeBegin
	}
	return 0
}

func (x *ListEventRequest) GetTimeEnd() int64 {
	if x != nil {
		return x.TimeEnd
	}
	return 0
}

func (x *ListEventRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListEventRequest) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

type ListEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool               `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*BcsStorageEvent `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Extra   *_struct.Struct    `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *ListEventResponse) Reset() {
	*x = ListEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventResponse) ProtoMessage() {}

func (x *ListEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventResponse.ProtoReflect.Descriptor instead.
func (*ListEventResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{105}
}

func (x *ListEventResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListEventResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListEventResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListEventResponse) GetData() []*BcsStorageEvent {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListEventResponse) GetExtra() *_struct.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type StoreWatchOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cond      *_struct.Struct    `protobuf:"bytes,1,opt,name=cond,proto3" json:"cond,omitempty"`
	SelfOnly  bool               `protobuf:"varint,2,opt,name=selfOnly,proto3" json:"selfOnly,omitempty"`
	MaxEvents uint64             `protobuf:"varint,3,opt,name=maxEvents,proto3" json:"maxEvents,omitempty"`
	Timeout   *duration.Duration `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	MustDiff  string             `protobuf:"bytes,5,opt,name=mustDiff,proto3" json:"mustDiff,omitempty"`
}

func (x *StoreWatchOption) Reset() {
	*x = StoreWatchOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreWatchOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreWatchOption) ProtoMessage() {}

func (x *StoreWatchOption) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreWatchOption.ProtoReflect.Descriptor instead.
func (*StoreWatchOption) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{106}
}

func (x *StoreWatchOption) GetCond() *_struct.Struct {
	if x != nil {
		return x.Cond
	}
	return nil
}

func (x *StoreWatchOption) GetSelfOnly() bool {
	if x != nil {
		return x.SelfOnly
	}
	return false
}

func (x *StoreWatchOption) GetMaxEvents() uint64 {
	if x != nil {
		return x.MaxEvents
	}
	return 0
}

func (x *StoreWatchOption) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *StoreWatchOption) GetMustDiff() string {
	if x != nil {
		return x.MustDiff
	}
	return ""
}

type WatchEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string            `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Option    *StoreWatchOption `protobuf:"bytes,2,opt,name=option,proto3" json:"option,omitempty"`
}

func (x *WatchEventRequest) Reset() {
	*x = WatchEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchEventRequest) ProtoMessage() {}

func (x *WatchEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchEventRequest.ProtoReflect.Descriptor instead.
func (*WatchEventRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{107}
}

func (x *WatchEventRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *WatchEventRequest) GetOption() *StoreWatchOption {
	if x != nil {
		return x.Option
	}
	return nil
}

type WatchEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  int32           `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Value *_struct.Struct `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WatchEventResponse) Reset() {
	*x = WatchEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchEventResponse) ProtoMessage() {}

func (x *WatchEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchEventResponse.ProtoReflect.Descriptor instead.
func (*WatchEventResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{108}
}

func (x *WatchEventResponse) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *WatchEventResponse) GetValue() *_struct.Struct {
	if x != nil {
		return x.Value
	}
	return nil
}

type BcsStorageHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip        string          `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	ClusterId string          `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Data      *_struct.Struct `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BcsStorageHost) Reset() {
	*x = BcsStorageHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BcsStorageHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BcsStorageHost) ProtoMessage() {}

func (x *BcsStorageHost) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BcsStorageHost.ProtoReflect.Descriptor instead.
func (*BcsStorageHost) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{109}
}

func (x *BcsStorageHost) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *BcsStorageHost) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *BcsStorageHost) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *GetHostRequest) Reset() {
	*x = GetHostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostRequest) ProtoMessage() {}

func (x *GetHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostRequest.ProtoReflect.Descriptor instead.
func (*GetHostRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{110}
}

func (x *GetHostRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type GetHostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*BcsStorageHost `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetHostResponse) Reset() {
	*x = GetHostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostResponse) ProtoMessage() {}

func (x *GetHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostResponse.ProtoReflect.Descriptor instead.
func (*GetHostResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{111}
}

func (x *GetHostResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetHostResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetHostResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetHostResponse) GetData() []*BcsStorageHost {
	if x != nil {
		return x.Data
	}
	return nil
}

type PutHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip        string          `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	ClusterId string          `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Data      *_struct.Struct `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PutHostRequest) Reset() {
	*x = PutHostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutHostRequest) ProtoMessage() {}

func (x *PutHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutHostRequest.ProtoReflect.Descriptor instead.
func (*PutHostRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{112}
}

func (x *PutHostRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PutHostRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *PutHostRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type PutHostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PutHostResponse) Reset() {
	*x = PutHostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutHostResponse) ProtoMessage() {}

func (x *PutHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutHostResponse.ProtoReflect.Descriptor instead.
func (*PutHostResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{113}
}

func (x *PutHostResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PutHostResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PutHostResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *PutHostResponse) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *DeleteHostRequest) Reset() {
	*x = DeleteHostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHostRequest) ProtoMessage() {}

func (x *DeleteHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHostRequest.ProtoReflect.Descriptor instead.
func (*DeleteHostRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{114}
}

func (x *DeleteHostRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type DeleteHostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteHostResponse) Reset() {
	*x = DeleteHostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHostResponse) ProtoMessage() {}

func (x *DeleteHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHostResponse.ProtoReflect.Descriptor instead.
func (*DeleteHostResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{115}
}

func (x *DeleteHostResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteHostResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteHostResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DeleteHostResponse) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
}

func (x *ListHostRequest) Reset() {
	*x = ListHostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHostRequest) ProtoMessage() {}

func (x *ListHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHostRequest.ProtoReflect.Descriptor instead.
func (*ListHostRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{116}
}

func (x *ListHostRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ListHostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool              `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*BcsStorageHost `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListHostResponse) Reset() {
	*x = ListHostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHostResponse) ProtoMessage() {}

func (x *ListHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHostResponse.ProtoReflect.Descriptor instead.
func (*ListHostResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{117}
}

func (x *ListHostResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListHostResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListHostResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListHostResponse) GetData() []*BcsStorageHost {
	if x != nil {
		return x.Data
	}
	return nil
}

type PutClusterRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string   `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Ips       []string `protobuf:"bytes,2,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *PutClusterRelationRequest) Reset() {
	*x = PutClusterRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutClusterRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutClusterRelationRequest) ProtoMessage() {}

func (x *PutClusterRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutClusterRelationRequest.ProtoReflect.Descriptor instead.
func (*PutClusterRelationRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{118}
}

func (x *PutClusterRelationRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *PutClusterRelationRequest) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type PutClusterRelationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PutClusterRelationResponse) Reset() {
	*x = PutClusterRelationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutClusterRelationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutClusterRelationResponse) ProtoMessage() {}

func (x *PutClusterRelationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutClusterRelationResponse.ProtoReflect.Descriptor instead.
func (*PutClusterRelationResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{119}
}

func (x *PutClusterRelationResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PutClusterRelationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PutClusterRelationResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *PutClusterRelationResponse) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type PostClusterRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string   `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Ips       []string `protobuf:"bytes,2,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *PostClusterRelationRequest) Reset() {
	*x = PostClusterRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostClusterRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostClusterRelationRequest) ProtoMessage() {}

func (x *PostClusterRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostClusterRelationRequest.ProtoReflect.Descriptor instead.
func (*PostClusterRelationRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{120}
}

func (x *PostClusterRelationRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *PostClusterRelationRequest) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type PostClusterRelationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PostClusterRelationResponse) Reset() {
	*x = PostClusterRelationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostClusterRelationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostClusterRelationResponse) ProtoMessage() {}

func (x *PostClusterRelationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostClusterRelationResponse.ProtoReflect.Descriptor instead.
func (*PostClusterRelationResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{121}
}

func (x *PostClusterRelationResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PostClusterRelationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PostClusterRelationResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *PostClusterRelationResponse) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Type      string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{122}
}

func (x *Metric) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Metric) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Metric) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Metric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Type      string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Extra     string `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`
	Offset    uint64 `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     uint64 `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetMetricRequest) Reset() {
	*x = GetMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricRequest) ProtoMessage() {}

func (x *GetMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricRequest.ProtoReflect.Descriptor instead.
func (*GetMetricRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{123}
}

func (x *GetMetricRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetMetricRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetMetricRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetMetricRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetMetricRequest) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *GetMetricRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetMetricRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetMetricResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool      `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*Metric `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetMetricResponse) Reset() {
	*x = GetMetricResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricResponse) ProtoMessage() {}

func (x *GetMetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricResponse.ProtoReflect.Descriptor instead.
func (*GetMetricResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{124}
}

func (x *GetMetricResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetMetricResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetMetricResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GetMetricResponse) GetData() []*Metric {
	if x != nil {
		return x.Data
	}
	return nil
}

type PutMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace string          `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Type      string          `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Name      string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Extra     string          `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`
	Data      *_struct.Struct `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PutMetricRequest) Reset() {
	*x = PutMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutMetricRequest) ProtoMessage() {}

func (x *PutMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutMetricRequest.ProtoReflect.Descriptor instead.
func (*PutMetricRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{125}
}

func (x *PutMetricRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *PutMetricRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PutMetricRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PutMetricRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PutMetricRequest) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *PutMetricRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type PutMetricResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PutMetricResponse) Reset() {
	*x = PutMetricResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutMetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutMetricResponse) ProtoMessage() {}

func (x *PutMetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutMetricResponse.ProtoReflect.Descriptor instead.
func (*PutMetricResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{126}
}

func (x *PutMetricResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PutMetricResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PutMetricResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *PutMetricResponse) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Type      string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteMetricRequest) Reset() {
	*x = DeleteMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMetricRequest) ProtoMessage() {}

func (x *DeleteMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMetricRequest.ProtoReflect.Descriptor instead.
func (*DeleteMetricRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{127}
}

func (x *DeleteMetricRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteMetricRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteMetricRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DeleteMetricRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteMetricResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteMetricResponse) Reset() {
	*x = DeleteMetricResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMetricResponse) ProtoMessage() {}

func (x *DeleteMetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMetricResponse.ProtoReflect.Descriptor instead.
func (*DeleteMetricResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{128}
}

func (x *DeleteMetricResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteMetricResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteMetricResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *DeleteMetricResponse) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Type      string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Extra     string `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`
	Offset    uint64 `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     uint64 `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *QueryMetricRequest) Reset() {
	*x = QueryMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMetricRequest) ProtoMessage() {}

func (x *QueryMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMetricRequest.ProtoReflect.Descriptor instead.
func (*QueryMetricRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{129}
}

func (x *QueryMetricRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *QueryMetricRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *QueryMetricRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *QueryMetricRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryMetricRequest) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *QueryMetricRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QueryMetricRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type QueryMetricResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool      `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []*Metric `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryMetricResponse) Reset() {
	*x = QueryMetricResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMetricResponse) ProtoMessage() {}

func (x *QueryMetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMetricResponse.ProtoReflect.Descriptor instead.
func (*QueryMetricResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{130}
}

func (x *QueryMetricResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryMetricResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryMetricResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *QueryMetricResponse) GetData() []*Metric {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListMetricTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListMetricTablesRequest) Reset() {
	*x = ListMetricTablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMetricTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMetricTablesRequest) ProtoMessage() {}

func (x *ListMetricTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMetricTablesRequest.ProtoReflect.Descriptor instead.
func (*ListMetricTablesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{131}
}

type ListMetricTablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool     `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []string `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListMetricTablesResponse) Reset() {
	*x = ListMetricTablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMetricTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMetricTablesResponse) ProtoMessage() {}

func (x *ListMetricTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMetricTablesResponse.ProtoReflect.Descriptor instead.
func (*ListMetricTablesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{132}
}

func (x *ListMetricTablesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListMetricTablesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListMetricTablesResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *ListMetricTablesResponse) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

//
//watch-metric.proto
type WatchMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string            `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Type      string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Option    *StoreWatchOption `protobuf:"bytes,3,opt,name=option,proto3" json:"option,omitempty"`
}

func (x *WatchMetricRequest) Reset() {
	*x = WatchMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchMetricRequest) ProtoMessage() {}

func (x *WatchMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchMetricRequest.ProtoReflect.Descriptor instead.
func (*WatchMetricRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{133}
}

func (x *WatchMetricRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *WatchMetricRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WatchMetricRequest) GetOption() *StoreWatchOption {
	if x != nil {
		return x.Option
	}
	return nil
}

type WatchMetricResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  int32           `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Value *_struct.Struct `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WatchMetricResponse) Reset() {
	*x = WatchMetricResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchMetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchMetricResponse) ProtoMessage() {}

func (x *WatchMetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchMetricResponse.ProtoReflect.Descriptor instead.
func (*WatchMetricResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{134}
}

func (x *WatchMetricResponse) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *WatchMetricResponse) GetValue() *_struct.Struct {
	if x != nil {
		return x.Value
	}
	return nil
}

type WatchResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace    string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceType string `protobuf:"bytes,3,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceName string `protobuf:"bytes,4,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
}

func (x *WatchResource) Reset() {
	*x = WatchResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchResource) ProtoMessage() {}

func (x *WatchResource) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchResource.ProtoReflect.Descriptor instead.
func (*WatchResource) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{135}
}

func (x *WatchResource) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *WatchResource) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *WatchResource) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *WatchResource) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

type K8SGetWatchResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace    string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceType string `protobuf:"bytes,3,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceName string `protobuf:"bytes,4,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
}

func (x *K8SGetWatchResourceRequest) Reset() {
	*x = K8SGetWatchResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SGetWatchResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SGetWatchResourceRequest) ProtoMessage() {}

func (x *K8SGetWatchResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SGetWatchResourceRequest.ProtoReflect.Descriptor instead.
func (*K8SGetWatchResourceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{136}
}

func (x *K8SGetWatchResourceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *K8SGetWatchResourceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *K8SGetWatchResourceRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *K8SGetWatchResourceRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

type K8SGetWatchResourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *K8SGetWatchResourceResponse) Reset() {
	*x = K8SGetWatchResourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SGetWatchResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SGetWatchResourceResponse) ProtoMessage() {}

func (x *K8SGetWatchResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SGetWatchResourceResponse.ProtoReflect.Descriptor instead.
func (*K8SGetWatchResourceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{137}
}

func (x *K8SGetWatchResourceResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *K8SGetWatchResourceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *K8SGetWatchResourceResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *K8SGetWatchResourceResponse) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type K8SPutWatchResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string          `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace    string          `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceType string          `protobuf:"bytes,3,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceName string          `protobuf:"bytes,4,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	Data         *_struct.Struct `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *K8SPutWatchResourceRequest) Reset() {
	*x = K8SPutWatchResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SPutWatchResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SPutWatchResourceRequest) ProtoMessage() {}

func (x *K8SPutWatchResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SPutWatchResourceRequest.ProtoReflect.Descriptor instead.
func (*K8SPutWatchResourceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{138}
}

func (x *K8SPutWatchResourceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *K8SPutWatchResourceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *K8SPutWatchResourceRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *K8SPutWatchResourceRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *K8SPutWatchResourceRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type K8SPutWatchResourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *K8SPutWatchResourceResponse) Reset() {
	*x = K8SPutWatchResourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SPutWatchResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SPutWatchResourceResponse) ProtoMessage() {}

func (x *K8SPutWatchResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SPutWatchResourceResponse.ProtoReflect.Descriptor instead.
func (*K8SPutWatchResourceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{139}
}

func (x *K8SPutWatchResourceResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *K8SPutWatchResourceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *K8SPutWatchResourceResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *K8SPutWatchResourceResponse) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type K8SDeleteWatchResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace    string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceType string `protobuf:"bytes,3,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceName string `protobuf:"bytes,4,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
}

func (x *K8SDeleteWatchResourceRequest) Reset() {
	*x = K8SDeleteWatchResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SDeleteWatchResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SDeleteWatchResourceRequest) ProtoMessage() {}

func (x *K8SDeleteWatchResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SDeleteWatchResourceRequest.ProtoReflect.Descriptor instead.
func (*K8SDeleteWatchResourceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{140}
}

func (x *K8SDeleteWatchResourceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *K8SDeleteWatchResourceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *K8SDeleteWatchResourceRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *K8SDeleteWatchResourceRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

type K8SDeleteWatchResourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *K8SDeleteWatchResourceResponse) Reset() {
	*x = K8SDeleteWatchResourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SDeleteWatchResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SDeleteWatchResourceResponse) ProtoMessage() {}

func (x *K8SDeleteWatchResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SDeleteWatchResourceResponse.ProtoReflect.Descriptor instead.
func (*K8SDeleteWatchResourceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{141}
}

func (x *K8SDeleteWatchResourceResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *K8SDeleteWatchResourceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *K8SDeleteWatchResourceResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *K8SDeleteWatchResourceResponse) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type K8SListWatchResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace    string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceType string `protobuf:"bytes,3,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
}

func (x *K8SListWatchResourceRequest) Reset() {
	*x = K8SListWatchResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SListWatchResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SListWatchResourceRequest) ProtoMessage() {}

func (x *K8SListWatchResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SListWatchResourceRequest.ProtoReflect.Descriptor instead.
func (*K8SListWatchResourceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{142}
}

func (x *K8SListWatchResourceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *K8SListWatchResourceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *K8SListWatchResourceRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

type K8SListWatchResourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool     `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    []string `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *K8SListWatchResourceResponse) Reset() {
	*x = K8SListWatchResourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_bcs_storage_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SListWatchResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SListWatchResourceResponse) ProtoMessage() {}

func (x *K8SListWatchResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_bcs_storage_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SListWatchResourceResponse.ProtoReflect.Descriptor instead.
func (*K8SListWatchResourceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_bcs_storage_proto_rawDescGZIP(), []int{143}
}

func (x *K8SListWatchResourceResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *K8SListWatchResourceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *K8SListWatchResourceResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *K8SListWatchResourceResponse) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_pkg_proto_bcs_storage_proto protoreflect.FileDescriptor

var file_pkg_proto_bcs_storage_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x63, 0x73, 0x2d,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x04, 0x0a, 0x05, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83,
	0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef,
	0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b,
	0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18,
	0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d,
	0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9,
	0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x0c,
	0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe6, 0xa8, 0xa1,
	0xe5, 0x9d, 0x97, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1f,
	0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x32, 0x0c, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x0f, 0xe4, 0xb8, 0x8a, 0xe6, 0x8a, 0xa5, 0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x1a, 0x92, 0x41, 0x17, 0x0a, 0x15, 0x2a, 0x05, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x32, 0x0c, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0x22, 0x90, 0x05, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5,
	0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42,
	0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72,
	0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0x8a, 0xe8, 0xad,
	0xa6, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x32, 0x0c, 0xe5,
	0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x32, 0x0c, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x52, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32,
	0x0c, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x91,
	0x8a, 0xe8, 0xad, 0xa6, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0f, 0xe4, 0xb8, 0x8a, 0xe6,
	0x8a, 0xa5, 0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x3a, 0x62, 0x92, 0x41, 0x5f, 0x0a, 0x5d, 0x2a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x31, 0xe6, 0x8e, 0xa5, 0xe6,
	0x94, 0xb6, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe4, 0xbf, 0x9d, 0xe5, 0xad, 0x98,
	0xe5, 0x88, 0xb0, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0xe4, 0xb8, 0xad, 0xd2, 0x01, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xbd, 0x02, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x49, 0x92, 0x41, 0x46, 0x0a,
	0x44, 0x2a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x17, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0xe4, 0xbf, 0x9d, 0xe5, 0xad, 0x98, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd2, 0x05, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92,
	0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42,
	0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4,
	0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa,
	0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92,
	0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5,
	0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0x8a, 0xe8,
	0xad, 0xa6, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x32, 0x0c, 0xe5,
	0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x52, 0x06, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe5, 0x91,
	0x8a, 0xe8, 0xad, 0xa6, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x32, 0x0c, 0xe9,
	0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x32, 0x0c, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12,
	0x34, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x32, 0x0c,
	0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x32, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb,
	0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x25, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87,
	0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x18, 0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a,
	0x49, 0x92, 0x41, 0x46, 0x0a, 0x44, 0x2a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x8d, 0x03, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x47, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x32, 0x0c, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae,
	0xb5, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x3a, 0x50, 0x92, 0x41, 0x4d, 0x0a, 0x4b, 0x2a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x1e, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe3, 0x01, 0x0a, 0x0d, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7e, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32,
	0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc,
	0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58,
	0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53,
	0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92,
	0x41, 0x11, 0x2a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x32, 0x06, 0xe6, 0x9c, 0x8d,
	0xe5, 0x8a, 0xa1, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x22, 0x92, 0x41,
	0x1f, 0x0a, 0x1d, 0x2a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x32, 0x0c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
	0x22, 0x8f, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32,
	0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc,
	0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58,
	0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53,
	0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92,
	0x41, 0x11, 0x2a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x32, 0x06, 0xe6, 0x9c, 0x8d,
	0xe5, 0x8a, 0xa1, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x44, 0x92, 0x41,
	0x41, 0x0a, 0x3f, 0x2a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x12, 0x44, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x32, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x0f, 0x92,
	0x41, 0x0c, 0x2a, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x32, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x52, 0x04,
	0x63, 0x6f, 0x6e, 0x66, 0x3a, 0x1e, 0x92, 0x41, 0x1b, 0x0a, 0x19, 0x2a, 0x09, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x32, 0x0c, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0x9b,
	0x86, 0xe5, 0x90, 0x88, 0x22, 0x89, 0x02, 0x0a, 0x0a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83,
	0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef,
	0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b,
	0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18,
	0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d,
	0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x32, 0x0c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
	0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a,
	0x1f, 0x92, 0x41, 0x1c, 0x0a, 0x1a, 0x2a, 0x0a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x32, 0x0c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0x9b, 0x86, 0xe5, 0x90, 0x88,
	0x22, 0xcf, 0x02, 0x0a, 0x0c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x32, 0x06, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x5a, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x32, 0x0c, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a,
	0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x32, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x0d, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x32, 0x0c, 0xe7, 0xa8, 0xb3, 0xe5, 0xae, 0x9a, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a,
	0x21, 0x92, 0x41, 0x1e, 0x0a, 0x1c, 0x2a, 0x0c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x32, 0x0c, 0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0xe9, 0x85, 0x8d, 0xe7,
	0xbd, 0xae, 0x22, 0xd0, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3c,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x57, 0x92, 0x41,
	0x54, 0x0a, 0x52, 0x2a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1e, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfd, 0x02, 0x0a, 0x11, 0x42, 0x63, 0x73, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41,
	0x11, 0x2a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x32, 0x06, 0xe6, 0x9c, 0x8d, 0xe5,
	0x8a, 0xa1, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x7a,
	0x6b, 0x49, 0x50, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x04,
	0x7a, 0x6b, 0x49, 0x50, 0x32, 0x0b, 0x7a, 0x6b, 0x20, 0x49, 0x50, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d,
	0x80, 0x52, 0x04, 0x7a, 0x6b, 0x49, 0x50, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x50, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x08,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x50, 0x32, 0x0f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x20, 0x49, 0x50, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x50, 0x12, 0x2e, 0x0a, 0x05, 0x64, 0x6e, 0x73, 0x49, 0x50, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x64, 0x6e, 0x73, 0x49, 0x50, 0x32, 0x0c,
	0x64, 0x6e, 0x73, 0x20, 0x49, 0x50, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x05, 0x64, 0x6e,
	0x73, 0x49, 0x50, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x32, 0x06, 0xe5, 0x9f,
	0x8e, 0xe5, 0xb8, 0x82, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x08, 0x6a, 0x66,
	0x72, 0x6f, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41,
	0x0a, 0x2a, 0x08, 0x6a, 0x66, 0x72, 0x6f, 0x67, 0x55, 0x72, 0x6c, 0x52, 0x08, 0x6a, 0x66, 0x72,
	0x6f, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x2a, 0x07, 0x6e, 0x65, 0x65,
	0x64, 0x4e, 0x61, 0x74, 0x52, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x74, 0x3a, 0x26, 0x92,
	0x41, 0x23, 0x0a, 0x21, 0x2a, 0x11, 0x42, 0x63, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x0c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22, 0xbb, 0x04, 0x0a, 0x17, 0x50, 0x75, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4,
	0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c,
	0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53,
	0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32,
	0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24,
	0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x11, 0x2a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x32, 0x06, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x7a, 0x6b, 0x49, 0x50,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x04, 0x7a, 0x6b, 0x49,
	0x50, 0x32, 0x0b, 0x7a, 0x6b, 0x20, 0x49, 0x50, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x04,
	0x7a, 0x6b, 0x49, 0x50, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x50,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x08, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x50, 0x32, 0x0f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x20, 0x49, 0x50,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x50,
	0x12, 0x2e, 0x0a, 0x05, 0x64, 0x6e, 0x73, 0x49, 0x50, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x64, 0x6e, 0x73, 0x49, 0x50, 0x32, 0x0c, 0x64, 0x6e, 0x73,
	0x20, 0x49, 0x50, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x05, 0x64, 0x6e, 0x73, 0x49, 0x50,
	0x12, 0x25, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x2a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x32, 0x06, 0xe5, 0x9f, 0x8e, 0xe5, 0xb8,
	0x82, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x08, 0x6a, 0x66, 0x72, 0x6f, 0x67,
	0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x2a, 0x08,
	0x6a, 0x66, 0x72, 0x6f, 0x67, 0x55, 0x72, 0x6c, 0x52, 0x08, 0x6a, 0x66, 0x72, 0x6f, 0x67, 0x55,
	0x72, 0x6c, 0x12, 0x26, 0x0a, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x2a, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x4e, 0x61,
	0x74, 0x52, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x74, 0x3a, 0x57, 0x92, 0x41, 0x54, 0x0a,
	0x52, 0x2a, 0x17, 0x50, 0x75, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x21, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe6, 0x88, 0x96, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x22, 0xd9, 0x02, 0x0a, 0x18, 0x50, 0x75, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x60, 0x92,
	0x41, 0x5d, 0x0a, 0x5b, 0x2a, 0x18, 0x50, 0x75, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x27,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0x85, 0x8d, 0xe7,
	0xbd, 0xae, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x88, 0x96, 0xe4, 0xbf, 0xae, 0xe6, 0x94,
	0xb9, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xcf, 0x03, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xc7, 0x01, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0xa8, 0x01, 0x92, 0x41, 0x84, 0x01, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x32, 0x77, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7,
	0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc,
	0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58,
	0x58, 0x58, 0x58, 0x28, 0xe4, 0xb8, 0x8e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x4e, 0x6f, 0x74, 0xe4, 0xba, 0x92, 0xe6, 0x96, 0xa5, 0xef, 0xbc, 0x8c, 0xe8, 0x8b, 0xa5, 0xef,
	0xbc, 0x8c, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe6, 0x9c, 0xac, 0xe5, 0xad, 0x97, 0xe6, 0xae,
	0xb5, 0xe8, 0xaf, 0xb7, 0xe5, 0x8b, 0xbf, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x4e, 0x6f, 0x74, 0x29, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10,
	0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x76, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x4e, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x52, 0x92, 0x41, 0x4f,
	0x2a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x4e, 0x6f, 0x74, 0x32, 0x3f,
	0xe4, 0xb8, 0x8e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xe4, 0xba, 0x92, 0xe6,
	0x96, 0xa5, 0xef, 0xbc, 0x8c, 0xe8, 0x8b, 0xa5, 0xef, 0xbc, 0x8c, 0xe4, 0xbd, 0xbf, 0xe7, 0x94,
	0xa8, 0xe6, 0x9c, 0xac, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe8, 0xaf, 0xb7, 0xe5, 0x8b, 0xbf,
	0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x4e, 0x6f, 0x74, 0x12, 0x2e, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0x92, 0x41, 0x11, 0x2a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x32, 0x06, 0xe6, 0x9c,
	0x8d, 0xe5, 0x8a, 0xa1, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x42, 0x92,
	0x41, 0x3f, 0x0a, 0x3d, 0x2a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe9, 0x85, 0x8d, 0xe7, 0xbd,
	0xae, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x22, 0xd0, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3c, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x57, 0x92, 0x41, 0x54,
	0x0a, 0x52, 0x2a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1e, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x9d, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3b, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x21, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x32,
	0x0c, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x45, 0x92,
	0x41, 0x42, 0x0a, 0x40, 0x2a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1b, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xa8, 0xb3, 0xe5, 0xae, 0x9a, 0xe7, 0x89, 0x88, 0xe6, 0x9c,
	0xac, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0xa4, 0xb4, 0xd2, 0x01, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x22, 0xb9, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x57, 0x92, 0x41, 0x54, 0x0a, 0x52, 0x2a, 0x18,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1e, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe7, 0xa8, 0xb3, 0xe5, 0xae, 0x9a, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2,
	0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xd8, 0x01, 0x0a, 0x17, 0x50, 0x75, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92,
	0x41, 0x11, 0x2a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x32, 0x06, 0xe6, 0x9c, 0x8d,
	0xe5, 0x8a, 0xa1, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x11, 0x2a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x32, 0x06, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x4f, 0x92, 0x41, 0x4c, 0x0a,
	0x4a, 0x2a, 0x17, 0x50, 0x75, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1b, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe7, 0xa8, 0xb3, 0xe5, 0xae, 0x9a, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0xa4, 0xb4, 0xd2, 0x01, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0xd2, 0x01, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb9, 0x02, 0x0a, 0x18,
	0x50, 0x75, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7,
	0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x57,
	0x92, 0x41, 0x54, 0x0a, 0x52, 0x2a, 0x18, 0x50, 0x75, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x1e, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xa8, 0xb3, 0xe5, 0xae, 0x9a, 0xe7, 0x89, 0x88,
	0xe6, 0x9c, 0xac, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2,
	0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xeb, 0x02, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85,
	0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49,
	0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53,
	0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10,
	0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d,
	0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32,
	0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x18, 0x92, 0x41, 0x15,
	0x0a, 0x13, 0x2a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x32, 0x06, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0x22, 0xf0, 0x06, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86,
	0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43,
	0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b,
	0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90,
	0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c,
	0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x32, 0x0c, 0xe6, 0x89,
	0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0d, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe9, 0x80,
	0x89, 0xe6, 0x8b, 0xa9, 0xe5, 0x99, 0xa8, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x32, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe4, 0xb9, 0x8b, 0xe5, 0x89, 0x8d, 0x52, 0x10, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x3b, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x23, 0x92,
	0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02,
	0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x25, 0x92, 0x41, 0x1b, 0x2a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x99, 0x90,
	0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x18, 0x0a,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x32, 0x0c, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe5, 0xad, 0x97, 0xe6,
	0xae, 0xb5, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x3a, 0x7c, 0x92, 0x41, 0x79, 0x0a,
	0x77, 0x2a, 0x1c, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x21, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5,
	0xa4, 0xb4, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xd2, 0x01, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe2, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x62, 0x92, 0x41, 0x5f, 0x0a, 0x5d,
	0x2a, 0x1d, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x24, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf9, 0x04,
	0x0a, 0x1c, 0x50, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7,
	0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc,
	0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58,
	0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42,
	0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x32, 0x0c, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6,
	0xae, 0xb5, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe5, 0x8a, 0xa8,
	0xe6, 0x80, 0x81, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a,
	0x87, 0x01, 0x92, 0x41, 0x83, 0x01, 0x0a, 0x80, 0x01, 0x2a, 0x1c, 0x50, 0x75, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x2a, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6,
	0x88, 0x96, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9,
	0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82,
	0xe5, 0xa4, 0xb4, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2,
	0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xd2, 0x01, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xeb, 0x02, 0x0a, 0x1d, 0x50, 0x75,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x6b, 0x92, 0x41, 0x68, 0x0a,
	0x66, 0x2a, 0x1d, 0x50, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x2d, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9,
	0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9,
	0xe6, 0x88, 0x96, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2,
	0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfd, 0x03, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60,
	0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30,
	0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f,
	0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58,
	0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23,
	0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c,
	0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x4a,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x26, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x7f, 0x92, 0x41, 0x7c, 0x0a, 0x7a, 0x2a, 0x1f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x21,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9,
	0x97, 0xb4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0xa4,
	0xb4, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xd2, 0x01, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe8, 0x02, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x65, 0x92, 0x41, 0x62,
	0x0a, 0x60, 0x2a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x24, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x88,
	0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x9a, 0x06, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9,
	0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44,
	0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d,
	0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02,
	0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d,
	0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7,
	0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92,
	0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x32, 0x0c,
	0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a,
	0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x09,
	0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe5, 0x99, 0xa8, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x32, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe4, 0xb9, 0x8b, 0xe5, 0x89, 0x8d, 0x52, 0x10, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12,
	0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x0f, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04,
	0x32, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x25, 0x92, 0x41, 0x1b,
	0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9,
	0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02,
	0x18, 0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x32, 0x0c, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe5, 0xad,
	0x97, 0xe6, 0xae, 0xb5, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x3a, 0x71, 0x92, 0x41,
	0x6e, 0x0a, 0x6c, 0x2a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x24, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0xd2, 0x01, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xf7, 0x02, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x3a, 0x76, 0x92, 0x41, 0x73, 0x0a, 0x71, 0x2a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x37, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe5, 0xa4, 0xb4, 0xef, 0xbc, 0x8c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcf, 0x04, 0x0a, 0x23, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4,
	0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c,
	0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53,
	0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32,
	0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24,
	0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x41, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9,
	0x97, 0xb4, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c, 0x2a,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x52, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x0f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x32,
	0x12, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x26, 0x92, 0x41, 0x23,
	0x2a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x32,
	0x12, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x3a, 0x77, 0x92, 0x41, 0x74, 0x0a, 0x72, 0x2a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x24,
	0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xd2, 0x01, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf6, 0x02, 0x0a, 0x24,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x3a, 0x6f, 0x92, 0x41, 0x6c, 0x0a, 0x6a, 0x2a, 0x24, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x2a, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9,
	0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x94, 0x06, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83,
	0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef,
	0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b,
	0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18,
	0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d,
	0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c, 0x2a, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x32, 0x0c, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xad,
	0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x43, 0x0a, 0x0d, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe5, 0x99,
	0xa8, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x55, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a,
	0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x32, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe4,
	0xb9, 0x8b, 0xe5, 0x89, 0x8d, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x32, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7,
	0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x25, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32,
	0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0,
	0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x18, 0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x32, 0x0c,
	0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x3a, 0x65, 0x92, 0x41, 0x62, 0x0a, 0x60, 0x2a, 0x1a, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd8, 0x02, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x5a, 0x92, 0x41, 0x57, 0x0a,
	0x55, 0x2a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1e,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2,
	0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9a, 0x04, 0x0a, 0x1a, 0x50, 0x75, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85,
	0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49,
	0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53,
	0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10,
	0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c,
	0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41,
	0x15, 0x2a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x32, 0x0c, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95,
	0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x44, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x0c, 0xe5, 0x8a, 0xa8, 0xe6, 0x80, 0x81, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x3a, 0x6e, 0x92, 0x41, 0x6b, 0x0a, 0x69, 0x2a, 0x1a, 0x50, 0x75, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x21, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6, 0x88,
	0x96, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xe1, 0x02, 0x0a, 0x1b, 0x50, 0x75, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x3a, 0x63, 0x92, 0x41, 0x60, 0x0a, 0x5e, 0x2a, 0x1b, 0x50, 0x75, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x27, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9,
	0xe6, 0x88, 0x96, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2,
	0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa1, 0x03, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41,
	0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43,
	0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8,
	0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42,
	0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c,
	0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x3a, 0x68, 0x92, 0x41, 0x65, 0x0a, 0x63, 0x2a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x1e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x5d, 0x92,
	0x41, 0x5a, 0x0a, 0x58, 0x2a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1e, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc1, 0x05, 0x0a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32,
	0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc,
	0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58,
	0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53,
	0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x32, 0x0c, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae,
	0xb5, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x32, 0x09, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe5, 0x99, 0xa8, 0x52, 0x0d,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x55, 0x0a,
	0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x10, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x32, 0x12,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe4, 0xb9, 0x8b, 0xe5,
	0x89, 0x8d, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x32, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9,
	0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x25, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f,
	0xfa, 0x42, 0x04, 0x32, 0x02, 0x18, 0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x31,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x32, 0x0c, 0xe9, 0xa2, 0x9d,
	0xe5, 0xa4, 0x96, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x3a, 0x5d, 0x92, 0x41, 0x5a, 0x0a, 0x58, 0x2a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1e, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0xd2, 0x01, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xe0, 0x02, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x3a, 0x61, 0x92, 0x41, 0x5e, 0x0a, 0x5c, 0x2a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x24, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xf6, 0x03, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41,
	0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43,
	0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8,
	0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42,
	0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x28,
	0x92, 0x41, 0x25, 0x2a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x32, 0x12, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x0d, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x45, 0x6e, 0x64, 0x32, 0x12, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x3a, 0x63, 0x92, 0x41, 0x60, 0x0a, 0x5e, 0x2a, 0x21,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x1e, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xec, 0x02, 0x0a,
	0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x3a, 0x67, 0x92, 0x41, 0x64, 0x0a, 0x62, 0x2a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x24, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xaf, 0x06, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41,
	0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43,
	0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8,
	0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42,
	0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41,
	0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91,
	0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c,
	0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x32, 0x0c, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92,
	0x41, 0x1a, 0x2a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x32, 0x09, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe5, 0x99, 0xa8, 0x52, 0x0d, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x10, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x10, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x32, 0x12, 0xe6, 0x9b,
	0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe4, 0xb9, 0x8b, 0xe5, 0x89, 0x8d,
	0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32,
	0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f,
	0xfa, 0x42, 0x04, 0x32, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x3b, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x25,
	0x92, 0x41, 0x1b, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa, 0x42,
	0x04, 0x32, 0x02, 0x18, 0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x31, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x32, 0x0c, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4,
	0x96, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x3a,
	0x4c, 0x92, 0x41, 0x49, 0x0a, 0x47, 0x2a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x1b, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4,
	0xb9, 0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xcb, 0x03,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x2a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x29, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x0d, 0x92, 0x41, 0x0a, 0x2a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x2a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x3a, 0x5c, 0x92,
	0x41, 0x59, 0x0a, 0x57, 0x2a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x21, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9,
	0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbb, 0x01, 0x0a, 0x1c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x4f, 0x92, 0x41, 0x4c, 0x0a, 0x4a, 0x2a,
	0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1b, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xdf, 0x02, 0x0a, 0x1d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x5f, 0x92, 0x41, 0x5c, 0x0a,
	0x5a, 0x2a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x21, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9,
	0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfe, 0x01, 0x0a, 0x19,
	0x50, 0x75, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x55, 0x92, 0x41, 0x52, 0x0a, 0x50, 0x2a, 0x19, 0x50, 0x75,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x24, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe6,
	0x88, 0x96, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9,
	0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe2, 0x02, 0x0a,
	0x1a, 0x50, 0x75, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x65, 0x92, 0x41, 0x62, 0x0a,
	0x60, 0x2a, 0x1a, 0x50, 0x75, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x2a, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe6, 0x88, 0x96, 0xe4, 0xbf, 0xae,
	0xe6, 0x94, 0xb9, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xce, 0x02, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92,
	0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x5a, 0x92, 0x41, 0x57, 0x0a, 0x55, 0x2a, 0x21, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x21, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9,
	0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xef, 0x02, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x6a, 0x92, 0x41, 0x67, 0x0a, 0x65, 0x2a,
	0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x27, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe8, 0x87, 0xaa, 0xe5, 0xae,
	0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x8e, 0x02, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x26, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x09,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc,
	0x95, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x5a, 0x92, 0x41, 0x57, 0x0a, 0x55,
	0x2a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x21, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x87, 0xaa, 0xe5, 0xae,
	0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xef, 0x02, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x6a, 0x92, 0x41, 0x67,
	0x0a, 0x65, 0x2a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x27, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe8, 0x87,
	0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb4, 0xa2,
	0xe5, 0xbc, 0x95, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2,
	0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xac, 0x04, 0x0a, 0x0c, 0x49, 0x50, 0x50, 0x6f,
	0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d,
	0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53,
	0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba,
	0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d,
	0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32,
	0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11,
	0x2a, 0x03, 0x5f, 0x69, 0x64, 0x32, 0x0a, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x20, 0x69,
	0x64, 0x52, 0x02, 0x49, 0x64, 0x3a, 0x2f, 0x92, 0x41, 0x2c, 0x0a, 0x2a, 0x2a, 0x0c, 0x49, 0x50,
	0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x32, 0x0e, 0x49, 0x50, 0x20, 0x50,
	0x6f, 0x6f, 0x6c, 0x20, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc6, 0x05, 0x0a, 0x13, 0x49, 0x50, 0x50, 0x6f, 0x6f,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7,
	0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc,
	0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58,
	0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42,
	0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32,
	0x0c, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x32, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9,
	0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x25, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f,
	0xfa, 0x42, 0x04, 0x32, 0x02, 0x18, 0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x3f,
	0x92, 0x41, 0x3c, 0x0a, 0x3a, 0x2a, 0x13, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x17, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe9, 0x9d, 0x99, 0xe6, 0x80, 0x81, 0x49, 0x50, 0xe6, 0xb1, 0xa0, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xcb, 0x02, 0x0a, 0x14, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7,
	0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f, 0x2a, 0x14,
	0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1d, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x9d, 0x99, 0xe6,
	0x80, 0x81, 0x49, 0x50, 0xe6, 0xb1, 0xa0, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa8, 0x04,
	0x0a, 0x12, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9,
	0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44,
	0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d,
	0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02,
	0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d,
	0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92,
	0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x03, 0x5f, 0x69,
	0x64, 0x32, 0x0a, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x20, 0x69, 0x64, 0x52, 0x02, 0x49,
	0x64, 0x3a, 0x25, 0x92, 0x41, 0x22, 0x0a, 0x20, 0x2a, 0x12, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0xd2, 0x01, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd8, 0x05, 0x0a, 0x19, 0x49, 0x50, 0x50,
	0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86,
	0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43,
	0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b,
	0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41,
	0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15,
	0x2a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x0c, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5,
	0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x23, 0x92, 0x41,
	0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x28,
	0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x25, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x99, 0x90, 0xe5,
	0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x18, 0x0a, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x4b, 0x92, 0x41, 0x48, 0x0a, 0x46, 0x2a, 0x19, 0x49,
	0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe9, 0x9d, 0x99, 0xe6, 0x80, 0x81, 0x49, 0x50, 0xe6, 0xb1,
	0xa0, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xdd, 0x02, 0x0a, 0x1a, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x3a, 0x60, 0x92, 0x41, 0x5d, 0x0a, 0x5b, 0x2a, 0x1a, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x23, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe8, 0xaf, 0xa6, 0xe7,
	0xbb, 0x86, 0xe9, 0x9d, 0x99, 0xe6, 0x80, 0x81, 0x49, 0x50, 0xe6, 0xb1, 0xa0, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xcb, 0x04, 0x0a, 0x03, 0x50, 0x6f, 0x64, 0x12, 0x7e, 0x0a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60,
	0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30,
	0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f,
	0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58,
	0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c,
	0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92,
	0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a,
	0x03, 0x5f, 0x69, 0x64, 0x32, 0x0a, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x20, 0x69, 0x64,
	0x52, 0x02, 0x49, 0x64, 0x3a, 0x1b, 0x92, 0x41, 0x18, 0x0a, 0x16, 0x2a, 0x03, 0x50, 0x6f, 0x64,
	0x32, 0x03, 0x70, 0x6f, 0x64, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xeb, 0x05, 0x0a, 0x0a, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6,
	0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d,
	0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a,
	0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x50, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x50,
	0x32, 0x08, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0x49, 0x50, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74,
	0x49, 0x50, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x50, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x2a, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x50, 0x32, 0x06, 0x50,
	0x6f, 0x64, 0x20, 0x49, 0x50, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x50, 0x12, 0x2b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41,
	0x10, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x06, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x32, 0x12, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe5, 0x90,
	0xaf, 0xe5, 0x8a, 0xa8, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x49, 0x0a, 0x0c, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x64, 0x32, 0x12, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe5, 0x90, 0xaf, 0xe5, 0x8a,
	0xa8, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x32, 0x0c, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x32, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb,
	0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x25, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87,
	0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x18, 0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a,
	0x2e, 0x92, 0x41, 0x2b, 0x0a, 0x29, 0x2a, 0x0a, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x70, 0x6f, 0x64, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xb1, 0x02, 0x0a, 0x0b, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x43,
	0x92, 0x41, 0x40, 0x0a, 0x3e, 0x2a, 0x0b, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x15, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x70, 0x6f, 0x64, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xe0, 0x04, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53,
	0x65, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8,
	0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc,
	0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38,
	0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64,
	0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b,
	0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x41,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x03, 0x5f, 0x69, 0x64, 0x32, 0x0a, 0x6d, 0x6f, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x20, 0x69, 0x64, 0x52, 0x02, 0x49, 0x64, 0x3a, 0x29, 0x92, 0x41, 0x26,
	0x0a, 0x24, 0x2a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x32, 0x0a,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xde, 0x06, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32,
	0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc,
	0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58,
	0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53,
	0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9,
	0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x34, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x32, 0x09, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe6, 0x95, 0xb0, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x32, 0x0f, 0xe5, 0xad, 0x98, 0xe6, 0xb4, 0xbb,
	0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe6, 0x95, 0xb0, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x4f, 0x0a, 0x0d,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x32, 0x15, 0xe5, 0x87, 0x86, 0xe5, 0xa4, 0x87, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe6, 0x95, 0xb0, 0x52, 0x0d,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x52, 0x0a,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x32, 0x12, 0xe5, 0xbc,
	0x80, 0xe5, 0xa7, 0x8b, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x32, 0x12, 0xe7, 0xbb,
	0x93, 0xe6, 0x9d, 0x9f, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12,
	0x2e, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x18,
	0x92, 0x41, 0x15, 0x2a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x0c, 0xe6, 0x89, 0xa9, 0xe5,
	0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x0f, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04,
	0x32, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x42, 0x25, 0x92, 0x41, 0x1b,
	0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9,
	0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02,
	0x18, 0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x3c, 0x92, 0x41, 0x39, 0x0a, 0x37,
	0x2a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x16, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x53, 0x65, 0x74, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc6, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x51, 0x92,
	0x41, 0x4e, 0x0a, 0x4c, 0x2a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xe9, 0x04, 0x0a, 0x0d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b,
	0x38, 0x53, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8,
	0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc,
	0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38,
	0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64,
	0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b,
	0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x41,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x03, 0x5f, 0x69, 0x64, 0x32, 0x0a, 0x6d, 0x6f, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x20, 0x69, 0x64, 0x52, 0x02, 0x49, 0x64, 0x3a, 0x2f, 0x92, 0x41, 0x2c,
	0x0a, 0x2a, 0x2a, 0x0d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x38,
	0x53, 0x32, 0x0d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x38, 0x53,
	0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xfc, 0x08, 0x0a,
	0x14, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x38, 0x53, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85,
	0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49,
	0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53,
	0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10,
	0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32,
	0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a,
	0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x32, 0x0c, 0xe5, 0xae, 0x9e, 0xe4, 0xbe,
	0x8b, 0xe4, 0xb8, 0xaa, 0xe6, 0x95, 0xb0, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x12, 0x58, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41,
	0x27, 0x2a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x32, 0x12, 0xe5, 0xad, 0x98, 0xe6, 0xb4, 0xbb, 0xe5, 0xae, 0x9e, 0xe4,
	0xbe, 0x8b, 0xe4, 0xb8, 0xaa, 0xe6, 0x95, 0xb0, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x55, 0x0a, 0x0f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x32, 0x15, 0xe5, 0xb7, 0xb2, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe4, 0xb8, 0xaa, 0xe6, 0x95,
	0xb0, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe7, 0xad, 0x96,
	0xe7, 0x95, 0xa5, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x64, 0x6e, 0x73, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x09, 0x64, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0x09, 0x44, 0x4e, 0x53, 0xe7,
	0xad, 0x96, 0xe7, 0x95, 0xa5, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x4c, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0d, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0x12, 0xe9, 0x87, 0x8d,
	0xe6, 0x96, 0xb0, 0xe6, 0x8b, 0x89, 0xe8, 0xb5, 0xb7, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0x52,
	0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x52,
	0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x32, 0x12, 0xe5,
	0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x32, 0x12, 0xe7,
	0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x12, 0x3e, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x0c, 0xe6, 0x89, 0xa9,
	0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x0f, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0xfa, 0x42,
	0x04, 0x32, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x42, 0x25, 0x92, 0x41,
	0x1b, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32,
	0x02, 0x18, 0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x3f, 0x92, 0x41, 0x3c, 0x0a,
	0x3a, 0x2a, 0x14, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x38, 0x53,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x16, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2,
	0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xcc, 0x02, 0x0a, 0x15,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f, 0x2a, 0x15, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x1c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c,
	0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xdc, 0x04, 0x0a, 0x0a, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x38, 0x53, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41,
	0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43,
	0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8,
	0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42,
	0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41,
	0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91,
	0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a,
	0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x03, 0x5f,
	0x69, 0x64, 0x32, 0x0a, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x20, 0x69, 0x64, 0x52, 0x02,
	0x49, 0x64, 0x3a, 0x25, 0x92, 0x41, 0x22, 0x0a, 0x20, 0x2a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4b, 0x38, 0x53, 0x32, 0x06, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xd2, 0x01, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xdc, 0x05, 0x0a, 0x11, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0,
	0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58,
	0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04,
	0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90,
	0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x50, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x50, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x50, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x50, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x32, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x52, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x32, 0x12, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41,
	0x23, 0x2a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x32, 0x12, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x0c,
	0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x32, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87,
	0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x25, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa,
	0x42, 0x04, 0x32, 0x02, 0x18, 0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x39, 0x92,
	0x41, 0x36, 0x0a, 0x34, 0x2a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x38, 0x53,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x13, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc3, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x4e,
	0x92, 0x41, 0x4b, 0x0a, 0x49, 0x2a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x38,
	0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x19, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe6,
	0x04, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x4b, 0x38, 0x53, 0x12,
	0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0,
	0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58,
	0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04,
	0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x25, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0x92, 0x41, 0x11, 0x2a, 0x03, 0x5f, 0x69, 0x64, 0x32, 0x0a, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x20, 0x69, 0x64, 0x52, 0x02, 0x49, 0x64, 0x3a, 0x2d, 0x92, 0x41, 0x2a, 0x0a, 0x28, 0x2a,
	0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x4b, 0x38, 0x53, 0x32, 0x0c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x4b, 0x38, 0x53, 0xd2, 0x01, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc3, 0x05, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x61, 0x70, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0,
	0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58,
	0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04,
	0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90,
	0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25,
	0x2a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x32, 0x12, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92,
	0x41, 0x23, 0x2a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x32, 0x12, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x45, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32,
	0x0c, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x32, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9,
	0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x25, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f,
	0xfa, 0x42, 0x04, 0x32, 0x02, 0x18, 0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x3d,
	0x92, 0x41, 0x3a, 0x0a, 0x38, 0x2a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70,
	0x4b, 0x38, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x15, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc9, 0x02,
	0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x4b, 0x38, 0x53, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32,
	0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x52, 0x92, 0x41, 0x4f, 0x0a, 0x4d, 0x2a, 0x14, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x1b, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4d, 0x61, 0x70, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2,
	0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0xd2,
	0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xda, 0x04, 0x0a, 0x09, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5,
	0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42,
	0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72,
	0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32,
	0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32,
	0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x03, 0x5f, 0x69, 0x64,
	0x32, 0x0a, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x20, 0x69, 0x64, 0x52, 0x02, 0x49, 0x64,
	0x3a, 0x24, 0x92, 0x41, 0x21, 0x0a, 0x1f, 0x2a, 0x09, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b,
	0x38, 0x53, 0x32, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc0, 0x07, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60,
	0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30,
	0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f,
	0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58,
	0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x52,
	0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x32, 0x12, 0xe5,
	0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x32, 0x12, 0xe7,
	0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41,
	0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a,
	0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x32, 0x0c, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x32, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7,
	0xbb, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x25, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9,
	0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x18, 0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x3a, 0x37, 0x92, 0x41, 0x34, 0x0a, 0x32, 0x2a, 0x10, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b,
	0x38, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc0, 0x02, 0x0a, 0x11, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x4c,
	0x92, 0x41, 0x49, 0x0a, 0x47, 0x2a, 0x11, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x38, 0x53,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x18, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe7, 0x04, 0x0a,
	0x0c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4b, 0x38, 0x53, 0x12, 0x7e, 0x0a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94,
	0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5,
	0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58,
	0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43,
	0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x25, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41,
	0x11, 0x2a, 0x03, 0x5f, 0x69, 0x64, 0x32, 0x0a, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x20,
	0x69, 0x64, 0x52, 0x02, 0x49, 0x64, 0x3a, 0x2e, 0x92, 0x41, 0x2b, 0x0a, 0x29, 0x2a, 0x0c, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4b, 0x38, 0x53, 0x32, 0x0d, 0x6b, 0x38, 0x73,
	0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe1, 0x03, 0x0a, 0x13, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7,
	0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc,
	0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58,
	0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42,
	0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d,
	0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x0c, 0xe6, 0x89,
	0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x0f,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0xfa,
	0x42, 0x04, 0x32, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3b,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x25, 0x92,
	0x41, 0x1b, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04,
	0x32, 0x02, 0x18, 0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x3d, 0x92, 0x41, 0x3a,
	0x0a, 0x38, 0x2a, 0x13, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4b, 0x38, 0x53,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc9, 0x02, 0x0a, 0x14, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x3a, 0x52, 0x92, 0x41, 0x4f, 0x0a, 0x4d, 0x2a, 0x14, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x1b, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0xd2, 0x01, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd7, 0x04, 0x0a, 0x07, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8,
	0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc,
	0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38,
	0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64,
	0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b,
	0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x41,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x03, 0x5f, 0x69, 0x64, 0x32, 0x0a, 0x6d, 0x6f, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x20, 0x69, 0x64, 0x52, 0x02, 0x49, 0x64, 0x3a, 0x23, 0x92, 0x41, 0x20,
	0x0a, 0x1e, 0x2a, 0x07, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x32, 0x07, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xf7, 0x04, 0x0a, 0x0e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83,
	0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef,
	0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b,
	0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18,
	0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d,
	0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92,
	0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5,
	0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x28, 0x92, 0x41, 0x25, 0x2a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x32, 0x12, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x32, 0x12, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x32, 0x0c, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae,
	0xb5, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f,
	0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x25, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95,
	0xb0, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x18, 0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x3a, 0x36, 0x92, 0x41, 0x33, 0x0a, 0x31, 0x2a, 0x0e, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x13, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xbd, 0x02, 0x0a, 0x0f, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x4b, 0x92,
	0x41, 0x48, 0x0a, 0x46, 0x2a, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x19, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c,
	0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa4, 0x04, 0x0a, 0x09, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d,
	0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53,
	0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba,
	0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d,
	0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32,
	0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11,
	0x2a, 0x03, 0x5f, 0x69, 0x64, 0x32, 0x0a, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x20, 0x69,
	0x64, 0x52, 0x02, 0x49, 0x64, 0x3a, 0x2a, 0x92, 0x41, 0x27, 0x0a, 0x25, 0x2a, 0x09, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7,
	0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xb7, 0x06, 0x0a, 0x13, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b,
	0x38, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41,
	0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43,
	0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8,
	0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42,
	0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0x92, 0x41, 0x08, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28,
	0x92, 0x41, 0x25, 0x2a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x32, 0x12, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x45, 0x6e, 0x64, 0x32, 0x12, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x32, 0x0c, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x71, 0x92, 0x41, 0x6e, 0x2a, 0x04, 0x75, 0x73, 0x65,
	0x64, 0x32, 0x66, 0xe5, 0x85, 0xa8, 0xe9, 0x87, 0x8f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xef,
	0xbc, 0x8c, 0xe5, 0xbd, 0x93, 0x75, 0x73, 0x65, 0x64, 0x3d, 0x31, 0xef, 0xbc, 0x8c, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x80, 0x92, 0xe5, 0xbd, 0x92, 0xe9, 0x81, 0x8d, 0xe5, 0x8e, 0x86,
	0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xef, 0xbc, 0x8c, 0xe5,
	0x90, 0xa6, 0xe5, 0x88, 0x99, 0xef, 0xbc, 0x8c, 0xe4, 0xbb, 0x85, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe4, 0xb8, 0x8b,
	0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12,
	0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x0f, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04,
	0x32, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x25, 0x92, 0x41, 0x1b,
	0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9,
	0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02,
	0x18, 0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x40, 0x92, 0x41, 0x3d, 0x0a, 0x3b,
	0x2a, 0x13, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x38, 0x53, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x91, 0xbd,
	0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2,
	0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xcc, 0x02, 0x0a, 0x14,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x3a, 0x55, 0x92, 0x41, 0x52, 0x0a, 0x50, 0x2a, 0x14, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x1e, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9,
	0xba, 0xe9, 0x97, 0xb4, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c,
	0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x94, 0x04, 0x0a, 0x04, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83,
	0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef,
	0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b,
	0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18,
	0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d,
	0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32,
	0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32,
	0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x03, 0x5f, 0x69, 0x64,
	0x32, 0x0a, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x20, 0x69, 0x64, 0x52, 0x02, 0x49, 0x64,
	0x3a, 0x1f, 0x92, 0x41, 0x1c, 0x0a, 0x1a, 0x2a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x32, 0x06, 0xe8,
	0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xad, 0x05, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4,
	0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c,
	0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53,
	0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32,
	0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24,
	0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x32, 0x08, 0xe5,
	0xa4, 0x96, 0xe9, 0x83, 0xa8, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x44, 0x12, 0x52, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41,
	0x25, 0x2a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x32, 0x12, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26,
	0x92, 0x41, 0x23, 0x2a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x32, 0x12, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x32, 0x0c, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x32, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb,
	0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x25, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87,
	0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x18, 0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a,
	0x30, 0x92, 0x41, 0x2d, 0x0a, 0x2b, 0x2a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x10, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x6e, 0x6f, 0x64, 0x65, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xb4, 0x02, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x3a, 0x45, 0x92, 0x41, 0x42, 0x0a, 0x40, 0x2a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x16, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x6e, 0x6f,
	0x64, 0x65, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0xd2, 0x01,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xdd, 0x04, 0x0a, 0x09, 0x44, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86,
	0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43,
	0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b,
	0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90,
	0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c,
	0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32,
	0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92,
	0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x03, 0x5f, 0x69, 0x64, 0x32,
	0x0a, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x20, 0x69, 0x64, 0x52, 0x02, 0x49, 0x64, 0x3a,
	0x27, 0x92, 0x41, 0x24, 0x0a, 0x22, 0x2a, 0x09, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x32, 0x09, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0xd2, 0x01, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xab, 0x07, 0x0a, 0x10, 0x44, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94,
	0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5,
	0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58,
	0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43,
	0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7,
	0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x52, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x32,
	0x12, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23,
	0x2a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x32,
	0x12, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f,
	0x2a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52,
	0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x03, 0x75, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92,
	0x41, 0x0b, 0x2a, 0x03, 0x75, 0x49, 0x44, 0x32, 0x04, 0x75, 0x75, 0x69, 0x64, 0x52, 0x03, 0x75,
	0x49, 0x44, 0x12, 0x3b, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x0a, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3a, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x32, 0x06, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x52, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x12, 0x43, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x0c, 0xe6, 0x89, 0xa9,
	0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x0f, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0xfa, 0x42,
	0x04, 0x32, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x42, 0x25, 0x92, 0x41,
	0x1b, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32,
	0x02, 0x18, 0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x3a, 0x92, 0x41, 0x37, 0x0a,
	0x35, 0x2a, 0x10, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc3, 0x02, 0x0a, 0x11, 0x44, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x4f, 0x92, 0x41, 0x4c,
	0x0a, 0x4a, 0x2a, 0x11, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1b, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xcb, 0x04, 0x0a,
	0x03, 0x4a, 0x6f, 0x62, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9,
	0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44,
	0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d,
	0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02,
	0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d,
	0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7,
	0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41,
	0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a,
	0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x03, 0x5f, 0x69, 0x64, 0x32, 0x0a, 0x6d,
	0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x20, 0x69, 0x64, 0x52, 0x02, 0x49, 0x64, 0x3a, 0x1b, 0x92,
	0x41, 0x18, 0x0a, 0x16, 0x2a, 0x03, 0x4a, 0x6f, 0x62, 0x32, 0x03, 0x6a, 0x6f, 0x62, 0xd2, 0x01,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xdb, 0x05, 0x0a, 0x0a, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41,
	0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43,
	0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8,
	0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42,
	0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97,
	0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x32, 0x12, 0xe5, 0xbc, 0x80,
	0xe5, 0xa7, 0x8b, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x32, 0x12, 0xe7, 0xbb, 0x93,
	0xe6, 0x9d, 0x9f, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x4c,
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0c, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x03,
	0x75, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x2a, 0x03,
	0x75, 0x49, 0x44, 0x32, 0x04, 0x75, 0x75, 0x69, 0x64, 0x52, 0x03, 0x75, 0x49, 0x44, 0x12, 0x2e,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x18, 0x92,
	0x41, 0x15, 0x2a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x0c, 0xe6, 0x89, 0xa9, 0xe5, 0xb1,
	0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3b,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x23,
	0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x0f, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32,
	0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x25, 0x92, 0x41, 0x1b, 0x2a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x99,
	0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x18,
	0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x2e, 0x92, 0x41, 0x2b, 0x0a, 0x29, 0x2a,
	0x0a, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x0f, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0x6a, 0x6f, 0x62, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb1, 0x02, 0x0a, 0x0b, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7,
	0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x43, 0x92, 0x41, 0x40, 0x0a, 0x3e, 0x2a, 0x0b,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x15, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0x6a, 0x6f, 0x62, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe3, 0x04, 0x0a,
	0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x74, 0x12, 0x7e, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32,
	0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc,
	0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58,
	0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53,
	0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32,
	0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32,
	0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11,
	0x2a, 0x03, 0x5f, 0x69, 0x64, 0x32, 0x0a, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x20, 0x69,
	0x64, 0x52, 0x02, 0x49, 0x64, 0x3a, 0x2b, 0x92, 0x41, 0x28, 0x0a, 0x26, 0x2a, 0x0b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x74, 0x32, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x66, 0x75, 0x6c, 0x53, 0x65, 0x74, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xf3, 0x07, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41,
	0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43,
	0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8,
	0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42,
	0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97,
	0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x32, 0x12, 0xe5, 0xbc, 0x80,
	0xe5, 0xa7, 0x8b, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x32, 0x12, 0xe7, 0xbb, 0x93,
	0xe6, 0x9d, 0x9f, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x4c,
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0c, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x03,
	0x75, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x2a, 0x03,
	0x75, 0x49, 0x44, 0x32, 0x04, 0x75, 0x75, 0x69, 0x64, 0x52, 0x03, 0x75, 0x49, 0x44, 0x12, 0x3b,
	0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x32, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0a, 0x70,
	0x6f, 0x64, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x0a, 0x70, 0x6f, 0x64, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x32, 0x0f, 0x50, 0x6f, 0x64, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe7, 0xad, 0x96, 0xe7, 0x95,
	0xa5, 0x52, 0x0a, 0x70, 0x6f, 0x64, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x43, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a,
	0xa1, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32,
	0x0c, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x32, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9,
	0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x25, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f,
	0xfa, 0x42, 0x04, 0x32, 0x02, 0x18, 0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x38,
	0x92, 0x41, 0x35, 0x0a, 0x33, 0x2a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x11, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x74, 0xd2, 0x01, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc9, 0x02, 0x0a, 0x13, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a,
	0x53, 0x92, 0x41, 0x50, 0x0a, 0x4e, 0x2a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1d, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x74, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xe3, 0x02, 0x0a, 0x13, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x79, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x5b, 0x92, 0x41, 0x38, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32,
	0x2b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x28, 0xe4, 0xbb, 0x8e, 0xe5, 0x93, 0xaa,
	0xe4, 0xb8, 0xaa, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4,
	0xba, 0x86, 0xe8, 0xaf, 0xa5, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x29, 0xfa, 0x42, 0x1d, 0x72,
	0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92,
	0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13,
	0x92, 0x41, 0x10, 0x2a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x06, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3d, 0x92, 0x41, 0x3a,
	0x0a, 0x38, 0x2a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x17, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x77, 0x61, 0x74,
	0x63, 0x68, 0xe6, 0x9f, 0x90, 0xe4, 0xb8, 0xaa, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xd2, 0x01,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x14, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x33, 0x92, 0x41, 0x30, 0x0a,
	0x2e, 0x2a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x11, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x77, 0x61, 0x74,
	0x63, 0x68, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x99, 0x02, 0x0a, 0x15, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x79, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x92, 0x41,
	0x38, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x2b, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x28, 0xe4, 0xbb, 0x8e, 0xe5, 0x93, 0xaa, 0xe4, 0xb8, 0xaa,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xba, 0x86, 0xe8,
	0xaf, 0xa5, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x29, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02,
	0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d,
	0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x13, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x06, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3d, 0x92, 0x41,
	0x3a, 0x0a, 0x38, 0x2a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x17, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x77, 0x61,
	0x74, 0x63, 0x68, 0xe6, 0x9f, 0x90, 0xe4, 0xb8, 0xaa, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xd2,
	0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x16,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x33, 0x92,
	0x41, 0x30, 0x0a, 0x2e, 0x2a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x11, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0x77, 0x61, 0x74, 0x63, 0x68, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d,
	0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x32, 0x06, 0xe7, 0xa7, 0x8d, 0xe7, 0xb1, 0xbb, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x3a,
	0x2c, 0x92, 0x41, 0x29, 0x0a, 0x27, 0x2a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x15, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe7, 0x9a,
	0x84, 0xe7, 0x89, 0xb9, 0xe5, 0xae, 0x9a, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22, 0xb5, 0x07,
	0x0a, 0x0f, 0x42, 0x63, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x79, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x92, 0x41, 0x38, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x32, 0x2b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x28, 0xe4,
	0xbb, 0x8e, 0xe5, 0x93, 0xaa, 0xe4, 0xb8, 0xaa, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xba, 0x86, 0xe8, 0xaf, 0xa5, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6,
	0x29, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53,
	0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x2a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x32, 0x37, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xef, 0xbc, 0x8c,
	0xe5, 0xb1, 0x9e, 0xe4, 0xba, 0x8e, 0xe5, 0x93, 0xaa, 0xe7, 0xa7, 0x8d, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0x28, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef,
	0xbc, 0x9a, 0x70, 0x6f, 0x64, 0xe3, 0x80, 0x81, 0x72, 0x63, 0xe7, 0xad, 0x89, 0x29, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x5c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x32, 0x15, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe7, 0x9a, 0x84, 0xe7, 0x89, 0xb9, 0xe5, 0xae,
	0x9a, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x51, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x20, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe5, 0x8f, 0x91, 0xe7,
	0x94, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x29, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x03, 0x65, 0x6e, 0x76, 0x32, 0x14, 0xe7, 0x8e,
	0xaf, 0xe5, 0xa2, 0x83, 0x28, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x6b, 0x38,
	0x73, 0x29, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x6d, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0x92, 0x41, 0x4c, 0x2a,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x32, 0x3f, 0xe7, 0xbb, 0x84, 0xe4,
	0xbb, 0xb6, 0xef, 0xbc, 0x8c, 0xe5, 0x93, 0xaa, 0xe4, 0xb8, 0xaa, 0xe7, 0xbb, 0x84, 0xe4, 0xbb,
	0xb6, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0xaf, 0xa5, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6,
	0x28, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0xe3, 0x80, 0x81, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0xe7, 0xad, 0x89, 0x29, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32,
	0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41,
	0x21, 0x2a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x18, 0xe5, 0xb1, 0x82, 0xe7, 0xba, 0xa7,
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0xe3, 0x80, 0x81, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x29, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x4e, 0x0a, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41,
	0x2d, 0x2a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x20, 0xe4, 0xba,
	0x8b, 0xe4, 0xbb, 0xb6, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0xe5, 0x8f, 0x91, 0xe7, 0x94, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x29, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18,
	0x2a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x32, 0x0c, 0xe4, 0xba, 0x8b, 0xe4,
	0xbb, 0xb6, 0xe7, 0xbb, 0x86, 0xe8, 0x8a, 0x82, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0x92, 0x41, 0x11, 0x2a, 0x03, 0x5f, 0x69, 0x64, 0x32, 0x0a, 0x6d, 0x6f, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x20, 0x69, 0x64, 0x52, 0x02, 0x49, 0x64, 0x3a, 0x2a, 0x92, 0x41, 0x27, 0x0a, 0x25,
	0x2a, 0x0f, 0x42, 0x63, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x32, 0x06, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x98, 0x08, 0x0a, 0x0f, 0x50, 0x75, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x02, 0x69, 0x64, 0x32, 0x0c,
	0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92,
	0x41, 0x1b, 0x2a, 0x03, 0x65, 0x6e, 0x76, 0x32, 0x14, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0x28,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x6b, 0x38, 0x73, 0x29, 0x52, 0x03, 0x65,
	0x6e, 0x76, 0x12, 0x56, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x42, 0x92, 0x41, 0x3f, 0x2a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x32, 0x37, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0xef, 0xbc, 0x8c, 0xe5, 0xb1, 0x9e, 0xe4, 0xba, 0x8e, 0xe5, 0x93, 0xaa, 0xe7,
	0xa7, 0x8d, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x28, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9a, 0x70, 0x6f, 0x64, 0xe3, 0x80, 0x81, 0x72, 0x63,
	0xe7, 0xad, 0x89, 0x29, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x18, 0xe5, 0xb1, 0x82, 0xe7, 0xba, 0xa7, 0x28, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0xe3, 0x80, 0x81, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x29, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x6d, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0x92, 0x41, 0x4c, 0x2a, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x32, 0x3f, 0xe7, 0xbb, 0x84, 0xe4, 0xbb,
	0xb6, 0xef, 0xbc, 0x8c, 0xe5, 0x93, 0xaa, 0xe4, 0xb8, 0xaa, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0xaf, 0xa5, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x28,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0xe3, 0x80, 0x81, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0xe7, 0xad, 0x89, 0x29, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x06,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x08,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b,
	0x92, 0x41, 0x18, 0x2a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x32, 0x0c, 0xe4,
	0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe7, 0xbb, 0x86, 0xe8, 0x8a, 0x82, 0x52, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x79, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x92, 0x41, 0x38, 0x2a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x2b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0x49, 0x44, 0x28, 0xe4, 0xbb, 0x8e, 0xe5, 0x93, 0xaa, 0xe4, 0xb8, 0xaa, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xba, 0x86, 0xe8, 0xaf, 0xa5, 0xe4, 0xba,
	0x8b, 0xe4, 0xbb, 0xb6, 0x29, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a,
	0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x4e, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x2a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x32, 0x20, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x28, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe5, 0x8f, 0x91, 0xe7, 0x94, 0x9f, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x29, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x5c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x25, 0x92, 0x41,
	0x22, 0x2a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x15, 0xe4, 0xba,
	0x8b, 0xe4, 0xbb, 0xb6, 0xe7, 0x9a, 0x84, 0xe7, 0x89, 0xb9, 0xe5, 0xae, 0x9a, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92,
	0x41, 0x15, 0x2a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x0c, 0xe6, 0x89, 0xa9, 0xe5, 0xb1,
	0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3b,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x42, 0x23,
	0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x0f, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32,
	0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x42, 0x25, 0x92, 0x41, 0x1b, 0x2a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x99,
	0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x18,
	0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x36, 0x92, 0x41, 0x33, 0x0a, 0x31, 0x2a,
	0x0f, 0x50, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x12, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xbe, 0x02, 0x0a, 0x10, 0x50, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x3a, 0x4b, 0x92, 0x41, 0x48, 0x0a, 0x46, 0x2a, 0x10, 0x50, 0x75, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x18, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xf3, 0x08, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x02, 0x69, 0x64, 0x32, 0x0c, 0xe5, 0x94, 0xaf,
	0xe4, 0xb8, 0x80, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a,
	0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a,
	0x03, 0x65, 0x6e, 0x76, 0x32, 0x14, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0x28, 0x6d, 0x65, 0x73,
	0x6f, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x6b, 0x38, 0x73, 0x29, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12,
	0x56, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x92,
	0x41, 0x3f, 0x2a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x32, 0x37, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0xef, 0xbc, 0x8c, 0xe5, 0xb1, 0x9e, 0xe4, 0xba, 0x8e, 0xe5, 0x93, 0xaa, 0xe7, 0xa7, 0x8d, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0x28, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xef, 0xbc, 0x9a, 0x70, 0x6f, 0x64, 0xe3, 0x80, 0x81, 0x72, 0x63, 0xe7, 0xad, 0x89,
	0x29, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x32, 0x18, 0xe5, 0xb1, 0x82, 0xe7, 0xba, 0xa7, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0xe3, 0x80, 0x81, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x29, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x6d, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0x92, 0x41, 0x4c, 0x2a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x32, 0x3f, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xef, 0xbc,
	0x8c, 0xe5, 0x93, 0xaa, 0xe4, 0xb8, 0xaa, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe8, 0xaf, 0xa5, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x28, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0xe3, 0x80, 0x81, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0xe7, 0xad, 0x89, 0x29, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x06, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x79, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x92, 0x41,
	0x38, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x2b, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x28, 0xe4, 0xbb, 0x8e, 0xe5, 0x93, 0xaa, 0xe4, 0xb8, 0xaa,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xba, 0x86, 0xe8,
	0xaf, 0xa5, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x29, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02,
	0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d,
	0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x32, 0x15, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe7, 0x9a, 0x84, 0xe7, 0x89, 0xb9, 0xe5, 0xae,
	0x9a, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x0c, 0xe6,
	0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x32, 0x0c, 0xe8, 0xbe, 0x85, 0xe5, 0x8a, 0xa9, 0xe5, 0xad,
	0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x62, 0x0a, 0x0c, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a,
	0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x32, 0x12, 0xe8,
	0xbe, 0x85, 0xe5, 0x8a, 0xa9, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb,
	0xb6, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x12,
	0x3a, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x32, 0x0c, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x32, 0x0c, 0xe7, 0xbb, 0x93, 0xe6,
	0x9d, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x0f,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0xfa,
	0x42, 0x04, 0x32, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3e,
	0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x42, 0x26,
	0x92, 0x41, 0x1c, 0x2a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x32, 0x12, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa,
	0x42, 0x04, 0x32, 0x02, 0x18, 0x0a, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x37,
	0x92, 0x41, 0x34, 0x0a, 0x32, 0x2a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4,
	0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8a, 0x03, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x63, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x32, 0x0c, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x3a, 0x4c, 0x92, 0x41, 0x49, 0x0a, 0x47, 0x2a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x18, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xf3, 0x02, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x04, 0x63, 0x6f, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x4f, 0x6e, 0x6c, 0x79, 0x32,
	0x08, 0x73, 0x65, 0x6c, 0x66, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x64, 0x12,
	0x33, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x4f, 0x6e, 0x6c, 0x79,
	0x32, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66,
	0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09, 0x6d, 0x61,
	0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x09, 0x6d, 0x61, 0x78, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x32, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x75, 0x73,
	0x74, 0x44, 0x69, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x2a, 0x08, 0x6d, 0x75, 0x73, 0x74, 0x44, 0x69, 0x66, 0x66, 0x32, 0x08, 0x6d, 0x75, 0x73, 0x74,
	0x44, 0x69, 0x66, 0x66, 0x52, 0x08, 0x6d, 0x75, 0x73, 0x74, 0x44, 0x69, 0x66, 0x66, 0x3a, 0x2a,
	0x92, 0x41, 0x27, 0x0a, 0x25, 0x2a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x77,
	0x61, 0x74, 0x63, 0x68, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0x8f, 0x02, 0x0a, 0x11, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x79, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x5b, 0x92, 0x41, 0x38, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x32, 0x2b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x28, 0xe4, 0xbb,
	0x8e, 0xe5, 0x93, 0xaa, 0xe4, 0xb8, 0xaa, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe4, 0xba, 0x86, 0xe8, 0xaf, 0xa5, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x29,
	0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x06, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x32, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x37, 0x92, 0x41, 0x34, 0x0a, 0x32, 0x2a, 0x11, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x11, 0x77,
	0x61, 0x74, 0x63, 0x68, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82,
	0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb6, 0x01, 0x0a,
	0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x39, 0x92, 0x41, 0x36, 0x0a,
	0x34, 0x2a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x17, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x77, 0x61, 0x74,
	0x63, 0x68, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa9, 0x02, 0x0a, 0x0e, 0x42, 0x63, 0x73, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x02, 0x69, 0x70, 0x32, 0x08, 0x49,
	0x50, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x02, 0x69, 0x70, 0x12, 0x7e, 0x0a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60,
	0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30,
	0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f,
	0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58,
	0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x34, 0x92, 0x41, 0x31,
	0x0a, 0x2f, 0x2a, 0x0e, 0x42, 0x63, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x32, 0x0c, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
	0xd2, 0x01, 0x02, 0x69, 0x70, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x70, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0x92, 0x41, 0x0e, 0x2a, 0x02, 0x69, 0x70, 0x32, 0x08, 0x49, 0x50, 0xe5, 0x9c, 0xb0, 0xe5,
	0x9d, 0x80, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x70, 0x01, 0x52, 0x02, 0x69, 0x70, 0x3a, 0x34, 0x92,
	0x41, 0x31, 0x0a, 0x2f, 0x2a, 0x0e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xb8, 0xbb, 0xe6,
	0x9c, 0xba, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01,
	0x02, 0x69, 0x70, 0x22, 0xc2, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42,
	0x63, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x50, 0x92, 0x41, 0x4d, 0x0a, 0x4b, 0x2a, 0x0f, 0x47,
	0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1e,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe9, 0x85, 0x8d, 0xe7,
	0xbd, 0xae, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0xd2, 0x01,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbc, 0x02, 0x0a, 0x0e, 0x50, 0x75, 0x74,
	0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x0e, 0x2a, 0x02, 0x69, 0x70,
	0x32, 0x08, 0x49, 0x50, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x70,
	0x01, 0x52, 0x02, 0x69, 0x70, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85,
	0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49,
	0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53,
	0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10,
	0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x40, 0x92, 0x41, 0x3d, 0x0a, 0x3b, 0x2a, 0x0e, 0x50, 0x75,
	0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x02, 0x69, 0x70, 0xd2, 0x01, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc2, 0x02, 0x0a, 0x0f, 0x50, 0x75, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x50, 0x92, 0x41, 0x4d, 0x0a,
	0x4b, 0x2a, 0x0f, 0x50, 0x75, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x1e, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba,
	0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7c, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92,
	0x41, 0x14, 0x2a, 0x02, 0x69, 0x70, 0x32, 0x0e, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0x49, 0x50,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x70, 0x01, 0x52, 0x02, 0x69,
	0x70, 0x3a, 0x37, 0x92, 0x41, 0x34, 0x0a, 0x32, 0x2a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x02, 0x69, 0x70, 0x22, 0xc8, 0x02, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x3a, 0x53, 0x92, 0x41, 0x50, 0x0a, 0x4e, 0x2a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1e, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0xd2, 0x01, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41,
	0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43,
	0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8,
	0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42,
	0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x3c, 0x92, 0x41, 0x39, 0x0a, 0x37,
	0x2a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe9,
	0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc4, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x42, 0x63, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x51, 0x92, 0x41, 0x4e,
	0x0a, 0x4c, 0x2a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1e, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe4, 0xb8, 0xbb, 0xe6,
	0x9c, 0xba, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9e,
	0x02, 0x0a, 0x19, 0x50, 0x75, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32,
	0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc,
	0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58,
	0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53,
	0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x03,
	0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x0e, 0x2a, 0x03,
	0x69, 0x70, 0x73, 0x32, 0x07, 0x49, 0x50, 0x20, 0x6c, 0x69, 0x73, 0x74, 0xfa, 0x42, 0x05, 0x92,
	0x01, 0x02, 0x08, 0x01, 0x52, 0x03, 0x69, 0x70, 0x73, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f,
	0x2a, 0x19, 0x50, 0x75, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x20, 0xe4, 0xbf, 0xae,
	0xe6, 0x94, 0xb9, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0x28,
	0xe8, 0xa6, 0x86, 0xe7, 0x9b, 0x96, 0x29, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x03, 0x69, 0x70, 0x73, 0x22,
	0xe1, 0x02, 0x0a, 0x1a, 0x50, 0x75, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x64, 0x92,
	0x41, 0x61, 0x0a, 0x5f, 0x2a, 0x1a, 0x50, 0x75, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x27, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85,
	0xb3, 0xe7, 0xb3, 0xbb, 0xef, 0xbc, 0x8c, 0xe8, 0xa6, 0x86, 0xe7, 0x9b, 0x96, 0xe4, 0xbf, 0xae,
	0xe6, 0x94, 0xb9, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x8e, 0x02, 0x0a, 0x1a, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8,
	0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc,
	0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38,
	0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64,
	0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b,
	0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x19, 0x92, 0x41, 0x0e, 0x2a, 0x03, 0x69, 0x70, 0x73, 0x32, 0x07, 0x49, 0x50, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x03, 0x69, 0x70, 0x73, 0x3a,
	0x43, 0x92, 0x41, 0x40, 0x0a, 0x3e, 0x2a, 0x1a, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x20, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0x28, 0xe5, 0xa2, 0x9e, 0xe9, 0x87, 0x8f, 0x29, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0x22, 0xe3, 0x02, 0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x3a, 0x65, 0x92, 0x41, 0x62, 0x0a, 0x60, 0x2a, 0x1b, 0x50, 0x6f, 0x73, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x27, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0xef, 0xbc, 0x8c, 0xe5, 0xa2,
	0x9e, 0xe9, 0x87, 0x8f, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c,
	0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xcf, 0x02, 0x0a, 0x06, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85,
	0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49,
	0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53,
	0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10,
	0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d,
	0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x06, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a,
	0x3b, 0x92, 0x41, 0x38, 0x0a, 0x36, 0x2a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x32, 0x06,
	0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xd2, 0x01,
	0x04, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xae, 0x04, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4,
	0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c,
	0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53,
	0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32,
	0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24,
	0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x41, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9,
	0x97, 0xb4, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x06, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x32, 0x0c, 0xe6, 0x89, 0xa9,
	0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x0f, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0xfa, 0x42,
	0x04, 0x32, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x25, 0x92, 0x41,
	0x1b, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32,
	0x02, 0x18, 0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x51, 0x92, 0x41, 0x4e, 0x0a,
	0x4c, 0x2a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe6, 0xa0,
	0x87, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xd2,
	0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb8, 0x02,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x4c, 0x92, 0x41, 0x49, 0x0a,
	0x47, 0x2a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x18, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x8c, 0x87, 0xe6,
	0xa0, 0x87, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0xd2, 0x01,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf4, 0x03, 0x0a, 0x10, 0x50, 0x75, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94,
	0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5,
	0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58,
	0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43,
	0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0x92, 0x41, 0x0e, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41,
	0x0e, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15,
	0x2a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x32, 0x0c, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe5,
	0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x3e, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x51, 0x92, 0x41,
	0x4e, 0x0a, 0x4c, 0x2a, 0x10, 0x50, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x12, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6, 0x8c, 0x87,
	0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0xd2, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xc0, 0x02, 0x0a, 0x11, 0x50, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x3a, 0x4c, 0x92, 0x41, 0x49, 0x0a, 0x47, 0x2a, 0x11, 0x50, 0x75, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x18,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0xe4, 0xbf, 0xae, 0xe6,
	0x94, 0xb9, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2,
	0x01, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x8a, 0x03, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92,
	0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42,
	0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4,
	0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa,
	0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92,
	0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5,
	0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2c, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x0e,
	0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x0e, 0x2a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f,
	0x2a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x12, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x8c, 0x87,
	0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0xd2, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xc6, 0x02, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7,
	0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x4f, 0x92, 0x41, 0x4c, 0x0a, 0x4a, 0x2a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x18, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x8c, 0x87, 0xe6,
	0xa0, 0x87, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0xd2, 0x01,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x83, 0x04, 0x0a, 0x12, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0,
	0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58,
	0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04,
	0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x32, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x32, 0x0c, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xad, 0x97, 0xe6,
	0xae, 0xb5, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x81,
	0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x28, 0x00, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x25, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6,
	0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x18, 0x0a, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x3a, 0x39, 0x92, 0x41, 0x36, 0x0a, 0x34, 0x2a, 0x12, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x12,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xbc,
	0x02, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32,
	0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x4e, 0x92,
	0x41, 0x4b, 0x0a, 0x49, 0x2a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x18, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5e, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x43, 0x92, 0x41, 0x40, 0x0a, 0x3e, 0x2a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x23, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0xe8, 0xa1, 0xa8, 0xe5, 0x90, 0x8d, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0x28, 0xe6, 0x97, 0xa0, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x29, 0x22, 0xbb, 0x02,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x3a, 0x59, 0x92, 0x41, 0x56, 0x0a, 0x54, 0x2a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x1e, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0xe8,
	0xa1, 0xa8, 0xe5, 0x90, 0x8d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x12,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8,
	0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc,
	0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38,
	0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64,
	0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b,
	0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x06, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x46, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x92, 0x41, 0x10,
	0x2a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3a, 0x92, 0x41, 0x37, 0x0a, 0x35, 0x2a,
	0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x0c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x13, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x2a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x04, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x3a, 0x92, 0x41, 0x37, 0x0a, 0x35, 0x2a, 0x13, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x17, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x77, 0x61, 0x74, 0x63, 0x68, 0xe4, 0xba, 0x8b, 0xe4,
	0xbb, 0xb6, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xb7, 0x03, 0x0a, 0x0d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4,
	0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c,
	0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53,
	0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32,
	0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24,
	0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9,
	0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x43, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x60, 0x92, 0x41, 0x5d, 0x0a, 0x5b, 0x2a, 0x10,
	0x4b, 0x38, 0x53, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x32, 0x11, 0x6b, 0x38, 0x73, 0xe7, 0x9a, 0x84, 0x77, 0x61, 0x74, 0x63, 0x68, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2,
	0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xd2, 0x01, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe9, 0x03, 0x0a, 0x1a, 0x4b, 0x38,
	0x53, 0x47, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d,
	0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53,
	0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba,
	0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d,
	0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x19,
	0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd,
	0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x26, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92,
	0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x3a, 0x70, 0x92, 0x41, 0x6d, 0x0a, 0x6b, 0x2a, 0x1a, 0x4b, 0x38, 0x53, 0x47,
	0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x17, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x77, 0x61,
	0x74, 0x63, 0x68, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2,
	0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xd2, 0x01, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd9, 0x02, 0x0a, 0x1b, 0x4b, 0x38, 0x53, 0x47, 0x65, 0x74,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x3a, 0x5b, 0x92, 0x41, 0x58, 0x0a, 0x56, 0x2a, 0x1b, 0x4b, 0x38, 0x53,
	0x47, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1d, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0x77, 0x61, 0x74, 0x63, 0x68, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xa9, 0x04, 0x0a, 0x1a, 0x4b, 0x38, 0x53, 0x50, 0x75, 0x74, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6,
	0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d,
	0x58, 0x58, 0x58, 0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a,
	0x04, 0x42, 0x43, 0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x41, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97,
	0xb4, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c, 0x2a, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x70, 0x92, 0x41, 0x6d,
	0x0a, 0x6b, 0x2a, 0x1a, 0x4b, 0x38, 0x53, 0x50, 0x75, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x17,
	0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0x77, 0x61, 0x74, 0x63, 0x68, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xd2,
	0x01, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xd2, 0x01,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd9, 0x02,
	0x0a, 0x1b, 0x4b, 0x38, 0x53, 0x50, 0x75, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x5b, 0x92, 0x41,
	0x58, 0x0a, 0x56, 0x2a, 0x1b, 0x4b, 0x38, 0x53, 0x50, 0x75, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x1d, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x77, 0x61, 0x74, 0x63, 0x68, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2,
	0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0xd2,
	0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xef, 0x03, 0x0a, 0x1d, 0x4b, 0x38,
	0x53, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60,
	0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x30,
	0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f,
	0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58, 0x58, 0x58,
	0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43, 0x53, 0x2d,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23,
	0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c,
	0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x4a,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x26, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x73, 0x92, 0x41, 0x70, 0x0a, 0x6e, 0x2a, 0x1d, 0x4b,
	0x38, 0x53, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x17, 0xe5, 0x88,
	0xa0, 0xe9, 0x99, 0xa4, 0x77, 0x61, 0x74, 0x63, 0x68, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xd2, 0x01, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xdf, 0x02, 0x0a, 0x1e,
	0x4b, 0x38, 0x53, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x5e, 0x92,
	0x41, 0x5b, 0x0a, 0x59, 0x2a, 0x1e, 0x4b, 0x38, 0x53, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1d, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x77, 0x61, 0x74, 0x63,
	0x68, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x96, 0x03,
	0x0a, 0x1b, 0x4b, 0x38, 0x53, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x60, 0x92, 0x41, 0x3d, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x32, 0x30, 0x42, 0x43, 0x53, 0xe5, 0x86, 0x85, 0xe9, 0x83, 0xa8, 0xe4, 0xbd, 0xbf, 0xe7, 0x94,
	0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0xbc, 0xe5,
	0xbc, 0x8f, 0xe4, 0xb8, 0xba, 0x42, 0x43, 0x53, 0x2d, 0x4b, 0x38, 0x53, 0x2d, 0x58, 0x58, 0x58,
	0x58, 0x58, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x10, 0x02, 0x18, 0x64, 0x32, 0x0f, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x04, 0x42, 0x43,
	0x53, 0x2d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x68, 0x92, 0x41,
	0x65, 0x0a, 0x63, 0x2a, 0x1b, 0x4b, 0x38, 0x53, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x1d, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x77, 0x61,
	0x74, 0x63, 0x68, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2,
	0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xd2, 0x01, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x1c, 0x4b, 0x38, 0x53, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x06, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x62, 0x92,
	0x41, 0x5f, 0x0a, 0x5d, 0x2a, 0x1c, 0x4b, 0x38, 0x53, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x23, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x77, 0x61, 0x74, 0x63, 0x68, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x84, 0x8f, 0x01, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0xa3,
	0x01, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x19, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x62, 0x63,
	0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x3c, 0x12, 0x12, 0xe6, 0x8e, 0xa5, 0xe6, 0x94, 0xb6,
	0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x1a, 0x26, 0xe6, 0x8e,
	0xa5, 0xe6, 0x94, 0xb6, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe4, 0xbf, 0x9d, 0xe5, 0xad, 0x98, 0xe5, 0x88, 0xb0, 0x64,
	0x62, 0xe4, 0xb8, 0xad, 0x12, 0xb0, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x12, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x12, 0x15, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76,
	0x32, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x92, 0x41, 0x4c, 0x12, 0x12, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x1a,
	0x36, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xef,
	0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xda, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x80, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x62, 0x63, 0x73,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x92, 0x41,
	0x43, 0x12, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe9,
	0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x1a, 0x2d, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe6, 0x8c, 0x87,
	0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0x84, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef,
	0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0x85,
	0x8d, 0xe7, 0xbd, 0xae, 0x12, 0xe4, 0x01, 0x0a, 0x10, 0x50, 0x75, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x1a, 0x32, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41,
	0x4a, 0x12, 0x1b, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x88, 0x96, 0xe4, 0xbf, 0xae, 0xe6,
	0x94, 0xb9, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x1a, 0x2b,
	0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x20,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x88, 0x96, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x12, 0xc2, 0x01, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x20, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f,
	0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x7d, 0x92,
	0x41, 0x2e, 0x12, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1,
	0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x1a, 0x18, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe6, 0x9c,
	0x8d, 0xe5, 0x8a, 0xa1, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
	0x12, 0xd5, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x32, 0x12, 0x30, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f,
	0x76, 0x32, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x7d, 0x92, 0x41, 0x41, 0x12, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7,
	0xa8, 0xb3, 0xe5, 0xae, 0x9a, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x1a, 0x2b, 0xe6, 0xa0, 0xb9,
	0xe6, 0x8d, 0xae, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe7, 0x9a, 0x84, 0xe7, 0xa8, 0xb3, 0xe5,
	0xae, 0x9a, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x12, 0xcc, 0x01, 0x0a, 0x10, 0x50, 0x75, 0x74,
	0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x1a, 0x30, 0x2f, 0x62, 0x63, 0x73,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x35, 0x12, 0x12, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe7, 0xa8, 0xb3, 0xe5, 0xae, 0x9a,
	0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x1a, 0x1f, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe7, 0xa8, 0xb3, 0xe5, 0xae,
	0x9a, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x12, 0xc7, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4b,
	0x38, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xdb, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7a, 0x12, 0x78, 0x2f, 0x62,
	0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6b, 0x38, 0x73,
	0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x58, 0x12, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0x1a, 0x3c, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x91, 0xbd,
	0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x12, 0xe2, 0x02, 0x0a, 0x18, 0x50, 0x75, 0x74, 0x4b, 0x38, 0x53, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x25,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x50, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf6, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7d, 0x1a, 0x78, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x70, 0x12, 0x21, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6, 0x88,
	0x96, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x1a, 0x4b, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d,
	0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe4, 0xbf, 0xae,
	0xe6, 0x94, 0xb9, 0xe6, 0x88, 0x96, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xef, 0xbc,
	0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xd6, 0x02, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4b, 0x38, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe1, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x7a, 0x2a, 0x78, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d,
	0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x7d, 0x2f,
	0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41,
	0x5e, 0x12, 0x18, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7,
	0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x1a, 0x42, 0xe6, 0xa0, 0xb9,
	0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97,
	0xb4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12,
	0xb9, 0x02, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x26, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xca,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6b, 0x12, 0x69, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x7d, 0x92, 0x41, 0x56, 0x12, 0x1e, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0x1a, 0x34, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5,
	0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xef, 0xbc, 0x8c, 0xe5, 0xb9,
	0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xdf, 0x02, 0x0a, 0x1f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x38, 0x53, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x2c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xde, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x6b, 0x2a, 0x69, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x7d,
	0x92, 0x41, 0x6a, 0x12, 0x1e, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe5, 0x88, 0xa0, 0xe9, 0x99,
	0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0x1a, 0x48, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xa2, 0x02,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xbc, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x61, 0x12, 0x5f, 0x2f, 0x62,
	0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6b, 0x38, 0x73,
	0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f,
	0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x52,
	0x12, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0x1a, 0x3c, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x12, 0xbd, 0x02, 0x0a, 0x16, 0x50, 0x75, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x23, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x75, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd7, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x64, 0x1a, 0x5f, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76,
	0x32, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x6a, 0x12, 0x1b, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9,
	0xe6, 0x88, 0x96, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0x1a, 0x4b, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6,
	0x88, 0x96, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x12, 0xab, 0x02, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x38, 0x53,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x26, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xbc, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x61, 0x2a, 0x5f, 0x2f, 0x62, 0x63, 0x73,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x7b, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x52, 0x12, 0x12,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0x1a, 0x3c, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c,
	0x12, 0x94, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x52, 0x12, 0x50, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f,
	0x76, 0x32, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x7d, 0x92, 0x41, 0x50, 0x12, 0x18, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0x1a, 0x34, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x93, 0x02, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xa7, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x12, 0x4c, 0x2f, 0x62,
	0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6b, 0x38, 0x73,
	0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x7d, 0x92, 0x41, 0x50, 0x12, 0x18, 0xe6,
	0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x1a, 0x34, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xef, 0xbc, 0x8c,
	0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xb4, 0x02,
	0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x38, 0x53,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x2a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb9, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x52, 0x2a, 0x50, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76,
	0x32, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x7d, 0x92, 0x41, 0x5e, 0x12, 0x18, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe5, 0x88,
	0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0x1a, 0x42, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xef, 0xbc, 0x8c, 0xe5,
	0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xb3, 0x02, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xb5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x2a, 0x4c, 0x2f, 0x62, 0x63,
	0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6b, 0x38, 0x73, 0x2f,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x7d, 0x92, 0x41, 0x5e, 0x12, 0x18, 0xe6, 0x89,
	0xb9, 0xe9, 0x87, 0x8f, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x1a, 0x42, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93,
	0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xfb, 0x01, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x22, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9b, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2f, 0x76, 0x32, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x7d, 0x92, 0x41, 0x5b, 0x12, 0x15, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0x1a, 0x42, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0x84, 0x02, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x25, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x9b, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x2a, 0x35, 0x2f, 0x62, 0x63, 0x73,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x7d, 0x92, 0x41, 0x5b, 0x12, 0x15, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x87, 0xaa, 0xe5,
	0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x1a, 0x42, 0xe6, 0xa0, 0xb9,
	0xe6, 0x8d, 0xae, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xef,
	0xbc, 0x8c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9,
	0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12,
	0x8d, 0x02, 0x0a, 0x12, 0x50, 0x75, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x75, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xad, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x1a, 0x35, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x7d, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x6a, 0x12, 0x1e, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe6, 0x88, 0x96,
	0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0x1a, 0x48, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0xef, 0xbc, 0x8c, 0xe4, 0xbf, 0xae, 0xe6,
	0x94, 0xb9, 0xe6, 0x88, 0x96, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe5, 0xae, 0x9a, 0xe4, 0xb9,
	0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12,
	0xb4, 0x02, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbc, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c,
	0x1a, 0x47, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32,
	0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x7b, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x67, 0x12,
	0x1b, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95, 0x1a, 0x48, 0xe6, 0xa0,
	0xb9, 0xe6, 0x8d, 0xae, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4,
	0xb9, 0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95, 0xef, 0xbc,
	0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xb1, 0x02, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb9,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x2a, 0x47, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x7d,
	0x92, 0x41, 0x67, 0x12, 0x1b, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x87, 0xaa, 0xe5, 0xae,
	0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95,
	0x1a, 0x48, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x87, 0xaa,
	0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb4, 0xa2, 0xe5,
	0xbc, 0x95, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93,
	0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xf4, 0x01, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x4b, 0x38, 0x53, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x12, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x50, 0x50, 0x6f,
	0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6b, 0x38,
	0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x69,
	0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x92, 0x41, 0x53, 0x12, 0x14,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x6b, 0x38, 0x73, 0xe9, 0x9d, 0x99, 0xe6, 0x80, 0x81, 0x49,
	0x50, 0xe6, 0xb1, 0xa0, 0x1a, 0x3b, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x9d,
	0x99, 0xe6, 0x80, 0x81, 0x49, 0x50, 0xe6, 0xb1, 0xa0, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x12, 0xfb, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x49, 0x50, 0x50,
	0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa6, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x22,
	0x42, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x56, 0x12, 0x14, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x6b, 0x38, 0x73, 0xe9, 0x9d, 0x99, 0xe6, 0x80, 0x81, 0x49, 0x50, 0xe6, 0xb1, 0xa0, 0x1a,
	0x3e, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x6b, 0x38, 0x73, 0xe9, 0x9d, 0x99, 0xe6,
	0x80, 0x81, 0x49, 0x50, 0xe6, 0xb1, 0xa0, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12,
	0x9b, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x50, 0x50, 0x6f, 0x6f,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x12, 0x48,
	0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x92, 0x41, 0x62, 0x12, 0x1a, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0x6b, 0x38, 0x73, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe9, 0x9d, 0x99, 0xe6,
	0x80, 0x81, 0x49, 0x50, 0xe6, 0xb1, 0xa0, 0x1a, 0x44, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x6b, 0x38, 0x73, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe9, 0x9d, 0x99, 0xe6, 0x80, 0x81,
	0x49, 0x50, 0xe6, 0xb1, 0xa0, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0x9f, 0x02,
	0x0a, 0x19, 0x50, 0x6f, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x50, 0x50, 0x6f, 0x6f, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb8, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x22, 0x48, 0x2f,
	0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x62, 0x12, 0x1a, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x6b, 0x38, 0x73, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe9, 0x9d,
	0x99, 0xe6, 0x80, 0x81, 0x49, 0x50, 0xe6, 0xb1, 0xa0, 0x1a, 0x44, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d,
	0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0x6b, 0x38, 0x73, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe9, 0x9d, 0x99, 0xe6,
	0x80, 0x81, 0x49, 0x50, 0xe6, 0xb1, 0xa0, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12,
	0xba, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x12, 0x13, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39,
	0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x70, 0x6f, 0x64, 0x92, 0x41, 0x40, 0x12, 0x09, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0x70, 0x6f, 0x64, 0x1a, 0x33, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x70, 0x6f, 0x64, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xbe, 0x01, 0x0a,
	0x07, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x12, 0x13, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x87, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x22, 0x39, 0x2f, 0x62,
	0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x7d, 0x2f, 0x70, 0x6f, 0x64, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x40, 0x12, 0x09, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x70, 0x6f, 0x64, 0x1a, 0x33, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0x70, 0x6f, 0x64, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xe4, 0x01,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x12,
	0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x99, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x42, 0x12, 0x40, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76,
	0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x65, 0x74, 0x92, 0x41, 0x4e, 0x12, 0x10, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x1a, 0x3a, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0xef, 0xbc, 0x8c, 0xe5,
	0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xe8, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x9c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x22, 0x40, 0x2f, 0x62, 0x63, 0x73, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f,
	0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d,
	0x2f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x92, 0x41,
	0x4e, 0x12, 0x10, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x53, 0x65, 0x74, 0x1a, 0x3a, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12,
	0xed, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4b, 0x38, 0x53, 0x12, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x99, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x12, 0x40, 0x2f, 0x62,
	0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x7d, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x92, 0x41,
	0x4e, 0x12, 0x10, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x1a, 0x3a, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12,
	0xf1, 0x01, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4b, 0x38, 0x53, 0x12, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x22, 0x40, 0x2f,
	0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x7d, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x4e, 0x12, 0x10, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x3a, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0xef, 0xbc, 0x8c, 0xe5, 0xb9,
	0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x12, 0xdb, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4b, 0x38, 0x53, 0x12, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6b, 0x38,
	0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x92, 0x41, 0x48, 0x12, 0x0d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x37, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x12, 0xdf, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4b, 0x38, 0x53, 0x12, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x22, 0x3d, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6b, 0x38, 0x73,
	0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x48, 0x12, 0x0d, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x37, 0xe6, 0xa0, 0xb9, 0xe6,
	0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xef, 0xbc, 0x8c, 0xe5, 0xb9,
	0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x12, 0xe7, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4d, 0x61, 0x70, 0x4b, 0x38, 0x53, 0x12, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x4b, 0x38, 0x53, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x12, 0x3f, 0x2f,
	0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x92, 0x41,
	0x4c, 0x12, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x61, 0x70, 0x1a, 0x39, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x61, 0x70, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xeb, 0x01,
	0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x4b,
	0x38, 0x53, 0x12, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4d, 0x61, 0x70, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x99, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x22, 0x3f, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6b,
	0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x4c, 0x12,
	0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70,
	0x1a, 0x39, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4d, 0x61, 0x70, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6,
	0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xd5, 0x01, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x12, 0x19, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x38, 0x53,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x8d, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x12, 0x3c, 0x2f, 0x62,
	0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x92, 0x41, 0x46, 0x12, 0x0c, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x36, 0xe6, 0xa0, 0xb9,
	0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0xef, 0xbc, 0x8c, 0xe5, 0xb9,
	0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x12, 0xd9, 0x01, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4b, 0x38, 0x53, 0x12, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x41, 0x22, 0x3c, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6b, 0x38, 0x73, 0x2f,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x46, 0x12, 0x0c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x36, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12,
	0xe7, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x4b, 0x38, 0x53, 0x12, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x96, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x12, 0x3f, 0x2f, 0x62, 0x63, 0x73, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f,
	0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d,
	0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x92, 0x41, 0x4c, 0x12, 0x0f, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x39,
	0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef,
	0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d,
	0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xeb, 0x01, 0x0a, 0x10, 0x50, 0x6f,
	0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4b, 0x38, 0x53, 0x12, 0x1c,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x99, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x44, 0x22, 0x3f, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x4c, 0x12, 0x0f, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x39, 0xe6, 0xa0,
	0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0xef,
	0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd,
	0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xd2, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f,
	0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x92, 0x41, 0x48, 0x12, 0x0d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x1a, 0x37, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xd6, 0x01, 0x0a,
	0x0b, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x93, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x22, 0x3d, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6b,
	0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x48, 0x12, 0x0d, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x37, 0xe6, 0xa0,
	0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0xef, 0xbc, 0x8c,
	0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xed, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x38, 0x53, 0x12, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x38, 0x53,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x38, 0x53, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x12,
	0x3f, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x92, 0x41, 0x52, 0x12, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x91, 0xbd, 0xe5, 0x90,
	0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x1a, 0x3c, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xef, 0xbc, 0x8c,
	0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xf1, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x38, 0x53, 0x12, 0x1c, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x38,
	0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x38, 0x53, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44,
	0x22, 0x3f, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32,
	0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x52, 0x12, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5,
	0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x1a, 0x3c, 0xe6, 0xa0, 0xb9,
	0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97,
	0xb4, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d,
	0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xc0, 0x01, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x87, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x62, 0x63,
	0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x92, 0x41, 0x42, 0x12, 0x0a, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x34, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0x6e, 0x6f, 0x64, 0x65, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xc4, 0x01, 0x0a,
	0x08, 0x50, 0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x22,
	0x3a, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41,
	0x42, 0x12, 0x0a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x34, 0xe6,
	0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc,
	0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x6e, 0x6f, 0x64, 0x65, 0xef, 0xbc, 0x8c, 0xe5, 0xb9,
	0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x12, 0xde, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x41, 0x12, 0x3f, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x73, 0x65, 0x74, 0x92, 0x41, 0x4c, 0x12, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x1a, 0x39, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d,
	0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0xef, 0xbc, 0x8c, 0xe5,
	0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xe2, 0x01, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x99, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x22, 0x3f, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6b, 0x38, 0x73,
	0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x4c, 0x12, 0x0f, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x1a, 0x39,
	0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef,
	0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d,
	0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xba, 0x01, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x4a, 0x6f, 0x62, 0x12, 0x13, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x84, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6b,
	0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f,
	0x6a, 0x6f, 0x62, 0x92, 0x41, 0x40, 0x12, 0x09, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x6a, 0x6f,
	0x62, 0x1a, 0x33, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x6a, 0x6f, 0x62, 0xef, 0xbc,
	0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xbe, 0x01, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x4a,
	0x6f, 0x62, 0x12, 0x13, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x22, 0x39, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6b, 0x38, 0x73,
	0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x6a, 0x6f,
	0x62, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x40, 0x12, 0x09, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x6a,
	0x6f, 0x62, 0x1a, 0x33, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x6a, 0x6f, 0x62, 0xef,
	0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd,
	0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xea, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x12, 0x41,
	0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x73, 0x65,
	0x74, 0x92, 0x41, 0x50, 0x12, 0x11, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x74, 0x1a, 0x3b, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x74, 0xef, 0xbc, 0x8c, 0xe5,
	0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xee, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x9f, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x22, 0x41, 0x2f, 0x62,
	0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x73, 0x65, 0x74, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x50, 0x12, 0x11, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x74, 0x1a, 0x3b, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x74, 0xef, 0xbc, 0x8c,
	0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xcd, 0x01, 0x0a, 0x0c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x7e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x22, 0x37, 0x2f, 0x62, 0x63,
	0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x7d, 0x3a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x92, 0x41, 0x34, 0x12,
	0x0d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x20, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x1a, 0x23,
	0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef,
	0xbc, 0x8c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x77, 0x61, 0x74, 0x63, 0x68, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x30, 0x01, 0x12, 0xd1, 0x01, 0x0a, 0x0e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3d, 0x22, 0x33, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76,
	0x32, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x3a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x92, 0x41,
	0x36, 0x12, 0x0f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x1a, 0x23, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x77, 0x61, 0x74, 0x63,
	0x68, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x30, 0x01, 0x12, 0x98, 0x01, 0x0a, 0x08, 0x50, 0x75,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1a, 0x1a, 0x15, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2f, 0x76, 0x32, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x34,
	0x12, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x1a, 0x24,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xef, 0xbc, 0x8c, 0xe5,
	0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xaa, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x12, 0x15, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76,
	0x32, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x92, 0x41, 0x46, 0x12, 0x0c, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x1a, 0x36, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d,
	0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x12, 0xbb, 0x01, 0x0a, 0x0a, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x25, 0x22, 0x1b, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76,
	0x32, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x3a, 0x06,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x92, 0x41, 0x44, 0x12, 0x0b, 0x77, 0x61, 0x74, 0x63, 0x68,
	0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x1a, 0x35, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0x77, 0x61, 0x74, 0x63, 0x68, 0xe4,
	0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x30, 0x01, 0x12,
	0xac, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x7b, 0x69, 0x70, 0x7d,
	0x92, 0x41, 0x4b, 0x12, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c,
	0xba, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x1a, 0x35, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x69,
	0x70, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba,
	0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xaf,
	0x01, 0x0a, 0x07, 0x50, 0x75, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x75,
	0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x1a, 0x18, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x7b, 0x69, 0x70, 0x7d, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x4b, 0x12, 0x12, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xb8, 0xbb,
	0xe6, 0x9c, 0xba, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x1a, 0x35, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d,
	0xae, 0x69, 0x70, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xb8, 0xbb, 0xe6,
	0x9c, 0xba, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c,
	0x12, 0xb5, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12,
	0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x2a, 0x18, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32,
	0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x7b, 0x69, 0x70, 0x7d, 0x92, 0x41, 0x4b, 0x12, 0x12, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe9, 0x85, 0x8d, 0xe7, 0xbd,
	0xae, 0x1a, 0x35, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x69, 0x70, 0xef, 0xbc, 0x8c, 0xe5, 0x88,
	0xa0, 0xe9, 0x99, 0xa4, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
	0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4,
	0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xc7, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x85, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2f, 0x76, 0x32, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x92, 0x41, 0x52,
	0x12, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe9, 0x85,
	0x8d, 0xe7, 0xbd, 0xae, 0x1a, 0x3c, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xb8,
	0xbb, 0xe6, 0x9c, 0xba, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x12, 0xb4, 0x02, 0x0a, 0x12, 0x50, 0x75, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xd4, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x1a, 0x28, 0x2f, 0x62, 0x63,
	0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x68, 0x6f, 0x73, 0x74,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x9d, 0x01, 0x12, 0x1a, 0xe4, 0xbf,
	0xae, 0xe6, 0x94, 0xb9, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb,
	0x28, 0xe8, 0xa6, 0x86, 0xe7, 0x9b, 0x96, 0x29, 0x1a, 0x7f, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe4, 0xbf, 0xae, 0xe6,
	0x94, 0xb9, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0x28, 0xe5,
	0x85, 0x88, 0xe6, 0xb8, 0x85, 0xe9, 0x99, 0xa4, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0xef, 0xbc, 0x8c, 0xe5, 0x86, 0x8d,
	0xe5, 0x8e, 0xbb, 0xe6, 0x8a, 0x8a, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe7, 0x9a, 0x84, 0xe5,
	0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0xe5, 0x86, 0x99, 0xe5, 0x85, 0xa5, 0x64, 0x62, 0xe4, 0xb8, 0xad,
	0x29, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d,
	0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xa3, 0x02, 0x0a, 0x13, 0x50, 0x6f,
	0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc0, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x89, 0x01, 0x12, 0x1a, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0x28, 0xe5, 0xa2, 0x9e, 0xe9, 0x87,
	0x8f, 0x29, 0x1a, 0x6b, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0x28, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5, 0xe6,
	0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe4, 0xbc, 0x9a, 0xe6, 0xb8,
	0x85, 0xe9, 0x99, 0xa4, 0xe5, 0x8e, 0x86, 0xe5, 0x8f, 0xb2, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0x29, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12,
	0xf5, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x19, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb0, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51, 0x12, 0x4f, 0x2f,
	0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d,
	0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41,
	0x56, 0x12, 0x14, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0x28,
	0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x29, 0x1a, 0x3e, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0x28, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x29, 0xef,
	0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd,
	0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xe8, 0x01, 0x0a, 0x09, 0x50, 0x75, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x50, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x54, 0x1a, 0x4f, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x46, 0x12, 0x0c, 0xe4, 0xbf,
	0xae, 0xe6, 0x94, 0xb9, 0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0x1a, 0x36, 0xe6, 0xa0, 0xb9, 0xe6,
	0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe4, 0xbf,
	0xae, 0xe6, 0x94, 0xb9, 0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x12, 0xee, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa0, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51, 0x2a, 0x4f, 0x2f, 0x62, 0x63, 0x73, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x74, 0x79,
	0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x46, 0x12, 0x0c, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0x1a, 0x36, 0xe6, 0xa0, 0xb9,
	0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0xef, 0xbc, 0x8c, 0xe5, 0xb9,
	0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x12, 0xd1, 0x01, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x1b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x7d, 0x92, 0x41, 0x51, 0x12, 0x0c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c,
	0x87, 0xe6, 0xa0, 0x87, 0x1a, 0x41, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c,
	0x87, 0xe6, 0xa0, 0x87, 0x28, 0xe5, 0xb8, 0xa6, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x29, 0xef,
	0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd,
	0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xd3, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x7a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x62, 0x63, 0x73, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x92, 0x41, 0x51, 0x12, 0x12, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0xe8, 0xa1, 0xa8, 0xe5, 0x90, 0x8d,
	0x1a, 0x3b, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0xe8, 0xa1,
	0xa8, 0xe5, 0x90, 0x8d, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x28, 0xe6, 0x97, 0xa0,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x29, 0x12, 0xd1, 0x01,
	0x0a, 0x0b, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1b, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x38, 0x22, 0x2e, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76,
	0x32, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x7b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65,
	0x7d, 0x3a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x92, 0x41, 0x43, 0x12, 0x0b, 0x77, 0x61,
	0x74, 0x63, 0x68, 0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0x1a, 0x34, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d,
	0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0x77, 0x61, 0x74,
	0x63, 0x68, 0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0x77, 0x61, 0x74, 0x63, 0x68, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x30,
	0x01, 0x12, 0xa0, 0x02, 0x0a, 0x13, 0x4b, 0x38, 0x53, 0x47, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x4b, 0x38, 0x53, 0x47, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4b, 0x38, 0x53, 0x47, 0x65, 0x74, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x64, 0x12, 0x62, 0x2f,
	0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6b, 0x38,
	0x73, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x7d, 0x92, 0x41, 0x50, 0x12, 0x11, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x77, 0x61, 0x74, 0x63,
	0x68, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x1a, 0x3b, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x77, 0x61, 0x74, 0x63, 0x68, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xef, 0xbc, 0x8c, 0xe5,
	0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xa3, 0x02, 0x0a, 0x13, 0x4b, 0x38, 0x53, 0x50, 0x75, 0x74, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4b, 0x38, 0x53, 0x50, 0x75, 0x74, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4b, 0x38, 0x53, 0x50,
	0x75, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc0, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x67,
	0x1a, 0x62, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32,
	0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x50, 0x12, 0x11, 0xe4, 0xbf, 0xae, 0xe6,
	0x94, 0xb9, 0x77, 0x61, 0x74, 0x63, 0x68, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x1a, 0x3b, 0xe6,
	0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc,
	0x8c, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0x77, 0x61, 0x74, 0x63, 0x68, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93,
	0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xa9, 0x02, 0x0a, 0x16, 0x4b,
	0x38, 0x53, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x4b, 0x38, 0x53, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4b, 0x38, 0x53, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x64, 0x2a,
	0x62, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f,
	0x6b, 0x38, 0x73, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x7d, 0x92, 0x41, 0x50, 0x12, 0x11, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x77, 0x61,
	0x74, 0x63, 0x68, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x1a, 0x3b, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d,
	0xae, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0x77, 0x61, 0x74, 0x63, 0x68, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xef, 0xbc,
	0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x12, 0xa0, 0x02, 0x0a, 0x14, 0x4b, 0x38, 0x53, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x24, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4b, 0x38, 0x53, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x4b, 0x38, 0x53, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xba, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x55, 0x12, 0x53, 0x2f, 0x62, 0x63, 0x73, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x7d, 0x92, 0x41, 0x5c, 0x12, 0x17, 0xe6,
	0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x77, 0x61, 0x74, 0x63, 0x68,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x1a, 0x41, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x77, 0x61, 0x74, 0x63, 0x68, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x93, 0x8d,
	0xe4, 0xbd, 0x9c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x42, 0x50, 0x5a, 0x0a, 0x2e, 0x2f, 0x3b,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x92, 0x41, 0x41, 0x12, 0x18, 0x0a, 0x0f, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x20, 0x41, 0x50, 0x49, 0x20, 0x44, 0x6f, 0x63, 0x32, 0x05, 0x30,
	0x2e, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_pkg_proto_bcs_storage_proto_rawDescOnce sync.Once
	file_pkg_proto_bcs_storage_proto_rawDescData = file_pkg_proto_bcs_storage_proto_rawDesc
)

func file_pkg_proto_bcs_storage_proto_rawDescGZIP() []byte {
	file_pkg_proto_bcs_storage_proto_rawDescOnce.Do(func() {
		file_pkg_proto_bcs_storage_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_proto_bcs_storage_proto_rawDescData)
	})
	return file_pkg_proto_bcs_storage_proto_rawDescData
}

var file_pkg_proto_bcs_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 144)
var file_pkg_proto_bcs_storage_proto_goTypes = []interface{}{
	(*Alarm)(nil),                                // 0: storage.Alarm
	(*PostAlarmRequest)(nil),                     // 1: storage.PostAlarmRequest
	(*PostAlarmResponse)(nil),                    // 2: storage.PostAlarmResponse
	(*ListAlarmRequest)(nil),                     // 3: storage.ListAlarmRequest
	(*ListAlarmResponse)(nil),                    // 4: storage.ListAlarmResponse
	(*ClusterConfig)(nil),                        // 5: storage.ClusterConfig
	(*GetClusterConfigRequest)(nil),              // 6: storage.GetClusterConfigRequest
	(*ConfigSet)(nil),                            // 7: storage.ConfigSet
	(*ClusterSet)(nil),                           // 8: storage.ClusterSet
	(*DeployConfig)(nil),                         // 9: storage.DeployConfig
	(*GetClusterConfigResponse)(nil),             // 10: storage.GetClusterConfigResponse
	(*BcsStorageCluster)(nil),                    // 11: storage.BcsStorageCluster
	(*PutClusterConfigRequest)(nil),              // 12: storage.PutClusterConfigRequest
	(*PutClusterConfigResponse)(nil),             // 13: storage.PutClusterConfigResponse
	(*GetServiceConfigRequest)(nil),              // 14: storage.GetServiceConfigRequest
	(*GetServiceConfigResponse)(nil),             // 15: storage.GetServiceConfigResponse
	(*GetStableVersionRequest)(nil),              // 16: storage.GetStableVersionRequest
	(*GetStableVersionResponse)(nil),             // 17: storage.GetStableVersionResponse
	(*PutStableVersionRequest)(nil),              // 18: storage.PutStableVersionRequest
	(*PutStableVersionResponse)(nil),             // 19: storage.PutStableVersionResponse
	(*Resources)(nil),                            // 20: storage.Resources
	(*GetNamespaceResourcesRequest)(nil),         // 21: storage.GetNamespaceResourcesRequest
	(*GetNamespaceResourcesResponse)(nil),        // 22: storage.GetNamespaceResourcesResponse
	(*PutNamespaceResourcesRequest)(nil),         // 23: storage.PutNamespaceResourcesRequest
	(*PutNamespaceResourcesResponse)(nil),        // 24: storage.PutNamespaceResourcesResponse
	(*DeleteNamespaceResourcesRequest)(nil),      // 25: storage.DeleteNamespaceResourcesRequest
	(*DeleteNamespaceResourcesResponse)(nil),     // 26: storage.DeleteNamespaceResourcesResponse
	(*ListNamespaceResourcesRequest)(nil),        // 27: storage.ListNamespaceResourcesRequest
	(*ListNamespaceResourcesResponse)(nil),       // 28: storage.ListNamespaceResourcesResponse
	(*DeleteBatchNamespaceResourceRequest)(nil),  // 29: storage.DeleteBatchNamespaceResourceRequest
	(*DeleteBatchNamespaceResourceResponse)(nil), // 30: storage.DeleteBatchNamespaceResourceResponse
	(*GetClusterResourcesRequest)(nil),           // 31: storage.GetClusterResourcesRequest
	(*GetClusterResourcesResponse)(nil),          // 32: storage.GetClusterResourcesResponse
	(*PutClusterResourcesRequest)(nil),           // 33: storage.PutClusterResourcesRequest
	(*PutClusterResourcesResponse)(nil),          // 34: storage.PutClusterResourcesResponse
	(*DeleteClusterResourcesRequest)(nil),        // 35: storage.DeleteClusterResourcesRequest
	(*DeleteClusterResourcesResponse)(nil),       // 36: storage.DeleteClusterResourcesResponse
	(*ListClusterResourcesRequest)(nil),          // 37: storage.ListClusterResourcesRequest
	(*ListClusterResourcesResponse)(nil),         // 38: storage.ListClusterResourcesResponse
	(*DeleteBatchClusterResourceRequest)(nil),    // 39: storage.DeleteBatchClusterResourceRequest
	(*DeleteBatchClusterResourceResponse)(nil),   // 40: storage.DeleteBatchClusterResourceResponse
	(*GetCustomResourcesRequest)(nil),            // 41: storage.GetCustomResourcesRequest
	(*GetCustomResourcesResponse)(nil),           // 42: storage.GetCustomResourcesResponse
	(*DeleteCustomResourcesRequest)(nil),         // 43: storage.DeleteCustomResourcesRequest
	(*DeleteCustomResourcesResponse)(nil),        // 44: storage.DeleteCustomResourcesResponse
	(*PutCustomResourcesRequest)(nil),            // 45: storage.PutCustomResourcesRequest
	(*PutCustomResourcesResponse)(nil),           // 46: storage.PutCustomResourcesResponse
	(*CreateCustomResourcesIndexRequest)(nil),    // 47: storage.CreateCustomResourcesIndexRequest
	(*CreateCustomResourcesIndexResponse)(nil),   // 48: storage.CreateCustomResourcesIndexResponse
	(*DeleteCustomResourcesIndexRequest)(nil),    // 49: storage.DeleteCustomResourcesIndexRequest
	(*DeleteCustomResourcesIndexResponse)(nil),   // 50: storage.DeleteCustomResourcesIndexResponse
	(*IPPoolStatic)(nil),                         // 51: storage.IPPoolStatic
	(*IPPoolStaticRequest)(nil),                  // 52: storage.IPPoolStaticRequest
	(*IPPoolStaticResponse)(nil),                 // 53: storage.IPPoolStaticResponse
	(*IPPoolStaticDetail)(nil),                   // 54: storage.IPPoolStaticDetail
	(*IPPoolStaticDetailRequest)(nil),            // 55: storage.IPPoolStaticDetailRequest
	(*IPPoolStaticDetailResponse)(nil),           // 56: storage.IPPoolStaticDetailResponse
	(*Pod)(nil),                                  // 57: storage.Pod
	(*PodRequest)(nil),                           // 58: storage.PodRequest
	(*PodResponse)(nil),                          // 59: storage.PodResponse
	(*ReplicaSet)(nil),                           // 60: storage.ReplicaSet
	(*ReplicaSetRequest)(nil),                    // 61: storage.ReplicaSetRequest
	(*ReplicaSetResponse)(nil),                   // 62: storage.ReplicaSetResponse
	(*DeploymentK8S)(nil),                        // 63: storage.DeploymentK8S
	(*DeploymentK8SRequest)(nil),                 // 64: storage.DeploymentK8SRequest
	(*DeploymentK8SResponse)(nil),                // 65: storage.DeploymentK8SResponse
	(*ServiceK8S)(nil),                           // 66: storage.ServiceK8S
	(*ServiceK8SRequest)(nil),                    // 67: storage.ServiceK8SRequest
	(*ServiceK8SResponse)(nil),                   // 68: storage.ServiceK8SResponse
	(*ConfigMapK8S)(nil),                         // 69: storage.ConfigMapK8S
	(*ConfigMapK8SRequest)(nil),                  // 70: storage.ConfigMapK8SRequest
	(*ConfigMapK8SResponse)(nil),                 // 71: storage.ConfigMapK8SResponse
	(*SecretK8S)(nil),                            // 72: storage.SecretK8S
	(*SecretK8SRequest)(nil),                     // 73: storage.SecretK8SRequest
	(*SecretK8SResponse)(nil),                    // 74: storage.SecretK8SResponse
	(*EndpointsK8S)(nil),                         // 75: storage.EndpointsK8S
	(*EndpointsK8SRequest)(nil),                  // 76: storage.EndpointsK8SRequest
	(*EndpointsK8SResponse)(nil),                 // 77: storage.EndpointsK8SResponse
	(*Ingress)(nil),                              // 78: storage.Ingress
	(*IngressRequest)(nil),                       // 79: storage.IngressRequest
	(*IngressResponse)(nil),                      // 80: storage.IngressResponse
	(*Namespace)(nil),                            // 81: storage.Namespace
	(*NamespaceK8SRequest)(nil),                  // 82: storage.NamespaceK8SRequest
	(*NamespaceK8SResponse)(nil),                 // 83: storage.NamespaceK8SResponse
	(*Node)(nil),                                 // 84: storage.Node
	(*NodeRequest)(nil),                          // 85: storage.NodeRequest
	(*NodeResponse)(nil),                         // 86: storage.NodeResponse
	(*DaemonSet)(nil),                            // 87: storage.DaemonSet
	(*DaemonSetRequest)(nil),                     // 88: storage.DaemonSetRequest
	(*DaemonSetResponse)(nil),                    // 89: storage.DaemonSetResponse
	(*Job)(nil),                                  // 90: storage.Job
	(*JobRequest)(nil),                           // 91: storage.JobRequest
	(*JobResponse)(nil),                          // 92: storage.JobResponse
	(*StatefulSet)(nil),                          // 93: storage.StatefulSet
	(*StatefulSetRequest)(nil),                   // 94: storage.StatefulSetRequest
	(*StatefulSetResponse)(nil),                  // 95: storage.StatefulSetResponse
	(*WatchDynamicRequest)(nil),                  // 96: storage.WatchDynamicRequest
	(*WatchDynamicResponse)(nil),                 // 97: storage.WatchDynamicResponse
	(*WatchContainerRequest)(nil),                // 98: storage.WatchContainerRequest
	(*WatchContainerResponse)(nil),               // 99: storage.WatchContainerResponse
	(*EventExtraInfo)(nil),                       // 100: storage.EventExtraInfo
	(*BcsStorageEvent)(nil),                      // 101: storage.BcsStorageEvent
	(*PutEventRequest)(nil),                      // 102: storage.PutEventRequest
	(*PutEventResponse)(nil),                     // 103: storage.PutEventResponse
	(*ListEventRequest)(nil),                     // 104: storage.ListEventRequest
	(*ListEventResponse)(nil),                    // 105: storage.ListEventResponse
	(*StoreWatchOption)(nil),                     // 106: storage.StoreWatchOption
	(*WatchEventRequest)(nil),                    // 107: storage.WatchEventRequest
	(*WatchEventResponse)(nil),                   // 108: storage.WatchEventResponse
	(*BcsStorageHost)(nil),                       // 109: storage.BcsStorageHost
	(*GetHostRequest)(nil),                       // 110: storage.GetHostRequest
	(*GetHostResponse)(nil),                      // 111: storage.GetHostResponse
	(*PutHostRequest)(nil),                       // 112: storage.PutHostRequest
	(*PutHostResponse)(nil),                      // 113: storage.PutHostResponse
	(*DeleteHostRequest)(nil),                    // 114: storage.DeleteHostRequest
	(*DeleteHostResponse)(nil),                   // 115: storage.DeleteHostResponse
	(*ListHostRequest)(nil),                      // 116: storage.ListHostRequest
	(*ListHostResponse)(nil),                     // 117: storage.ListHostResponse
	(*PutClusterRelationRequest)(nil),            // 118: storage.PutClusterRelationRequest
	(*PutClusterRelationResponse)(nil),           // 119: storage.PutClusterRelationResponse
	(*PostClusterRelationRequest)(nil),           // 120: storage.PostClusterRelationRequest
	(*PostClusterRelationResponse)(nil),          // 121: storage.PostClusterRelationResponse
	(*Metric)(nil),                               // 122: storage.Metric
	(*GetMetricRequest)(nil),                     // 123: storage.GetMetricRequest
	(*GetMetricResponse)(nil),                    // 124: storage.GetMetricResponse
	(*PutMetricRequest)(nil),                     // 125: storage.PutMetricRequest
	(*PutMetricResponse)(nil),                    // 126: storage.PutMetricResponse
	(*DeleteMetricRequest)(nil),                  // 127: storage.DeleteMetricRequest
	(*DeleteMetricResponse)(nil),                 // 128: storage.DeleteMetricResponse
	(*QueryMetricRequest)(nil),                   // 129: storage.QueryMetricRequest
	(*QueryMetricResponse)(nil),                  // 130: storage.QueryMetricResponse
	(*ListMetricTablesRequest)(nil),              // 131: storage.ListMetricTablesRequest
	(*ListMetricTablesResponse)(nil),             // 132: storage.ListMetricTablesResponse
	(*WatchMetricRequest)(nil),                   // 133: storage.WatchMetricRequest
	(*WatchMetricResponse)(nil),                  // 134: storage.WatchMetricResponse
	(*WatchResource)(nil),                        // 135: storage.WatchResource
	(*K8SGetWatchResourceRequest)(nil),           // 136: storage.K8SGetWatchResourceRequest
	(*K8SGetWatchResourceResponse)(nil),          // 137: storage.K8SGetWatchResourceResponse
	(*K8SPutWatchResourceRequest)(nil),           // 138: storage.K8SPutWatchResourceRequest
	(*K8SPutWatchResourceResponse)(nil),          // 139: storage.K8SPutWatchResourceResponse
	(*K8SDeleteWatchResourceRequest)(nil),        // 140: storage.K8SDeleteWatchResourceRequest
	(*K8SDeleteWatchResourceResponse)(nil),       // 141: storage.K8SDeleteWatchResourceResponse
	(*K8SListWatchResourceRequest)(nil),          // 142: storage.K8SListWatchResourceRequest
	(*K8SListWatchResourceResponse)(nil),         // 143: storage.K8SListWatchResourceResponse
	(*_struct.Struct)(nil),                       // 144: google.protobuf.Struct
	(*duration.Duration)(nil),                    // 145: google.protobuf.Duration
}
var file_pkg_proto_bcs_storage_proto_depIdxs = []int32{
	144, // 0: storage.Alarm.data:type_name -> google.protobuf.Struct
	144, // 1: storage.PostAlarmRequest.data:type_name -> google.protobuf.Struct
	144, // 2: storage.PostAlarmResponse.data:type_name -> google.protobuf.Struct
	144, // 3: storage.ListAlarmResponse.data:type_name -> google.protobuf.Struct
	144, // 4: storage.ListAlarmResponse.extra:type_name -> google.protobuf.Struct
	144, // 5: storage.ConfigSet.common:type_name -> google.protobuf.Struct
	144, // 6: storage.ConfigSet.conf:type_name -> google.protobuf.Struct
	7,   // 7: storage.ClusterSet.clusterConfig:type_name -> storage.ConfigSet
	7,   // 8: storage.DeployConfig.serviceConfig:type_name -> storage.ConfigSet
	8,   // 9: storage.DeployConfig.clusters:type_name -> storage.ClusterSet
	9,   // 10: storage.GetClusterConfigResponse.data:type_name -> storage.DeployConfig
	9,   // 11: storage.PutClusterConfigResponse.data:type_name -> storage.DeployConfig
	9,   // 12: storage.GetServiceConfigResponse.data:type_name -> storage.DeployConfig
	144, // 13: storage.GetNamespaceResourcesResponse.data:type_name -> google.protobuf.Struct
	144, // 14: storage.PutNamespaceResourcesRequest.data:type_name -> google.protobuf.Struct
	144, // 15: storage.PutNamespaceResourcesResponse.data:type_name -> google.protobuf.Struct
	144, // 16: storage.DeleteNamespaceResourcesResponse.data:type_name -> google.protobuf.Struct
	144, // 17: storage.ListNamespaceResourcesResponse.data:type_name -> google.protobuf.Struct
	144, // 18: storage.DeleteBatchNamespaceResourceResponse.data:type_name -> google.protobuf.Struct
	144, // 19: storage.GetClusterResourcesResponse.data:type_name -> google.protobuf.Struct
	144, // 20: storage.PutClusterResourcesRequest.data:type_name -> google.protobuf.Struct
	144, // 21: storage.PutClusterResourcesResponse.data:type_name -> google.protobuf.Struct
	144, // 22: storage.DeleteClusterResourcesResponse.data:type_name -> google.protobuf.Struct
	144, // 23: storage.ListClusterResourcesResponse.data:type_name -> google.protobuf.Struct
	144, // 24: storage.DeleteBatchClusterResourceResponse.data:type_name -> google.protobuf.Struct
	144, // 25: storage.GetCustomResourcesResponse.data:type_name -> google.protobuf.Struct
	144, // 26: storage.DeleteCustomResourcesResponse.data:type_name -> google.protobuf.Struct
	144, // 27: storage.PutCustomResourcesRequest.data:type_name -> google.protobuf.Struct
	144, // 28: storage.PutCustomResourcesResponse.data:type_name -> google.protobuf.Struct
	144, // 29: storage.CreateCustomResourcesIndexRequest.data:type_name -> google.protobuf.Struct
	144, // 30: storage.CreateCustomResourcesIndexResponse.data:type_name -> google.protobuf.Struct
	144, // 31: storage.DeleteCustomResourcesIndexResponse.data:type_name -> google.protobuf.Struct
	144, // 32: storage.IPPoolStatic.data:type_name -> google.protobuf.Struct
	144, // 33: storage.IPPoolStaticRequest.data:type_name -> google.protobuf.Struct
	144, // 34: storage.IPPoolStaticResponse.data:type_name -> google.protobuf.Struct
	144, // 35: storage.IPPoolStaticDetail.data:type_name -> google.protobuf.Struct
	144, // 36: storage.IPPoolStaticDetailRequest.data:type_name -> google.protobuf.Struct
	144, // 37: storage.IPPoolStaticDetailResponse.data:type_name -> google.protobuf.Struct
	144, // 38: storage.Pod.data:type_name -> google.protobuf.Struct
	144, // 39: storage.PodResponse.data:type_name -> google.protobuf.Struct
	144, // 40: storage.ReplicaSet.data:type_name -> google.protobuf.Struct
	144, // 41: storage.ReplicaSetResponse.data:type_name -> google.protobuf.Struct
	144, // 42: storage.DeploymentK8S.data:type_name -> google.protobuf.Struct
	144, // 43: storage.DeploymentK8SRequest.Data:type_name -> google.protobuf.Struct
	144, // 44: storage.DeploymentK8SResponse.data:type_name -> google.protobuf.Struct
	144, // 45: storage.ServiceK8S.data:type_name -> google.protobuf.Struct
	144, // 46: storage.ServiceK8SResponse.data:type_name -> google.protobuf.Struct
	144, // 47: storage.ConfigMapK8S.data:type_name -> google.protobuf.Struct
	144, // 48: storage.ConfigMapK8SRequest.data:type_name -> google.protobuf.Struct
	144, // 49: storage.ConfigMapK8SResponse.data:type_name -> google.protobuf.Struct
	144, // 50: storage.SecretK8S.data:type_name -> google.protobuf.Struct
	144, // 51: storage.SecretK8SRequest.data:type_name -> google.protobuf.Struct
	144, // 52: storage.SecretK8SResponse.data:type_name -> google.protobuf.Struct
	144, // 53: storage.EndpointsK8S.data:type_name -> google.protobuf.Struct
	144, // 54: storage.EndpointsK8SResponse.data:type_name -> google.protobuf.Struct
	144, // 55: storage.Ingress.data:type_name -> google.protobuf.Struct
	144, // 56: storage.IngressResponse.data:type_name -> google.protobuf.Struct
	144, // 57: storage.Namespace.data:type_name -> google.protobuf.Struct
	144, // 58: storage.NamespaceK8SRequest.data:type_name -> google.protobuf.Struct
	144, // 59: storage.NamespaceK8SResponse.data:type_name -> google.protobuf.Struct
	144, // 60: storage.Node.data:type_name -> google.protobuf.Struct
	144, // 61: storage.NodeRequest.data:type_name -> google.protobuf.Struct
	144, // 62: storage.NodeResponse.data:type_name -> google.protobuf.Struct
	144, // 63: storage.DaemonSet.data:type_name -> google.protobuf.Struct
	144, // 64: storage.DaemonSetResponse.data:type_name -> google.protobuf.Struct
	144, // 65: storage.Job.data:type_name -> google.protobuf.Struct
	144, // 66: storage.JobResponse.data:type_name -> google.protobuf.Struct
	144, // 67: storage.StatefulSet.data:type_name -> google.protobuf.Struct
	144, // 68: storage.StatefulSetResponse.data:type_name -> google.protobuf.Struct
	106, // 69: storage.WatchDynamicRequest.option:type_name -> storage.StoreWatchOption
	144, // 70: storage.WatchDynamicResponse.value:type_name -> google.protobuf.Struct
	106, // 71: storage.WatchContainerRequest.option:type_name -> storage.StoreWatchOption
	144, // 72: storage.WatchContainerResponse.value:type_name -> google.protobuf.Struct
	100, // 73: storage.BcsStorageEvent.extraInfo:type_name -> storage.EventExtraInfo
	144, // 74: storage.BcsStorageEvent.data:type_name -> google.protobuf.Struct
	100, // 75: storage.PutEventRequest.extraInfo:type_name -> storage.EventExtraInfo
	144, // 76: storage.PutEventRequest.data:type_name -> google.protobuf.Struct
	144, // 77: storage.PutEventResponse.data:type_name -> google.protobuf.Struct
	100, // 78: storage.ListEventRequest.extraInfo:type_name -> storage.EventExtraInfo
	144, // 79: storage.ListEventRequest.extra:type_name -> google.protobuf.Struct
	144, // 80: storage.ListEventRequest.extraContain:type_name -> google.protobuf.Struct
	101, // 81: storage.ListEventResponse.data:type_name -> storage.BcsStorageEvent
	144, // 82: storage.ListEventResponse.extra:type_name -> google.protobuf.Struct
	144, // 83: storage.StoreWatchOption.cond:type_name -> google.protobuf.Struct
	145, // 84: storage.StoreWatchOption.timeout:type_name -> google.protobuf.Duration
	106, // 85: storage.WatchEventRequest.option:type_name -> storage.StoreWatchOption
	144, // 86: storage.WatchEventResponse.value:type_name -> google.protobuf.Struct
	144, // 87: storage.BcsStorageHost.data:type_name -> google.protobuf.Struct
	109, // 88: storage.GetHostResponse.data:type_name -> storage.BcsStorageHost
	144, // 89: storage.PutHostRequest.data:type_name -> google.protobuf.Struct
	144, // 90: storage.PutHostResponse.data:type_name -> google.protobuf.Struct
	144, // 91: storage.DeleteHostResponse.data:type_name -> google.protobuf.Struct
	109, // 92: storage.ListHostResponse.data:type_name -> storage.BcsStorageHost
	144, // 93: storage.PutClusterRelationResponse.data:type_name -> google.protobuf.Struct
	144, // 94: storage.PostClusterRelationResponse.data:type_name -> google.protobuf.Struct
	122, // 95: storage.GetMetricResponse.data:type_name -> storage.Metric
	144, // 96: storage.PutMetricRequest.data:type_name -> google.protobuf.Struct
	144, // 97: storage.PutMetricResponse.data:type_name -> google.protobuf.Struct
	144, // 98: storage.DeleteMetricResponse.data:type_name -> google.protobuf.Struct
	122, // 99: storage.QueryMetricResponse.data:type_name -> storage.Metric
	106, // 100: storage.WatchMetricRequest.option:type_name -> storage.StoreWatchOption
	144, // 101: storage.WatchMetricResponse.value:type_name -> google.protobuf.Struct
	144, // 102: storage.K8SGetWatchResourceResponse.data:type_name -> google.protobuf.Struct
	144, // 103: storage.K8SPutWatchResourceRequest.data:type_name -> google.protobuf.Struct
	144, // 104: storage.K8SPutWatchResourceResponse.data:type_name -> google.protobuf.Struct
	144, // 105: storage.K8SDeleteWatchResourceResponse.data:type_name -> google.protobuf.Struct
	1,   // 106: storage.Storage.PostAlarm:input_type -> storage.PostAlarmRequest
	3,   // 107: storage.Storage.ListAlarm:input_type -> storage.ListAlarmRequest
	6,   // 108: storage.Storage.GetClusterConfig:input_type -> storage.GetClusterConfigRequest
	12,  // 109: storage.Storage.PutClusterConfig:input_type -> storage.PutClusterConfigRequest
	14,  // 110: storage.Storage.GetServiceConfig:input_type -> storage.GetServiceConfigRequest
	16,  // 111: storage.Storage.GetStableVersion:input_type -> storage.GetStableVersionRequest
	18,  // 112: storage.Storage.PutStableVersion:input_type -> storage.PutStableVersionRequest
	21,  // 113: storage.Storage.GetK8SNamespaceResources:input_type -> storage.GetNamespaceResourcesRequest
	23,  // 114: storage.Storage.PutK8SNamespaceResources:input_type -> storage.PutNamespaceResourcesRequest
	25,  // 115: storage.Storage.DeleteK8SNamespaceResources:input_type -> storage.DeleteNamespaceResourcesRequest
	27,  // 116: storage.Storage.ListK8SNamespaceResources:input_type -> storage.ListNamespaceResourcesRequest
	29,  // 117: storage.Storage.DeleteBatchK8SNamespaceResource:input_type -> storage.DeleteBatchNamespaceResourceRequest
	31,  // 118: storage.Storage.GetK8SClusterResources:input_type -> storage.GetClusterResourcesRequest
	33,  // 119: storage.Storage.PutK8SClusterResources:input_type -> storage.PutClusterResourcesRequest
	35,  // 120: storage.Storage.DeleteK8SClusterResources:input_type -> storage.DeleteClusterResourcesRequest
	37,  // 121: storage.Storage.ListK8SClusterResources:input_type -> storage.ListClusterResourcesRequest
	37,  // 122: storage.Storage.ListK8SClusterAllResources:input_type -> storage.ListClusterResourcesRequest
	39,  // 123: storage.Storage.DeleteBatchK8SClusterResource:input_type -> storage.DeleteBatchClusterResourceRequest
	39,  // 124: storage.Storage.DeleteBatchK8SClusterAllResource:input_type -> storage.DeleteBatchClusterResourceRequest
	41,  // 125: storage.Storage.GetCustomResources:input_type -> storage.GetCustomResourcesRequest
	43,  // 126: storage.Storage.DeleteCustomResources:input_type -> storage.DeleteCustomResourcesRequest
	45,  // 127: storage.Storage.PutCustomResources:input_type -> storage.PutCustomResourcesRequest
	47,  // 128: storage.Storage.CreateCustomResourcesIndex:input_type -> storage.CreateCustomResourcesIndexRequest
	49,  // 129: storage.Storage.DeleteCustomResourcesIndex:input_type -> storage.DeleteCustomResourcesIndexRequest
	52,  // 130: storage.Storage.GetK8SIPPoolStatic:input_type -> storage.IPPoolStaticRequest
	52,  // 131: storage.Storage.PostK8SIPPoolStatic:input_type -> storage.IPPoolStaticRequest
	55,  // 132: storage.Storage.GetK8SIPPoolStaticDetail:input_type -> storage.IPPoolStaticDetailRequest
	55,  // 133: storage.Storage.PostK8SIPPoolStaticDetail:input_type -> storage.IPPoolStaticDetailRequest
	58,  // 134: storage.Storage.GetPod:input_type -> storage.PodRequest
	58,  // 135: storage.Storage.PostPod:input_type -> storage.PodRequest
	61,  // 136: storage.Storage.GetReplicaSet:input_type -> storage.ReplicaSetRequest
	61,  // 137: storage.Storage.PostReplicaSet:input_type -> storage.ReplicaSetRequest
	64,  // 138: storage.Storage.GetDeploymentK8S:input_type -> storage.DeploymentK8SRequest
	64,  // 139: storage.Storage.PostDeploymentK8S:input_type -> storage.DeploymentK8SRequest
	67,  // 140: storage.Storage.GetServiceK8S:input_type -> storage.ServiceK8SRequest
	67,  // 141: storage.Storage.PostServiceK8S:input_type -> storage.ServiceK8SRequest
	70,  // 142: storage.Storage.GetConfigMapK8S:input_type -> storage.ConfigMapK8SRequest
	70,  // 143: storage.Storage.PostConfigMapK8S:input_type -> storage.ConfigMapK8SRequest
	73,  // 144: storage.Storage.GetSecretK8S:input_type -> storage.SecretK8SRequest
	73,  // 145: storage.Storage.PostSecretK8S:input_type -> storage.SecretK8SRequest
	76,  // 146: storage.Storage.GetEndpointsK8S:input_type -> storage.EndpointsK8SRequest
	76,  // 147: storage.Storage.PostEndpointsK8S:input_type -> storage.EndpointsK8SRequest
	79,  // 148: storage.Storage.GetIngress:input_type -> storage.IngressRequest
	79,  // 149: storage.Storage.PostIngress:input_type -> storage.IngressRequest
	82,  // 150: storage.Storage.GetNamespaceK8S:input_type -> storage.NamespaceK8SRequest
	82,  // 151: storage.Storage.PostNamespaceK8S:input_type -> storage.NamespaceK8SRequest
	85,  // 152: storage.Storage.GetNode:input_type -> storage.NodeRequest
	85,  // 153: storage.Storage.PostNode:input_type -> storage.NodeRequest
	88,  // 154: storage.Storage.GetDaemonSet:input_type -> storage.DaemonSetRequest
	88,  // 155: storage.Storage.PostDaemonSet:input_type -> storage.DaemonSetRequest
	91,  // 156: storage.Storage.GetJob:input_type -> storage.JobRequest
	91,  // 157: storage.Storage.PostJob:input_type -> storage.JobRequest
	94,  // 158: storage.Storage.GetStatefulSet:input_type -> storage.StatefulSetRequest
	94,  // 159: storage.Storage.PostStatefulSet:input_type -> storage.StatefulSetRequest
	96,  // 160: storage.Storage.WatchDynamic:input_type -> storage.WatchDynamicRequest
	98,  // 161: storage.Storage.WatchContainer:input_type -> storage.WatchContainerRequest
	102, // 162: storage.Storage.PutEvent:input_type -> storage.PutEventRequest
	104, // 163: storage.Storage.ListEvent:input_type -> storage.ListEventRequest
	107, // 164: storage.Storage.WatchEvent:input_type -> storage.WatchEventRequest
	110, // 165: storage.Storage.GetHost:input_type -> storage.GetHostRequest
	112, // 166: storage.Storage.PutHost:input_type -> storage.PutHostRequest
	114, // 167: storage.Storage.DeleteHost:input_type -> storage.DeleteHostRequest
	116, // 168: storage.Storage.ListHost:input_type -> storage.ListHostRequest
	118, // 169: storage.Storage.PutClusterRelation:input_type -> storage.PutClusterRelationRequest
	120, // 170: storage.Storage.PostClusterRelation:input_type -> storage.PostClusterRelationRequest
	123, // 171: storage.Storage.GetMetric:input_type -> storage.GetMetricRequest
	125, // 172: storage.Storage.PutMetric:input_type -> storage.PutMetricRequest
	127, // 173: storage.Storage.DeleteMetric:input_type -> storage.DeleteMetricRequest
	129, // 174: storage.Storage.QueryMetric:input_type -> storage.QueryMetricRequest
	131, // 175: storage.Storage.ListMetricTables:input_type -> storage.ListMetricTablesRequest
	133, // 176: storage.Storage.WatchMetric:input_type -> storage.WatchMetricRequest
	136, // 177: storage.Storage.K8SGetWatchResource:input_type -> storage.K8SGetWatchResourceRequest
	138, // 178: storage.Storage.K8SPutWatchResource:input_type -> storage.K8SPutWatchResourceRequest
	140, // 179: storage.Storage.K8SDeleteWatchResource:input_type -> storage.K8SDeleteWatchResourceRequest
	142, // 180: storage.Storage.K8SListWatchResource:input_type -> storage.K8SListWatchResourceRequest
	2,   // 181: storage.Storage.PostAlarm:output_type -> storage.PostAlarmResponse
	4,   // 182: storage.Storage.ListAlarm:output_type -> storage.ListAlarmResponse
	10,  // 183: storage.Storage.GetClusterConfig:output_type -> storage.GetClusterConfigResponse
	13,  // 184: storage.Storage.PutClusterConfig:output_type -> storage.PutClusterConfigResponse
	15,  // 185: storage.Storage.GetServiceConfig:output_type -> storage.GetServiceConfigResponse
	17,  // 186: storage.Storage.GetStableVersion:output_type -> storage.GetStableVersionResponse
	19,  // 187: storage.Storage.PutStableVersion:output_type -> storage.PutStableVersionResponse
	22,  // 188: storage.Storage.GetK8SNamespaceResources:output_type -> storage.GetNamespaceResourcesResponse
	24,  // 189: storage.Storage.PutK8SNamespaceResources:output_type -> storage.PutNamespaceResourcesResponse
	26,  // 190: storage.Storage.DeleteK8SNamespaceResources:output_type -> storage.DeleteNamespaceResourcesResponse
	28,  // 191: storage.Storage.ListK8SNamespaceResources:output_type -> storage.ListNamespaceResourcesResponse
	30,  // 192: storage.Storage.DeleteBatchK8SNamespaceResource:output_type -> storage.DeleteBatchNamespaceResourceResponse
	32,  // 193: storage.Storage.GetK8SClusterResources:output_type -> storage.GetClusterResourcesResponse
	34,  // 194: storage.Storage.PutK8SClusterResources:output_type -> storage.PutClusterResourcesResponse
	36,  // 195: storage.Storage.DeleteK8SClusterResources:output_type -> storage.DeleteClusterResourcesResponse
	38,  // 196: storage.Storage.ListK8SClusterResources:output_type -> storage.ListClusterResourcesResponse
	38,  // 197: storage.Storage.ListK8SClusterAllResources:output_type -> storage.ListClusterResourcesResponse
	40,  // 198: storage.Storage.DeleteBatchK8SClusterResource:output_type -> storage.DeleteBatchClusterResourceResponse
	40,  // 199: storage.Storage.DeleteBatchK8SClusterAllResource:output_type -> storage.DeleteBatchClusterResourceResponse
	42,  // 200: storage.Storage.GetCustomResources:output_type -> storage.GetCustomResourcesResponse
	44,  // 201: storage.Storage.DeleteCustomResources:output_type -> storage.DeleteCustomResourcesResponse
	46,  // 202: storage.Storage.PutCustomResources:output_type -> storage.PutCustomResourcesResponse
	48,  // 203: storage.Storage.CreateCustomResourcesIndex:output_type -> storage.CreateCustomResourcesIndexResponse
	50,  // 204: storage.Storage.DeleteCustomResourcesIndex:output_type -> storage.DeleteCustomResourcesIndexResponse
	53,  // 205: storage.Storage.GetK8SIPPoolStatic:output_type -> storage.IPPoolStaticResponse
	53,  // 206: storage.Storage.PostK8SIPPoolStatic:output_type -> storage.IPPoolStaticResponse
	56,  // 207: storage.Storage.GetK8SIPPoolStaticDetail:output_type -> storage.IPPoolStaticDetailResponse
	56,  // 208: storage.Storage.PostK8SIPPoolStaticDetail:output_type -> storage.IPPoolStaticDetailResponse
	59,  // 209: storage.Storage.GetPod:output_type -> storage.PodResponse
	59,  // 210: storage.Storage.PostPod:output_type -> storage.PodResponse
	62,  // 211: storage.Storage.GetReplicaSet:output_type -> storage.ReplicaSetResponse
	62,  // 212: storage.Storage.PostReplicaSet:output_type -> storage.ReplicaSetResponse
	65,  // 213: storage.Storage.GetDeploymentK8S:output_type -> storage.DeploymentK8SResponse
	65,  // 214: storage.Storage.PostDeploymentK8S:output_type -> storage.DeploymentK8SResponse
	68,  // 215: storage.Storage.GetServiceK8S:output_type -> storage.ServiceK8SResponse
	68,  // 216: storage.Storage.PostServiceK8S:output_type -> storage.ServiceK8SResponse
	71,  // 217: storage.Storage.GetConfigMapK8S:output_type -> storage.ConfigMapK8SResponse
	71,  // 218: storage.Storage.PostConfigMapK8S:output_type -> storage.ConfigMapK8SResponse
	74,  // 219: storage.Storage.GetSecretK8S:output_type -> storage.SecretK8SResponse
	74,  // 220: storage.Storage.PostSecretK8S:output_type -> storage.SecretK8SResponse
	77,  // 221: storage.Storage.GetEndpointsK8S:output_type -> storage.EndpointsK8SResponse
	77,  // 222: storage.Storage.PostEndpointsK8S:output_type -> storage.EndpointsK8SResponse
	80,  // 223: storage.Storage.GetIngress:output_type -> storage.IngressResponse
	80,  // 224: storage.Storage.PostIngress:output_type -> storage.IngressResponse
	83,  // 225: storage.Storage.GetNamespaceK8S:output_type -> storage.NamespaceK8SResponse
	83,  // 226: storage.Storage.PostNamespaceK8S:output_type -> storage.NamespaceK8SResponse
	86,  // 227: storage.Storage.GetNode:output_type -> storage.NodeResponse
	86,  // 228: storage.Storage.PostNode:output_type -> storage.NodeResponse
	89,  // 229: storage.Storage.GetDaemonSet:output_type -> storage.DaemonSetResponse
	89,  // 230: storage.Storage.PostDaemonSet:output_type -> storage.DaemonSetResponse
	92,  // 231: storage.Storage.GetJob:output_type -> storage.JobResponse
	92,  // 232: storage.Storage.PostJob:output_type -> storage.JobResponse
	95,  // 233: storage.Storage.GetStatefulSet:output_type -> storage.StatefulSetResponse
	95,  // 234: storage.Storage.PostStatefulSet:output_type -> storage.StatefulSetResponse
	97,  // 235: storage.Storage.WatchDynamic:output_type -> storage.WatchDynamicResponse
	99,  // 236: storage.Storage.WatchContainer:output_type -> storage.WatchContainerResponse
	103, // 237: storage.Storage.PutEvent:output_type -> storage.PutEventResponse
	105, // 238: storage.Storage.ListEvent:output_type -> storage.ListEventResponse
	108, // 239: storage.Storage.WatchEvent:output_type -> storage.WatchEventResponse
	111, // 240: storage.Storage.GetHost:output_type -> storage.GetHostResponse
	113, // 241: storage.Storage.PutHost:output_type -> storage.PutHostResponse
	115, // 242: storage.Storage.DeleteHost:output_type -> storage.DeleteHostResponse
	117, // 243: storage.Storage.ListHost:output_type -> storage.ListHostResponse
	119, // 244: storage.Storage.PutClusterRelation:output_type -> storage.PutClusterRelationResponse
	121, // 245: storage.Storage.PostClusterRelation:output_type -> storage.PostClusterRelationResponse
	124, // 246: storage.Storage.GetMetric:output_type -> storage.GetMetricResponse
	126, // 247: storage.Storage.PutMetric:output_type -> storage.PutMetricResponse
	128, // 248: storage.Storage.DeleteMetric:output_type -> storage.DeleteMetricResponse
	130, // 249: storage.Storage.QueryMetric:output_type -> storage.QueryMetricResponse
	132, // 250: storage.Storage.ListMetricTables:output_type -> storage.ListMetricTablesResponse
	134, // 251: storage.Storage.WatchMetric:output_type -> storage.WatchMetricResponse
	137, // 252: storage.Storage.K8SGetWatchResource:output_type -> storage.K8SGetWatchResourceResponse
	139, // 253: storage.Storage.K8SPutWatchResource:output_type -> storage.K8SPutWatchResourceResponse
	141, // 254: storage.Storage.K8SDeleteWatchResource:output_type -> storage.K8SDeleteWatchResourceResponse
	143, // 255: storage.Storage.K8SListWatchResource:output_type -> storage.K8SListWatchResourceResponse
	181, // [181:256] is the sub-list for method output_type
	106, // [106:181] is the sub-list for method input_type
	106, // [106:106] is the sub-list for extension type_name
	106, // [106:106] is the sub-list for extension extendee
	0,   // [0:106] is the sub-list for field type_name
}

func init() { file_pkg_proto_bcs_storage_proto_init() }
func file_pkg_proto_bcs_storage_proto_init() {
	if File_pkg_proto_bcs_storage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_proto_bcs_storage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAlarmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAlarmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAlarmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAlarmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BcsStorageCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutClusterConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutClusterConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStableVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStableVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutStableVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutStableVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNamespaceResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNamespaceResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutNamespaceResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutNamespaceResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNamespaceResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNamespaceResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespaceResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespaceResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBatchNamespaceResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBatchNamespaceResourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutClusterResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutClusterResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClusterResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClusterResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBatchClusterResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBatchClusterResourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCustomResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCustomResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutCustomResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutCustomResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCustomResourcesIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCustomResourcesIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCustomResourcesIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCustomResourcesIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPPoolStatic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPPoolStaticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPPoolStaticResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPPoolStaticDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPPoolStaticDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPPoolStaticDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentK8S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentK8SRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentK8SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceK8S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceK8SRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceK8SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigMapK8S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigMapK8SRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigMapK8SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretK8S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretK8SRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretK8SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointsK8S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointsK8SRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointsK8SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Namespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceK8SRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceK8SResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaemonSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaemonSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaemonSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatefulSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatefulSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatefulSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDynamicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDynamicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchContainerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchContainerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BcsStorageEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreWatchOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BcsStorageHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutHostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutHostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutClusterRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutClusterRelationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostClusterRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostClusterRelationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetricResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutMetricResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMetricResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMetricResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMetricTablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMetricTablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchMetricResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SGetWatchResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SGetWatchResourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SPutWatchResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SPutWatchResourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SDeleteWatchResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SDeleteWatchResourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SListWatchResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_bcs_storage_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SListWatchResourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_proto_bcs_storage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   144,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_proto_bcs_storage_proto_goTypes,
		DependencyIndexes: file_pkg_proto_bcs_storage_proto_depIdxs,
		MessageInfos:      file_pkg_proto_bcs_storage_proto_msgTypes,
	}.Build()
	File_pkg_proto_bcs_storage_proto = out.File
	file_pkg_proto_bcs_storage_proto_rawDesc = nil
	file_pkg_proto_bcs_storage_proto_goTypes = nil
	file_pkg_proto_bcs_storage_proto_depIdxs = nil
}
