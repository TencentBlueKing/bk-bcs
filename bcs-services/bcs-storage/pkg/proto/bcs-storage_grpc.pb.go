// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: pkg/proto/bcs-storage.proto

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageClient interface {
	// **** Alarm(告警) ****
	PostAlarm(ctx context.Context, in *PostAlarmRequest, opts ...grpc.CallOption) (*PostAlarmResponse, error)
	ListAlarm(ctx context.Context, in *ListAlarmRequest, opts ...grpc.CallOption) (*ListAlarmResponse, error)
	// ****  Cluster Config(集群配置) ****
	GetClusterConfig(ctx context.Context, in *GetClusterConfigRequest, opts ...grpc.CallOption) (*GetClusterConfigResponse, error)
	PutClusterConfig(ctx context.Context, in *PutClusterConfigRequest, opts ...grpc.CallOption) (*PutClusterConfigResponse, error)
	GetServiceConfig(ctx context.Context, in *GetServiceConfigRequest, opts ...grpc.CallOption) (*GetServiceConfigResponse, error)
	GetStableVersion(ctx context.Context, in *GetStableVersionRequest, opts ...grpc.CallOption) (*GetStableVersionResponse, error)
	PutStableVersion(ctx context.Context, in *PutStableVersionRequest, opts ...grpc.CallOption) (*PutStableVersionResponse, error)
	//
	//k8s namespace resources
	GetK8SNamespaceResources(ctx context.Context, in *GetNamespaceResourcesRequest, opts ...grpc.CallOption) (*GetNamespaceResourcesResponse, error)
	PutK8SNamespaceResources(ctx context.Context, in *PutNamespaceResourcesRequest, opts ...grpc.CallOption) (*PutNamespaceResourcesResponse, error)
	DeleteK8SNamespaceResources(ctx context.Context, in *DeleteNamespaceResourcesRequest, opts ...grpc.CallOption) (*DeleteNamespaceResourcesResponse, error)
	ListK8SNamespaceResources(ctx context.Context, in *ListNamespaceResourcesRequest, opts ...grpc.CallOption) (*ListNamespaceResourcesResponse, error)
	DeleteBatchK8SNamespaceResource(ctx context.Context, in *DeleteBatchNamespaceResourceRequest, opts ...grpc.CallOption) (*DeleteBatchNamespaceResourceResponse, error)
	// k8s cluster resources
	GetK8SClusterResources(ctx context.Context, in *GetClusterResourcesRequest, opts ...grpc.CallOption) (*GetClusterResourcesResponse, error)
	PutK8SClusterResources(ctx context.Context, in *PutClusterResourcesRequest, opts ...grpc.CallOption) (*PutClusterResourcesResponse, error)
	DeleteK8SClusterResources(ctx context.Context, in *DeleteClusterResourcesRequest, opts ...grpc.CallOption) (*DeleteClusterResourcesResponse, error)
	ListK8SClusterResources(ctx context.Context, in *ListClusterResourcesRequest, opts ...grpc.CallOption) (*ListClusterResourcesResponse, error)
	ListK8SClusterAllResources(ctx context.Context, in *ListClusterResourcesRequest, opts ...grpc.CallOption) (*ListClusterResourcesResponse, error)
	DeleteBatchK8SClusterResource(ctx context.Context, in *DeleteBatchClusterResourceRequest, opts ...grpc.CallOption) (*DeleteBatchClusterResourceResponse, error)
	DeleteBatchK8SClusterAllResource(ctx context.Context, in *DeleteBatchClusterResourceRequest, opts ...grpc.CallOption) (*DeleteBatchClusterResourceResponse, error)
	// Custom resources OPs
	GetCustomResources(ctx context.Context, in *GetCustomResourcesRequest, opts ...grpc.CallOption) (*GetCustomResourcesResponse, error)
	DeleteCustomResources(ctx context.Context, in *DeleteCustomResourcesRequest, opts ...grpc.CallOption) (*DeleteCustomResourcesResponse, error)
	PutCustomResources(ctx context.Context, in *PutCustomResourcesRequest, opts ...grpc.CallOption) (*PutCustomResourcesResponse, error)
	CreateCustomResourcesIndex(ctx context.Context, in *CreateCustomResourcesIndexRequest, opts ...grpc.CallOption) (*CreateCustomResourcesIndexResponse, error)
	DeleteCustomResourcesIndex(ctx context.Context, in *DeleteCustomResourcesIndexRequest, opts ...grpc.CallOption) (*DeleteCustomResourcesIndexResponse, error)
	// **** dynamic-query(动态查询) ****
	GetK8SIPPoolStatic(ctx context.Context, in *IPPoolStaticRequest, opts ...grpc.CallOption) (*IPPoolStaticResponse, error)
	PostK8SIPPoolStatic(ctx context.Context, in *IPPoolStaticRequest, opts ...grpc.CallOption) (*IPPoolStaticResponse, error)
	GetK8SIPPoolStaticDetail(ctx context.Context, in *IPPoolStaticDetailRequest, opts ...grpc.CallOption) (*IPPoolStaticDetailResponse, error)
	PostK8SIPPoolStaticDetail(ctx context.Context, in *IPPoolStaticDetailRequest, opts ...grpc.CallOption) (*IPPoolStaticDetailResponse, error)
	// k8s
	GetPod(ctx context.Context, in *PodRequest, opts ...grpc.CallOption) (*PodResponse, error)
	PostPod(ctx context.Context, in *PodRequest, opts ...grpc.CallOption) (*PodResponse, error)
	GetReplicaSet(ctx context.Context, in *ReplicaSetRequest, opts ...grpc.CallOption) (*ReplicaSetResponse, error)
	PostReplicaSet(ctx context.Context, in *ReplicaSetRequest, opts ...grpc.CallOption) (*ReplicaSetResponse, error)
	GetDeploymentK8S(ctx context.Context, in *DeploymentK8SRequest, opts ...grpc.CallOption) (*DeploymentK8SResponse, error)
	PostDeploymentK8S(ctx context.Context, in *DeploymentK8SRequest, opts ...grpc.CallOption) (*DeploymentK8SResponse, error)
	GetServiceK8S(ctx context.Context, in *ServiceK8SRequest, opts ...grpc.CallOption) (*ServiceK8SResponse, error)
	PostServiceK8S(ctx context.Context, in *ServiceK8SRequest, opts ...grpc.CallOption) (*ServiceK8SResponse, error)
	GetConfigMapK8S(ctx context.Context, in *ConfigMapK8SRequest, opts ...grpc.CallOption) (*ConfigMapK8SResponse, error)
	PostConfigMapK8S(ctx context.Context, in *ConfigMapK8SRequest, opts ...grpc.CallOption) (*ConfigMapK8SResponse, error)
	GetSecretK8S(ctx context.Context, in *SecretK8SRequest, opts ...grpc.CallOption) (*SecretK8SResponse, error)
	PostSecretK8S(ctx context.Context, in *SecretK8SRequest, opts ...grpc.CallOption) (*SecretK8SResponse, error)
	GetEndpointsK8S(ctx context.Context, in *EndpointsK8SRequest, opts ...grpc.CallOption) (*EndpointsK8SResponse, error)
	PostEndpointsK8S(ctx context.Context, in *EndpointsK8SRequest, opts ...grpc.CallOption) (*EndpointsK8SResponse, error)
	GetIngress(ctx context.Context, in *IngressRequest, opts ...grpc.CallOption) (*IngressResponse, error)
	PostIngress(ctx context.Context, in *IngressRequest, opts ...grpc.CallOption) (*IngressResponse, error)
	GetNamespaceK8S(ctx context.Context, in *NamespaceK8SRequest, opts ...grpc.CallOption) (*NamespaceK8SResponse, error)
	PostNamespaceK8S(ctx context.Context, in *NamespaceK8SRequest, opts ...grpc.CallOption) (*NamespaceK8SResponse, error)
	GetNode(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	PostNode(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	GetDaemonSet(ctx context.Context, in *DaemonSetRequest, opts ...grpc.CallOption) (*DaemonSetResponse, error)
	PostDaemonSet(ctx context.Context, in *DaemonSetRequest, opts ...grpc.CallOption) (*DaemonSetResponse, error)
	GetJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error)
	PostJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error)
	GetStatefulSet(ctx context.Context, in *StatefulSetRequest, opts ...grpc.CallOption) (*StatefulSetResponse, error)
	PostStatefulSet(ctx context.Context, in *StatefulSetRequest, opts ...grpc.CallOption) (*StatefulSetResponse, error)
	// **** dynamic-watch(watch) *****
	WatchDynamic(ctx context.Context, in *WatchDynamicRequest, opts ...grpc.CallOption) (Storage_WatchDynamicClient, error)
	WatchContainer(ctx context.Context, in *WatchContainerRequest, opts ...grpc.CallOption) (Storage_WatchContainerClient, error)
	// **** events(事件) *****
	PutEvent(ctx context.Context, in *PutEventRequest, opts ...grpc.CallOption) (*PutEventResponse, error)
	ListEvent(ctx context.Context, in *ListEventRequest, opts ...grpc.CallOption) (*ListEventResponse, error)
	WatchEvent(ctx context.Context, in *WatchEventRequest, opts ...grpc.CallOption) (Storage_WatchEventClient, error)
	// **** host config(主机配置) *****
	GetHost(ctx context.Context, in *GetHostRequest, opts ...grpc.CallOption) (*GetHostResponse, error)
	PutHost(ctx context.Context, in *PutHostRequest, opts ...grpc.CallOption) (*PutHostResponse, error)
	DeleteHost(ctx context.Context, in *DeleteHostRequest, opts ...grpc.CallOption) (*DeleteHostResponse, error)
	ListHost(ctx context.Context, in *ListHostRequest, opts ...grpc.CallOption) (*ListHostResponse, error)
	PutClusterRelation(ctx context.Context, in *PutClusterRelationRequest, opts ...grpc.CallOption) (*PutClusterRelationResponse, error)
	PostClusterRelation(ctx context.Context, in *PostClusterRelationRequest, opts ...grpc.CallOption) (*PostClusterRelationResponse, error)
	// **** metric(指标) ****
	GetMetric(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*GetMetricResponse, error)
	PutMetric(ctx context.Context, in *PutMetricRequest, opts ...grpc.CallOption) (*PutMetricResponse, error)
	DeleteMetric(ctx context.Context, in *DeleteMetricRequest, opts ...grpc.CallOption) (*DeleteMetricResponse, error)
	QueryMetric(ctx context.Context, in *QueryMetricRequest, opts ...grpc.CallOption) (*QueryMetricResponse, error)
	ListMetricTables(ctx context.Context, in *ListMetricTablesRequest, opts ...grpc.CallOption) (*ListMetricTablesResponse, error)
	// **** metric watch ****
	WatchMetric(ctx context.Context, in *WatchMetricRequest, opts ...grpc.CallOption) (Storage_WatchMetricClient, error)
	//**** watch k8s ****
	// k8s
	K8SGetWatchResource(ctx context.Context, in *K8SGetWatchResourceRequest, opts ...grpc.CallOption) (*K8SGetWatchResourceResponse, error)
	K8SPutWatchResource(ctx context.Context, in *K8SPutWatchResourceRequest, opts ...grpc.CallOption) (*K8SPutWatchResourceResponse, error)
	K8SDeleteWatchResource(ctx context.Context, in *K8SDeleteWatchResourceRequest, opts ...grpc.CallOption) (*K8SDeleteWatchResourceResponse, error)
	K8SListWatchResource(ctx context.Context, in *K8SListWatchResourceRequest, opts ...grpc.CallOption) (*K8SListWatchResourceResponse, error)
}

type storageClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageClient(cc grpc.ClientConnInterface) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) PostAlarm(ctx context.Context, in *PostAlarmRequest, opts ...grpc.CallOption) (*PostAlarmResponse, error) {
	out := new(PostAlarmResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PostAlarm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ListAlarm(ctx context.Context, in *ListAlarmRequest, opts ...grpc.CallOption) (*ListAlarmResponse, error) {
	out := new(ListAlarmResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/ListAlarm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetClusterConfig(ctx context.Context, in *GetClusterConfigRequest, opts ...grpc.CallOption) (*GetClusterConfigResponse, error) {
	out := new(GetClusterConfigResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetClusterConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PutClusterConfig(ctx context.Context, in *PutClusterConfigRequest, opts ...grpc.CallOption) (*PutClusterConfigResponse, error) {
	out := new(PutClusterConfigResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PutClusterConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetServiceConfig(ctx context.Context, in *GetServiceConfigRequest, opts ...grpc.CallOption) (*GetServiceConfigResponse, error) {
	out := new(GetServiceConfigResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetServiceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetStableVersion(ctx context.Context, in *GetStableVersionRequest, opts ...grpc.CallOption) (*GetStableVersionResponse, error) {
	out := new(GetStableVersionResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetStableVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PutStableVersion(ctx context.Context, in *PutStableVersionRequest, opts ...grpc.CallOption) (*PutStableVersionResponse, error) {
	out := new(PutStableVersionResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PutStableVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetK8SNamespaceResources(ctx context.Context, in *GetNamespaceResourcesRequest, opts ...grpc.CallOption) (*GetNamespaceResourcesResponse, error) {
	out := new(GetNamespaceResourcesResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetK8SNamespaceResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PutK8SNamespaceResources(ctx context.Context, in *PutNamespaceResourcesRequest, opts ...grpc.CallOption) (*PutNamespaceResourcesResponse, error) {
	out := new(PutNamespaceResourcesResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PutK8SNamespaceResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteK8SNamespaceResources(ctx context.Context, in *DeleteNamespaceResourcesRequest, opts ...grpc.CallOption) (*DeleteNamespaceResourcesResponse, error) {
	out := new(DeleteNamespaceResourcesResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/DeleteK8SNamespaceResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ListK8SNamespaceResources(ctx context.Context, in *ListNamespaceResourcesRequest, opts ...grpc.CallOption) (*ListNamespaceResourcesResponse, error) {
	out := new(ListNamespaceResourcesResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/ListK8SNamespaceResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteBatchK8SNamespaceResource(ctx context.Context, in *DeleteBatchNamespaceResourceRequest, opts ...grpc.CallOption) (*DeleteBatchNamespaceResourceResponse, error) {
	out := new(DeleteBatchNamespaceResourceResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/DeleteBatchK8SNamespaceResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetK8SClusterResources(ctx context.Context, in *GetClusterResourcesRequest, opts ...grpc.CallOption) (*GetClusterResourcesResponse, error) {
	out := new(GetClusterResourcesResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetK8SClusterResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PutK8SClusterResources(ctx context.Context, in *PutClusterResourcesRequest, opts ...grpc.CallOption) (*PutClusterResourcesResponse, error) {
	out := new(PutClusterResourcesResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PutK8SClusterResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteK8SClusterResources(ctx context.Context, in *DeleteClusterResourcesRequest, opts ...grpc.CallOption) (*DeleteClusterResourcesResponse, error) {
	out := new(DeleteClusterResourcesResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/DeleteK8SClusterResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ListK8SClusterResources(ctx context.Context, in *ListClusterResourcesRequest, opts ...grpc.CallOption) (*ListClusterResourcesResponse, error) {
	out := new(ListClusterResourcesResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/ListK8SClusterResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ListK8SClusterAllResources(ctx context.Context, in *ListClusterResourcesRequest, opts ...grpc.CallOption) (*ListClusterResourcesResponse, error) {
	out := new(ListClusterResourcesResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/ListK8SClusterAllResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteBatchK8SClusterResource(ctx context.Context, in *DeleteBatchClusterResourceRequest, opts ...grpc.CallOption) (*DeleteBatchClusterResourceResponse, error) {
	out := new(DeleteBatchClusterResourceResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/DeleteBatchK8SClusterResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteBatchK8SClusterAllResource(ctx context.Context, in *DeleteBatchClusterResourceRequest, opts ...grpc.CallOption) (*DeleteBatchClusterResourceResponse, error) {
	out := new(DeleteBatchClusterResourceResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/DeleteBatchK8SClusterAllResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetCustomResources(ctx context.Context, in *GetCustomResourcesRequest, opts ...grpc.CallOption) (*GetCustomResourcesResponse, error) {
	out := new(GetCustomResourcesResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetCustomResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteCustomResources(ctx context.Context, in *DeleteCustomResourcesRequest, opts ...grpc.CallOption) (*DeleteCustomResourcesResponse, error) {
	out := new(DeleteCustomResourcesResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/DeleteCustomResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PutCustomResources(ctx context.Context, in *PutCustomResourcesRequest, opts ...grpc.CallOption) (*PutCustomResourcesResponse, error) {
	out := new(PutCustomResourcesResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PutCustomResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) CreateCustomResourcesIndex(ctx context.Context, in *CreateCustomResourcesIndexRequest, opts ...grpc.CallOption) (*CreateCustomResourcesIndexResponse, error) {
	out := new(CreateCustomResourcesIndexResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/CreateCustomResourcesIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteCustomResourcesIndex(ctx context.Context, in *DeleteCustomResourcesIndexRequest, opts ...grpc.CallOption) (*DeleteCustomResourcesIndexResponse, error) {
	out := new(DeleteCustomResourcesIndexResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/DeleteCustomResourcesIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetK8SIPPoolStatic(ctx context.Context, in *IPPoolStaticRequest, opts ...grpc.CallOption) (*IPPoolStaticResponse, error) {
	out := new(IPPoolStaticResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetK8SIPPoolStatic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PostK8SIPPoolStatic(ctx context.Context, in *IPPoolStaticRequest, opts ...grpc.CallOption) (*IPPoolStaticResponse, error) {
	out := new(IPPoolStaticResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PostK8SIPPoolStatic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetK8SIPPoolStaticDetail(ctx context.Context, in *IPPoolStaticDetailRequest, opts ...grpc.CallOption) (*IPPoolStaticDetailResponse, error) {
	out := new(IPPoolStaticDetailResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetK8SIPPoolStaticDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PostK8SIPPoolStaticDetail(ctx context.Context, in *IPPoolStaticDetailRequest, opts ...grpc.CallOption) (*IPPoolStaticDetailResponse, error) {
	out := new(IPPoolStaticDetailResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PostK8SIPPoolStaticDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetPod(ctx context.Context, in *PodRequest, opts ...grpc.CallOption) (*PodResponse, error) {
	out := new(PodResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PostPod(ctx context.Context, in *PodRequest, opts ...grpc.CallOption) (*PodResponse, error) {
	out := new(PodResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PostPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetReplicaSet(ctx context.Context, in *ReplicaSetRequest, opts ...grpc.CallOption) (*ReplicaSetResponse, error) {
	out := new(ReplicaSetResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetReplicaSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PostReplicaSet(ctx context.Context, in *ReplicaSetRequest, opts ...grpc.CallOption) (*ReplicaSetResponse, error) {
	out := new(ReplicaSetResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PostReplicaSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetDeploymentK8S(ctx context.Context, in *DeploymentK8SRequest, opts ...grpc.CallOption) (*DeploymentK8SResponse, error) {
	out := new(DeploymentK8SResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetDeploymentK8S", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PostDeploymentK8S(ctx context.Context, in *DeploymentK8SRequest, opts ...grpc.CallOption) (*DeploymentK8SResponse, error) {
	out := new(DeploymentK8SResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PostDeploymentK8S", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetServiceK8S(ctx context.Context, in *ServiceK8SRequest, opts ...grpc.CallOption) (*ServiceK8SResponse, error) {
	out := new(ServiceK8SResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetServiceK8S", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PostServiceK8S(ctx context.Context, in *ServiceK8SRequest, opts ...grpc.CallOption) (*ServiceK8SResponse, error) {
	out := new(ServiceK8SResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PostServiceK8S", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetConfigMapK8S(ctx context.Context, in *ConfigMapK8SRequest, opts ...grpc.CallOption) (*ConfigMapK8SResponse, error) {
	out := new(ConfigMapK8SResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetConfigMapK8S", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PostConfigMapK8S(ctx context.Context, in *ConfigMapK8SRequest, opts ...grpc.CallOption) (*ConfigMapK8SResponse, error) {
	out := new(ConfigMapK8SResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PostConfigMapK8S", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetSecretK8S(ctx context.Context, in *SecretK8SRequest, opts ...grpc.CallOption) (*SecretK8SResponse, error) {
	out := new(SecretK8SResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetSecretK8S", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PostSecretK8S(ctx context.Context, in *SecretK8SRequest, opts ...grpc.CallOption) (*SecretK8SResponse, error) {
	out := new(SecretK8SResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PostSecretK8S", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetEndpointsK8S(ctx context.Context, in *EndpointsK8SRequest, opts ...grpc.CallOption) (*EndpointsK8SResponse, error) {
	out := new(EndpointsK8SResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetEndpointsK8S", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PostEndpointsK8S(ctx context.Context, in *EndpointsK8SRequest, opts ...grpc.CallOption) (*EndpointsK8SResponse, error) {
	out := new(EndpointsK8SResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PostEndpointsK8S", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetIngress(ctx context.Context, in *IngressRequest, opts ...grpc.CallOption) (*IngressResponse, error) {
	out := new(IngressResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetIngress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PostIngress(ctx context.Context, in *IngressRequest, opts ...grpc.CallOption) (*IngressResponse, error) {
	out := new(IngressResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PostIngress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetNamespaceK8S(ctx context.Context, in *NamespaceK8SRequest, opts ...grpc.CallOption) (*NamespaceK8SResponse, error) {
	out := new(NamespaceK8SResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetNamespaceK8S", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PostNamespaceK8S(ctx context.Context, in *NamespaceK8SRequest, opts ...grpc.CallOption) (*NamespaceK8SResponse, error) {
	out := new(NamespaceK8SResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PostNamespaceK8S", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetNode(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PostNode(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PostNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetDaemonSet(ctx context.Context, in *DaemonSetRequest, opts ...grpc.CallOption) (*DaemonSetResponse, error) {
	out := new(DaemonSetResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetDaemonSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PostDaemonSet(ctx context.Context, in *DaemonSetRequest, opts ...grpc.CallOption) (*DaemonSetResponse, error) {
	out := new(DaemonSetResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PostDaemonSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PostJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PostJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetStatefulSet(ctx context.Context, in *StatefulSetRequest, opts ...grpc.CallOption) (*StatefulSetResponse, error) {
	out := new(StatefulSetResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetStatefulSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PostStatefulSet(ctx context.Context, in *StatefulSetRequest, opts ...grpc.CallOption) (*StatefulSetResponse, error) {
	out := new(StatefulSetResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PostStatefulSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) WatchDynamic(ctx context.Context, in *WatchDynamicRequest, opts ...grpc.CallOption) (Storage_WatchDynamicClient, error) {
	stream, err := c.cc.NewStream(ctx, &Storage_ServiceDesc.Streams[0], "/storage.Storage/WatchDynamic", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageWatchDynamicClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Storage_WatchDynamicClient interface {
	Recv() (*WatchDynamicResponse, error)
	grpc.ClientStream
}

type storageWatchDynamicClient struct {
	grpc.ClientStream
}

func (x *storageWatchDynamicClient) Recv() (*WatchDynamicResponse, error) {
	m := new(WatchDynamicResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) WatchContainer(ctx context.Context, in *WatchContainerRequest, opts ...grpc.CallOption) (Storage_WatchContainerClient, error) {
	stream, err := c.cc.NewStream(ctx, &Storage_ServiceDesc.Streams[1], "/storage.Storage/WatchContainer", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageWatchContainerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Storage_WatchContainerClient interface {
	Recv() (*WatchContainerResponse, error)
	grpc.ClientStream
}

type storageWatchContainerClient struct {
	grpc.ClientStream
}

func (x *storageWatchContainerClient) Recv() (*WatchContainerResponse, error) {
	m := new(WatchContainerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) PutEvent(ctx context.Context, in *PutEventRequest, opts ...grpc.CallOption) (*PutEventResponse, error) {
	out := new(PutEventResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PutEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ListEvent(ctx context.Context, in *ListEventRequest, opts ...grpc.CallOption) (*ListEventResponse, error) {
	out := new(ListEventResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/ListEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) WatchEvent(ctx context.Context, in *WatchEventRequest, opts ...grpc.CallOption) (Storage_WatchEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &Storage_ServiceDesc.Streams[2], "/storage.Storage/WatchEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageWatchEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Storage_WatchEventClient interface {
	Recv() (*WatchEventResponse, error)
	grpc.ClientStream
}

type storageWatchEventClient struct {
	grpc.ClientStream
}

func (x *storageWatchEventClient) Recv() (*WatchEventResponse, error) {
	m := new(WatchEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) GetHost(ctx context.Context, in *GetHostRequest, opts ...grpc.CallOption) (*GetHostResponse, error) {
	out := new(GetHostResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PutHost(ctx context.Context, in *PutHostRequest, opts ...grpc.CallOption) (*PutHostResponse, error) {
	out := new(PutHostResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PutHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteHost(ctx context.Context, in *DeleteHostRequest, opts ...grpc.CallOption) (*DeleteHostResponse, error) {
	out := new(DeleteHostResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/DeleteHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ListHost(ctx context.Context, in *ListHostRequest, opts ...grpc.CallOption) (*ListHostResponse, error) {
	out := new(ListHostResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/ListHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PutClusterRelation(ctx context.Context, in *PutClusterRelationRequest, opts ...grpc.CallOption) (*PutClusterRelationResponse, error) {
	out := new(PutClusterRelationResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PutClusterRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PostClusterRelation(ctx context.Context, in *PostClusterRelationRequest, opts ...grpc.CallOption) (*PostClusterRelationResponse, error) {
	out := new(PostClusterRelationResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PostClusterRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetMetric(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*GetMetricResponse, error) {
	out := new(GetMetricResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/GetMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) PutMetric(ctx context.Context, in *PutMetricRequest, opts ...grpc.CallOption) (*PutMetricResponse, error) {
	out := new(PutMetricResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/PutMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteMetric(ctx context.Context, in *DeleteMetricRequest, opts ...grpc.CallOption) (*DeleteMetricResponse, error) {
	out := new(DeleteMetricResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/DeleteMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) QueryMetric(ctx context.Context, in *QueryMetricRequest, opts ...grpc.CallOption) (*QueryMetricResponse, error) {
	out := new(QueryMetricResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/QueryMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ListMetricTables(ctx context.Context, in *ListMetricTablesRequest, opts ...grpc.CallOption) (*ListMetricTablesResponse, error) {
	out := new(ListMetricTablesResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/ListMetricTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) WatchMetric(ctx context.Context, in *WatchMetricRequest, opts ...grpc.CallOption) (Storage_WatchMetricClient, error) {
	stream, err := c.cc.NewStream(ctx, &Storage_ServiceDesc.Streams[3], "/storage.Storage/WatchMetric", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageWatchMetricClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Storage_WatchMetricClient interface {
	Recv() (*WatchMetricResponse, error)
	grpc.ClientStream
}

type storageWatchMetricClient struct {
	grpc.ClientStream
}

func (x *storageWatchMetricClient) Recv() (*WatchMetricResponse, error) {
	m := new(WatchMetricResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) K8SGetWatchResource(ctx context.Context, in *K8SGetWatchResourceRequest, opts ...grpc.CallOption) (*K8SGetWatchResourceResponse, error) {
	out := new(K8SGetWatchResourceResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/K8SGetWatchResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) K8SPutWatchResource(ctx context.Context, in *K8SPutWatchResourceRequest, opts ...grpc.CallOption) (*K8SPutWatchResourceResponse, error) {
	out := new(K8SPutWatchResourceResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/K8SPutWatchResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) K8SDeleteWatchResource(ctx context.Context, in *K8SDeleteWatchResourceRequest, opts ...grpc.CallOption) (*K8SDeleteWatchResourceResponse, error) {
	out := new(K8SDeleteWatchResourceResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/K8SDeleteWatchResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) K8SListWatchResource(ctx context.Context, in *K8SListWatchResourceRequest, opts ...grpc.CallOption) (*K8SListWatchResourceResponse, error) {
	out := new(K8SListWatchResourceResponse)
	err := c.cc.Invoke(ctx, "/storage.Storage/K8SListWatchResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
// All implementations must embed UnimplementedStorageServer
// for forward compatibility
type StorageServer interface {
	// **** Alarm(告警) ****
	PostAlarm(context.Context, *PostAlarmRequest) (*PostAlarmResponse, error)
	ListAlarm(context.Context, *ListAlarmRequest) (*ListAlarmResponse, error)
	// ****  Cluster Config(集群配置) ****
	GetClusterConfig(context.Context, *GetClusterConfigRequest) (*GetClusterConfigResponse, error)
	PutClusterConfig(context.Context, *PutClusterConfigRequest) (*PutClusterConfigResponse, error)
	GetServiceConfig(context.Context, *GetServiceConfigRequest) (*GetServiceConfigResponse, error)
	GetStableVersion(context.Context, *GetStableVersionRequest) (*GetStableVersionResponse, error)
	PutStableVersion(context.Context, *PutStableVersionRequest) (*PutStableVersionResponse, error)
	//
	//k8s namespace resources
	GetK8SNamespaceResources(context.Context, *GetNamespaceResourcesRequest) (*GetNamespaceResourcesResponse, error)
	PutK8SNamespaceResources(context.Context, *PutNamespaceResourcesRequest) (*PutNamespaceResourcesResponse, error)
	DeleteK8SNamespaceResources(context.Context, *DeleteNamespaceResourcesRequest) (*DeleteNamespaceResourcesResponse, error)
	ListK8SNamespaceResources(context.Context, *ListNamespaceResourcesRequest) (*ListNamespaceResourcesResponse, error)
	DeleteBatchK8SNamespaceResource(context.Context, *DeleteBatchNamespaceResourceRequest) (*DeleteBatchNamespaceResourceResponse, error)
	// k8s cluster resources
	GetK8SClusterResources(context.Context, *GetClusterResourcesRequest) (*GetClusterResourcesResponse, error)
	PutK8SClusterResources(context.Context, *PutClusterResourcesRequest) (*PutClusterResourcesResponse, error)
	DeleteK8SClusterResources(context.Context, *DeleteClusterResourcesRequest) (*DeleteClusterResourcesResponse, error)
	ListK8SClusterResources(context.Context, *ListClusterResourcesRequest) (*ListClusterResourcesResponse, error)
	ListK8SClusterAllResources(context.Context, *ListClusterResourcesRequest) (*ListClusterResourcesResponse, error)
	DeleteBatchK8SClusterResource(context.Context, *DeleteBatchClusterResourceRequest) (*DeleteBatchClusterResourceResponse, error)
	DeleteBatchK8SClusterAllResource(context.Context, *DeleteBatchClusterResourceRequest) (*DeleteBatchClusterResourceResponse, error)
	// Custom resources OPs
	GetCustomResources(context.Context, *GetCustomResourcesRequest) (*GetCustomResourcesResponse, error)
	DeleteCustomResources(context.Context, *DeleteCustomResourcesRequest) (*DeleteCustomResourcesResponse, error)
	PutCustomResources(context.Context, *PutCustomResourcesRequest) (*PutCustomResourcesResponse, error)
	CreateCustomResourcesIndex(context.Context, *CreateCustomResourcesIndexRequest) (*CreateCustomResourcesIndexResponse, error)
	DeleteCustomResourcesIndex(context.Context, *DeleteCustomResourcesIndexRequest) (*DeleteCustomResourcesIndexResponse, error)
	// **** dynamic-query(动态查询) ****
	GetK8SIPPoolStatic(context.Context, *IPPoolStaticRequest) (*IPPoolStaticResponse, error)
	PostK8SIPPoolStatic(context.Context, *IPPoolStaticRequest) (*IPPoolStaticResponse, error)
	GetK8SIPPoolStaticDetail(context.Context, *IPPoolStaticDetailRequest) (*IPPoolStaticDetailResponse, error)
	PostK8SIPPoolStaticDetail(context.Context, *IPPoolStaticDetailRequest) (*IPPoolStaticDetailResponse, error)
	// k8s
	GetPod(context.Context, *PodRequest) (*PodResponse, error)
	PostPod(context.Context, *PodRequest) (*PodResponse, error)
	GetReplicaSet(context.Context, *ReplicaSetRequest) (*ReplicaSetResponse, error)
	PostReplicaSet(context.Context, *ReplicaSetRequest) (*ReplicaSetResponse, error)
	GetDeploymentK8S(context.Context, *DeploymentK8SRequest) (*DeploymentK8SResponse, error)
	PostDeploymentK8S(context.Context, *DeploymentK8SRequest) (*DeploymentK8SResponse, error)
	GetServiceK8S(context.Context, *ServiceK8SRequest) (*ServiceK8SResponse, error)
	PostServiceK8S(context.Context, *ServiceK8SRequest) (*ServiceK8SResponse, error)
	GetConfigMapK8S(context.Context, *ConfigMapK8SRequest) (*ConfigMapK8SResponse, error)
	PostConfigMapK8S(context.Context, *ConfigMapK8SRequest) (*ConfigMapK8SResponse, error)
	GetSecretK8S(context.Context, *SecretK8SRequest) (*SecretK8SResponse, error)
	PostSecretK8S(context.Context, *SecretK8SRequest) (*SecretK8SResponse, error)
	GetEndpointsK8S(context.Context, *EndpointsK8SRequest) (*EndpointsK8SResponse, error)
	PostEndpointsK8S(context.Context, *EndpointsK8SRequest) (*EndpointsK8SResponse, error)
	GetIngress(context.Context, *IngressRequest) (*IngressResponse, error)
	PostIngress(context.Context, *IngressRequest) (*IngressResponse, error)
	GetNamespaceK8S(context.Context, *NamespaceK8SRequest) (*NamespaceK8SResponse, error)
	PostNamespaceK8S(context.Context, *NamespaceK8SRequest) (*NamespaceK8SResponse, error)
	GetNode(context.Context, *NodeRequest) (*NodeResponse, error)
	PostNode(context.Context, *NodeRequest) (*NodeResponse, error)
	GetDaemonSet(context.Context, *DaemonSetRequest) (*DaemonSetResponse, error)
	PostDaemonSet(context.Context, *DaemonSetRequest) (*DaemonSetResponse, error)
	GetJob(context.Context, *JobRequest) (*JobResponse, error)
	PostJob(context.Context, *JobRequest) (*JobResponse, error)
	GetStatefulSet(context.Context, *StatefulSetRequest) (*StatefulSetResponse, error)
	PostStatefulSet(context.Context, *StatefulSetRequest) (*StatefulSetResponse, error)
	// **** dynamic-watch(watch) *****
	WatchDynamic(*WatchDynamicRequest, Storage_WatchDynamicServer) error
	WatchContainer(*WatchContainerRequest, Storage_WatchContainerServer) error
	// **** events(事件) *****
	PutEvent(context.Context, *PutEventRequest) (*PutEventResponse, error)
	ListEvent(context.Context, *ListEventRequest) (*ListEventResponse, error)
	WatchEvent(*WatchEventRequest, Storage_WatchEventServer) error
	// **** host config(主机配置) *****
	GetHost(context.Context, *GetHostRequest) (*GetHostResponse, error)
	PutHost(context.Context, *PutHostRequest) (*PutHostResponse, error)
	DeleteHost(context.Context, *DeleteHostRequest) (*DeleteHostResponse, error)
	ListHost(context.Context, *ListHostRequest) (*ListHostResponse, error)
	PutClusterRelation(context.Context, *PutClusterRelationRequest) (*PutClusterRelationResponse, error)
	PostClusterRelation(context.Context, *PostClusterRelationRequest) (*PostClusterRelationResponse, error)
	// **** metric(指标) ****
	GetMetric(context.Context, *GetMetricRequest) (*GetMetricResponse, error)
	PutMetric(context.Context, *PutMetricRequest) (*PutMetricResponse, error)
	DeleteMetric(context.Context, *DeleteMetricRequest) (*DeleteMetricResponse, error)
	QueryMetric(context.Context, *QueryMetricRequest) (*QueryMetricResponse, error)
	ListMetricTables(context.Context, *ListMetricTablesRequest) (*ListMetricTablesResponse, error)
	// **** metric watch ****
	WatchMetric(*WatchMetricRequest, Storage_WatchMetricServer) error
	//**** watch k8s ****
	// k8s
	K8SGetWatchResource(context.Context, *K8SGetWatchResourceRequest) (*K8SGetWatchResourceResponse, error)
	K8SPutWatchResource(context.Context, *K8SPutWatchResourceRequest) (*K8SPutWatchResourceResponse, error)
	K8SDeleteWatchResource(context.Context, *K8SDeleteWatchResourceRequest) (*K8SDeleteWatchResourceResponse, error)
	K8SListWatchResource(context.Context, *K8SListWatchResourceRequest) (*K8SListWatchResourceResponse, error)
	mustEmbedUnimplementedStorageServer()
}

// UnimplementedStorageServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (UnimplementedStorageServer) PostAlarm(context.Context, *PostAlarmRequest) (*PostAlarmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAlarm not implemented")
}
func (UnimplementedStorageServer) ListAlarm(context.Context, *ListAlarmRequest) (*ListAlarmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlarm not implemented")
}
func (UnimplementedStorageServer) GetClusterConfig(context.Context, *GetClusterConfigRequest) (*GetClusterConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterConfig not implemented")
}
func (UnimplementedStorageServer) PutClusterConfig(context.Context, *PutClusterConfigRequest) (*PutClusterConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutClusterConfig not implemented")
}
func (UnimplementedStorageServer) GetServiceConfig(context.Context, *GetServiceConfigRequest) (*GetServiceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceConfig not implemented")
}
func (UnimplementedStorageServer) GetStableVersion(context.Context, *GetStableVersionRequest) (*GetStableVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStableVersion not implemented")
}
func (UnimplementedStorageServer) PutStableVersion(context.Context, *PutStableVersionRequest) (*PutStableVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutStableVersion not implemented")
}
func (UnimplementedStorageServer) GetK8SNamespaceResources(context.Context, *GetNamespaceResourcesRequest) (*GetNamespaceResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SNamespaceResources not implemented")
}
func (UnimplementedStorageServer) PutK8SNamespaceResources(context.Context, *PutNamespaceResourcesRequest) (*PutNamespaceResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutK8SNamespaceResources not implemented")
}
func (UnimplementedStorageServer) DeleteK8SNamespaceResources(context.Context, *DeleteNamespaceResourcesRequest) (*DeleteNamespaceResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteK8SNamespaceResources not implemented")
}
func (UnimplementedStorageServer) ListK8SNamespaceResources(context.Context, *ListNamespaceResourcesRequest) (*ListNamespaceResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListK8SNamespaceResources not implemented")
}
func (UnimplementedStorageServer) DeleteBatchK8SNamespaceResource(context.Context, *DeleteBatchNamespaceResourceRequest) (*DeleteBatchNamespaceResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBatchK8SNamespaceResource not implemented")
}
func (UnimplementedStorageServer) GetK8SClusterResources(context.Context, *GetClusterResourcesRequest) (*GetClusterResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SClusterResources not implemented")
}
func (UnimplementedStorageServer) PutK8SClusterResources(context.Context, *PutClusterResourcesRequest) (*PutClusterResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutK8SClusterResources not implemented")
}
func (UnimplementedStorageServer) DeleteK8SClusterResources(context.Context, *DeleteClusterResourcesRequest) (*DeleteClusterResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteK8SClusterResources not implemented")
}
func (UnimplementedStorageServer) ListK8SClusterResources(context.Context, *ListClusterResourcesRequest) (*ListClusterResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListK8SClusterResources not implemented")
}
func (UnimplementedStorageServer) ListK8SClusterAllResources(context.Context, *ListClusterResourcesRequest) (*ListClusterResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListK8SClusterAllResources not implemented")
}
func (UnimplementedStorageServer) DeleteBatchK8SClusterResource(context.Context, *DeleteBatchClusterResourceRequest) (*DeleteBatchClusterResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBatchK8SClusterResource not implemented")
}
func (UnimplementedStorageServer) DeleteBatchK8SClusterAllResource(context.Context, *DeleteBatchClusterResourceRequest) (*DeleteBatchClusterResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBatchK8SClusterAllResource not implemented")
}
func (UnimplementedStorageServer) GetCustomResources(context.Context, *GetCustomResourcesRequest) (*GetCustomResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomResources not implemented")
}
func (UnimplementedStorageServer) DeleteCustomResources(context.Context, *DeleteCustomResourcesRequest) (*DeleteCustomResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomResources not implemented")
}
func (UnimplementedStorageServer) PutCustomResources(context.Context, *PutCustomResourcesRequest) (*PutCustomResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutCustomResources not implemented")
}
func (UnimplementedStorageServer) CreateCustomResourcesIndex(context.Context, *CreateCustomResourcesIndexRequest) (*CreateCustomResourcesIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomResourcesIndex not implemented")
}
func (UnimplementedStorageServer) DeleteCustomResourcesIndex(context.Context, *DeleteCustomResourcesIndexRequest) (*DeleteCustomResourcesIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomResourcesIndex not implemented")
}
func (UnimplementedStorageServer) GetK8SIPPoolStatic(context.Context, *IPPoolStaticRequest) (*IPPoolStaticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SIPPoolStatic not implemented")
}
func (UnimplementedStorageServer) PostK8SIPPoolStatic(context.Context, *IPPoolStaticRequest) (*IPPoolStaticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostK8SIPPoolStatic not implemented")
}
func (UnimplementedStorageServer) GetK8SIPPoolStaticDetail(context.Context, *IPPoolStaticDetailRequest) (*IPPoolStaticDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SIPPoolStaticDetail not implemented")
}
func (UnimplementedStorageServer) PostK8SIPPoolStaticDetail(context.Context, *IPPoolStaticDetailRequest) (*IPPoolStaticDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostK8SIPPoolStaticDetail not implemented")
}
func (UnimplementedStorageServer) GetPod(context.Context, *PodRequest) (*PodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPod not implemented")
}
func (UnimplementedStorageServer) PostPod(context.Context, *PodRequest) (*PodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPod not implemented")
}
func (UnimplementedStorageServer) GetReplicaSet(context.Context, *ReplicaSetRequest) (*ReplicaSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplicaSet not implemented")
}
func (UnimplementedStorageServer) PostReplicaSet(context.Context, *ReplicaSetRequest) (*ReplicaSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostReplicaSet not implemented")
}
func (UnimplementedStorageServer) GetDeploymentK8S(context.Context, *DeploymentK8SRequest) (*DeploymentK8SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentK8S not implemented")
}
func (UnimplementedStorageServer) PostDeploymentK8S(context.Context, *DeploymentK8SRequest) (*DeploymentK8SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDeploymentK8S not implemented")
}
func (UnimplementedStorageServer) GetServiceK8S(context.Context, *ServiceK8SRequest) (*ServiceK8SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceK8S not implemented")
}
func (UnimplementedStorageServer) PostServiceK8S(context.Context, *ServiceK8SRequest) (*ServiceK8SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostServiceK8S not implemented")
}
func (UnimplementedStorageServer) GetConfigMapK8S(context.Context, *ConfigMapK8SRequest) (*ConfigMapK8SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigMapK8S not implemented")
}
func (UnimplementedStorageServer) PostConfigMapK8S(context.Context, *ConfigMapK8SRequest) (*ConfigMapK8SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostConfigMapK8S not implemented")
}
func (UnimplementedStorageServer) GetSecretK8S(context.Context, *SecretK8SRequest) (*SecretK8SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecretK8S not implemented")
}
func (UnimplementedStorageServer) PostSecretK8S(context.Context, *SecretK8SRequest) (*SecretK8SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSecretK8S not implemented")
}
func (UnimplementedStorageServer) GetEndpointsK8S(context.Context, *EndpointsK8SRequest) (*EndpointsK8SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndpointsK8S not implemented")
}
func (UnimplementedStorageServer) PostEndpointsK8S(context.Context, *EndpointsK8SRequest) (*EndpointsK8SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostEndpointsK8S not implemented")
}
func (UnimplementedStorageServer) GetIngress(context.Context, *IngressRequest) (*IngressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIngress not implemented")
}
func (UnimplementedStorageServer) PostIngress(context.Context, *IngressRequest) (*IngressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostIngress not implemented")
}
func (UnimplementedStorageServer) GetNamespaceK8S(context.Context, *NamespaceK8SRequest) (*NamespaceK8SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaceK8S not implemented")
}
func (UnimplementedStorageServer) PostNamespaceK8S(context.Context, *NamespaceK8SRequest) (*NamespaceK8SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostNamespaceK8S not implemented")
}
func (UnimplementedStorageServer) GetNode(context.Context, *NodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedStorageServer) PostNode(context.Context, *NodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostNode not implemented")
}
func (UnimplementedStorageServer) GetDaemonSet(context.Context, *DaemonSetRequest) (*DaemonSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDaemonSet not implemented")
}
func (UnimplementedStorageServer) PostDaemonSet(context.Context, *DaemonSetRequest) (*DaemonSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDaemonSet not implemented")
}
func (UnimplementedStorageServer) GetJob(context.Context, *JobRequest) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedStorageServer) PostJob(context.Context, *JobRequest) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostJob not implemented")
}
func (UnimplementedStorageServer) GetStatefulSet(context.Context, *StatefulSetRequest) (*StatefulSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatefulSet not implemented")
}
func (UnimplementedStorageServer) PostStatefulSet(context.Context, *StatefulSetRequest) (*StatefulSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostStatefulSet not implemented")
}
func (UnimplementedStorageServer) WatchDynamic(*WatchDynamicRequest, Storage_WatchDynamicServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchDynamic not implemented")
}
func (UnimplementedStorageServer) WatchContainer(*WatchContainerRequest, Storage_WatchContainerServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchContainer not implemented")
}
func (UnimplementedStorageServer) PutEvent(context.Context, *PutEventRequest) (*PutEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutEvent not implemented")
}
func (UnimplementedStorageServer) ListEvent(context.Context, *ListEventRequest) (*ListEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvent not implemented")
}
func (UnimplementedStorageServer) WatchEvent(*WatchEventRequest, Storage_WatchEventServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchEvent not implemented")
}
func (UnimplementedStorageServer) GetHost(context.Context, *GetHostRequest) (*GetHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHost not implemented")
}
func (UnimplementedStorageServer) PutHost(context.Context, *PutHostRequest) (*PutHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutHost not implemented")
}
func (UnimplementedStorageServer) DeleteHost(context.Context, *DeleteHostRequest) (*DeleteHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHost not implemented")
}
func (UnimplementedStorageServer) ListHost(context.Context, *ListHostRequest) (*ListHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHost not implemented")
}
func (UnimplementedStorageServer) PutClusterRelation(context.Context, *PutClusterRelationRequest) (*PutClusterRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutClusterRelation not implemented")
}
func (UnimplementedStorageServer) PostClusterRelation(context.Context, *PostClusterRelationRequest) (*PostClusterRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostClusterRelation not implemented")
}
func (UnimplementedStorageServer) GetMetric(context.Context, *GetMetricRequest) (*GetMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetric not implemented")
}
func (UnimplementedStorageServer) PutMetric(context.Context, *PutMetricRequest) (*PutMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutMetric not implemented")
}
func (UnimplementedStorageServer) DeleteMetric(context.Context, *DeleteMetricRequest) (*DeleteMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetric not implemented")
}
func (UnimplementedStorageServer) QueryMetric(context.Context, *QueryMetricRequest) (*QueryMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMetric not implemented")
}
func (UnimplementedStorageServer) ListMetricTables(context.Context, *ListMetricTablesRequest) (*ListMetricTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMetricTables not implemented")
}
func (UnimplementedStorageServer) WatchMetric(*WatchMetricRequest, Storage_WatchMetricServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchMetric not implemented")
}
func (UnimplementedStorageServer) K8SGetWatchResource(context.Context, *K8SGetWatchResourceRequest) (*K8SGetWatchResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method K8SGetWatchResource not implemented")
}
func (UnimplementedStorageServer) K8SPutWatchResource(context.Context, *K8SPutWatchResourceRequest) (*K8SPutWatchResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method K8SPutWatchResource not implemented")
}
func (UnimplementedStorageServer) K8SDeleteWatchResource(context.Context, *K8SDeleteWatchResourceRequest) (*K8SDeleteWatchResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method K8SDeleteWatchResource not implemented")
}
func (UnimplementedStorageServer) K8SListWatchResource(context.Context, *K8SListWatchResourceRequest) (*K8SListWatchResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method K8SListWatchResource not implemented")
}
func (UnimplementedStorageServer) mustEmbedUnimplementedStorageServer() {}

// UnsafeStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServer will
// result in compilation errors.
type UnsafeStorageServer interface {
	mustEmbedUnimplementedStorageServer()
}

func RegisterStorageServer(s grpc.ServiceRegistrar, srv StorageServer) {
	s.RegisterService(&Storage_ServiceDesc, srv)
}

func _Storage_PostAlarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAlarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PostAlarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PostAlarm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PostAlarm(ctx, req.(*PostAlarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ListAlarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ListAlarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/ListAlarm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ListAlarm(ctx, req.(*ListAlarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetClusterConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetClusterConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetClusterConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetClusterConfig(ctx, req.(*GetClusterConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PutClusterConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutClusterConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PutClusterConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PutClusterConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PutClusterConfig(ctx, req.(*PutClusterConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetServiceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetServiceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetServiceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetServiceConfig(ctx, req.(*GetServiceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetStableVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStableVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetStableVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetStableVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetStableVersion(ctx, req.(*GetStableVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PutStableVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutStableVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PutStableVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PutStableVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PutStableVersion(ctx, req.(*PutStableVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetK8SNamespaceResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetK8SNamespaceResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetK8SNamespaceResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetK8SNamespaceResources(ctx, req.(*GetNamespaceResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PutK8SNamespaceResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutNamespaceResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PutK8SNamespaceResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PutK8SNamespaceResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PutK8SNamespaceResources(ctx, req.(*PutNamespaceResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteK8SNamespaceResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteK8SNamespaceResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/DeleteK8SNamespaceResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteK8SNamespaceResources(ctx, req.(*DeleteNamespaceResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ListK8SNamespaceResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespaceResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ListK8SNamespaceResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/ListK8SNamespaceResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ListK8SNamespaceResources(ctx, req.(*ListNamespaceResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteBatchK8SNamespaceResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBatchNamespaceResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteBatchK8SNamespaceResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/DeleteBatchK8SNamespaceResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteBatchK8SNamespaceResource(ctx, req.(*DeleteBatchNamespaceResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetK8SClusterResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetK8SClusterResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetK8SClusterResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetK8SClusterResources(ctx, req.(*GetClusterResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PutK8SClusterResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutClusterResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PutK8SClusterResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PutK8SClusterResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PutK8SClusterResources(ctx, req.(*PutClusterResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteK8SClusterResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteK8SClusterResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/DeleteK8SClusterResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteK8SClusterResources(ctx, req.(*DeleteClusterResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ListK8SClusterResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ListK8SClusterResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/ListK8SClusterResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ListK8SClusterResources(ctx, req.(*ListClusterResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ListK8SClusterAllResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ListK8SClusterAllResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/ListK8SClusterAllResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ListK8SClusterAllResources(ctx, req.(*ListClusterResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteBatchK8SClusterResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBatchClusterResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteBatchK8SClusterResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/DeleteBatchK8SClusterResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteBatchK8SClusterResource(ctx, req.(*DeleteBatchClusterResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteBatchK8SClusterAllResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBatchClusterResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteBatchK8SClusterAllResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/DeleteBatchK8SClusterAllResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteBatchK8SClusterAllResource(ctx, req.(*DeleteBatchClusterResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetCustomResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetCustomResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetCustomResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetCustomResources(ctx, req.(*GetCustomResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteCustomResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteCustomResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/DeleteCustomResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteCustomResources(ctx, req.(*DeleteCustomResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PutCustomResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutCustomResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PutCustomResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PutCustomResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PutCustomResources(ctx, req.(*PutCustomResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_CreateCustomResourcesIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomResourcesIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).CreateCustomResourcesIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/CreateCustomResourcesIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).CreateCustomResourcesIndex(ctx, req.(*CreateCustomResourcesIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteCustomResourcesIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomResourcesIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteCustomResourcesIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/DeleteCustomResourcesIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteCustomResourcesIndex(ctx, req.(*DeleteCustomResourcesIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetK8SIPPoolStatic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPPoolStaticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetK8SIPPoolStatic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetK8SIPPoolStatic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetK8SIPPoolStatic(ctx, req.(*IPPoolStaticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PostK8SIPPoolStatic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPPoolStaticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PostK8SIPPoolStatic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PostK8SIPPoolStatic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PostK8SIPPoolStatic(ctx, req.(*IPPoolStaticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetK8SIPPoolStaticDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPPoolStaticDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetK8SIPPoolStaticDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetK8SIPPoolStaticDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetK8SIPPoolStaticDetail(ctx, req.(*IPPoolStaticDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PostK8SIPPoolStaticDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPPoolStaticDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PostK8SIPPoolStaticDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PostK8SIPPoolStaticDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PostK8SIPPoolStaticDetail(ctx, req.(*IPPoolStaticDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetPod(ctx, req.(*PodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PostPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PostPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PostPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PostPod(ctx, req.(*PodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetReplicaSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetReplicaSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetReplicaSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetReplicaSet(ctx, req.(*ReplicaSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PostReplicaSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PostReplicaSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PostReplicaSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PostReplicaSet(ctx, req.(*ReplicaSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetDeploymentK8S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentK8SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetDeploymentK8S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetDeploymentK8S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetDeploymentK8S(ctx, req.(*DeploymentK8SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PostDeploymentK8S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentK8SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PostDeploymentK8S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PostDeploymentK8S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PostDeploymentK8S(ctx, req.(*DeploymentK8SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetServiceK8S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceK8SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetServiceK8S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetServiceK8S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetServiceK8S(ctx, req.(*ServiceK8SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PostServiceK8S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceK8SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PostServiceK8S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PostServiceK8S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PostServiceK8S(ctx, req.(*ServiceK8SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetConfigMapK8S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigMapK8SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetConfigMapK8S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetConfigMapK8S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetConfigMapK8S(ctx, req.(*ConfigMapK8SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PostConfigMapK8S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigMapK8SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PostConfigMapK8S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PostConfigMapK8S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PostConfigMapK8S(ctx, req.(*ConfigMapK8SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetSecretK8S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretK8SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetSecretK8S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetSecretK8S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetSecretK8S(ctx, req.(*SecretK8SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PostSecretK8S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretK8SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PostSecretK8S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PostSecretK8S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PostSecretK8S(ctx, req.(*SecretK8SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetEndpointsK8S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointsK8SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetEndpointsK8S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetEndpointsK8S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetEndpointsK8S(ctx, req.(*EndpointsK8SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PostEndpointsK8S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointsK8SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PostEndpointsK8S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PostEndpointsK8S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PostEndpointsK8S(ctx, req.(*EndpointsK8SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetIngress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetIngress(ctx, req.(*IngressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PostIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PostIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PostIngress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PostIngress(ctx, req.(*IngressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetNamespaceK8S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceK8SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetNamespaceK8S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetNamespaceK8S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetNamespaceK8S(ctx, req.(*NamespaceK8SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PostNamespaceK8S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceK8SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PostNamespaceK8S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PostNamespaceK8S",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PostNamespaceK8S(ctx, req.(*NamespaceK8SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetNode(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PostNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PostNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PostNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PostNode(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetDaemonSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DaemonSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetDaemonSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetDaemonSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetDaemonSet(ctx, req.(*DaemonSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PostDaemonSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DaemonSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PostDaemonSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PostDaemonSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PostDaemonSet(ctx, req.(*DaemonSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetJob(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PostJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PostJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PostJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PostJob(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetStatefulSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatefulSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetStatefulSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetStatefulSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetStatefulSet(ctx, req.(*StatefulSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PostStatefulSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatefulSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PostStatefulSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PostStatefulSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PostStatefulSet(ctx, req.(*StatefulSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_WatchDynamic_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchDynamicRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServer).WatchDynamic(m, &storageWatchDynamicServer{stream})
}

type Storage_WatchDynamicServer interface {
	Send(*WatchDynamicResponse) error
	grpc.ServerStream
}

type storageWatchDynamicServer struct {
	grpc.ServerStream
}

func (x *storageWatchDynamicServer) Send(m *WatchDynamicResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Storage_WatchContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchContainerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServer).WatchContainer(m, &storageWatchContainerServer{stream})
}

type Storage_WatchContainerServer interface {
	Send(*WatchContainerResponse) error
	grpc.ServerStream
}

type storageWatchContainerServer struct {
	grpc.ServerStream
}

func (x *storageWatchContainerServer) Send(m *WatchContainerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Storage_PutEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PutEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PutEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PutEvent(ctx, req.(*PutEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ListEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ListEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/ListEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ListEvent(ctx, req.(*ListEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_WatchEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServer).WatchEvent(m, &storageWatchEventServer{stream})
}

type Storage_WatchEventServer interface {
	Send(*WatchEventResponse) error
	grpc.ServerStream
}

type storageWatchEventServer struct {
	grpc.ServerStream
}

func (x *storageWatchEventServer) Send(m *WatchEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Storage_GetHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetHost(ctx, req.(*GetHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PutHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PutHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PutHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PutHost(ctx, req.(*PutHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/DeleteHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteHost(ctx, req.(*DeleteHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ListHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ListHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/ListHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ListHost(ctx, req.(*ListHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PutClusterRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutClusterRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PutClusterRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PutClusterRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PutClusterRelation(ctx, req.(*PutClusterRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PostClusterRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostClusterRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PostClusterRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PostClusterRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PostClusterRelation(ctx, req.(*PostClusterRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/GetMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetMetric(ctx, req.(*GetMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_PutMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).PutMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/PutMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).PutMetric(ctx, req.(*PutMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/DeleteMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteMetric(ctx, req.(*DeleteMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_QueryMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).QueryMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/QueryMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).QueryMetric(ctx, req.(*QueryMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ListMetricTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetricTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ListMetricTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/ListMetricTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ListMetricTables(ctx, req.(*ListMetricTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_WatchMetric_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchMetricRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServer).WatchMetric(m, &storageWatchMetricServer{stream})
}

type Storage_WatchMetricServer interface {
	Send(*WatchMetricResponse) error
	grpc.ServerStream
}

type storageWatchMetricServer struct {
	grpc.ServerStream
}

func (x *storageWatchMetricServer) Send(m *WatchMetricResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Storage_K8SGetWatchResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SGetWatchResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).K8SGetWatchResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/K8SGetWatchResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).K8SGetWatchResource(ctx, req.(*K8SGetWatchResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_K8SPutWatchResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SPutWatchResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).K8SPutWatchResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/K8SPutWatchResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).K8SPutWatchResource(ctx, req.(*K8SPutWatchResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_K8SDeleteWatchResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SDeleteWatchResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).K8SDeleteWatchResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/K8SDeleteWatchResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).K8SDeleteWatchResource(ctx, req.(*K8SDeleteWatchResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_K8SListWatchResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SListWatchResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).K8SListWatchResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.Storage/K8SListWatchResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).K8SListWatchResource(ctx, req.(*K8SListWatchResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Storage_ServiceDesc is the grpc.ServiceDesc for Storage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Storage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostAlarm",
			Handler:    _Storage_PostAlarm_Handler,
		},
		{
			MethodName: "ListAlarm",
			Handler:    _Storage_ListAlarm_Handler,
		},
		{
			MethodName: "GetClusterConfig",
			Handler:    _Storage_GetClusterConfig_Handler,
		},
		{
			MethodName: "PutClusterConfig",
			Handler:    _Storage_PutClusterConfig_Handler,
		},
		{
			MethodName: "GetServiceConfig",
			Handler:    _Storage_GetServiceConfig_Handler,
		},
		{
			MethodName: "GetStableVersion",
			Handler:    _Storage_GetStableVersion_Handler,
		},
		{
			MethodName: "PutStableVersion",
			Handler:    _Storage_PutStableVersion_Handler,
		},
		{
			MethodName: "GetK8SNamespaceResources",
			Handler:    _Storage_GetK8SNamespaceResources_Handler,
		},
		{
			MethodName: "PutK8SNamespaceResources",
			Handler:    _Storage_PutK8SNamespaceResources_Handler,
		},
		{
			MethodName: "DeleteK8SNamespaceResources",
			Handler:    _Storage_DeleteK8SNamespaceResources_Handler,
		},
		{
			MethodName: "ListK8SNamespaceResources",
			Handler:    _Storage_ListK8SNamespaceResources_Handler,
		},
		{
			MethodName: "DeleteBatchK8SNamespaceResource",
			Handler:    _Storage_DeleteBatchK8SNamespaceResource_Handler,
		},
		{
			MethodName: "GetK8SClusterResources",
			Handler:    _Storage_GetK8SClusterResources_Handler,
		},
		{
			MethodName: "PutK8SClusterResources",
			Handler:    _Storage_PutK8SClusterResources_Handler,
		},
		{
			MethodName: "DeleteK8SClusterResources",
			Handler:    _Storage_DeleteK8SClusterResources_Handler,
		},
		{
			MethodName: "ListK8SClusterResources",
			Handler:    _Storage_ListK8SClusterResources_Handler,
		},
		{
			MethodName: "ListK8SClusterAllResources",
			Handler:    _Storage_ListK8SClusterAllResources_Handler,
		},
		{
			MethodName: "DeleteBatchK8SClusterResource",
			Handler:    _Storage_DeleteBatchK8SClusterResource_Handler,
		},
		{
			MethodName: "DeleteBatchK8SClusterAllResource",
			Handler:    _Storage_DeleteBatchK8SClusterAllResource_Handler,
		},
		{
			MethodName: "GetCustomResources",
			Handler:    _Storage_GetCustomResources_Handler,
		},
		{
			MethodName: "DeleteCustomResources",
			Handler:    _Storage_DeleteCustomResources_Handler,
		},
		{
			MethodName: "PutCustomResources",
			Handler:    _Storage_PutCustomResources_Handler,
		},
		{
			MethodName: "CreateCustomResourcesIndex",
			Handler:    _Storage_CreateCustomResourcesIndex_Handler,
		},
		{
			MethodName: "DeleteCustomResourcesIndex",
			Handler:    _Storage_DeleteCustomResourcesIndex_Handler,
		},
		{
			MethodName: "GetK8SIPPoolStatic",
			Handler:    _Storage_GetK8SIPPoolStatic_Handler,
		},
		{
			MethodName: "PostK8SIPPoolStatic",
			Handler:    _Storage_PostK8SIPPoolStatic_Handler,
		},
		{
			MethodName: "GetK8SIPPoolStaticDetail",
			Handler:    _Storage_GetK8SIPPoolStaticDetail_Handler,
		},
		{
			MethodName: "PostK8SIPPoolStaticDetail",
			Handler:    _Storage_PostK8SIPPoolStaticDetail_Handler,
		},
		{
			MethodName: "GetPod",
			Handler:    _Storage_GetPod_Handler,
		},
		{
			MethodName: "PostPod",
			Handler:    _Storage_PostPod_Handler,
		},
		{
			MethodName: "GetReplicaSet",
			Handler:    _Storage_GetReplicaSet_Handler,
		},
		{
			MethodName: "PostReplicaSet",
			Handler:    _Storage_PostReplicaSet_Handler,
		},
		{
			MethodName: "GetDeploymentK8S",
			Handler:    _Storage_GetDeploymentK8S_Handler,
		},
		{
			MethodName: "PostDeploymentK8S",
			Handler:    _Storage_PostDeploymentK8S_Handler,
		},
		{
			MethodName: "GetServiceK8S",
			Handler:    _Storage_GetServiceK8S_Handler,
		},
		{
			MethodName: "PostServiceK8S",
			Handler:    _Storage_PostServiceK8S_Handler,
		},
		{
			MethodName: "GetConfigMapK8S",
			Handler:    _Storage_GetConfigMapK8S_Handler,
		},
		{
			MethodName: "PostConfigMapK8S",
			Handler:    _Storage_PostConfigMapK8S_Handler,
		},
		{
			MethodName: "GetSecretK8S",
			Handler:    _Storage_GetSecretK8S_Handler,
		},
		{
			MethodName: "PostSecretK8S",
			Handler:    _Storage_PostSecretK8S_Handler,
		},
		{
			MethodName: "GetEndpointsK8S",
			Handler:    _Storage_GetEndpointsK8S_Handler,
		},
		{
			MethodName: "PostEndpointsK8S",
			Handler:    _Storage_PostEndpointsK8S_Handler,
		},
		{
			MethodName: "GetIngress",
			Handler:    _Storage_GetIngress_Handler,
		},
		{
			MethodName: "PostIngress",
			Handler:    _Storage_PostIngress_Handler,
		},
		{
			MethodName: "GetNamespaceK8S",
			Handler:    _Storage_GetNamespaceK8S_Handler,
		},
		{
			MethodName: "PostNamespaceK8S",
			Handler:    _Storage_PostNamespaceK8S_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _Storage_GetNode_Handler,
		},
		{
			MethodName: "PostNode",
			Handler:    _Storage_PostNode_Handler,
		},
		{
			MethodName: "GetDaemonSet",
			Handler:    _Storage_GetDaemonSet_Handler,
		},
		{
			MethodName: "PostDaemonSet",
			Handler:    _Storage_PostDaemonSet_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _Storage_GetJob_Handler,
		},
		{
			MethodName: "PostJob",
			Handler:    _Storage_PostJob_Handler,
		},
		{
			MethodName: "GetStatefulSet",
			Handler:    _Storage_GetStatefulSet_Handler,
		},
		{
			MethodName: "PostStatefulSet",
			Handler:    _Storage_PostStatefulSet_Handler,
		},
		{
			MethodName: "PutEvent",
			Handler:    _Storage_PutEvent_Handler,
		},
		{
			MethodName: "ListEvent",
			Handler:    _Storage_ListEvent_Handler,
		},
		{
			MethodName: "GetHost",
			Handler:    _Storage_GetHost_Handler,
		},
		{
			MethodName: "PutHost",
			Handler:    _Storage_PutHost_Handler,
		},
		{
			MethodName: "DeleteHost",
			Handler:    _Storage_DeleteHost_Handler,
		},
		{
			MethodName: "ListHost",
			Handler:    _Storage_ListHost_Handler,
		},
		{
			MethodName: "PutClusterRelation",
			Handler:    _Storage_PutClusterRelation_Handler,
		},
		{
			MethodName: "PostClusterRelation",
			Handler:    _Storage_PostClusterRelation_Handler,
		},
		{
			MethodName: "GetMetric",
			Handler:    _Storage_GetMetric_Handler,
		},
		{
			MethodName: "PutMetric",
			Handler:    _Storage_PutMetric_Handler,
		},
		{
			MethodName: "DeleteMetric",
			Handler:    _Storage_DeleteMetric_Handler,
		},
		{
			MethodName: "QueryMetric",
			Handler:    _Storage_QueryMetric_Handler,
		},
		{
			MethodName: "ListMetricTables",
			Handler:    _Storage_ListMetricTables_Handler,
		},
		{
			MethodName: "K8SGetWatchResource",
			Handler:    _Storage_K8SGetWatchResource_Handler,
		},
		{
			MethodName: "K8SPutWatchResource",
			Handler:    _Storage_K8SPutWatchResource_Handler,
		},
		{
			MethodName: "K8SDeleteWatchResource",
			Handler:    _Storage_K8SDeleteWatchResource_Handler,
		},
		{
			MethodName: "K8SListWatchResource",
			Handler:    _Storage_K8SListWatchResource_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchDynamic",
			Handler:       _Storage_WatchDynamic_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchContainer",
			Handler:       _Storage_WatchContainer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchEvent",
			Handler:       _Storage_WatchEvent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchMetric",
			Handler:       _Storage_WatchMetric_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/bcs-storage.proto",
}
