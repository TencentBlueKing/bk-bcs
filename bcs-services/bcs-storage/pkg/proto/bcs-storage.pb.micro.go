// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pkg/proto/bcs-storage.proto

package storage

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Storage service

func NewStorageEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "Storage.PostAlarm",
			Path:    []string{"/bcsstorage/v2/alarms"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.ListAlarm",
			Path:    []string{"/bcsstorage/v2/alarms"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetClusterConfig",
			Path:    []string{"/bcsstorage/v2/cluster_config/clusters/{clusterId}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PutClusterConfig",
			Path:    []string{"/bcsstorage/v2/cluster_config/clusters/{clusterId}"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetServiceConfig",
			Path:    []string{"/bcsstorage/v2/cluster_config/services/{service}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetStableVersion",
			Path:    []string{"/bcsstorage/v2/cluster_config/versions/{service}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PutStableVersion",
			Path:    []string{"/bcsstorage/v2/cluster_config/versions/{service}"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetK8SNamespaceResources",
			Path:    []string{"/bcsstorage/v2/k8s/dynamic/namespace_resources/clusters/{clusterId}/namespaces/{namespace}/{resourceType}/{resourceName}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PutK8SNamespaceResources",
			Path:    []string{"/bcsstorage/v2/k8s/dynamic/namespace_resources/clusters/{clusterId}/namespaces/{namespace}/{resourceType}/{resourceName}"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.DeleteK8SNamespaceResources",
			Path:    []string{"/bcsstorage/v2/k8s/dynamic/namespace_resources/clusters/{clusterId}/namespaces/{namespace}/{resourceType}/{resourceName}"},
			Method:  []string{"DELETE"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.ListK8SNamespaceResources",
			Path:    []string{"/bcsstorage/v2/k8s/dynamic/namespace_resources/clusters/{clusterId}/namespaces/{namespace}/{resourceType}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.DeleteBatchK8SNamespaceResource",
			Path:    []string{"/bcsstorage/v2/k8s/dynamic/namespace_resources/clusters/{clusterId}/namespaces/{namespace}/{resourceType}"},
			Method:  []string{"DELETE"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetK8SClusterResources",
			Path:    []string{"/bcsstorage/v2/k8s/dynamic/cluster_resources/clusters/{clusterId}/{resourceType}/{resourceName}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PutK8SClusterResources",
			Path:    []string{"/bcsstorage/v2/k8s/dynamic/cluster_resources/clusters/{clusterId}/{resourceType}/{resourceName}"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.DeleteK8SClusterResources",
			Path:    []string{"/bcsstorage/v2/k8s/dynamic/cluster_resources/clusters/{clusterId}/{resourceType}/{resourceName}"},
			Method:  []string{"DELETE"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.ListK8SClusterResources",
			Path:    []string{"/bcsstorage/v2/k8s/dynamic/cluster_resources/clusters/{clusterId}/{resourceType}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.ListK8SClusterAllResources",
			Path:    []string{"/bcsstorage/v2/k8s/dynamic/all_resources/clusters/{clusterId}/{resourceType}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.DeleteBatchK8SClusterResource",
			Path:    []string{"/bcsstorage/v2/k8s/dynamic/cluster_resources/clusters/{clusterId}/{resourceType}"},
			Method:  []string{"DELETE"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.DeleteBatchK8SClusterAllResource",
			Path:    []string{"/bcsstorage/v2/k8s/dynamic/all_resources/clusters/{clusterId}/{resourceType}"},
			Method:  []string{"DELETE"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetCustomResources",
			Path:    []string{"/bcsstorage/v2/dynamic/customresources/{resourceType}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.DeleteCustomResources",
			Path:    []string{"/bcsstorage/v2/dynamic/customresources/{resourceType}"},
			Method:  []string{"DELETE"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PutCustomResources",
			Path:    []string{"/bcsstorage/v2/dynamic/customresources/{resourceType}"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.CreateCustomResourcesIndex",
			Path:    []string{"/bcsstorage/v2/dynamic/customresources/{resourceType}/index/{indexName}"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.DeleteCustomResourcesIndex",
			Path:    []string{"/bcsstorage/v2/dynamic/customresources/{resourceType}/index/{indexName}"},
			Method:  []string{"DELETE"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetK8SIPPoolStatic",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/ippoolstatic"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PostK8SIPPoolStatic",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/ippoolstatic"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetK8SIPPoolStaticDetail",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/ippoolstaticdetail"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PostK8SIPPoolStaticDetail",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/ippoolstaticdetail"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetPod",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/pod"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PostPod",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/pod"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetReplicaSet",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/replicaset"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PostReplicaSet",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/replicaset"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetDeploymentK8S",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/deployment"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PostDeploymentK8S",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/deployment"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetServiceK8S",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/service"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PostServiceK8S",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/service"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetConfigMapK8S",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/configmap"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PostConfigMapK8S",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/configmap"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetSecretK8S",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/secret"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PostSecretK8S",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/secret"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetEndpointsK8S",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/endpoints"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PostEndpointsK8S",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/endpoints"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetIngress",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/ingress"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PostIngress",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/ingress"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetNamespaceK8S",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/namespace"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PostNamespaceK8S",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/namespace"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetNode",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/node"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PostNode",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/node"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetDaemonSet",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/daemonset"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PostDaemonSet",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/daemonset"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetJob",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/job"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PostJob",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/job"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetStatefulSet",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/statefulset"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PostStatefulSet",
			Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/statefulset"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.WatchDynamic",
			Path:    []string{"/bcsstorage/v2/dynamic/watch/{clusterId}/{resourceType}"},
			Method:  []string{"POST"},
			Stream:  true,
			Handler: "rpc",
		},
		{
			Name:    "Storage.WatchContainer",
			Path:    []string{"/bcsstorage/v2/dynamic/watch/containers/{clusterId}"},
			Method:  []string{"POST"},
			Stream:  true,
			Handler: "rpc",
		},
		{
			Name:    "Storage.PutEvent",
			Path:    []string{"/bcsstorage/v2/events"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.ListEvent",
			Path:    []string{"/bcsstorage/v2/events"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.WatchEvent",
			Path:    []string{"/bcsstorage/v2/events/watch"},
			Method:  []string{"POST"},
			Stream:  true,
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetHost",
			Path:    []string{"/bcsstorage/v2/host/{ip}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PutHost",
			Path:    []string{"/bcsstorage/v2/host/{ip}"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.DeleteHost",
			Path:    []string{"/bcsstorage/v2/host/{ip}"},
			Method:  []string{"DELETE"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.ListHost",
			Path:    []string{"/bcsstorage/v2/host/clusters/{clusterId}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PutClusterRelation",
			Path:    []string{"/bcsstorage/v2/host/clusters/{clusterId}"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PostClusterRelation",
			Path:    []string{"/bcsstorage/v2/host/clusters/{clusterId}"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.GetMetric",
			Path:    []string{"/bcsstorage/v2/metric/clusters/{clusterId}/namespaces/{namespace}/{type}/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.PutMetric",
			Path:    []string{"/bcsstorage/v2/metric/clusters/{clusterId}/namespaces/{namespace}/{type}/{name}"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.DeleteMetric",
			Path:    []string{"/bcsstorage/v2/metric/clusters/{clusterId}/namespaces/{namespace}/{type}/{name}"},
			Method:  []string{"DELETE"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.QueryMetric",
			Path:    []string{"/bcsstorage/v2/metric/clusters/{clusterId}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.ListMetricTables",
			Path:    []string{"/bcsstorage/v2/metric/clusters"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.WatchMetric",
			Path:    []string{"/bcsstorage/v2/metric/watch/{clusterId}/{type}"},
			Method:  []string{"POST"},
			Stream:  true,
			Handler: "rpc",
		},
		{
			Name:    "Storage.K8SGetWatchResource",
			Path:    []string{"/bcsstorage/v2/k8s/watch/clusters/{clusterId}/namespaces/{namespace}/{resourceType}/{resourceName}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.K8SPutWatchResource",
			Path:    []string{"/bcsstorage/v2/k8s/watch/clusters/{clusterId}/namespaces/{namespace}/{resourceType}/{resourceName}"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.K8SDeleteWatchResource",
			Path:    []string{"/bcsstorage/v2/k8s/watch/clusters/{clusterId}/namespaces/{namespace}/{resourceType}/{resourceName}"},
			Method:  []string{"DELETE"},
			Handler: "rpc",
		},
		{
			Name:    "Storage.K8SListWatchResource",
			Path:    []string{"/bcsstorage/v2/k8s/watch/clusters/{clusterId}/namespaces/{namespace}/{resourceType}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for Storage service

type StorageService interface {
	// **** Alarm(告警) ****
	PostAlarm(ctx context.Context, in *PostAlarmRequest, opts ...client.CallOption) (*PostAlarmResponse, error)
	ListAlarm(ctx context.Context, in *ListAlarmRequest, opts ...client.CallOption) (*ListAlarmResponse, error)
	// ****  Cluster Config(集群配置) ****
	GetClusterConfig(ctx context.Context, in *GetClusterConfigRequest, opts ...client.CallOption) (*GetClusterConfigResponse, error)
	PutClusterConfig(ctx context.Context, in *PutClusterConfigRequest, opts ...client.CallOption) (*PutClusterConfigResponse, error)
	GetServiceConfig(ctx context.Context, in *GetServiceConfigRequest, opts ...client.CallOption) (*GetServiceConfigResponse, error)
	GetStableVersion(ctx context.Context, in *GetStableVersionRequest, opts ...client.CallOption) (*GetStableVersionResponse, error)
	PutStableVersion(ctx context.Context, in *PutStableVersionRequest, opts ...client.CallOption) (*PutStableVersionResponse, error)
	//
	//k8s namespace resources
	GetK8SNamespaceResources(ctx context.Context, in *GetNamespaceResourcesRequest, opts ...client.CallOption) (*GetNamespaceResourcesResponse, error)
	PutK8SNamespaceResources(ctx context.Context, in *PutNamespaceResourcesRequest, opts ...client.CallOption) (*PutNamespaceResourcesResponse, error)
	DeleteK8SNamespaceResources(ctx context.Context, in *DeleteNamespaceResourcesRequest, opts ...client.CallOption) (*DeleteNamespaceResourcesResponse, error)
	ListK8SNamespaceResources(ctx context.Context, in *ListNamespaceResourcesRequest, opts ...client.CallOption) (*ListNamespaceResourcesResponse, error)
	DeleteBatchK8SNamespaceResource(ctx context.Context, in *DeleteBatchNamespaceResourceRequest, opts ...client.CallOption) (*DeleteBatchNamespaceResourceResponse, error)
	// k8s cluster resources
	GetK8SClusterResources(ctx context.Context, in *GetClusterResourcesRequest, opts ...client.CallOption) (*GetClusterResourcesResponse, error)
	PutK8SClusterResources(ctx context.Context, in *PutClusterResourcesRequest, opts ...client.CallOption) (*PutClusterResourcesResponse, error)
	DeleteK8SClusterResources(ctx context.Context, in *DeleteClusterResourcesRequest, opts ...client.CallOption) (*DeleteClusterResourcesResponse, error)
	ListK8SClusterResources(ctx context.Context, in *ListClusterResourcesRequest, opts ...client.CallOption) (*ListClusterResourcesResponse, error)
	ListK8SClusterAllResources(ctx context.Context, in *ListClusterResourcesRequest, opts ...client.CallOption) (*ListClusterResourcesResponse, error)
	DeleteBatchK8SClusterResource(ctx context.Context, in *DeleteBatchClusterResourceRequest, opts ...client.CallOption) (*DeleteBatchClusterResourceResponse, error)
	DeleteBatchK8SClusterAllResource(ctx context.Context, in *DeleteBatchClusterResourceRequest, opts ...client.CallOption) (*DeleteBatchClusterResourceResponse, error)
	// Custom resources OPs
	GetCustomResources(ctx context.Context, in *GetCustomResourcesRequest, opts ...client.CallOption) (*GetCustomResourcesResponse, error)
	DeleteCustomResources(ctx context.Context, in *DeleteCustomResourcesRequest, opts ...client.CallOption) (*DeleteCustomResourcesResponse, error)
	PutCustomResources(ctx context.Context, in *PutCustomResourcesRequest, opts ...client.CallOption) (*PutCustomResourcesResponse, error)
	CreateCustomResourcesIndex(ctx context.Context, in *CreateCustomResourcesIndexRequest, opts ...client.CallOption) (*CreateCustomResourcesIndexResponse, error)
	DeleteCustomResourcesIndex(ctx context.Context, in *DeleteCustomResourcesIndexRequest, opts ...client.CallOption) (*DeleteCustomResourcesIndexResponse, error)
	// **** dynamic-query(动态查询) ****
	GetK8SIPPoolStatic(ctx context.Context, in *IPPoolStaticRequest, opts ...client.CallOption) (*IPPoolStaticResponse, error)
	PostK8SIPPoolStatic(ctx context.Context, in *IPPoolStaticRequest, opts ...client.CallOption) (*IPPoolStaticResponse, error)
	GetK8SIPPoolStaticDetail(ctx context.Context, in *IPPoolStaticDetailRequest, opts ...client.CallOption) (*IPPoolStaticDetailResponse, error)
	PostK8SIPPoolStaticDetail(ctx context.Context, in *IPPoolStaticDetailRequest, opts ...client.CallOption) (*IPPoolStaticDetailResponse, error)
	// k8s
	GetPod(ctx context.Context, in *PodRequest, opts ...client.CallOption) (*PodResponse, error)
	PostPod(ctx context.Context, in *PodRequest, opts ...client.CallOption) (*PodResponse, error)
	GetReplicaSet(ctx context.Context, in *ReplicaSetRequest, opts ...client.CallOption) (*ReplicaSetResponse, error)
	PostReplicaSet(ctx context.Context, in *ReplicaSetRequest, opts ...client.CallOption) (*ReplicaSetResponse, error)
	GetDeploymentK8S(ctx context.Context, in *DeploymentK8SRequest, opts ...client.CallOption) (*DeploymentK8SResponse, error)
	PostDeploymentK8S(ctx context.Context, in *DeploymentK8SRequest, opts ...client.CallOption) (*DeploymentK8SResponse, error)
	GetServiceK8S(ctx context.Context, in *ServiceK8SRequest, opts ...client.CallOption) (*ServiceK8SResponse, error)
	PostServiceK8S(ctx context.Context, in *ServiceK8SRequest, opts ...client.CallOption) (*ServiceK8SResponse, error)
	GetConfigMapK8S(ctx context.Context, in *ConfigMapK8SRequest, opts ...client.CallOption) (*ConfigMapK8SResponse, error)
	PostConfigMapK8S(ctx context.Context, in *ConfigMapK8SRequest, opts ...client.CallOption) (*ConfigMapK8SResponse, error)
	GetSecretK8S(ctx context.Context, in *SecretK8SRequest, opts ...client.CallOption) (*SecretK8SResponse, error)
	PostSecretK8S(ctx context.Context, in *SecretK8SRequest, opts ...client.CallOption) (*SecretK8SResponse, error)
	GetEndpointsK8S(ctx context.Context, in *EndpointsK8SRequest, opts ...client.CallOption) (*EndpointsK8SResponse, error)
	PostEndpointsK8S(ctx context.Context, in *EndpointsK8SRequest, opts ...client.CallOption) (*EndpointsK8SResponse, error)
	GetIngress(ctx context.Context, in *IngressRequest, opts ...client.CallOption) (*IngressResponse, error)
	PostIngress(ctx context.Context, in *IngressRequest, opts ...client.CallOption) (*IngressResponse, error)
	GetNamespaceK8S(ctx context.Context, in *NamespaceK8SRequest, opts ...client.CallOption) (*NamespaceK8SResponse, error)
	PostNamespaceK8S(ctx context.Context, in *NamespaceK8SRequest, opts ...client.CallOption) (*NamespaceK8SResponse, error)
	GetNode(ctx context.Context, in *NodeRequest, opts ...client.CallOption) (*NodeResponse, error)
	PostNode(ctx context.Context, in *NodeRequest, opts ...client.CallOption) (*NodeResponse, error)
	GetDaemonSet(ctx context.Context, in *DaemonSetRequest, opts ...client.CallOption) (*DaemonSetResponse, error)
	PostDaemonSet(ctx context.Context, in *DaemonSetRequest, opts ...client.CallOption) (*DaemonSetResponse, error)
	GetJob(ctx context.Context, in *JobRequest, opts ...client.CallOption) (*JobResponse, error)
	PostJob(ctx context.Context, in *JobRequest, opts ...client.CallOption) (*JobResponse, error)
	GetStatefulSet(ctx context.Context, in *StatefulSetRequest, opts ...client.CallOption) (*StatefulSetResponse, error)
	PostStatefulSet(ctx context.Context, in *StatefulSetRequest, opts ...client.CallOption) (*StatefulSetResponse, error)
	// **** dynamic-watch(watch) *****
	WatchDynamic(ctx context.Context, in *WatchDynamicRequest, opts ...client.CallOption) (Storage_WatchDynamicService, error)
	WatchContainer(ctx context.Context, in *WatchContainerRequest, opts ...client.CallOption) (Storage_WatchContainerService, error)
	// **** events(事件) *****
	PutEvent(ctx context.Context, in *PutEventRequest, opts ...client.CallOption) (*PutEventResponse, error)
	ListEvent(ctx context.Context, in *ListEventRequest, opts ...client.CallOption) (*ListEventResponse, error)
	WatchEvent(ctx context.Context, in *WatchEventRequest, opts ...client.CallOption) (Storage_WatchEventService, error)
	// **** host config(主机配置) *****
	GetHost(ctx context.Context, in *GetHostRequest, opts ...client.CallOption) (*GetHostResponse, error)
	PutHost(ctx context.Context, in *PutHostRequest, opts ...client.CallOption) (*PutHostResponse, error)
	DeleteHost(ctx context.Context, in *DeleteHostRequest, opts ...client.CallOption) (*DeleteHostResponse, error)
	ListHost(ctx context.Context, in *ListHostRequest, opts ...client.CallOption) (*ListHostResponse, error)
	PutClusterRelation(ctx context.Context, in *PutClusterRelationRequest, opts ...client.CallOption) (*PutClusterRelationResponse, error)
	PostClusterRelation(ctx context.Context, in *PostClusterRelationRequest, opts ...client.CallOption) (*PostClusterRelationResponse, error)
	// **** metric(指标) ****
	GetMetric(ctx context.Context, in *GetMetricRequest, opts ...client.CallOption) (*GetMetricResponse, error)
	PutMetric(ctx context.Context, in *PutMetricRequest, opts ...client.CallOption) (*PutMetricResponse, error)
	DeleteMetric(ctx context.Context, in *DeleteMetricRequest, opts ...client.CallOption) (*DeleteMetricResponse, error)
	QueryMetric(ctx context.Context, in *QueryMetricRequest, opts ...client.CallOption) (*QueryMetricResponse, error)
	ListMetricTables(ctx context.Context, in *ListMetricTablesRequest, opts ...client.CallOption) (*ListMetricTablesResponse, error)
	// **** metric watch ****
	WatchMetric(ctx context.Context, in *WatchMetricRequest, opts ...client.CallOption) (Storage_WatchMetricService, error)
	//**** watch k8s ****
	// k8s
	K8SGetWatchResource(ctx context.Context, in *K8SGetWatchResourceRequest, opts ...client.CallOption) (*K8SGetWatchResourceResponse, error)
	K8SPutWatchResource(ctx context.Context, in *K8SPutWatchResourceRequest, opts ...client.CallOption) (*K8SPutWatchResourceResponse, error)
	K8SDeleteWatchResource(ctx context.Context, in *K8SDeleteWatchResourceRequest, opts ...client.CallOption) (*K8SDeleteWatchResourceResponse, error)
	K8SListWatchResource(ctx context.Context, in *K8SListWatchResourceRequest, opts ...client.CallOption) (*K8SListWatchResourceResponse, error)
}

type storageService struct {
	c    client.Client
	name string
}

func NewStorageService(name string, c client.Client) StorageService {
	return &storageService{
		c:    c,
		name: name,
	}
}

func (c *storageService) PostAlarm(ctx context.Context, in *PostAlarmRequest, opts ...client.CallOption) (*PostAlarmResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PostAlarm", in)
	out := new(PostAlarmResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) ListAlarm(ctx context.Context, in *ListAlarmRequest, opts ...client.CallOption) (*ListAlarmResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.ListAlarm", in)
	out := new(ListAlarmResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) GetClusterConfig(ctx context.Context, in *GetClusterConfigRequest, opts ...client.CallOption) (*GetClusterConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetClusterConfig", in)
	out := new(GetClusterConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PutClusterConfig(ctx context.Context, in *PutClusterConfigRequest, opts ...client.CallOption) (*PutClusterConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PutClusterConfig", in)
	out := new(PutClusterConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) GetServiceConfig(ctx context.Context, in *GetServiceConfigRequest, opts ...client.CallOption) (*GetServiceConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetServiceConfig", in)
	out := new(GetServiceConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) GetStableVersion(ctx context.Context, in *GetStableVersionRequest, opts ...client.CallOption) (*GetStableVersionResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetStableVersion", in)
	out := new(GetStableVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PutStableVersion(ctx context.Context, in *PutStableVersionRequest, opts ...client.CallOption) (*PutStableVersionResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PutStableVersion", in)
	out := new(PutStableVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) GetK8SNamespaceResources(ctx context.Context, in *GetNamespaceResourcesRequest, opts ...client.CallOption) (*GetNamespaceResourcesResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetK8SNamespaceResources", in)
	out := new(GetNamespaceResourcesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PutK8SNamespaceResources(ctx context.Context, in *PutNamespaceResourcesRequest, opts ...client.CallOption) (*PutNamespaceResourcesResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PutK8SNamespaceResources", in)
	out := new(PutNamespaceResourcesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) DeleteK8SNamespaceResources(ctx context.Context, in *DeleteNamespaceResourcesRequest, opts ...client.CallOption) (*DeleteNamespaceResourcesResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.DeleteK8SNamespaceResources", in)
	out := new(DeleteNamespaceResourcesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) ListK8SNamespaceResources(ctx context.Context, in *ListNamespaceResourcesRequest, opts ...client.CallOption) (*ListNamespaceResourcesResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.ListK8SNamespaceResources", in)
	out := new(ListNamespaceResourcesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) DeleteBatchK8SNamespaceResource(ctx context.Context, in *DeleteBatchNamespaceResourceRequest, opts ...client.CallOption) (*DeleteBatchNamespaceResourceResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.DeleteBatchK8SNamespaceResource", in)
	out := new(DeleteBatchNamespaceResourceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) GetK8SClusterResources(ctx context.Context, in *GetClusterResourcesRequest, opts ...client.CallOption) (*GetClusterResourcesResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetK8SClusterResources", in)
	out := new(GetClusterResourcesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PutK8SClusterResources(ctx context.Context, in *PutClusterResourcesRequest, opts ...client.CallOption) (*PutClusterResourcesResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PutK8SClusterResources", in)
	out := new(PutClusterResourcesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) DeleteK8SClusterResources(ctx context.Context, in *DeleteClusterResourcesRequest, opts ...client.CallOption) (*DeleteClusterResourcesResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.DeleteK8SClusterResources", in)
	out := new(DeleteClusterResourcesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) ListK8SClusterResources(ctx context.Context, in *ListClusterResourcesRequest, opts ...client.CallOption) (*ListClusterResourcesResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.ListK8SClusterResources", in)
	out := new(ListClusterResourcesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) ListK8SClusterAllResources(ctx context.Context, in *ListClusterResourcesRequest, opts ...client.CallOption) (*ListClusterResourcesResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.ListK8SClusterAllResources", in)
	out := new(ListClusterResourcesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) DeleteBatchK8SClusterResource(ctx context.Context, in *DeleteBatchClusterResourceRequest, opts ...client.CallOption) (*DeleteBatchClusterResourceResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.DeleteBatchK8SClusterResource", in)
	out := new(DeleteBatchClusterResourceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) DeleteBatchK8SClusterAllResource(ctx context.Context, in *DeleteBatchClusterResourceRequest, opts ...client.CallOption) (*DeleteBatchClusterResourceResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.DeleteBatchK8SClusterAllResource", in)
	out := new(DeleteBatchClusterResourceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) GetCustomResources(ctx context.Context, in *GetCustomResourcesRequest, opts ...client.CallOption) (*GetCustomResourcesResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetCustomResources", in)
	out := new(GetCustomResourcesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) DeleteCustomResources(ctx context.Context, in *DeleteCustomResourcesRequest, opts ...client.CallOption) (*DeleteCustomResourcesResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.DeleteCustomResources", in)
	out := new(DeleteCustomResourcesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PutCustomResources(ctx context.Context, in *PutCustomResourcesRequest, opts ...client.CallOption) (*PutCustomResourcesResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PutCustomResources", in)
	out := new(PutCustomResourcesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) CreateCustomResourcesIndex(ctx context.Context, in *CreateCustomResourcesIndexRequest, opts ...client.CallOption) (*CreateCustomResourcesIndexResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.CreateCustomResourcesIndex", in)
	out := new(CreateCustomResourcesIndexResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) DeleteCustomResourcesIndex(ctx context.Context, in *DeleteCustomResourcesIndexRequest, opts ...client.CallOption) (*DeleteCustomResourcesIndexResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.DeleteCustomResourcesIndex", in)
	out := new(DeleteCustomResourcesIndexResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) GetK8SIPPoolStatic(ctx context.Context, in *IPPoolStaticRequest, opts ...client.CallOption) (*IPPoolStaticResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetK8SIPPoolStatic", in)
	out := new(IPPoolStaticResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PostK8SIPPoolStatic(ctx context.Context, in *IPPoolStaticRequest, opts ...client.CallOption) (*IPPoolStaticResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PostK8SIPPoolStatic", in)
	out := new(IPPoolStaticResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) GetK8SIPPoolStaticDetail(ctx context.Context, in *IPPoolStaticDetailRequest, opts ...client.CallOption) (*IPPoolStaticDetailResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetK8SIPPoolStaticDetail", in)
	out := new(IPPoolStaticDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PostK8SIPPoolStaticDetail(ctx context.Context, in *IPPoolStaticDetailRequest, opts ...client.CallOption) (*IPPoolStaticDetailResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PostK8SIPPoolStaticDetail", in)
	out := new(IPPoolStaticDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) GetPod(ctx context.Context, in *PodRequest, opts ...client.CallOption) (*PodResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetPod", in)
	out := new(PodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PostPod(ctx context.Context, in *PodRequest, opts ...client.CallOption) (*PodResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PostPod", in)
	out := new(PodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) GetReplicaSet(ctx context.Context, in *ReplicaSetRequest, opts ...client.CallOption) (*ReplicaSetResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetReplicaSet", in)
	out := new(ReplicaSetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PostReplicaSet(ctx context.Context, in *ReplicaSetRequest, opts ...client.CallOption) (*ReplicaSetResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PostReplicaSet", in)
	out := new(ReplicaSetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) GetDeploymentK8S(ctx context.Context, in *DeploymentK8SRequest, opts ...client.CallOption) (*DeploymentK8SResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetDeploymentK8S", in)
	out := new(DeploymentK8SResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PostDeploymentK8S(ctx context.Context, in *DeploymentK8SRequest, opts ...client.CallOption) (*DeploymentK8SResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PostDeploymentK8S", in)
	out := new(DeploymentK8SResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) GetServiceK8S(ctx context.Context, in *ServiceK8SRequest, opts ...client.CallOption) (*ServiceK8SResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetServiceK8S", in)
	out := new(ServiceK8SResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PostServiceK8S(ctx context.Context, in *ServiceK8SRequest, opts ...client.CallOption) (*ServiceK8SResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PostServiceK8S", in)
	out := new(ServiceK8SResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) GetConfigMapK8S(ctx context.Context, in *ConfigMapK8SRequest, opts ...client.CallOption) (*ConfigMapK8SResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetConfigMapK8S", in)
	out := new(ConfigMapK8SResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PostConfigMapK8S(ctx context.Context, in *ConfigMapK8SRequest, opts ...client.CallOption) (*ConfigMapK8SResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PostConfigMapK8S", in)
	out := new(ConfigMapK8SResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) GetSecretK8S(ctx context.Context, in *SecretK8SRequest, opts ...client.CallOption) (*SecretK8SResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetSecretK8S", in)
	out := new(SecretK8SResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PostSecretK8S(ctx context.Context, in *SecretK8SRequest, opts ...client.CallOption) (*SecretK8SResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PostSecretK8S", in)
	out := new(SecretK8SResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) GetEndpointsK8S(ctx context.Context, in *EndpointsK8SRequest, opts ...client.CallOption) (*EndpointsK8SResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetEndpointsK8S", in)
	out := new(EndpointsK8SResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PostEndpointsK8S(ctx context.Context, in *EndpointsK8SRequest, opts ...client.CallOption) (*EndpointsK8SResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PostEndpointsK8S", in)
	out := new(EndpointsK8SResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) GetIngress(ctx context.Context, in *IngressRequest, opts ...client.CallOption) (*IngressResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetIngress", in)
	out := new(IngressResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PostIngress(ctx context.Context, in *IngressRequest, opts ...client.CallOption) (*IngressResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PostIngress", in)
	out := new(IngressResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) GetNamespaceK8S(ctx context.Context, in *NamespaceK8SRequest, opts ...client.CallOption) (*NamespaceK8SResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetNamespaceK8S", in)
	out := new(NamespaceK8SResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PostNamespaceK8S(ctx context.Context, in *NamespaceK8SRequest, opts ...client.CallOption) (*NamespaceK8SResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PostNamespaceK8S", in)
	out := new(NamespaceK8SResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) GetNode(ctx context.Context, in *NodeRequest, opts ...client.CallOption) (*NodeResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetNode", in)
	out := new(NodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PostNode(ctx context.Context, in *NodeRequest, opts ...client.CallOption) (*NodeResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PostNode", in)
	out := new(NodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) GetDaemonSet(ctx context.Context, in *DaemonSetRequest, opts ...client.CallOption) (*DaemonSetResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetDaemonSet", in)
	out := new(DaemonSetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PostDaemonSet(ctx context.Context, in *DaemonSetRequest, opts ...client.CallOption) (*DaemonSetResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PostDaemonSet", in)
	out := new(DaemonSetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) GetJob(ctx context.Context, in *JobRequest, opts ...client.CallOption) (*JobResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetJob", in)
	out := new(JobResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PostJob(ctx context.Context, in *JobRequest, opts ...client.CallOption) (*JobResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PostJob", in)
	out := new(JobResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) GetStatefulSet(ctx context.Context, in *StatefulSetRequest, opts ...client.CallOption) (*StatefulSetResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetStatefulSet", in)
	out := new(StatefulSetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PostStatefulSet(ctx context.Context, in *StatefulSetRequest, opts ...client.CallOption) (*StatefulSetResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PostStatefulSet", in)
	out := new(StatefulSetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) WatchDynamic(ctx context.Context, in *WatchDynamicRequest, opts ...client.CallOption) (Storage_WatchDynamicService, error) {
	req := c.c.NewRequest(c.name, "Storage.WatchDynamic", &WatchDynamicRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &storageServiceWatchDynamic{stream}, nil
}

type Storage_WatchDynamicService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*WatchDynamicResponse, error)
}

type storageServiceWatchDynamic struct {
	stream client.Stream
}

func (x *storageServiceWatchDynamic) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *storageServiceWatchDynamic) Close() error {
	return x.stream.Close()
}

func (x *storageServiceWatchDynamic) Context() context.Context {
	return x.stream.Context()
}

func (x *storageServiceWatchDynamic) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *storageServiceWatchDynamic) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *storageServiceWatchDynamic) Recv() (*WatchDynamicResponse, error) {
	m := new(WatchDynamicResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageService) WatchContainer(ctx context.Context, in *WatchContainerRequest, opts ...client.CallOption) (Storage_WatchContainerService, error) {
	req := c.c.NewRequest(c.name, "Storage.WatchContainer", &WatchContainerRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &storageServiceWatchContainer{stream}, nil
}

type Storage_WatchContainerService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*WatchContainerResponse, error)
}

type storageServiceWatchContainer struct {
	stream client.Stream
}

func (x *storageServiceWatchContainer) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *storageServiceWatchContainer) Close() error {
	return x.stream.Close()
}

func (x *storageServiceWatchContainer) Context() context.Context {
	return x.stream.Context()
}

func (x *storageServiceWatchContainer) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *storageServiceWatchContainer) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *storageServiceWatchContainer) Recv() (*WatchContainerResponse, error) {
	m := new(WatchContainerResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageService) PutEvent(ctx context.Context, in *PutEventRequest, opts ...client.CallOption) (*PutEventResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PutEvent", in)
	out := new(PutEventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) ListEvent(ctx context.Context, in *ListEventRequest, opts ...client.CallOption) (*ListEventResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.ListEvent", in)
	out := new(ListEventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) WatchEvent(ctx context.Context, in *WatchEventRequest, opts ...client.CallOption) (Storage_WatchEventService, error) {
	req := c.c.NewRequest(c.name, "Storage.WatchEvent", &WatchEventRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &storageServiceWatchEvent{stream}, nil
}

type Storage_WatchEventService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*WatchEventResponse, error)
}

type storageServiceWatchEvent struct {
	stream client.Stream
}

func (x *storageServiceWatchEvent) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *storageServiceWatchEvent) Close() error {
	return x.stream.Close()
}

func (x *storageServiceWatchEvent) Context() context.Context {
	return x.stream.Context()
}

func (x *storageServiceWatchEvent) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *storageServiceWatchEvent) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *storageServiceWatchEvent) Recv() (*WatchEventResponse, error) {
	m := new(WatchEventResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageService) GetHost(ctx context.Context, in *GetHostRequest, opts ...client.CallOption) (*GetHostResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetHost", in)
	out := new(GetHostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PutHost(ctx context.Context, in *PutHostRequest, opts ...client.CallOption) (*PutHostResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PutHost", in)
	out := new(PutHostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) DeleteHost(ctx context.Context, in *DeleteHostRequest, opts ...client.CallOption) (*DeleteHostResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.DeleteHost", in)
	out := new(DeleteHostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) ListHost(ctx context.Context, in *ListHostRequest, opts ...client.CallOption) (*ListHostResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.ListHost", in)
	out := new(ListHostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PutClusterRelation(ctx context.Context, in *PutClusterRelationRequest, opts ...client.CallOption) (*PutClusterRelationResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PutClusterRelation", in)
	out := new(PutClusterRelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PostClusterRelation(ctx context.Context, in *PostClusterRelationRequest, opts ...client.CallOption) (*PostClusterRelationResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PostClusterRelation", in)
	out := new(PostClusterRelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) GetMetric(ctx context.Context, in *GetMetricRequest, opts ...client.CallOption) (*GetMetricResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.GetMetric", in)
	out := new(GetMetricResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) PutMetric(ctx context.Context, in *PutMetricRequest, opts ...client.CallOption) (*PutMetricResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.PutMetric", in)
	out := new(PutMetricResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) DeleteMetric(ctx context.Context, in *DeleteMetricRequest, opts ...client.CallOption) (*DeleteMetricResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.DeleteMetric", in)
	out := new(DeleteMetricResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) QueryMetric(ctx context.Context, in *QueryMetricRequest, opts ...client.CallOption) (*QueryMetricResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.QueryMetric", in)
	out := new(QueryMetricResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) ListMetricTables(ctx context.Context, in *ListMetricTablesRequest, opts ...client.CallOption) (*ListMetricTablesResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.ListMetricTables", in)
	out := new(ListMetricTablesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) WatchMetric(ctx context.Context, in *WatchMetricRequest, opts ...client.CallOption) (Storage_WatchMetricService, error) {
	req := c.c.NewRequest(c.name, "Storage.WatchMetric", &WatchMetricRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &storageServiceWatchMetric{stream}, nil
}

type Storage_WatchMetricService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*WatchMetricResponse, error)
}

type storageServiceWatchMetric struct {
	stream client.Stream
}

func (x *storageServiceWatchMetric) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *storageServiceWatchMetric) Close() error {
	return x.stream.Close()
}

func (x *storageServiceWatchMetric) Context() context.Context {
	return x.stream.Context()
}

func (x *storageServiceWatchMetric) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *storageServiceWatchMetric) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *storageServiceWatchMetric) Recv() (*WatchMetricResponse, error) {
	m := new(WatchMetricResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageService) K8SGetWatchResource(ctx context.Context, in *K8SGetWatchResourceRequest, opts ...client.CallOption) (*K8SGetWatchResourceResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.K8SGetWatchResource", in)
	out := new(K8SGetWatchResourceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) K8SPutWatchResource(ctx context.Context, in *K8SPutWatchResourceRequest, opts ...client.CallOption) (*K8SPutWatchResourceResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.K8SPutWatchResource", in)
	out := new(K8SPutWatchResourceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) K8SDeleteWatchResource(ctx context.Context, in *K8SDeleteWatchResourceRequest, opts ...client.CallOption) (*K8SDeleteWatchResourceResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.K8SDeleteWatchResource", in)
	out := new(K8SDeleteWatchResourceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) K8SListWatchResource(ctx context.Context, in *K8SListWatchResourceRequest, opts ...client.CallOption) (*K8SListWatchResourceResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.K8SListWatchResource", in)
	out := new(K8SListWatchResourceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Storage service

type StorageHandler interface {
	// **** Alarm(告警) ****
	PostAlarm(context.Context, *PostAlarmRequest, *PostAlarmResponse) error
	ListAlarm(context.Context, *ListAlarmRequest, *ListAlarmResponse) error
	// ****  Cluster Config(集群配置) ****
	GetClusterConfig(context.Context, *GetClusterConfigRequest, *GetClusterConfigResponse) error
	PutClusterConfig(context.Context, *PutClusterConfigRequest, *PutClusterConfigResponse) error
	GetServiceConfig(context.Context, *GetServiceConfigRequest, *GetServiceConfigResponse) error
	GetStableVersion(context.Context, *GetStableVersionRequest, *GetStableVersionResponse) error
	PutStableVersion(context.Context, *PutStableVersionRequest, *PutStableVersionResponse) error
	//
	//k8s namespace resources
	GetK8SNamespaceResources(context.Context, *GetNamespaceResourcesRequest, *GetNamespaceResourcesResponse) error
	PutK8SNamespaceResources(context.Context, *PutNamespaceResourcesRequest, *PutNamespaceResourcesResponse) error
	DeleteK8SNamespaceResources(context.Context, *DeleteNamespaceResourcesRequest, *DeleteNamespaceResourcesResponse) error
	ListK8SNamespaceResources(context.Context, *ListNamespaceResourcesRequest, *ListNamespaceResourcesResponse) error
	DeleteBatchK8SNamespaceResource(context.Context, *DeleteBatchNamespaceResourceRequest, *DeleteBatchNamespaceResourceResponse) error
	// k8s cluster resources
	GetK8SClusterResources(context.Context, *GetClusterResourcesRequest, *GetClusterResourcesResponse) error
	PutK8SClusterResources(context.Context, *PutClusterResourcesRequest, *PutClusterResourcesResponse) error
	DeleteK8SClusterResources(context.Context, *DeleteClusterResourcesRequest, *DeleteClusterResourcesResponse) error
	ListK8SClusterResources(context.Context, *ListClusterResourcesRequest, *ListClusterResourcesResponse) error
	ListK8SClusterAllResources(context.Context, *ListClusterResourcesRequest, *ListClusterResourcesResponse) error
	DeleteBatchK8SClusterResource(context.Context, *DeleteBatchClusterResourceRequest, *DeleteBatchClusterResourceResponse) error
	DeleteBatchK8SClusterAllResource(context.Context, *DeleteBatchClusterResourceRequest, *DeleteBatchClusterResourceResponse) error
	// Custom resources OPs
	GetCustomResources(context.Context, *GetCustomResourcesRequest, *GetCustomResourcesResponse) error
	DeleteCustomResources(context.Context, *DeleteCustomResourcesRequest, *DeleteCustomResourcesResponse) error
	PutCustomResources(context.Context, *PutCustomResourcesRequest, *PutCustomResourcesResponse) error
	CreateCustomResourcesIndex(context.Context, *CreateCustomResourcesIndexRequest, *CreateCustomResourcesIndexResponse) error
	DeleteCustomResourcesIndex(context.Context, *DeleteCustomResourcesIndexRequest, *DeleteCustomResourcesIndexResponse) error
	// **** dynamic-query(动态查询) ****
	GetK8SIPPoolStatic(context.Context, *IPPoolStaticRequest, *IPPoolStaticResponse) error
	PostK8SIPPoolStatic(context.Context, *IPPoolStaticRequest, *IPPoolStaticResponse) error
	GetK8SIPPoolStaticDetail(context.Context, *IPPoolStaticDetailRequest, *IPPoolStaticDetailResponse) error
	PostK8SIPPoolStaticDetail(context.Context, *IPPoolStaticDetailRequest, *IPPoolStaticDetailResponse) error
	// k8s
	GetPod(context.Context, *PodRequest, *PodResponse) error
	PostPod(context.Context, *PodRequest, *PodResponse) error
	GetReplicaSet(context.Context, *ReplicaSetRequest, *ReplicaSetResponse) error
	PostReplicaSet(context.Context, *ReplicaSetRequest, *ReplicaSetResponse) error
	GetDeploymentK8S(context.Context, *DeploymentK8SRequest, *DeploymentK8SResponse) error
	PostDeploymentK8S(context.Context, *DeploymentK8SRequest, *DeploymentK8SResponse) error
	GetServiceK8S(context.Context, *ServiceK8SRequest, *ServiceK8SResponse) error
	PostServiceK8S(context.Context, *ServiceK8SRequest, *ServiceK8SResponse) error
	GetConfigMapK8S(context.Context, *ConfigMapK8SRequest, *ConfigMapK8SResponse) error
	PostConfigMapK8S(context.Context, *ConfigMapK8SRequest, *ConfigMapK8SResponse) error
	GetSecretK8S(context.Context, *SecretK8SRequest, *SecretK8SResponse) error
	PostSecretK8S(context.Context, *SecretK8SRequest, *SecretK8SResponse) error
	GetEndpointsK8S(context.Context, *EndpointsK8SRequest, *EndpointsK8SResponse) error
	PostEndpointsK8S(context.Context, *EndpointsK8SRequest, *EndpointsK8SResponse) error
	GetIngress(context.Context, *IngressRequest, *IngressResponse) error
	PostIngress(context.Context, *IngressRequest, *IngressResponse) error
	GetNamespaceK8S(context.Context, *NamespaceK8SRequest, *NamespaceK8SResponse) error
	PostNamespaceK8S(context.Context, *NamespaceK8SRequest, *NamespaceK8SResponse) error
	GetNode(context.Context, *NodeRequest, *NodeResponse) error
	PostNode(context.Context, *NodeRequest, *NodeResponse) error
	GetDaemonSet(context.Context, *DaemonSetRequest, *DaemonSetResponse) error
	PostDaemonSet(context.Context, *DaemonSetRequest, *DaemonSetResponse) error
	GetJob(context.Context, *JobRequest, *JobResponse) error
	PostJob(context.Context, *JobRequest, *JobResponse) error
	GetStatefulSet(context.Context, *StatefulSetRequest, *StatefulSetResponse) error
	PostStatefulSet(context.Context, *StatefulSetRequest, *StatefulSetResponse) error
	// **** dynamic-watch(watch) *****
	WatchDynamic(context.Context, *WatchDynamicRequest, Storage_WatchDynamicStream) error
	WatchContainer(context.Context, *WatchContainerRequest, Storage_WatchContainerStream) error
	// **** events(事件) *****
	PutEvent(context.Context, *PutEventRequest, *PutEventResponse) error
	ListEvent(context.Context, *ListEventRequest, *ListEventResponse) error
	WatchEvent(context.Context, *WatchEventRequest, Storage_WatchEventStream) error
	// **** host config(主机配置) *****
	GetHost(context.Context, *GetHostRequest, *GetHostResponse) error
	PutHost(context.Context, *PutHostRequest, *PutHostResponse) error
	DeleteHost(context.Context, *DeleteHostRequest, *DeleteHostResponse) error
	ListHost(context.Context, *ListHostRequest, *ListHostResponse) error
	PutClusterRelation(context.Context, *PutClusterRelationRequest, *PutClusterRelationResponse) error
	PostClusterRelation(context.Context, *PostClusterRelationRequest, *PostClusterRelationResponse) error
	// **** metric(指标) ****
	GetMetric(context.Context, *GetMetricRequest, *GetMetricResponse) error
	PutMetric(context.Context, *PutMetricRequest, *PutMetricResponse) error
	DeleteMetric(context.Context, *DeleteMetricRequest, *DeleteMetricResponse) error
	QueryMetric(context.Context, *QueryMetricRequest, *QueryMetricResponse) error
	ListMetricTables(context.Context, *ListMetricTablesRequest, *ListMetricTablesResponse) error
	// **** metric watch ****
	WatchMetric(context.Context, *WatchMetricRequest, Storage_WatchMetricStream) error
	//**** watch k8s ****
	// k8s
	K8SGetWatchResource(context.Context, *K8SGetWatchResourceRequest, *K8SGetWatchResourceResponse) error
	K8SPutWatchResource(context.Context, *K8SPutWatchResourceRequest, *K8SPutWatchResourceResponse) error
	K8SDeleteWatchResource(context.Context, *K8SDeleteWatchResourceRequest, *K8SDeleteWatchResourceResponse) error
	K8SListWatchResource(context.Context, *K8SListWatchResourceRequest, *K8SListWatchResourceResponse) error
}

func RegisterStorageHandler(s server.Server, hdlr StorageHandler, opts ...server.HandlerOption) error {
	type storage interface {
		PostAlarm(ctx context.Context, in *PostAlarmRequest, out *PostAlarmResponse) error
		ListAlarm(ctx context.Context, in *ListAlarmRequest, out *ListAlarmResponse) error
		GetClusterConfig(ctx context.Context, in *GetClusterConfigRequest, out *GetClusterConfigResponse) error
		PutClusterConfig(ctx context.Context, in *PutClusterConfigRequest, out *PutClusterConfigResponse) error
		GetServiceConfig(ctx context.Context, in *GetServiceConfigRequest, out *GetServiceConfigResponse) error
		GetStableVersion(ctx context.Context, in *GetStableVersionRequest, out *GetStableVersionResponse) error
		PutStableVersion(ctx context.Context, in *PutStableVersionRequest, out *PutStableVersionResponse) error
		GetK8SNamespaceResources(ctx context.Context, in *GetNamespaceResourcesRequest, out *GetNamespaceResourcesResponse) error
		PutK8SNamespaceResources(ctx context.Context, in *PutNamespaceResourcesRequest, out *PutNamespaceResourcesResponse) error
		DeleteK8SNamespaceResources(ctx context.Context, in *DeleteNamespaceResourcesRequest, out *DeleteNamespaceResourcesResponse) error
		ListK8SNamespaceResources(ctx context.Context, in *ListNamespaceResourcesRequest, out *ListNamespaceResourcesResponse) error
		DeleteBatchK8SNamespaceResource(ctx context.Context, in *DeleteBatchNamespaceResourceRequest, out *DeleteBatchNamespaceResourceResponse) error
		GetK8SClusterResources(ctx context.Context, in *GetClusterResourcesRequest, out *GetClusterResourcesResponse) error
		PutK8SClusterResources(ctx context.Context, in *PutClusterResourcesRequest, out *PutClusterResourcesResponse) error
		DeleteK8SClusterResources(ctx context.Context, in *DeleteClusterResourcesRequest, out *DeleteClusterResourcesResponse) error
		ListK8SClusterResources(ctx context.Context, in *ListClusterResourcesRequest, out *ListClusterResourcesResponse) error
		ListK8SClusterAllResources(ctx context.Context, in *ListClusterResourcesRequest, out *ListClusterResourcesResponse) error
		DeleteBatchK8SClusterResource(ctx context.Context, in *DeleteBatchClusterResourceRequest, out *DeleteBatchClusterResourceResponse) error
		DeleteBatchK8SClusterAllResource(ctx context.Context, in *DeleteBatchClusterResourceRequest, out *DeleteBatchClusterResourceResponse) error
		GetCustomResources(ctx context.Context, in *GetCustomResourcesRequest, out *GetCustomResourcesResponse) error
		DeleteCustomResources(ctx context.Context, in *DeleteCustomResourcesRequest, out *DeleteCustomResourcesResponse) error
		PutCustomResources(ctx context.Context, in *PutCustomResourcesRequest, out *PutCustomResourcesResponse) error
		CreateCustomResourcesIndex(ctx context.Context, in *CreateCustomResourcesIndexRequest, out *CreateCustomResourcesIndexResponse) error
		DeleteCustomResourcesIndex(ctx context.Context, in *DeleteCustomResourcesIndexRequest, out *DeleteCustomResourcesIndexResponse) error
		GetK8SIPPoolStatic(ctx context.Context, in *IPPoolStaticRequest, out *IPPoolStaticResponse) error
		PostK8SIPPoolStatic(ctx context.Context, in *IPPoolStaticRequest, out *IPPoolStaticResponse) error
		GetK8SIPPoolStaticDetail(ctx context.Context, in *IPPoolStaticDetailRequest, out *IPPoolStaticDetailResponse) error
		PostK8SIPPoolStaticDetail(ctx context.Context, in *IPPoolStaticDetailRequest, out *IPPoolStaticDetailResponse) error
		GetPod(ctx context.Context, in *PodRequest, out *PodResponse) error
		PostPod(ctx context.Context, in *PodRequest, out *PodResponse) error
		GetReplicaSet(ctx context.Context, in *ReplicaSetRequest, out *ReplicaSetResponse) error
		PostReplicaSet(ctx context.Context, in *ReplicaSetRequest, out *ReplicaSetResponse) error
		GetDeploymentK8S(ctx context.Context, in *DeploymentK8SRequest, out *DeploymentK8SResponse) error
		PostDeploymentK8S(ctx context.Context, in *DeploymentK8SRequest, out *DeploymentK8SResponse) error
		GetServiceK8S(ctx context.Context, in *ServiceK8SRequest, out *ServiceK8SResponse) error
		PostServiceK8S(ctx context.Context, in *ServiceK8SRequest, out *ServiceK8SResponse) error
		GetConfigMapK8S(ctx context.Context, in *ConfigMapK8SRequest, out *ConfigMapK8SResponse) error
		PostConfigMapK8S(ctx context.Context, in *ConfigMapK8SRequest, out *ConfigMapK8SResponse) error
		GetSecretK8S(ctx context.Context, in *SecretK8SRequest, out *SecretK8SResponse) error
		PostSecretK8S(ctx context.Context, in *SecretK8SRequest, out *SecretK8SResponse) error
		GetEndpointsK8S(ctx context.Context, in *EndpointsK8SRequest, out *EndpointsK8SResponse) error
		PostEndpointsK8S(ctx context.Context, in *EndpointsK8SRequest, out *EndpointsK8SResponse) error
		GetIngress(ctx context.Context, in *IngressRequest, out *IngressResponse) error
		PostIngress(ctx context.Context, in *IngressRequest, out *IngressResponse) error
		GetNamespaceK8S(ctx context.Context, in *NamespaceK8SRequest, out *NamespaceK8SResponse) error
		PostNamespaceK8S(ctx context.Context, in *NamespaceK8SRequest, out *NamespaceK8SResponse) error
		GetNode(ctx context.Context, in *NodeRequest, out *NodeResponse) error
		PostNode(ctx context.Context, in *NodeRequest, out *NodeResponse) error
		GetDaemonSet(ctx context.Context, in *DaemonSetRequest, out *DaemonSetResponse) error
		PostDaemonSet(ctx context.Context, in *DaemonSetRequest, out *DaemonSetResponse) error
		GetJob(ctx context.Context, in *JobRequest, out *JobResponse) error
		PostJob(ctx context.Context, in *JobRequest, out *JobResponse) error
		GetStatefulSet(ctx context.Context, in *StatefulSetRequest, out *StatefulSetResponse) error
		PostStatefulSet(ctx context.Context, in *StatefulSetRequest, out *StatefulSetResponse) error
		WatchDynamic(ctx context.Context, stream server.Stream) error
		WatchContainer(ctx context.Context, stream server.Stream) error
		PutEvent(ctx context.Context, in *PutEventRequest, out *PutEventResponse) error
		ListEvent(ctx context.Context, in *ListEventRequest, out *ListEventResponse) error
		WatchEvent(ctx context.Context, stream server.Stream) error
		GetHost(ctx context.Context, in *GetHostRequest, out *GetHostResponse) error
		PutHost(ctx context.Context, in *PutHostRequest, out *PutHostResponse) error
		DeleteHost(ctx context.Context, in *DeleteHostRequest, out *DeleteHostResponse) error
		ListHost(ctx context.Context, in *ListHostRequest, out *ListHostResponse) error
		PutClusterRelation(ctx context.Context, in *PutClusterRelationRequest, out *PutClusterRelationResponse) error
		PostClusterRelation(ctx context.Context, in *PostClusterRelationRequest, out *PostClusterRelationResponse) error
		GetMetric(ctx context.Context, in *GetMetricRequest, out *GetMetricResponse) error
		PutMetric(ctx context.Context, in *PutMetricRequest, out *PutMetricResponse) error
		DeleteMetric(ctx context.Context, in *DeleteMetricRequest, out *DeleteMetricResponse) error
		QueryMetric(ctx context.Context, in *QueryMetricRequest, out *QueryMetricResponse) error
		ListMetricTables(ctx context.Context, in *ListMetricTablesRequest, out *ListMetricTablesResponse) error
		WatchMetric(ctx context.Context, stream server.Stream) error
		K8SGetWatchResource(ctx context.Context, in *K8SGetWatchResourceRequest, out *K8SGetWatchResourceResponse) error
		K8SPutWatchResource(ctx context.Context, in *K8SPutWatchResourceRequest, out *K8SPutWatchResourceResponse) error
		K8SDeleteWatchResource(ctx context.Context, in *K8SDeleteWatchResourceRequest, out *K8SDeleteWatchResourceResponse) error
		K8SListWatchResource(ctx context.Context, in *K8SListWatchResourceRequest, out *K8SListWatchResourceResponse) error
	}
	type Storage struct {
		storage
	}
	h := &storageHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PostAlarm",
		Path:    []string{"/bcsstorage/v2/alarms"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.ListAlarm",
		Path:    []string{"/bcsstorage/v2/alarms"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetClusterConfig",
		Path:    []string{"/bcsstorage/v2/cluster_config/clusters/{clusterId}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PutClusterConfig",
		Path:    []string{"/bcsstorage/v2/cluster_config/clusters/{clusterId}"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetServiceConfig",
		Path:    []string{"/bcsstorage/v2/cluster_config/services/{service}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetStableVersion",
		Path:    []string{"/bcsstorage/v2/cluster_config/versions/{service}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PutStableVersion",
		Path:    []string{"/bcsstorage/v2/cluster_config/versions/{service}"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetK8SNamespaceResources",
		Path:    []string{"/bcsstorage/v2/k8s/dynamic/namespace_resources/clusters/{clusterId}/namespaces/{namespace}/{resourceType}/{resourceName}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PutK8SNamespaceResources",
		Path:    []string{"/bcsstorage/v2/k8s/dynamic/namespace_resources/clusters/{clusterId}/namespaces/{namespace}/{resourceType}/{resourceName}"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.DeleteK8SNamespaceResources",
		Path:    []string{"/bcsstorage/v2/k8s/dynamic/namespace_resources/clusters/{clusterId}/namespaces/{namespace}/{resourceType}/{resourceName}"},
		Method:  []string{"DELETE"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.ListK8SNamespaceResources",
		Path:    []string{"/bcsstorage/v2/k8s/dynamic/namespace_resources/clusters/{clusterId}/namespaces/{namespace}/{resourceType}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.DeleteBatchK8SNamespaceResource",
		Path:    []string{"/bcsstorage/v2/k8s/dynamic/namespace_resources/clusters/{clusterId}/namespaces/{namespace}/{resourceType}"},
		Method:  []string{"DELETE"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetK8SClusterResources",
		Path:    []string{"/bcsstorage/v2/k8s/dynamic/cluster_resources/clusters/{clusterId}/{resourceType}/{resourceName}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PutK8SClusterResources",
		Path:    []string{"/bcsstorage/v2/k8s/dynamic/cluster_resources/clusters/{clusterId}/{resourceType}/{resourceName}"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.DeleteK8SClusterResources",
		Path:    []string{"/bcsstorage/v2/k8s/dynamic/cluster_resources/clusters/{clusterId}/{resourceType}/{resourceName}"},
		Method:  []string{"DELETE"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.ListK8SClusterResources",
		Path:    []string{"/bcsstorage/v2/k8s/dynamic/cluster_resources/clusters/{clusterId}/{resourceType}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.ListK8SClusterAllResources",
		Path:    []string{"/bcsstorage/v2/k8s/dynamic/all_resources/clusters/{clusterId}/{resourceType}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.DeleteBatchK8SClusterResource",
		Path:    []string{"/bcsstorage/v2/k8s/dynamic/cluster_resources/clusters/{clusterId}/{resourceType}"},
		Method:  []string{"DELETE"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.DeleteBatchK8SClusterAllResource",
		Path:    []string{"/bcsstorage/v2/k8s/dynamic/all_resources/clusters/{clusterId}/{resourceType}"},
		Method:  []string{"DELETE"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetCustomResources",
		Path:    []string{"/bcsstorage/v2/dynamic/customresources/{resourceType}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.DeleteCustomResources",
		Path:    []string{"/bcsstorage/v2/dynamic/customresources/{resourceType}"},
		Method:  []string{"DELETE"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PutCustomResources",
		Path:    []string{"/bcsstorage/v2/dynamic/customresources/{resourceType}"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.CreateCustomResourcesIndex",
		Path:    []string{"/bcsstorage/v2/dynamic/customresources/{resourceType}/index/{indexName}"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.DeleteCustomResourcesIndex",
		Path:    []string{"/bcsstorage/v2/dynamic/customresources/{resourceType}/index/{indexName}"},
		Method:  []string{"DELETE"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetK8SIPPoolStatic",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/ippoolstatic"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PostK8SIPPoolStatic",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/ippoolstatic"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetK8SIPPoolStaticDetail",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/ippoolstaticdetail"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PostK8SIPPoolStaticDetail",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/ippoolstaticdetail"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetPod",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/pod"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PostPod",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/pod"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetReplicaSet",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/replicaset"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PostReplicaSet",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/replicaset"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetDeploymentK8S",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/deployment"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PostDeploymentK8S",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/deployment"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetServiceK8S",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/service"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PostServiceK8S",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/service"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetConfigMapK8S",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/configmap"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PostConfigMapK8S",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/configmap"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetSecretK8S",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/secret"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PostSecretK8S",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/secret"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetEndpointsK8S",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/endpoints"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PostEndpointsK8S",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/endpoints"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetIngress",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/ingress"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PostIngress",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/ingress"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetNamespaceK8S",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/namespace"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PostNamespaceK8S",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/namespace"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetNode",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/node"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PostNode",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/node"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetDaemonSet",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/daemonset"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PostDaemonSet",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/daemonset"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetJob",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/job"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PostJob",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/job"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetStatefulSet",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/statefulset"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PostStatefulSet",
		Path:    []string{"/bcsstorage/v2/query/k8s/dynamic/clusters/{clusterId}/statefulset"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.WatchDynamic",
		Path:    []string{"/bcsstorage/v2/dynamic/watch/{clusterId}/{resourceType}"},
		Method:  []string{"POST"},
		Stream:  true,
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.WatchContainer",
		Path:    []string{"/bcsstorage/v2/dynamic/watch/containers/{clusterId}"},
		Method:  []string{"POST"},
		Stream:  true,
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PutEvent",
		Path:    []string{"/bcsstorage/v2/events"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.ListEvent",
		Path:    []string{"/bcsstorage/v2/events"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.WatchEvent",
		Path:    []string{"/bcsstorage/v2/events/watch"},
		Method:  []string{"POST"},
		Stream:  true,
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetHost",
		Path:    []string{"/bcsstorage/v2/host/{ip}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PutHost",
		Path:    []string{"/bcsstorage/v2/host/{ip}"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.DeleteHost",
		Path:    []string{"/bcsstorage/v2/host/{ip}"},
		Method:  []string{"DELETE"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.ListHost",
		Path:    []string{"/bcsstorage/v2/host/clusters/{clusterId}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PutClusterRelation",
		Path:    []string{"/bcsstorage/v2/host/clusters/{clusterId}"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PostClusterRelation",
		Path:    []string{"/bcsstorage/v2/host/clusters/{clusterId}"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.GetMetric",
		Path:    []string{"/bcsstorage/v2/metric/clusters/{clusterId}/namespaces/{namespace}/{type}/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.PutMetric",
		Path:    []string{"/bcsstorage/v2/metric/clusters/{clusterId}/namespaces/{namespace}/{type}/{name}"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.DeleteMetric",
		Path:    []string{"/bcsstorage/v2/metric/clusters/{clusterId}/namespaces/{namespace}/{type}/{name}"},
		Method:  []string{"DELETE"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.QueryMetric",
		Path:    []string{"/bcsstorage/v2/metric/clusters/{clusterId}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.ListMetricTables",
		Path:    []string{"/bcsstorage/v2/metric/clusters"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.WatchMetric",
		Path:    []string{"/bcsstorage/v2/metric/watch/{clusterId}/{type}"},
		Method:  []string{"POST"},
		Stream:  true,
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.K8SGetWatchResource",
		Path:    []string{"/bcsstorage/v2/k8s/watch/clusters/{clusterId}/namespaces/{namespace}/{resourceType}/{resourceName}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.K8SPutWatchResource",
		Path:    []string{"/bcsstorage/v2/k8s/watch/clusters/{clusterId}/namespaces/{namespace}/{resourceType}/{resourceName}"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.K8SDeleteWatchResource",
		Path:    []string{"/bcsstorage/v2/k8s/watch/clusters/{clusterId}/namespaces/{namespace}/{resourceType}/{resourceName}"},
		Method:  []string{"DELETE"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Storage.K8SListWatchResource",
		Path:    []string{"/bcsstorage/v2/k8s/watch/clusters/{clusterId}/namespaces/{namespace}/{resourceType}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&Storage{h}, opts...))
}

type storageHandler struct {
	StorageHandler
}

func (h *storageHandler) PostAlarm(ctx context.Context, in *PostAlarmRequest, out *PostAlarmResponse) error {
	return h.StorageHandler.PostAlarm(ctx, in, out)
}

func (h *storageHandler) ListAlarm(ctx context.Context, in *ListAlarmRequest, out *ListAlarmResponse) error {
	return h.StorageHandler.ListAlarm(ctx, in, out)
}

func (h *storageHandler) GetClusterConfig(ctx context.Context, in *GetClusterConfigRequest, out *GetClusterConfigResponse) error {
	return h.StorageHandler.GetClusterConfig(ctx, in, out)
}

func (h *storageHandler) PutClusterConfig(ctx context.Context, in *PutClusterConfigRequest, out *PutClusterConfigResponse) error {
	return h.StorageHandler.PutClusterConfig(ctx, in, out)
}

func (h *storageHandler) GetServiceConfig(ctx context.Context, in *GetServiceConfigRequest, out *GetServiceConfigResponse) error {
	return h.StorageHandler.GetServiceConfig(ctx, in, out)
}

func (h *storageHandler) GetStableVersion(ctx context.Context, in *GetStableVersionRequest, out *GetStableVersionResponse) error {
	return h.StorageHandler.GetStableVersion(ctx, in, out)
}

func (h *storageHandler) PutStableVersion(ctx context.Context, in *PutStableVersionRequest, out *PutStableVersionResponse) error {
	return h.StorageHandler.PutStableVersion(ctx, in, out)
}

func (h *storageHandler) GetK8SNamespaceResources(ctx context.Context, in *GetNamespaceResourcesRequest, out *GetNamespaceResourcesResponse) error {
	return h.StorageHandler.GetK8SNamespaceResources(ctx, in, out)
}

func (h *storageHandler) PutK8SNamespaceResources(ctx context.Context, in *PutNamespaceResourcesRequest, out *PutNamespaceResourcesResponse) error {
	return h.StorageHandler.PutK8SNamespaceResources(ctx, in, out)
}

func (h *storageHandler) DeleteK8SNamespaceResources(ctx context.Context, in *DeleteNamespaceResourcesRequest, out *DeleteNamespaceResourcesResponse) error {
	return h.StorageHandler.DeleteK8SNamespaceResources(ctx, in, out)
}

func (h *storageHandler) ListK8SNamespaceResources(ctx context.Context, in *ListNamespaceResourcesRequest, out *ListNamespaceResourcesResponse) error {
	return h.StorageHandler.ListK8SNamespaceResources(ctx, in, out)
}

func (h *storageHandler) DeleteBatchK8SNamespaceResource(ctx context.Context, in *DeleteBatchNamespaceResourceRequest, out *DeleteBatchNamespaceResourceResponse) error {
	return h.StorageHandler.DeleteBatchK8SNamespaceResource(ctx, in, out)
}

func (h *storageHandler) GetK8SClusterResources(ctx context.Context, in *GetClusterResourcesRequest, out *GetClusterResourcesResponse) error {
	return h.StorageHandler.GetK8SClusterResources(ctx, in, out)
}

func (h *storageHandler) PutK8SClusterResources(ctx context.Context, in *PutClusterResourcesRequest, out *PutClusterResourcesResponse) error {
	return h.StorageHandler.PutK8SClusterResources(ctx, in, out)
}

func (h *storageHandler) DeleteK8SClusterResources(ctx context.Context, in *DeleteClusterResourcesRequest, out *DeleteClusterResourcesResponse) error {
	return h.StorageHandler.DeleteK8SClusterResources(ctx, in, out)
}

func (h *storageHandler) ListK8SClusterResources(ctx context.Context, in *ListClusterResourcesRequest, out *ListClusterResourcesResponse) error {
	return h.StorageHandler.ListK8SClusterResources(ctx, in, out)
}

func (h *storageHandler) ListK8SClusterAllResources(ctx context.Context, in *ListClusterResourcesRequest, out *ListClusterResourcesResponse) error {
	return h.StorageHandler.ListK8SClusterAllResources(ctx, in, out)
}

func (h *storageHandler) DeleteBatchK8SClusterResource(ctx context.Context, in *DeleteBatchClusterResourceRequest, out *DeleteBatchClusterResourceResponse) error {
	return h.StorageHandler.DeleteBatchK8SClusterResource(ctx, in, out)
}

func (h *storageHandler) DeleteBatchK8SClusterAllResource(ctx context.Context, in *DeleteBatchClusterResourceRequest, out *DeleteBatchClusterResourceResponse) error {
	return h.StorageHandler.DeleteBatchK8SClusterAllResource(ctx, in, out)
}

func (h *storageHandler) GetCustomResources(ctx context.Context, in *GetCustomResourcesRequest, out *GetCustomResourcesResponse) error {
	return h.StorageHandler.GetCustomResources(ctx, in, out)
}

func (h *storageHandler) DeleteCustomResources(ctx context.Context, in *DeleteCustomResourcesRequest, out *DeleteCustomResourcesResponse) error {
	return h.StorageHandler.DeleteCustomResources(ctx, in, out)
}

func (h *storageHandler) PutCustomResources(ctx context.Context, in *PutCustomResourcesRequest, out *PutCustomResourcesResponse) error {
	return h.StorageHandler.PutCustomResources(ctx, in, out)
}

func (h *storageHandler) CreateCustomResourcesIndex(ctx context.Context, in *CreateCustomResourcesIndexRequest, out *CreateCustomResourcesIndexResponse) error {
	return h.StorageHandler.CreateCustomResourcesIndex(ctx, in, out)
}

func (h *storageHandler) DeleteCustomResourcesIndex(ctx context.Context, in *DeleteCustomResourcesIndexRequest, out *DeleteCustomResourcesIndexResponse) error {
	return h.StorageHandler.DeleteCustomResourcesIndex(ctx, in, out)
}

func (h *storageHandler) GetK8SIPPoolStatic(ctx context.Context, in *IPPoolStaticRequest, out *IPPoolStaticResponse) error {
	return h.StorageHandler.GetK8SIPPoolStatic(ctx, in, out)
}

func (h *storageHandler) PostK8SIPPoolStatic(ctx context.Context, in *IPPoolStaticRequest, out *IPPoolStaticResponse) error {
	return h.StorageHandler.PostK8SIPPoolStatic(ctx, in, out)
}

func (h *storageHandler) GetK8SIPPoolStaticDetail(ctx context.Context, in *IPPoolStaticDetailRequest, out *IPPoolStaticDetailResponse) error {
	return h.StorageHandler.GetK8SIPPoolStaticDetail(ctx, in, out)
}

func (h *storageHandler) PostK8SIPPoolStaticDetail(ctx context.Context, in *IPPoolStaticDetailRequest, out *IPPoolStaticDetailResponse) error {
	return h.StorageHandler.PostK8SIPPoolStaticDetail(ctx, in, out)
}

func (h *storageHandler) GetPod(ctx context.Context, in *PodRequest, out *PodResponse) error {
	return h.StorageHandler.GetPod(ctx, in, out)
}

func (h *storageHandler) PostPod(ctx context.Context, in *PodRequest, out *PodResponse) error {
	return h.StorageHandler.PostPod(ctx, in, out)
}

func (h *storageHandler) GetReplicaSet(ctx context.Context, in *ReplicaSetRequest, out *ReplicaSetResponse) error {
	return h.StorageHandler.GetReplicaSet(ctx, in, out)
}

func (h *storageHandler) PostReplicaSet(ctx context.Context, in *ReplicaSetRequest, out *ReplicaSetResponse) error {
	return h.StorageHandler.PostReplicaSet(ctx, in, out)
}

func (h *storageHandler) GetDeploymentK8S(ctx context.Context, in *DeploymentK8SRequest, out *DeploymentK8SResponse) error {
	return h.StorageHandler.GetDeploymentK8S(ctx, in, out)
}

func (h *storageHandler) PostDeploymentK8S(ctx context.Context, in *DeploymentK8SRequest, out *DeploymentK8SResponse) error {
	return h.StorageHandler.PostDeploymentK8S(ctx, in, out)
}

func (h *storageHandler) GetServiceK8S(ctx context.Context, in *ServiceK8SRequest, out *ServiceK8SResponse) error {
	return h.StorageHandler.GetServiceK8S(ctx, in, out)
}

func (h *storageHandler) PostServiceK8S(ctx context.Context, in *ServiceK8SRequest, out *ServiceK8SResponse) error {
	return h.StorageHandler.PostServiceK8S(ctx, in, out)
}

func (h *storageHandler) GetConfigMapK8S(ctx context.Context, in *ConfigMapK8SRequest, out *ConfigMapK8SResponse) error {
	return h.StorageHandler.GetConfigMapK8S(ctx, in, out)
}

func (h *storageHandler) PostConfigMapK8S(ctx context.Context, in *ConfigMapK8SRequest, out *ConfigMapK8SResponse) error {
	return h.StorageHandler.PostConfigMapK8S(ctx, in, out)
}

func (h *storageHandler) GetSecretK8S(ctx context.Context, in *SecretK8SRequest, out *SecretK8SResponse) error {
	return h.StorageHandler.GetSecretK8S(ctx, in, out)
}

func (h *storageHandler) PostSecretK8S(ctx context.Context, in *SecretK8SRequest, out *SecretK8SResponse) error {
	return h.StorageHandler.PostSecretK8S(ctx, in, out)
}

func (h *storageHandler) GetEndpointsK8S(ctx context.Context, in *EndpointsK8SRequest, out *EndpointsK8SResponse) error {
	return h.StorageHandler.GetEndpointsK8S(ctx, in, out)
}

func (h *storageHandler) PostEndpointsK8S(ctx context.Context, in *EndpointsK8SRequest, out *EndpointsK8SResponse) error {
	return h.StorageHandler.PostEndpointsK8S(ctx, in, out)
}

func (h *storageHandler) GetIngress(ctx context.Context, in *IngressRequest, out *IngressResponse) error {
	return h.StorageHandler.GetIngress(ctx, in, out)
}

func (h *storageHandler) PostIngress(ctx context.Context, in *IngressRequest, out *IngressResponse) error {
	return h.StorageHandler.PostIngress(ctx, in, out)
}

func (h *storageHandler) GetNamespaceK8S(ctx context.Context, in *NamespaceK8SRequest, out *NamespaceK8SResponse) error {
	return h.StorageHandler.GetNamespaceK8S(ctx, in, out)
}

func (h *storageHandler) PostNamespaceK8S(ctx context.Context, in *NamespaceK8SRequest, out *NamespaceK8SResponse) error {
	return h.StorageHandler.PostNamespaceK8S(ctx, in, out)
}

func (h *storageHandler) GetNode(ctx context.Context, in *NodeRequest, out *NodeResponse) error {
	return h.StorageHandler.GetNode(ctx, in, out)
}

func (h *storageHandler) PostNode(ctx context.Context, in *NodeRequest, out *NodeResponse) error {
	return h.StorageHandler.PostNode(ctx, in, out)
}

func (h *storageHandler) GetDaemonSet(ctx context.Context, in *DaemonSetRequest, out *DaemonSetResponse) error {
	return h.StorageHandler.GetDaemonSet(ctx, in, out)
}

func (h *storageHandler) PostDaemonSet(ctx context.Context, in *DaemonSetRequest, out *DaemonSetResponse) error {
	return h.StorageHandler.PostDaemonSet(ctx, in, out)
}

func (h *storageHandler) GetJob(ctx context.Context, in *JobRequest, out *JobResponse) error {
	return h.StorageHandler.GetJob(ctx, in, out)
}

func (h *storageHandler) PostJob(ctx context.Context, in *JobRequest, out *JobResponse) error {
	return h.StorageHandler.PostJob(ctx, in, out)
}

func (h *storageHandler) GetStatefulSet(ctx context.Context, in *StatefulSetRequest, out *StatefulSetResponse) error {
	return h.StorageHandler.GetStatefulSet(ctx, in, out)
}

func (h *storageHandler) PostStatefulSet(ctx context.Context, in *StatefulSetRequest, out *StatefulSetResponse) error {
	return h.StorageHandler.PostStatefulSet(ctx, in, out)
}

func (h *storageHandler) WatchDynamic(ctx context.Context, stream server.Stream) error {
	m := new(WatchDynamicRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.StorageHandler.WatchDynamic(ctx, m, &storageWatchDynamicStream{stream})
}

type Storage_WatchDynamicStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*WatchDynamicResponse) error
}

type storageWatchDynamicStream struct {
	stream server.Stream
}

func (x *storageWatchDynamicStream) Close() error {
	return x.stream.Close()
}

func (x *storageWatchDynamicStream) Context() context.Context {
	return x.stream.Context()
}

func (x *storageWatchDynamicStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *storageWatchDynamicStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *storageWatchDynamicStream) Send(m *WatchDynamicResponse) error {
	return x.stream.Send(m)
}

func (h *storageHandler) WatchContainer(ctx context.Context, stream server.Stream) error {
	m := new(WatchContainerRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.StorageHandler.WatchContainer(ctx, m, &storageWatchContainerStream{stream})
}

type Storage_WatchContainerStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*WatchContainerResponse) error
}

type storageWatchContainerStream struct {
	stream server.Stream
}

func (x *storageWatchContainerStream) Close() error {
	return x.stream.Close()
}

func (x *storageWatchContainerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *storageWatchContainerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *storageWatchContainerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *storageWatchContainerStream) Send(m *WatchContainerResponse) error {
	return x.stream.Send(m)
}

func (h *storageHandler) PutEvent(ctx context.Context, in *PutEventRequest, out *PutEventResponse) error {
	return h.StorageHandler.PutEvent(ctx, in, out)
}

func (h *storageHandler) ListEvent(ctx context.Context, in *ListEventRequest, out *ListEventResponse) error {
	return h.StorageHandler.ListEvent(ctx, in, out)
}

func (h *storageHandler) WatchEvent(ctx context.Context, stream server.Stream) error {
	m := new(WatchEventRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.StorageHandler.WatchEvent(ctx, m, &storageWatchEventStream{stream})
}

type Storage_WatchEventStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*WatchEventResponse) error
}

type storageWatchEventStream struct {
	stream server.Stream
}

func (x *storageWatchEventStream) Close() error {
	return x.stream.Close()
}

func (x *storageWatchEventStream) Context() context.Context {
	return x.stream.Context()
}

func (x *storageWatchEventStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *storageWatchEventStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *storageWatchEventStream) Send(m *WatchEventResponse) error {
	return x.stream.Send(m)
}

func (h *storageHandler) GetHost(ctx context.Context, in *GetHostRequest, out *GetHostResponse) error {
	return h.StorageHandler.GetHost(ctx, in, out)
}

func (h *storageHandler) PutHost(ctx context.Context, in *PutHostRequest, out *PutHostResponse) error {
	return h.StorageHandler.PutHost(ctx, in, out)
}

func (h *storageHandler) DeleteHost(ctx context.Context, in *DeleteHostRequest, out *DeleteHostResponse) error {
	return h.StorageHandler.DeleteHost(ctx, in, out)
}

func (h *storageHandler) ListHost(ctx context.Context, in *ListHostRequest, out *ListHostResponse) error {
	return h.StorageHandler.ListHost(ctx, in, out)
}

func (h *storageHandler) PutClusterRelation(ctx context.Context, in *PutClusterRelationRequest, out *PutClusterRelationResponse) error {
	return h.StorageHandler.PutClusterRelation(ctx, in, out)
}

func (h *storageHandler) PostClusterRelation(ctx context.Context, in *PostClusterRelationRequest, out *PostClusterRelationResponse) error {
	return h.StorageHandler.PostClusterRelation(ctx, in, out)
}

func (h *storageHandler) GetMetric(ctx context.Context, in *GetMetricRequest, out *GetMetricResponse) error {
	return h.StorageHandler.GetMetric(ctx, in, out)
}

func (h *storageHandler) PutMetric(ctx context.Context, in *PutMetricRequest, out *PutMetricResponse) error {
	return h.StorageHandler.PutMetric(ctx, in, out)
}

func (h *storageHandler) DeleteMetric(ctx context.Context, in *DeleteMetricRequest, out *DeleteMetricResponse) error {
	return h.StorageHandler.DeleteMetric(ctx, in, out)
}

func (h *storageHandler) QueryMetric(ctx context.Context, in *QueryMetricRequest, out *QueryMetricResponse) error {
	return h.StorageHandler.QueryMetric(ctx, in, out)
}

func (h *storageHandler) ListMetricTables(ctx context.Context, in *ListMetricTablesRequest, out *ListMetricTablesResponse) error {
	return h.StorageHandler.ListMetricTables(ctx, in, out)
}

func (h *storageHandler) WatchMetric(ctx context.Context, stream server.Stream) error {
	m := new(WatchMetricRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.StorageHandler.WatchMetric(ctx, m, &storageWatchMetricStream{stream})
}

type Storage_WatchMetricStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*WatchMetricResponse) error
}

type storageWatchMetricStream struct {
	stream server.Stream
}

func (x *storageWatchMetricStream) Close() error {
	return x.stream.Close()
}

func (x *storageWatchMetricStream) Context() context.Context {
	return x.stream.Context()
}

func (x *storageWatchMetricStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *storageWatchMetricStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *storageWatchMetricStream) Send(m *WatchMetricResponse) error {
	return x.stream.Send(m)
}

func (h *storageHandler) K8SGetWatchResource(ctx context.Context, in *K8SGetWatchResourceRequest, out *K8SGetWatchResourceResponse) error {
	return h.StorageHandler.K8SGetWatchResource(ctx, in, out)
}

func (h *storageHandler) K8SPutWatchResource(ctx context.Context, in *K8SPutWatchResourceRequest, out *K8SPutWatchResourceResponse) error {
	return h.StorageHandler.K8SPutWatchResource(ctx, in, out)
}

func (h *storageHandler) K8SDeleteWatchResource(ctx context.Context, in *K8SDeleteWatchResourceRequest, out *K8SDeleteWatchResourceResponse) error {
	return h.StorageHandler.K8SDeleteWatchResource(ctx, in, out)
}

func (h *storageHandler) K8SListWatchResource(ctx context.Context, in *K8SListWatchResourceRequest, out *K8SListWatchResourceResponse) error {
	return h.StorageHandler.K8SListWatchResource(ctx, in, out)
}
