// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: pkg/bcsapi/thirdparty-service/bcs-thirdparty-service.proto

package bcsthirdpartyservice

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateTjKubeconfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace  string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Kubeconfig string `protobuf:"bytes,2,opt,name=kubeconfig,proto3" json:"kubeconfig,omitempty"`
	Platform   string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	Operator   string `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *UpdateTjKubeconfigRequest) Reset() {
	*x = UpdateTjKubeconfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTjKubeconfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTjKubeconfigRequest) ProtoMessage() {}

func (x *UpdateTjKubeconfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTjKubeconfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateTjKubeconfigRequest) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateTjKubeconfigRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateTjKubeconfigRequest) GetKubeconfig() string {
	if x != nil {
		return x.Kubeconfig
	}
	return ""
}

func (x *UpdateTjKubeconfigRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *UpdateTjKubeconfigRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type UpdateTjKubeconfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateTjKubeconfigResponse) Reset() {
	*x = UpdateTjKubeconfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTjKubeconfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTjKubeconfigResponse) ProtoMessage() {}

func (x *UpdateTjKubeconfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTjKubeconfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateTjKubeconfigResponse) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateTjKubeconfigResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UpdateTjKubeconfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ImportTjKubeconfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace  string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Kubeconfig string `protobuf:"bytes,2,opt,name=kubeconfig,proto3" json:"kubeconfig,omitempty"`
	Platform   string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	Creator    string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (x *ImportTjKubeconfigRequest) Reset() {
	*x = ImportTjKubeconfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportTjKubeconfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportTjKubeconfigRequest) ProtoMessage() {}

func (x *ImportTjKubeconfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportTjKubeconfigRequest.ProtoReflect.Descriptor instead.
func (*ImportTjKubeconfigRequest) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{2}
}

func (x *ImportTjKubeconfigRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ImportTjKubeconfigRequest) GetKubeconfig() string {
	if x != nil {
		return x.Kubeconfig
	}
	return ""
}

func (x *ImportTjKubeconfigRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *ImportTjKubeconfigRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

type ImportTjKubeconfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ImportTjKubeconfigResponse) Reset() {
	*x = ImportTjKubeconfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportTjKubeconfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportTjKubeconfigResponse) ProtoMessage() {}

func (x *ImportTjKubeconfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportTjKubeconfigResponse.ProtoReflect.Descriptor instead.
func (*ImportTjKubeconfigResponse) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{3}
}

func (x *ImportTjKubeconfigResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ImportTjKubeconfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateNamespaceForSuanliRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace     string                     `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Operator      string                     `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	SubQuotaInfos []*NamespaceQuotaForSuanli `protobuf:"bytes,3,rep,name=subQuotaInfos,proto3" json:"subQuotaInfos,omitempty"`
}

func (x *UpdateNamespaceForSuanliRequest) Reset() {
	*x = UpdateNamespaceForSuanliRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNamespaceForSuanliRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNamespaceForSuanliRequest) ProtoMessage() {}

func (x *UpdateNamespaceForSuanliRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNamespaceForSuanliRequest.ProtoReflect.Descriptor instead.
func (*UpdateNamespaceForSuanliRequest) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateNamespaceForSuanliRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateNamespaceForSuanliRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *UpdateNamespaceForSuanliRequest) GetSubQuotaInfos() []*NamespaceQuotaForSuanli {
	if x != nil {
		return x.SubQuotaInfos
	}
	return nil
}

type UpdateNamespaceForSuanliResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateNamespaceForSuanliResponse) Reset() {
	*x = UpdateNamespaceForSuanliResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNamespaceForSuanliResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNamespaceForSuanliResponse) ProtoMessage() {}

func (x *UpdateNamespaceForSuanliResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNamespaceForSuanliResponse.ProtoReflect.Descriptor instead.
func (*UpdateNamespaceForSuanliResponse) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateNamespaceForSuanliResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UpdateNamespaceForSuanliResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform  string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *GetNamespaceRequest) Reset() {
	*x = GetNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamespaceRequest) ProtoMessage() {}

func (x *GetNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamespaceRequest.ProtoReflect.Descriptor instead.
func (*GetNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetNamespaceRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *GetNamespaceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type GetNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string     `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Namespace `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNamespaceResponse) Reset() {
	*x = GetNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamespaceResponse) ProtoMessage() {}

func (x *GetNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamespaceResponse.ProtoReflect.Descriptor instead.
func (*GetNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetNamespaceResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetNamespaceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetNamespaceResponse) GetData() *Namespace {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	All      bool   `protobuf:"varint,2,opt,name=all,proto3" json:"all,omitempty"`
	Limit    int64  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page     int64  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListNamespaceRequest) Reset() {
	*x = ListNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespaceRequest) ProtoMessage() {}

func (x *ListNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespaceRequest.ProtoReflect.Descriptor instead.
func (*ListNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListNamespaceRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *ListNamespaceRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *ListNamespaceRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListNamespaceRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type ListNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string                     `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *ListNamespaceResponseData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListNamespaceResponse) Reset() {
	*x = ListNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespaceResponse) ProtoMessage() {}

func (x *ListNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespaceResponse.ProtoReflect.Descriptor instead.
func (*ListNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListNamespaceResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ListNamespaceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListNamespaceResponse) GetData() *ListNamespaceResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListNamespaceResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     int64        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Namespace []*Namespace `protobuf:"bytes,2,rep,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *ListNamespaceResponseData) Reset() {
	*x = ListNamespaceResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespaceResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespaceResponseData) ProtoMessage() {}

func (x *ListNamespaceResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespaceResponseData.ProtoReflect.Descriptor instead.
func (*ListNamespaceResponseData) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListNamespaceResponseData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListNamespaceResponseData) GetNamespace() []*Namespace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type Namespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Platform      string            `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	KubeConfig    *KubeConfig       `protobuf:"bytes,3,opt,name=kubeConfig,proto3" json:"kubeConfig,omitempty"`
	Labels        map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations   map[string]string `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SubQuotaInfos []*SubQuotaInfos  `protobuf:"bytes,6,rep,name=subQuotaInfos,proto3" json:"subQuotaInfos,omitempty"`
	Creator       string            `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
	Updater       string            `protobuf:"bytes,8,opt,name=updater,proto3" json:"updater,omitempty"`
	CreatedTime   string            `protobuf:"bytes,9,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	UpdatedTime   string            `protobuf:"bytes,10,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"`
}

func (x *Namespace) Reset() {
	*x = Namespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace) ProtoMessage() {}

func (x *Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace.ProtoReflect.Descriptor instead.
func (*Namespace) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{11}
}

func (x *Namespace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Namespace) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *Namespace) GetKubeConfig() *KubeConfig {
	if x != nil {
		return x.KubeConfig
	}
	return nil
}

func (x *Namespace) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Namespace) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Namespace) GetSubQuotaInfos() []*SubQuotaInfos {
	if x != nil {
		return x.SubQuotaInfos
	}
	return nil
}

func (x *Namespace) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Namespace) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *Namespace) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *Namespace) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

type KubeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Config string `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *KubeConfig) Reset() {
	*x = KubeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeConfig) ProtoMessage() {}

func (x *KubeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeConfig.ProtoReflect.Descriptor instead.
func (*KubeConfig) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{12}
}

func (x *KubeConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubeConfig) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type SubQuotaInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SubQuotaLabels    map[string]string `protobuf:"bytes,2,rep,name=sub_quota_labels,proto3" json:"sub_quota_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SubQuotaResources map[string]string `protobuf:"bytes,3,rep,name=sub_quota_resources,proto3" json:"sub_quota_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubQuotaInfos) Reset() {
	*x = SubQuotaInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubQuotaInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubQuotaInfos) ProtoMessage() {}

func (x *SubQuotaInfos) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubQuotaInfos.ProtoReflect.Descriptor instead.
func (*SubQuotaInfos) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{13}
}

func (x *SubQuotaInfos) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubQuotaInfos) GetSubQuotaLabels() map[string]string {
	if x != nil {
		return x.SubQuotaLabels
	}
	return nil
}

func (x *SubQuotaInfos) GetSubQuotaResources() map[string]string {
	if x != nil {
		return x.SubQuotaResources
	}
	return nil
}

type BatchImportNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespaces []*BatchImportNamespaceData `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
}

func (x *BatchImportNamespaceRequest) Reset() {
	*x = BatchImportNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchImportNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchImportNamespaceRequest) ProtoMessage() {}

func (x *BatchImportNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchImportNamespaceRequest.ProtoReflect.Descriptor instead.
func (*BatchImportNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{14}
}

func (x *BatchImportNamespaceRequest) GetNamespaces() []*BatchImportNamespaceData {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

type BatchImportNamespaceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace     string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Creator       string            `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	SubQuotaInfos []*SubQuotaInfos  `protobuf:"bytes,3,rep,name=subQuotaInfos,proto3" json:"subQuotaInfos,omitempty"`
	Labels        map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations   map[string]string `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Platform      string            `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	ClusterName   string            `protobuf:"bytes,7,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
}

func (x *BatchImportNamespaceData) Reset() {
	*x = BatchImportNamespaceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchImportNamespaceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchImportNamespaceData) ProtoMessage() {}

func (x *BatchImportNamespaceData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchImportNamespaceData.ProtoReflect.Descriptor instead.
func (*BatchImportNamespaceData) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{15}
}

func (x *BatchImportNamespaceData) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *BatchImportNamespaceData) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *BatchImportNamespaceData) GetSubQuotaInfos() []*SubQuotaInfos {
	if x != nil {
		return x.SubQuotaInfos
	}
	return nil
}

func (x *BatchImportNamespaceData) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *BatchImportNamespaceData) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *BatchImportNamespaceData) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *BatchImportNamespaceData) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type BatchImportNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BatchImportNamespaceResponse) Reset() {
	*x = BatchImportNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchImportNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchImportNamespaceResponse) ProtoMessage() {}

func (x *BatchImportNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchImportNamespaceResponse.ProtoReflect.Descriptor instead.
func (*BatchImportNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{16}
}

func (x *BatchImportNamespaceResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BatchImportNamespaceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetKubeConfigForSuanliRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameSpace string `protobuf:"bytes,1,opt,name=nameSpace,proto3" json:"nameSpace,omitempty"`
}

func (x *GetKubeConfigForSuanliRequest) Reset() {
	*x = GetKubeConfigForSuanliRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKubeConfigForSuanliRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubeConfigForSuanliRequest) ProtoMessage() {}

func (x *GetKubeConfigForSuanliRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubeConfigForSuanliRequest.ProtoReflect.Descriptor instead.
func (*GetKubeConfigForSuanliRequest) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{17}
}

func (x *GetKubeConfigForSuanliRequest) GetNameSpace() string {
	if x != nil {
		return x.NameSpace
	}
	return ""
}

type GetKubeConfigForSuanliResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string                                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *GetKubeConfigForSuanliResponseKubeCfg `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetKubeConfigForSuanliResponse) Reset() {
	*x = GetKubeConfigForSuanliResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKubeConfigForSuanliResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubeConfigForSuanliResponse) ProtoMessage() {}

func (x *GetKubeConfigForSuanliResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubeConfigForSuanliResponse.ProtoReflect.Descriptor instead.
func (*GetKubeConfigForSuanliResponse) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetKubeConfigForSuanliResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetKubeConfigForSuanliResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetKubeConfigForSuanliResponse) GetData() *GetKubeConfigForSuanliResponseKubeCfg {
	if x != nil {
		return x.Data
	}
	return nil
}

type CmdbBusinessLevel3DetailInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List     []*BusinessLevel3DetailInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	ScrollId string                      `protobuf:"bytes,2,opt,name=scrollId,proto3" json:"scrollId,omitempty"`
	HasNext  bool                        `protobuf:"varint,3,opt,name=hasNext,proto3" json:"hasNext,omitempty"`
}

func (x *CmdbBusinessLevel3DetailInfoData) Reset() {
	*x = CmdbBusinessLevel3DetailInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdbBusinessLevel3DetailInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdbBusinessLevel3DetailInfoData) ProtoMessage() {}

func (x *CmdbBusinessLevel3DetailInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdbBusinessLevel3DetailInfoData.ProtoReflect.Descriptor instead.
func (*CmdbBusinessLevel3DetailInfoData) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{19}
}

func (x *CmdbBusinessLevel3DetailInfoData) GetList() []*BusinessLevel3DetailInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CmdbBusinessLevel3DetailInfoData) GetScrollId() string {
	if x != nil {
		return x.ScrollId
	}
	return ""
}

func (x *CmdbBusinessLevel3DetailInfoData) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

type BusinessLevel3DetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessLevel1Id       int64  `protobuf:"varint,1,opt,name=businessLevel1Id,proto3" json:"businessLevel1Id,omitempty"`
	BusinessLevel1Name     string `protobuf:"bytes,2,opt,name=businessLevel1Name,proto3" json:"businessLevel1Name,omitempty"`
	BusinessLevel1Uid      string `protobuf:"bytes,3,opt,name=businessLevel1Uid,proto3" json:"businessLevel1Uid,omitempty"`
	BusinessLevel2Id       int64  `protobuf:"varint,4,opt,name=businessLevel2Id,proto3" json:"businessLevel2Id,omitempty"`
	BusinessLevel2Name     string `protobuf:"bytes,5,opt,name=businessLevel2Name,proto3" json:"businessLevel2Name,omitempty"`
	BusinessLevel2Uid      string `protobuf:"bytes,6,opt,name=businessLevel2Uid,proto3" json:"businessLevel2Uid,omitempty"`
	BusinessLevel3Id       int64  `protobuf:"varint,7,opt,name=businessLevel3Id,proto3" json:"businessLevel3Id,omitempty"`
	BusinessLevel3Name     string `protobuf:"bytes,8,opt,name=businessLevel3Name,proto3" json:"businessLevel3Name,omitempty"`
	BusinessLevel3Uid      string `protobuf:"bytes,9,opt,name=businessLevel3Uid,proto3" json:"businessLevel3Uid,omitempty"`
	BusinessDepartmentId   int64  `protobuf:"varint,10,opt,name=businessDepartmentId,proto3" json:"businessDepartmentId,omitempty"`
	BusinessDepartmentName string `protobuf:"bytes,11,opt,name=businessDepartmentName,proto3" json:"businessDepartmentName,omitempty"`
	OperationProductName   string `protobuf:"bytes,12,opt,name=operationProductName,proto3" json:"operationProductName,omitempty"`
	OperationProductId     int64  `protobuf:"varint,13,opt,name=operationProductId,proto3" json:"operationProductId,omitempty"`
}

func (x *BusinessLevel3DetailInfo) Reset() {
	*x = BusinessLevel3DetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessLevel3DetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessLevel3DetailInfo) ProtoMessage() {}

func (x *BusinessLevel3DetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessLevel3DetailInfo.ProtoReflect.Descriptor instead.
func (*BusinessLevel3DetailInfo) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{20}
}

func (x *BusinessLevel3DetailInfo) GetBusinessLevel1Id() int64 {
	if x != nil {
		return x.BusinessLevel1Id
	}
	return 0
}

func (x *BusinessLevel3DetailInfo) GetBusinessLevel1Name() string {
	if x != nil {
		return x.BusinessLevel1Name
	}
	return ""
}

func (x *BusinessLevel3DetailInfo) GetBusinessLevel1Uid() string {
	if x != nil {
		return x.BusinessLevel1Uid
	}
	return ""
}

func (x *BusinessLevel3DetailInfo) GetBusinessLevel2Id() int64 {
	if x != nil {
		return x.BusinessLevel2Id
	}
	return 0
}

func (x *BusinessLevel3DetailInfo) GetBusinessLevel2Name() string {
	if x != nil {
		return x.BusinessLevel2Name
	}
	return ""
}

func (x *BusinessLevel3DetailInfo) GetBusinessLevel2Uid() string {
	if x != nil {
		return x.BusinessLevel2Uid
	}
	return ""
}

func (x *BusinessLevel3DetailInfo) GetBusinessLevel3Id() int64 {
	if x != nil {
		return x.BusinessLevel3Id
	}
	return 0
}

func (x *BusinessLevel3DetailInfo) GetBusinessLevel3Name() string {
	if x != nil {
		return x.BusinessLevel3Name
	}
	return ""
}

func (x *BusinessLevel3DetailInfo) GetBusinessLevel3Uid() string {
	if x != nil {
		return x.BusinessLevel3Uid
	}
	return ""
}

func (x *BusinessLevel3DetailInfo) GetBusinessDepartmentId() int64 {
	if x != nil {
		return x.BusinessDepartmentId
	}
	return 0
}

func (x *BusinessLevel3DetailInfo) GetBusinessDepartmentName() string {
	if x != nil {
		return x.BusinessDepartmentName
	}
	return ""
}

func (x *BusinessLevel3DetailInfo) GetOperationProductName() string {
	if x != nil {
		return x.OperationProductName
	}
	return ""
}

func (x *BusinessLevel3DetailInfo) GetOperationProductId() int64 {
	if x != nil {
		return x.OperationProductId
	}
	return 0
}

type CreateNamespaceForSuanliRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace     string                     `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Creator       string                     `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	SubQuotaInfos []*NamespaceQuotaForSuanli `protobuf:"bytes,3,rep,name=subQuotaInfos,proto3" json:"subQuotaInfos,omitempty"`
	BkBizId       string                     `protobuf:"bytes,4,opt,name=bkBizId,proto3" json:"bkBizId,omitempty"`
	BkModuleId    string                     `protobuf:"bytes,5,opt,name=bkModuleId,proto3" json:"bkModuleId,omitempty"`
}

func (x *CreateNamespaceForSuanliRequest) Reset() {
	*x = CreateNamespaceForSuanliRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNamespaceForSuanliRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceForSuanliRequest) ProtoMessage() {}

func (x *CreateNamespaceForSuanliRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceForSuanliRequest.ProtoReflect.Descriptor instead.
func (*CreateNamespaceForSuanliRequest) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{21}
}

func (x *CreateNamespaceForSuanliRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateNamespaceForSuanliRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreateNamespaceForSuanliRequest) GetSubQuotaInfos() []*NamespaceQuotaForSuanli {
	if x != nil {
		return x.SubQuotaInfos
	}
	return nil
}

func (x *CreateNamespaceForSuanliRequest) GetBkBizId() string {
	if x != nil {
		return x.BkBizId
	}
	return ""
}

func (x *CreateNamespaceForSuanliRequest) GetBkModuleId() string {
	if x != nil {
		return x.BkModuleId
	}
	return ""
}

type NamespaceQuotaForSuanli struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SubQuotaLabels    map[string]string `protobuf:"bytes,2,rep,name=subQuotaLabels,proto3" json:"subQuotaLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SubQuotaResources map[string]string `protobuf:"bytes,3,rep,name=subQuotaResources,proto3" json:"subQuotaResources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Location          string            `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *NamespaceQuotaForSuanli) Reset() {
	*x = NamespaceQuotaForSuanli{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceQuotaForSuanli) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceQuotaForSuanli) ProtoMessage() {}

func (x *NamespaceQuotaForSuanli) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceQuotaForSuanli.ProtoReflect.Descriptor instead.
func (*NamespaceQuotaForSuanli) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{22}
}

func (x *NamespaceQuotaForSuanli) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamespaceQuotaForSuanli) GetSubQuotaLabels() map[string]string {
	if x != nil {
		return x.SubQuotaLabels
	}
	return nil
}

func (x *NamespaceQuotaForSuanli) GetSubQuotaResources() map[string]string {
	if x != nil {
		return x.SubQuotaResources
	}
	return nil
}

func (x *NamespaceQuotaForSuanli) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type CreateNamespaceForSuanliResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateNamespaceForSuanliResponse) Reset() {
	*x = CreateNamespaceForSuanliResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNamespaceForSuanliResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceForSuanliResponse) ProtoMessage() {}

func (x *CreateNamespaceForSuanliResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceForSuanliResponse.ProtoReflect.Descriptor instead.
func (*CreateNamespaceForSuanliResponse) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{23}
}

func (x *CreateNamespaceForSuanliResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CreateNamespaceForSuanliResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateNamespaceForTaijiV3Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location          string                    `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Namespace         string                    `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Creator           string                    `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	ScheduleAlgorithm *string                   `protobuf:"bytes,4,opt,name=scheduleAlgorithm,proto3,oneof" json:"scheduleAlgorithm,omitempty"`
	GpuPpClusterNames []string                  `protobuf:"bytes,5,rep,name=gpuPpClusterNames,proto3" json:"gpuPpClusterNames,omitempty"`
	SubQuotaInfos     []*NamespaceQuotaForTaiji `protobuf:"bytes,6,rep,name=subQuotaInfos,proto3" json:"subQuotaInfos,omitempty"`
	IsPrivateResource *bool                     `protobuf:"varint,7,opt,name=isPrivateResource,proto3,oneof" json:"isPrivateResource,omitempty"`
	BkBizId           string                    `protobuf:"bytes,8,opt,name=bkBizId,proto3" json:"bkBizId,omitempty"`
	BkModuleId        string                    `protobuf:"bytes,9,opt,name=bkModuleId,proto3" json:"bkModuleId,omitempty"`
}

func (x *CreateNamespaceForTaijiV3Request) Reset() {
	*x = CreateNamespaceForTaijiV3Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNamespaceForTaijiV3Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceForTaijiV3Request) ProtoMessage() {}

func (x *CreateNamespaceForTaijiV3Request) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceForTaijiV3Request.ProtoReflect.Descriptor instead.
func (*CreateNamespaceForTaijiV3Request) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{24}
}

func (x *CreateNamespaceForTaijiV3Request) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CreateNamespaceForTaijiV3Request) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateNamespaceForTaijiV3Request) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreateNamespaceForTaijiV3Request) GetScheduleAlgorithm() string {
	if x != nil && x.ScheduleAlgorithm != nil {
		return *x.ScheduleAlgorithm
	}
	return ""
}

func (x *CreateNamespaceForTaijiV3Request) GetGpuPpClusterNames() []string {
	if x != nil {
		return x.GpuPpClusterNames
	}
	return nil
}

func (x *CreateNamespaceForTaijiV3Request) GetSubQuotaInfos() []*NamespaceQuotaForTaiji {
	if x != nil {
		return x.SubQuotaInfos
	}
	return nil
}

func (x *CreateNamespaceForTaijiV3Request) GetIsPrivateResource() bool {
	if x != nil && x.IsPrivateResource != nil {
		return *x.IsPrivateResource
	}
	return false
}

func (x *CreateNamespaceForTaijiV3Request) GetBkBizId() string {
	if x != nil {
		return x.BkBizId
	}
	return ""
}

func (x *CreateNamespaceForTaijiV3Request) GetBkModuleId() string {
	if x != nil {
		return x.BkModuleId
	}
	return ""
}

type CreateNamespaceForTaijiV3Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *TaijiDefaultResponse          `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Data  *CreateNamespaceForTaijiV3Data `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateNamespaceForTaijiV3Response) Reset() {
	*x = CreateNamespaceForTaijiV3Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNamespaceForTaijiV3Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceForTaijiV3Response) ProtoMessage() {}

func (x *CreateNamespaceForTaijiV3Response) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceForTaijiV3Response.ProtoReflect.Descriptor instead.
func (*CreateNamespaceForTaijiV3Response) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{25}
}

func (x *CreateNamespaceForTaijiV3Response) GetError() *TaijiDefaultResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateNamespaceForTaijiV3Response) GetData() *CreateNamespaceForTaijiV3Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateNamespaceForTaijiV3Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	KubeCfg               string `protobuf:"bytes,2,opt,name=kubeCfg,proto3" json:"kubeCfg,omitempty"`
	RepeatedBusinessMould bool   `protobuf:"varint,3,opt,name=repeatedBusinessMould,proto3" json:"repeatedBusinessMould,omitempty"`
}

func (x *CreateNamespaceForTaijiV3Data) Reset() {
	*x = CreateNamespaceForTaijiV3Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNamespaceForTaijiV3Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceForTaijiV3Data) ProtoMessage() {}

func (x *CreateNamespaceForTaijiV3Data) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceForTaijiV3Data.ProtoReflect.Descriptor instead.
func (*CreateNamespaceForTaijiV3Data) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{26}
}

func (x *CreateNamespaceForTaijiV3Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateNamespaceForTaijiV3Data) GetKubeCfg() string {
	if x != nil {
		return x.KubeCfg
	}
	return ""
}

func (x *CreateNamespaceForTaijiV3Data) GetRepeatedBusinessMould() bool {
	if x != nil {
		return x.RepeatedBusinessMould
	}
	return false
}

type CreateModuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BkModuleName string `protobuf:"bytes,1,opt,name=bk_module_name,proto3" json:"bk_module_name,omitempty"`
	Platform     string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *CreateModuleRequest) Reset() {
	*x = CreateModuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateModuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateModuleRequest) ProtoMessage() {}

func (x *CreateModuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateModuleRequest.ProtoReflect.Descriptor instead.
func (*CreateModuleRequest) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{27}
}

func (x *CreateModuleRequest) GetBkModuleName() string {
	if x != nil {
		return x.BkModuleName
	}
	return ""
}

func (x *CreateModuleRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type CreateModuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    bool              `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Code      string            `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Message   string            `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	RequestID string            `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Data      *CreateModuleData `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateModuleResponse) Reset() {
	*x = CreateModuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateModuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateModuleResponse) ProtoMessage() {}

func (x *CreateModuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateModuleResponse.ProtoReflect.Descriptor instead.
func (*CreateModuleResponse) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{28}
}

func (x *CreateModuleResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *CreateModuleResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CreateModuleResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateModuleResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *CreateModuleResponse) GetData() *CreateModuleData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateModuleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BkBizId           int64  `protobuf:"varint,1,opt,name=bk_biz_id,proto3" json:"bk_biz_id,omitempty"`
	BkModuleId        int64  `protobuf:"varint,2,opt,name=bk_module_id,proto3" json:"bk_module_id,omitempty"`
	BkModuleName      string `protobuf:"bytes,3,opt,name=bk_module_name,proto3" json:"bk_module_name,omitempty"`
	BkModuleType      string `protobuf:"bytes,4,opt,name=bk_module_type,proto3" json:"bk_module_type,omitempty"`
	BkParentId        int64  `protobuf:"varint,5,opt,name=bk_parent_id,proto3" json:"bk_parent_id,omitempty"`
	BkSetId           int64  `protobuf:"varint,6,opt,name=bk_set_id,proto3" json:"bk_set_id,omitempty"`
	BkSupplierAccount string `protobuf:"bytes,7,opt,name=bk_supplier_account,proto3" json:"bk_supplier_account,omitempty"`
	CreateTime        string `protobuf:"bytes,8,opt,name=create_time,proto3" json:"create_time,omitempty"`
	Default           int64  `protobuf:"varint,9,opt,name=default,proto3" json:"default,omitempty"`
	HostApplyEnabled  bool   `protobuf:"varint,10,opt,name=host_apply_enabled,proto3" json:"host_apply_enabled,omitempty"`
	LastTime          string `protobuf:"bytes,11,opt,name=last_time,proto3" json:"last_time,omitempty"`
	ServiceCategoryId int64  `protobuf:"varint,12,opt,name=service_category_id,proto3" json:"service_category_id,omitempty"`
	ServiceTemplateId int64  `protobuf:"varint,13,opt,name=service_template_id,proto3" json:"service_template_id,omitempty"`
	SetTemplateId     int64  `protobuf:"varint,14,opt,name=set_template_id,proto3" json:"set_template_id,omitempty"`
}

func (x *CreateModuleData) Reset() {
	*x = CreateModuleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateModuleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateModuleData) ProtoMessage() {}

func (x *CreateModuleData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateModuleData.ProtoReflect.Descriptor instead.
func (*CreateModuleData) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{29}
}

func (x *CreateModuleData) GetBkBizId() int64 {
	if x != nil {
		return x.BkBizId
	}
	return 0
}

func (x *CreateModuleData) GetBkModuleId() int64 {
	if x != nil {
		return x.BkModuleId
	}
	return 0
}

func (x *CreateModuleData) GetBkModuleName() string {
	if x != nil {
		return x.BkModuleName
	}
	return ""
}

func (x *CreateModuleData) GetBkModuleType() string {
	if x != nil {
		return x.BkModuleType
	}
	return ""
}

func (x *CreateModuleData) GetBkParentId() int64 {
	if x != nil {
		return x.BkParentId
	}
	return 0
}

func (x *CreateModuleData) GetBkSetId() int64 {
	if x != nil {
		return x.BkSetId
	}
	return 0
}

func (x *CreateModuleData) GetBkSupplierAccount() string {
	if x != nil {
		return x.BkSupplierAccount
	}
	return ""
}

func (x *CreateModuleData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CreateModuleData) GetDefault() int64 {
	if x != nil {
		return x.Default
	}
	return 0
}

func (x *CreateModuleData) GetHostApplyEnabled() bool {
	if x != nil {
		return x.HostApplyEnabled
	}
	return false
}

func (x *CreateModuleData) GetLastTime() string {
	if x != nil {
		return x.LastTime
	}
	return ""
}

func (x *CreateModuleData) GetServiceCategoryId() int64 {
	if x != nil {
		return x.ServiceCategoryId
	}
	return 0
}

func (x *CreateModuleData) GetServiceTemplateId() int64 {
	if x != nil {
		return x.ServiceTemplateId
	}
	return 0
}

func (x *CreateModuleData) GetSetTemplateId() int64 {
	if x != nil {
		return x.SetTemplateId
	}
	return 0
}

type GetKubeConfigForTaijiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameSpace string `protobuf:"bytes,1,opt,name=nameSpace,proto3" json:"nameSpace,omitempty"`
}

func (x *GetKubeConfigForTaijiRequest) Reset() {
	*x = GetKubeConfigForTaijiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKubeConfigForTaijiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubeConfigForTaijiRequest) ProtoMessage() {}

func (x *GetKubeConfigForTaijiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubeConfigForTaijiRequest.ProtoReflect.Descriptor instead.
func (*GetKubeConfigForTaijiRequest) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{30}
}

func (x *GetKubeConfigForTaijiRequest) GetNameSpace() string {
	if x != nil {
		return x.NameSpace
	}
	return ""
}

type UpdateQuotaInfoForTaijiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace         string                    `protobuf:"bytes,1,opt,name=namespace,json=nameSpace,proto3" json:"namespace,omitempty"`
	GpuPpClusterNames []string                  `protobuf:"bytes,2,rep,name=gpuPpClusterNames,proto3" json:"gpuPpClusterNames,omitempty"`
	SubQuotaInfos     []*NamespaceQuotaForTaiji `protobuf:"bytes,3,rep,name=subQuotaInfos,proto3" json:"subQuotaInfos,omitempty"`
	Location          string                    `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Operator          string                    `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *UpdateQuotaInfoForTaijiRequest) Reset() {
	*x = UpdateQuotaInfoForTaijiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQuotaInfoForTaijiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuotaInfoForTaijiRequest) ProtoMessage() {}

func (x *UpdateQuotaInfoForTaijiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuotaInfoForTaijiRequest.ProtoReflect.Descriptor instead.
func (*UpdateQuotaInfoForTaijiRequest) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateQuotaInfoForTaijiRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateQuotaInfoForTaijiRequest) GetGpuPpClusterNames() []string {
	if x != nil {
		return x.GpuPpClusterNames
	}
	return nil
}

func (x *UpdateQuotaInfoForTaijiRequest) GetSubQuotaInfos() []*NamespaceQuotaForTaiji {
	if x != nil {
		return x.SubQuotaInfos
	}
	return nil
}

func (x *UpdateQuotaInfoForTaijiRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UpdateQuotaInfoForTaijiRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type UpdateQuotaInfoForTaijiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *TaijiDefaultResponse `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Data  *TaijiKubeCfgData     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateQuotaInfoForTaijiResponse) Reset() {
	*x = UpdateQuotaInfoForTaijiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQuotaInfoForTaijiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuotaInfoForTaijiResponse) ProtoMessage() {}

func (x *UpdateQuotaInfoForTaijiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuotaInfoForTaijiResponse.ProtoReflect.Descriptor instead.
func (*UpdateQuotaInfoForTaijiResponse) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateQuotaInfoForTaijiResponse) GetError() *TaijiDefaultResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *UpdateQuotaInfoForTaijiResponse) GetData() *TaijiKubeCfgData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetQuotaInfoForTaijiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *GetQuotaInfoForTaijiRequest) Reset() {
	*x = GetQuotaInfoForTaijiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuotaInfoForTaijiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuotaInfoForTaijiRequest) ProtoMessage() {}

func (x *GetQuotaInfoForTaijiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuotaInfoForTaijiRequest.ProtoReflect.Descriptor instead.
func (*GetQuotaInfoForTaijiRequest) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{33}
}

func (x *GetQuotaInfoForTaijiRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type GetQuotaInfoForTaijiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *TaijiDefaultResponse       `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Data  []*GetQuotaInfoForTaijiData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetQuotaInfoForTaijiResponse) Reset() {
	*x = GetQuotaInfoForTaijiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuotaInfoForTaijiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuotaInfoForTaijiResponse) ProtoMessage() {}

func (x *GetQuotaInfoForTaijiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuotaInfoForTaijiResponse.ProtoReflect.Descriptor instead.
func (*GetQuotaInfoForTaijiResponse) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{34}
}

func (x *GetQuotaInfoForTaijiResponse) GetError() *TaijiDefaultResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetQuotaInfoForTaijiResponse) GetData() []*GetQuotaInfoForTaijiData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetQuotaInfoForTaijiData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName         string `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Type                string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Id                  string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	CardType            string `protobuf:"bytes,4,opt,name=cardType,proto3" json:"cardType,omitempty"`
	UsedGpus            string `protobuf:"bytes,5,opt,name=usedGpus,proto3" json:"usedGpus,omitempty"`
	AvailableGpus       string `protobuf:"bytes,6,opt,name=availableGpus,proto3" json:"availableGpus,omitempty"`
	TotalGpus           string `protobuf:"bytes,7,opt,name=totalGpus,proto3" json:"totalGpus,omitempty"`
	UsedGpuMemoryGb     string `protobuf:"bytes,8,opt,name=usedGpuMemoryGb,proto3" json:"usedGpuMemoryGb,omitempty"`
	TotalGpuMemoryGb    string `protobuf:"bytes,9,opt,name=totalGpuMemoryGb,proto3" json:"totalGpuMemoryGb,omitempty"`
	Exclusive           bool   `protobuf:"varint,10,opt,name=exclusive,proto3" json:"exclusive,omitempty"`
	AvailableGpuDetails string `protobuf:"bytes,11,opt,name=availableGpuDetails,proto3" json:"availableGpuDetails,omitempty"`
}

func (x *GetQuotaInfoForTaijiData) Reset() {
	*x = GetQuotaInfoForTaijiData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuotaInfoForTaijiData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuotaInfoForTaijiData) ProtoMessage() {}

func (x *GetQuotaInfoForTaijiData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuotaInfoForTaijiData.ProtoReflect.Descriptor instead.
func (*GetQuotaInfoForTaijiData) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{35}
}

func (x *GetQuotaInfoForTaijiData) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GetQuotaInfoForTaijiData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetQuotaInfoForTaijiData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetQuotaInfoForTaijiData) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *GetQuotaInfoForTaijiData) GetUsedGpus() string {
	if x != nil {
		return x.UsedGpus
	}
	return ""
}

func (x *GetQuotaInfoForTaijiData) GetAvailableGpus() string {
	if x != nil {
		return x.AvailableGpus
	}
	return ""
}

func (x *GetQuotaInfoForTaijiData) GetTotalGpus() string {
	if x != nil {
		return x.TotalGpus
	}
	return ""
}

func (x *GetQuotaInfoForTaijiData) GetUsedGpuMemoryGb() string {
	if x != nil {
		return x.UsedGpuMemoryGb
	}
	return ""
}

func (x *GetQuotaInfoForTaijiData) GetTotalGpuMemoryGb() string {
	if x != nil {
		return x.TotalGpuMemoryGb
	}
	return ""
}

func (x *GetQuotaInfoForTaijiData) GetExclusive() bool {
	if x != nil {
		return x.Exclusive
	}
	return false
}

func (x *GetQuotaInfoForTaijiData) GetAvailableGpuDetails() string {
	if x != nil {
		return x.AvailableGpuDetails
	}
	return ""
}

type CreateNamespaceForTaijiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace         string                    `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Creator           string                    `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	ScheduleAlgorithm string                    `protobuf:"bytes,3,opt,name=scheduleAlgorithm,proto3" json:"scheduleAlgorithm,omitempty"`
	GpuPpClusterNames []string                  `protobuf:"bytes,4,rep,name=gpuPpClusterNames,proto3" json:"gpuPpClusterNames,omitempty"`
	SubQuotaInfos     []*NamespaceQuotaForTaiji `protobuf:"bytes,5,rep,name=subQuotaInfos,proto3" json:"subQuotaInfos,omitempty"`
	IsPrivateResource bool                      `protobuf:"varint,6,opt,name=isPrivateResource,proto3" json:"isPrivateResource,omitempty"`
	BkBizId           string                    `protobuf:"bytes,7,opt,name=bkBizId,proto3" json:"bkBizId,omitempty"`
	BkModuleId        string                    `protobuf:"bytes,8,opt,name=bkModuleId,proto3" json:"bkModuleId,omitempty"`
	Tag               string                    `protobuf:"bytes,9,opt,name=tag,proto3" json:"tag,omitempty"`
	Location          string                    `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *CreateNamespaceForTaijiRequest) Reset() {
	*x = CreateNamespaceForTaijiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNamespaceForTaijiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceForTaijiRequest) ProtoMessage() {}

func (x *CreateNamespaceForTaijiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceForTaijiRequest.ProtoReflect.Descriptor instead.
func (*CreateNamespaceForTaijiRequest) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{36}
}

func (x *CreateNamespaceForTaijiRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateNamespaceForTaijiRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreateNamespaceForTaijiRequest) GetScheduleAlgorithm() string {
	if x != nil {
		return x.ScheduleAlgorithm
	}
	return ""
}

func (x *CreateNamespaceForTaijiRequest) GetGpuPpClusterNames() []string {
	if x != nil {
		return x.GpuPpClusterNames
	}
	return nil
}

func (x *CreateNamespaceForTaijiRequest) GetSubQuotaInfos() []*NamespaceQuotaForTaiji {
	if x != nil {
		return x.SubQuotaInfos
	}
	return nil
}

func (x *CreateNamespaceForTaijiRequest) GetIsPrivateResource() bool {
	if x != nil {
		return x.IsPrivateResource
	}
	return false
}

func (x *CreateNamespaceForTaijiRequest) GetBkBizId() string {
	if x != nil {
		return x.BkBizId
	}
	return ""
}

func (x *CreateNamespaceForTaijiRequest) GetBkModuleId() string {
	if x != nil {
		return x.BkModuleId
	}
	return ""
}

func (x *CreateNamespaceForTaijiRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *CreateNamespaceForTaijiRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type NamespaceQuotaForTaiji struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SubQuotaLabels    map[string]string `protobuf:"bytes,2,rep,name=subQuotaLabels,proto3" json:"subQuotaLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SubQuotaResources map[string]string `protobuf:"bytes,3,rep,name=subQuotaResources,proto3" json:"subQuotaResources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Location          string            `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *NamespaceQuotaForTaiji) Reset() {
	*x = NamespaceQuotaForTaiji{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceQuotaForTaiji) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceQuotaForTaiji) ProtoMessage() {}

func (x *NamespaceQuotaForTaiji) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceQuotaForTaiji.ProtoReflect.Descriptor instead.
func (*NamespaceQuotaForTaiji) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{37}
}

func (x *NamespaceQuotaForTaiji) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamespaceQuotaForTaiji) GetSubQuotaLabels() map[string]string {
	if x != nil {
		return x.SubQuotaLabels
	}
	return nil
}

func (x *NamespaceQuotaForTaiji) GetSubQuotaResources() map[string]string {
	if x != nil {
		return x.SubQuotaResources
	}
	return nil
}

func (x *NamespaceQuotaForTaiji) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type CreateNamespaceForTaijiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *TaijiDefaultResponse `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Data  *TaijiDefaultData     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateNamespaceForTaijiResponse) Reset() {
	*x = CreateNamespaceForTaijiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNamespaceForTaijiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceForTaijiResponse) ProtoMessage() {}

func (x *CreateNamespaceForTaijiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceForTaijiResponse.ProtoReflect.Descriptor instead.
func (*CreateNamespaceForTaijiResponse) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{38}
}

func (x *CreateNamespaceForTaijiResponse) GetError() *TaijiDefaultResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateNamespaceForTaijiResponse) GetData() *TaijiDefaultData {
	if x != nil {
		return x.Data
	}
	return nil
}

type TaijiDefaultResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *TaijiDefaultResponse `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Data  *TaijiDefaultData     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TaijiDefaultResult) Reset() {
	*x = TaijiDefaultResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaijiDefaultResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaijiDefaultResult) ProtoMessage() {}

func (x *TaijiDefaultResult) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaijiDefaultResult.ProtoReflect.Descriptor instead.
func (*TaijiDefaultResult) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{39}
}

func (x *TaijiDefaultResult) GetError() *TaijiDefaultResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TaijiDefaultResult) GetData() *TaijiDefaultData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetKubeConfigForTaijiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *TaijiDefaultResponse `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Data  *TaijiKubeCfgData     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetKubeConfigForTaijiResponse) Reset() {
	*x = GetKubeConfigForTaijiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKubeConfigForTaijiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubeConfigForTaijiResponse) ProtoMessage() {}

func (x *GetKubeConfigForTaijiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubeConfigForTaijiResponse.ProtoReflect.Descriptor instead.
func (*GetKubeConfigForTaijiResponse) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{40}
}

func (x *GetKubeConfigForTaijiResponse) GetError() *TaijiDefaultResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetKubeConfigForTaijiResponse) GetData() *TaijiKubeCfgData {
	if x != nil {
		return x.Data
	}
	return nil
}

type TaijiDefaultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Cause   string `protobuf:"bytes,3,opt,name=cause,proto3" json:"cause,omitempty"`
}

func (x *TaijiDefaultResponse) Reset() {
	*x = TaijiDefaultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaijiDefaultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaijiDefaultResponse) ProtoMessage() {}

func (x *TaijiDefaultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaijiDefaultResponse.ProtoReflect.Descriptor instead.
func (*TaijiDefaultResponse) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{41}
}

func (x *TaijiDefaultResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TaijiDefaultResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaijiDefaultResponse) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

type TaijiDefaultData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	KubeCfg string `protobuf:"bytes,2,opt,name=kubeCfg,proto3" json:"kubeCfg,omitempty"`
}

func (x *TaijiDefaultData) Reset() {
	*x = TaijiDefaultData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaijiDefaultData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaijiDefaultData) ProtoMessage() {}

func (x *TaijiDefaultData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaijiDefaultData.ProtoReflect.Descriptor instead.
func (*TaijiDefaultData) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{42}
}

func (x *TaijiDefaultData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaijiDefaultData) GetKubeCfg() string {
	if x != nil {
		return x.KubeCfg
	}
	return ""
}

type TaijiKubeCfgData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	KubeCfg string `protobuf:"bytes,2,opt,name=kube_cfg,proto3" json:"kube_cfg,omitempty"`
}

func (x *TaijiKubeCfgData) Reset() {
	*x = TaijiKubeCfgData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaijiKubeCfgData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaijiKubeCfgData) ProtoMessage() {}

func (x *TaijiKubeCfgData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaijiKubeCfgData.ProtoReflect.Descriptor instead.
func (*TaijiKubeCfgData) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{43}
}

func (x *TaijiKubeCfgData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaijiKubeCfgData) GetKubeCfg() string {
	if x != nil {
		return x.KubeCfg
	}
	return ""
}

type SendRtxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender              string   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver            []string `protobuf:"bytes,2,rep,name=receiver,proto3" json:"receiver,omitempty"`
	Title               string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Message             string   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	IsIgnoreFormerStaff bool     `protobuf:"varint,5,opt,name=is_ignore_former_staff,proto3" json:"is_ignore_former_staff,omitempty"`
}

func (x *SendRtxRequest) Reset() {
	*x = SendRtxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRtxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRtxRequest) ProtoMessage() {}

func (x *SendRtxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRtxRequest.ProtoReflect.Descriptor instead.
func (*SendRtxRequest) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{44}
}

func (x *SendRtxRequest) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *SendRtxRequest) GetReceiver() []string {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *SendRtxRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SendRtxRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SendRtxRequest) GetIsIgnoreFormerStaff() bool {
	if x != nil {
		return x.IsIgnoreFormerStaff
	}
	return false
}

// 企业微信发送接口响应
type SendRtxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SendRtxResponse) Reset() {
	*x = SendRtxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRtxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRtxResponse) ProtoMessage() {}

func (x *SendRtxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRtxResponse.ProtoReflect.Descriptor instead.
func (*SendRtxResponse) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{45}
}

func (x *SendRtxResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SendRtxResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SendRtxResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 新增邮件发送接口请求
type SendMailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendWay         string            `protobuf:"bytes,1,opt,name=send_way,proto3" json:"send_way,omitempty"`
	Sender          string            `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Password        string            `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Receiver        []string          `protobuf:"bytes,4,rep,name=receiver,proto3" json:"receiver,omitempty"`
	Title           string            `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Content         string            `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	IsContentBase64 bool              `protobuf:"varint,7,opt,name=is_content_base64,proto3" json:"is_content_base64,omitempty"`
	Cc              []string          `protobuf:"bytes,8,rep,name=cc,proto3" json:"cc,omitempty"`
	Bcc             []string          `protobuf:"bytes,9,rep,name=bcc,proto3" json:"bcc,omitempty"`
	BodyFormat      string            `protobuf:"bytes,10,opt,name=body_format,proto3" json:"body_format,omitempty"`
	EmailType       string            `protobuf:"bytes,11,opt,name=email_type,proto3" json:"email_type,omitempty"`
	Priority        string            `protobuf:"bytes,12,opt,name=priority,proto3" json:"priority,omitempty"`
	Location        string            `protobuf:"bytes,13,opt,name=location,proto3" json:"location,omitempty"`
	Organizer       string            `protobuf:"bytes,14,opt,name=organizer,proto3" json:"organizer,omitempty"`
	StartTime       string            `protobuf:"bytes,15,opt,name=start_time,proto3" json:"start_time,omitempty"`
	EndTime         string            `protobuf:"bytes,16,opt,name=end_time,proto3" json:"end_time,omitempty"`
	Attachments     []*MailAttachment `protobuf:"bytes,17,rep,name=attachments,proto3" json:"attachments,omitempty"`
	MimeSubtype     string            `protobuf:"bytes,18,opt,name=mime_subtype,proto3" json:"mime_subtype,omitempty"`
}

func (x *SendMailRequest) Reset() {
	*x = SendMailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMailRequest) ProtoMessage() {}

func (x *SendMailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMailRequest.ProtoReflect.Descriptor instead.
func (*SendMailRequest) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{46}
}

func (x *SendMailRequest) GetSendWay() string {
	if x != nil {
		return x.SendWay
	}
	return ""
}

func (x *SendMailRequest) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *SendMailRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SendMailRequest) GetReceiver() []string {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *SendMailRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SendMailRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SendMailRequest) GetIsContentBase64() bool {
	if x != nil {
		return x.IsContentBase64
	}
	return false
}

func (x *SendMailRequest) GetCc() []string {
	if x != nil {
		return x.Cc
	}
	return nil
}

func (x *SendMailRequest) GetBcc() []string {
	if x != nil {
		return x.Bcc
	}
	return nil
}

func (x *SendMailRequest) GetBodyFormat() string {
	if x != nil {
		return x.BodyFormat
	}
	return ""
}

func (x *SendMailRequest) GetEmailType() string {
	if x != nil {
		return x.EmailType
	}
	return ""
}

func (x *SendMailRequest) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *SendMailRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *SendMailRequest) GetOrganizer() string {
	if x != nil {
		return x.Organizer
	}
	return ""
}

func (x *SendMailRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *SendMailRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *SendMailRequest) GetAttachments() []*MailAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *SendMailRequest) GetMimeSubtype() string {
	if x != nil {
		return x.MimeSubtype
	}
	return ""
}

// 邮件附件
type MailAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename    string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Content     string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Type        string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Disposition string `protobuf:"bytes,4,opt,name=disposition,proto3" json:"disposition,omitempty"`
	ContentId   string `protobuf:"bytes,5,opt,name=content_id,proto3" json:"content_id,omitempty"`
}

func (x *MailAttachment) Reset() {
	*x = MailAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailAttachment) ProtoMessage() {}

func (x *MailAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailAttachment.ProtoReflect.Descriptor instead.
func (*MailAttachment) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{47}
}

func (x *MailAttachment) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *MailAttachment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MailAttachment) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MailAttachment) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *MailAttachment) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

// 邮件发送接口响应
type SendMailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SendMailResponse) Reset() {
	*x = SendMailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMailResponse) ProtoMessage() {}

func (x *SendMailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMailResponse.ProtoReflect.Descriptor instead.
func (*SendMailResponse) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{48}
}

func (x *SendMailResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SendMailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SendMailResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type SendMsgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImToken       string    `protobuf:"bytes,1,opt,name=im_token,proto3" json:"im_token,omitempty"`
	AppId         string    `protobuf:"bytes,2,opt,name=app_id,proto3" json:"app_id,omitempty"`
	AppSecret     string    `protobuf:"bytes,3,opt,name=app_secret,proto3" json:"app_secret,omitempty"`
	RobotCode     string    `protobuf:"bytes,4,opt,name=robot_code,proto3" json:"robot_code,omitempty"`
	AppCode       string    `protobuf:"bytes,5,opt,name=app_code,proto3" json:"app_code,omitempty"`
	AppSecretBody string    `protobuf:"bytes,6,opt,name=app_secret_body,proto3" json:"app_secret_body,omitempty"`
	Im            string    `protobuf:"bytes,7,opt,name=im,proto3" json:"im,omitempty"`
	MsgType       string    `protobuf:"bytes,8,opt,name=msg_type,proto3" json:"msg_type,omitempty"`
	MsgParam      *MsgParam `protobuf:"bytes,9,opt,name=msg_param,proto3" json:"msg_param,omitempty"`
	Receiver      *Receiver `protobuf:"bytes,10,opt,name=receiver,proto3" json:"receiver,omitempty"`
}

func (x *SendMsgRequest) Reset() {
	*x = SendMsgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgRequest) ProtoMessage() {}

func (x *SendMsgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgRequest.ProtoReflect.Descriptor instead.
func (*SendMsgRequest) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{49}
}

func (x *SendMsgRequest) GetImToken() string {
	if x != nil {
		return x.ImToken
	}
	return ""
}

func (x *SendMsgRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *SendMsgRequest) GetAppSecret() string {
	if x != nil {
		return x.AppSecret
	}
	return ""
}

func (x *SendMsgRequest) GetRobotCode() string {
	if x != nil {
		return x.RobotCode
	}
	return ""
}

func (x *SendMsgRequest) GetAppCode() string {
	if x != nil {
		return x.AppCode
	}
	return ""
}

func (x *SendMsgRequest) GetAppSecretBody() string {
	if x != nil {
		return x.AppSecretBody
	}
	return ""
}

func (x *SendMsgRequest) GetIm() string {
	if x != nil {
		return x.Im
	}
	return ""
}

func (x *SendMsgRequest) GetMsgType() string {
	if x != nil {
		return x.MsgType
	}
	return ""
}

func (x *SendMsgRequest) GetMsgParam() *MsgParam {
	if x != nil {
		return x.MsgParam
	}
	return nil
}

func (x *SendMsgRequest) GetReceiver() *Receiver {
	if x != nil {
		return x.Receiver
	}
	return nil
}

type MsgParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *MsgParam) Reset() {
	*x = MsgParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgParam) ProtoMessage() {}

func (x *MsgParam) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgParam.ProtoReflect.Descriptor instead.
func (*MsgParam) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{50}
}

func (x *MsgParam) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type Receiver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverType string   `protobuf:"bytes,1,opt,name=receiver_type,json=receiverType,proto3" json:"receiver_type,omitempty"`
	ReceiverIds  []string `protobuf:"bytes,2,rep,name=receiver_ids,json=receiverIds,proto3" json:"receiver_ids,omitempty"`
}

func (x *Receiver) Reset() {
	*x = Receiver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Receiver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Receiver) ProtoMessage() {}

func (x *Receiver) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Receiver.ProtoReflect.Descriptor instead.
func (*Receiver) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{51}
}

func (x *Receiver) GetReceiverType() string {
	if x != nil {
		return x.ReceiverType
	}
	return ""
}

func (x *Receiver) GetReceiverIds() []string {
	if x != nil {
		return x.ReceiverIds
	}
	return nil
}

type SendMsgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string          `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool            `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Data    *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SendMsgResponse) Reset() {
	*x = SendMsgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgResponse) ProtoMessage() {}

func (x *SendMsgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgResponse.ProtoReflect.Descriptor instead.
func (*SendMsgResponse) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{52}
}

func (x *SendMsgResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SendMsgResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SendMsgResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *SendMsgResponse) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetKubeConfigForSuanliResponseKubeCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KubeCfg string `protobuf:"bytes,1,opt,name=kube_cfg,json=kubeCfg,proto3" json:"kube_cfg,omitempty"`
}

func (x *GetKubeConfigForSuanliResponseKubeCfg) Reset() {
	*x = GetKubeConfigForSuanliResponseKubeCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKubeConfigForSuanliResponseKubeCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubeConfigForSuanliResponseKubeCfg) ProtoMessage() {}

func (x *GetKubeConfigForSuanliResponseKubeCfg) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubeConfigForSuanliResponseKubeCfg.ProtoReflect.Descriptor instead.
func (*GetKubeConfigForSuanliResponseKubeCfg) Descriptor() ([]byte, []int) {
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP(), []int{18, 0}
}

func (x *GetKubeConfigForSuanliResponseKubeCfg) GetKubeCfg() string {
	if x != nil {
		return x.KubeCfg
	}
	return ""
}

var File_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto protoreflect.FileDescriptor

var file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x70, 0x6b, 0x67, 0x2f, 0x62, 0x63, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x62, 0x63, 0x73, 0x2d, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x62, 0x63,
	0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6a, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x72, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6a, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2f,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x15, 0x92, 0x41, 0x12, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x8f, 0x01, 0x0a, 0x19, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6a, 0x4b, 0x75, 0x62, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6b,
	0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x22, 0x72, 0x0a, 0x1a, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6a, 0x4b, 0x75, 0x62,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92,
	0x41, 0x0c, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xef, 0x02, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x61, 0x6e,
	0x6c, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41,
	0x1f, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x12, 0xe5, 0x91,
	0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92,
	0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93,
	0x8d, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x76, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68,
	0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x46, 0x6f,
	0x72, 0x53, 0x75, 0x61, 0x6e, 0x6c, 0x69, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x0d, 0x73, 0x75,
	0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x32, 0x0d, 0x73, 0x75, 0x62,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x3a, 0x5c, 0x92, 0x41, 0x59, 0x0a, 0x57,
	0x2a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x61, 0x6e, 0x6c, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x18, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0xae, 0x97, 0xe5, 0x8a, 0x9b, 0xe5,
	0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xd2, 0x01, 0x0d, 0x73, 0x75,
	0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0xd2, 0x01, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x78, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x61,
	0x6e, 0x6c, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x4f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x22, 0x79, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72,
	0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6e, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x8a, 0x01,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3d, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xd4, 0x04, 0x0a,
	0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x40, 0x0a, 0x0a, 0x6b, 0x75,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62,
	0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x52, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72,
	0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62,
	0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x38, 0x0a, 0x0a, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xea, 0x03,
	0x0a, 0x0d, 0x53, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12,
	0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92,
	0x41, 0x0c, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x5f, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x10, 0x73,
	0x75, 0x62, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32,
	0x10, 0x73, 0x75, 0x62, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x52, 0x10, 0x73, 0x75, 0x62, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x5f, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2d, 0x92,
	0x41, 0x2a, 0x2a, 0x13, 0x73, 0x75, 0x62, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x32, 0x13, 0x73, 0x75, 0x62, 0x5f, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x13, 0x73, 0x75,
	0x62, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6d, 0x0a, 0x1b, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0xe5, 0x05, 0x0a, 0x18, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x12, 0xe5, 0x91, 0xbd, 0xe5, 0x90,
	0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe4,
	0xba, 0xba, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x6c, 0x0a, 0x0d, 0x73,
	0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x0d, 0x73, 0x75,
	0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x32, 0x0d, 0x73, 0x75, 0x62,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x67, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x63, 0x73, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x32, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68,
	0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x32, 0x06, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x4c, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92,
	0x41, 0x27, 0x2a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x32,
	0x18, 0xe7, 0xae, 0x97, 0xe5, 0x8a, 0x9b, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0x20, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x4c, 0x0a, 0x1c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x3d, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x46, 0x6f, 0x72, 0x53, 0x75, 0x61, 0x6e, 0x6c, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0xc6,
	0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x46, 0x6f, 0x72, 0x53, 0x75, 0x61, 0x6e, 0x6c, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x50, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x61, 0x6e, 0x6c, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x66, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x24, 0x0a, 0x07, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x66, 0x67, 0x12, 0x19, 0x0a, 0x08,
	0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x66, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6b, 0x75, 0x62, 0x65, 0x43, 0x66, 0x67, 0x22, 0x9c, 0x01, 0x0a, 0x20, 0x43, 0x6d, 0x64, 0x62,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x63, 0x73,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68,
	0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x22, 0x88, 0x05, 0x0a, 0x18, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x31, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x12, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x31, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x31, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x55, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x32, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x55, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x32, 0x55, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x33, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x33, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x33, 0x55, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x55, 0x69,
	0x64, 0x12, 0x32, 0x0a, 0x14, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x22, 0x8c, 0x04, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x61, 0x6e, 0x6c, 0x69, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x12, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d,
	0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe4, 0xba,
	0xba, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x76, 0x0a, 0x0d, 0x73, 0x75,
	0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x61, 0x6e, 0x6c, 0x69,
	0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x0d, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x32, 0x0d, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x62, 0x6b, 0x42, 0x69, 0x7a, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x07, 0x62, 0x6b, 0x42, 0x69, 0x7a, 0x49,
	0x64, 0x32, 0x1b, 0xe8, 0xae, 0xa1, 0xe8, 0xb4, 0xb9, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7,
	0x9a, 0x84, 0x62, 0x6b, 0x63, 0x63, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x69, 0x64, 0x52, 0x07,
	0x62, 0x6b, 0x42, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0a, 0x62, 0x6b, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f,
	0x2a, 0x0a, 0x62, 0x6b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x32, 0x21, 0xe8, 0xae,
	0xa1, 0xe8, 0xb4, 0xb9, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0x62, 0x6b, 0x63,
	0x63, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x69, 0x64, 0x52,
	0x0a, 0x62, 0x6b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x3a, 0x63, 0x92, 0x41, 0x60,
	0x0a, 0x5e, 0x2a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x61, 0x6e, 0x6c, 0x69, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x18, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe7, 0xae, 0x97, 0xe5, 0x8a,
	0x9b, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xd2, 0x01, 0x07,
	0x62, 0x6b, 0x42, 0x69, 0x7a, 0x49, 0x64, 0xd2, 0x01, 0x0a, 0x62, 0x6b, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x22, 0xad, 0x04, 0x0a, 0x17, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x61, 0x6e, 0x6c, 0x69, 0x12, 0x23, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x2a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x8e, 0x01, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x62, 0x63, 0x73,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x46, 0x6f, 0x72, 0x53, 0x75, 0x61, 0x6e, 0x6c, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x23, 0x92,
	0x41, 0x20, 0x2a, 0x0e, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x32, 0x0e, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x61, 0x6e, 0x6c, 0x69, 0x2e, 0x53, 0x75,
	0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x11, 0x73, 0x75, 0x62, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x32, 0x11, 0x73, 0x75,
	0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x11, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x32, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x53, 0x75,
	0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x78, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x61, 0x6e, 0x6c, 0x69, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa5, 0x07, 0x0a, 0x20, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f,
	0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x56, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x32, 0x06, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x12, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x57, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x32, 0x0c, 0xe8, 0xb0, 0x83, 0xe5,
	0xba, 0xa6, 0xe7, 0xae, 0x97, 0xe6, 0xb3, 0x95, 0x48, 0x00, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x88, 0x01, 0x01,
	0x12, 0x55, 0x0a, 0x11, 0x67, 0x70, 0x75, 0x50, 0x70, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24,
	0x2a, 0x11, 0x67, 0x70, 0x75, 0x50, 0x70, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x32, 0x0f, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0x67, 0x70, 0x75, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x52, 0x11, 0x67, 0x70, 0x75, 0x50, 0x70, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x42, 0x21, 0x92, 0x41,
	0x1e, 0x2a, 0x0d, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x32, 0x0d, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52,
	0x0d, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x5d,
	0x0a, 0x11, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x11,
	0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x32, 0x12, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0x93, 0xe5, 0xb1, 0x9e, 0xe9,
	0xa2, 0x9d, 0xe5, 0xba, 0xa6, 0x48, 0x01, 0x52, 0x11, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a,
	0x07, 0x62, 0x6b, 0x42, 0x69, 0x7a, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29,
	0x92, 0x41, 0x26, 0x2a, 0x07, 0x62, 0x6b, 0x42, 0x69, 0x7a, 0x49, 0x64, 0x32, 0x1b, 0xe8, 0xae,
	0xa1, 0xe8, 0xb4, 0xb9, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0x62, 0x6b, 0x63,
	0x63, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x69, 0x64, 0x52, 0x07, 0x62, 0x6b, 0x42, 0x69, 0x7a,
	0x49, 0x64, 0x12, 0x52, 0x0a, 0x0a, 0x62, 0x6b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x2a, 0x0a, 0x62, 0x6b, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x32, 0x21, 0xe8, 0xae, 0xa1, 0xe8, 0xb4, 0xb9, 0xe5,
	0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0x62, 0x6b, 0x63, 0x63, 0xe4, 0xb8, 0x9a, 0xe5,
	0x8a, 0xa1, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x69, 0x64, 0x52, 0x0a, 0x62, 0x6b, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x3a, 0x8d, 0x01, 0x92, 0x41, 0x89, 0x01, 0x0a, 0x86, 0x01,
	0x2a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x56, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xa4, 0xaa, 0xe6, 0x9e, 0x81,
	0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x56, 0x33, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x07, 0x62, 0x6b, 0x42, 0x69, 0x7a, 0x49, 0x64, 0xd2, 0x01,
	0x0a, 0x62, 0x6b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0xd2, 0x01, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0xd2, 0x01, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x56, 0x33,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54,
	0x61, 0x69, 0x6a, 0x69, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x32,
	0x0c, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x60, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a,
	0x69, 0x56, 0x33, 0x44, 0x61, 0x74, 0x61, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x0c, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x42, 0x92, 0x41, 0x3f, 0x0a, 0x3d, 0x2a, 0x21, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f,
	0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x18, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9,
	0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xd6, 0x01, 0x0a, 0x1d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f,
	0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x56, 0x33, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x2a, 0x02, 0x69,
	0x64, 0x32, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x6b, 0x75, 0x62,
	0x65, 0x43, 0x66, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a,
	0x07, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x66, 0x67, 0x32, 0x07, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x66,
	0x67, 0x52, 0x07, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x66, 0x67, 0x12, 0x67, 0x0a, 0x15, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f,
	0x75, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x15,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x4d, 0x6f, 0x75, 0x6c, 0x64, 0x32, 0x15, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x75, 0x6c, 0x64, 0x52, 0x15, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f,
	0x75, 0x6c, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0e, 0x62,
	0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0e, 0x62, 0x6b, 0x5f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x09, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97,
	0xe5, 0x90, 0x8d, 0x52, 0x0e, 0x62, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x32, 0x06, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xb1, 0x03, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x47, 0x92, 0x41, 0x44, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x3a, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe4, 0xb8, 0x8e, 0xe5, 0x90, 0xa6,
	0xe3, 0x80, 0x82, 0x74, 0x72, 0x75, 0x65, 0x3a, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe6, 0x88,
	0x90, 0xe5, 0x8a, 0x9f, 0xef, 0xbc, 0x9b, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x54, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40,
	0x92, 0x41, 0x3d, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x35, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0xe3, 0x80, 0x82, 0x20, 0x30, 0xe8, 0xa1, 0xa8, 0xe7,
	0xa4, 0xba, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0xef, 0xbc, 0x8c, 0x3e, 0x30, 0xe8, 0xa1,
	0xa8, 0xe7, 0xa4, 0xba, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x21, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0xa4, 0xb1,
	0xe8, 0xb4, 0xa5, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x32, 0x0b, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe9, 0x93, 0xbe, 0x69,
	0x64, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x5c, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x63, 0x73,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x15, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xba, 0x08, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x36, 0x0a, 0x09, 0x62, 0x6b, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x62, 0x6b, 0x5f, 0x62, 0x69, 0x7a, 0x5f,
	0x69, 0x64, 0x32, 0x08, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x69, 0x64, 0x52, 0x09, 0x62, 0x6b,
	0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x0c, 0x62, 0x6b, 0x5f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2a, 0x92,
	0x41, 0x27, 0x2a, 0x0c, 0x62, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x32, 0x17, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a,
	0x84, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x49, 0x44, 0x52, 0x0c, 0x62, 0x6b, 0x5f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x0e, 0x62, 0x6b, 0x5f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0e, 0x62, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0x09, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe5, 0x90, 0x8d, 0x52,
	0x0e, 0x62, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x49, 0x0a, 0x0e, 0x62, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x0e, 0x62, 0x6b,
	0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe6, 0xa8,
	0xa1, 0xe5, 0x9d, 0x97, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0e, 0x62, 0x6b, 0x5f, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x62, 0x6b,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x0c, 0x62, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x32, 0x0e, 0xe7, 0x88, 0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0x9a,
	0x84, 0x49, 0x44, 0x52, 0x0c, 0x62, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x12, 0x36, 0x0a, 0x09, 0x62, 0x6b, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x62, 0x6b, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x69, 0x64, 0x52, 0x09,
	0x62, 0x6b, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x13, 0x62, 0x6b, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x13, 0x62, 0x6b, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x32, 0x0f, 0xe5, 0xbc, 0x80, 0xe5, 0x8f, 0x91, 0xe5, 0x95, 0x86, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f,
	0xb7, 0x52, 0x13, 0x62, 0x6b, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b,
	0x2a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x32, 0x12, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe6,
	0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x6d, 0x0a, 0x12, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x3d, 0x92, 0x41, 0x3a, 0x2a, 0x12, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x32, 0x24, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe5, 0xb1, 0x9e,
	0xe6, 0x80, 0xa7, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x52,
	0x12, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x5a, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x42, 0x28, 0x92, 0x41,
	0x25, 0x2a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x32, 0x0e, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x88,
	0x86, 0xe7, 0xb1, 0xbb, 0x49, 0x44, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x13, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x13, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x32, 0x0e, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88,
	0x49, 0x44, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x32, 0x0e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0xa8,
	0xa1, 0xe6, 0x9d, 0xbf, 0x49, 0x44, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4b,
	0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a,
	0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19,
	0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd,
	0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x3a, 0x4a, 0x92, 0x41, 0x47, 0x0a, 0x45, 0x2a, 0x1c, 0x47, 0x65, 0x74,
	0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69,
	0x6a, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x19, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe5, 0xa4, 0xaa, 0xe6, 0x9e, 0x81, 0x4e, 0x53, 0x20, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x22, 0xf1, 0x03, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9,
	0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x55, 0x0a, 0x11, 0x67, 0x70, 0x75, 0x50, 0x70, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a,
	0x11, 0x67, 0x70, 0x75, 0x50, 0x70, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x32, 0x0f, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0x67, 0x70, 0x75, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x52, 0x11, 0x67, 0x70, 0x75, 0x50, 0x70, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x42, 0x21, 0x92, 0x41, 0x1e,
	0x2a, 0x0d, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x32,
	0x0d, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x0d,
	0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x33, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x5a, 0x92, 0x41, 0x57, 0x0a, 0x55, 0x2a,
	0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x17, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0xa4, 0xaa, 0xe6, 0x9e, 0x81, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x53,
	0x70, 0x61, 0x63, 0x65, 0xd2, 0x01, 0x0d, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54,
	0x61, 0x69, 0x6a, 0x69, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xbb, 0x93,
	0xe6, 0x9e, 0x9c, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68,
	0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x54, 0x61, 0x69, 0x6a, 0x69, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0xe5, 0x93, 0x8d,
	0xe5, 0xba, 0x94, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x47, 0x92, 0x41, 0x44, 0x0a, 0x42,
	0x2a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x3a, 0x4f,
	0x92, 0x41, 0x4c, 0x0a, 0x4a, 0x2a, 0x17, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x23,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xa4, 0xaa, 0xe6, 0x9e, 0x81, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x71, 0x75, 0x6f, 0x74, 0x61, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22,
	0xb2, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x60, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1e, 0x92, 0x41, 0x1b,
	0x2a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x78, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x34, 0x92, 0x41, 0x31, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x29, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe5, 0xa4, 0xaa, 0xe6, 0x9e, 0x81, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7,
	0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x71, 0x75, 0x6f, 0x74, 0x61, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x36, 0x92, 0x41,
	0x33, 0x0a, 0x31, 0x2a, 0x1c, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x11, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x71, 0x75, 0x6f, 0x74, 0x61, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xc9, 0x05, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0x92, 0x41, 0x0c, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x2a, 0x02, 0x69, 0x64, 0x32, 0x02, 0x69, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0x63, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x32, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x64, 0x47, 0x70, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x2a, 0x08, 0x75, 0x73, 0x65, 0x64, 0x47, 0x70, 0x75, 0x73, 0x32, 0x08, 0x75, 0x73, 0x65, 0x64,
	0x47, 0x70, 0x75, 0x73, 0x52, 0x08, 0x75, 0x73, 0x65, 0x64, 0x47, 0x70, 0x75, 0x73, 0x12, 0x47,
	0x0a, 0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x70, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x0d, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x70, 0x75, 0x73, 0x32, 0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x47, 0x70, 0x75, 0x73, 0x52, 0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x47, 0x70, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x47, 0x70, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x73, 0x32, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x47, 0x70, 0x75, 0x73, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x73,
	0x12, 0x4f, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x64, 0x47, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x47, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x0f,
	0x75, 0x73, 0x65, 0x64, 0x47, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x47, 0x62, 0x32,
	0x0f, 0x75, 0x73, 0x65, 0x64, 0x47, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x47, 0x62,
	0x52, 0x0f, 0x75, 0x73, 0x65, 0x64, 0x47, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x47,
	0x62, 0x12, 0x53, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x47, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24,
	0x2a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x47, 0x62, 0x32, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x47, 0x62, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x47, 0x62, 0x12, 0x37, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x32, 0x09, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x52, 0x09, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12,
	0x5f, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x70, 0x75, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41,
	0x2a, 0x2a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x70, 0x75, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x32, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x47, 0x70, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x13, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x70, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0x82, 0x07, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x12, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9,
	0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x32, 0x0c, 0xe8, 0xb0, 0x83,
	0xe5, 0xba, 0xa6, 0xe7, 0xae, 0x97, 0xe6, 0xb3, 0x95, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x55, 0x0a, 0x11,
	0x67, 0x70, 0x75, 0x50, 0x70, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x11, 0x67, 0x70,
	0x75, 0x50, 0x70, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x32,
	0x0f, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0x67, 0x70, 0x75, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0x52, 0x11, 0x67, 0x70, 0x75, 0x50, 0x70, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x63, 0x73,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x0d, 0x73,
	0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x32, 0x0d, 0x73, 0x75,
	0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x0d, 0x73, 0x75, 0x62,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x58, 0x0a, 0x11, 0x69, 0x73,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x11, 0x69, 0x73, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x32, 0x12, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0x93, 0xe5, 0xb1, 0x9e, 0xe9, 0xa2, 0x9d, 0xe5, 0xba,
	0xa6, 0x52, 0x11, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x62, 0x6b, 0x42, 0x69, 0x7a, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x07, 0x62, 0x6b, 0x42, 0x69,
	0x7a, 0x49, 0x64, 0x32, 0x1b, 0xe8, 0xae, 0xa1, 0xe8, 0xb4, 0xb9, 0xe5, 0x85, 0xb3, 0xe8, 0x81,
	0x94, 0xe7, 0x9a, 0x84, 0x62, 0x6b, 0x63, 0x63, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x69, 0x64,
	0x52, 0x07, 0x62, 0x6b, 0x42, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0a, 0x62, 0x6b, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92,
	0x41, 0x2f, 0x2a, 0x0a, 0x62, 0x6b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x32, 0x21,
	0xe8, 0xae, 0xa1, 0xe8, 0xb4, 0xb9, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0x62,
	0x6b, 0x63, 0x63, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x69,
	0x64, 0x52, 0x0a, 0x62, 0x6b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x2a,
	0x03, 0x74, 0x61, 0x67, 0x32, 0x03, 0x74, 0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x31,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32,
	0x06, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x81, 0x01, 0x92, 0x41, 0x7e, 0x0a, 0x7c, 0x2a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69,
	0x6a, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0xe5, 0xa4, 0xaa, 0xe6, 0x9e, 0x81, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0xd2, 0x01, 0x07, 0x62, 0x6b, 0x42, 0x69, 0x7a, 0x49, 0x64, 0xd2, 0x01, 0x0a,
	0x62, 0x6b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0xd2, 0x01, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0xd2, 0x01, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0xaa, 0x04, 0x0a, 0x16, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69,
	0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0x92, 0x41, 0x0c, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x2e, 0x53, 0x75, 0x62,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0e, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x0e, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x2e,
	0x53, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x11, 0x73, 0x75, 0x62,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x32, 0x11,
	0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x11, 0x73, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x75, 0x62,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16,
	0x53, 0x75, 0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xbe, 0x02, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x69,
	0x6a, 0x69, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x70, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72,
	0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61,
	0x69, 0x6a, 0x69, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x34,
	0x92, 0x41, 0x31, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x29, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe5, 0xa4, 0xaa, 0xe6, 0x9e, 0x81, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0x71, 0x75, 0x6f, 0x74, 0x61, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x93,
	0x8d, 0xe5, 0xba, 0x94, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x47, 0x92, 0x41, 0x44, 0x0a,
	0x42, 0x2a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x12, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x60, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x63, 0x73, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x70, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x63, 0x73,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x34, 0x92, 0x41, 0x31, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x29, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xa4, 0xaa, 0xe6, 0x9e, 0x81, 0xe5, 0x91, 0xbd, 0xe5, 0x90,
	0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x71, 0x75, 0x6f, 0x74, 0x61, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x2d,
	0x92, 0x41, 0x2a, 0x0a, 0x28, 0x2a, 0x12, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x12, 0x54, 0x61, 0x69, 0x6a, 0x69,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa2, 0x02,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46,
	0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x60, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x5a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x4b, 0x75, 0x62, 0x65,
	0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x13, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x66,
	0x67, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x43, 0x92,
	0x41, 0x40, 0x0a, 0x3e, 0x2a, 0x1d, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x1d, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x14, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x27, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x32, 0x05, 0x63, 0x61,
	0x75, 0x73, 0x65, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x22, 0x60, 0x0a, 0x10, 0x54, 0x61,
	0x69, 0x6a, 0x69, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x2a,
	0x02, 0x69, 0x64, 0x32, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x6b,
	0x75, 0x62, 0x65, 0x43, 0x66, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41,
	0x12, 0x2a, 0x07, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x66, 0x67, 0x32, 0x07, 0x6b, 0x75, 0x62, 0x65,
	0x43, 0x66, 0x67, 0x52, 0x07, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x66, 0x67, 0x22, 0x64, 0x0a, 0x10,
	0x54, 0x61, 0x69, 0x6a, 0x69, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x66, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41,
	0x08, 0x2a, 0x02, 0x69, 0x64, 0x32, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a,
	0x08, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x66, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x66, 0x67, 0x32, 0x08,
	0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x66, 0x67, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63,
	0x66, 0x67, 0x22, 0xb3, 0x03, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x74, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x32, 0x09, 0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe8, 0x80, 0x85, 0x52, 0x06, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x32, 0x1a, 0xe6, 0x8e, 0xa5, 0xe6, 0x94, 0xb6, 0xe8, 0x80,
	0x85, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87,
	0x49, 0x44, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x0f,
	0x2a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x32, 0x06, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x0c, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0xe5, 0x86, 0x85,
	0xe5, 0xae, 0xb9, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6d, 0x0a, 0x16,
	0x69, 0x73, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x35, 0x92, 0x41,
	0x32, 0x2a, 0x16, 0x69, 0x73, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x32, 0x18, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe7, 0xa6, 0xbb, 0xe8, 0x81, 0x8c, 0xe5, 0x91, 0x98,
	0xe5, 0xb7, 0xa5, 0x52, 0x16, 0x69, 0x73, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x3a, 0x5b, 0x92, 0x41, 0x58,
	0x0a, 0x56, 0x2a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x74, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x1e, 0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a,
	0xe5, 0xbe, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0xd2, 0x01, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0xd2, 0x01, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0xd2, 0x01, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0xd2, 0x01,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x74, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x09, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe7, 0xa0, 0x81,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x0c, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xfb, 0x09, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x32, 0x2a, 0x08, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x77, 0x61, 0x79, 0x32, 0x26, 0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe6, 0x96, 0xb9, 0xe5,
	0xbc, 0x8f, 0xef, 0xbc, 0x8c, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0x27, 0x74, 0x6f, 0x66, 0x34,
	0x27, 0xe3, 0x80, 0x81, 0x27, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x27, 0x52, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x77, 0x61, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x32, 0x0f, 0xe9, 0x82, 0xae, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0x91, 0xe9, 0x80,
	0x81, 0xe8, 0x80, 0x85, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0x92, 0x41, 0x1b, 0x2a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x32, 0x0f, 0xe5,
	0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe8, 0x80, 0x85, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a,
	0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x32, 0x0f, 0xe9, 0x82, 0xae, 0xe4, 0xbb,
	0xb6, 0xe6, 0x8e, 0xa5, 0xe6, 0x94, 0xb6, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x32,
	0x0c, 0xe9, 0x82, 0xae, 0xe4, 0xbb, 0xb6, 0xe4, 0xb8, 0xbb, 0xe9, 0xa2, 0x98, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x32, 0x0c, 0xe9, 0x82, 0xae, 0xe4, 0xbb, 0xb6, 0xe5, 0x86, 0x85, 0xe5, 0xae,
	0xb9, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x64, 0x0a, 0x11, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x11, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x32, 0x1e, 0xe9,
	0x82, 0xae, 0xe4, 0xbb, 0xb6, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x11, 0x69,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34,
	0x12, 0x22, 0x0a, 0x02, 0x63, 0x63, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41,
	0x0f, 0x2a, 0x02, 0x63, 0x63, 0x32, 0x09, 0xe6, 0x8a, 0x84, 0xe9, 0x80, 0x81, 0xe4, 0xba, 0xba,
	0x52, 0x02, 0x63, 0x63, 0x12, 0x25, 0x0a, 0x03, 0x62, 0x63, 0x63, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x03, 0x62, 0x63, 0x63, 0x32, 0x09, 0xe6, 0x9a, 0x97,
	0xe9, 0x80, 0x81, 0xe4, 0xba, 0xba, 0x52, 0x03, 0x62, 0x63, 0x63, 0x12, 0x57, 0x0a, 0x0b, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x35, 0x92, 0x41, 0x32, 0x2a, 0x0b, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x32, 0x23, 0xe9, 0x82, 0xae, 0xe4, 0xbb, 0xb6, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f,
	0xef, 0xbc, 0x8c, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0x27, 0x48, 0x74, 0x6d, 0x6c, 0x27, 0x2c,
	0x20, 0x27, 0x54, 0x65, 0x78, 0x74, 0x27, 0x52, 0x0b, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0a, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x12, 0xe5, 0x8f, 0x91, 0xe9, 0x80,
	0x81, 0xe9, 0x82, 0xae, 0xe4, 0xbb, 0xb6, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0a, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15,
	0x2a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x32, 0x09, 0xe4, 0xbc, 0x98, 0xe5,
	0x85, 0x88, 0xe7, 0xba, 0xa7, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x3d, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x32, 0x12, 0xe4, 0xbc, 0x9a, 0xe8, 0xae, 0xae, 0xe4, 0xb8, 0xbe, 0xe5, 0x8a, 0x9e, 0xe5, 0x9c,
	0xb0, 0xe7, 0x82, 0xb9, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x09, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x09, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65,
	0x72, 0x32, 0x0f, 0xe7, 0xba, 0xa6, 0xe4, 0xbc, 0x9a, 0xe7, 0xbb, 0x84, 0xe7, 0xbb, 0x87, 0xe8,
	0x80, 0x85, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x43, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x32, 0x12, 0xe7, 0xba, 0xa6, 0xe4, 0xbc, 0x9a, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x32, 0x12, 0xe7, 0xba, 0xa6, 0xe4, 0xbc, 0x9a, 0xe7, 0xbb, 0x93, 0xe6, 0x9d,
	0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x66, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72,
	0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x61,
	0x69, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x1e, 0x92, 0x41,
	0x1b, 0x2a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x0c,
	0xe9, 0x82, 0xae, 0xe4, 0xbb, 0xb6, 0xe9, 0x99, 0x84, 0xe4, 0xbb, 0xb6, 0x52, 0x0b, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x0c, 0x6d, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x30, 0x92, 0x41, 0x2d, 0x2a, 0x0c, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x32, 0x1d, 0x53, 0x4d, 0x54, 0x50, 0x20, 0x4d, 0x49, 0x4d, 0x45, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0xe7, 0x9a, 0x84, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x3a,
	0x3c, 0x92, 0x41, 0x39, 0x0a, 0x37, 0x2a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x12, 0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe9,
	0x82, 0xae, 0xe4, 0xbb, 0xb6, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0xd2, 0x01, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xca, 0x02,
	0x0a, 0x0e, 0x4d, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x32, 0x09, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe5, 0x90, 0x8d, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x32, 0x1b, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe5, 0x86, 0x85,
	0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x8c, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0xe7, 0xbc, 0x96, 0xe7,
	0xa0, 0x81, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92,
	0x41, 0x28, 0x2a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x32,
	0x19, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x44,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e,
	0x2a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x32, 0x10, 0xe6, 0x96,
	0x87, 0xe4, 0xbb, 0xb6, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x49, 0x44, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x10, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92,
	0x41, 0x11, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x09, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x0c, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xea, 0x05, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x69, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x08, 0x69, 0x6d,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x19, 0x49, 0x4d, 0xe7, 0x9a, 0x84, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0xef, 0xbc, 0x8c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0xe4, 0xbc, 0xa0, 0xe9, 0x80,
	0x92, 0x52, 0x08, 0x69, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x22,
	0x2a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x32, 0x18, 0x49, 0x4d, 0x20, 0x61, 0x70, 0x70,
	0x20, 0x69, 0x64, 0xef, 0xbc, 0x8c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0xe4, 0xbc, 0xa0, 0xe9,
	0x80, 0x92, 0x52, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x61, 0x70,
	0x70, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d,
	0x92, 0x41, 0x2a, 0x2a, 0x0a, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x32,
	0x1c, 0x49, 0x4d, 0x20, 0x61, 0x70, 0x70, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0xef, 0xbc,
	0x8c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x92, 0x52, 0x0a, 0x61,
	0x70, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x0a, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92,
	0x41, 0x2a, 0x2a, 0x0a, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x1c,
	0xe6, 0x9c, 0xba, 0xe5, 0x99, 0xa8, 0xe4, 0xba, 0xba, 0x63, 0x6f, 0x64, 0x65, 0xef, 0xbc, 0x8c,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x92, 0x52, 0x0a, 0x72, 0x6f,
	0x62, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a,
	0x08, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x15, 0xe5, 0xba, 0x94, 0xe7, 0x94,
	0xa8, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0x62, 0x6f, 0x64, 0x79, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x92,
	0x52, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x59, 0x0a, 0x0f, 0x61, 0x70,
	0x70, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x32, 0x19, 0xe5, 0xae, 0x89, 0xe5, 0x85,
	0xa8, 0xe7, 0xa7, 0x98, 0xe9, 0x92, 0xa5, 0xef, 0xbc, 0x8c, 0x62, 0x6f, 0x64, 0x79, 0xe4, 0xbc,
	0xa0, 0xe9, 0x80, 0x92, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x02, 0x69, 0x6d, 0x32, 0x0e, 0x49, 0x4d, 0xe5, 0xb7,
	0xa5, 0xe5, 0x85, 0xb7, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x02, 0x69, 0x6d, 0x12, 0x37,
	0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x32,
	0x0c, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x08, 0x6d,
	0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x63, 0x73,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a,
	0x09, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x0c, 0xe6, 0xb6, 0x88, 0xe6,
	0x81, 0xaf, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x5a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x08, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x32, 0x0f, 0xe6, 0x8e, 0xa5, 0xe6, 0x94, 0xb6, 0xe8, 0x80, 0x85, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x22,
	0x24, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x0f, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11,
	0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x09, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x0c, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xfa, 0x1e, 0x0a, 0x14, 0x42, 0x63, 0x73, 0x54, 0x68,
	0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xf2, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x12, 0x34, 0x2e, 0x62, 0x63,
	0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d,
	0x22, 0x28, 0x2f, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x69, 0x6a, 0x69,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x34,
	0x12, 0x18, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xa4, 0xaa, 0xe6, 0x9e, 0x81, 0xe5, 0x91,
	0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x1a, 0x18, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe5, 0xa4, 0xaa, 0xe6, 0x9e, 0x81, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9,
	0xba, 0xe9, 0x97, 0xb4, 0x12, 0x8c, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x12, 0x31, 0x2e,
	0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f,
	0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x69, 0x6a, 0x69, 0x2f, 0x67, 0x65,
	0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x92, 0x41, 0x4a, 0x12, 0x23, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe5, 0xa4, 0xaa, 0xe6, 0x9e, 0x81, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0x71, 0x75, 0x6f, 0x74, 0x61, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x23,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xa4, 0xaa, 0xe6, 0x9e, 0x81, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x71, 0x75, 0x6f, 0x74, 0x61, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x12, 0xea, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x12,
	0x34, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x54,
	0x61, 0x69, 0x6a, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2d, 0x1a, 0x28, 0x2f, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x61, 0x69, 0x6a, 0x69, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x01,
	0x2a, 0x92, 0x41, 0x2c, 0x12, 0x14, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0xa4, 0xaa, 0xe6,
	0x9e, 0x81, 0x4e, 0x53, 0xe9, 0xa2, 0x9d, 0xe5, 0xba, 0xa6, 0x1a, 0x14, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe5, 0xa4, 0xaa, 0xe6, 0x9e, 0x81, 0x4e, 0x53, 0xe9, 0xa2, 0x9d, 0xe5, 0xba, 0xa6,
	0x12, 0xf8, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x12, 0x32, 0x2e, 0x62, 0x63, 0x73,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46,
	0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x76, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x62, 0x63,
	0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x69, 0x6a, 0x69, 0x2f, 0x6b, 0x75, 0x62, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x7d, 0x92, 0x41, 0x36, 0x12, 0x19, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xa4, 0xaa,
	0xe6, 0x9e, 0x81, 0x4e, 0x53, 0x20, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x19, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xa4, 0xaa, 0xe6, 0x9e, 0x81, 0x4e, 0x53,
	0x20, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xbb, 0x01, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x2e, 0x62,
	0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x62, 0x63,
	0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x7d,
	0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x1c, 0x12, 0x0c, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x1a, 0x0c, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d, 0x97, 0x12, 0xff, 0x01, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72,
	0x54, 0x61, 0x69, 0x6a, 0x69, 0x56, 0x33, 0x12, 0x36, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f,
	0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x56, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x69, 0x6a, 0x69, 0x56, 0x33,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30,
	0x22, 0x2b, 0x2f, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x69, 0x6a, 0x69,
	0x2f, 0x76, 0x33, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x3a, 0x01, 0x2a,
	0x92, 0x41, 0x38, 0x12, 0x1a, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xa4, 0xaa, 0xe6, 0x9e,
	0x81, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x76, 0x33, 0x1a,
	0x1a, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xa4, 0xaa, 0xe6, 0x9e, 0x81, 0xe5, 0x91, 0xbd,
	0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x76, 0x33, 0x12, 0xe7, 0x01, 0x0a, 0x12,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6a, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2f, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x6a, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x6a, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x22, 0x30, 0x2f,
	0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x69, 0x6a, 0x69, 0x2f, 0x6b, 0x75,
	0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x30, 0x12, 0x16, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xa4, 0xaa,
	0xe6, 0x9e, 0x81, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x16, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xa4, 0xaa, 0xe6, 0x9e, 0x81, 0x6b, 0x75, 0x62, 0x65, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xe7, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6a, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x2e, 0x62,
	0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6a, 0x4b, 0x75, 0x62, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6a, 0x4b, 0x75, 0x62,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x1a, 0x30, 0x2f, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x61, 0x69, 0x6a, 0x69, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x30, 0x12,
	0x16, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0xa4, 0xaa, 0xe6, 0x9e, 0x81, 0x6b, 0x75, 0x62,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x16, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5,
	0xa4, 0xaa, 0xe6, 0x9e, 0x81, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xf6, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x61, 0x6e, 0x6c, 0x69, 0x12, 0x35, 0x2e, 0x62,
	0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x61, 0x6e, 0x6c, 0x69, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x61,
	0x6e, 0x6c, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75,
	0x61, 0x6e, 0x6c, 0x69, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x3a, 0x01,
	0x2a, 0x92, 0x41, 0x34, 0x12, 0x18, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe7, 0xae, 0x97, 0xe5,
	0x8a, 0x9b, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x1a, 0x18,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe7, 0xae, 0x97, 0xe5, 0x8a, 0x9b, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x12, 0xf6, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x53,
	0x75, 0x61, 0x6e, 0x6c, 0x69, 0x12, 0x35, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x53,
	0x75, 0x61, 0x6e, 0x6c, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x62,
	0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x61, 0x6e, 0x6c, 0x69, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x1a, 0x29, 0x2f, 0x62,
	0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x61, 0x6e, 0x6c, 0x69, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x34, 0x12, 0x18, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe7, 0xae, 0x97, 0xe5, 0x8a, 0x9b, 0xe5, 0x91, 0xbd, 0xe5, 0x90,
	0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x1a, 0x18, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe7,
	0xae, 0x97, 0xe5, 0x8a, 0x9b, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97,
	0xb4, 0x12, 0x87, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x61, 0x6e, 0x6c, 0x69, 0x12, 0x33, 0x2e, 0x62,
	0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x61, 0x6e, 0x6c, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x61, 0x6e, 0x6c, 0x69, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42,
	0x12, 0x40, 0x2f, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x61, 0x6e, 0x6c,
	0x69, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x7d, 0x92, 0x41, 0x36, 0x12, 0x19, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xae, 0x97,
	0xe5, 0x8a, 0x9b, 0x4e, 0x53, 0x20, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x19, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xae, 0x97, 0xe5, 0x8a, 0x9b, 0x4e, 0x53,
	0x20, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xea, 0x01, 0x0a, 0x14,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x31, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x01,
	0x2a, 0x92, 0x41, 0x34, 0x12, 0x18, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe5, 0xaf, 0xbc, 0xe5,
	0x85, 0xa5, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x1a, 0x18,
	0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x12, 0xce, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2a, 0x2e, 0x62, 0x63, 0x73,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72,
	0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x62, 0x63,
	0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x34, 0x12, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x91, 0xbd,
	0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a,
	0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xdc, 0x01, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x62, 0x63, 0x73,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x75, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x62, 0x63, 0x73, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x7b, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x92, 0x41, 0x28,
	0x12, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9,
	0xba, 0xe9, 0x97, 0xb4, 0x1a, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x12, 0xc3, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x74, 0x78, 0x12, 0x24, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x74, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x63, 0x73,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x74, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x62, 0x63, 0x73, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x72, 0x74, 0x78, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x34, 0x12, 0x18, 0xe5, 0x8f, 0x91, 0xe9,
	0x80, 0x81, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe5, 0xbe, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0xb6,
	0x88, 0xe6, 0x81, 0xaf, 0x1a, 0x18, 0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe4, 0xbc, 0x81, 0xe4,
	0xb8, 0x9a, 0xe5, 0xbe, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x12, 0xaf,
	0x01, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x2e, 0x62, 0x63,
	0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x61, 0x69, 0x6c, 0x3a, 0x01,
	0x2a, 0x92, 0x41, 0x1c, 0x12, 0x0c, 0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe9, 0x82, 0xae, 0xe4,
	0xbb, 0xb6, 0x1a, 0x0c, 0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe9, 0x82, 0xae, 0xe4, 0xbb, 0xb6,
	0x12, 0xd0, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x2e, 0x62,
	0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x30, 0x22, 0x2b, 0x2f, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x73, 0x67, 0x76, 0x33, 0x3a, 0x01,
	0x2a, 0x92, 0x41, 0x3f, 0x12, 0x10, 0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81, 0x49, 0x4d, 0xe6, 0xb6,
	0x88, 0xe6, 0x81, 0xaf, 0x76, 0x33, 0x1a, 0x2b, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x62, 0x6b,
	0x63, 0x68, 0x61, 0x74, 0xe5, 0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe5, 0xa4, 0x9a, 0x49, 0x4d, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x88, 0x76, 0x33,
	0xef, 0xbc, 0x89, 0x42, 0x77, 0x5a, 0x1c, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x62,
	0x63, 0x73, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x92, 0x41, 0x56, 0x12, 0x2d, 0x0a, 0x24, 0x62, 0x63, 0x73, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x20, 0x44, 0x6f, 0x63, 0x32, 0x05,
	0x30, 0x2e, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescOnce sync.Once
	file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescData = file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDesc
)

func file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescGZIP() []byte {
	file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescOnce.Do(func() {
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescData)
	})
	return file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDescData
}

var file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_goTypes = []interface{}{
	(*UpdateTjKubeconfigRequest)(nil),             // 0: bcsthirdpartyservice.UpdateTjKubeconfigRequest
	(*UpdateTjKubeconfigResponse)(nil),            // 1: bcsthirdpartyservice.UpdateTjKubeconfigResponse
	(*ImportTjKubeconfigRequest)(nil),             // 2: bcsthirdpartyservice.ImportTjKubeconfigRequest
	(*ImportTjKubeconfigResponse)(nil),            // 3: bcsthirdpartyservice.ImportTjKubeconfigResponse
	(*UpdateNamespaceForSuanliRequest)(nil),       // 4: bcsthirdpartyservice.UpdateNamespaceForSuanliRequest
	(*UpdateNamespaceForSuanliResponse)(nil),      // 5: bcsthirdpartyservice.UpdateNamespaceForSuanliResponse
	(*GetNamespaceRequest)(nil),                   // 6: bcsthirdpartyservice.GetNamespaceRequest
	(*GetNamespaceResponse)(nil),                  // 7: bcsthirdpartyservice.GetNamespaceResponse
	(*ListNamespaceRequest)(nil),                  // 8: bcsthirdpartyservice.ListNamespaceRequest
	(*ListNamespaceResponse)(nil),                 // 9: bcsthirdpartyservice.ListNamespaceResponse
	(*ListNamespaceResponseData)(nil),             // 10: bcsthirdpartyservice.ListNamespaceResponseData
	(*Namespace)(nil),                             // 11: bcsthirdpartyservice.Namespace
	(*KubeConfig)(nil),                            // 12: bcsthirdpartyservice.KubeConfig
	(*SubQuotaInfos)(nil),                         // 13: bcsthirdpartyservice.SubQuotaInfos
	(*BatchImportNamespaceRequest)(nil),           // 14: bcsthirdpartyservice.BatchImportNamespaceRequest
	(*BatchImportNamespaceData)(nil),              // 15: bcsthirdpartyservice.BatchImportNamespaceData
	(*BatchImportNamespaceResponse)(nil),          // 16: bcsthirdpartyservice.BatchImportNamespaceResponse
	(*GetKubeConfigForSuanliRequest)(nil),         // 17: bcsthirdpartyservice.GetKubeConfigForSuanliRequest
	(*GetKubeConfigForSuanliResponse)(nil),        // 18: bcsthirdpartyservice.GetKubeConfigForSuanliResponse
	(*CmdbBusinessLevel3DetailInfoData)(nil),      // 19: bcsthirdpartyservice.CmdbBusinessLevel3DetailInfoData
	(*BusinessLevel3DetailInfo)(nil),              // 20: bcsthirdpartyservice.BusinessLevel3DetailInfo
	(*CreateNamespaceForSuanliRequest)(nil),       // 21: bcsthirdpartyservice.CreateNamespaceForSuanliRequest
	(*NamespaceQuotaForSuanli)(nil),               // 22: bcsthirdpartyservice.NamespaceQuotaForSuanli
	(*CreateNamespaceForSuanliResponse)(nil),      // 23: bcsthirdpartyservice.CreateNamespaceForSuanliResponse
	(*CreateNamespaceForTaijiV3Request)(nil),      // 24: bcsthirdpartyservice.CreateNamespaceForTaijiV3Request
	(*CreateNamespaceForTaijiV3Response)(nil),     // 25: bcsthirdpartyservice.CreateNamespaceForTaijiV3Response
	(*CreateNamespaceForTaijiV3Data)(nil),         // 26: bcsthirdpartyservice.CreateNamespaceForTaijiV3Data
	(*CreateModuleRequest)(nil),                   // 27: bcsthirdpartyservice.CreateModuleRequest
	(*CreateModuleResponse)(nil),                  // 28: bcsthirdpartyservice.CreateModuleResponse
	(*CreateModuleData)(nil),                      // 29: bcsthirdpartyservice.CreateModuleData
	(*GetKubeConfigForTaijiRequest)(nil),          // 30: bcsthirdpartyservice.GetKubeConfigForTaijiRequest
	(*UpdateQuotaInfoForTaijiRequest)(nil),        // 31: bcsthirdpartyservice.UpdateQuotaInfoForTaijiRequest
	(*UpdateQuotaInfoForTaijiResponse)(nil),       // 32: bcsthirdpartyservice.UpdateQuotaInfoForTaijiResponse
	(*GetQuotaInfoForTaijiRequest)(nil),           // 33: bcsthirdpartyservice.GetQuotaInfoForTaijiRequest
	(*GetQuotaInfoForTaijiResponse)(nil),          // 34: bcsthirdpartyservice.GetQuotaInfoForTaijiResponse
	(*GetQuotaInfoForTaijiData)(nil),              // 35: bcsthirdpartyservice.GetQuotaInfoForTaijiData
	(*CreateNamespaceForTaijiRequest)(nil),        // 36: bcsthirdpartyservice.CreateNamespaceForTaijiRequest
	(*NamespaceQuotaForTaiji)(nil),                // 37: bcsthirdpartyservice.NamespaceQuotaForTaiji
	(*CreateNamespaceForTaijiResponse)(nil),       // 38: bcsthirdpartyservice.CreateNamespaceForTaijiResponse
	(*TaijiDefaultResult)(nil),                    // 39: bcsthirdpartyservice.TaijiDefaultResult
	(*GetKubeConfigForTaijiResponse)(nil),         // 40: bcsthirdpartyservice.GetKubeConfigForTaijiResponse
	(*TaijiDefaultResponse)(nil),                  // 41: bcsthirdpartyservice.TaijiDefaultResponse
	(*TaijiDefaultData)(nil),                      // 42: bcsthirdpartyservice.TaijiDefaultData
	(*TaijiKubeCfgData)(nil),                      // 43: bcsthirdpartyservice.TaijiKubeCfgData
	(*SendRtxRequest)(nil),                        // 44: bcsthirdpartyservice.SendRtxRequest
	(*SendRtxResponse)(nil),                       // 45: bcsthirdpartyservice.SendRtxResponse
	(*SendMailRequest)(nil),                       // 46: bcsthirdpartyservice.SendMailRequest
	(*MailAttachment)(nil),                        // 47: bcsthirdpartyservice.MailAttachment
	(*SendMailResponse)(nil),                      // 48: bcsthirdpartyservice.SendMailResponse
	(*SendMsgRequest)(nil),                        // 49: bcsthirdpartyservice.SendMsgRequest
	(*MsgParam)(nil),                              // 50: bcsthirdpartyservice.MsgParam
	(*Receiver)(nil),                              // 51: bcsthirdpartyservice.Receiver
	(*SendMsgResponse)(nil),                       // 52: bcsthirdpartyservice.SendMsgResponse
	nil,                                           // 53: bcsthirdpartyservice.Namespace.LabelsEntry
	nil,                                           // 54: bcsthirdpartyservice.Namespace.AnnotationsEntry
	nil,                                           // 55: bcsthirdpartyservice.SubQuotaInfos.SubQuotaLabelsEntry
	nil,                                           // 56: bcsthirdpartyservice.SubQuotaInfos.SubQuotaResourcesEntry
	nil,                                           // 57: bcsthirdpartyservice.BatchImportNamespaceData.LabelsEntry
	nil,                                           // 58: bcsthirdpartyservice.BatchImportNamespaceData.AnnotationsEntry
	(*GetKubeConfigForSuanliResponseKubeCfg)(nil), // 59: bcsthirdpartyservice.GetKubeConfigForSuanliResponse.kubeCfg
	nil,                    // 60: bcsthirdpartyservice.NamespaceQuotaForSuanli.SubQuotaLabelsEntry
	nil,                    // 61: bcsthirdpartyservice.NamespaceQuotaForSuanli.SubQuotaResourcesEntry
	nil,                    // 62: bcsthirdpartyservice.NamespaceQuotaForTaiji.SubQuotaLabelsEntry
	nil,                    // 63: bcsthirdpartyservice.NamespaceQuotaForTaiji.SubQuotaResourcesEntry
	(*_struct.Struct)(nil), // 64: google.protobuf.Struct
}
var file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_depIdxs = []int32{
	22, // 0: bcsthirdpartyservice.UpdateNamespaceForSuanliRequest.subQuotaInfos:type_name -> bcsthirdpartyservice.NamespaceQuotaForSuanli
	11, // 1: bcsthirdpartyservice.GetNamespaceResponse.data:type_name -> bcsthirdpartyservice.Namespace
	10, // 2: bcsthirdpartyservice.ListNamespaceResponse.data:type_name -> bcsthirdpartyservice.ListNamespaceResponseData
	11, // 3: bcsthirdpartyservice.ListNamespaceResponseData.namespace:type_name -> bcsthirdpartyservice.Namespace
	12, // 4: bcsthirdpartyservice.Namespace.kubeConfig:type_name -> bcsthirdpartyservice.KubeConfig
	53, // 5: bcsthirdpartyservice.Namespace.labels:type_name -> bcsthirdpartyservice.Namespace.LabelsEntry
	54, // 6: bcsthirdpartyservice.Namespace.annotations:type_name -> bcsthirdpartyservice.Namespace.AnnotationsEntry
	13, // 7: bcsthirdpartyservice.Namespace.subQuotaInfos:type_name -> bcsthirdpartyservice.SubQuotaInfos
	55, // 8: bcsthirdpartyservice.SubQuotaInfos.sub_quota_labels:type_name -> bcsthirdpartyservice.SubQuotaInfos.SubQuotaLabelsEntry
	56, // 9: bcsthirdpartyservice.SubQuotaInfos.sub_quota_resources:type_name -> bcsthirdpartyservice.SubQuotaInfos.SubQuotaResourcesEntry
	15, // 10: bcsthirdpartyservice.BatchImportNamespaceRequest.namespaces:type_name -> bcsthirdpartyservice.BatchImportNamespaceData
	13, // 11: bcsthirdpartyservice.BatchImportNamespaceData.subQuotaInfos:type_name -> bcsthirdpartyservice.SubQuotaInfos
	57, // 12: bcsthirdpartyservice.BatchImportNamespaceData.labels:type_name -> bcsthirdpartyservice.BatchImportNamespaceData.LabelsEntry
	58, // 13: bcsthirdpartyservice.BatchImportNamespaceData.annotations:type_name -> bcsthirdpartyservice.BatchImportNamespaceData.AnnotationsEntry
	59, // 14: bcsthirdpartyservice.GetKubeConfigForSuanliResponse.data:type_name -> bcsthirdpartyservice.GetKubeConfigForSuanliResponse.kubeCfg
	20, // 15: bcsthirdpartyservice.CmdbBusinessLevel3DetailInfoData.list:type_name -> bcsthirdpartyservice.BusinessLevel3DetailInfo
	22, // 16: bcsthirdpartyservice.CreateNamespaceForSuanliRequest.subQuotaInfos:type_name -> bcsthirdpartyservice.NamespaceQuotaForSuanli
	60, // 17: bcsthirdpartyservice.NamespaceQuotaForSuanli.subQuotaLabels:type_name -> bcsthirdpartyservice.NamespaceQuotaForSuanli.SubQuotaLabelsEntry
	61, // 18: bcsthirdpartyservice.NamespaceQuotaForSuanli.subQuotaResources:type_name -> bcsthirdpartyservice.NamespaceQuotaForSuanli.SubQuotaResourcesEntry
	37, // 19: bcsthirdpartyservice.CreateNamespaceForTaijiV3Request.subQuotaInfos:type_name -> bcsthirdpartyservice.NamespaceQuotaForTaiji
	41, // 20: bcsthirdpartyservice.CreateNamespaceForTaijiV3Response.error:type_name -> bcsthirdpartyservice.TaijiDefaultResponse
	26, // 21: bcsthirdpartyservice.CreateNamespaceForTaijiV3Response.data:type_name -> bcsthirdpartyservice.CreateNamespaceForTaijiV3Data
	29, // 22: bcsthirdpartyservice.CreateModuleResponse.data:type_name -> bcsthirdpartyservice.CreateModuleData
	37, // 23: bcsthirdpartyservice.UpdateQuotaInfoForTaijiRequest.subQuotaInfos:type_name -> bcsthirdpartyservice.NamespaceQuotaForTaiji
	41, // 24: bcsthirdpartyservice.UpdateQuotaInfoForTaijiResponse.error:type_name -> bcsthirdpartyservice.TaijiDefaultResponse
	43, // 25: bcsthirdpartyservice.UpdateQuotaInfoForTaijiResponse.data:type_name -> bcsthirdpartyservice.TaijiKubeCfgData
	41, // 26: bcsthirdpartyservice.GetQuotaInfoForTaijiResponse.error:type_name -> bcsthirdpartyservice.TaijiDefaultResponse
	35, // 27: bcsthirdpartyservice.GetQuotaInfoForTaijiResponse.data:type_name -> bcsthirdpartyservice.GetQuotaInfoForTaijiData
	37, // 28: bcsthirdpartyservice.CreateNamespaceForTaijiRequest.subQuotaInfos:type_name -> bcsthirdpartyservice.NamespaceQuotaForTaiji
	62, // 29: bcsthirdpartyservice.NamespaceQuotaForTaiji.subQuotaLabels:type_name -> bcsthirdpartyservice.NamespaceQuotaForTaiji.SubQuotaLabelsEntry
	63, // 30: bcsthirdpartyservice.NamespaceQuotaForTaiji.subQuotaResources:type_name -> bcsthirdpartyservice.NamespaceQuotaForTaiji.SubQuotaResourcesEntry
	41, // 31: bcsthirdpartyservice.CreateNamespaceForTaijiResponse.error:type_name -> bcsthirdpartyservice.TaijiDefaultResponse
	42, // 32: bcsthirdpartyservice.CreateNamespaceForTaijiResponse.data:type_name -> bcsthirdpartyservice.TaijiDefaultData
	41, // 33: bcsthirdpartyservice.TaijiDefaultResult.error:type_name -> bcsthirdpartyservice.TaijiDefaultResponse
	42, // 34: bcsthirdpartyservice.TaijiDefaultResult.data:type_name -> bcsthirdpartyservice.TaijiDefaultData
	41, // 35: bcsthirdpartyservice.GetKubeConfigForTaijiResponse.error:type_name -> bcsthirdpartyservice.TaijiDefaultResponse
	43, // 36: bcsthirdpartyservice.GetKubeConfigForTaijiResponse.data:type_name -> bcsthirdpartyservice.TaijiKubeCfgData
	47, // 37: bcsthirdpartyservice.SendMailRequest.attachments:type_name -> bcsthirdpartyservice.MailAttachment
	50, // 38: bcsthirdpartyservice.SendMsgRequest.msg_param:type_name -> bcsthirdpartyservice.MsgParam
	51, // 39: bcsthirdpartyservice.SendMsgRequest.receiver:type_name -> bcsthirdpartyservice.Receiver
	64, // 40: bcsthirdpartyservice.SendMsgResponse.data:type_name -> google.protobuf.Struct
	36, // 41: bcsthirdpartyservice.BcsThirdpartyService.CreateNamespaceForTaiji:input_type -> bcsthirdpartyservice.CreateNamespaceForTaijiRequest
	33, // 42: bcsthirdpartyservice.BcsThirdpartyService.GetQuotaInfoForTaiji:input_type -> bcsthirdpartyservice.GetQuotaInfoForTaijiRequest
	31, // 43: bcsthirdpartyservice.BcsThirdpartyService.UpdateQuotaInfoForTaiji:input_type -> bcsthirdpartyservice.UpdateQuotaInfoForTaijiRequest
	30, // 44: bcsthirdpartyservice.BcsThirdpartyService.GetKubeConfigForTaiji:input_type -> bcsthirdpartyservice.GetKubeConfigForTaijiRequest
	27, // 45: bcsthirdpartyservice.BcsThirdpartyService.CreateModule:input_type -> bcsthirdpartyservice.CreateModuleRequest
	24, // 46: bcsthirdpartyservice.BcsThirdpartyService.CreateNamespaceForTaijiV3:input_type -> bcsthirdpartyservice.CreateNamespaceForTaijiV3Request
	2,  // 47: bcsthirdpartyservice.BcsThirdpartyService.ImportTjKubeconfig:input_type -> bcsthirdpartyservice.ImportTjKubeconfigRequest
	0,  // 48: bcsthirdpartyservice.BcsThirdpartyService.UpdateTjKubeconfig:input_type -> bcsthirdpartyservice.UpdateTjKubeconfigRequest
	21, // 49: bcsthirdpartyservice.BcsThirdpartyService.CreateNamespaceForSuanli:input_type -> bcsthirdpartyservice.CreateNamespaceForSuanliRequest
	4,  // 50: bcsthirdpartyservice.BcsThirdpartyService.UpdateNamespaceForSuanli:input_type -> bcsthirdpartyservice.UpdateNamespaceForSuanliRequest
	17, // 51: bcsthirdpartyservice.BcsThirdpartyService.GetKubeConfigForSuanli:input_type -> bcsthirdpartyservice.GetKubeConfigForSuanliRequest
	14, // 52: bcsthirdpartyservice.BcsThirdpartyService.BatchImportNamespace:input_type -> bcsthirdpartyservice.BatchImportNamespaceRequest
	8,  // 53: bcsthirdpartyservice.BcsThirdpartyService.ListNamespace:input_type -> bcsthirdpartyservice.ListNamespaceRequest
	6,  // 54: bcsthirdpartyservice.BcsThirdpartyService.GetNamespace:input_type -> bcsthirdpartyservice.GetNamespaceRequest
	44, // 55: bcsthirdpartyservice.BcsThirdpartyService.SendRtx:input_type -> bcsthirdpartyservice.SendRtxRequest
	46, // 56: bcsthirdpartyservice.BcsThirdpartyService.SendMail:input_type -> bcsthirdpartyservice.SendMailRequest
	49, // 57: bcsthirdpartyservice.BcsThirdpartyService.SendMsg:input_type -> bcsthirdpartyservice.SendMsgRequest
	38, // 58: bcsthirdpartyservice.BcsThirdpartyService.CreateNamespaceForTaiji:output_type -> bcsthirdpartyservice.CreateNamespaceForTaijiResponse
	34, // 59: bcsthirdpartyservice.BcsThirdpartyService.GetQuotaInfoForTaiji:output_type -> bcsthirdpartyservice.GetQuotaInfoForTaijiResponse
	32, // 60: bcsthirdpartyservice.BcsThirdpartyService.UpdateQuotaInfoForTaiji:output_type -> bcsthirdpartyservice.UpdateQuotaInfoForTaijiResponse
	40, // 61: bcsthirdpartyservice.BcsThirdpartyService.GetKubeConfigForTaiji:output_type -> bcsthirdpartyservice.GetKubeConfigForTaijiResponse
	28, // 62: bcsthirdpartyservice.BcsThirdpartyService.CreateModule:output_type -> bcsthirdpartyservice.CreateModuleResponse
	25, // 63: bcsthirdpartyservice.BcsThirdpartyService.CreateNamespaceForTaijiV3:output_type -> bcsthirdpartyservice.CreateNamespaceForTaijiV3Response
	3,  // 64: bcsthirdpartyservice.BcsThirdpartyService.ImportTjKubeconfig:output_type -> bcsthirdpartyservice.ImportTjKubeconfigResponse
	1,  // 65: bcsthirdpartyservice.BcsThirdpartyService.UpdateTjKubeconfig:output_type -> bcsthirdpartyservice.UpdateTjKubeconfigResponse
	23, // 66: bcsthirdpartyservice.BcsThirdpartyService.CreateNamespaceForSuanli:output_type -> bcsthirdpartyservice.CreateNamespaceForSuanliResponse
	5,  // 67: bcsthirdpartyservice.BcsThirdpartyService.UpdateNamespaceForSuanli:output_type -> bcsthirdpartyservice.UpdateNamespaceForSuanliResponse
	18, // 68: bcsthirdpartyservice.BcsThirdpartyService.GetKubeConfigForSuanli:output_type -> bcsthirdpartyservice.GetKubeConfigForSuanliResponse
	16, // 69: bcsthirdpartyservice.BcsThirdpartyService.BatchImportNamespace:output_type -> bcsthirdpartyservice.BatchImportNamespaceResponse
	9,  // 70: bcsthirdpartyservice.BcsThirdpartyService.ListNamespace:output_type -> bcsthirdpartyservice.ListNamespaceResponse
	7,  // 71: bcsthirdpartyservice.BcsThirdpartyService.GetNamespace:output_type -> bcsthirdpartyservice.GetNamespaceResponse
	45, // 72: bcsthirdpartyservice.BcsThirdpartyService.SendRtx:output_type -> bcsthirdpartyservice.SendRtxResponse
	48, // 73: bcsthirdpartyservice.BcsThirdpartyService.SendMail:output_type -> bcsthirdpartyservice.SendMailResponse
	52, // 74: bcsthirdpartyservice.BcsThirdpartyService.SendMsg:output_type -> bcsthirdpartyservice.SendMsgResponse
	58, // [58:75] is the sub-list for method output_type
	41, // [41:58] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_init() }
func file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_init() {
	if File_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTjKubeconfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTjKubeconfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportTjKubeconfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportTjKubeconfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNamespaceForSuanliRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNamespaceForSuanliResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespaceResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Namespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubQuotaInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchImportNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchImportNamespaceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchImportNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKubeConfigForSuanliRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKubeConfigForSuanliResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdbBusinessLevel3DetailInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessLevel3DetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNamespaceForSuanliRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceQuotaForSuanli); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNamespaceForSuanliResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNamespaceForTaijiV3Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNamespaceForTaijiV3Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNamespaceForTaijiV3Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateModuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateModuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateModuleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKubeConfigForTaijiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateQuotaInfoForTaijiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateQuotaInfoForTaijiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQuotaInfoForTaijiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQuotaInfoForTaijiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQuotaInfoForTaijiData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNamespaceForTaijiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceQuotaForTaiji); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNamespaceForTaijiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaijiDefaultResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKubeConfigForTaijiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaijiDefaultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaijiDefaultData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaijiKubeCfgData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRtxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRtxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Receiver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKubeConfigForSuanliResponseKubeCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes[24].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_goTypes,
		DependencyIndexes: file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_depIdxs,
		MessageInfos:      file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_msgTypes,
	}.Build()
	File_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto = out.File
	file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_rawDesc = nil
	file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_goTypes = nil
	file_pkg_bcsapi_thirdparty_service_bcs_thirdparty_service_proto_depIdxs = nil
}
