// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.5
// source: pkg/bcsapi/thirdparty-service/bcs-thirdparty-service.proto

package bcsthirdpartyservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BcsThirdpartyService_CreateNamespaceForTaiji_FullMethodName   = "/bcsthirdpartyservice.BcsThirdpartyService/CreateNamespaceForTaiji"
	BcsThirdpartyService_GetQuotaInfoForTaiji_FullMethodName      = "/bcsthirdpartyservice.BcsThirdpartyService/GetQuotaInfoForTaiji"
	BcsThirdpartyService_UpdateQuotaInfoForTaiji_FullMethodName   = "/bcsthirdpartyservice.BcsThirdpartyService/UpdateQuotaInfoForTaiji"
	BcsThirdpartyService_GetKubeConfigForTaiji_FullMethodName     = "/bcsthirdpartyservice.BcsThirdpartyService/GetKubeConfigForTaiji"
	BcsThirdpartyService_CreateModule_FullMethodName              = "/bcsthirdpartyservice.BcsThirdpartyService/CreateModule"
	BcsThirdpartyService_CreateNamespaceForTaijiV3_FullMethodName = "/bcsthirdpartyservice.BcsThirdpartyService/CreateNamespaceForTaijiV3"
	BcsThirdpartyService_ImportTjKubeconfig_FullMethodName        = "/bcsthirdpartyservice.BcsThirdpartyService/ImportTjKubeconfig"
	BcsThirdpartyService_UpdateTjKubeconfig_FullMethodName        = "/bcsthirdpartyservice.BcsThirdpartyService/UpdateTjKubeconfig"
	BcsThirdpartyService_CreateNamespaceForSuanli_FullMethodName  = "/bcsthirdpartyservice.BcsThirdpartyService/CreateNamespaceForSuanli"
	BcsThirdpartyService_UpdateNamespaceForSuanli_FullMethodName  = "/bcsthirdpartyservice.BcsThirdpartyService/UpdateNamespaceForSuanli"
	BcsThirdpartyService_GetKubeConfigForSuanli_FullMethodName    = "/bcsthirdpartyservice.BcsThirdpartyService/GetKubeConfigForSuanli"
	BcsThirdpartyService_BatchImportNamespace_FullMethodName      = "/bcsthirdpartyservice.BcsThirdpartyService/BatchImportNamespace"
	BcsThirdpartyService_ListNamespace_FullMethodName             = "/bcsthirdpartyservice.BcsThirdpartyService/ListNamespace"
	BcsThirdpartyService_GetNamespace_FullMethodName              = "/bcsthirdpartyservice.BcsThirdpartyService/GetNamespace"
	BcsThirdpartyService_SendRtx_FullMethodName                   = "/bcsthirdpartyservice.BcsThirdpartyService/SendRtx"
	BcsThirdpartyService_SendMail_FullMethodName                  = "/bcsthirdpartyservice.BcsThirdpartyService/SendMail"
	BcsThirdpartyService_SendMsg_FullMethodName                   = "/bcsthirdpartyservice.BcsThirdpartyService/SendMsg"
)

// BcsThirdpartyServiceClient is the client API for BcsThirdpartyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BcsThirdpartyServiceClient interface {
	CreateNamespaceForTaiji(ctx context.Context, in *CreateNamespaceForTaijiRequest, opts ...grpc.CallOption) (*CreateNamespaceForTaijiResponse, error)
	GetQuotaInfoForTaiji(ctx context.Context, in *GetQuotaInfoForTaijiRequest, opts ...grpc.CallOption) (*GetQuotaInfoForTaijiResponse, error)
	UpdateQuotaInfoForTaiji(ctx context.Context, in *UpdateQuotaInfoForTaijiRequest, opts ...grpc.CallOption) (*UpdateQuotaInfoForTaijiResponse, error)
	GetKubeConfigForTaiji(ctx context.Context, in *GetKubeConfigForTaijiRequest, opts ...grpc.CallOption) (*GetKubeConfigForTaijiResponse, error)
	CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleResponse, error)
	CreateNamespaceForTaijiV3(ctx context.Context, in *CreateNamespaceForTaijiV3Request, opts ...grpc.CallOption) (*CreateNamespaceForTaijiV3Response, error)
	ImportTjKubeconfig(ctx context.Context, in *ImportTjKubeconfigRequest, opts ...grpc.CallOption) (*ImportTjKubeconfigResponse, error)
	UpdateTjKubeconfig(ctx context.Context, in *UpdateTjKubeconfigRequest, opts ...grpc.CallOption) (*UpdateTjKubeconfigResponse, error)
	CreateNamespaceForSuanli(ctx context.Context, in *CreateNamespaceForSuanliRequest, opts ...grpc.CallOption) (*CreateNamespaceForSuanliResponse, error)
	UpdateNamespaceForSuanli(ctx context.Context, in *UpdateNamespaceForSuanliRequest, opts ...grpc.CallOption) (*UpdateNamespaceForSuanliResponse, error)
	GetKubeConfigForSuanli(ctx context.Context, in *GetKubeConfigForSuanliRequest, opts ...grpc.CallOption) (*GetKubeConfigForSuanliResponse, error)
	BatchImportNamespace(ctx context.Context, in *BatchImportNamespaceRequest, opts ...grpc.CallOption) (*BatchImportNamespaceResponse, error)
	ListNamespace(ctx context.Context, in *ListNamespaceRequest, opts ...grpc.CallOption) (*ListNamespaceResponse, error)
	GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error)
	// 新增企业微信发送接口
	SendRtx(ctx context.Context, in *SendRtxRequest, opts ...grpc.CallOption) (*SendRtxResponse, error)
	// 新增邮件发送接口
	SendMail(ctx context.Context, in *SendMailRequest, opts ...grpc.CallOption) (*SendMailResponse, error)
	// 新增bkchat v3消息发送接口
	SendMsg(ctx context.Context, in *SendMsgRequest, opts ...grpc.CallOption) (*SendMsgResponse, error)
}

type bcsThirdpartyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBcsThirdpartyServiceClient(cc grpc.ClientConnInterface) BcsThirdpartyServiceClient {
	return &bcsThirdpartyServiceClient{cc}
}

func (c *bcsThirdpartyServiceClient) CreateNamespaceForTaiji(ctx context.Context, in *CreateNamespaceForTaijiRequest, opts ...grpc.CallOption) (*CreateNamespaceForTaijiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNamespaceForTaijiResponse)
	err := c.cc.Invoke(ctx, BcsThirdpartyService_CreateNamespaceForTaiji_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyServiceClient) GetQuotaInfoForTaiji(ctx context.Context, in *GetQuotaInfoForTaijiRequest, opts ...grpc.CallOption) (*GetQuotaInfoForTaijiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuotaInfoForTaijiResponse)
	err := c.cc.Invoke(ctx, BcsThirdpartyService_GetQuotaInfoForTaiji_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyServiceClient) UpdateQuotaInfoForTaiji(ctx context.Context, in *UpdateQuotaInfoForTaijiRequest, opts ...grpc.CallOption) (*UpdateQuotaInfoForTaijiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateQuotaInfoForTaijiResponse)
	err := c.cc.Invoke(ctx, BcsThirdpartyService_UpdateQuotaInfoForTaiji_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyServiceClient) GetKubeConfigForTaiji(ctx context.Context, in *GetKubeConfigForTaijiRequest, opts ...grpc.CallOption) (*GetKubeConfigForTaijiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKubeConfigForTaijiResponse)
	err := c.cc.Invoke(ctx, BcsThirdpartyService_GetKubeConfigForTaiji_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyServiceClient) CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateModuleResponse)
	err := c.cc.Invoke(ctx, BcsThirdpartyService_CreateModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyServiceClient) CreateNamespaceForTaijiV3(ctx context.Context, in *CreateNamespaceForTaijiV3Request, opts ...grpc.CallOption) (*CreateNamespaceForTaijiV3Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNamespaceForTaijiV3Response)
	err := c.cc.Invoke(ctx, BcsThirdpartyService_CreateNamespaceForTaijiV3_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyServiceClient) ImportTjKubeconfig(ctx context.Context, in *ImportTjKubeconfigRequest, opts ...grpc.CallOption) (*ImportTjKubeconfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportTjKubeconfigResponse)
	err := c.cc.Invoke(ctx, BcsThirdpartyService_ImportTjKubeconfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyServiceClient) UpdateTjKubeconfig(ctx context.Context, in *UpdateTjKubeconfigRequest, opts ...grpc.CallOption) (*UpdateTjKubeconfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTjKubeconfigResponse)
	err := c.cc.Invoke(ctx, BcsThirdpartyService_UpdateTjKubeconfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyServiceClient) CreateNamespaceForSuanli(ctx context.Context, in *CreateNamespaceForSuanliRequest, opts ...grpc.CallOption) (*CreateNamespaceForSuanliResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNamespaceForSuanliResponse)
	err := c.cc.Invoke(ctx, BcsThirdpartyService_CreateNamespaceForSuanli_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyServiceClient) UpdateNamespaceForSuanli(ctx context.Context, in *UpdateNamespaceForSuanliRequest, opts ...grpc.CallOption) (*UpdateNamespaceForSuanliResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNamespaceForSuanliResponse)
	err := c.cc.Invoke(ctx, BcsThirdpartyService_UpdateNamespaceForSuanli_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyServiceClient) GetKubeConfigForSuanli(ctx context.Context, in *GetKubeConfigForSuanliRequest, opts ...grpc.CallOption) (*GetKubeConfigForSuanliResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKubeConfigForSuanliResponse)
	err := c.cc.Invoke(ctx, BcsThirdpartyService_GetKubeConfigForSuanli_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyServiceClient) BatchImportNamespace(ctx context.Context, in *BatchImportNamespaceRequest, opts ...grpc.CallOption) (*BatchImportNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchImportNamespaceResponse)
	err := c.cc.Invoke(ctx, BcsThirdpartyService_BatchImportNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyServiceClient) ListNamespace(ctx context.Context, in *ListNamespaceRequest, opts ...grpc.CallOption) (*ListNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNamespaceResponse)
	err := c.cc.Invoke(ctx, BcsThirdpartyService_ListNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyServiceClient) GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNamespaceResponse)
	err := c.cc.Invoke(ctx, BcsThirdpartyService_GetNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyServiceClient) SendRtx(ctx context.Context, in *SendRtxRequest, opts ...grpc.CallOption) (*SendRtxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendRtxResponse)
	err := c.cc.Invoke(ctx, BcsThirdpartyService_SendRtx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyServiceClient) SendMail(ctx context.Context, in *SendMailRequest, opts ...grpc.CallOption) (*SendMailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMailResponse)
	err := c.cc.Invoke(ctx, BcsThirdpartyService_SendMail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyServiceClient) SendMsg(ctx context.Context, in *SendMsgRequest, opts ...grpc.CallOption) (*SendMsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMsgResponse)
	err := c.cc.Invoke(ctx, BcsThirdpartyService_SendMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BcsThirdpartyServiceServer is the server API for BcsThirdpartyService service.
// All implementations must embed UnimplementedBcsThirdpartyServiceServer
// for forward compatibility.
type BcsThirdpartyServiceServer interface {
	CreateNamespaceForTaiji(context.Context, *CreateNamespaceForTaijiRequest) (*CreateNamespaceForTaijiResponse, error)
	GetQuotaInfoForTaiji(context.Context, *GetQuotaInfoForTaijiRequest) (*GetQuotaInfoForTaijiResponse, error)
	UpdateQuotaInfoForTaiji(context.Context, *UpdateQuotaInfoForTaijiRequest) (*UpdateQuotaInfoForTaijiResponse, error)
	GetKubeConfigForTaiji(context.Context, *GetKubeConfigForTaijiRequest) (*GetKubeConfigForTaijiResponse, error)
	CreateModule(context.Context, *CreateModuleRequest) (*CreateModuleResponse, error)
	CreateNamespaceForTaijiV3(context.Context, *CreateNamespaceForTaijiV3Request) (*CreateNamespaceForTaijiV3Response, error)
	ImportTjKubeconfig(context.Context, *ImportTjKubeconfigRequest) (*ImportTjKubeconfigResponse, error)
	UpdateTjKubeconfig(context.Context, *UpdateTjKubeconfigRequest) (*UpdateTjKubeconfigResponse, error)
	CreateNamespaceForSuanli(context.Context, *CreateNamespaceForSuanliRequest) (*CreateNamespaceForSuanliResponse, error)
	UpdateNamespaceForSuanli(context.Context, *UpdateNamespaceForSuanliRequest) (*UpdateNamespaceForSuanliResponse, error)
	GetKubeConfigForSuanli(context.Context, *GetKubeConfigForSuanliRequest) (*GetKubeConfigForSuanliResponse, error)
	BatchImportNamespace(context.Context, *BatchImportNamespaceRequest) (*BatchImportNamespaceResponse, error)
	ListNamespace(context.Context, *ListNamespaceRequest) (*ListNamespaceResponse, error)
	GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error)
	// 新增企业微信发送接口
	SendRtx(context.Context, *SendRtxRequest) (*SendRtxResponse, error)
	// 新增邮件发送接口
	SendMail(context.Context, *SendMailRequest) (*SendMailResponse, error)
	// 新增bkchat v3消息发送接口
	SendMsg(context.Context, *SendMsgRequest) (*SendMsgResponse, error)
	mustEmbedUnimplementedBcsThirdpartyServiceServer()
}

// UnimplementedBcsThirdpartyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBcsThirdpartyServiceServer struct{}

func (UnimplementedBcsThirdpartyServiceServer) CreateNamespaceForTaiji(context.Context, *CreateNamespaceForTaijiRequest) (*CreateNamespaceForTaijiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespaceForTaiji not implemented")
}
func (UnimplementedBcsThirdpartyServiceServer) GetQuotaInfoForTaiji(context.Context, *GetQuotaInfoForTaijiRequest) (*GetQuotaInfoForTaijiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuotaInfoForTaiji not implemented")
}
func (UnimplementedBcsThirdpartyServiceServer) UpdateQuotaInfoForTaiji(context.Context, *UpdateQuotaInfoForTaijiRequest) (*UpdateQuotaInfoForTaijiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuotaInfoForTaiji not implemented")
}
func (UnimplementedBcsThirdpartyServiceServer) GetKubeConfigForTaiji(context.Context, *GetKubeConfigForTaijiRequest) (*GetKubeConfigForTaijiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubeConfigForTaiji not implemented")
}
func (UnimplementedBcsThirdpartyServiceServer) CreateModule(context.Context, *CreateModuleRequest) (*CreateModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModule not implemented")
}
func (UnimplementedBcsThirdpartyServiceServer) CreateNamespaceForTaijiV3(context.Context, *CreateNamespaceForTaijiV3Request) (*CreateNamespaceForTaijiV3Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespaceForTaijiV3 not implemented")
}
func (UnimplementedBcsThirdpartyServiceServer) ImportTjKubeconfig(context.Context, *ImportTjKubeconfigRequest) (*ImportTjKubeconfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportTjKubeconfig not implemented")
}
func (UnimplementedBcsThirdpartyServiceServer) UpdateTjKubeconfig(context.Context, *UpdateTjKubeconfigRequest) (*UpdateTjKubeconfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTjKubeconfig not implemented")
}
func (UnimplementedBcsThirdpartyServiceServer) CreateNamespaceForSuanli(context.Context, *CreateNamespaceForSuanliRequest) (*CreateNamespaceForSuanliResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespaceForSuanli not implemented")
}
func (UnimplementedBcsThirdpartyServiceServer) UpdateNamespaceForSuanli(context.Context, *UpdateNamespaceForSuanliRequest) (*UpdateNamespaceForSuanliResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespaceForSuanli not implemented")
}
func (UnimplementedBcsThirdpartyServiceServer) GetKubeConfigForSuanli(context.Context, *GetKubeConfigForSuanliRequest) (*GetKubeConfigForSuanliResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubeConfigForSuanli not implemented")
}
func (UnimplementedBcsThirdpartyServiceServer) BatchImportNamespace(context.Context, *BatchImportNamespaceRequest) (*BatchImportNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchImportNamespace not implemented")
}
func (UnimplementedBcsThirdpartyServiceServer) ListNamespace(context.Context, *ListNamespaceRequest) (*ListNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespace not implemented")
}
func (UnimplementedBcsThirdpartyServiceServer) GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (UnimplementedBcsThirdpartyServiceServer) SendRtx(context.Context, *SendRtxRequest) (*SendRtxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRtx not implemented")
}
func (UnimplementedBcsThirdpartyServiceServer) SendMail(context.Context, *SendMailRequest) (*SendMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMail not implemented")
}
func (UnimplementedBcsThirdpartyServiceServer) SendMsg(context.Context, *SendMsgRequest) (*SendMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedBcsThirdpartyServiceServer) mustEmbedUnimplementedBcsThirdpartyServiceServer() {}
func (UnimplementedBcsThirdpartyServiceServer) testEmbeddedByValue()                              {}

// UnsafeBcsThirdpartyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BcsThirdpartyServiceServer will
// result in compilation errors.
type UnsafeBcsThirdpartyServiceServer interface {
	mustEmbedUnimplementedBcsThirdpartyServiceServer()
}

func RegisterBcsThirdpartyServiceServer(s grpc.ServiceRegistrar, srv BcsThirdpartyServiceServer) {
	// If the following call pancis, it indicates UnimplementedBcsThirdpartyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BcsThirdpartyService_ServiceDesc, srv)
}

func _BcsThirdpartyService_CreateNamespaceForTaiji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceForTaijiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsThirdpartyServiceServer).CreateNamespaceForTaiji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsThirdpartyService_CreateNamespaceForTaiji_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsThirdpartyServiceServer).CreateNamespaceForTaiji(ctx, req.(*CreateNamespaceForTaijiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsThirdpartyService_GetQuotaInfoForTaiji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotaInfoForTaijiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsThirdpartyServiceServer).GetQuotaInfoForTaiji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsThirdpartyService_GetQuotaInfoForTaiji_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsThirdpartyServiceServer).GetQuotaInfoForTaiji(ctx, req.(*GetQuotaInfoForTaijiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsThirdpartyService_UpdateQuotaInfoForTaiji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuotaInfoForTaijiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsThirdpartyServiceServer).UpdateQuotaInfoForTaiji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsThirdpartyService_UpdateQuotaInfoForTaiji_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsThirdpartyServiceServer).UpdateQuotaInfoForTaiji(ctx, req.(*UpdateQuotaInfoForTaijiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsThirdpartyService_GetKubeConfigForTaiji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubeConfigForTaijiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsThirdpartyServiceServer).GetKubeConfigForTaiji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsThirdpartyService_GetKubeConfigForTaiji_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsThirdpartyServiceServer).GetKubeConfigForTaiji(ctx, req.(*GetKubeConfigForTaijiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsThirdpartyService_CreateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsThirdpartyServiceServer).CreateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsThirdpartyService_CreateModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsThirdpartyServiceServer).CreateModule(ctx, req.(*CreateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsThirdpartyService_CreateNamespaceForTaijiV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceForTaijiV3Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsThirdpartyServiceServer).CreateNamespaceForTaijiV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsThirdpartyService_CreateNamespaceForTaijiV3_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsThirdpartyServiceServer).CreateNamespaceForTaijiV3(ctx, req.(*CreateNamespaceForTaijiV3Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsThirdpartyService_ImportTjKubeconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportTjKubeconfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsThirdpartyServiceServer).ImportTjKubeconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsThirdpartyService_ImportTjKubeconfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsThirdpartyServiceServer).ImportTjKubeconfig(ctx, req.(*ImportTjKubeconfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsThirdpartyService_UpdateTjKubeconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTjKubeconfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsThirdpartyServiceServer).UpdateTjKubeconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsThirdpartyService_UpdateTjKubeconfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsThirdpartyServiceServer).UpdateTjKubeconfig(ctx, req.(*UpdateTjKubeconfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsThirdpartyService_CreateNamespaceForSuanli_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceForSuanliRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsThirdpartyServiceServer).CreateNamespaceForSuanli(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsThirdpartyService_CreateNamespaceForSuanli_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsThirdpartyServiceServer).CreateNamespaceForSuanli(ctx, req.(*CreateNamespaceForSuanliRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsThirdpartyService_UpdateNamespaceForSuanli_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespaceForSuanliRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsThirdpartyServiceServer).UpdateNamespaceForSuanli(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsThirdpartyService_UpdateNamespaceForSuanli_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsThirdpartyServiceServer).UpdateNamespaceForSuanli(ctx, req.(*UpdateNamespaceForSuanliRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsThirdpartyService_GetKubeConfigForSuanli_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubeConfigForSuanliRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsThirdpartyServiceServer).GetKubeConfigForSuanli(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsThirdpartyService_GetKubeConfigForSuanli_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsThirdpartyServiceServer).GetKubeConfigForSuanli(ctx, req.(*GetKubeConfigForSuanliRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsThirdpartyService_BatchImportNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchImportNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsThirdpartyServiceServer).BatchImportNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsThirdpartyService_BatchImportNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsThirdpartyServiceServer).BatchImportNamespace(ctx, req.(*BatchImportNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsThirdpartyService_ListNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsThirdpartyServiceServer).ListNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsThirdpartyService_ListNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsThirdpartyServiceServer).ListNamespace(ctx, req.(*ListNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsThirdpartyService_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsThirdpartyServiceServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsThirdpartyService_GetNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsThirdpartyServiceServer).GetNamespace(ctx, req.(*GetNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsThirdpartyService_SendRtx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRtxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsThirdpartyServiceServer).SendRtx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsThirdpartyService_SendRtx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsThirdpartyServiceServer).SendRtx(ctx, req.(*SendRtxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsThirdpartyService_SendMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsThirdpartyServiceServer).SendMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsThirdpartyService_SendMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsThirdpartyServiceServer).SendMail(ctx, req.(*SendMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsThirdpartyService_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsThirdpartyServiceServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsThirdpartyService_SendMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsThirdpartyServiceServer).SendMsg(ctx, req.(*SendMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BcsThirdpartyService_ServiceDesc is the grpc.ServiceDesc for BcsThirdpartyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BcsThirdpartyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bcsthirdpartyservice.BcsThirdpartyService",
	HandlerType: (*BcsThirdpartyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNamespaceForTaiji",
			Handler:    _BcsThirdpartyService_CreateNamespaceForTaiji_Handler,
		},
		{
			MethodName: "GetQuotaInfoForTaiji",
			Handler:    _BcsThirdpartyService_GetQuotaInfoForTaiji_Handler,
		},
		{
			MethodName: "UpdateQuotaInfoForTaiji",
			Handler:    _BcsThirdpartyService_UpdateQuotaInfoForTaiji_Handler,
		},
		{
			MethodName: "GetKubeConfigForTaiji",
			Handler:    _BcsThirdpartyService_GetKubeConfigForTaiji_Handler,
		},
		{
			MethodName: "CreateModule",
			Handler:    _BcsThirdpartyService_CreateModule_Handler,
		},
		{
			MethodName: "CreateNamespaceForTaijiV3",
			Handler:    _BcsThirdpartyService_CreateNamespaceForTaijiV3_Handler,
		},
		{
			MethodName: "ImportTjKubeconfig",
			Handler:    _BcsThirdpartyService_ImportTjKubeconfig_Handler,
		},
		{
			MethodName: "UpdateTjKubeconfig",
			Handler:    _BcsThirdpartyService_UpdateTjKubeconfig_Handler,
		},
		{
			MethodName: "CreateNamespaceForSuanli",
			Handler:    _BcsThirdpartyService_CreateNamespaceForSuanli_Handler,
		},
		{
			MethodName: "UpdateNamespaceForSuanli",
			Handler:    _BcsThirdpartyService_UpdateNamespaceForSuanli_Handler,
		},
		{
			MethodName: "GetKubeConfigForSuanli",
			Handler:    _BcsThirdpartyService_GetKubeConfigForSuanli_Handler,
		},
		{
			MethodName: "BatchImportNamespace",
			Handler:    _BcsThirdpartyService_BatchImportNamespace_Handler,
		},
		{
			MethodName: "ListNamespace",
			Handler:    _BcsThirdpartyService_ListNamespace_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _BcsThirdpartyService_GetNamespace_Handler,
		},
		{
			MethodName: "SendRtx",
			Handler:    _BcsThirdpartyService_SendRtx_Handler,
		},
		{
			MethodName: "SendMail",
			Handler:    _BcsThirdpartyService_SendMail_Handler,
		},
		{
			MethodName: "SendMsg",
			Handler:    _BcsThirdpartyService_SendMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/bcsapi/thirdparty-service/bcs-thirdparty-service.proto",
}
