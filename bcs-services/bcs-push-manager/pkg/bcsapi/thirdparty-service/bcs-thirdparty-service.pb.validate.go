// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/bcsapi/thirdparty-service/bcs-thirdparty-service.proto

package bcsthirdpartyservice

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpdateTjKubeconfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTjKubeconfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTjKubeconfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTjKubeconfigRequestMultiError, or nil if none found.
func (m *UpdateTjKubeconfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTjKubeconfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Kubeconfig

	// no validation rules for Platform

	// no validation rules for Operator

	if len(errors) > 0 {
		return UpdateTjKubeconfigRequestMultiError(errors)
	}

	return nil
}

// UpdateTjKubeconfigRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTjKubeconfigRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateTjKubeconfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTjKubeconfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTjKubeconfigRequestMultiError) AllErrors() []error { return m }

// UpdateTjKubeconfigRequestValidationError is the validation error returned by
// UpdateTjKubeconfigRequest.Validate if the designated constraints aren't met.
type UpdateTjKubeconfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTjKubeconfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTjKubeconfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTjKubeconfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTjKubeconfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTjKubeconfigRequestValidationError) ErrorName() string {
	return "UpdateTjKubeconfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTjKubeconfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTjKubeconfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTjKubeconfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTjKubeconfigRequestValidationError{}

// Validate checks the field values on UpdateTjKubeconfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTjKubeconfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTjKubeconfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTjKubeconfigResponseMultiError, or nil if none found.
func (m *UpdateTjKubeconfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTjKubeconfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateTjKubeconfigResponseMultiError(errors)
	}

	return nil
}

// UpdateTjKubeconfigResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateTjKubeconfigResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateTjKubeconfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTjKubeconfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTjKubeconfigResponseMultiError) AllErrors() []error { return m }

// UpdateTjKubeconfigResponseValidationError is the validation error returned
// by UpdateTjKubeconfigResponse.Validate if the designated constraints aren't met.
type UpdateTjKubeconfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTjKubeconfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTjKubeconfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTjKubeconfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTjKubeconfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTjKubeconfigResponseValidationError) ErrorName() string {
	return "UpdateTjKubeconfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTjKubeconfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTjKubeconfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTjKubeconfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTjKubeconfigResponseValidationError{}

// Validate checks the field values on ImportTjKubeconfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportTjKubeconfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportTjKubeconfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportTjKubeconfigRequestMultiError, or nil if none found.
func (m *ImportTjKubeconfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportTjKubeconfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Kubeconfig

	// no validation rules for Platform

	// no validation rules for Creator

	if len(errors) > 0 {
		return ImportTjKubeconfigRequestMultiError(errors)
	}

	return nil
}

// ImportTjKubeconfigRequestMultiError is an error wrapping multiple validation
// errors returned by ImportTjKubeconfigRequest.ValidateAll() if the
// designated constraints aren't met.
type ImportTjKubeconfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportTjKubeconfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportTjKubeconfigRequestMultiError) AllErrors() []error { return m }

// ImportTjKubeconfigRequestValidationError is the validation error returned by
// ImportTjKubeconfigRequest.Validate if the designated constraints aren't met.
type ImportTjKubeconfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportTjKubeconfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportTjKubeconfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportTjKubeconfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportTjKubeconfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportTjKubeconfigRequestValidationError) ErrorName() string {
	return "ImportTjKubeconfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportTjKubeconfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportTjKubeconfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportTjKubeconfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportTjKubeconfigRequestValidationError{}

// Validate checks the field values on ImportTjKubeconfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportTjKubeconfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportTjKubeconfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportTjKubeconfigResponseMultiError, or nil if none found.
func (m *ImportTjKubeconfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportTjKubeconfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return ImportTjKubeconfigResponseMultiError(errors)
	}

	return nil
}

// ImportTjKubeconfigResponseMultiError is an error wrapping multiple
// validation errors returned by ImportTjKubeconfigResponse.ValidateAll() if
// the designated constraints aren't met.
type ImportTjKubeconfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportTjKubeconfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportTjKubeconfigResponseMultiError) AllErrors() []error { return m }

// ImportTjKubeconfigResponseValidationError is the validation error returned
// by ImportTjKubeconfigResponse.Validate if the designated constraints aren't met.
type ImportTjKubeconfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportTjKubeconfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportTjKubeconfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportTjKubeconfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportTjKubeconfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportTjKubeconfigResponseValidationError) ErrorName() string {
	return "ImportTjKubeconfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportTjKubeconfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportTjKubeconfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportTjKubeconfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportTjKubeconfigResponseValidationError{}

// Validate checks the field values on UpdateNamespaceForSuanliRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNamespaceForSuanliRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNamespaceForSuanliRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateNamespaceForSuanliRequestMultiError, or nil if none found.
func (m *UpdateNamespaceForSuanliRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNamespaceForSuanliRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Operator

	for idx, item := range m.GetSubQuotaInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateNamespaceForSuanliRequestValidationError{
						field:  fmt.Sprintf("SubQuotaInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateNamespaceForSuanliRequestValidationError{
						field:  fmt.Sprintf("SubQuotaInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateNamespaceForSuanliRequestValidationError{
					field:  fmt.Sprintf("SubQuotaInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateNamespaceForSuanliRequestMultiError(errors)
	}

	return nil
}

// UpdateNamespaceForSuanliRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateNamespaceForSuanliRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateNamespaceForSuanliRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNamespaceForSuanliRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNamespaceForSuanliRequestMultiError) AllErrors() []error { return m }

// UpdateNamespaceForSuanliRequestValidationError is the validation error
// returned by UpdateNamespaceForSuanliRequest.Validate if the designated
// constraints aren't met.
type UpdateNamespaceForSuanliRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNamespaceForSuanliRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNamespaceForSuanliRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNamespaceForSuanliRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNamespaceForSuanliRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNamespaceForSuanliRequestValidationError) ErrorName() string {
	return "UpdateNamespaceForSuanliRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNamespaceForSuanliRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNamespaceForSuanliRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNamespaceForSuanliRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNamespaceForSuanliRequestValidationError{}

// Validate checks the field values on UpdateNamespaceForSuanliResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateNamespaceForSuanliResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNamespaceForSuanliResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateNamespaceForSuanliResponseMultiError, or nil if none found.
func (m *UpdateNamespaceForSuanliResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNamespaceForSuanliResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateNamespaceForSuanliResponseMultiError(errors)
	}

	return nil
}

// UpdateNamespaceForSuanliResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateNamespaceForSuanliResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateNamespaceForSuanliResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNamespaceForSuanliResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNamespaceForSuanliResponseMultiError) AllErrors() []error { return m }

// UpdateNamespaceForSuanliResponseValidationError is the validation error
// returned by UpdateNamespaceForSuanliResponse.Validate if the designated
// constraints aren't met.
type UpdateNamespaceForSuanliResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNamespaceForSuanliResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNamespaceForSuanliResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNamespaceForSuanliResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNamespaceForSuanliResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNamespaceForSuanliResponseValidationError) ErrorName() string {
	return "UpdateNamespaceForSuanliResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNamespaceForSuanliResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNamespaceForSuanliResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNamespaceForSuanliResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNamespaceForSuanliResponseValidationError{}

// Validate checks the field values on GetNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNamespaceRequestMultiError, or nil if none found.
func (m *GetNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Platform

	// no validation rules for Namespace

	if len(errors) > 0 {
		return GetNamespaceRequestMultiError(errors)
	}

	return nil
}

// GetNamespaceRequestMultiError is an error wrapping multiple validation
// errors returned by GetNamespaceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespaceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespaceRequestMultiError) AllErrors() []error { return m }

// GetNamespaceRequestValidationError is the validation error returned by
// GetNamespaceRequest.Validate if the designated constraints aren't met.
type GetNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceRequestValidationError) ErrorName() string {
	return "GetNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceRequestValidationError{}

// Validate checks the field values on GetNamespaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNamespaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNamespaceResponseMultiError, or nil if none found.
func (m *GetNamespaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNamespaceResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNamespaceResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNamespaceResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNamespaceResponseMultiError(errors)
	}

	return nil
}

// GetNamespaceResponseMultiError is an error wrapping multiple validation
// errors returned by GetNamespaceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNamespaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespaceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespaceResponseMultiError) AllErrors() []error { return m }

// GetNamespaceResponseValidationError is the validation error returned by
// GetNamespaceResponse.Validate if the designated constraints aren't met.
type GetNamespaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceResponseValidationError) ErrorName() string {
	return "GetNamespaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceResponseValidationError{}

// Validate checks the field values on ListNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNamespaceRequestMultiError, or nil if none found.
func (m *ListNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Platform

	// no validation rules for All

	// no validation rules for Limit

	// no validation rules for Page

	if len(errors) > 0 {
		return ListNamespaceRequestMultiError(errors)
	}

	return nil
}

// ListNamespaceRequestMultiError is an error wrapping multiple validation
// errors returned by ListNamespaceRequest.ValidateAll() if the designated
// constraints aren't met.
type ListNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNamespaceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNamespaceRequestMultiError) AllErrors() []error { return m }

// ListNamespaceRequestValidationError is the validation error returned by
// ListNamespaceRequest.Validate if the designated constraints aren't met.
type ListNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespaceRequestValidationError) ErrorName() string {
	return "ListNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespaceRequestValidationError{}

// Validate checks the field values on ListNamespaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNamespaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNamespaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNamespaceResponseMultiError, or nil if none found.
func (m *ListNamespaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNamespaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListNamespaceResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListNamespaceResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNamespaceResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListNamespaceResponseMultiError(errors)
	}

	return nil
}

// ListNamespaceResponseMultiError is an error wrapping multiple validation
// errors returned by ListNamespaceResponse.ValidateAll() if the designated
// constraints aren't met.
type ListNamespaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNamespaceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNamespaceResponseMultiError) AllErrors() []error { return m }

// ListNamespaceResponseValidationError is the validation error returned by
// ListNamespaceResponse.Validate if the designated constraints aren't met.
type ListNamespaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespaceResponseValidationError) ErrorName() string {
	return "ListNamespaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespaceResponseValidationError{}

// Validate checks the field values on ListNamespaceResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNamespaceResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNamespaceResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNamespaceResponseDataMultiError, or nil if none found.
func (m *ListNamespaceResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNamespaceResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetNamespace() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNamespaceResponseDataValidationError{
						field:  fmt.Sprintf("Namespace[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNamespaceResponseDataValidationError{
						field:  fmt.Sprintf("Namespace[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNamespaceResponseDataValidationError{
					field:  fmt.Sprintf("Namespace[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListNamespaceResponseDataMultiError(errors)
	}

	return nil
}

// ListNamespaceResponseDataMultiError is an error wrapping multiple validation
// errors returned by ListNamespaceResponseData.ValidateAll() if the
// designated constraints aren't met.
type ListNamespaceResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNamespaceResponseDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNamespaceResponseDataMultiError) AllErrors() []error { return m }

// ListNamespaceResponseDataValidationError is the validation error returned by
// ListNamespaceResponseData.Validate if the designated constraints aren't met.
type ListNamespaceResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespaceResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespaceResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespaceResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespaceResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespaceResponseDataValidationError) ErrorName() string {
	return "ListNamespaceResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespaceResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespaceResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespaceResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespaceResponseDataValidationError{}

// Validate checks the field values on Namespace with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Namespace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Namespace with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NamespaceMultiError, or nil
// if none found.
func (m *Namespace) ValidateAll() error {
	return m.validate(true)
}

func (m *Namespace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Platform

	if all {
		switch v := interface{}(m.GetKubeConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "KubeConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "KubeConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKubeConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceValidationError{
				field:  "KubeConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	// no validation rules for Annotations

	for idx, item := range m.GetSubQuotaInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NamespaceValidationError{
						field:  fmt.Sprintf("SubQuotaInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NamespaceValidationError{
						field:  fmt.Sprintf("SubQuotaInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NamespaceValidationError{
					field:  fmt.Sprintf("SubQuotaInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Creator

	// no validation rules for Updater

	// no validation rules for CreatedTime

	// no validation rules for UpdatedTime

	if len(errors) > 0 {
		return NamespaceMultiError(errors)
	}

	return nil
}

// NamespaceMultiError is an error wrapping multiple validation errors returned
// by Namespace.ValidateAll() if the designated constraints aren't met.
type NamespaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespaceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespaceMultiError) AllErrors() []error { return m }

// NamespaceValidationError is the validation error returned by
// Namespace.Validate if the designated constraints aren't met.
type NamespaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceValidationError) ErrorName() string { return "NamespaceValidationError" }

// Error satisfies the builtin error interface
func (e NamespaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceValidationError{}

// Validate checks the field values on KubeConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KubeConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KubeConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KubeConfigMultiError, or
// nil if none found.
func (m *KubeConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *KubeConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Config

	if len(errors) > 0 {
		return KubeConfigMultiError(errors)
	}

	return nil
}

// KubeConfigMultiError is an error wrapping multiple validation errors
// returned by KubeConfig.ValidateAll() if the designated constraints aren't met.
type KubeConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubeConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubeConfigMultiError) AllErrors() []error { return m }

// KubeConfigValidationError is the validation error returned by
// KubeConfig.Validate if the designated constraints aren't met.
type KubeConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubeConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubeConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubeConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubeConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubeConfigValidationError) ErrorName() string { return "KubeConfigValidationError" }

// Error satisfies the builtin error interface
func (e KubeConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubeConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubeConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubeConfigValidationError{}

// Validate checks the field values on SubQuotaInfos with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubQuotaInfos) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubQuotaInfos with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubQuotaInfosMultiError, or
// nil if none found.
func (m *SubQuotaInfos) ValidateAll() error {
	return m.validate(true)
}

func (m *SubQuotaInfos) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for SubQuotaLabels

	// no validation rules for SubQuotaResources

	if len(errors) > 0 {
		return SubQuotaInfosMultiError(errors)
	}

	return nil
}

// SubQuotaInfosMultiError is an error wrapping multiple validation errors
// returned by SubQuotaInfos.ValidateAll() if the designated constraints
// aren't met.
type SubQuotaInfosMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubQuotaInfosMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubQuotaInfosMultiError) AllErrors() []error { return m }

// SubQuotaInfosValidationError is the validation error returned by
// SubQuotaInfos.Validate if the designated constraints aren't met.
type SubQuotaInfosValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubQuotaInfosValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubQuotaInfosValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubQuotaInfosValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubQuotaInfosValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubQuotaInfosValidationError) ErrorName() string { return "SubQuotaInfosValidationError" }

// Error satisfies the builtin error interface
func (e SubQuotaInfosValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubQuotaInfos.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubQuotaInfosValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubQuotaInfosValidationError{}

// Validate checks the field values on BatchImportNamespaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchImportNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchImportNamespaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchImportNamespaceRequestMultiError, or nil if none found.
func (m *BatchImportNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchImportNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNamespaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchImportNamespaceRequestValidationError{
						field:  fmt.Sprintf("Namespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchImportNamespaceRequestValidationError{
						field:  fmt.Sprintf("Namespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchImportNamespaceRequestValidationError{
					field:  fmt.Sprintf("Namespaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchImportNamespaceRequestMultiError(errors)
	}

	return nil
}

// BatchImportNamespaceRequestMultiError is an error wrapping multiple
// validation errors returned by BatchImportNamespaceRequest.ValidateAll() if
// the designated constraints aren't met.
type BatchImportNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchImportNamespaceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchImportNamespaceRequestMultiError) AllErrors() []error { return m }

// BatchImportNamespaceRequestValidationError is the validation error returned
// by BatchImportNamespaceRequest.Validate if the designated constraints
// aren't met.
type BatchImportNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchImportNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchImportNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchImportNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchImportNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchImportNamespaceRequestValidationError) ErrorName() string {
	return "BatchImportNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchImportNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchImportNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchImportNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchImportNamespaceRequestValidationError{}

// Validate checks the field values on BatchImportNamespaceData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchImportNamespaceData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchImportNamespaceData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchImportNamespaceDataMultiError, or nil if none found.
func (m *BatchImportNamespaceData) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchImportNamespaceData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Creator

	for idx, item := range m.GetSubQuotaInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchImportNamespaceDataValidationError{
						field:  fmt.Sprintf("SubQuotaInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchImportNamespaceDataValidationError{
						field:  fmt.Sprintf("SubQuotaInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchImportNamespaceDataValidationError{
					field:  fmt.Sprintf("SubQuotaInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Labels

	// no validation rules for Annotations

	// no validation rules for Platform

	// no validation rules for ClusterName

	if len(errors) > 0 {
		return BatchImportNamespaceDataMultiError(errors)
	}

	return nil
}

// BatchImportNamespaceDataMultiError is an error wrapping multiple validation
// errors returned by BatchImportNamespaceData.ValidateAll() if the designated
// constraints aren't met.
type BatchImportNamespaceDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchImportNamespaceDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchImportNamespaceDataMultiError) AllErrors() []error { return m }

// BatchImportNamespaceDataValidationError is the validation error returned by
// BatchImportNamespaceData.Validate if the designated constraints aren't met.
type BatchImportNamespaceDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchImportNamespaceDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchImportNamespaceDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchImportNamespaceDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchImportNamespaceDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchImportNamespaceDataValidationError) ErrorName() string {
	return "BatchImportNamespaceDataValidationError"
}

// Error satisfies the builtin error interface
func (e BatchImportNamespaceDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchImportNamespaceData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchImportNamespaceDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchImportNamespaceDataValidationError{}

// Validate checks the field values on BatchImportNamespaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchImportNamespaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchImportNamespaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchImportNamespaceResponseMultiError, or nil if none found.
func (m *BatchImportNamespaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchImportNamespaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return BatchImportNamespaceResponseMultiError(errors)
	}

	return nil
}

// BatchImportNamespaceResponseMultiError is an error wrapping multiple
// validation errors returned by BatchImportNamespaceResponse.ValidateAll() if
// the designated constraints aren't met.
type BatchImportNamespaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchImportNamespaceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchImportNamespaceResponseMultiError) AllErrors() []error { return m }

// BatchImportNamespaceResponseValidationError is the validation error returned
// by BatchImportNamespaceResponse.Validate if the designated constraints
// aren't met.
type BatchImportNamespaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchImportNamespaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchImportNamespaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchImportNamespaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchImportNamespaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchImportNamespaceResponseValidationError) ErrorName() string {
	return "BatchImportNamespaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchImportNamespaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchImportNamespaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchImportNamespaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchImportNamespaceResponseValidationError{}

// Validate checks the field values on GetKubeConfigForSuanliRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKubeConfigForSuanliRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKubeConfigForSuanliRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetKubeConfigForSuanliRequestMultiError, or nil if none found.
func (m *GetKubeConfigForSuanliRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKubeConfigForSuanliRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NameSpace

	if len(errors) > 0 {
		return GetKubeConfigForSuanliRequestMultiError(errors)
	}

	return nil
}

// GetKubeConfigForSuanliRequestMultiError is an error wrapping multiple
// validation errors returned by GetKubeConfigForSuanliRequest.ValidateAll()
// if the designated constraints aren't met.
type GetKubeConfigForSuanliRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKubeConfigForSuanliRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKubeConfigForSuanliRequestMultiError) AllErrors() []error { return m }

// GetKubeConfigForSuanliRequestValidationError is the validation error
// returned by GetKubeConfigForSuanliRequest.Validate if the designated
// constraints aren't met.
type GetKubeConfigForSuanliRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKubeConfigForSuanliRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKubeConfigForSuanliRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKubeConfigForSuanliRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKubeConfigForSuanliRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKubeConfigForSuanliRequestValidationError) ErrorName() string {
	return "GetKubeConfigForSuanliRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetKubeConfigForSuanliRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKubeConfigForSuanliRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKubeConfigForSuanliRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKubeConfigForSuanliRequestValidationError{}

// Validate checks the field values on GetKubeConfigForSuanliResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKubeConfigForSuanliResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKubeConfigForSuanliResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetKubeConfigForSuanliResponseMultiError, or nil if none found.
func (m *GetKubeConfigForSuanliResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKubeConfigForSuanliResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetKubeConfigForSuanliResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetKubeConfigForSuanliResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetKubeConfigForSuanliResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetKubeConfigForSuanliResponseMultiError(errors)
	}

	return nil
}

// GetKubeConfigForSuanliResponseMultiError is an error wrapping multiple
// validation errors returned by GetKubeConfigForSuanliResponse.ValidateAll()
// if the designated constraints aren't met.
type GetKubeConfigForSuanliResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKubeConfigForSuanliResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKubeConfigForSuanliResponseMultiError) AllErrors() []error { return m }

// GetKubeConfigForSuanliResponseValidationError is the validation error
// returned by GetKubeConfigForSuanliResponse.Validate if the designated
// constraints aren't met.
type GetKubeConfigForSuanliResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKubeConfigForSuanliResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKubeConfigForSuanliResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKubeConfigForSuanliResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKubeConfigForSuanliResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKubeConfigForSuanliResponseValidationError) ErrorName() string {
	return "GetKubeConfigForSuanliResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetKubeConfigForSuanliResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKubeConfigForSuanliResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKubeConfigForSuanliResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKubeConfigForSuanliResponseValidationError{}

// Validate checks the field values on CmdbBusinessLevel3DetailInfoData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CmdbBusinessLevel3DetailInfoData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CmdbBusinessLevel3DetailInfoData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CmdbBusinessLevel3DetailInfoDataMultiError, or nil if none found.
func (m *CmdbBusinessLevel3DetailInfoData) ValidateAll() error {
	return m.validate(true)
}

func (m *CmdbBusinessLevel3DetailInfoData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CmdbBusinessLevel3DetailInfoDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CmdbBusinessLevel3DetailInfoDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CmdbBusinessLevel3DetailInfoDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ScrollId

	// no validation rules for HasNext

	if len(errors) > 0 {
		return CmdbBusinessLevel3DetailInfoDataMultiError(errors)
	}

	return nil
}

// CmdbBusinessLevel3DetailInfoDataMultiError is an error wrapping multiple
// validation errors returned by
// CmdbBusinessLevel3DetailInfoData.ValidateAll() if the designated
// constraints aren't met.
type CmdbBusinessLevel3DetailInfoDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CmdbBusinessLevel3DetailInfoDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CmdbBusinessLevel3DetailInfoDataMultiError) AllErrors() []error { return m }

// CmdbBusinessLevel3DetailInfoDataValidationError is the validation error
// returned by CmdbBusinessLevel3DetailInfoData.Validate if the designated
// constraints aren't met.
type CmdbBusinessLevel3DetailInfoDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CmdbBusinessLevel3DetailInfoDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CmdbBusinessLevel3DetailInfoDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CmdbBusinessLevel3DetailInfoDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CmdbBusinessLevel3DetailInfoDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CmdbBusinessLevel3DetailInfoDataValidationError) ErrorName() string {
	return "CmdbBusinessLevel3DetailInfoDataValidationError"
}

// Error satisfies the builtin error interface
func (e CmdbBusinessLevel3DetailInfoDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCmdbBusinessLevel3DetailInfoData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CmdbBusinessLevel3DetailInfoDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CmdbBusinessLevel3DetailInfoDataValidationError{}

// Validate checks the field values on BusinessLevel3DetailInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessLevel3DetailInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessLevel3DetailInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessLevel3DetailInfoMultiError, or nil if none found.
func (m *BusinessLevel3DetailInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessLevel3DetailInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessLevel1Id

	// no validation rules for BusinessLevel1Name

	// no validation rules for BusinessLevel1Uid

	// no validation rules for BusinessLevel2Id

	// no validation rules for BusinessLevel2Name

	// no validation rules for BusinessLevel2Uid

	// no validation rules for BusinessLevel3Id

	// no validation rules for BusinessLevel3Name

	// no validation rules for BusinessLevel3Uid

	// no validation rules for BusinessDepartmentId

	// no validation rules for BusinessDepartmentName

	// no validation rules for OperationProductName

	// no validation rules for OperationProductId

	if len(errors) > 0 {
		return BusinessLevel3DetailInfoMultiError(errors)
	}

	return nil
}

// BusinessLevel3DetailInfoMultiError is an error wrapping multiple validation
// errors returned by BusinessLevel3DetailInfo.ValidateAll() if the designated
// constraints aren't met.
type BusinessLevel3DetailInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessLevel3DetailInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessLevel3DetailInfoMultiError) AllErrors() []error { return m }

// BusinessLevel3DetailInfoValidationError is the validation error returned by
// BusinessLevel3DetailInfo.Validate if the designated constraints aren't met.
type BusinessLevel3DetailInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessLevel3DetailInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessLevel3DetailInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessLevel3DetailInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessLevel3DetailInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessLevel3DetailInfoValidationError) ErrorName() string {
	return "BusinessLevel3DetailInfoValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessLevel3DetailInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessLevel3DetailInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessLevel3DetailInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessLevel3DetailInfoValidationError{}

// Validate checks the field values on CreateNamespaceForSuanliRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNamespaceForSuanliRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNamespaceForSuanliRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateNamespaceForSuanliRequestMultiError, or nil if none found.
func (m *CreateNamespaceForSuanliRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNamespaceForSuanliRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Creator

	for idx, item := range m.GetSubQuotaInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateNamespaceForSuanliRequestValidationError{
						field:  fmt.Sprintf("SubQuotaInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateNamespaceForSuanliRequestValidationError{
						field:  fmt.Sprintf("SubQuotaInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateNamespaceForSuanliRequestValidationError{
					field:  fmt.Sprintf("SubQuotaInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for BkBizId

	// no validation rules for BkModuleId

	if len(errors) > 0 {
		return CreateNamespaceForSuanliRequestMultiError(errors)
	}

	return nil
}

// CreateNamespaceForSuanliRequestMultiError is an error wrapping multiple
// validation errors returned by CreateNamespaceForSuanliRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateNamespaceForSuanliRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNamespaceForSuanliRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNamespaceForSuanliRequestMultiError) AllErrors() []error { return m }

// CreateNamespaceForSuanliRequestValidationError is the validation error
// returned by CreateNamespaceForSuanliRequest.Validate if the designated
// constraints aren't met.
type CreateNamespaceForSuanliRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceForSuanliRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespaceForSuanliRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespaceForSuanliRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespaceForSuanliRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespaceForSuanliRequestValidationError) ErrorName() string {
	return "CreateNamespaceForSuanliRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceForSuanliRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceForSuanliRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceForSuanliRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceForSuanliRequestValidationError{}

// Validate checks the field values on NamespaceQuotaForSuanli with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NamespaceQuotaForSuanli) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamespaceQuotaForSuanli with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NamespaceQuotaForSuanliMultiError, or nil if none found.
func (m *NamespaceQuotaForSuanli) ValidateAll() error {
	return m.validate(true)
}

func (m *NamespaceQuotaForSuanli) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for SubQuotaLabels

	// no validation rules for SubQuotaResources

	// no validation rules for Location

	if len(errors) > 0 {
		return NamespaceQuotaForSuanliMultiError(errors)
	}

	return nil
}

// NamespaceQuotaForSuanliMultiError is an error wrapping multiple validation
// errors returned by NamespaceQuotaForSuanli.ValidateAll() if the designated
// constraints aren't met.
type NamespaceQuotaForSuanliMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespaceQuotaForSuanliMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespaceQuotaForSuanliMultiError) AllErrors() []error { return m }

// NamespaceQuotaForSuanliValidationError is the validation error returned by
// NamespaceQuotaForSuanli.Validate if the designated constraints aren't met.
type NamespaceQuotaForSuanliValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceQuotaForSuanliValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceQuotaForSuanliValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceQuotaForSuanliValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceQuotaForSuanliValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceQuotaForSuanliValidationError) ErrorName() string {
	return "NamespaceQuotaForSuanliValidationError"
}

// Error satisfies the builtin error interface
func (e NamespaceQuotaForSuanliValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespaceQuotaForSuanli.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceQuotaForSuanliValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceQuotaForSuanliValidationError{}

// Validate checks the field values on CreateNamespaceForSuanliResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateNamespaceForSuanliResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNamespaceForSuanliResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateNamespaceForSuanliResponseMultiError, or nil if none found.
func (m *CreateNamespaceForSuanliResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNamespaceForSuanliResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateNamespaceForSuanliResponseMultiError(errors)
	}

	return nil
}

// CreateNamespaceForSuanliResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateNamespaceForSuanliResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateNamespaceForSuanliResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNamespaceForSuanliResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNamespaceForSuanliResponseMultiError) AllErrors() []error { return m }

// CreateNamespaceForSuanliResponseValidationError is the validation error
// returned by CreateNamespaceForSuanliResponse.Validate if the designated
// constraints aren't met.
type CreateNamespaceForSuanliResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceForSuanliResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespaceForSuanliResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespaceForSuanliResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespaceForSuanliResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespaceForSuanliResponseValidationError) ErrorName() string {
	return "CreateNamespaceForSuanliResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceForSuanliResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceForSuanliResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceForSuanliResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceForSuanliResponseValidationError{}

// Validate checks the field values on CreateNamespaceForTaijiV3Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateNamespaceForTaijiV3Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNamespaceForTaijiV3Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateNamespaceForTaijiV3RequestMultiError, or nil if none found.
func (m *CreateNamespaceForTaijiV3Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNamespaceForTaijiV3Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Location

	// no validation rules for Namespace

	// no validation rules for Creator

	for idx, item := range m.GetSubQuotaInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateNamespaceForTaijiV3RequestValidationError{
						field:  fmt.Sprintf("SubQuotaInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateNamespaceForTaijiV3RequestValidationError{
						field:  fmt.Sprintf("SubQuotaInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateNamespaceForTaijiV3RequestValidationError{
					field:  fmt.Sprintf("SubQuotaInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for BkBizId

	// no validation rules for BkModuleId

	if m.ScheduleAlgorithm != nil {
		// no validation rules for ScheduleAlgorithm
	}

	if m.IsPrivateResource != nil {
		// no validation rules for IsPrivateResource
	}

	if len(errors) > 0 {
		return CreateNamespaceForTaijiV3RequestMultiError(errors)
	}

	return nil
}

// CreateNamespaceForTaijiV3RequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateNamespaceForTaijiV3Request.ValidateAll() if the designated
// constraints aren't met.
type CreateNamespaceForTaijiV3RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNamespaceForTaijiV3RequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNamespaceForTaijiV3RequestMultiError) AllErrors() []error { return m }

// CreateNamespaceForTaijiV3RequestValidationError is the validation error
// returned by CreateNamespaceForTaijiV3Request.Validate if the designated
// constraints aren't met.
type CreateNamespaceForTaijiV3RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceForTaijiV3RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespaceForTaijiV3RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespaceForTaijiV3RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespaceForTaijiV3RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespaceForTaijiV3RequestValidationError) ErrorName() string {
	return "CreateNamespaceForTaijiV3RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceForTaijiV3RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceForTaijiV3Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceForTaijiV3RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceForTaijiV3RequestValidationError{}

// Validate checks the field values on CreateNamespaceForTaijiV3Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateNamespaceForTaijiV3Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNamespaceForTaijiV3Response
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateNamespaceForTaijiV3ResponseMultiError, or nil if none found.
func (m *CreateNamespaceForTaijiV3Response) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNamespaceForTaijiV3Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNamespaceForTaijiV3ResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNamespaceForTaijiV3ResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespaceForTaijiV3ResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNamespaceForTaijiV3ResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNamespaceForTaijiV3ResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespaceForTaijiV3ResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateNamespaceForTaijiV3ResponseMultiError(errors)
	}

	return nil
}

// CreateNamespaceForTaijiV3ResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateNamespaceForTaijiV3Response.ValidateAll() if the designated
// constraints aren't met.
type CreateNamespaceForTaijiV3ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNamespaceForTaijiV3ResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNamespaceForTaijiV3ResponseMultiError) AllErrors() []error { return m }

// CreateNamespaceForTaijiV3ResponseValidationError is the validation error
// returned by CreateNamespaceForTaijiV3Response.Validate if the designated
// constraints aren't met.
type CreateNamespaceForTaijiV3ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceForTaijiV3ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespaceForTaijiV3ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespaceForTaijiV3ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespaceForTaijiV3ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespaceForTaijiV3ResponseValidationError) ErrorName() string {
	return "CreateNamespaceForTaijiV3ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceForTaijiV3ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceForTaijiV3Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceForTaijiV3ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceForTaijiV3ResponseValidationError{}

// Validate checks the field values on CreateNamespaceForTaijiV3Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNamespaceForTaijiV3Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNamespaceForTaijiV3Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateNamespaceForTaijiV3DataMultiError, or nil if none found.
func (m *CreateNamespaceForTaijiV3Data) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNamespaceForTaijiV3Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for KubeCfg

	// no validation rules for RepeatedBusinessMould

	if len(errors) > 0 {
		return CreateNamespaceForTaijiV3DataMultiError(errors)
	}

	return nil
}

// CreateNamespaceForTaijiV3DataMultiError is an error wrapping multiple
// validation errors returned by CreateNamespaceForTaijiV3Data.ValidateAll()
// if the designated constraints aren't met.
type CreateNamespaceForTaijiV3DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNamespaceForTaijiV3DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNamespaceForTaijiV3DataMultiError) AllErrors() []error { return m }

// CreateNamespaceForTaijiV3DataValidationError is the validation error
// returned by CreateNamespaceForTaijiV3Data.Validate if the designated
// constraints aren't met.
type CreateNamespaceForTaijiV3DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceForTaijiV3DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespaceForTaijiV3DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespaceForTaijiV3DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespaceForTaijiV3DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespaceForTaijiV3DataValidationError) ErrorName() string {
	return "CreateNamespaceForTaijiV3DataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceForTaijiV3DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceForTaijiV3Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceForTaijiV3DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceForTaijiV3DataValidationError{}

// Validate checks the field values on CreateModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateModuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateModuleRequestMultiError, or nil if none found.
func (m *CreateModuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateModuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BkModuleName

	// no validation rules for Platform

	if len(errors) > 0 {
		return CreateModuleRequestMultiError(errors)
	}

	return nil
}

// CreateModuleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateModuleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateModuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateModuleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateModuleRequestMultiError) AllErrors() []error { return m }

// CreateModuleRequestValidationError is the validation error returned by
// CreateModuleRequest.Validate if the designated constraints aren't met.
type CreateModuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateModuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateModuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateModuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateModuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateModuleRequestValidationError) ErrorName() string {
	return "CreateModuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateModuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateModuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateModuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateModuleRequestValidationError{}

// Validate checks the field values on CreateModuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateModuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateModuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateModuleResponseMultiError, or nil if none found.
func (m *CreateModuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateModuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for RequestID

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateModuleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateModuleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateModuleResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateModuleResponseMultiError(errors)
	}

	return nil
}

// CreateModuleResponseMultiError is an error wrapping multiple validation
// errors returned by CreateModuleResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateModuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateModuleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateModuleResponseMultiError) AllErrors() []error { return m }

// CreateModuleResponseValidationError is the validation error returned by
// CreateModuleResponse.Validate if the designated constraints aren't met.
type CreateModuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateModuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateModuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateModuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateModuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateModuleResponseValidationError) ErrorName() string {
	return "CreateModuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateModuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateModuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateModuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateModuleResponseValidationError{}

// Validate checks the field values on CreateModuleData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateModuleData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateModuleData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateModuleDataMultiError, or nil if none found.
func (m *CreateModuleData) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateModuleData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BkBizId

	// no validation rules for BkModuleId

	// no validation rules for BkModuleName

	// no validation rules for BkModuleType

	// no validation rules for BkParentId

	// no validation rules for BkSetId

	// no validation rules for BkSupplierAccount

	// no validation rules for CreateTime

	// no validation rules for Default

	// no validation rules for HostApplyEnabled

	// no validation rules for LastTime

	// no validation rules for ServiceCategoryId

	// no validation rules for ServiceTemplateId

	// no validation rules for SetTemplateId

	if len(errors) > 0 {
		return CreateModuleDataMultiError(errors)
	}

	return nil
}

// CreateModuleDataMultiError is an error wrapping multiple validation errors
// returned by CreateModuleData.ValidateAll() if the designated constraints
// aren't met.
type CreateModuleDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateModuleDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateModuleDataMultiError) AllErrors() []error { return m }

// CreateModuleDataValidationError is the validation error returned by
// CreateModuleData.Validate if the designated constraints aren't met.
type CreateModuleDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateModuleDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateModuleDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateModuleDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateModuleDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateModuleDataValidationError) ErrorName() string { return "CreateModuleDataValidationError" }

// Error satisfies the builtin error interface
func (e CreateModuleDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateModuleData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateModuleDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateModuleDataValidationError{}

// Validate checks the field values on GetKubeConfigForTaijiRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKubeConfigForTaijiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKubeConfigForTaijiRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetKubeConfigForTaijiRequestMultiError, or nil if none found.
func (m *GetKubeConfigForTaijiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKubeConfigForTaijiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NameSpace

	if len(errors) > 0 {
		return GetKubeConfigForTaijiRequestMultiError(errors)
	}

	return nil
}

// GetKubeConfigForTaijiRequestMultiError is an error wrapping multiple
// validation errors returned by GetKubeConfigForTaijiRequest.ValidateAll() if
// the designated constraints aren't met.
type GetKubeConfigForTaijiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKubeConfigForTaijiRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKubeConfigForTaijiRequestMultiError) AllErrors() []error { return m }

// GetKubeConfigForTaijiRequestValidationError is the validation error returned
// by GetKubeConfigForTaijiRequest.Validate if the designated constraints
// aren't met.
type GetKubeConfigForTaijiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKubeConfigForTaijiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKubeConfigForTaijiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKubeConfigForTaijiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKubeConfigForTaijiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKubeConfigForTaijiRequestValidationError) ErrorName() string {
	return "GetKubeConfigForTaijiRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetKubeConfigForTaijiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKubeConfigForTaijiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKubeConfigForTaijiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKubeConfigForTaijiRequestValidationError{}

// Validate checks the field values on UpdateQuotaInfoForTaijiRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateQuotaInfoForTaijiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateQuotaInfoForTaijiRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateQuotaInfoForTaijiRequestMultiError, or nil if none found.
func (m *UpdateQuotaInfoForTaijiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateQuotaInfoForTaijiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	for idx, item := range m.GetSubQuotaInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateQuotaInfoForTaijiRequestValidationError{
						field:  fmt.Sprintf("SubQuotaInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateQuotaInfoForTaijiRequestValidationError{
						field:  fmt.Sprintf("SubQuotaInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateQuotaInfoForTaijiRequestValidationError{
					field:  fmt.Sprintf("SubQuotaInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Location

	// no validation rules for Operator

	if len(errors) > 0 {
		return UpdateQuotaInfoForTaijiRequestMultiError(errors)
	}

	return nil
}

// UpdateQuotaInfoForTaijiRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateQuotaInfoForTaijiRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateQuotaInfoForTaijiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateQuotaInfoForTaijiRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateQuotaInfoForTaijiRequestMultiError) AllErrors() []error { return m }

// UpdateQuotaInfoForTaijiRequestValidationError is the validation error
// returned by UpdateQuotaInfoForTaijiRequest.Validate if the designated
// constraints aren't met.
type UpdateQuotaInfoForTaijiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateQuotaInfoForTaijiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateQuotaInfoForTaijiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateQuotaInfoForTaijiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateQuotaInfoForTaijiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateQuotaInfoForTaijiRequestValidationError) ErrorName() string {
	return "UpdateQuotaInfoForTaijiRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateQuotaInfoForTaijiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateQuotaInfoForTaijiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateQuotaInfoForTaijiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateQuotaInfoForTaijiRequestValidationError{}

// Validate checks the field values on UpdateQuotaInfoForTaijiResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateQuotaInfoForTaijiResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateQuotaInfoForTaijiResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateQuotaInfoForTaijiResponseMultiError, or nil if none found.
func (m *UpdateQuotaInfoForTaijiResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateQuotaInfoForTaijiResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateQuotaInfoForTaijiResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateQuotaInfoForTaijiResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateQuotaInfoForTaijiResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateQuotaInfoForTaijiResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateQuotaInfoForTaijiResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateQuotaInfoForTaijiResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateQuotaInfoForTaijiResponseMultiError(errors)
	}

	return nil
}

// UpdateQuotaInfoForTaijiResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateQuotaInfoForTaijiResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateQuotaInfoForTaijiResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateQuotaInfoForTaijiResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateQuotaInfoForTaijiResponseMultiError) AllErrors() []error { return m }

// UpdateQuotaInfoForTaijiResponseValidationError is the validation error
// returned by UpdateQuotaInfoForTaijiResponse.Validate if the designated
// constraints aren't met.
type UpdateQuotaInfoForTaijiResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateQuotaInfoForTaijiResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateQuotaInfoForTaijiResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateQuotaInfoForTaijiResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateQuotaInfoForTaijiResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateQuotaInfoForTaijiResponseValidationError) ErrorName() string {
	return "UpdateQuotaInfoForTaijiResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateQuotaInfoForTaijiResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateQuotaInfoForTaijiResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateQuotaInfoForTaijiResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateQuotaInfoForTaijiResponseValidationError{}

// Validate checks the field values on GetQuotaInfoForTaijiRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQuotaInfoForTaijiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuotaInfoForTaijiRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQuotaInfoForTaijiRequestMultiError, or nil if none found.
func (m *GetQuotaInfoForTaijiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuotaInfoForTaijiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if len(errors) > 0 {
		return GetQuotaInfoForTaijiRequestMultiError(errors)
	}

	return nil
}

// GetQuotaInfoForTaijiRequestMultiError is an error wrapping multiple
// validation errors returned by GetQuotaInfoForTaijiRequest.ValidateAll() if
// the designated constraints aren't met.
type GetQuotaInfoForTaijiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuotaInfoForTaijiRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuotaInfoForTaijiRequestMultiError) AllErrors() []error { return m }

// GetQuotaInfoForTaijiRequestValidationError is the validation error returned
// by GetQuotaInfoForTaijiRequest.Validate if the designated constraints
// aren't met.
type GetQuotaInfoForTaijiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuotaInfoForTaijiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuotaInfoForTaijiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuotaInfoForTaijiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuotaInfoForTaijiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuotaInfoForTaijiRequestValidationError) ErrorName() string {
	return "GetQuotaInfoForTaijiRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuotaInfoForTaijiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuotaInfoForTaijiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuotaInfoForTaijiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuotaInfoForTaijiRequestValidationError{}

// Validate checks the field values on GetQuotaInfoForTaijiResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQuotaInfoForTaijiResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuotaInfoForTaijiResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQuotaInfoForTaijiResponseMultiError, or nil if none found.
func (m *GetQuotaInfoForTaijiResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuotaInfoForTaijiResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetQuotaInfoForTaijiResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetQuotaInfoForTaijiResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetQuotaInfoForTaijiResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetQuotaInfoForTaijiResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetQuotaInfoForTaijiResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetQuotaInfoForTaijiResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetQuotaInfoForTaijiResponseMultiError(errors)
	}

	return nil
}

// GetQuotaInfoForTaijiResponseMultiError is an error wrapping multiple
// validation errors returned by GetQuotaInfoForTaijiResponse.ValidateAll() if
// the designated constraints aren't met.
type GetQuotaInfoForTaijiResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuotaInfoForTaijiResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuotaInfoForTaijiResponseMultiError) AllErrors() []error { return m }

// GetQuotaInfoForTaijiResponseValidationError is the validation error returned
// by GetQuotaInfoForTaijiResponse.Validate if the designated constraints
// aren't met.
type GetQuotaInfoForTaijiResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuotaInfoForTaijiResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuotaInfoForTaijiResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuotaInfoForTaijiResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuotaInfoForTaijiResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuotaInfoForTaijiResponseValidationError) ErrorName() string {
	return "GetQuotaInfoForTaijiResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuotaInfoForTaijiResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuotaInfoForTaijiResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuotaInfoForTaijiResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuotaInfoForTaijiResponseValidationError{}

// Validate checks the field values on GetQuotaInfoForTaijiData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQuotaInfoForTaijiData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuotaInfoForTaijiData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQuotaInfoForTaijiDataMultiError, or nil if none found.
func (m *GetQuotaInfoForTaijiData) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuotaInfoForTaijiData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	// no validation rules for Type

	// no validation rules for Id

	// no validation rules for CardType

	// no validation rules for UsedGpus

	// no validation rules for AvailableGpus

	// no validation rules for TotalGpus

	// no validation rules for UsedGpuMemoryGb

	// no validation rules for TotalGpuMemoryGb

	// no validation rules for Exclusive

	// no validation rules for AvailableGpuDetails

	if len(errors) > 0 {
		return GetQuotaInfoForTaijiDataMultiError(errors)
	}

	return nil
}

// GetQuotaInfoForTaijiDataMultiError is an error wrapping multiple validation
// errors returned by GetQuotaInfoForTaijiData.ValidateAll() if the designated
// constraints aren't met.
type GetQuotaInfoForTaijiDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuotaInfoForTaijiDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuotaInfoForTaijiDataMultiError) AllErrors() []error { return m }

// GetQuotaInfoForTaijiDataValidationError is the validation error returned by
// GetQuotaInfoForTaijiData.Validate if the designated constraints aren't met.
type GetQuotaInfoForTaijiDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuotaInfoForTaijiDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuotaInfoForTaijiDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuotaInfoForTaijiDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuotaInfoForTaijiDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuotaInfoForTaijiDataValidationError) ErrorName() string {
	return "GetQuotaInfoForTaijiDataValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuotaInfoForTaijiDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuotaInfoForTaijiData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuotaInfoForTaijiDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuotaInfoForTaijiDataValidationError{}

// Validate checks the field values on CreateNamespaceForTaijiRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNamespaceForTaijiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNamespaceForTaijiRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateNamespaceForTaijiRequestMultiError, or nil if none found.
func (m *CreateNamespaceForTaijiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNamespaceForTaijiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Creator

	// no validation rules for ScheduleAlgorithm

	for idx, item := range m.GetSubQuotaInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateNamespaceForTaijiRequestValidationError{
						field:  fmt.Sprintf("SubQuotaInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateNamespaceForTaijiRequestValidationError{
						field:  fmt.Sprintf("SubQuotaInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateNamespaceForTaijiRequestValidationError{
					field:  fmt.Sprintf("SubQuotaInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsPrivateResource

	// no validation rules for BkBizId

	// no validation rules for BkModuleId

	// no validation rules for Tag

	// no validation rules for Location

	if len(errors) > 0 {
		return CreateNamespaceForTaijiRequestMultiError(errors)
	}

	return nil
}

// CreateNamespaceForTaijiRequestMultiError is an error wrapping multiple
// validation errors returned by CreateNamespaceForTaijiRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateNamespaceForTaijiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNamespaceForTaijiRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNamespaceForTaijiRequestMultiError) AllErrors() []error { return m }

// CreateNamespaceForTaijiRequestValidationError is the validation error
// returned by CreateNamespaceForTaijiRequest.Validate if the designated
// constraints aren't met.
type CreateNamespaceForTaijiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceForTaijiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespaceForTaijiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespaceForTaijiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespaceForTaijiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespaceForTaijiRequestValidationError) ErrorName() string {
	return "CreateNamespaceForTaijiRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceForTaijiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceForTaijiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceForTaijiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceForTaijiRequestValidationError{}

// Validate checks the field values on NamespaceQuotaForTaiji with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NamespaceQuotaForTaiji) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamespaceQuotaForTaiji with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NamespaceQuotaForTaijiMultiError, or nil if none found.
func (m *NamespaceQuotaForTaiji) ValidateAll() error {
	return m.validate(true)
}

func (m *NamespaceQuotaForTaiji) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for SubQuotaLabels

	// no validation rules for SubQuotaResources

	// no validation rules for Location

	if len(errors) > 0 {
		return NamespaceQuotaForTaijiMultiError(errors)
	}

	return nil
}

// NamespaceQuotaForTaijiMultiError is an error wrapping multiple validation
// errors returned by NamespaceQuotaForTaiji.ValidateAll() if the designated
// constraints aren't met.
type NamespaceQuotaForTaijiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespaceQuotaForTaijiMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespaceQuotaForTaijiMultiError) AllErrors() []error { return m }

// NamespaceQuotaForTaijiValidationError is the validation error returned by
// NamespaceQuotaForTaiji.Validate if the designated constraints aren't met.
type NamespaceQuotaForTaijiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceQuotaForTaijiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceQuotaForTaijiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceQuotaForTaijiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceQuotaForTaijiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceQuotaForTaijiValidationError) ErrorName() string {
	return "NamespaceQuotaForTaijiValidationError"
}

// Error satisfies the builtin error interface
func (e NamespaceQuotaForTaijiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespaceQuotaForTaiji.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceQuotaForTaijiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceQuotaForTaijiValidationError{}

// Validate checks the field values on CreateNamespaceForTaijiResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNamespaceForTaijiResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNamespaceForTaijiResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateNamespaceForTaijiResponseMultiError, or nil if none found.
func (m *CreateNamespaceForTaijiResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNamespaceForTaijiResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNamespaceForTaijiResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNamespaceForTaijiResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespaceForTaijiResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNamespaceForTaijiResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNamespaceForTaijiResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespaceForTaijiResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateNamespaceForTaijiResponseMultiError(errors)
	}

	return nil
}

// CreateNamespaceForTaijiResponseMultiError is an error wrapping multiple
// validation errors returned by CreateNamespaceForTaijiResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateNamespaceForTaijiResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNamespaceForTaijiResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNamespaceForTaijiResponseMultiError) AllErrors() []error { return m }

// CreateNamespaceForTaijiResponseValidationError is the validation error
// returned by CreateNamespaceForTaijiResponse.Validate if the designated
// constraints aren't met.
type CreateNamespaceForTaijiResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceForTaijiResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespaceForTaijiResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespaceForTaijiResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespaceForTaijiResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespaceForTaijiResponseValidationError) ErrorName() string {
	return "CreateNamespaceForTaijiResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceForTaijiResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceForTaijiResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceForTaijiResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceForTaijiResponseValidationError{}

// Validate checks the field values on TaijiDefaultResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaijiDefaultResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaijiDefaultResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaijiDefaultResultMultiError, or nil if none found.
func (m *TaijiDefaultResult) ValidateAll() error {
	return m.validate(true)
}

func (m *TaijiDefaultResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaijiDefaultResultValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaijiDefaultResultValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaijiDefaultResultValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaijiDefaultResultValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaijiDefaultResultValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaijiDefaultResultValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TaijiDefaultResultMultiError(errors)
	}

	return nil
}

// TaijiDefaultResultMultiError is an error wrapping multiple validation errors
// returned by TaijiDefaultResult.ValidateAll() if the designated constraints
// aren't met.
type TaijiDefaultResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaijiDefaultResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaijiDefaultResultMultiError) AllErrors() []error { return m }

// TaijiDefaultResultValidationError is the validation error returned by
// TaijiDefaultResult.Validate if the designated constraints aren't met.
type TaijiDefaultResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaijiDefaultResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaijiDefaultResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaijiDefaultResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaijiDefaultResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaijiDefaultResultValidationError) ErrorName() string {
	return "TaijiDefaultResultValidationError"
}

// Error satisfies the builtin error interface
func (e TaijiDefaultResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaijiDefaultResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaijiDefaultResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaijiDefaultResultValidationError{}

// Validate checks the field values on GetKubeConfigForTaijiResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKubeConfigForTaijiResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKubeConfigForTaijiResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetKubeConfigForTaijiResponseMultiError, or nil if none found.
func (m *GetKubeConfigForTaijiResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKubeConfigForTaijiResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetKubeConfigForTaijiResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetKubeConfigForTaijiResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetKubeConfigForTaijiResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetKubeConfigForTaijiResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetKubeConfigForTaijiResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetKubeConfigForTaijiResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetKubeConfigForTaijiResponseMultiError(errors)
	}

	return nil
}

// GetKubeConfigForTaijiResponseMultiError is an error wrapping multiple
// validation errors returned by GetKubeConfigForTaijiResponse.ValidateAll()
// if the designated constraints aren't met.
type GetKubeConfigForTaijiResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKubeConfigForTaijiResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKubeConfigForTaijiResponseMultiError) AllErrors() []error { return m }

// GetKubeConfigForTaijiResponseValidationError is the validation error
// returned by GetKubeConfigForTaijiResponse.Validate if the designated
// constraints aren't met.
type GetKubeConfigForTaijiResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKubeConfigForTaijiResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKubeConfigForTaijiResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKubeConfigForTaijiResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKubeConfigForTaijiResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKubeConfigForTaijiResponseValidationError) ErrorName() string {
	return "GetKubeConfigForTaijiResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetKubeConfigForTaijiResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKubeConfigForTaijiResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKubeConfigForTaijiResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKubeConfigForTaijiResponseValidationError{}

// Validate checks the field values on TaijiDefaultResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaijiDefaultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaijiDefaultResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaijiDefaultResponseMultiError, or nil if none found.
func (m *TaijiDefaultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TaijiDefaultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Cause

	if len(errors) > 0 {
		return TaijiDefaultResponseMultiError(errors)
	}

	return nil
}

// TaijiDefaultResponseMultiError is an error wrapping multiple validation
// errors returned by TaijiDefaultResponse.ValidateAll() if the designated
// constraints aren't met.
type TaijiDefaultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaijiDefaultResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaijiDefaultResponseMultiError) AllErrors() []error { return m }

// TaijiDefaultResponseValidationError is the validation error returned by
// TaijiDefaultResponse.Validate if the designated constraints aren't met.
type TaijiDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaijiDefaultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaijiDefaultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaijiDefaultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaijiDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaijiDefaultResponseValidationError) ErrorName() string {
	return "TaijiDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TaijiDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaijiDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaijiDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaijiDefaultResponseValidationError{}

// Validate checks the field values on TaijiDefaultData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TaijiDefaultData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaijiDefaultData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaijiDefaultDataMultiError, or nil if none found.
func (m *TaijiDefaultData) ValidateAll() error {
	return m.validate(true)
}

func (m *TaijiDefaultData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for KubeCfg

	if len(errors) > 0 {
		return TaijiDefaultDataMultiError(errors)
	}

	return nil
}

// TaijiDefaultDataMultiError is an error wrapping multiple validation errors
// returned by TaijiDefaultData.ValidateAll() if the designated constraints
// aren't met.
type TaijiDefaultDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaijiDefaultDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaijiDefaultDataMultiError) AllErrors() []error { return m }

// TaijiDefaultDataValidationError is the validation error returned by
// TaijiDefaultData.Validate if the designated constraints aren't met.
type TaijiDefaultDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaijiDefaultDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaijiDefaultDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaijiDefaultDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaijiDefaultDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaijiDefaultDataValidationError) ErrorName() string { return "TaijiDefaultDataValidationError" }

// Error satisfies the builtin error interface
func (e TaijiDefaultDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaijiDefaultData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaijiDefaultDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaijiDefaultDataValidationError{}

// Validate checks the field values on TaijiKubeCfgData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TaijiKubeCfgData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaijiKubeCfgData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaijiKubeCfgDataMultiError, or nil if none found.
func (m *TaijiKubeCfgData) ValidateAll() error {
	return m.validate(true)
}

func (m *TaijiKubeCfgData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for KubeCfg

	if len(errors) > 0 {
		return TaijiKubeCfgDataMultiError(errors)
	}

	return nil
}

// TaijiKubeCfgDataMultiError is an error wrapping multiple validation errors
// returned by TaijiKubeCfgData.ValidateAll() if the designated constraints
// aren't met.
type TaijiKubeCfgDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaijiKubeCfgDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaijiKubeCfgDataMultiError) AllErrors() []error { return m }

// TaijiKubeCfgDataValidationError is the validation error returned by
// TaijiKubeCfgData.Validate if the designated constraints aren't met.
type TaijiKubeCfgDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaijiKubeCfgDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaijiKubeCfgDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaijiKubeCfgDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaijiKubeCfgDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaijiKubeCfgDataValidationError) ErrorName() string { return "TaijiKubeCfgDataValidationError" }

// Error satisfies the builtin error interface
func (e TaijiKubeCfgDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaijiKubeCfgData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaijiKubeCfgDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaijiKubeCfgDataValidationError{}

// Validate checks the field values on SendRtxRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendRtxRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendRtxRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendRtxRequestMultiError,
// or nil if none found.
func (m *SendRtxRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendRtxRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sender

	// no validation rules for Title

	// no validation rules for Message

	// no validation rules for IsIgnoreFormerStaff

	if len(errors) > 0 {
		return SendRtxRequestMultiError(errors)
	}

	return nil
}

// SendRtxRequestMultiError is an error wrapping multiple validation errors
// returned by SendRtxRequest.ValidateAll() if the designated constraints
// aren't met.
type SendRtxRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendRtxRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendRtxRequestMultiError) AllErrors() []error { return m }

// SendRtxRequestValidationError is the validation error returned by
// SendRtxRequest.Validate if the designated constraints aren't met.
type SendRtxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendRtxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendRtxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendRtxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendRtxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendRtxRequestValidationError) ErrorName() string { return "SendRtxRequestValidationError" }

// Error satisfies the builtin error interface
func (e SendRtxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendRtxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendRtxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendRtxRequestValidationError{}

// Validate checks the field values on SendRtxResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendRtxResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendRtxResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendRtxResponseMultiError, or nil if none found.
func (m *SendRtxResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendRtxResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if len(errors) > 0 {
		return SendRtxResponseMultiError(errors)
	}

	return nil
}

// SendRtxResponseMultiError is an error wrapping multiple validation errors
// returned by SendRtxResponse.ValidateAll() if the designated constraints
// aren't met.
type SendRtxResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendRtxResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendRtxResponseMultiError) AllErrors() []error { return m }

// SendRtxResponseValidationError is the validation error returned by
// SendRtxResponse.Validate if the designated constraints aren't met.
type SendRtxResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendRtxResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendRtxResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendRtxResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendRtxResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendRtxResponseValidationError) ErrorName() string { return "SendRtxResponseValidationError" }

// Error satisfies the builtin error interface
func (e SendRtxResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendRtxResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendRtxResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendRtxResponseValidationError{}

// Validate checks the field values on SendMailRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendMailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendMailRequestMultiError, or nil if none found.
func (m *SendMailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SendWay

	// no validation rules for Sender

	// no validation rules for Password

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for IsContentBase64

	// no validation rules for BodyFormat

	// no validation rules for EmailType

	// no validation rules for Priority

	// no validation rules for Location

	// no validation rules for Organizer

	// no validation rules for StartTime

	// no validation rules for EndTime

	for idx, item := range m.GetAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendMailRequestValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendMailRequestValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendMailRequestValidationError{
					field:  fmt.Sprintf("Attachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for MimeSubtype

	if len(errors) > 0 {
		return SendMailRequestMultiError(errors)
	}

	return nil
}

// SendMailRequestMultiError is an error wrapping multiple validation errors
// returned by SendMailRequest.ValidateAll() if the designated constraints
// aren't met.
type SendMailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMailRequestMultiError) AllErrors() []error { return m }

// SendMailRequestValidationError is the validation error returned by
// SendMailRequest.Validate if the designated constraints aren't met.
type SendMailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMailRequestValidationError) ErrorName() string { return "SendMailRequestValidationError" }

// Error satisfies the builtin error interface
func (e SendMailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMailRequestValidationError{}

// Validate checks the field values on MailAttachment with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MailAttachment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MailAttachment with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MailAttachmentMultiError,
// or nil if none found.
func (m *MailAttachment) ValidateAll() error {
	return m.validate(true)
}

func (m *MailAttachment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Filename

	// no validation rules for Content

	// no validation rules for Type

	// no validation rules for Disposition

	// no validation rules for ContentId

	if len(errors) > 0 {
		return MailAttachmentMultiError(errors)
	}

	return nil
}

// MailAttachmentMultiError is an error wrapping multiple validation errors
// returned by MailAttachment.ValidateAll() if the designated constraints
// aren't met.
type MailAttachmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MailAttachmentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MailAttachmentMultiError) AllErrors() []error { return m }

// MailAttachmentValidationError is the validation error returned by
// MailAttachment.Validate if the designated constraints aren't met.
type MailAttachmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MailAttachmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MailAttachmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MailAttachmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MailAttachmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MailAttachmentValidationError) ErrorName() string { return "MailAttachmentValidationError" }

// Error satisfies the builtin error interface
func (e MailAttachmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMailAttachment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MailAttachmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MailAttachmentValidationError{}

// Validate checks the field values on SendMailResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendMailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendMailResponseMultiError, or nil if none found.
func (m *SendMailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if len(errors) > 0 {
		return SendMailResponseMultiError(errors)
	}

	return nil
}

// SendMailResponseMultiError is an error wrapping multiple validation errors
// returned by SendMailResponse.ValidateAll() if the designated constraints
// aren't met.
type SendMailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMailResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMailResponseMultiError) AllErrors() []error { return m }

// SendMailResponseValidationError is the validation error returned by
// SendMailResponse.Validate if the designated constraints aren't met.
type SendMailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMailResponseValidationError) ErrorName() string { return "SendMailResponseValidationError" }

// Error satisfies the builtin error interface
func (e SendMailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMailResponseValidationError{}

// Validate checks the field values on SendMsgRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendMsgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMsgRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendMsgRequestMultiError,
// or nil if none found.
func (m *SendMsgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMsgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ImToken

	// no validation rules for AppId

	// no validation rules for AppSecret

	// no validation rules for RobotCode

	// no validation rules for AppCode

	// no validation rules for AppSecretBody

	// no validation rules for Im

	// no validation rules for MsgType

	if all {
		switch v := interface{}(m.GetMsgParam()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendMsgRequestValidationError{
					field:  "MsgParam",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendMsgRequestValidationError{
					field:  "MsgParam",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMsgParam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMsgRequestValidationError{
				field:  "MsgParam",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReceiver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendMsgRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendMsgRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceiver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMsgRequestValidationError{
				field:  "Receiver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendMsgRequestMultiError(errors)
	}

	return nil
}

// SendMsgRequestMultiError is an error wrapping multiple validation errors
// returned by SendMsgRequest.ValidateAll() if the designated constraints
// aren't met.
type SendMsgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMsgRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMsgRequestMultiError) AllErrors() []error { return m }

// SendMsgRequestValidationError is the validation error returned by
// SendMsgRequest.Validate if the designated constraints aren't met.
type SendMsgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMsgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMsgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMsgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMsgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMsgRequestValidationError) ErrorName() string { return "SendMsgRequestValidationError" }

// Error satisfies the builtin error interface
func (e SendMsgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMsgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMsgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMsgRequestValidationError{}

// Validate checks the field values on MsgParam with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MsgParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MsgParam with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MsgParamMultiError, or nil
// if none found.
func (m *MsgParam) ValidateAll() error {
	return m.validate(true)
}

func (m *MsgParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	if len(errors) > 0 {
		return MsgParamMultiError(errors)
	}

	return nil
}

// MsgParamMultiError is an error wrapping multiple validation errors returned
// by MsgParam.ValidateAll() if the designated constraints aren't met.
type MsgParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MsgParamMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MsgParamMultiError) AllErrors() []error { return m }

// MsgParamValidationError is the validation error returned by
// MsgParam.Validate if the designated constraints aren't met.
type MsgParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MsgParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MsgParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MsgParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MsgParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MsgParamValidationError) ErrorName() string { return "MsgParamValidationError" }

// Error satisfies the builtin error interface
func (e MsgParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMsgParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MsgParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MsgParamValidationError{}

// Validate checks the field values on Receiver with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Receiver) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Receiver with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReceiverMultiError, or nil
// if none found.
func (m *Receiver) ValidateAll() error {
	return m.validate(true)
}

func (m *Receiver) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReceiverType

	if len(errors) > 0 {
		return ReceiverMultiError(errors)
	}

	return nil
}

// ReceiverMultiError is an error wrapping multiple validation errors returned
// by Receiver.ValidateAll() if the designated constraints aren't met.
type ReceiverMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceiverMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceiverMultiError) AllErrors() []error { return m }

// ReceiverValidationError is the validation error returned by
// Receiver.Validate if the designated constraints aren't met.
type ReceiverValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceiverValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceiverValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceiverValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceiverValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceiverValidationError) ErrorName() string { return "ReceiverValidationError" }

// Error satisfies the builtin error interface
func (e ReceiverValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceiver.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceiverValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceiverValidationError{}

// Validate checks the field values on SendMsgResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendMsgResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMsgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendMsgResponseMultiError, or nil if none found.
func (m *SendMsgResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMsgResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendMsgResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendMsgResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMsgResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendMsgResponseMultiError(errors)
	}

	return nil
}

// SendMsgResponseMultiError is an error wrapping multiple validation errors
// returned by SendMsgResponse.ValidateAll() if the designated constraints
// aren't met.
type SendMsgResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMsgResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMsgResponseMultiError) AllErrors() []error { return m }

// SendMsgResponseValidationError is the validation error returned by
// SendMsgResponse.Validate if the designated constraints aren't met.
type SendMsgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMsgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMsgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMsgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMsgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMsgResponseValidationError) ErrorName() string { return "SendMsgResponseValidationError" }

// Error satisfies the builtin error interface
func (e SendMsgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMsgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMsgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMsgResponseValidationError{}

// Validate checks the field values on GetKubeConfigForSuanliResponseKubeCfg
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetKubeConfigForSuanliResponseKubeCfg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKubeConfigForSuanliResponseKubeCfg
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetKubeConfigForSuanliResponseKubeCfgMultiError, or nil if none found.
func (m *GetKubeConfigForSuanliResponseKubeCfg) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKubeConfigForSuanliResponseKubeCfg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KubeCfg

	if len(errors) > 0 {
		return GetKubeConfigForSuanliResponseKubeCfgMultiError(errors)
	}

	return nil
}

// GetKubeConfigForSuanliResponseKubeCfgMultiError is an error wrapping
// multiple validation errors returned by
// GetKubeConfigForSuanliResponseKubeCfg.ValidateAll() if the designated
// constraints aren't met.
type GetKubeConfigForSuanliResponseKubeCfgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKubeConfigForSuanliResponseKubeCfgMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKubeConfigForSuanliResponseKubeCfgMultiError) AllErrors() []error { return m }

// GetKubeConfigForSuanliResponseKubeCfgValidationError is the validation error
// returned by GetKubeConfigForSuanliResponseKubeCfg.Validate if the
// designated constraints aren't met.
type GetKubeConfigForSuanliResponseKubeCfgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKubeConfigForSuanliResponseKubeCfgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKubeConfigForSuanliResponseKubeCfgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKubeConfigForSuanliResponseKubeCfgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKubeConfigForSuanliResponseKubeCfgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKubeConfigForSuanliResponseKubeCfgValidationError) ErrorName() string {
	return "GetKubeConfigForSuanliResponseKubeCfgValidationError"
}

// Error satisfies the builtin error interface
func (e GetKubeConfigForSuanliResponseKubeCfgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKubeConfigForSuanliResponseKubeCfg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKubeConfigForSuanliResponseKubeCfgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKubeConfigForSuanliResponseKubeCfgValidationError{}
