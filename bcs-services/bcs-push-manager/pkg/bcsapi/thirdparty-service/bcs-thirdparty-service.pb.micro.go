// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pkg/bcsapi/thirdparty-service/bcs-thirdparty-service.proto

package bcsthirdpartyservice

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for BcsThirdpartyService service

func NewBcsThirdpartyServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "BcsThirdpartyService.CreateNamespaceForTaiji",
			Path:    []string{"/bcsthirdpartyservice/v1/taiji/namespace"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "BcsThirdpartyService.GetQuotaInfoForTaiji",
			Path:    []string{"/bcsthirdpartyservice/v1/taiji/getQuotaInfo/{namespace}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "BcsThirdpartyService.UpdateQuotaInfoForTaiji",
			Path:    []string{"/bcsthirdpartyservice/v1/taiji/quotaInfo"},
			Method:  []string{"PUT"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "BcsThirdpartyService.GetKubeConfigForTaiji",
			Path:    []string{"/bcsthirdpartyservice/v1/taiji/kubeConfig/{nameSpace}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "BcsThirdpartyService.CreateModule",
			Path:    []string{"/bcsthirdpartyservice/v1/{platform}/module"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "BcsThirdpartyService.CreateNamespaceForTaijiV3",
			Path:    []string{"/bcsthirdpartyservice/v1/taiji/v3/namespace"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "BcsThirdpartyService.ImportTjKubeconfig",
			Path:    []string{"/bcsthirdpartyservice/v1/taiji/kubeconfig/import"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "BcsThirdpartyService.UpdateTjKubeconfig",
			Path:    []string{"/bcsthirdpartyservice/v1/taiji/kubeconfig/update"},
			Method:  []string{"PUT"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "BcsThirdpartyService.CreateNamespaceForSuanli",
			Path:    []string{"/bcsthirdpartyservice/v1/suanli/namespace"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "BcsThirdpartyService.UpdateNamespaceForSuanli",
			Path:    []string{"/bcsthirdpartyservice/v1/suanli/namespace"},
			Method:  []string{"PUT"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "BcsThirdpartyService.GetKubeConfigForSuanli",
			Path:    []string{"/bcsthirdpartyservice/v1/suanli/kubeconfig/namespace/{nameSpace}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "BcsThirdpartyService.BatchImportNamespace",
			Path:    []string{"/bcsthirdpartyservice/v1/namespace/import"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "BcsThirdpartyService.ListNamespace",
			Path:    []string{"/bcsthirdpartyservice/v1/namespace"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "BcsThirdpartyService.GetNamespace",
			Path:    []string{"/bcsthirdpartyservice/v1/platform/{platform}/namespace/{namespace}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "BcsThirdpartyService.SendRtx",
			Path:    []string{"/bcsthirdpartyservice/v1/notification/rtx"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "BcsThirdpartyService.SendMail",
			Path:    []string{"/bcsthirdpartyservice/v1/notification/mail"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "BcsThirdpartyService.SendMsg",
			Path:    []string{"/bcsthirdpartyservice/v1/notification/msgv3"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for BcsThirdpartyService service

type BcsThirdpartyService interface {
	CreateNamespaceForTaiji(ctx context.Context, in *CreateNamespaceForTaijiRequest, opts ...client.CallOption) (*CreateNamespaceForTaijiResponse, error)
	GetQuotaInfoForTaiji(ctx context.Context, in *GetQuotaInfoForTaijiRequest, opts ...client.CallOption) (*GetQuotaInfoForTaijiResponse, error)
	UpdateQuotaInfoForTaiji(ctx context.Context, in *UpdateQuotaInfoForTaijiRequest, opts ...client.CallOption) (*UpdateQuotaInfoForTaijiResponse, error)
	GetKubeConfigForTaiji(ctx context.Context, in *GetKubeConfigForTaijiRequest, opts ...client.CallOption) (*GetKubeConfigForTaijiResponse, error)
	CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...client.CallOption) (*CreateModuleResponse, error)
	CreateNamespaceForTaijiV3(ctx context.Context, in *CreateNamespaceForTaijiV3Request, opts ...client.CallOption) (*CreateNamespaceForTaijiV3Response, error)
	ImportTjKubeconfig(ctx context.Context, in *ImportTjKubeconfigRequest, opts ...client.CallOption) (*ImportTjKubeconfigResponse, error)
	UpdateTjKubeconfig(ctx context.Context, in *UpdateTjKubeconfigRequest, opts ...client.CallOption) (*UpdateTjKubeconfigResponse, error)
	CreateNamespaceForSuanli(ctx context.Context, in *CreateNamespaceForSuanliRequest, opts ...client.CallOption) (*CreateNamespaceForSuanliResponse, error)
	UpdateNamespaceForSuanli(ctx context.Context, in *UpdateNamespaceForSuanliRequest, opts ...client.CallOption) (*UpdateNamespaceForSuanliResponse, error)
	GetKubeConfigForSuanli(ctx context.Context, in *GetKubeConfigForSuanliRequest, opts ...client.CallOption) (*GetKubeConfigForSuanliResponse, error)
	BatchImportNamespace(ctx context.Context, in *BatchImportNamespaceRequest, opts ...client.CallOption) (*BatchImportNamespaceResponse, error)
	ListNamespace(ctx context.Context, in *ListNamespaceRequest, opts ...client.CallOption) (*ListNamespaceResponse, error)
	GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...client.CallOption) (*GetNamespaceResponse, error)
	// 新增企业微信发送接口
	SendRtx(ctx context.Context, in *SendRtxRequest, opts ...client.CallOption) (*SendRtxResponse, error)
	// 新增邮件发送接口
	SendMail(ctx context.Context, in *SendMailRequest, opts ...client.CallOption) (*SendMailResponse, error)
	// 新增bkchat v3消息发送接口
	SendMsg(ctx context.Context, in *SendMsgRequest, opts ...client.CallOption) (*SendMsgResponse, error)
}

type bcsThirdpartyService struct {
	c    client.Client
	name string
}

func NewBcsThirdpartyService(name string, c client.Client) BcsThirdpartyService {
	return &bcsThirdpartyService{
		c:    c,
		name: name,
	}
}

func (c *bcsThirdpartyService) CreateNamespaceForTaiji(ctx context.Context, in *CreateNamespaceForTaijiRequest, opts ...client.CallOption) (*CreateNamespaceForTaijiResponse, error) {
	req := c.c.NewRequest(c.name, "BcsThirdpartyService.CreateNamespaceForTaiji", in)
	out := new(CreateNamespaceForTaijiResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyService) GetQuotaInfoForTaiji(ctx context.Context, in *GetQuotaInfoForTaijiRequest, opts ...client.CallOption) (*GetQuotaInfoForTaijiResponse, error) {
	req := c.c.NewRequest(c.name, "BcsThirdpartyService.GetQuotaInfoForTaiji", in)
	out := new(GetQuotaInfoForTaijiResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyService) UpdateQuotaInfoForTaiji(ctx context.Context, in *UpdateQuotaInfoForTaijiRequest, opts ...client.CallOption) (*UpdateQuotaInfoForTaijiResponse, error) {
	req := c.c.NewRequest(c.name, "BcsThirdpartyService.UpdateQuotaInfoForTaiji", in)
	out := new(UpdateQuotaInfoForTaijiResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyService) GetKubeConfigForTaiji(ctx context.Context, in *GetKubeConfigForTaijiRequest, opts ...client.CallOption) (*GetKubeConfigForTaijiResponse, error) {
	req := c.c.NewRequest(c.name, "BcsThirdpartyService.GetKubeConfigForTaiji", in)
	out := new(GetKubeConfigForTaijiResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyService) CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...client.CallOption) (*CreateModuleResponse, error) {
	req := c.c.NewRequest(c.name, "BcsThirdpartyService.CreateModule", in)
	out := new(CreateModuleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyService) CreateNamespaceForTaijiV3(ctx context.Context, in *CreateNamespaceForTaijiV3Request, opts ...client.CallOption) (*CreateNamespaceForTaijiV3Response, error) {
	req := c.c.NewRequest(c.name, "BcsThirdpartyService.CreateNamespaceForTaijiV3", in)
	out := new(CreateNamespaceForTaijiV3Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyService) ImportTjKubeconfig(ctx context.Context, in *ImportTjKubeconfigRequest, opts ...client.CallOption) (*ImportTjKubeconfigResponse, error) {
	req := c.c.NewRequest(c.name, "BcsThirdpartyService.ImportTjKubeconfig", in)
	out := new(ImportTjKubeconfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyService) UpdateTjKubeconfig(ctx context.Context, in *UpdateTjKubeconfigRequest, opts ...client.CallOption) (*UpdateTjKubeconfigResponse, error) {
	req := c.c.NewRequest(c.name, "BcsThirdpartyService.UpdateTjKubeconfig", in)
	out := new(UpdateTjKubeconfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyService) CreateNamespaceForSuanli(ctx context.Context, in *CreateNamespaceForSuanliRequest, opts ...client.CallOption) (*CreateNamespaceForSuanliResponse, error) {
	req := c.c.NewRequest(c.name, "BcsThirdpartyService.CreateNamespaceForSuanli", in)
	out := new(CreateNamespaceForSuanliResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyService) UpdateNamespaceForSuanli(ctx context.Context, in *UpdateNamespaceForSuanliRequest, opts ...client.CallOption) (*UpdateNamespaceForSuanliResponse, error) {
	req := c.c.NewRequest(c.name, "BcsThirdpartyService.UpdateNamespaceForSuanli", in)
	out := new(UpdateNamespaceForSuanliResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyService) GetKubeConfigForSuanli(ctx context.Context, in *GetKubeConfigForSuanliRequest, opts ...client.CallOption) (*GetKubeConfigForSuanliResponse, error) {
	req := c.c.NewRequest(c.name, "BcsThirdpartyService.GetKubeConfigForSuanli", in)
	out := new(GetKubeConfigForSuanliResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyService) BatchImportNamespace(ctx context.Context, in *BatchImportNamespaceRequest, opts ...client.CallOption) (*BatchImportNamespaceResponse, error) {
	req := c.c.NewRequest(c.name, "BcsThirdpartyService.BatchImportNamespace", in)
	out := new(BatchImportNamespaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyService) ListNamespace(ctx context.Context, in *ListNamespaceRequest, opts ...client.CallOption) (*ListNamespaceResponse, error) {
	req := c.c.NewRequest(c.name, "BcsThirdpartyService.ListNamespace", in)
	out := new(ListNamespaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyService) GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...client.CallOption) (*GetNamespaceResponse, error) {
	req := c.c.NewRequest(c.name, "BcsThirdpartyService.GetNamespace", in)
	out := new(GetNamespaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyService) SendRtx(ctx context.Context, in *SendRtxRequest, opts ...client.CallOption) (*SendRtxResponse, error) {
	req := c.c.NewRequest(c.name, "BcsThirdpartyService.SendRtx", in)
	out := new(SendRtxResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyService) SendMail(ctx context.Context, in *SendMailRequest, opts ...client.CallOption) (*SendMailResponse, error) {
	req := c.c.NewRequest(c.name, "BcsThirdpartyService.SendMail", in)
	out := new(SendMailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsThirdpartyService) SendMsg(ctx context.Context, in *SendMsgRequest, opts ...client.CallOption) (*SendMsgResponse, error) {
	req := c.c.NewRequest(c.name, "BcsThirdpartyService.SendMsg", in)
	out := new(SendMsgResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BcsThirdpartyService service

type BcsThirdpartyServiceHandler interface {
	CreateNamespaceForTaiji(context.Context, *CreateNamespaceForTaijiRequest, *CreateNamespaceForTaijiResponse) error
	GetQuotaInfoForTaiji(context.Context, *GetQuotaInfoForTaijiRequest, *GetQuotaInfoForTaijiResponse) error
	UpdateQuotaInfoForTaiji(context.Context, *UpdateQuotaInfoForTaijiRequest, *UpdateQuotaInfoForTaijiResponse) error
	GetKubeConfigForTaiji(context.Context, *GetKubeConfigForTaijiRequest, *GetKubeConfigForTaijiResponse) error
	CreateModule(context.Context, *CreateModuleRequest, *CreateModuleResponse) error
	CreateNamespaceForTaijiV3(context.Context, *CreateNamespaceForTaijiV3Request, *CreateNamespaceForTaijiV3Response) error
	ImportTjKubeconfig(context.Context, *ImportTjKubeconfigRequest, *ImportTjKubeconfigResponse) error
	UpdateTjKubeconfig(context.Context, *UpdateTjKubeconfigRequest, *UpdateTjKubeconfigResponse) error
	CreateNamespaceForSuanli(context.Context, *CreateNamespaceForSuanliRequest, *CreateNamespaceForSuanliResponse) error
	UpdateNamespaceForSuanli(context.Context, *UpdateNamespaceForSuanliRequest, *UpdateNamespaceForSuanliResponse) error
	GetKubeConfigForSuanli(context.Context, *GetKubeConfigForSuanliRequest, *GetKubeConfigForSuanliResponse) error
	BatchImportNamespace(context.Context, *BatchImportNamespaceRequest, *BatchImportNamespaceResponse) error
	ListNamespace(context.Context, *ListNamespaceRequest, *ListNamespaceResponse) error
	GetNamespace(context.Context, *GetNamespaceRequest, *GetNamespaceResponse) error
	// 新增企业微信发送接口
	SendRtx(context.Context, *SendRtxRequest, *SendRtxResponse) error
	// 新增邮件发送接口
	SendMail(context.Context, *SendMailRequest, *SendMailResponse) error
	// 新增bkchat v3消息发送接口
	SendMsg(context.Context, *SendMsgRequest, *SendMsgResponse) error
}

func RegisterBcsThirdpartyServiceHandler(s server.Server, hdlr BcsThirdpartyServiceHandler, opts ...server.HandlerOption) error {
	type bcsThirdpartyService interface {
		CreateNamespaceForTaiji(ctx context.Context, in *CreateNamespaceForTaijiRequest, out *CreateNamespaceForTaijiResponse) error
		GetQuotaInfoForTaiji(ctx context.Context, in *GetQuotaInfoForTaijiRequest, out *GetQuotaInfoForTaijiResponse) error
		UpdateQuotaInfoForTaiji(ctx context.Context, in *UpdateQuotaInfoForTaijiRequest, out *UpdateQuotaInfoForTaijiResponse) error
		GetKubeConfigForTaiji(ctx context.Context, in *GetKubeConfigForTaijiRequest, out *GetKubeConfigForTaijiResponse) error
		CreateModule(ctx context.Context, in *CreateModuleRequest, out *CreateModuleResponse) error
		CreateNamespaceForTaijiV3(ctx context.Context, in *CreateNamespaceForTaijiV3Request, out *CreateNamespaceForTaijiV3Response) error
		ImportTjKubeconfig(ctx context.Context, in *ImportTjKubeconfigRequest, out *ImportTjKubeconfigResponse) error
		UpdateTjKubeconfig(ctx context.Context, in *UpdateTjKubeconfigRequest, out *UpdateTjKubeconfigResponse) error
		CreateNamespaceForSuanli(ctx context.Context, in *CreateNamespaceForSuanliRequest, out *CreateNamespaceForSuanliResponse) error
		UpdateNamespaceForSuanli(ctx context.Context, in *UpdateNamespaceForSuanliRequest, out *UpdateNamespaceForSuanliResponse) error
		GetKubeConfigForSuanli(ctx context.Context, in *GetKubeConfigForSuanliRequest, out *GetKubeConfigForSuanliResponse) error
		BatchImportNamespace(ctx context.Context, in *BatchImportNamespaceRequest, out *BatchImportNamespaceResponse) error
		ListNamespace(ctx context.Context, in *ListNamespaceRequest, out *ListNamespaceResponse) error
		GetNamespace(ctx context.Context, in *GetNamespaceRequest, out *GetNamespaceResponse) error
		SendRtx(ctx context.Context, in *SendRtxRequest, out *SendRtxResponse) error
		SendMail(ctx context.Context, in *SendMailRequest, out *SendMailResponse) error
		SendMsg(ctx context.Context, in *SendMsgRequest, out *SendMsgResponse) error
	}
	type BcsThirdpartyService struct {
		bcsThirdpartyService
	}
	h := &bcsThirdpartyServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsThirdpartyService.CreateNamespaceForTaiji",
		Path:    []string{"/bcsthirdpartyservice/v1/taiji/namespace"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsThirdpartyService.GetQuotaInfoForTaiji",
		Path:    []string{"/bcsthirdpartyservice/v1/taiji/getQuotaInfo/{namespace}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsThirdpartyService.UpdateQuotaInfoForTaiji",
		Path:    []string{"/bcsthirdpartyservice/v1/taiji/quotaInfo"},
		Method:  []string{"PUT"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsThirdpartyService.GetKubeConfigForTaiji",
		Path:    []string{"/bcsthirdpartyservice/v1/taiji/kubeConfig/{nameSpace}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsThirdpartyService.CreateModule",
		Path:    []string{"/bcsthirdpartyservice/v1/{platform}/module"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsThirdpartyService.CreateNamespaceForTaijiV3",
		Path:    []string{"/bcsthirdpartyservice/v1/taiji/v3/namespace"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsThirdpartyService.ImportTjKubeconfig",
		Path:    []string{"/bcsthirdpartyservice/v1/taiji/kubeconfig/import"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsThirdpartyService.UpdateTjKubeconfig",
		Path:    []string{"/bcsthirdpartyservice/v1/taiji/kubeconfig/update"},
		Method:  []string{"PUT"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsThirdpartyService.CreateNamespaceForSuanli",
		Path:    []string{"/bcsthirdpartyservice/v1/suanli/namespace"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsThirdpartyService.UpdateNamespaceForSuanli",
		Path:    []string{"/bcsthirdpartyservice/v1/suanli/namespace"},
		Method:  []string{"PUT"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsThirdpartyService.GetKubeConfigForSuanli",
		Path:    []string{"/bcsthirdpartyservice/v1/suanli/kubeconfig/namespace/{nameSpace}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsThirdpartyService.BatchImportNamespace",
		Path:    []string{"/bcsthirdpartyservice/v1/namespace/import"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsThirdpartyService.ListNamespace",
		Path:    []string{"/bcsthirdpartyservice/v1/namespace"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsThirdpartyService.GetNamespace",
		Path:    []string{"/bcsthirdpartyservice/v1/platform/{platform}/namespace/{namespace}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsThirdpartyService.SendRtx",
		Path:    []string{"/bcsthirdpartyservice/v1/notification/rtx"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsThirdpartyService.SendMail",
		Path:    []string{"/bcsthirdpartyservice/v1/notification/mail"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsThirdpartyService.SendMsg",
		Path:    []string{"/bcsthirdpartyservice/v1/notification/msgv3"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&BcsThirdpartyService{h}, opts...))
}

type bcsThirdpartyServiceHandler struct {
	BcsThirdpartyServiceHandler
}

func (h *bcsThirdpartyServiceHandler) CreateNamespaceForTaiji(ctx context.Context, in *CreateNamespaceForTaijiRequest, out *CreateNamespaceForTaijiResponse) error {
	return h.BcsThirdpartyServiceHandler.CreateNamespaceForTaiji(ctx, in, out)
}

func (h *bcsThirdpartyServiceHandler) GetQuotaInfoForTaiji(ctx context.Context, in *GetQuotaInfoForTaijiRequest, out *GetQuotaInfoForTaijiResponse) error {
	return h.BcsThirdpartyServiceHandler.GetQuotaInfoForTaiji(ctx, in, out)
}

func (h *bcsThirdpartyServiceHandler) UpdateQuotaInfoForTaiji(ctx context.Context, in *UpdateQuotaInfoForTaijiRequest, out *UpdateQuotaInfoForTaijiResponse) error {
	return h.BcsThirdpartyServiceHandler.UpdateQuotaInfoForTaiji(ctx, in, out)
}

func (h *bcsThirdpartyServiceHandler) GetKubeConfigForTaiji(ctx context.Context, in *GetKubeConfigForTaijiRequest, out *GetKubeConfigForTaijiResponse) error {
	return h.BcsThirdpartyServiceHandler.GetKubeConfigForTaiji(ctx, in, out)
}

func (h *bcsThirdpartyServiceHandler) CreateModule(ctx context.Context, in *CreateModuleRequest, out *CreateModuleResponse) error {
	return h.BcsThirdpartyServiceHandler.CreateModule(ctx, in, out)
}

func (h *bcsThirdpartyServiceHandler) CreateNamespaceForTaijiV3(ctx context.Context, in *CreateNamespaceForTaijiV3Request, out *CreateNamespaceForTaijiV3Response) error {
	return h.BcsThirdpartyServiceHandler.CreateNamespaceForTaijiV3(ctx, in, out)
}

func (h *bcsThirdpartyServiceHandler) ImportTjKubeconfig(ctx context.Context, in *ImportTjKubeconfigRequest, out *ImportTjKubeconfigResponse) error {
	return h.BcsThirdpartyServiceHandler.ImportTjKubeconfig(ctx, in, out)
}

func (h *bcsThirdpartyServiceHandler) UpdateTjKubeconfig(ctx context.Context, in *UpdateTjKubeconfigRequest, out *UpdateTjKubeconfigResponse) error {
	return h.BcsThirdpartyServiceHandler.UpdateTjKubeconfig(ctx, in, out)
}

func (h *bcsThirdpartyServiceHandler) CreateNamespaceForSuanli(ctx context.Context, in *CreateNamespaceForSuanliRequest, out *CreateNamespaceForSuanliResponse) error {
	return h.BcsThirdpartyServiceHandler.CreateNamespaceForSuanli(ctx, in, out)
}

func (h *bcsThirdpartyServiceHandler) UpdateNamespaceForSuanli(ctx context.Context, in *UpdateNamespaceForSuanliRequest, out *UpdateNamespaceForSuanliResponse) error {
	return h.BcsThirdpartyServiceHandler.UpdateNamespaceForSuanli(ctx, in, out)
}

func (h *bcsThirdpartyServiceHandler) GetKubeConfigForSuanli(ctx context.Context, in *GetKubeConfigForSuanliRequest, out *GetKubeConfigForSuanliResponse) error {
	return h.BcsThirdpartyServiceHandler.GetKubeConfigForSuanli(ctx, in, out)
}

func (h *bcsThirdpartyServiceHandler) BatchImportNamespace(ctx context.Context, in *BatchImportNamespaceRequest, out *BatchImportNamespaceResponse) error {
	return h.BcsThirdpartyServiceHandler.BatchImportNamespace(ctx, in, out)
}

func (h *bcsThirdpartyServiceHandler) ListNamespace(ctx context.Context, in *ListNamespaceRequest, out *ListNamespaceResponse) error {
	return h.BcsThirdpartyServiceHandler.ListNamespace(ctx, in, out)
}

func (h *bcsThirdpartyServiceHandler) GetNamespace(ctx context.Context, in *GetNamespaceRequest, out *GetNamespaceResponse) error {
	return h.BcsThirdpartyServiceHandler.GetNamespace(ctx, in, out)
}

func (h *bcsThirdpartyServiceHandler) SendRtx(ctx context.Context, in *SendRtxRequest, out *SendRtxResponse) error {
	return h.BcsThirdpartyServiceHandler.SendRtx(ctx, in, out)
}

func (h *bcsThirdpartyServiceHandler) SendMail(ctx context.Context, in *SendMailRequest, out *SendMailResponse) error {
	return h.BcsThirdpartyServiceHandler.SendMail(ctx, in, out)
}

func (h *bcsThirdpartyServiceHandler) SendMsg(ctx context.Context, in *SendMsgRequest, out *SendMsgResponse) error {
	return h.BcsThirdpartyServiceHandler.SendMsg(ctx, in, out)
}
