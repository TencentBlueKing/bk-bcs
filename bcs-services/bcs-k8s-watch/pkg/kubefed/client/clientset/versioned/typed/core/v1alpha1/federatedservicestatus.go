/*
 * Tencent is pleased to support the open source community by making Blueking Container Service available.
 * Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://opensource.org/licenses/MIT
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/Tencent/bk-bcs/bcs-services/bcs-k8s-watch/pkg/kubefed/apis/core/v1alpha1"
	scheme "github.com/Tencent/bk-bcs/bcs-services/bcs-k8s-watch/pkg/kubefed/client/clientset/versioned/scheme"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// FederatedServiceStatusesGetter has a method to return a FederatedServiceStatusInterface.
// A group's client should implement this interface.
type FederatedServiceStatusesGetter interface {
	FederatedServiceStatuses(namespace string) FederatedServiceStatusInterface
}

// FederatedServiceStatusInterface has methods to work with FederatedServiceStatus resources.
type FederatedServiceStatusInterface interface {
	Create(*v1alpha1.FederatedServiceStatus) (*v1alpha1.FederatedServiceStatus, error)
	Update(*v1alpha1.FederatedServiceStatus) (*v1alpha1.FederatedServiceStatus, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.FederatedServiceStatus, error)
	List(opts v1.ListOptions) (*v1alpha1.FederatedServiceStatusList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.FederatedServiceStatus, err error)
	FederatedServiceStatusExpansion
}

// federatedServiceStatuses implements FederatedServiceStatusInterface
type federatedServiceStatuses struct {
	client rest.Interface
	ns     string
}

// newFederatedServiceStatuses returns a FederatedServiceStatuses
func newFederatedServiceStatuses(c *CoreV1alpha1Client, namespace string) *federatedServiceStatuses {
	return &federatedServiceStatuses{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the federatedServiceStatus, and returns the corresponding federatedServiceStatus object, and an error if there is any.
func (c *federatedServiceStatuses) Get(name string, options v1.GetOptions) (result *v1alpha1.FederatedServiceStatus, err error) {
	result = &v1alpha1.FederatedServiceStatus{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("federatedservicestatuses").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of FederatedServiceStatuses that match those selectors.
func (c *federatedServiceStatuses) List(opts v1.ListOptions) (result *v1alpha1.FederatedServiceStatusList, err error) {
	result = &v1alpha1.FederatedServiceStatusList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("federatedservicestatuses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested federatedServiceStatuses.
func (c *federatedServiceStatuses) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("federatedservicestatuses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a federatedServiceStatus and creates it.  Returns the server's representation of the federatedServiceStatus, and an error, if there is any.
func (c *federatedServiceStatuses) Create(federatedServiceStatus *v1alpha1.FederatedServiceStatus) (result *v1alpha1.FederatedServiceStatus, err error) {
	result = &v1alpha1.FederatedServiceStatus{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("federatedservicestatuses").
		Body(federatedServiceStatus).
		Do().
		Into(result)
	return
}

// Update takes the representation of a federatedServiceStatus and updates it. Returns the server's representation of the federatedServiceStatus, and an error, if there is any.
func (c *federatedServiceStatuses) Update(federatedServiceStatus *v1alpha1.FederatedServiceStatus) (result *v1alpha1.FederatedServiceStatus, err error) {
	result = &v1alpha1.FederatedServiceStatus{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("federatedservicestatuses").
		Name(federatedServiceStatus.Name).
		Body(federatedServiceStatus).
		Do().
		Into(result)
	return
}

// Delete takes name of the federatedServiceStatus and deletes it. Returns an error if one occurs.
func (c *federatedServiceStatuses) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("federatedservicestatuses").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *federatedServiceStatuses) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("federatedservicestatuses").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched federatedServiceStatus.
func (c *federatedServiceStatuses) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.FederatedServiceStatus, err error) {
	result = &v1alpha1.FederatedServiceStatus{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("federatedservicestatuses").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
