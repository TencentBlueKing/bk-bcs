syntax = "proto3";

package clustermanager;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "validate/validate.proto";
import "google/protobuf/wrappers.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info : {
    title : "Cluster Manager API Doc"
    version : "0.1.0"
  };
  schemes : HTTP
  consumes : "application/json"
  produces : "application/json"
};

service ClusterManager {
  //* cluster management
  rpc CreateCluster(CreateClusterReq) returns (CreateClusterResp) {
    option (google.api.http) = {
      post : "/clustermanager/v1/cluster"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "创建Cluster，集群类型兼容联邦集群和独立集群"
      summary : "创建Cluster"
    };
  }
  rpc RetryCreateClusterTask(RetryCreateClusterReq) returns (RetryCreateClusterResp) {
    option (google.api.http) = {
      post : "/clustermanager/v1/cluster/{clusterID}/retry"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "针对创建集群失败场景，重新下发创建集群任务"
      summary : "重试创建Cluster任务"
    };
  }

  rpc CheckCloudKubeConfig(KubeConfigReq) returns (KubeConfigResp) {
    option (google.api.http) = {
      put : "/clustermanager/v1/cloud/kubeConfig"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "kubeConfig连接集群可用性检测"
      summary : "kubeConfig可用性检测"
    };
  }

  rpc ImportCluster(ImportClusterReq) returns (ImportClusterResp) {
    option (google.api.http) = {
      post : "/clustermanager/v1/cluster/import"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "导入用户集群(支持多云集群导入功能: 集群ID/kubeConfig)"
      summary : "导入用户Cluster任务"
    };
  }
  rpc UpdateCluster(UpdateClusterReq) returns (UpdateClusterResp) {
    option (google.api.http) = {
      put : "/clustermanager/v1/cluster/{clusterID}"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "更新Cluster信息，该接口仅用于更新信息，不会触发任何集群管理的自动化动作。"
      summary : "更新Cluster"
    };
  }
  rpc AddNodesToCluster(AddNodesRequest) returns (AddNodesResponse) {
    option (google.api.http) = {
      post : "/clustermanager/v1/cluster/{clusterID}/node"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "指定IP，给集群增加节点，会触发相关自动化流程"
      summary : "上架集群节点"
    };
  }
  rpc DeleteNodesFromCluster(DeleteNodesRequest) returns (DeleteNodesResponse) {
    option (google.api.http) = {
      delete : "/clustermanager/v1/cluster/{clusterID}/node"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "指定IP地址缩容集群node"
      summary : "下架集群节点"
    };
  }
  rpc ListNodesInCluster(ListNodesInClusterRequest) returns (ListNodesInClusterResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/cluster/{clusterID}/node"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询集群下所有节点列表，如果某条件为空，则忽略该值"
      summary : "查询Cluster下所有节点列表"
    };
  }
  rpc ListMastersInCluster(ListMastersInClusterRequest) returns (ListMastersInClusterResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/cluster/{clusterID}/master"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询集群下所有master节点列表，如果某条件为空，则忽略该值"
      summary : "查询Cluster下所有master节点列表"
    };
  }

  rpc DeleteCluster(DeleteClusterReq) returns (DeleteClusterResp) {
    option (google.api.http) = {
      delete : "/clustermanager/v1/cluster/{clusterID}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "删除特定Cluster"
      summary : "删除Cluster"
    };
  }

  rpc GetCluster(GetClusterReq) returns (GetClusterResp) {
    option (google.api.http) = {
      get : "/clustermanager/v1/cluster/{clusterID}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询指定ClusterID的集群信息"
      summary : "查询Cluster"
    };
  }

  rpc ListCluster(ListClusterReq) returns (ListClusterResp) {
    option (google.api.http) = {
      get : "/clustermanager/v1/cluster"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "根据查询条件过滤Cluster列表，如果某项条件值为空，则忽略此"
          "条件。如果所有条件都为空，则默认查询所有集群"
      summary : "查询Cluster列表"
    };
  }

  rpc ListProjectCluster(ListProjectClusterReq) returns (ListProjectClusterResp) {
    option (google.api.http) = {
      get : "/clustermanager/v1/projects/{projectID}/cluster"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "获取指定项目下的集群列表"
      summary : "查询项目下的集群列表"
    };
  }

  rpc ListCommonCluster(ListCommonClusterReq) returns (ListCommonClusterResp) {
    option (google.api.http) = {
      get : "/clustermanager/v1/sharedclusters"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询公共集群及公共集群所属权限"
      summary : "查询公共Cluster列表"
    };
  }

  //* node management
  rpc GetNode(GetNodeRequest) returns (GetNodeResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/node/{innerIP}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询指定InnerIP的节点信息"
      summary : "查询Node"
    };
  }

  rpc UpdateNode(UpdateNodeRequest) returns (UpdateNodeResponse) {
    option (google.api.http) = {
      put : "/clustermanager/v1/node"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "更新node信息，该接口仅用于更新信息，不会触发任何集群管理的自动化动作。"
      summary : "更新node信息"
    };
  }

  rpc CheckNodeInCluster(CheckNodesRequest) returns (CheckNodesResponse) {
    option (google.api.http) = {
      post : "/clustermanager/v1/node/available"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "检查节点是否存在bcs集群,防止误回收节点"
      summary : "获取node信息是否存在bcs集群"
    };
  }

  rpc CordonNode(CordonNodeRequest) returns (CordonNodeResponse) {
    option (google.api.http) = {
      put : "/clustermanager/v1/node/cordon"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "节点设置不可调度状态"
      summary : "节点不可调度态"
    };
  }

  rpc UnCordonNode(UnCordonNodeRequest) returns (UnCordonNodeResponse) {
    option (google.api.http) = {
      put : "/clustermanager/v1/node/uncordon"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "节点设置可调度状态"
      summary : "节点可调度态"
    };
  }

  rpc DrainNode(DrainNodeRequest) returns (DrainNodeResponse) {
    option (google.api.http) = {
      post : "/clustermanager/v1/node/drain"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "节点pod迁移"
      summary : "节点pod迁移,将节点上的 Pod 驱逐"
    };
  }

  rpc UpdateNodeLabels(UpdateNodeLabelsRequest) returns (UpdateNodeLabelsResponse) {
    option (google.api.http) = {
      put : "/clustermanager/v1/node/labels"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "更新节点标签"
      summary : "更新节点标签"
    };
  }

  rpc UpdateNodeTaints(UpdateNodeTaintsRequest) returns (UpdateNodeTaintsResponse) {
    option (google.api.http) = {
      put : "/clustermanager/v1/node/taints"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "更新节点污点"
      summary : "更新节点污点"
    };
  }

  //* cluster credential management
  rpc GetClusterCredential(GetClusterCredentialReq)
      returns (GetClusterCredentialResp) {
    option (google.api.http) = {
      get : "/clustermanager/v1/clustercredential/{serverKey}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "根据提供的ServerKey查询ClusterCredential详情"
      summary : "查询ClusterCredential详情"
    };
  }

  rpc UpdateClusterCredential(UpdateClusterCredentialReq)
      returns (UpdateClusterCredentialResp) {
    option (google.api.http) = {
      put : "/clustermanager/v1/clustercredential/{serverKey}"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "指定更新ClusterCredential"
      summary : "更新ClusterCredential详情"
    };
  }

  rpc DeleteClusterCredential(DeleteClusterCredentialReq)
      returns (DeleteClusterCredentialResp) {
    option (google.api.http) = {
      delete : "/clustermanager/v1/clustercredential/{serverKey}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "删除ClusterCredential"
      summary : "删除ClusterCredential"
    };
  }

  rpc ListClusterCredential(ListClusterCredentialReq)
      returns (ListClusterCredentialResp) {
    option (google.api.http) = {
      get : "/clustermanager/v1/clustercredential"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "根据查询条件查询ClusterCredential列表"
      summary : "查询ClusterCredential列表"
    };
  }
  //* federation cluster management
  rpc InitFederationCluster(InitFederationClusterReq)
      returns (InitFederationClusterResp) {
    option (google.api.http) = {
      post : "/clustermanager/v1/initfedcluster"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "初始化联邦Cluster"
      summary : "初始化联邦Cluster"
    };
  }

  rpc AddFederatedCluster(AddFederatedClusterReq)
      returns (AddFederatedClusterResp) {
    option (google.api.http) = {
      post : "/clustermanager/v1/addfederatedcluster"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "将Cluster加入联邦Cluster"
      summary : "将Cluster加入联邦Cluster"
    };
  }

  //* namespace management *
  rpc CreateNamespace(CreateNamespaceReq) returns (CreateNamespaceResp) {
    option (google.api.http) = {
      post : "/clustermanager/v1/namespace/{federationClusterID}/{name}"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "创建namespace"
      summary : "创建namespace"
    };
  }
  rpc UpdateNamespace(UpdateNamespaceReq) returns (UpdateNamespaceResp) {
    option (google.api.http) = {
      put : "/clustermanager/v1/namespace/{federationClusterID}/{name}"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "更新namespace"
      summary : "更新namespace"
    };
  }
  rpc DeleteNamespace(DeleteNamespaceReq) returns (DeleteNamespaceResp) {
    option (google.api.http) = {
      delete : "/clustermanager/v1/namespace/{federationClusterID}/{name}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "删除namespace"
      summary : "删除namespace"
    };
  }
  rpc GetNamespace(GetNamespaceReq) returns (GetNamespaceResp) {
    option (google.api.http) = {
      get : "/clustermanager/v1/namespace/{federationClusterID}/{name}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询namespace"
      summary : "查询namespace"
    };
  }
  rpc ListNamespace(ListNamespaceReq) returns (ListNamespaceResp) {
    option (google.api.http) = {
      get : "/clustermanager/v1/namespace"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询namespace列表"
      summary : "查询namespace列表"
    };
  }

  //* NamespaceQuota management *
  rpc CreateNamespaceQuota(CreateNamespaceQuotaReq)
      returns (CreateNamespaceQuotaResp) {
    option (google.api.http) = {
      post :
          "/clustermanager/v1/namespacequota/{federationClusterID}/{namespace}"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description :
          "创建namespacequota，如果指定子集群clusterID，则在指定"
              "子集群创建ResourceQuota，如果未指定子集群clusterID，则根据指定的re"
              "gion系统自动分配子集群clusterID"
      summary : "创建namespacequota"
    };
  }
  rpc UpdateNamespaceQuota(UpdateNamespaceQuotaReq)
      returns (UpdateNamespaceQuotaResp) {
    option (google.api.http) = {
      put :
          "/clustermanager/v1/namespacequota/{federationClusterID}/{namespace}"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "更新namespacequota"
      summary : "更新namespacequota"
    };
  }
  rpc DeleteNamespaceQuota(DeleteNamespaceQuotaReq)
      returns (DeleteNamespaceQuotaResp) {
    option (google.api.http) = {
      delete :
          "/clustermanager/v1/namespacequota/{federationClusterID}/{namespace}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "删除namespacequota"
      summary : "删除namespacequota"
    };
  }
  rpc GetNamespaceQuota(GetNamespaceQuotaReq) returns (GetNamespaceQuotaResp) {
    option (google.api.http) = {
      get :
          "/clustermanager/v1/namespacequota/{federationClusterID}/{namespace}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询namespacequota"
      summary : "查询namespacequota"
    };
  }
  rpc ListNamespaceQuota(ListNamespaceQuotaReq)
      returns (ListNamespaceQuotaResp) {
    option (google.api.http) = {
      get : "/clustermanager/v1/namespacequota"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询namespacequota列表"
      summary : "查询namespacequota列表"
    };
  }
  rpc CreateNamespaceWithQuota(CreateNamespaceWithQuotaReq)
      returns (CreateNamespaceWithQuotaResp) {
    option (google.api.http) = {
      post : "/clustermanager/v1/namespacewithquota"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "创建namespace及其resource quota"
      summary : "创建namespace及其resource quota"
    };
  }

  //* project information management *
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {
    option (google.api.http) = {
      post : "/clustermanager/v1/project"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "创建项目管理信息"
      summary : "创建项目"
    };
  }
  rpc UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse) {
    option (google.api.http) = {
      put : "/clustermanager/v1/project/{projectID}"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "更新项目信息"
      summary : "更新项目"
    };
  }
  rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {
    option (google.api.http) = {
      delete : "/clustermanager/v1/project/{projectID}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "删除特定Project"
      summary : "删除Project"
    };
  }
  rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/project/{projectID}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询指定ProjectID的集群信息"
      summary : "查询Project"
    };
  }
  rpc ListProject(ListProjectRequest) returns (ListProjectResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/project"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "根据查询条件过滤Project列表，如果某项条件值为空，则忽略此"
          "条件。如果所有条件都为空，则默认查询所有集群"
      summary : "查询Project列表"
    };
  }

  //* Cloud information management *
  rpc CreateCloud(CreateCloudRequest) returns (CreateCloudResponse) {
    option (google.api.http) = {
      post : "/clustermanager/v1/cloud"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "创建云模板管理信息"
      summary : "创建云模板"
    };
  }
  rpc UpdateCloud(UpdateCloudRequest) returns (UpdateCloudResponse) {
    option (google.api.http) = {
      put : "/clustermanager/v1/cloud/{cloudID}"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "更新云模板信息"
      summary : "更新云模板"
    };
  }
  rpc DeleteCloud(DeleteCloudRequest) returns (DeleteCloudResponse) {
    option (google.api.http) = {
      delete : "/clustermanager/v1/cloud/{cloudID}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "删除特定cloud模板信息"
      summary : "删除Cloud模板"
    };
  }
  rpc GetCloud(GetCloudRequest) returns (GetCloudResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/cloud/{cloudID}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询指定cloudID模板信息"
      summary : "查询Cloud"
    };
  }
  rpc ListCloud(ListCloudRequest) returns (ListCloudResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/cloud"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "根据查询条件过滤Cloud列表，如果某项条件值为空，则忽略此"
          "条件。如果所有条件都为空，则默认查询所有集群"
      summary : "查询Cloud列表"
    };
  }

  //* Cloud VPC information management *
  rpc CreateCloudVPC(CreateCloudVPCRequest) returns (CreateCloudVPCResponse) {
    option (google.api.http) = {
      post : "/clustermanager/v1/cloudvpc"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "创建云VPC管理信息"
      summary : "创建云VPC信息"
    };
  }
  rpc UpdateCloudVPC(UpdateCloudVPCRequest) returns (UpdateCloudVPCResponse) {
    option (google.api.http) = {
      put : "/clustermanager/v1/cloudvpc/{cloudID}/{vpcID}"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "更新云vpc信息"
      summary : "更新云vpc"
    };
  }
  rpc DeleteCloudVPC(DeleteCloudVPCRequest) returns (DeleteCloudVPCResponse) {
    option (google.api.http) = {
      delete : "/clustermanager/v1/cloudvpc/{cloudID}/{vpcID}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "删除特定cloud vpc信息"
      summary : "删除Cloud vpc信息"
    };
  }
  rpc ListCloudVPC(ListCloudVPCRequest) returns (ListCloudVPCResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/cloudvpc"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "根据查询条件过滤Cloud VPC列表，如果某项条件值为空，则忽略此"
          "条件。如果所有条件都为空，则默认查询所有集群"
      summary : "查询Cloud VPC列表"
    };
  }
  rpc ListCloudRegions(ListCloudRegionsRequest) returns (ListCloudRegionsResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/cloudregion/{cloudID}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "根据cloudID获取所属cloud的地域信息"
      summary : "查询Cloud region列表"
    };
  }
  rpc GetVPCCidr(GetVPCCidrRequest) returns (GetVPCCidrResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/vpccidr/{vpcID}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "根据vpcID获取所属vpc的cidr信息"
      summary : "查询vpc cidr列表"
    };
  }

  //* NodeGroup information management *
  rpc CreateNodeGroup(CreateNodeGroupRequest) returns (CreateNodeGroupResponse) {
    option (google.api.http) = {
      post : "/clustermanager/v1/nodegroup"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "创建节点组资源，用于弹性伸缩。"
      summary : "创建节点组"
    };
  }
  rpc UpdateNodeGroup(UpdateNodeGroupRequest) returns (UpdateNodeGroupResponse) {
    option (google.api.http) = {
      put : "/clustermanager/v1/nodegroup/{nodeGroupID}"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "更新NodeGroup信息"
      summary : "更新NodeGroup"
    };
  }
  rpc DeleteNodeGroup(DeleteNodeGroupRequest) returns (DeleteNodeGroupResponse) {
    option (google.api.http) = {
      delete : "/clustermanager/v1/nodegroup/{nodeGroupID}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "删除特定NodeGroup。当NodeGroup有留存的Node时，不允许直接删除。"
          "如果要删除有Node的节点组，请设置强制删除条件。"
      summary : "删除NodeGroup"
    };
  }
  rpc GetNodeGroup(GetNodeGroupRequest) returns (GetNodeGroupResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/nodegroup/{nodeGroupID}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询指定NodeGroupID信息"
      summary : "查询NodeGroup"
    };
  }
  rpc ListNodeGroup(ListNodeGroupRequest) returns (ListNodeGroupResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/nodegroup"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "根据查询条件过滤NodeGroup列表，如果某项条件值为空，则忽略此"
          "条件。如果所有条件都为空，则默认查询所有集群"
      summary : "查询NodeGroup列表"
    };
  }
  rpc MoveNodesToGroup(MoveNodesToGroupRequest) returns (MoveNodesToGroupResponse) {
    option (google.api.http) = {
      post : "/clustermanager/v1/nodegroup/{nodeGroupID}/node"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "将集群已有的节点移入节点组进行纳管。"
      summary : "节点移入节点池"
    };
  }
  rpc RemoveNodesFromGroup(RemoveNodesFromGroupRequest) returns (RemoveNodesFromGroupResponse) {
    option (google.api.http) = {
      delete : "/clustermanager/v1/nodegroup/{nodeGroupID}/node"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "指定IP地址从节点组中移除，但是该节点仍然在集群中"
      summary : "节点组移除节点"
    };
  }
  rpc CleanNodesInGroup(CleanNodesInGroupRequest) returns (CleanNodesInGroupResponse) {
    option (google.api.http) = {
      delete : "/clustermanager/v1/nodegroup/{nodeGroupID}/groupnode"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "指定IP地址从节点组中移除，也从集群中移除，并清理资源回收节点。该接口为异步接口，当该接口正常返回时，仅能"
          "确认清理任务正常创建，不能保证节点清理已经完成，如果需要确认进度，需要通过返回的Task进行详细查询。"
      summary : "回收节点组中的节点"
    };
  }
  rpc CleanNodesInGroupV2(CleanNodesInGroupV2Request) returns (CleanNodesInGroupV2Response) {
    option (google.api.http) = {
      delete : "/clustermanager/v2/nodegroup/{nodeGroupID}/groupnode"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "指定IP地址从节点组中移除，也从集群中移除，并清理资源回收节点。该接口为异步接口，当该接口正常返回时，仅能"
          "确认清理任务正常创建，不能保证节点清理已经完成，如果需要确认进度，需要通过返回的Task进行详细查询。"
      summary : "回收节点组中的节点，使用query参数指定需要清理的节点"
    };
  }
  rpc ListNodesInGroup(ListNodesInGroupRequest) returns (ListNodesInGroupResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/nodegroup/{nodeGroupID}/node"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询属于该节点组的Node列表"
      summary : "查询node列表"
    };
  }
  rpc UpdateGroupDesiredNode(UpdateGroupDesiredNodeRequest) returns (UpdateGroupDesiredNodeResponse) {
    option (google.api.http) = {
      post : "/clustermanager/v1/nodegroup/{nodeGroupID}/desirednode"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "更新NodeGroup中DesiredNode信息，该更新会导致NodeGroup通过资源池引入机器进行初始化并加入集群。"
          "该接口设置的desiredNode只能比当前规模大，不能比之前小；如果要减小节点组的规模请使用CleanNodesInGroup"
      summary : "更新DesiredNode信息"
    };
  }
  rpc UpdateGroupDesiredSize(UpdateGroupDesiredSizeRequest) returns (UpdateGroupDesiredSizeResponse) {
    option (google.api.http) = {
      post : "/clustermanager/v1/nodegroup/{nodeGroupID}/desiredsize"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "更新NodeGroup中autoscaling信息的DesiredSize节点数，主要是修正数据不一致情况"
      summary : "更新DesiredSize信息"
    };
  }
  rpc EnableNodeGroupAutoScale(EnableNodeGroupAutoScaleRequest) returns (EnableNodeGroupAutoScaleResponse) {
    option (google.api.http) = {
      post : "/clustermanager/v1/nodegroup/{nodeGroupID}/autoscale/enable"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "开启节点组的自动伸缩功能"
      summary : "开启节点池节点自动扩缩容"
    };
  }
  rpc DisableNodeGroupAutoScale(DisableNodeGroupAutoScaleRequest) returns (DisableNodeGroupAutoScaleResponse) {
    option (google.api.http) = {
      post : "/clustermanager/v1/nodegroup/{nodeGroupID}/autoscale/disable"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "关闭节点组的自动伸缩功能"
      summary : "关闭节点池节点自动扩缩容"
    };
  }

  //* Task information management *
  rpc CreateTask(CreateTaskRequest) returns (CreateTaskResponse) {
    option (google.api.http) = {
      post : "/clustermanager/v1/task"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "创建长时间运行的后台任务"
      summary : "创建任务"
    };
  }
  rpc RetryTask(RetryTaskRequest) returns (RetryTaskResponse) {
    option (google.api.http) = {
      put : "/clustermanager/v1/task/{taskID}/retry"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "针对失败的任务, 进行重试操作. 重试仅限于失败任务且从当前失败step开始执行"
      summary : "重试失败Task"
    };
  }
  rpc UpdateTask(UpdateTaskRequest) returns (UpdateTaskResponse) {
    option (google.api.http) = {
      put : "/clustermanager/v1/task/{taskID}"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "更新Task信息"
      summary : "更新Task"
    };
  }
  rpc DeleteTask(DeleteTaskRequest) returns (DeleteTaskResponse) {
    option (google.api.http) = {
      delete : "/clustermanager/v1/task/{taskID}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "删除特定Task"
      summary : "删除Task"
    };
  }
  rpc GetTask(GetTaskRequest) returns (GetTaskResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/task/{taskID}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询指定TaskID信息"
      summary : "查询Task"
    };
  }
  rpc ListTask(ListTaskRequest) returns (ListTaskResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/task"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "根据查询条件过滤Task列表，如果某项条件值为空，则忽略此"
          "条件。如果所有条件都为空，则默认查询所有集群"
      summary : "查询Task列表"
    };
  }

  //* ClusterAutoScalingOption information management *
  rpc CreateAutoScalingOption(CreateAutoScalingOptionRequest) returns (CreateAutoScalingOptionResponse) {
    option (google.api.http) = {
      post : "/clustermanager/v1/autoscalingoption"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "创建ClusterAutoScalingOption，用于cluster-autoscaler配置"
      summary : "创建ClusterAutoScalingOption"
    };
  }
  rpc UpdateAutoScalingOption(UpdateAutoScalingOptionRequest) returns (UpdateAutoScalingOptionResponse) {
    option (google.api.http) = {
      put : "/clustermanager/v1/autoscalingoption/{clusterID}"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "更新ClusterAutoscalingOption，一个ClusterAutoScalingOption对应一个集群，索引信息为clusterID"
      summary : "更新ClusterAutoScalingOption，该接口为全量更新"
    };
  }
  rpc DeleteAutoScalingOption(DeleteAutoScalingOptionRequest) returns (DeleteAutoScalingOptionResponse) {
    option (google.api.http) = {
      delete : "/clustermanager/v1/autoscalingoption/{clusterID}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "删除指定集群的ClusterAutoScalingOption"
      summary : "删除ClusterAutoScalingOption"
    };
  }
  rpc GetAutoScalingOption(GetAutoScalingOptionRequest) returns (GetAutoScalingOptionResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/autoscalingoption/{clusterID}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询指定集群的的ClusterAutoScalingOption信息"
      summary : "查询ClusterAutoScalingOption"
    };
  }
  rpc ListAutoScalingOption(ListAutoScalingOptionRequest) returns (ListAutoScalingOptionResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/autoscalingoption"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "根据查询条件过滤ClusterAutoScalingOption列表，如果某项条件值为空，则忽略此"
          "条件。如果所有条件都为空，则默认查询所有集群"
      summary : "查询ClusterAutoScalingOption列表"
    };
  }
  rpc UpdateAutoScalingStatus(UpdateAutoScalingStatusRequest) returns (UpdateAutoScalingStatusResponse) {
    option (google.api.http) = {
      put : "/clustermanager/v1/autoscalingoption/{clusterID}/status"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "开启/关闭集群弹性扩缩容"
      summary : "开启/关闭集群弹性扩缩容"
    };
  }

  // Cloud Account information management
  rpc CreateCloudAccount(CreateCloudAccountRequest) returns (CreateCloudAccountResponse) {
    option (google.api.http) = {
      post : "/clustermanager/v1/clouds/{cloudID}/accounts"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "创建云账号信息"
      summary : "创建云账号信息"
    };
  }
  rpc UpdateCloudAccount(UpdateCloudAccountRequest) returns (UpdateCloudAccountResponse) {
    option (google.api.http) = {
      put : "/clustermanager/v1/clouds/{cloudID}/accounts/{accountID}"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "更新云账号信息"
      summary : "更新云账号"
    };
  }
  rpc DeleteCloudAccount(DeleteCloudAccountRequest) returns (DeleteCloudAccountResponse) {
    option (google.api.http) = {
      delete : "/clustermanager/v1/clouds/{cloudID}/accounts/{accountID}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "删除特定cloud 账号信息"
      summary : "删除Cloud 账号信息"
    };
  }
  rpc ListCloudAccount(ListCloudAccountRequest) returns (ListCloudAccountResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/clouds/{cloudID}/accounts"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "根据查询条件过滤Cloud 账号列表，如果某项条件值为空，则忽略此"
          "条件。如果所有条件都为空，则默认查询所有账号"
      summary : "查询Cloud 账号列表"
    };
  }
  rpc ListCloudAccountToPerm(ListCloudAccountPermRequest) returns (ListCloudAccountPermResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/accounts"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "根据查询条件过滤Cloud 账号列表，如果某项条件值为空，则忽略此"
          "条件。如果所有条件都为空，则默认查询所有账号"
      summary : "查询Cloud 账号列表, 主要用于权限资源查询"
    };
  }

  // Cloud Resource management
  rpc GetCloudRegions(GetCloudRegionsRequest) returns (GetCloudRegionsResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/clouds/{cloudID}/regions"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询cloud地域列表"
      summary : "查询cloud地域列表"
    };
  }
  rpc GetCloudRegionZones(GetCloudRegionZonesRequest) returns (GetCloudRegionZonesResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/clouds/{cloudID}/zones"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询cloud地域可用区列表"
      summary : "查询cloud地域可用区列表"
    };
  }
  rpc ListCloudRegionCluster(ListCloudRegionClusterRequest) returns (ListCloudRegionClusterResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/clouds/{cloudID}/clusters"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询cloud地域集群列表"
      summary : "查询cloud地域集群列表"
    };
  }
  rpc ListCloudSubnets(ListCloudSubnetsRequest) returns (ListCloudSubnetsResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/clouds/{cloudID}/subnets"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "根据vpcID获取所属vpc的子网信息"
      summary : "查询vpc子网列表"
    };
  }
  rpc ListCloudSecurityGroups(ListCloudSecurityGroupsRequest) returns (ListCloudSecurityGroupsResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/clouds/{cloudID}/securitygroups"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询安全组列表"
      summary : "查询安全组列表"
    };
  }
  rpc ListCloudInstanceTypes(ListCloudInstanceTypeRequest) returns (ListCloudInstanceTypeResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/clouds/{cloudID}/instancetypes"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "根据筛选条件查询Node机型列表"
      summary : "查询Node机型"
    };
  }
  rpc ListCloudOsImage(ListCloudOsImageRequest) returns (ListCloudOsImageResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/clouds/{cloudID}/osimage"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "根据筛选条件查询Node操作系统镜像列表"
      summary : "查询Node操作系统镜像列表"
    };
  }
  // Operation logs
  rpc ListOperationLogs(ListOperationLogsRequest) returns (ListOperationLogsResponse) {
    option (google.api.http) = {
      get : "/clustermanager/v1/operationlogs"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询操作日志列表"
      summary : "查询操作日志列表"
    };
  }

  // ** ResourceSchema **
  // ListResourceSchema
  rpc ListResourceSchema(ListResourceSchemaRequest) returns (CommonListResp) {
    option (google.api.http) = {
      get : "/clustermanager/v1/resourceschema/{cloudID}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询资源模型列表"
      summary : "查询资源模型列表"
    };
  }
  // GetResourceSchema
  rpc GetResourceSchema(GetResourceSchemaRequest) returns (CommonResp) {
    option (google.api.http) = {
      get : "/clustermanager/v1/resourceschema/{cloudID}/{name}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询资源模型详情"
      summary : "查询资源模型详情"
    };
  }

  // Perm interface
  rpc QueryPermByActionID(QueryPermByActionIDRequest) returns (QueryPermByActionIDResponse) {
    option (google.api.http) = {
      post : "/clustermanager/v1/perms/actions/{actionID}"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "校验用户权限,当无权限时返回无权限URL"
      summary : "校验用户权限,当无权限时返回无权限URL"
    };
  }

  // third party
  // list bk cloud
  rpc ListBKCloud(ListBKCloudRequest) returns (CommonListResp) {
    option (google.api.http) = {
      get : "/clustermanager/v1/nodeman/cloud"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询云区域列表"
      summary : "查询云区域列表"
    };
  }
  rpc ListCCTopology(ListCCTopologyRequest) returns (CommonResp) {
    option (google.api.http) = {
      get : "/clustermanager/v1/cluster/{clusterID}/cc/topology"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "查询业务主机模块拓扑"
      summary : "查询业务主机模块拓扑"
    };
  }
}

message Cluster {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "Cluster"
      description : "记录集群信息，用于维护集群状态"
    }
  };
  string clusterID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterID",
    description: "BCS内部使用集群ID，格式为BCS-K8S-XXXXX"
  }];
  string clusterName = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterName",
    description: "集群名称"
  }];
  string federationClusterID = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "federationClusterID",
    description: "如果该集群为联邦集群的一部分，用该ID记录联邦Host信息"
  }];
  string provider = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "provider",
    description: "集群云配置，为云类型ID"
  }];
  string region = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "region",
    description: "集群区域信息"
  }];
  string vpcID = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "vpcID",
    description: "集群所在vpc，部分环境下非必填"
  }];
  string projectID = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "projectID",
    description: "集群所关联的项目ID"
  }];
  string businessID = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "businessID",
    description: "项目绑定的业务ID, 集群所关联的业务ID，该ID来源于CMDB"
  }];
  string environment = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "environment",
    description: "集群所对应的环境信息，stag，debug，prod"
  }];
  string engineType = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "engineType",
    description: "集群编排引擎，k8s、mesos"
  }];
  bool isExclusive = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "isExclusive",
    description: "是否业务独占集群，默认为false"
  }];
  string clusterType = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterType",
    description: "集群类型，federation、single"
  }];
  map<string, string> labels = 13[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "labels",
    description: "集群标签"
  }];
  string creator = 14[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "creator",
    description: "集群信息创建者"
  }];
  string createTime = 15;
  string updateTime = 16;
  map<string, BKOpsPlugin> bcsAddons = 17[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "bcsAddons",
    description: "创建集群时进行BCS内置插件安装，该信息会索引云上默认配置信息进行对比与补充，Addons默认在集群"
        "正常初始化之后进行调用。"
  }];
  map<string, BKOpsPlugin> extraAddons = 18[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "extraAddons",
    description: "创建集群时额外扩展传递的信息，该部分为预留二方/三方/服务商扩展使用，Addons默认在集群状态正常之后"
        "进行调用与安装。"
  }];
  string systemID = 19[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "systemID",
    description: "kubernetes集群在各云平台上资源ID"
  }];
  string manageType = 20[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "manageType",
    description: "集群管理类型，公有云时生效，MANAGED_CLUSTER(云上托管集群)，INDEPENDENT_CLUSTER(独立集群，自行维护)"
  }];
  map<string, Node> master = 21[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "master",
    description: "集群master IP列表"
  }];
  NetworkSetting networkSettings = 22[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "networkSettings",
    description: "集群网络基础设置，需要调用方设置"
  }];
  ClusterBasicSetting clusterBasicSettings = 23[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterBasicSettings",
    description: "集群基础信息设置，例如使用版本，关联的vpc等，调用方需要设置"
  }];
  ClusterAdvanceSetting clusterAdvanceSettings = 24[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cluseterAdvanceSettings",
    description: "集群进阶特性设置，例如启用ipvs特性，容器运行时设置等。如无特别需求"
  }];
  NodeSetting nodeSettings = 25[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeSettings",
    description: "集群节点设置，例如挂载目录，docker数据目录等，如无特别需求，可以不设置，BCS提供默认参数"
  }];
  string status = 26[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "status",
    description: "集群状态，可能状态CREATING，RUNNING，DELETING，FALURE，INITIALIZATION"
  }, (validate.rules).string = {in: ["CREATING", "RUNNING", "DELETING", "FALURE", "INITIALIZATION"]}
  ];
  string updater = 27[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updater",
    description: "集群信息更新者"
  }];
  string networkType = 28[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "networkType",
    description: "集群网络类型，(underlay/overlay)"
  }, (validate.rules).string = {in: ["underlay", "overlay", ""]}];
  bool autoGenerateMasterNodes = 29[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "autoGenerateMasterNodes",
    description: "创建集群是否使用已存在节点, 默认false, 即使用已经存在的节点, 从创建集群参数中获取"
  }];
  repeated InstanceTemplateConfig template = 30[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "template",
    description: "autoGenerateMasterNodes为true时, 创建集群自动生成instance, 配置instance模板信息"
  }];
  map<string, string> extraInfo = 31[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "extraInfo",
    description: "存储集群扩展信息, 例如esb_url/webhook_image/priviledge_image等扩展信息"
  }];
  string moduleID = 32[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "moduleID",
    description: "集群模块ID(CA添加节点时模块转移)"
  }];
  string extraClusterID = 33[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "extraClusterID",
    description: "导入集群的额外集群ID标识信息,默认时空值"
  }];
  bool isCommonCluster = 34[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "isCommonCluster",
    description: "是否为公共集群,默认false"
  }];
  string description = 35[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "description",
    description: "集群简要描述"
  }];
  string clusterCategory = 36[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterCategory",
    description: "集群类别，主要用于区分该集群是否是自建、导入(builder/importer), 默认是自建"
  }];
  bool is_shared = 37[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "is_shared",
    description: "是否为共享集群,默认false"
  }];
  string kubeConfig = 38[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "kubeConfig",
    description: "导入集群时若是kubeConfig导入则存储"
  }];
  string importCategory = 39[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "importCategory",
    description: "当clusterCategory参数为importer时, 主要用于区分该集群是kubeConfig/cloud导入,默认为空"
  }];
  string cloudAccountID = 40[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudAccountID",
    description: "集群关联的云账号ID,默认为空。主要功能是获取云账号凭证。私有云场景下统一管理cloud账号，而公有云场景纳管不同云账号凭证"
  }];
}

message Node {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "Node"
      description : "记录节点信息，用于维护节点状态，被cluster与nodegroup使用"
    }
  };
  string nodeID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeID",
    description: "节点云instanceID"
  }];
  string innerIP = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "innerIP",
    description: "节点内网主IP"
  }];
  string instanceType = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "instanceType",
    description: "机型信息字符串，可能为空"
  }];
  uint32 CPU = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "CPU",
    description: "节点CPU信息"
  }];
  uint32 mem = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "mem",
    description: "节点内存信息"
  }];
  uint32 GPU = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "GPU",
    description: "节点GPU信息，可能为0"
  }];
  string status = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "status",
    description: "节点状态信息（根据弹性伸缩定义的），RUNNING, DELETEING, CREATING, FAILED, INITIALIZATION"
  }];
  string zoneID = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "zone",
    description: "节点可用区，可能为空"
  }];
  string nodeGroupID = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeGroupID",
    description: "节点所属的NodeGroup ID, 可能为空(仅CA节点归属于nodeGroup)"
  }];
  string clusterID = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterID",
    description: "节点所属的ClusterID"
  }];
  string VPC = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "VPC",
    description: "节点所属的VPC ID"
  }];
  string region = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "region",
    description: "节点所属区域，例如广州，深圳，加州等"
  }];
  string passwd = 13[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "passwd",
    description: "实例初始化密码, 需要进行解密"
  }];
  uint32 zone = 14[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "zoneID",
    description: "节点可用区ID，可能为空; 该信息主要使用于CA"
  }];
  string deviceID = 15[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "deviceID",
    description: "CA instance设备ID号"
  }];
  string nodeTemplateID = 16[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeTemplateID",
    description: "节点关联的节点模板ID, 可为空"
  }];
  string nodeType = 17 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeType",
    description: "节点类型, 主要包含CVM/IDC, 可为空默认是CVM"
  }];
  string nodeName = 18 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeName",
    description: "节点名称, 存储各个云节点名称"
  }];
  string innerIPv6 = 19 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "innerIPv6",
    description: "节点ipv6地址"
  }];
  string username = 20[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "username",
    description: "实例初始化用户名"
  }];
}

message NetworkSetting {
  string clusterIPv4CIDR = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterIPv4CIDR",
    description: "集群总IPv4地址池"
  }];
  string serviceIPv4CIDR = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "serviceIPv4CIDR",
    description: "集群service使用的IPv4地址池"
  }];
  uint32 maxNodePodNum = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "maxNodePodNum",
    description: "节点上最大Pod数量"
  }];
  uint32 maxServiceNum = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "maxServiceNum",
    description: "集群最大的Service数量"
  }];
  bool enableVPCCni = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "enableVPCCni",
    description: "enableVPCCni是否开启VPC-CNI网络模式(使能vpc-cni模式时,新增流程开启)"
  }];
  repeated string eniSubnetIDs = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "eniSubnetIDs",
    description: "VPC-CNI网络模式下,弹性网卡的子网ID"
  }];
  SubnetSource subnetSource = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "isNonStaticIpMode",
    description: "集群VPC-CNI模式是否为非固定IP，默认: FALSE 非固定IP"
  }];
  bool isStaticIpMode = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "isNonStaticIpMode",
    description: "集群VPC-CNI模式是否为非固定IP，默认: FALSE 非固定IP"
  }];
  uint32 claimExpiredSeconds = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "claimExpiredSeconds",
    description: "VPC-CNI网络模式下,弹性网卡IP回收时间"
  }];
  repeated string multiClusterCIDR = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "multiClusterCIDR",
    description: "集群扩展CIDR,不同cloud配置不同"
  }];
  uint32 cidrStep = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cidrStep",
    description: "自动分配cidr步长设置(默认是生产环境4096、其他环境2048)"
  }];
}

message SubnetSource {
  NewSubnet new = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "new",
    description: "VPC-CNI网络模式下申请subnet"
  }];
  ExistedSubnetIDs existed = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "existed",
    description: "VPC-CNI网络模式使用已存在的subnet"
  }];
}

message ExistedSubnetIDs {
  repeated string ids = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "ids",
    description: "直接使用已存在子网IDs"
  }];
}

message NewSubnet {
  uint32 mask = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "mask",
    description: "申请vpc-cni网络subnet时的网络掩码大小"
  }];
  string zone = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "zone",
    description: "申请vpc-cni网络subnet时region下的可用区"
  }];
}

message ClusterBasicSetting {
  string OS = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "OS",
    description: "集群使用OS信息(镜像ID/公共镜像, 为空时使用默认镜像ID)"
  }];
  string version = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "version",
    description: "kubernetes使用的版本"
  }];
  map<string, string> clusterTags = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterTags",
    description: "集群相关tag信息，用于集群管理标签信息注入. 可自定义设置, 可根据不同云实现业务定制tags"
        "(例如:可根据businessID绑定业务信息)"
  }];
  string versionName = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "versionName",
    description: "kubernetes使用的版本名称"
  }];
}

message ClusterAdvanceSetting {
  bool IPVS = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "IPVS",
    description: "Kubernetes集群IPVS特性，默认为false"
  }];
  string containerRuntime = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "containerRuntime",
    description: "集群容器运行时实现，可选Docker、Containerd"
  }];
  string runtimeVersion = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "runtimeVersion",
    description: "容器运行时版本"
  }];
  map<string, string> extraArgs = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "extraArgs",
    description: "配置各模块自定义参数，预定义的key为KubeAPIServer，KubeController，Etcd，KubeScheduler。"
        "value为各模块进程启动参数，多个参数之间使用;间隔，例如Etcd: node-data-dir=/data/bcs/lib/etcd;"
  }];
}

message NodeSetting {
  string dockerGraphPath = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "dockerGraphPath",
    description: "节点运行时为docker时设置信息数据目录，BCS默认设置/data/bcs/service/docker"
  }];
  string mountTarget = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "mountTarget",
    description: "节点目录盘挂载点，BCS默认/data"
  }];
  uint32 unSchedulable = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "unSchedulable",
    description: "设置加入的节点是否参与调度，默认值0表示参与调度，非0表示不参与调度(加入节点时可覆盖参数)"
  }];
  map<string, string> labels = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "labels",
    description: "节点通用的labels设置"
  }];
  map<string, string> extraArgs = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "extraArgs",
    description: "配置各模块自定义参数，预定义的key为kubelet"
        "value为各模块进程启动参数，多个参数之间使用;间隔，例如Kubelet: root-dir=/var/lib/kubelet;"
  }];
}

message ClusterCredential {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ClusterCredential"
      description : "bcs-kube-agent上报的集群信息"
    }
  };

  string serverKey = 1;
  string clusterID = 2;
  string clientModule = 3;
  string serverAddress = 4;
  string caCertData = 5;
  string userToken = 6;
  string clusterDomain = 7;
  string connectMode = 8;
  string createTime = 9;
  string updateTime = 10;
  string clientCert = 11;
  string clientKey = 12;
}

message Namespace {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "Namespace"
      description : "记录联邦ns信息"
    }
  };
  string name = 1;
  string federationClusterID = 2;
  string projectID = 3;
  string businessID = 4;
  map<string, string> labels = 5;
  string maxQuota = 6;
  string createTime = 7;
  string updateTime = 8;
  repeated ResourceQuota quotaList = 9;
}

message ResourceQuota {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ResourceQuota"
      description : "记录联邦资源配额"
    }
  };
  string namespace = 1;
  string federationClusterID = 2;
  string clusterID = 3;
  string resourceQuota = 4;
  string region = 5;
  string createTime = 6;
  string updateTime = 7;
  string status = 8;
  string message = 9;
}

// Credential storage for cloud credential
message Credential {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "Credential"
      description : "用于记录账户信息"
    }
  };

  string key = 1;
  string secret = 2;
  string subscriptionID = 3;
  string tenantID = 4;
  string resourceGroupName = 5;
  string clientID = 6;
  string clientSecret = 7;
  string serviceAccountSecret = 8;
  string gkeProjectID = 9;
}

message BKOpsPlugin {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "BKOpsPlugin"
      description : "标准运维模板信息记录，用于自动化工作流程记录"
    }
  };

  string system = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "system",
    description: "插件系统，本插件为bksops"
  }];
  string link = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "link",
    description: "bksops模板链接，用于发起标准运维事务远程调用"
  }];
  map<string, string> params = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "params",
    description: "bksops模板默认通用参数，实际调用时根据实际行为可覆盖或定制化"
  }];
}

message Action {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "Action"
      description : "记录各模块功能自动化行为模板, 对接job系统, 完成自定义操作; 针对不同云的不同操作模版参数需自定义"
          "针对大部分操作，仅需要前置动作或后置动作即可. 可自由扩展"
    }
  };

  repeated string preActions = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "preActions",
    description: "行为前置自动化模板列表，action在操作行为前置执行"
  }];
  repeated string postActions = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "preActions",
    description: "行为后置自动化模板列表，action在操作行为后置执行"
  }];
  map<string, BKOpsPlugin> plugins = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "plugins",
    description: "具体行为流程动作定义"
  }];
}

message ClusterMgr {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ClusterMgr"
      description : "用于记录集群层面固定、模板信息，帮助集群创建与维护.目前仅支持action(创建集群/删除集群/集群添加节点/集群删除节点)"
    }
  };
  repeated string availableVersion = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "availableVersion",
    description: "已支持的kubernetes 版本列表"
  }];
  Action createCluster = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "createCluster",
    description: "集群创建时相关自动化流程定义"
  }];
  Action deleteCluster = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "deleteCluster",
    description: "集群删除时相关自动化流程定义"
  }];
  Action addNodesToCluster = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "addNodesToCluster",
    description: "添加节点到集群中自动化流程定义"
  }];
  Action deleteNodesFromCluster = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "deleteNodesFromCluster",
    description: "从集群删除节点时相关自动化流程定义"
  }];
}

message NodeGroupMgr {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "NodeGroupMgr"
      description : "用于记录集群弹性伸缩层面固定、模板信息，帮助弹性伸缩创建与维护, 和具体的cloud关联"
          "支持创建节点组、删除节点组、移动节点至节点组、从节点组删除节点、节点组扩容节点、节点组清理集群节点并销毁机器等操作"
    }
  };
  Action createNodeGroup = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "createNodeGroup",
    description: "节点组创建时相关自动化流程定义"
  }];
  Action deleteNodeGroup = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "deleteNodeGroup",
    description: "节点组删除时相关自动化流程定义"
  }];
  Action moveNodesToGroup = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "moveNodesToNodeGroup",
    description: "移动节点至节点组时相关自动化流程定义(节点组外节点移动至节点组)"
  }];
  Action removeNodesFromGroup = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "removeNodesFromNodeGroup",
    description: "从节点组删除节点时相关自动化流程定义(节点组外节点移除策略)"
  }];
  Action cleanNodesInGroup = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cleanNodesInGroup",
    description: "节点组缩容节点时相关自动化流程定义"
  }];
  Action updateDesiredNodes = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updateDesiredNodes",
    description: "节点组扩容节点相关自动化流程定义"
  }];
}

message OSInfo {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "OSInfo"
      description : "用于记录一些固定的系统信息，用于帮助OS层面信息展示"
    }
  };

  repeated string availableVersion = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "availableVersion",
    description: "可用系统类型，默认提供一些基础可用系统版本"
  }];
  repeated string instanceType = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "instanceType",
    description: "可用机器类型，默认提供一些可用基础类型机器，方便用户在cli、SaaS进行选择"
  }];
  repeated string defaultSecurityGroups = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "defaultSecurityGroups",
    description: "默认云上安全组，方便用户在cli、SaaS进行选择"
  }];
  map<string, string> regions = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "regions",
    description: "云上默认置入的区域信息，key是字符串，values是中文说明"
  }];
}

// Account account info
message Account {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "Account"
      description : "用于存储不同cloud的账号信息，不同cloud格式兼容处理"
    }
  };
  string secretID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "secretID",
    description: "腾讯云账号secretID"
  }];
  string secretKey = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "secretKey",
    description: "腾讯云账号secretKey"
  }];
  string subscriptionID = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "subscriptionID",
    description: "Azure 订阅ID"
  }];
  string tenantID = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "tenantID",
    description: "Azure 租户ID"
  }];
  string resourceGroupName = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "resourceGroupName",
    description: "Azure 资源组名称"
  }];
  string clientID = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clientID",
    description: "Azure Service Principal ClientID"
  }];
  string clientSecret = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clientSecret",
    description: "Azure Service Principal ClientSecret"
  }];
  string serviceAccountSecret = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "serviceAccountSecret",
    description: "Google Cloud service account的json字符串秘钥"
  }];
  string gkeProjectID = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "gkeProjectID",
    description: "Google Cloud 项目ID"
  }];
}

// cloud account manage
message CloudAccount {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CloudAccount"
      description : "用于管理不同cloud的账号信息(仅用作管理和使用)"
    }
  };

  string cloudID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudID",
    description: "BCS平台支持的云类型，英文字符串"
  }];
  string projectID = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "projectID",
    description: "CloudAccount所属的项目信息，便于查询和过滤"
  }];
  string accountID = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "accountID",
    description: "BCS平台生成的账号ID, 格式为(BCS-Cloud-ID)"
  }];
  string accountName = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "accountName",
    description: "cloud账号名称"
  }];
  string desc = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "desc",
    description: "cloud账号描述信息"
  }];
  Account account = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "desc",
    description: "cloud账号信息"
  }];
  bool enable = 7 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "enable",
    description: "cloud账号是否启用,默认是启用的"
  }];
  string creator = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "creator",
    description: "信息创建者"
  }];
  string updater = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updater",
    description: "信息更新者"
  }];
  string creatTime = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "creatTime",
    description: "创建时间"
  }];
  string updateTime = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updateTime",
    description: "更新时间"
  }];
}

message CreateCloudAccountRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CreateCloudAccountRequest"
      description : "导入cloud account"
      required : [
        "cloudID", "accountName", "account", "creator"
      ]
    }
  };

  string cloudID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudID",
    description: "cloud云类型"
  }, (validate.rules).string = {min_len : 2, max_len : 1024, pattern : "^[0-9a-zA-Z-]+$"}];
  string accountName = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "accountName",
    description: "cloud账号名称"
  }, (validate.rules).string = {min_len : 1}];
  string desc = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "desc",
    description: "cloud账号描述信息"
  }];
  Account account = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "account",
    description: "cloud云账号信息,不同cloud进行有效性及兼容处理"
  }];
  google.protobuf.BoolValue enable = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "enable",
    description: "cloud云账号是否开启，默认开启"
  }];
  string creator = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "creator",
    description: "cloud账号创建者"
  }, (validate.rules).string = {min_len : 2, max_len : 1024, pattern : "^[0-9a-zA-Z-]+$"}];
  string projectID = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "projectID",
    description: "CloudAccount所属的项目信息"
  }, (validate.rules).string = {min_len : 2}];
}

message CreateCloudAccountResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
}

message UpdateCloudAccountRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateCloudAccountRequest"
      description : "更新cloud账号请求，不允许更改账号信息，防止对存量集群产生影响"
      required: ["cloudID", "accountID", "updater"]
    }
  };
  string cloudID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudID",
    description: "云类型，英文字符串"
  }, (validate.rules).string = {min_len : 2, max_len : 1024, pattern : "^[0-9a-zA-Z-]+$"}];
  string accountID = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "accountID",
    description: "cloud云账号ID"
  }, (validate.rules).string = {min_len : 2, max_len : 1024, pattern : "^[0-9a-zA-Z-]+$"}];
  string accountName = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "accountName",
    description: "cloud账号名称"
  }];
  string desc = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "desc",
    description: "cloud账号描述信息"
  }];
  google.protobuf.BoolValue enable = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "enable",
    description: "cloud云账号是否开启，默认开启"
  }];
  string projectID = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "projectID",
    description: "CloudAccount所属的项目信息"
  }];
  string updater = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updater",
    description: "更新者"
  }, (validate.rules).string = {min_len : 2, max_len : 1024, pattern : "^[0-9a-zA-Z]+$"}];
}

message UpdateCloudAccountResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
}

message DeleteCloudAccountRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "DeleteCloudAccountRequest"
      description : "删除cloud账户请求, 若关联集群不允许删除"
      required: ["cloudID", "vpcID"]
    }
  };

  string cloudID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudID",
    description: "云类型，英文字符串"
  }, (validate.rules).string = {min_len : 2, max_len : 1024, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  string accountID = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "accountID",
    description: "cloud账户信息"
  }, (validate.rules).string = {min_len : 2, max_len : 1024, pattern : "^[0-9a-zA-Z-]+$"}];
}

message DeleteCloudAccountResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
}

message ListCloudAccountPermRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListCloudAccountPermRequest"
      description : "查询云账号请求，如果填写了目标字段，则组合目标信息查询，如果全为空则为查询全量信息"
    }
  };

  string projectID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "projectID",
    description: "CloudAccount所属的项目信息，用于查询所属项目的云凭证"
  }];
  repeated string accountID = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "accountID",
    description: "云账号列表"
  }];
  string accountName = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "accountName",
    description: "查询具体cloud账号详情"
  }];
}

message ListCloudAccountPermResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListCloudAccountPermResponse"
      description : "查询云账号权限数据返回"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  repeated CloudAccount data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "cloud账号列表"
  }];
}

message ListCloudAccountRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListCloudAccountRequest"
      description : "查询云账号请求，如果填写了目标字段，则组合目标信息查询，如果全为空则为查询全量信息"
    }
  };

  string cloudID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudID",
    description: "云类型，英文字符串"
  }, (validate.rules).string = {max_len : 1024}];
  string accountID = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "accountID",
    description: "查询具体cloud账号"
  }];
  string projectID = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "projectID",
    description: "CloudAccount所属的项目信息，用于查询所属项目的云凭证"
  }];
  string operator = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "operator",
    description: "operator云账号权限列表"
  }];
}

// CloudAccountInfo return account relative info
message CloudAccountInfo {
  CloudAccount account = 1;
  repeated string clusters = 2;
}

message ListCloudAccountResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListCloudAccountResponse"
      description : "查询云账号返回"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  repeated CloudAccountInfo data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "cloud账号列表"
  }];
  WebAnnotations web_annotations = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "web_annotations",
    description : "用户所属项目的云账号权限"
  }];
}

// cloud region VPCInfo
message CloudVPC {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CloudVPC"
      description : "用于记录cloud对应不同区域的vpc信息"
    }
  };

  string cloudID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudID",
    description: "云类型，英文字符串，"
  }];
  string region = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "region",
    description: "vpc所属区域信息"
  }];
  string regionName = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "regionName",
    description: "region区域名称"
  }];
  string networkType = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "networkType",
    description: "networkType网络类型(overlay/underlay)"
  }];
  string vpcID = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "vpcID",
    description: "vpcID信息"
  }];
  string vpcName = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "vpcName",
    description: "vpc名称"
  }];
  string available = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "available",
    description: "该vpc是否可用(true可用，false不可用)"
  }];
  string extra = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "extra",
    description: "vpc描述标记信息"
  }];
  string creator = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "creator",
    description: "信息创建者"
  }];
  string updater = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updater",
    description: "信息更新者"
  }];
  string creatTime = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "creatTime",
    description: "创建时间"
  }];
  string updateTime = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updateTime",
    description: "更新时间"
  }];
}

message CreateCloudVPCRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CreateCloudVPCRequest"
      description : "创建cloud vpc请求"
      required : [
        "cloudID", "networkType", "region", "vpcName", "vpcID"
      ]
    }
  };

  string cloudID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudID",
    description: "云类型，英文字符串"
  }, (validate.rules).string = {min_len : 2, max_len : 100, pattern : "^[0-9a-zA-Z-]+$"}];
  string networkType = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "networkType",
    description: "networkType网络类型(overlay/underlay)"
  }, (validate.rules).string = {in: ["overlay", "underlay"]}];
  string region = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "region",
    description: "vpc所属区域信息"
  }, (validate.rules).string = {min_len : 2, max_len : 100, pattern : "^[0-9a-zA-Z-]+$"}];
  string regionName = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "regionName",
    description: "region区域名称"
  }];
  string vpcName = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "vpcName",
    description: "vpc名称"
  }, (validate.rules).string = {min_len : 2, max_len : 100, pattern : "^[0-9a-zA-Z-]+$"}];
  string vpcID = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "vpcID",
    description: "vpcID信息"
  }, (validate.rules).string = {min_len : 2, max_len : 100, pattern : "^[0-9a-zA-Z-]+$"}];
  string available = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "available",
    description: "该vpc是否可用(true可用，false不可用)"
  }, (validate.rules).string = {in: ["true", "false"]}];
  string extra = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "extra",
    description: "vpc描述标记信息"
  }];
  string creator = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "creator",
    description: "信息创建者"
  }, (validate.rules).string = {min_len : 2, max_len : 100, pattern : "^[0-9a-zA-Z-]+$"}];
}

message CreateCloudVPCResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
}

message UpdateCloudVPCRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateCloudVPCRequest"
      description : "更新云VPC请求"
      required: ["cloudID", "vpcID", "updater"]
    }
  };

  string cloudID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudID",
    description: "云类型，英文字符串"
  }, (validate.rules).string = {min_len : 2, max_len : 100, pattern : "^[0-9a-zA-Z-]+$"}];
  string networkType = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "networkType",
    description: "networkType网络类型(overlay/underlay)"
  }];
  string region = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "region",
    description: "vpc所属区域信息"
  }];
  string regionName = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "regionName",
    description: "region区域名称"
  }];
  string vpcName = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "vpcName",
    description: "vpc名称"
  }];
  string vpcID = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "vpcID",
    description: "vpcID信息"
  }, (validate.rules).string = {min_len : 2, max_len : 100, pattern : "^[0-9a-zA-Z-]+$"}];
  string available = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "available",
    description: "该vpc是否可用(true可用，false不可用)"
  }, (validate.rules).string = {in: ["", "true", "false"]}];
  string updater = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updater",
    description: "更新者"
  }, (validate.rules).string = {min_len : 2, max_len : 100, pattern : "^[0-9a-zA-Z]+$"}];
}

message UpdateCloudVPCResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
  CloudVPC data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "data",
    description : "更新后的云VPC信息"
  }];
}

message DeleteCloudVPCRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "DeleteCloudVPCRequest"
      description : "删除云VPC请求"
      required: ["cloudID", "vpcID"]
    }
  };

  string cloudID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudID",
    description: "云类型，英文字符串"
  }, (validate.rules).string = {min_len : 2, max_len : 100, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  string vpcID = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "vpcID",
    description: "vpcID信息"
  }, (validate.rules).string = {min_len : 2, max_len : 100, pattern : "^[0-9a-zA-Z-]+$"}];
}

message DeleteCloudVPCResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
  CloudVPC data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "data",
    description : "已删除的云VPC信息"
  }];
}

message ListCloudVPCRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListCloudVPCRequest"
      description : "查询云VPC请求，如果填写了目标字段，则组合目标信息查询，如果全为空则为查询全量信息"
    }
  };

  string cloudID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudID",
    description: "云类型，英文字符串"
  }, (validate.rules).string = {max_len : 20}
  ];
  string region = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "region",
    description: "vpc所属区域信息"
  }];
  string vpcID = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "vpcID",
    description: "vpcID信息"
  }];
  string networkType = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "networkType",
    description: "networkType网络类型(overlay/underlay)"
  }, (validate.rules).string = {in: ["overlay", "underlay"]}];
}

message ListCloudVPCResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListCloudVPCResponse"
      description : "查询云VPC返回"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  repeated CloudVPC data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "获取到的信息"
  }];
}

message ListCloudRegionsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListCloudRegionsRequest"
      description : "查询cloud的地域信息"
    }
  };

  string cloudID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudID",
    description: "云类型，英文字符串"
  }, (validate.rules).string = {max_len : 20}];
}

message ListCloudRegionsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListCloudRegionsResponse"
      description : "查询cloud地域信息返回"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  repeated CloudRegion data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "获取到的信息"
  }];
}

message CloudRegion {
  string cloudID = 1;
  string regionName = 2;
  string region = 3;
}

message GetVPCCidrRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetVPCCidrRequest"
      description : "查询vpc的cidr信息"
    }
  };

  string vpcID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "vpcID",
    description: "所属region的vpc cidr列表获取"
  }];
}

message GetVPCCidrResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetVPCCidrResponse"
      description : "查询VPC cidr信息返回"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  repeated VPCCidr data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "获取到的信息"
  }];
}

message VPCCidr {
  string vpc = 1;
  string cidr = 2;
  uint32 IPNumber = 3;
  string status = 4;
}

message Cloud {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "Cloud"
      description : "云信息，多云管理下用于定义共享信息，BCS默认地提供蓝鲸云预定义，腾讯云预定义信息"
    }
  };

  string cloudID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudType",
    description: "云类型，英文字符串"
  }];
  string name = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "name",
    description: "云类型中文名称"
  }];
  bool editable = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "editable",
    description: "对于SaaS层面该信息是否可编辑，BCS默认提供的预定义信息不可编译"
  }];
  map<string, BKOpsPlugin> opsPlugins = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "opsPlugins",
    description: "通过标准运维实现的扩展流程或者插件"
  }];
  map<string, BKOpsPlugin> extraPlugins = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "extraPlugins",
    description: "额外扩展流程，用于自定义扩展，该部分允许用户编辑"
  }];
  Credential cloudCredential = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudCredential",
    description: "该云下统一定义的账户信息，可以为空，如果有配置，则当Cluster、Project下没有设置时会使用该配置"
  }];
  OSInfo osManagement = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "osManagement",
    description: "该云下OS层面定义的统一管理信息"
  }];
  ClusterMgr clusterManagement = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterManagement",
    description: "该云下集群管理层面的流程管理信息"
  }];
  NodeGroupMgr nodeGroupManagement = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeGroupManagement",
    description: "该云下弹性伸缩管理信息"
  }];
  string creator = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "creator",
    description: "信息创建者"
  }];
  string updater = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updater",
    description: "信息更新者"
  }];
  string creatTime = 13[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "creatTime",
    description: "创建时间"
  }];
  string updateTime = 14[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updateTime",
    description: "更新时间"
  }];
  string cloudProvider = 15[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudProvider",
    description: "功能具体实现，当前实现模式有qcloud/blueking/bksops/aws，实现参考cluster-manager下cloudprovider"
  }];
  string config = 16 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "config",
    description: "扩展字段, 保存适配各种cloud的配置信息, 通过不同的cloud json解析配置"
  }];
  string description = 17 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "description",
    description: "描述cloud详细介绍信息"
  }];
  string engineType = 18 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "engineType",
    description: "底层使用的引擎类型"
  }];
  string enable = 19 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "enable",
    description: "云模版是否返回给用户可见(值为true或false)"
  }];
  CloudNetworkInfo networkInfo = 20[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "networkInfo",
    description: "该云下统一定义网络配置信息"
  }];
  CloudConfigInfo confInfo = 21[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "confInfo",
    description: "该云下统一云配置信息"
  }];
  map<string, string> platformInfo = 22[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "platformInfo",
    description: "平台不同云的配置信息"
  }];
}

// CloudConfigInfo storage for cloud special conf info
message CloudConfigInfo {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CloudConfigInfo"
      description : "用于记录云公共配置信息"
    }
  };

  bool cloudInternalEnable = 1[
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title: "cloudInternalEnable",
      description: "cloud是否开启内部配置"
    }];
  string cloudDomain = 2[
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title: "cloudDomain",
      description: "cloudDomain内部域名配置"
    }];
  string machineDomain = 3[
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title: "machineDomain",
      description: "machineDomain内部域名配置"
    }];
  bool disableCreateCluster = 4[
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title: "disableCreateCluster",
      description: "cloud是否关闭创建集群特性"
    }];
  bool disableImportCluster = 5[
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title: "disableImportCluster",
      description: "cloud是否关闭导入集群特性"
    }];
  bool disableNodeGroup = 6[
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title: "disableNodeGroup",
      description: "cloud是否关闭节点池特性"
    }];
}

// CloudNetworkInfo storage for cloud network info
message CloudNetworkInfo {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CloudNetworkInfo"
      description : "用于记录公共网络配置信息"
    }
  };

  repeated uint32 cidrStep = 1[
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title: "cidrStep",
      description: "cidr自动扩容步长设置"
    }];
}

// NodeGroup pool for kubernetes cluster-autoscaling
message NodeGroup {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "NodeGroup"
      description : "节点组，对蓝鲸、腾讯云、AWS弹性伸缩能力封装"
    }
  };
  string nodeGroupID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeGroupID",
    description: "节点组ID"
  }];
  string name = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "name",
    description: "节点组名称"
  }];
  string clusterID = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterID",
    description: "节点组所关联的集群，该ID为BCS集群ID"
  },
    (validate.rules).string = {min_len : 2, max_len : 100, pattern : "^[0-9a-zA-Z-]+$", prefix: "BCS-"}
  ];
  string region = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "region",
    description: "节点组所关联区域信息"
  }];
  bool enableAutoscale = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "enableAutoscale",
    description: "是否开启弹性伸缩，默认false"
  }];
  AutoScalingGroup autoScaling = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "autoScaling",
    description: "弹性伸缩具体配置"
  }];
  LaunchConfiguration  launchTemplate = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "launchTemplate",
    description: "伸缩时创建具体实例的配置模板"
  }];
  map<string, string> labels = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "labels",
    description: "新实例初始化label信息"
  }];
  map<string, string> taints = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "taints",
    description: "新实例初始化的污点信息"
  }];
  string nodeOS = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeOS",
    description: "新实例选用的系统OS，参照云信息中配置的默认值"
  }];
  string creator = 11;
  string updater = 12;
  string createTime = 13;
  string updateTime = 14;
  string projectID = 15[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "projectID",
    description: "NodeGroup所属的项目信息，便于查询和过滤，需要与cluster所属保持一致"
  }];
  string provider = 16[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "provider",
    description: "NodeGroup具体实现，用于覆盖所属cluster中定义的provider信息调整实现的细节。"
        "便于在一个云环境中扩展自定义的模板，使用不同"
  }];
  string status = 17[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "status",
    description: "节点组状态，可能状态CREATING，RUNNING，DELETING，UPDATING，DELETED"
  }, (validate.rules).string = {in: ["CREATING", "RUNNING", "DELETING", "UPDATING", "DELETED"]}];
  string consumerID = 18[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "consumerID",
    description: "consumerID对接resourceManager模块申请资源使用"
  }];
  NodeTemplate nodeTemplate = 19[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeTemplate",
    description: "节点组实例设置"
  }, (validate.rules).message.required = true
  ];
  string cloudNodeGroupID = 20[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudNodeGroupID",
    description: "NodeGroup 在各个云上的 ID"
  }];
  map<string, string> tags = 21[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "tags",
    description: "新实例初始化的资源标签信息"
  }];
  string nodeGroupType = 22 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeGroupType",
    description: "节点池类型(normal/external)。普通弹性伸缩节点池和第三方弹性伸缩节点池, 即CVM节点或IDC节点"
  }];
  CloudArea area = 23 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "area",
    description: "节点所在云区域信息(用户不指定, 则使用默认云区域)"
  }];
}

message CloudArea {
  uint32 bkCloudID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "bkCloudID",
    description: "云区域 ID"
  }];
  string bkCloudName = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "bkCloudName",
    description: "云区域名称"
  }];
}

// AutoScalingGroup define auto scaling information
message AutoScalingGroup {
  string autoScalingID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "autoScalingID",
    description: "弹性伸缩组ID，信息创建时忽略，该ID为自建ID或者云设施ID"
  }];
  string autoScalingName = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "autoScalingName",
    description: "弹性伸缩组名称"
  }];
  uint32 minSize = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "minSize",
    description: "伸缩组最小实例数"
  }, (validate.rules).uint32 = {gte: 0, lt: 320000}];
  uint32 maxSize = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "maxSize",
    description: "弹性伸缩组最大实例数"
  }, (validate.rules).uint32 = {gte: 0, lt: 320000}];
  uint32 desiredSize = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "desiredSize",
    description: "弹性伸缩期望实例数"
  }];
  string vpcID = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "vpcID",
    description: "弹性伸缩组所属VPC ID"
  }];
  uint32 defaultCooldown = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "defaultCooldown",
    description: "弹性伸缩组默认扩缩容冷却周期，默认300秒"
  }];
  repeated string subnetIDs = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "subnetIDs",
    description: "弹性伸缩组扩容实例首选的的子网ID，多个子网ID按照先后顺序确认优先级，靠前优先级高"
  }];
  repeated string zones = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "zones",
    description: "弹性伸缩组扩容实例首选的可用区ID，多个可用区按照先后顺序确认优先级，靠前优先级高"
  }];
  string retryPolicy = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "retryPolicy",
    description: "创建实例失败时的重试策略：IMMEDIATE_RETRY(最大5次)，INCREMENTAL_INTERVALS，NO_RETRY。"
        "默认值为IMMEDIATE_RETRY。扩容时默认会组合subnet和zone信息逐一尝试实例创建直到最大失败次数或者"
        "所有组合全失败。"
  }];
  string multiZoneSubnetPolicy = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "multiZoneSubnetPolicy",
    description: "可选值：PRIORITY，EQUALITY。PRIORITY：默认在高优先级的子网与可用区创建实例。"
        "EQUALITY：所有可用区、子网机会均衡"
  }];
  bool replaceUnhealthy = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "replaceUnhealthy",
    description: "开启监控不健康节点替换服务，默认false。连续1分钟ping不通则视为不健康！"
  }];
  string scalingMode = 13[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scalingMode",
    description: "扩容模式，CLASSIC_SCALING(默认)：扩容时创建新实例，缩容时销毁实例；"
        "WAKE_UP_STOPPED_SCALING：缩容时关机不销毁，扩容时优先唤醒关机实例。"
  }];
  repeated TimeRange timeRanges = 14[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "timeRanges",
    description: "定时自动扩容集群节点配置信息"
  }];
  bool autoUpgrade = 15[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "autoUpgrade",
    description: "开启自动升级GKE版本功能,如果集群为发布版本,则强制开启"
  }];
}

message TimeRange {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "TimeRange"
      description : "autoScale定时扩缩配置"
    }
  };

  string name = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "name",
    description: "定时扩缩job名称"
  }, (validate.rules).string = {min_len : 2, max_len : 1024}];
  string schedule = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "schedule",
    description: "定时cron时间"
  }, (validate.rules).string = {min_len : 2, max_len : 1024}];
  string zone = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "zone",
    description: "定时cron时区"
  }];
  uint32 desiredNum = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "desiredNum",
    description: "期望节点数"
  }];
}

// DataDisk 数据盘定义
message DataDisk {
  string diskType = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "diskType",
    description: "数据盘类型，LOCAL_BASIC（默认）,LOCAL_SSD,CLOUD_BASE,CLOUD_SSD,CLOUD_PREMIUM(高性能云硬盘)"
  }];
  string diskSize = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "diskSize",
    description: "数据盘大小，10G起跳，默认为0，为0时不购买"
  }];
  string fileSystem = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "fileSystem",
    description: "文件系统(ext3/ext4/xfs)"
  }];
  bool autoFormatAndMount = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "autoFormatAndMount",
    description: "是否自动化格式盘并挂载"
  }];
  string mountTarget = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "mountTarget",
    description: "挂载目录"
  }];
}

// InternetAccessible 公网带宽设置
message InternetAccessible {
  string internetChargeType = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "internetChargeType",
    description: "网络计费类型。BANDWIDTH_PREPAID：预付费按带宽结算，"
        "TRAFFIC_POSTPAID_BY_HOUR：流量按小时后付费，BANDWIDTH_POSTPAID_BY_HOUR：带宽按小时后付费，"
        "BANDWIDTH_PACKAGE：带宽包用户"
  }];
  string internetMaxBandwidth = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "internetMaxBandwidth",
    description: "公网出带宽上限，单位：Mbps。默认值：0Mbps。"
  }];
  bool publicIPAssigned = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "publicIPAssigned",
    description: "是否分配公网IP。默认为false。"
  }];
}

// InstanceTemplateConfig instance config info
message InstanceTemplateConfig {
  string region = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "region",
    description: "instance地域信息"
  }];
  string zone = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "zone",
    description: "可用区域"
  }];
  string vpcID = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "vpcID",
    description: "私有网络ID"
  }];
  string subnetID = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "subnetID",
    description: "子网ID, 和可用区域一一对应"
  }];
  uint32 applyNum = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "applyNum",
    description: "申请实例数量"
  }];
  uint32 CPU = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "CPU",
    description: "机型CPU信息，与机型instanceType互斥，比instanceType优先级高"
  }];
  uint32 Mem = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "Mem",
    description: "机型Mem信息，与机型instanceType互斥，比instanceType优先级高"
  }];
  uint32 GPU = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "GPU",
    description: "机型GPU信息，与机型instanceType互斥，比instanceType优先级高，可以会为0"
  }];
  string instanceType = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "instanceType",
    description: "机型信息字符串，若配置CPU和内存，该值不强制，默认自行向上就近匹配机型信息"
  }];
  string instanceChargeType = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "instanceChargeType",
    description: "机型计费模型，POSTPAID_BY_HOUR按小时后付费，SPOTPAID竞价付费，PREPAID包年包月。"
        "如不设置，BCS暂时默认提供包年包月的类型"
  }, (validate.rules).string = {in: ["PREPAID", "POSTPAID_BY_HOUR", "SPOTPAID"]}
  ];
  DataDisk systemDisk = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "systemDisk",
    description: "系统盘信息，BCS默认设置为高性能云盘，大小为50G"
  }];
  repeated DataDisk dataDisks = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "dataDisks",
    description: "数据盘信息，无默认设置则不购买"
  }];
  ImageInfo imageInfo = 13[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "imageInfo",
    description: "新实例启动时的配置镜像信息"
  }];
  string initLoginPassword = 14[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "initLoginPassword",
    description: "新实例初始设置password,如果不设置系统自动生成"
  }];
  repeated string securityGroupIDs = 15[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "securityGroupIDs",
    description: "新实例安全组关联的ID列表，如果不填写，使用系统默认的安全组信息"
  }];
  bool isSecurityService = 16[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "isSecurityService",
    description: "新实例启动时的是否开启云安全, 选填 qcloud默认开启"
  }];
  bool isMonitorService = 17[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "isMonitorService",
    description: "新实例启动时的是否开启云监控, 选填 默认开启"
  }];
}

//LaunchConfigure template for scaling node
message LaunchConfiguration {
  string launchConfigurationID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "launchConfigurationID",
    description: "节点配置模板ID，自建ID或者云上ID"
  }];
  string launchConfigureName = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "launchConfigureName",
    description: "配置模板名称"
  }];
  string projectID = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "projectID",
    description: "用于表明该配置属于哪个项目，便于项目复用，该项目不是BCS项目信息"
  }];
  uint32 CPU = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "CPU",
    description: "机型CPU信息，与机型instanceType互斥，比instanceType优先级高"
  }];
  uint32 Mem = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "Mem",
    description: "机型Mem信息，与机型instanceType互斥，比instanceType优先级高"
  }];
  uint32 GPU = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "GPU",
    description: "机型GPU信息，与机型instanceType互斥，比instanceType优先级高，可以会为0"
  }];
  string instanceType = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "instanceType",
    description: "机型信息字符串，若配置CPU和内存，该值不强制，默认自行向上就近匹配机型信息"
  }];
  string instanceChargeType = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "instanceChargeType",
    description: "机型计费模型，POSTPAID_BY_HOUR按小时后付费，SPOTPAID竞价付费，PREPAID包年包月。"
        "如不设置，BCS暂时默认提供包年包月的类型"
  }];
  DataDisk systemDisk = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "systemDisk",
    description: "系统盘信息，BCS默认设置为高性能云盘，大小为50G"
  }];
  repeated DataDisk dataDisks = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "dataDisks",
    description: "数据盘信息，无默认设置则不购买"
  }];
  InternetAccessible internetAccess = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "internetAccess",
    description: "公网信息设置，建议设置"
  }];
  string initLoginPassword = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "initLoginPassword",
    description: "新实例初始设置password"
  }];
  repeated string securityGroupIDs = 13[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "securityGroupIDs",
    description: "新实例安全组关联的ID列表，如果不填写，BCS默认使用各云信息配置中预留的信息"
  }];
  ImageInfo imageInfo = 14[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "imageInfo",
    description: "新实例启动时的配置镜像信息"
  }];
  bool isSecurityService = 15[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "isSecurityService",
    description: "新实例启动时的是否开启云安全, 选填 yunti默认关闭"
  }];
  bool isMonitorService = 16[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "isMonitorService",
    description: "新实例启动时的是否开启云监控, 选填 默认开启"
  }];
  string userData = 17[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "userData",
    description: "经过 Base64 编码后的自定义数据，最大长度不超过16KB。"
  }];
  string initLoginUsername = 18[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "initLoginUsername",
    description: "新实例初始设置username"
  }];
}

// ImageInfo 创建cvm实例的镜像信息
message ImageInfo {
  string imageID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "imageID",
    description: "镜像ID，必填字段"
  }];
  string imageName = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "imageName",
    description: "镜像名"
  }];
}

// ClusterAutoScalingOption cluster autoScaler module parameter
message ClusterAutoScalingOption {
  bool isScaleDownEnable = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "isScaleDownEnable",
    description: "scale-down-enabled,是否允许缩容节点"
  }];
  string expander = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "expander",
    description: "expander,扩容算法，（默认）random, least-waste, most-pod, priority"
  }];
  uint32 maxEmptyBulkDelete = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "maxEmptyBulkDelete",
    description: "max-empty-bulk-delete,单次缩容最大节点数"
  }];
  uint32 scaleDownDelay = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownDelay",
    description: "集群扩容后多长时间开始判定缩容，默认10分钟"
  }];
  uint32 scaleDownUnneededTime = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownUnneededTime",
    description: "scale-down-unneeded-time,执行缩容等待时间，节点连续空闲多少分钟后被缩容，默认10分钟"
  }];
  uint32 scaleDownUtilizationThreahold = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownUtilizationThreahold",
    description: "scale-down-utilization-threshold,触发缩容资源阈值，节点资源使用量低于多少百分比判定为空闲，默认为50"
  }];
  bool skipNodesWithLocalStorage = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "skipNodesWithLocalStorage",
    description: "忽略有本地存储的节点，默认为false"
  }];
  bool skipNodesWithSystemPods = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "skipNodesWithSystemPods",
    description: "忽略kube-system NS下非DaemonSet管理的Pod的节点，默认false"
  }];
  bool ignoreDaemonSetsUtilization = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "ignoreDaemonSetsUtilization",
    description: "忽略DaemonSet的资源计算"
  }];
  uint32 okTotalUnreadyCount = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "okTotalUnreadyCount",
    description: "ok-total-unready-count,允许 unready 节点的数量"
  }];
  uint32 maxTotalUnreadyPercentage = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "maxTotalUnreadyPercentage",
    description: "max-total-unready-percentage,unready节点超过集群总节点的百分比，超过此阈值则停止自动扩容"
  }];
  uint32 scaleDownUnreadyTime = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownUnreadyTime",
    description: "scale-down-unready-time,unready节点缩容等待时间，单位秒"
  }];
  uint32 unregisteredNodeRemovalTime = 13[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "unregisteredNodeRemovalTime",
    description: "cluster-autoscaler等待多长时间将删除未在kubernetes中注册的节点，默认30分钟"
  }];
  string projectID = 14[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "projectID",
    description: "项目ID，关联的项目信息"
  }];
  string clusterID = 15[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterID",
    description: "BCS集群ID，关联的集群ID"
  }];
  string creator = 16[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "creator",
    description: "信息创建者"
  }];
  string createTime = 17[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "createTime",
    description: "信息创建时间"
  }];
  string updater = 18[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updater",
    description: "信息更新者"
  }];
  string updateTime = 19[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updateTime",
    description: "信息更新时间"
  }];
  string provider = 20[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "provider",
    description: "ClusterAutoScaling具体实现，用于覆盖所属cluster中定义的provider信息调整实现的细节。"
        "便于在一个云环境中扩展自定义的模板，使用不同"
  }];
  bool enableAutoscale = 21[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "enableAutoscale",
    description: "是否开启自动扩缩容，开启后会在该集群部署 ClusterAutoScaling 组件，默认为 false"
  }];
  uint32 bufferResourceRatio = 22[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "bufferResourceRatio",
    description: "buffer-resource-ratio,触发扩容资源阈值百分比，集群资源使用率超过该值，则触发扩容，默认 100"
  }];
  uint32 maxGracefulTerminationSec = 23[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "maxGracefulTerminationSec",
    description: "max-graceful-termination-sec,缩容时，等待 Pod 退出最长时间"
  }];
  uint32 scanInterval = 24[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scanInterval",
    description: "scan-interval,自动扩缩容检测时间间隔，单位为秒，默认为 10"
  }];
  uint32 maxNodeProvisionTime = 25[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "maxNodeProvisionTime",
    description: "max-node-provision-time,等待节点提供最长时间，单位秒，默认 900"
  }];
  bool scaleUpFromZero = 26[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleUpFromZero",
    description: "scale-up-from-zero,允许自动扩容（没有 ready 节点时）"
  }];
  uint32 scaleDownDelayAfterAdd = 27[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownDelayAfterAdd",
    description: "scale-down-delay-after-add,扩容后判断缩容时间间隔，单位秒"
  }];
  uint32 scaleDownDelayAfterDelete = 28[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownDelayAfterDelete",
    description: "scale-down-delay-after-delete,连续两次缩容时间间隔，单位秒"
  }];
  uint32 scaleDownDelayAfterFailure = 29[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownDelayAfterFailure",
    description: "scale-down-delay-after-failure,缩容失败后重试时间间隔，单位秒"
  }];
  uint32 scaleDownGpuUtilizationThreshold = 30[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownGpuUtilizationThreshold",
    description: "scale-down-gpu-utilization-threshold,触发缩容资源阈值(GPU)，节点资源使用量低于多少百分比判定为空闲，默认为50"
  }];
  string status = 31[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "status",
    description: "状态, NORMAL:正常，UPDATING:更新中，UPDATE-FAILED:更新失败，STOPPED:已停止"
  }];
  string errorMessage = 32[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "errorMessage",
    description: "错误信息"
  }];
}

// Taint for node taints
message Taint {
  string key = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "key",
    description: "污点 Key"
  }];
  string value = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "value",
    description: "污点 Value"
  }];
  string effect = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "effect",
    description: "污点效果，(NoSchedule, PreferNoSchedule, NoExecute)"
  }];
}

// NodeTemplate for kubernetes cluster node common setting
message NodeTemplate {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "NodeTemplate"
      description : "节点模版, 主要用于对kubernetes集群节点的通用特性设置"
    }
  };
  string nodeTemplateID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeTemplateID",
    description: "节点模版ID"
  }];
  string name = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "name",
    description: "节点模版名称"
  }];
  string projectID = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "projectID",
    description: "节点模版所关联的项目，该项目为蓝鲸的项目"
  }];
  map<string, string> labels = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "labels",
    description: "新实例初始化label信息"
  }];
  repeated Taint taints = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "taints",
    description: "新实例初始化taints信息"
  }];
  string dockerGraphPath = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "dockerGraphPath",
    description: "节点运行时为docker时设置信息数据目录，BCS默认设置/data/bcs/service/docker"
  }];
  string mountTarget = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "mountTarget",
    description: "节点数据盘挂载点, 默认不挂载数据盘,无数据盘或有多块数据盘的云主机此设置不生效。BCS默认/data"
  }];
  string userScript = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "userScript",
    description: "base64编码的用户脚本，k8s组件运行后执行，需要保证脚本的可重入和重试逻辑。如果要求节点需要在进行初始化完成后才可加入调度"
        "可配合 unschedulable 参数使用, 在 userScript 最后初始化完成后, 添加 kubectl uncordon nodename --kubeconfig=/root/.kube/config 命令使节点加入调度"
  }];
  uint32 unSchedulable = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "unSchedulable",
    description: "设置加入的节点是否参与调度，默认值0表示参与调度，非0表示不参与调度(加入节点时可覆盖参数)"
  }];
  repeated DataDisk dataDisks = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "dataDisks",
    description: "数据盘信息，无默认设置则不购买. 多盘数据盘挂载信息：新建节点时请确保购买CVM的参数传递了购买多个数据盘的信息"
  }];
  map<string, string> extraArgs = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "extraArgs",
    description: "配置各模块自定义参数，预定义的key为kubelet"
        "value为各模块进程启动参数，多个参数之间使用;间隔，例如Kubelet: root-dir=/var/lib/kubelet;"
  }];
  string preStartUserScript = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "preStartUserScript",
    description: "base64 编码的用户脚本，在初始化节点之前执行，注意目前只对添加已有节点生效"
  }];
  Action bcsScaleOutAddons = 13[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "bcsScaleOutAddons",
    description: "上架节点时进行BCS内置插件安装，该信息会索引云上默认配置信息进行对比与补充，Addons默认在集群"
        "正常初始化之后进行调用。"
  }];
  Action bcsScaleInAddons = 14[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "bcsScaleInAddons",
    description: "下架节点时进行BCS内置插件安装，该信息会索引云上默认配置信息进行对比与补充，Addons默认在集群"
        "正常初始化之后进行调用。"
  }];
  Action scaleOutExtraAddons = 15[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleOutExtraAddons",
    description: "上架节点时用户额外扩展传递的信息，该部分为预留二方/三方/服务商扩展使用，Addons默认在集群状态正常之后"
        "进行调用与安装。"
  }];
  Action scaleInExtraAddons = 16[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleInExtraAddons",
    description: "下架节点时额外扩展传递的信息，该部分为预留二方/三方/服务商扩展使用，Addons默认在集群状态正常之后"
        "进行调用与安装。"
  }];
  string nodeOS = 17 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeOS",
    description: "节点模版OS"
  }];
  string moduleID = 18 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "moduleID",
    description: "CC模块ID,CA扩容节点挂载模块"
  }];
  string creator = 19;
  string updater = 20;
  string createTime = 21;
  string updateTime = 22;
  string desc = 23 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "desc",
    description: "节点模板描述信息"
  }];
  RunTimeInfo runtime = 24 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "runtime",
    description: "节点池节点运行时可运行时版本信息"
  }];
  ModuleInfo module = 25 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "module",
    description: "节点池节点上下架时当前集群业务下转移模块信息"
  }];
  uint32 maxPodsPerNode = 26[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "maxPodsPerNode",
    description: "每个节点的最大Pod数量"
  }];
}

// ModuleInfo 业务模块信息,主要涉及到节点模块转移
message ModuleInfo {
  string scaleOutModuleID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleOutModuleID",
    description: "CC模块ID,CA扩容节点转移模块"
  }];
  string scaleInModuleID = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleInModuleID",
    description: "CC模块ID,CA缩容节点转移模块"
  }];
  string scaleOutBizID = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleOutBizID",
    description: "扩容节点CC业务ID, 默认是集群所属业务ID"
  }];
  string scaleInBizID = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleInBizID",
    description: "缩容节点CC业务ID, 默认是集群所属业务ID"
  }];
  string scaleOutModuleName = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleOutModuleName",
    description: "CC模块名称,CA扩容节点转移模块"
  }];
  string scaleInModuleName = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleInModuleName",
    description: "CC模块名称,CA缩容节点转移模块"
  }];
}

// RunTimeInfo cluster runTime info
message RunTimeInfo {
  string containerRuntime = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "containerRuntime",
    description: "容器运行时"
  }];
  string runtimeVersion = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "runtimeVersion",
    description: "运行时版本"
  }];
}

message Project {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "Project"
      description : "项目信息，整体对齐devops信息。每个业务可以有多个项目进行权限隔离"
    }
  };

  string projectID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "projectID",
    description: "项目ID,长度为32位字符串,自动生成"
  }];
  string name = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "name",
    description: "项目中文名称，长度不能超过64字符"
  }];
  string englishName = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "englishName",
    description: "项目英文缩写名称，唯一，长度不能超过32字符"
  }];
  string creator = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "creator",
    description: "项目创建者"
  }];
  string updater = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updater",
    description: "项目信息更新者"
  }];
  uint32 projectType = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "type",
    description: "项目类型，可选1:platform，2:business"
  }];
  bool useBKRes = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "useBKRes",
    description: "是否使用蓝鲸提供的资源池，主要用于资源计费，默认false"
  }];
  string description = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "description",
    description: "项目简要描述"
  }];
  bool isOffline = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "isOffline",
    description: "项目是否已经离线，默认false"
  }];
  string kind = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "kind",
    description: "项目中集群类型，可选k8s/mesos，未来该字段可能废弃"
  }];
  string businessID = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "businessID",
    description: "蓝鲸CMDB中业务ID信息"
  }];
  uint32 deployType = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "deployType",
    description: "业务部署类型，单独为蓝盾保留，1:物理机部署，2:容器部署"
  }];
  string bgID = 13[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "bgID",
    description: "事业群ID，来源于蓝鲸CMDB"
  }];
  string bgName = 14[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "bgName",
    description: "事业群名称，来源于蓝鲸CMDB"
  }];
  string deptID = 15[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "deptID",
    description: "部门ID，来源于蓝鲸CMDB"
  }];
  string deptName = 16[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "deptName",
    description: "部门名称，来源于蓝鲸CMDB"
  }];
  string centerID = 17[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "centerID",
    description: "中心ID，来源于蓝鲸CMDB"
  }];
  string centerName = 18[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "centerName",
    description: "中心名称，来源于蓝鲸CMDB"
  }];
  bool isSecret = 19[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "isSecret",
    description: "是否为保密项目，默认为false"
  }];
  map<string, Credential> credentials = 20[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "credentials",
    description: "项目下留存的各云环境下使用的credential信息，key为云类型"
  }];
  string creatTime = 21[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "creatTime",
    description: "创建时间"
  }];
  string updateTime = 22[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updateTime",
    description: "更新时间"
  }];
}

message Task {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "Task"
      description : "集群管理，节点管理背后所映射任务信息，主要是关联的自动化步骤（整合云api与蓝鲸标准运维）"
    }
  };

  string taskID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "taskID",
    description: "任务ID，用于追溯与确认任务状态"
  }];
  string taskType = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "taskType",
    description: "任务类型，例如CreateCluster，AddNodesToCluster，DeleteNodesFromCluster等"
  }];
  string status = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "status",
    description: "任务状态"
  }, (validate.rules).string = {in: ["INITIALIZING", "RUNNING", "SUCCESS", "FAILURE", "TIMEOUT", "FORCETERMINATE"]}
  ];
  string message = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "message",
    description: "任务执行信息，报错时为错误提示信息。"
  }];
  string start = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "start",
    description: "任务启动时间"
  }];
  string end = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "end",
    description: "任务结束时间"
  }];
  uint32 executionTime = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "executionTime",
    description: "任务执行时间"
  }];
  string currentStep = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "currentStep",
    description: "任务正在执行的步骤名称"
  }];
  repeated string stepSequence = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "stepSequence",
    description: "任务执行步骤"
  }];
  map<string, Step> steps = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "steps",
    description: "任务详细步骤信息，主要用于信息确认，异常时"
  }];
  string clusterID = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterID",
    description: "任务所属集群"
  }];
  string projectID = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "projectID",
    description: "任务所属项目"
  }];
  string creator = 13[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "creator",
    description: "任务创建人"
  }];
  string lastUpdate = 14[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "lastUpdate",
    description: "上次更新时间"
  }];
  string updater = 15[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updater",
    description: "任务更新人"
  }];
  bool forceTerminate = 16[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "forceTerminate",
    description: "任务设置为强制终止，用于流程控制"
  }];
  map<string, string> commonParams = 17[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "commonParams",
    description: "公共参数，便于跨Step完成信息传递"
  }];
  string taskName = 18[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "taskName",
    description: "任务类型中文名称"
  }];
  repeated string nodeIPList = 19[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeIPList",
    description: "当前任务操作的IP列表"
  }];
  string nodeGroupID = 20[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeGroupID",
    description: "记录CA扩缩容时任务对应的nodeGroupID"
  }];
}

message Step {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "Step"
      description : "任务执行的动作步骤，用于定义长时间运行的异步动作，例如机器重新初始化，插件安装等。"
    }
  };

  string name = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "name",
    description: "步骤名称"
  }];
  string system = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "system",
    description: "所关联的系统，例如bksops/api"
  }];
  string link = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "link",
    description: "补充system信息所用"
  }];
  map<string, string> params = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "params",
    description: "步骤定义的参数，key、value对"
  }];
  uint32 retry = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "retry",
    description: "该步骤重试次数"
  }];
  string start = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "start",
    description: "启动时间"
  }];
  string end = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "end",
    description: "结束时间"
  }];
  uint32 executionTime = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "executionTime",
    description: "执行时间"
  }];
  string status = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "status",
    description: "步骤状态，初始默认为NOTSTARTED"
  }, (validate.rules).string = {in: ["NOTSTARTED", "RUNNING", "SUCCESS", "FAILURE", "TIMEOUT", "FORCETERMINATE"]}
  ];
  string message = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "message",
    description: "步骤执行信息，主要用于提示当前错误"
  }];
  string lastUpdate = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "lastUpdate",
    description: "任务上次更新时间"
  }];
  string taskMethod = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "taskMethod",
    description: "task对应的代码函数"
  }];
  string taskName = 13[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "taskName",
    description: "task对应的中文名称"
  }];
  bool skipOnFailed = 14[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "skipOnFailed",
    description: "失败时跳过"
  }];
}

message TkeCidr {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "TkeCidr"
      description : "用于管理TKE集群网段划分信息"
    }
  };
  string VPC = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "VPC",
    description: "网段所属的VPC信息"
  }];
  string CIDR = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "CIDR",
    description: "具体网段"
  }];
  uint32 IPNumber = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "IPNumber",
    description: "网段包含可用IP地址"
  }];
  string status = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "status",
    description: "网段当前状态"
  }];
  string cluster = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cluster",
    description: "网段归属集群"
  }];
  string createTime = 6;
  string updateTime = 7;
}

message TkeCidrCount {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "TkeCidrCount"
      description : "TKE CIDR管理信息"
    }
  };
  uint32 count = 1;
  string VPC = 2;
  uint32 IPNumber = 3;
  string status = 4;
}


message CreateClusterReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CreateClusterReq"
      description : "创建集群请求，如果集群已经存在，直接报错。更新集群信息请使用Update接口"
      required : [
        "clusterID",
        "clusterName",
        "provider",
        "region",
        "projectID",
        "businessID",
        "environment",
        "engineType",
        "isExclusive",
        "clusterType",
        "creator"
      ]
    }
  };

  string clusterID = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "集群ID，例如BCS-K8S-000000(写入信息时直接指定clusterID，新创建时需平台生成)"
    }];
  string clusterName = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterName",
      description : "集群名称"
    },
    (validate.rules).string = {min_len : 1, max_len : 1024}
  ];
  string provider = 3 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "provider",
      description : "集群提供者，云模板ID，影响具体云设施管理流程"
    },
    (validate.rules).string.max_len = 32
  ];
  string region = 4 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "region",
      description : "集群所在地域"
    },
    (validate.rules).string =
    {min_len : 1, max_len : 100, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  string vpcID = 5 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "vpcID",
      description : "集群私有网络id，云上集群填写"
    },
    (validate.rules).string.max_len = 32
  ];
  string projectID = 6 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "projectID",
      description : "项目ID"
    },
    (validate.rules).string = {max_len : 100, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  string businessID = 7 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "businessID",
      description : "CMDB业务ID"
    },
    (validate.rules).string = {max_len : 100, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  string environment = 8 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "environment",
      description : "集群环境, 例如[prod, debug, stag]"
    },
    (validate.rules).string = {in: ["stag", "debug", "prod"]}
  ];
  string engineType = 9 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "engineType",
      description : "引擎类型，默认k8s"
    }, (validate.rules).string = {in: ["k8s", "mesos"]}];
  bool isExclusive = 10[
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "isExclusive",
      description : "是否为业务独占集群"
    }];
  string clusterType = 11 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterType",
      description : "集群类型, 例如[federation, single], "
          "federation表示为联邦集群，single表示独立集群，默认为single"
    }, (validate.rules).string = {in: ["federation", "single"]}];
  string federationClusterID = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "federationClusterID",
    description: "如果该集群为联邦集群的一部分，用该ID记录联邦Host信息"
  }];
  map<string, string> labels = 13[
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "labels",
      description : "集群的labels，用于携带额外的信息，最大不得超过20个"
    },
    (validate.rules).map.max_pairs = 20
  ];
  string creator = 14 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "creator",
      description : "创建人"
    },
    (validate.rules).string = {min_len : 2, max_len : 20}
  ];
  //集群创建的控制信息
  bool onlyCreateInfo = 15 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "onlyCreateInfo",
    description: "仅创建集群信息，不进行真实集群创建，默认为false"
  }];
  map<string, BKOpsPlugin> bcsAddons = 17[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "bcsAddons",
    description: "创建集群时进行BCS内置插件安装，该信息会索引云上默认配置信息进行对比与补充，如果填写错误直接报错"
  }];
  map<string, BKOpsPlugin> extraAddons = 18[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "extraAddons",
    description: "创建集群时额外扩展传递的信息，该部分为预留二方/三方/服务商扩展使用，如果填错直接报错"
  }];
  string cloudID = 19[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudID",
    description: "kubernetes集群上资源ID"
  }];
  string manageType = 20[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "manageType",
    description: "集群管理类型，公有云时生效，MANAGED_CLUSTER(云上托管集群)，默认是 INDEPENDENT_CLUSTER(独立集群，自行维护)"
  }];
  repeated string master = 21[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "master",
    description: "集群master IP列表"
  }];
  repeated string nodes = 22[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodes",
    description: "集群node IP列表"
  }];
  NetworkSetting networkSettings = 23[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "networkSettings",
    description: "集群网络基础设置，需要调用方设置"
  }, (validate.rules).any.required = true
  ];
  ClusterBasicSetting clusterBasicSettings = 24[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterBasicSettings",
    description: "集群基础信息设置，例如使用版本，关联的vpc等，调用方需要设置"
  }, (validate.rules).any.required = true
  ];
  ClusterAdvanceSetting clusterAdvanceSettings = 25[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cluseterAdvanceSettings",
    description: "集群进阶特性设置，例如启用ipvs特性，容器运行时设置等。需要调用方设置"
  }];
  NodeSetting nodeSettings = 26[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeSettings",
    description: "集群节点设置，例如挂载目录，docker数据目录等，如无特别需求，可以不设置，BCS提供默认参数"
  }];
  bool systemReinstall = 27[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "systemReinstall",
    description: "是否重装master节点的系统，机器被托管情况下有效"
  }];
  string initLoginPassword = 28[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "initLoginPassword",
    description: "重装master节点的系统时，初始化password，机器被托管情况下有效"
  }];
  string networkType = 29[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "networkType",
    description: "集群网络类型(underlay/overlay)"
  }];
  bool autoGenerateMasterNodes = 30[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "autoGenerateMasterNodes",
    description: "创建集群是否使用已存在节点, 默认false; 为true时, 需要生成master instance"
  }];
  repeated InstanceTemplateConfig instances = 31[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "instances",
    description: "创建集群时 autoGenerateMasterNodes 为true, 系统自动生成master节点, 需要指定instances生成的配置信息,支持不同可用区实例"
  }];
  map<string, string> extraInfo = 32[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "extraInfo",
    description: "存储集群扩展信息, 例如esb_url/webhook_image/priviledge_image等扩展信息"
  }];
  string moduleID = 33[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "moduleID",
    description: "集群模块ID(CA添加节点时模块转移)"
  }];
  string extraClusterID = 34[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "extraClusterID",
    description: "导入集群的额外集群ID标识信息,默认时空值"
  }];
  bool isCommonCluster = 35[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "isCommonCluster",
    description: "是否为公共集群,默认false"
  }];
  string description = 36[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "description",
    description: "集群简要描述"
  }];
  string clusterCategory = 37[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterCategory",
    description: "集群类别，主要用于区分该集群是否是自建、导入(builder/importer), 默认是自建"
  }];
  bool is_shared = 38[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "is_shared",
    description: "是否为共享集群,默认false"
  }];
  string cloudAccountID = 39[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudAccountID",
    description: "集群关联的云账号ID,默认为空。主要功能是获取云账号凭证。私有云场景下统一管理cloud账号，而公有云场景纳管不同云账号凭证"
  }];
}

message CreateClusterResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CreateClusterResp"
      description : "创建集群的返回"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code", description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "message", description: "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result", description : "返回结果"
  }];
  Cluster data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "被创建的集群信息"
  }];
  Task task = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "task", description : "集群创建任务（如果有），可用于查询自动化任务结果"
  }];
}

message KubeConfigReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "KubeConfigReq"
      description : "用户输入检测kubeConfig文件"
      required : [
        "kubeConfig"
      ]
    }
  };
  string kubeConfig = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "kubeConfig",
    description: "集群kubeConfig文件"
  }, (validate.rules).string = {min_len :1}];
}

message KubeConfigResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "KubeConfigResp"
      description : "检测kubeConfig可用性结果返回"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code", description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "message", description: "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result", description : "返回结果"
  }];
}

message ImportCloudMode {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ImportCloudMode"
      description : "云provider导入集群模式"
    }
  };
  string cloudID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudID",
    description: "云集群ID(例如: 腾讯云: cls-xxx)"
  }];
  string kubeConfig = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "kubeConfig",
    description: "集群kubeConfig文件"
  }];
}

message ImportClusterReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ImportClusterReq"
      description : "用户已存在的集群导入BCS进行纳管"
      required : [
        "clusterName",
        "provider",
        "projectID",
        "businessID",
        "environment",
        "engineType",
        "isExclusive",
        "clusterType",
        "creator"
      ]
    }
  };

  string clusterID = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "集群ID，例如BCS-K8S-000000(手动录入信息时直接指定clusterID,自动导入会默认生成集群ID)"
    }
  ];
  string clusterName = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterName",
      description : "集群名称"
    }, (validate.rules).string = {min_len :1, max_len : 1024}
  ];
  string description = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "description",
    description: "集群简要描述"
  }];
  string provider = 4 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "provider",
      description : "云模版ID, 集群所属云进行流程管理"
    }, (validate.rules).string = {min_len : 1, max_len : 1024}
  ];
  string region = 5 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "region",
      description : "集群所在地域"
    }, (validate.rules).string = {max_len : 100, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  string projectID = 6 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "projectID",
      description : "集群所属项目"
    }, (validate.rules).string = {min_len : 1, max_len : 100, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  string businessID = 7 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "businessID",
      description : "CMDB业务ID"
    }, (validate.rules).string = {min_len : 1, max_len : 100, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  string environment = 8 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "environment",
      description : "集群环境, 例如[prod, debug, stag]"
    }, (validate.rules).string = {in: ["stag", "debug", "prod"]}
  ];
  string engineType = 9 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "engineType",
      description : "引擎类型，默认k8s"
    }, (validate.rules).string = {in: ["k8s", "mesos", ""]}
  ];
  google.protobuf.BoolValue isExclusive = 10 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "isExclusive",
      description : "是否为业务独占集群,默认为true"
    }
  ];
  string clusterType = 11 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterType",
      description : "集群类型, 例如[federation, single], federation表示为联邦集群，single表示独立集群，默认为single"
    }, (validate.rules).string = {in: ["federation", "single", ""]}
  ];
  map<string, string> labels = 12 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "labels",
      description : "集群的labels，用于携带额外的信息，最大不得超过20个"
    },
    (validate.rules).map.max_pairs = 20
  ];
  string creator = 13 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "creator",
      description : "创建人"
    }, (validate.rules).string = {min_len : 1, max_len : 1024}
  ];
  ImportCloudMode cloudMode = 14[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudMode",
    description: "纳管云包含2种模式: 云ID和kubeConfig, 任意一种即可, 默认以集群ID为准"
  }, (validate.rules).any.required = true
  ];
  string manageType = 15[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "manageType",
    description: "集群管理类型，公有云时生效，MANAGED_CLUSTER(云上托管集群)，默认是 INDEPENDENT_CLUSTER(独立集群，自行维护)"
  }];
  string networkType = 16[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "networkType",
    description: "集群网络类型(underlay/overlay),默认是overlay"
  }];
  map<string, string> extraInfo = 17[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "extraInfo",
    description: "存储集群扩展信息, 例如esb_url/webhook_image/priviledge_image等扩展信息"
  }];
  string extraClusterID = 18[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "extraClusterID",
    description: "导入集群的额外集群ID标识信息,默认时空值"
  }];
  string clusterCategory = 19[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterCategory",
    description: "集群类别，主要用于区分该集群是否是自建、导入(builder/importer), 默认是自建"
  }];
  bool is_shared = 20[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "is_shared",
    description: "是否为共享集群,默认false"
  }];
  string version = 21[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "version",
    description: "导入集群版本信息"
  }, (validate.rules).string = {max_len : 1024}];
  string accountID = 22[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "accountID",
    description: "导入集群关联的cloud凭证信息, 可以为空; 当为空时, 可以通过cloud获取cloud凭证信息"
  }, (validate.rules).string = {max_len : 1024}];
}

message ImportClusterResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ImportClusterResp"
      description : "导入集群的返回"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code", description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "message", description: "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result", description : "返回结果"
  }];
  google.protobuf.Struct data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "返回导入集群和任务"
  }];
}

message DeleteClusterReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "DeleteClusterReq"
      description : "删除集群请求"
      required : ["clusterID"]
    }
  };

  string clusterID = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "集群ID"
    },
    (validate.rules).string =
    {min_len : 1, max_len : 100, pattern : "^[0-9a-zA-Z-]+$", prefix: "BCS-"}
  ];
  bool isForced = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "isForced",
    description : "是否强制删除，默认false。强制删除会一并删除clustermanager管理的资源，例如节点，节点池等。"
        "强制删除周期较长，清理工作会进入长后台任务运行，集群信息不会立刻被清空，而是处于删除状态。"
  }];
  string instanceDeleteMode = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "instanceDeleteMode",
    description : "集群实例删除时策略: terminate(销毁实例) retain(仅移除,保留实例)。"
  }];
  bool onlyDeleteInfo = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "onlyDeleteInfo",
    description : "默认为false。设置为true时，仅删除cluster-manager所记录的信息，不会触发任何自动化流程。"
        "该参数可以与isForced同时协同工作。"
  }];
  string operator = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "operator",
    description : "删除集群操作人"
  }];
  bool deleteClusterRecord = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "deleteClusterRecord",
    description : "管理员操作, 设置true时仅删除集群数据库记录"
  }];
}

message DeleteClusterResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "DeleteClusterResp"
      description : "删除集群的返回"
      required : ["code", "message"]
    }
  };

  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code", description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result", description : "返回结果"
  }];
  Cluster data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data", description : "返回已删除的集群信息"
  }];
  Task task = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "tasks", description : "删除集群的自动化任务，如果有"
  }];
}

message UpdateClusterReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateClusterReq"
      description : "更新集群信息请求，该接口仅用于信息更新和修正，不会触发任何行为动作。如果需要执行自动化相关流程，请根据需要使用对应的接口"
      required : [
        "clusterID"
      ]
    }
  };

  string clusterID = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "集群ID，例如BCS-K8S-000000"
    },
    (validate.rules).string = {max_len: 1024}
  ];
  string clusterName = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterName",
      description : "集群名称"
    }];
  string provider = 3 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "provider",
      description : "集群提供者，云模板ID，影响具体云设施管理流程"
    },
    (validate.rules).string.max_len = 1024
  ];
  string region = 4 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "region",
      description : "集群所在地域"
    }
  ];
  string vpcID = 5 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "vpcID",
      description : "集群私有网络id，云上集群填写"
    },
    (validate.rules).string.max_len = 1024
  ];
  string projectID = 6 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "projectID",
      description : "项目ID"
    },
    (validate.rules).string = {max_len : 1024}
  ];
  string businessID = 7 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "businessID",
      description : "CMDB业务ID"
    },
    (validate.rules).string = {max_len : 1024}
  ];
  string environment = 8 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "environment",
      description : "集群环境, 例如[prod, debug, stag]"
    }
    //(validate.rules).string = {in: ["test", "debug", "prod"]}
  ];
  string engineType = 9 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "engineType",
      description : "引擎类型，[k8s, mesos]，默认k8s"
    }
  ];
  google.protobuf.BoolValue isExclusive = 10[
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "isExclusive",
      description : "是否为业务独占集群"
    }];
  string clusterType = 11 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterType",
      description : "集群类型, 例如[federation, single], "
          "federation表示为联邦集群，single表示独立集群，默认为single"
    }];
  string federationClusterID = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "federationClusterID",
    description: "如果该集群为联邦集群的一部分，用该ID记录联邦Host信息"
  }];
  map<string, string> labels = 13[
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "labels",
      description : "集群的labels，用于携带额外的信息，最大不得超过20个"
    },
    (validate.rules).map.max_pairs = 20
  ];
  string updater = 14 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "updater",
      description : "操作人员名称"
    },
    (validate.rules).string = {max_len : 1024}
  ];
  string status = 15[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "status",
    description: "集群状态，可能状态CREATING，RUNNING，DELETING，FALURE，INITIALIZATION，DELETED"
  }, (validate.rules).string = {in: ["CREATING", "RUNNING", "DELETING", "FAILURE", "INITIALIZATION", "DELETED", ""]}
  ];
  map<string, BKOpsPlugin> bcsAddons = 17[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "bcsAddons",
    description: "创建集群时进行BCS内置插件安装，该信息会索引云上默认配置信息进行对比与补充，如果填写错误直接报错"
  }];
  map<string, BKOpsPlugin> extraAddons = 18[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "extraAddons",
    description: "创建集群时额外扩展传递的信息，该部分为预留二方/三方/服务商扩展使用，如果填错直接报错"
  }];
  string systemID = 19[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "systemID",
    description: "kubernetes集群在各云平台上资源ID"
  }];
  string manageType = 20[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "manageType",
    description: "集群管理类型，公有云时生效，MANAGED_CLUSTER(云上托管集群)，INDEPENDENT_CLUSTER(独立集群，自行维护)"
  }];
  repeated string master = 21[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "master",
    description: "集群master IP列表"
  }];
  NetworkSetting networkSettings = 22[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "networkSettings",
    description: "集群网络基础设置，需要调用方设置"
  }];
  ClusterBasicSetting clusterBasicSettings = 23[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterBasicSettings",
    description: "集群基础信息设置，例如使用版本，关联的vpc等，调用方需要设置"
  }];
  ClusterAdvanceSetting clusterAdvanceSettings = 24[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cluseterAdvanceSettings",
    description: "集群进阶特性设置，例如启用ipvs特性，容器运行时设置等。需要调用方设置"
  }];
  NodeSetting nodeSettings = 25[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeSettings",
    description: "集群节点设置，例如挂载目录，docker数据目录等，如无特别需求，可以不设置，BCS提供默认参数"
  }];
  string networkType = 26 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "networkType",
    description: "集群网络类型(underlay/overlay)"
  }];
  map<string, string> ExtraInfo = 27[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "ExtraInfo",
    description: "存储集群扩展信息, 例如esb_url/webhook_image/priviledge_image等扩展信息"
  }];
  string moduleID = 28[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "moduleID",
    description: "集群模块ID(CA添加节点时模块转移)"
  }];
  string extraClusterID = 29[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "extraClusterID",
    description: "导入集群的额外集群ID标识信息,默认时空值"
  }];
  google.protobuf.BoolValue isCommonCluster = 30[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "isCommonCluster",
    description: "是否为公共集群,默认false"
  }];
  string description = 31[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "description",
    description: "集群简要描述"
  }];
  string clusterCategory = 32[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterCategory",
    description: "集群类别，主要用于区分该集群是否是自建、导入(builder/exporter), 默认是自建"
  }];
  google.protobuf.BoolValue is_shared = 33[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "is_shared",
    description: "是否为共享集群,默认false"
  }];
  string createTime = 34 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "createTime",
    description: "更新集群创建时间,格式为(time.Now().Format(time.RFC3339))"
  }];
  string creator = 35 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "creator",
      description : "创建人员名称"
    },
    (validate.rules).string = {max_len : 1024}
  ];
  string importCategory = 36[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "importCategory",
    description: "当clusterCategory参数为importer时, 主要用于区分该集群是kubeConfig/cloud导入,默认为空"
  }];
  string cloudAccountID = 37[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudAccountID",
    description: "集群关联的云账号ID,默认为空。主要功能是获取云账号凭证。私有云场景下统一管理cloud账号，而公有云场景纳管不同云账号凭证"
  }];
}

message UpdateClusterResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateClusterResp"
      description : "更新集群信息返回"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "code", description : "返回错误码"}];
  string message = 2
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "result", description : "返回结果"}];
  Cluster data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "返回更新后集群信息"
  }];
}

message RetryCreateClusterReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "RetryCreateClusterReq"
      description : "重新下发创建集群请求"
      required : ["clusterID"]
    }
  };

  string clusterID = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "集群ID"
    }];
  string operator = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "operator",
    description : "操作者"
  }, (validate.rules).string = {min_len : 1, max_len : 100}];
}

message RetryCreateClusterResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "RetryCreateClusterResp"
      description : "重新下发创建集群返回"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code", description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result", description : "返回结果"
  }];
  Cluster data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data", description : "获取的集群信息"
  }];
  Task  task = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "task", description : "获取的任务信息"
  }];
}

message GetClusterReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetClusterReq"
      description : "查询集群请求"
      required : ["clusterID"]
    }
  };

  string clusterID = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "集群ID"
    },
    (validate.rules).string =
    {min_len : 1, max_len : 100, pattern : "^[0-9a-zA-Z-]+$", prefix: "BCS-"}
  ];
}

message GetClusterResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetClusterResp"
      description : "查询集群返回"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code", description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  Cluster data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "获取的集群信息"
  }];
  ExtraClusterInfo extra = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "extra",
    description : "获取的集群其他相关信息"
  }];
}

message ExtraClusterInfo {
  string providerType = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "providerType",
    description : "集群底层使用的引擎类型(tke/k8s/mesos)"
  }];
}

message CheckNodesRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CheckNodesRequest"
      description : "检查node是否存在bcs集群"
      required : ["innerIPs"]
    }
  };

  repeated string innerIPs = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "innerIPs",
      description : "节点内网IP列表"
    }];
}

message CheckNodesResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CheckNodesResponse"
      description : "返回节点状态"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code", description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  map<string, NodeResult> data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "返回node检查结果,key是IP"
  }];
}

message NodeResult {
  bool isExist = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "isExist",
      description : "节点是否存在集群中"
    }
  ];
  string clusterID = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "节点所在集群ID"
    }
  ];
  string clusterName = 3 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterName",
      description : "节点所在集群名称"
    }
  ];
}

message UnCordonNodeRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UnCordonNodeRequest"
      description : "设置节点可调度状态"
    }
  };

  repeated string innerIPs = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "innerIPs",
      description : "节点内网IP列表"
    }];
  string clusterID = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "更新节点所属的clusterID"
    },
    (validate.rules).string = {min_bytes: 1}
  ];
  repeated string nodes = 3 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "nodes",
      description : "节点名称列表，和节点内网IP列表二选一，优先节点名称列表"
    }];
}

message UnCordonNodeResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UnCordonNodeResponse"
      description : "更新节点可调度状态"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code", description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  NodeOperationStatus data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "返回数据"
  }];
}

message CordonNodeRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CordonNodeRequest"
      description : "设置节点不可调度状态"
    }
  };

  repeated string innerIPs = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "innerIPs",
      description : "节点内网IP列表"
    }];
  string clusterID = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "更新节点所属的clusterID"
    },
    (validate.rules).string = {min_bytes: 1}
  ];
  repeated string nodes = 3 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "nodes",
      description : "节点名称列表，和节点内网IP列表二选一，优先节点名称列表"
    }];
}

message CordonNodeResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CordonNodeResponse"
      description : "更新节点不可调度状态"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code", description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  NodeOperationStatus data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "返回数据"
  }];
}

message UpdateNodeRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateNodeRequest"
      description : "通过nodeIP更新nodes数据"
      required : ["innerIPs"]
    }
  };

  repeated string innerIPs = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "innerIPs",
      description : "节点内网IP列表"
    },
    (validate.rules).repeated = {min_items: 1, max_items: 100}
  ];

  string status = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "status",
      description : "更新节点状态(INITIALIZATION/RUNNING/DELETING/ADD-FAILURE/REMOVE-FAILURE)"
    },
    (validate.rules).string = {in: ["INITIALIZATION", "RUNNING", "DELETING", "ADD-FAILURE", "REMOVE-FAILURE"]}
  ];
  string nodeGroupID = 3 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "nodeGroupID",
      description : "更新节点所属的nodegroup"
    }
  ];
  string clusterID = 4 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "更新节点所属的clusterID"
    }
  ];
  string updater = 5 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "updater",
      description : "更新者"
    },
    (validate.rules).string = {min_bytes: 1}
  ];
}

message UpdateNodeResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateNodeResponse"
      description : "更新集群节点返回，如果存在"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code", description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  NodeStatus data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "更新成功和失败的node"
  }];
}

message NodeStatus {
  repeated string success = 1;
  repeated string failed = 2;
}

message GetNodeRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetNodeRequest"
      description : "通过内网IP查询节点请求"
      required : ["innerIP"]
    }
  };

  string innerIP = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "innerIP",
      description : "节点内网IP"
    },
    (validate.rules).string.ipv4 = true
  ];
  bool showPwd = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "showPwd",
      description : "节点密码是否展示(默认不展示)"
    }];
}

message GetNodeResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetNodeResponse"
      description : "查询节点返回，如果存在"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code", description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result", description : "返回结果"
  }];
  repeated Node data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data", description : "获取的节点信息"
  }];
}

message ListCommonClusterReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListCommonClusterReq"
      description : "查询公共集群列表"
    }
  };
}

message ListCommonClusterResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListCommonClusterResp"
      description : "查询公共集群列表返回"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "code",
      description : "返回错误码"
    }
  ];
  string message = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "message",
      description : "返回错误信息"
    }
  ];
  bool result = 3 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
    {
      title : "result",
      description : "返回结果"
    }
  ];
  repeated Cluster data = 4[
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
    {
      title : "data",
      description : "集群信息列表"
    }
  ];
  WebAnnotations web_annotations = 6[
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
    {
      title : "web_annotations",
      description : "用户所属项目的集群权限"
    }
  ];
}

message ListProjectClusterReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListProjectClusterReq"
      description : "获取项目下的集群列表"
    }
  };
  string projectID = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "projectID",
      description : "项目ID"
    },
    (validate.rules).string = {max_len : 100}
  ];
  string operator = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "operator",
    description : "操作者(传参时获取该用户对应集群的权限信息,不传时仅获取集群列表信息)"
  }];
}

message ListProjectClusterResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListProjectClusterResp"
      description : "查询项目下的集群列表返回"
      required : [ "code", "message", "data" ]
    }
  };

  uint32 code = 1 [ (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "code",
      description : "返回错误码"
  }];
  string message = 2 [ (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [ (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "result", description : "返回结果"} ];
  repeated Cluster data = 4
  [ (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "集群信息列表"
  } ];
  map<string, ExtraInfo> clusterExtraInfo = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "clusterExtraInfo",
    description : "集群其他标识信息,cluster结构之外的数据获取"
  }];
  WebAnnotations web_annotations = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "web_annotations",
    description : "用户所属项目的集群权限"
  }];
}

message ListClusterReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListClusterReq"
      description : "利用条件过滤集群列表请求，查询条件为And关系，如果某项查询"
          "条件值为空，则忽略不会用此条件过滤"
    }
  };

  string clusterName = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterName",
      description : "集群名称"
    },
    (validate.rules).string.max_len = 100
  ];
  string provider = 3 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "provider",
      description : "集群提供者，云模板ID，影响具体云设施管理流程"
    },
    (validate.rules).string.max_len = 32
  ];
  string region = 4 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "region",
      description : "集群所在地域"
    },
    (validate.rules).string.max_len = 100
    //    {min_len : 2, max_len : 100, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  string vpcID = 5 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "vpcID",
      description : "集群私有网络id，云上集群填写"
    },
    (validate.rules).string.max_len = 32
  ];
  string projectID = 6 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "projectID",
      description : "项目ID"
    },
    (validate.rules).string = {max_len : 100}
  ];
  string businessID = 7 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "businessID",
      description : "CMDB业务ID"
    },
    (validate.rules).string = {max_len : 100}
  ];
  string environment = 8 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "environment",
      description : "集群环境, 例如[prod, debug, test]"
    }
    // (validate.rules).string = {in: ["test", "debug", "prod"]}
  ];
  string engineType = 9 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "engineType",
      description : "引擎类型，[k8s, mesos]，默认k8s"
    }
    // (validate.rules).string = {in: ["k8s", "mesos"]}
  ];
  bool isExclusive = 10[
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "isExclusive",
      description : "是否为业务独占集群"
    }];
  string clusterType = 11 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterType",
      description : "集群类型, 例如[federation, single], "
          "federation表示为联邦集群，single表示独立集群，默认为single"
    }
    //(validate.rules).string = {in: ["federation", "single"]}
  ];
  string federationClusterID = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "federationClusterID",
    description: "如果该集群为联邦集群的一部分，用该ID记录联邦Host信息"
  }];
  string status = 13[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "status",
    description: "集群状态，可能状态CREATING，RUNNING，DELETING，FALURE，INITIALIZATION，DELETED"
  }, (validate.rules).string = {in: ["CREATING", "RUNNING", "DELETING", "FALURE", "INITIALIZATION", "DELETED", ""]}
  ];
  uint32 offset = 14 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "offset",
      description : "查询偏移量"
    },
    (validate.rules).uint32.gte = 0
  ];
  uint32 limit = 15 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "limit",
      description : "查询限制数量"
    },
    (validate.rules).uint32.lte = 1000
  ];
  string operator = 16[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "operator",
    description : "操作者(传参时获取该用户对应集群的权限信息,不传时仅获取集群列表信息)"
  }];
  string systemID = 17 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "systemID",
      description : "cloudID过滤集群"
    }, (validate.rules).string.max_len = 100];
  string extraClusterID = 18[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "extraClusterID",
    description: "导入集群的额外集群ID标识信息,默认时空值"
  }];
  bool isCommonCluster = 19[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "isCommonCluster",
    description: "是否为公共集群,默认false"
  }];
  string clusterID = 20 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "集群ID"
    }];
}

message ListClusterResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListClusterResp"
      description : "查询集群列表返回"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "code", description : "返回错误码"}];
  string message = 2
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "result", description : "返回结果"}];
  repeated Cluster data = 4
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "集群信息列表"
  }];
  map<string, ExtraInfo> clusterExtraInfo = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "clusterExtraInfo",
    description : "集群其他标识信息,cluster结构之外的数据获取"
  }];
  WebAnnotations web_annotations = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "web_annotations",
    description : "用户所属项目的集群权限"
  }];
}

message ExtraInfo {
  bool canDeleted = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "canDeleted",
    description : "集群列表的集群是否能够删除(集群无所属node节点时才允许删除)"
  }];
  string providerType = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "providerType",
    description : "集群底层使用的引擎类型(tke/k8s/mesos)"
  }];
}

// https://github.com/golang/protobuf/issues/1118
// https://pkg.go.dev/google.golang.org/protobuf/types/known/structpb#Struct
message WebAnnotations {
  map<string, google.protobuf.Struct> perms = 1;
}

message WebAnnotationsV2 {
  google.protobuf.Struct perms = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "perms",
    description: "权限信息"
  }];
}

message ListNodesInClusterRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListNodesInClusterRequest"
      description : "利用条件过滤集群节点列表请求，查询条件为And关系，如果某项查询"
          "条件值为空，则忽略不会用此条件过滤"
    }
  };

  string clusterID = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "集群ID"
    },
    (validate.rules).string = {min_len : 1, max_len : 100}
  ];
  string region = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "region",
      description : "集群所在地域"
    },
    (validate.rules).string = {max_len : 100}
  ];
  string vpcID = 3 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "vpcID",
      description : "集群私有网络id，云上集群填写"
    },
    (validate.rules).string.max_len = 32
  ];
  string nodeGroupID = 4 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "nodeGroupID",
      description : "所属NodeGroupID"
    },
    (validate.rules).string = {max_len : 100}
  ];
  string instanceType = 5 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "instanceType",
      description : "机型字符串"
    }
  ];
  string status = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "status",
    description: "节点状态，可能状态CREATING，RUNNING，DELETING，FAILURE，INITIALIZATION，DELETED"
  }];
  uint32 offset = 7 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "offset",
      description : "查询偏移量"
    },
    (validate.rules).uint32.gte = 0
  ];
  uint32 limit = 8 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "limit",
      description : "查询限制数量"
    },
    (validate.rules).uint32.lte = 1000
  ];
  bool showPwd = 9 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "showPwd",
      description : "节点密码是否展示(默认不展示)"
    }
  ];
}

message ListNodesInClusterResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListNodesInClusterResponse"
      description : "查询集群节点列表返回"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "code",
    description: "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "message",
    description: "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description: "返回结果"
  }];
  repeated ClusterNode data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "集群节点列表"
  }];
  WebAnnotationsV2 web_annotations = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "web_annotations",
    description : "权限信息"
  }];
}

message ClusterNode {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ClusterNode"
      description : "记录节点信息，用于节点列表展示"
    }
  };
  string nodeID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeID",
    description: "节点云instanceID"
  }];
  string innerIP = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "innerIP",
    description: "节点内网主IP"
  }];
  string instanceType = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "instanceType",
    description: "机型信息字符串，可能为空"
  }];
  uint32 CPU = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "CPU",
    description: "节点CPU信息"
  }];
  uint32 mem = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "mem",
    description: "节点内存信息"
  }];
  uint32 GPU = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "GPU",
    description: "节点GPU信息，可能为0"
  }];
  string status = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "status",
    description: "节点状态信息（根据弹性伸缩定义的），RUNNING, DELETEING, CREATING, FAILED, INITIALIZATION"
  }];
  string zoneID = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "zone",
    description: "节点可用区，可能为空"
  }];
  string nodeGroupID = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeGroupID",
    description: "节点所属的NodeGroup ID, 可能为空(仅CA节点归属于nodeGroup)"
  }];
  string clusterID = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterID",
    description: "节点所属的ClusterID"
  }];
  string VPC = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "VPC",
    description: "节点所属的VPC ID"
  }];
  string region = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "region",
    description: "节点所属区域，例如广州，深圳，加州等"
  }];
  string passwd = 13[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "passwd",
    description: "实例初始化密码, 需要进行解密"
  }];
  uint32 zone = 14[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "zoneID",
    description: "节点可用区ID，可能为空; 该信息主要使用于CA"
  }];
  string deviceID = 15[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "deviceID",
    description: "CA instance设备ID号"
  }];
  map<string, string> labels = 16[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "labels",
    description: "节点标签信息"
  }];
  repeated Taint taints = 17[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "taints",
    description: "节点信息"
  }];
  uint32 unSchedulable = 18[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "unSchedulable",
    description: "调度状态，默认值0表示参与调度，1表示不参与调度"
  }];
  string nodeName = 19[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeName",
    description: "节点名称,k8s nodename"
  }];
  uint32 agent = 20[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "agent",
    description: "节点Agent 状态，1在线，0不在线"
  }];
  string idc = 21[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "idc",
    description: "机房"
  }];
  string rack = 22[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "rack",
    description: "机架"
  }];
  string deviceClass = 23[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "deviceClass",
    description: "机型"
  }];
  string innerIPv6 = 24 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "innerIPv6",
    description: "节点ipv6地址"
  }];
  string nodeGroupName = 25 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeGroupName",
    description: "节点池名称"
  }];
}

message ListMastersInClusterRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListMastersInClusterRequest"
      description : "利用条件过滤集群master节点列表请求，查询条件为And关系，如果某项查询"
          "条件值为空，则忽略不会用此条件过滤"
    }
  };

  string clusterID = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "集群ID"
    },
    (validate.rules).string = {min_len : 1, max_len : 100}
  ];
}

message ListMastersInClusterResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListMastersInClusterResponse"
      description : "查询集群master节点列表返回"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "code",
    description: "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "message",
    description: "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description: "返回结果"
  }];
  repeated ClusterNode data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "集群节点列表"
  }];
}

message GetClusterCredentialReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetClusterCredentialReq"
      description : "查询集群Credential请求"
      required : ["serverKey"]
    }
  };

  string serverKey = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "serverKey",
      description : "上报信息的组件的key，对于kube-"
          "agent，是clusterID，对于mesos-driver和kube-"
          "driver，是有IP信息"
    },
    (validate.rules).string = {min_len : 1, max_len : 100}
  ];
}

message GetClusterCredentialResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetClusterCredentialResp"
      description : "查询集群Credential返回"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "code", description : "返回错误码"}];
  string message = 2
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "result", description : "返回结果"}];
  ClusterCredential data = 4
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "集群注册的证书信息"
  }];
}

message UpdateClusterCredentialReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateClusterCredentialReq"
      description : "更新集群Credential请求"
      required : [
        "clusterID",
        "clientModule",
        "serverAddress",
        "caCertData",
        "userToken",
        "clusterDomain"
      ]
    }
  };

  string serverKey = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "serverKey",
      description : "上报信息的组件的key，对于kube-"
          "agent，是clusterID，对于mesos-driver和kube-"
          "driver，是有IP信息"
    },
    (validate.rules).string = {min_len : 1, max_len : 100}
  ];
  string clusterID = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "集群ID"
    },
    (validate.rules).string = {min_len : 1, max_len : 100}
  ];
  string clientModule = 3 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clientModule",
      description : "上报的模块名字"
    },
    (validate.rules).string = {min_len : 1, max_len : 100}
  ];
  string serverAddress = 4 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "serverAddress",
      description : "集群服务地址"
    },
    (validate.rules).string = {min_len : 1, max_len : 2048}
  ];
  string caCertData = 5 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "caCertData",
      description : "集群CA数据"
    },
    (validate.rules).string.max_len = 4096
  ];
  string userToken = 6 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "userToken",
      description : "访问集群的token信息"
    },
    (validate.rules).string.max_len = 2048
  ];
  string clusterDomain = 7 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterDomain",
      description : "集群域名"
    },
    (validate.rules).string.max_len = 2048
  ];
  string clientCert = 8 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clientCert",
      description : "集群clientCert证书"
    },
    (validate.rules).string.max_len = 4096
  ];
  string clientKey = 9 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clientKey",
      description : "集群clientKey证书"
    },
    (validate.rules).string.max_len = 4096
  ];
}

message UpdateClusterCredentialResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateClusterCredentialResp"
      description : "更新集群Credential返回"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "code", description : "返回错误码"}];
  string message = 2
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "result", description : "返回结果"}];
}

message DeleteClusterCredentialReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "DeleteClusterCredentialReq"
      description : "删除集群注册的证书信息"
      required : ["serverKey"]
    }
  };

  string serverKey = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "serverKey",
      description : "上报信息的组件的key，对于kube-"
          "agent，是clusterID，对于mesos-driver和kube-"
          "driver，是有IP信息"
    },
    (validate.rules).string = {min_len : 1, max_len : 100}
  ];
}

message DeleteClusterCredentialResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "DeleteClusterCredentialResp"
      description : "删除集群Credential请求返回"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "code", description : "返回错误码"}];
  string message = 2
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "result", description : "返回结果"}];
}

message ListClusterCredentialReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListClusterCredentialReq"
      description : "查询集群注册的证书信息列表"
      required : []
    }
  };

  string serverKey = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "serverKey",
      description : "集群注册信息的key，对于kubeagent是clusterID，对于mesosdr"
          "iver和kubedriver是clusterID+ip"
    },
    (validate.rules).string.max_len = 100
  ];
  string clusterID = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "集群ID"
    },
    (validate.rules).string.max_len = 100
  ];
  string clientMode = 3 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clientMode",
      description : "客户端模式，kubeagent、kubedriver、mesosdriver"
    },
    (validate.rules).string.max_len = 100
  ];
  string connectMode = 4 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "connectMode",
      description : "链接模式，直联或者隧道"
    },
    (validate.rules).string.max_len = 100
  ];
  uint32 offset = 5 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "offset",
      description : "查询偏移量"
    },
    (validate.rules).uint32.gte = 0
  ];
  uint32 limit = 6 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "limit",
      description : "查询限制数量"
    },
    (validate.rules).uint32.lte = 1000
  ];
}

message ListClusterCredentialResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListClusterCredentialResp"
      description : "查询集群注册的证书信息列表"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "code", description : "返回错误码"}];
  string message = 2
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "result", description : "返回结果"}];
  repeated ClusterCredential data = 4
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "集群注册的证书信息列表"
  }];
}

message InitFederationClusterReq {}

message InitFederationClusterResp {}

message AddFederatedClusterReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "AddFederatedClusterReq"
      description : "将集群加入联邦集群的请求"
      required : ["federationClusterID", "clusterID"]
    }
  };

  string federationClusterID = 1
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "federationClusterID",
    description : "联邦集群ID"
  }];
  string clusterID = 2
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "clusterID",
    description : "底层集群ID"
  }];
}

message AddFederatedClusterResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "AddFederatedClusterResp"
      description : "将集群加入联邦集群的请求返回"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "code", description : "返回错误码"}];
  string message = 2
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "result", description : "返回结果"}];
}

message CreateNamespaceReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CreateNamespaceReq"
      description : "创建命名空间请求"
      required : [
        "name",
        "federationClusterID",
        "projectID",
        "businessID",
        "labels"
      ]
    }
  };

  string name = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "name",
      description : "命名空间名字"
    },
    (validate.rules).string = {min_len : 1, max_len : 100}
  ];
  string federationClusterID = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "federationClusterID",
      description : "命名空间所在联邦集群id"
    },
    (validate.rules).string.max_len = 100
  ];
  string projectID = 3 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "projectID",
      description : "项目id"
    },
    (validate.rules).string.max_len = 100
  ];
  string businessID = 4 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "businessID",
      description : "业务id"
    },
    (validate.rules).string.max_len = 100
  ];
  map<string, string> labels = 5
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "labels",
    description : "标签"
  }];
  string maxQuota = 6
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "maxQuota",
    description : "该命名空间最大的可用的配额，在所有地区的配额只和不能超过"
        "该配额限定的数量"
  }];
}

message CreateNamespaceResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CreateNamespaceResp"
      description : "创建命名空间返回"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "code", description : "返回错误码"}];
  string message = 2
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "result", description : "返回结果"}];
}

message DeleteNamespaceReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "DeleteNamespaceReq"
      description : "删除命名空间请求"
      required : ["namespace", "federationClusterID", "isForced"]
    }
  };

  string name = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "name",
      description : "命名空间名称"
    },
    (validate.rules).string = {min_len : 2, max_len : 100}
  ];
  string federationClusterID = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "federationClusterID",
      description : "命名空间所在联邦集群id"
    },
    (validate.rules).string.max_len = 100
  ];
  bool isForced = 3
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "isForced",
    description : "是否强制删除"
  }];
}

message DeleteNamespaceResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "DeleteNamespaceResp"
      description : "删除命名空间返回"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "code", description : "返回错误码"}];
  string message = 2
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "result", description : "返回结果"}];
}

message UpdateNamespaceReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateNamespaceReq"
      description : "更新命名空间请求"
      required : ["name", "federationClusterID", "labels"]
    }
  };

  string name = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "name",
      description : "命名空间名称"
    },
    (validate.rules).string = {min_len : 2, max_len : 100}
  ];
  string federationClusterID = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "federationClusterID",
      description : "命名空间所在联邦集群id"
    },
    (validate.rules).string.max_len = 100
  ];
  map<string, string> labels = 3
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "labels",
    description : "命名空间标签"
  }];
  string maxQuota = 4
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "maxQuota",
    description : "该命名空间最大的可用的配额，在所有地区的配额只和不能超过"
        "该配额限定的数量"
  }];
}

message UpdateNamespaceResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateNamespaceResp"
      description : "更新命名空间信息返回"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "code", description : "返回错误码"}];
  string message = 2
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "result", description : "返回结果"}];
}

message GetNamespaceReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetNamespaceReq"
      description : "查询命名空间请求"
      required : ["name", "federationClusterID"]
    }
  };

  string name = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "name",
      description : "命名空间名称"
    },
    (validate.rules).string = {min_len : 2, max_len : 100}
  ];
  string federationClusterID = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "federationClusterID",
      description : "命名空间所在联邦集群id"
    },
    (validate.rules).string.max_len = 100
  ];
}

message GetNamespaceResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetNamespaceReq"
      description : "查询命名空间请求"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "code", description : "返回错误码"}];
  string message = 2
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "result", description : "返回结果"}];
  Namespace data = 4
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "命名空间信息"
  }];
}

message ListNamespaceReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListNamespaceReq"
      description : "根据条件查询命名空间列表请求"
      required : [
        "federationClusterID",
        "projectID",
        "businessID",
        "offset",
        "limit"
      ]
    }
  };

  string federationClusterID = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "federationClusterID",
      description : "查询联邦集群id"
    },
    (validate.rules).string.max_len = 100
  ];
  string projectID = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "projectID",
      description : "项目id"
    },
    (validate.rules).string.max_len = 100
  ];
  string businessID = 3 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "businessID",
      description : "业务id"
    },
    (validate.rules).string.max_len = 100
  ];
  uint32 offset = 4
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "offset",
    description : "查询偏移量"
  }];
  uint32 limit = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "limit", description : "查询最大返回数量"}];
}

message ListNamespaceResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListNamespaceResp"
      description : "查询命名空间返回列表"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "code", description : "返回错误码"}];
  string message = 2
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "result", description : "返回结果"}];
  repeated Namespace data = 4
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nsList",
    description : "查询命名空间信息列表"
  }];
}

message CreateNamespaceQuotaReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CreateNamespaceQuotaReq"
      description :
          "创建命名空间资源配额请求，如果指定子集群clusterID，则在指定"
              "子集群创建ResourceQuota，如果未指定子集群clusterID，则根据指定的re"
              "gion系统自动分配子集群clusterID"
      required : ["namespace", "federationClusterID", "resourceQuota"]
    }
  };

  string namespace = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "namespace",
      description : "所在命名空间"
    },
    (validate.rules).string = {min_len : 2, max_len : 100}
  ];
  string federationClusterID = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "federationClusterID",
      description : "命名空间所在联邦集群id"
    },
    (validate.rules).string.max_len = 100
  ];
  string clusterID = 3 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "指定子集群id"
    },
    (validate.rules).string.max_len = 100
  ];
  string region = 4 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "region",
      description : "指定区域"
    },
    (validate.rules).string.max_len = 100
  ];
  string resourceQuota = 5
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "resourceQuota",
    description : "k8s原生资源配额，json字符串"
  }];
}

message CreateNamespaceQuotaResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CreateNamespaceQuotaResp"
      description : "创建命名空间资源配额返回"
      required : ["code", "message", "data"]
    }
  };

  message CreateNamespaceQuotaRespData {
    string clusterID = 1
    [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "命名空间分配的集群id"
    }];
  }

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "code", description : "返回错误码"}];
  string message = 2
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "result", description : "返回结果"}];
  CreateNamespaceQuotaRespData data = 4;
}

message DeleteNamespaceQuotaReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "DeleteNamespaceQuotaReq"
      description : "删除命名空间资源配额请求"
      required : ["namespace", "federationClusterID", "clusterID"]
    }
  };

  string namespace = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "namespace",
      description : "命名空间名字"
    },
    (validate.rules).string = {min_len : 2, max_len : 100}
  ];
  string federationClusterID = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "federationClusterID",
      description : "命名空间所在联邦集群id"
    },
    (validate.rules).string.max_len = 100
  ];
  string clusterID = 3 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "命名空间配额所在子集群id"
    },
    (validate.rules).string.max_len = 100
  ];
  bool isForced = 5
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "isForced",
    description : "是否强制删除，强制删除会忽略命名空间中是否还有pod"
  }];
}

message DeleteNamespaceQuotaResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "DeleteNamespaceQuotaResp"
      description : "删除命名空间资源配额返回"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "code", description : "返回错误码"}];
  string message = 2
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "result", description : "返回结果"}];
}

message UpdateNamespaceQuotaReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateNamespaceQuotaReq"
      description : "更新命名空间资源配额请求"
      required :
      ["namespace", "federationClusterID", "clusterID", "resourceQuota"]
    }
  };

  string namespace = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "namespace",
      description : "命名空间名称"
    },
    (validate.rules).string = {min_len : 2, max_len : 100}
  ];
  string federationClusterID = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "federationClusterID",
      description : "命名空间所在联邦id"
    },
    (validate.rules).string.max_len = 100
  ];
  string clusterID = 3 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "配额所在子集群id"
    },
    (validate.rules).string.max_len = 100
  ];
  string resourceQuota = 4
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "resourceQuota",
    description : "配额详情"
  }];
}

message UpdateNamespaceQuotaResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateNamespaceQuotaResp"
      description : "更新命名空间资源配额返回"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "code", description : "返回错误码"}];
  string message = 2
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "result", description : "返回结果"}];
}

message GetNamespaceQuotaReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetNamespaceQuotaReq"
      description : "获取命名空间资源配额请求"
      required : ["namespace", "federationClusterID", "clusterID"]
    }
  };

  string namespace = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "namespace",
      description : "命名空间名称"
    },
    (validate.rules).string = {min_len : 2, max_len : 100}
  ];
  string federationClusterID = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "federationClusterID",
      description : "命名空间所在联邦id"
    },
    (validate.rules).string.max_len = 100
  ];
  string clusterID = 3 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "配额所在子集群id"
    },
    (validate.rules).string.max_len = 100
  ];
}

message GetNamespaceQuotaResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetNamespaceQuotaResp"
      description : "获取命名空间资源配额返回"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "code", description : "返回错误码"}];
  string message = 2
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "result", description : "返回结果"}];
  ResourceQuota data = 4
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "查询到的资源配额详情"
  }];
}

message ListNamespaceQuotaReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListNamespaceQuotaReq"
      description : "查询命名空间资源配额列表请求"
      required : ["namespace", "federationClusterID"]
    }
  };

  string namespace = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "namespace",
      description : "命名空间名称"
    },
    (validate.rules).string.max_len = 100
  ];
  string federationClusterID = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "federationClusterID",
      description : "命名空间所在联邦id"
    },
    (validate.rules).string.max_len = 100
  ];
  uint32 offset = 3
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "offset",
    description : "查询偏移量"
  }];
  uint32 limit = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "limit", description : "查询最大返回数量"}];
}

message ListNamespaceQuotaResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListNamespaceQuotaResp"
      description : "查询命名空间资源配额列表返回"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "code", description : "返回错误码"}];
  string message = 2
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "result", description : "返回结果"}];
  repeated ResourceQuota data = 4
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "查询到的资源配额列表"
  }];
}

message CreateNamespaceWithQuotaReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CreateNamespaceWithQuotaReq"
      description : "创建命名空间及其资源配额请求"
      required : [
        "name",
        "federationClusterID",
        "projectID",
        "businessID",
        "labels",
        "region",
        "resourceQuota"
      ]
    }
  };

  string name = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "name", description : "命名空间名称"}];
  string federationClusterID = 2
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "federationClusterID",
    description : "命名空间所在联邦id"
  }];
  string projectID = 3
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "projectID",
    description : "项目id"
  }];
  string businessID = 4
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "businessID",
    description : "业务id"
  }];
  map<string, string> labels = 5
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "labels",
    description : "命名空间labels"
  }];
  string clusterID = 6
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "clusterID",
    description : "指定命名空间集群id，如为空，则由系统分配"
  }];
  string region = 7
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "region",
    description : "命名空间所在区域"
  }];
  string maxQuota = 8
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "maxQuota",
    description : "该命名空间最大的可用的配额，在所有地区的配额只和不能超过"
        "该配额限定的数量"
  }];
  string resourceQuota = 9
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "resourceQuota",
    description : "资源配额"
  }];
}

message CreateNamespaceWithQuotaResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CreateNamespaceWithQuotaResp"
      description : "创建命名空间及其资源配额返回"
      required : ["errCode", "errMsg", "clusterID"]
    }
  };

  message CreateNamespaceWithQuotaRespData {
    string clusterID = 1
    [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "命名空间分配的集群id"
    }];
  }

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "code", description : "返回错误码"}];
  string message = 2
  [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
  {title : "result", description : "返回结果"}];
  CreateNamespaceWithQuotaRespData data = 4;
}

message CreateProjectRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CreateProjectRequest"
      description : "创建项目请求"
      required : [
        "name",
        "englishName",
        "creator",
        "projectType",
        "useBKRes",
        "businessID",
        "kind",
        "deployType"
      ]
    }
  };

  string projectID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "projectID",
    description: "项目ID，长度为32位字符串"
  }];
  string name = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "name",
    description: "项目中文名称，长度不能超过64字符"
  }, (validate.rules).string = {min_len : 1}];
  string englishName = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "englishName",
    description: "项目英文缩写名称，唯一，长度不能超过32字符"
  }, (validate.rules).string = {min_len : 1}];
  string creator = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "creator",
    description: "项目创建者"
  }, (validate.rules).string = {min_len : 1}];
  uint32 projectType = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "type",
    description: "项目类型，可选1:platform，2:business"
  }];
  bool useBKRes = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "useBKRes",
    description: "是否使用蓝鲸提供的资源池，主要用于资源计费，默认false"
  }];
  string description = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "description",
    description: "项目简要描述"
  }];
  bool isOffline = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "isOffline",
    description: "项目是否已经离线，默认false"
  }];
  string kind = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "kind",
    description: "项目中集群类型，可选k8s/mesos，未来该字段可能废弃"
  }];
  string businessID = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "businessID",
    description: "蓝鲸CMDB中业务ID信息"
  }];
  uint32 deployType = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "deployType",
    description: "业务部署类型，单独为蓝盾保留，1:物理机部署，2:容器部署"
  }, (validate.rules).uint32 = {in: [1, 2]}
  ];
  string bgID = 13[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "bgID",
    description: "事业群ID，来源于蓝鲸CMDB"
  }];
  string bgName = 14[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "bgName",
    description: "事业群名称，来源于蓝鲸CMDB"
  }];
  string deptID = 15[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "deptID",
    description: "部门ID，来源于蓝鲸CMDB"
  }];
  string deptName = 16[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "deptName",
    description: "部门名称，来源于蓝鲸CMDB"
  }];
  string centerID = 17[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "centerID",
    description: "中心ID，来源于蓝鲸CMDB"
  }];
  string centerName = 18[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "centerName",
    description: "中心名称，来源于蓝鲸CMDB"
  }];
  bool isSecret = 19[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "isSecret",
    description: "是否为保密项目，默认为false"
  }];
  map<string, Credential> credentials = 20[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "credentials",
    description: "项目下留存的各云环境下使用的credential信息，key为云类型"
  }];
}

message CreateProjectResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
}

message UpdateProjectRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateProjectRequest"
      description : "更新项目请求"
    }
  };

  string projectID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "projectID",
    description: "项目ID，长度不能超过32"
  }, (validate.rules).string = {min_len : 1, max_len : 32}
  ];
  string name = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "name",
    description: "项目中文名称，长度不能超过64字符"
  }];
  string updater = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updater",
    description: "更新者"
  }, (validate.rules).string = {min_len : 2, max_len : 20}
  ];
  uint32 projectType = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "type",
    description: "项目类型，可选1:platform，2:business"
  } // (validate.rules).uint32 = {ignore_empty: true, in: [1, 2]}
  ];
  google.protobuf.BoolValue useBKRes = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "useBKRes",
    description: "是否使用蓝鲸提供的资源池，主要用于资源计费，默认false"
  }];
  string description = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "description",
    description: "项目简要描述"
  }];
  google.protobuf.BoolValue isOffline = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "isOffline",
    description: "项目是否已经离线，默认false"
  }];
  string kind = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "kind",
    description: "项目中集群类型，可选k8s/mesos，未来该字段可能废弃"
  }];
  uint32 deployType = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "deployType",
    description: "业务部署类型，单独为蓝盾保留，1:物理机部署，2:容器部署"
  } //(validate.rules).uint32 = {ignore_empty: true, in: [1, 2]}
  ];
  string bgID = 13[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "bgID",
    description: "事业群ID，来源于蓝鲸CMDB"
  }];
  string bgName = 14[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "bgName",
    description: "事业群名称，来源于蓝鲸CMDB"
  }];
  string deptID = 15[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "deptID",
    description: "部门ID，来源于蓝鲸CMDB"
  }];
  string deptName = 16[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "deptName",
    description: "部门名称，来源于蓝鲸CMDB"
  }];
  string centerID = 17[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "centerID",
    description: "中心ID，来源于蓝鲸CMDB"
  }];
  string centerName = 18[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "centerName",
    description: "中心名称，来源于蓝鲸CMDB"
  }];
  google.protobuf.BoolValue isSecret = 19[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "isSecret",
    description: "是否为保密项目，默认为false"
  }];
  map<string, Credential> credentials = 20[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "credentials",
    description: "项目下留存的各云环境下使用的credential信息，key为云类型"
  }];
  string businessID = 21[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "businessID",
    description: "蓝鲸CMDB中业务ID信息"
  }];
}

message UpdateProjectResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
  Project data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "data",
    description : "更新后的项目信息"
  }];
}

message DeleteProjectRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "DeleteProjectRequest"
      description : "删除项目请求"
      required: ["projectID"]
    }
  };

  string projectID = 1;
  bool isForce = 2;
}

message DeleteProjectResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
  Project data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "data",
    description : "已删除的项目信息"
  }];
}

message GetProjectRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetProjectRequest"
      description : "查询具体项目请求"
      required : ["projectID"]
    }
  };

  string projectID = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "projectID",
    description : "项目ID"
  },
    (validate.rules).string = {min_len : 2, max_len : 33, pattern : "^[0-9a-zA-Z-]+$"}
  ];
}

message GetProjectResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetProjectResponse"
      description : "查询项目返回"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  Project data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "获取的集群信息"
  }];
}

message ListProjectRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListProjectRequest"
      description : "查询项目请求，如果填写了目标字段，则组合目标信息查询，如果全为空则为查询全量信息"
    }
  };

  string name = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "name",
    description: "项目中文名称，长度不能超过64字符"
  }];
  string englishName = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "englishName",
    description: "项目英文缩写名称，唯一，长度不能超过32字符"
  }];
  uint32 projectType = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "type",
    description: "项目类型，可选1:platform，2:business"
  }];
  bool useBKRes = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "useBKRes",
    description: "是否使用蓝鲸提供的资源池，主要用于资源计费，默认false"
  }];
  bool isOffline = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "isOffline",
    description: "项目是否已经离线，默认false"
  }];
  string kind = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "kind",
    description: "项目中集群类型，可选k8s/mesos，未来该字段可能废弃"
  }];
  string businessID = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "businessID",
    description: "蓝鲸CMDB中业务ID信息"
  }];
  string deployType = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "deployType",
    description: "业务部署类型，单独为蓝盾保留，1:物理机部署，2:容器部署"
  }];
  string bgID = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "bgID",
    description: "事业群ID，来源于蓝鲸CMDB"
  }];
  string bgName = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "bgName",
    description: "事业群名称，来源于蓝鲸CMDB"
  }];
  string deptID = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "deptID",
    description: "部门ID，来源于蓝鲸CMDB"
  }];
  string deptName = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "deptName",
    description: "部门名称，来源于蓝鲸CMDB"
  }];
  string centerID = 13[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "centerID",
    description: "中心ID，来源于蓝鲸CMDB"
  }];
  string centerName = 14[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "centerName",
    description: "中心名称，来源于蓝鲸CMDB"
  }];
  bool isSecret = 15[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "isSecret",
    description: "是否为保密项目，默认为false"
  }];
}

message ListProjectResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetProjectResponse"
      description : "查询项目返回"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  repeated Project data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "获取的项目信息"
  }];
}

// Cloud api request & response

message CreateCloudRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CreateCloudRequest"
      description : "创建cloud请求"
      required : [
        "cloudID", "name", "osManagement", "creator"
      ]
    }
  };

  string cloudID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudType",
    description: "云类型，英文字符串"
  }, (validate.rules).string = {min_len : 2, max_len : 20, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  string name = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "name",
    description: "云类型中文名称"
  }, (validate.rules).string = {min_len : 2, max_len : 64}
  ];
  bool editable = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "editable",
    description: "对于SaaS层面该信息是否可编辑，BCS默认提供的预定义信息不可编译"
  }];
  map<string, BKOpsPlugin> opsPlugins = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "opsPlugins",
    description: "通过标准运维实现的扩展流程或者插件"
  }];
  map<string, BKOpsPlugin> extraPlugins = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "extraPlugins",
    description: "额外扩展流程，用于自定义扩展，该部分允许用户编辑"
  }];
  Credential cloudCredential = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudCredential",
    description: "该云下统一定义的账户信息，可以为空，如果有配置，则当Cluster、Project下没有设置时会使用该配置"
  }];
  OSInfo osManagement = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "osManagement",
    description: "该云下OS层面定义的统一管理信息"
  }];
  ClusterMgr clusterManagement = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterManagement",
    description: "该云下集群管理层面的流程管理信息"
  }];
  NodeGroupMgr nodeGroupManagement = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeGroupManagement",
    description: "该云下弹性伸缩管理信息"
  }];
  string creator = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "creator",
    description: "信息创建者"
  }, (validate.rules).string = {min_len : 2, max_len : 20, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  string cloudProvider = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudProvider",
    description: "特性实现模式"
  } //(validate.rules).string = {in: ["aws", "qcloud", "blueking", "bksops", "yunti"]}
  ];
  string config = 13 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "config",
    description: "扩展字段, 保存适配各种cloud的配置信息, 通过不同的cloud json解析配置"
  }];
  string description = 14 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "description",
    description: "描述cloud详细介绍信息"
  }];
  string engineType = 15 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "engineType",
    description: "底层使用的引擎类型"
  }];
  string enable = 16 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "enable",
    description: "云模版是否返回给用户可见"
  }];
  CloudNetworkInfo networkInfo = 17[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "networkInfo",
    description: "该云下统一定义网络配置信息"
  }];
  CloudConfigInfo confInfo = 18[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "confInfo",
    description: "该云下统一云配置信息"
  }];
  map<string, string> platformInfo = 19[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "platformInfo",
    description: "平台不同云的配置信息"
  }];
}

message CreateCloudResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
}

message UpdateCloudRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateProjectRequest"
      description : "创建项目请求"
      required: ["cloudID", "updater"]
    }
  };

  string cloudID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudID",
    description: "云类型，英文字符串"
  }, (validate.rules).string = {max_len : 1024}
  ];
  string name = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "name",
    description: "云类型中文名称"
  }, (validate.rules).string = {max_len : 1024}
  ];
  bool editable = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "editable",
    description: "对于SaaS层面该信息是否可编辑，BCS默认提供的预定义信息不可编译"
  }];
  map<string, BKOpsPlugin> opsPlugins = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "opsPlugins",
    description: "通过标准运维实现的扩展流程或者插件"
  }];
  map<string, BKOpsPlugin> extraPlugins = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "extraPlugins",
    description: "额外扩展流程，用于自定义扩展，该部分允许用户编辑"
  }];
  Credential cloudCredential = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudCredential",
    description: "该云下统一定义的账户信息，可以为空，如果有配置，则当Cluster、Project下没有设置时会使用该配置"
  }];
  OSInfo osManagement = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "osManagement",
    description: "该云下OS层面定义的统一管理信息"
  }];
  ClusterMgr clusterManagement = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterManagement",
    description: "该云下集群管理层面的流程管理信息"
  }];
  NodeGroupMgr nodeGroupManagement = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeGroupManagement",
    description: "该云下弹性伸缩管理信息"
  }];
  string updater = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updater",
    description: "更新者"
  }, (validate.rules).string = {min_len : 2, max_len : 1024, pattern : "^[0-9a-zA-Z]+$"}
  ];
  string cloudProvider = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudProvider",
    description: "特性实现模式"
  }//, (validate.rules).string = {in: ["aws", "qcloud", "blueking", "bksops", "yunti"]}
  ];
  string config = 13 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "config",
    description: "扩展字段, 保存适配各种cloud的配置信息, 通过不同的cloud json解析配置"
  }];
  string description = 14 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "description",
    description: "描述cloud详细介绍信息"
  }];
  string engineType = 15 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "engineType",
    description: "底层使用的引擎类型"
  }];
  string enable = 16 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "enable",
    description: "云模版是否返回给用户可见(值为true或false)"
  }];
  CloudNetworkInfo networkInfo = 17[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "networkInfo",
    description: "该云下统一定义网络配置信息"
  }];
  CloudConfigInfo confInfo = 18[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "confInfo",
    description: "该云下统一云配置信息"
  }];
  map<string, string> platformInfo = 19[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "platformInfo",
    description: "平台不同云的配置信息"
  }];
}

message UpdateCloudResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
  Cloud data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "data",
    description : "更新后的云模板信息"
  }];
}

message DeleteCloudRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "DeleteCloudRequest"
      description : "删除云模板请求"
      required: ["cloudID"]
    }
  };

  string cloudID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudID",
    description: "云类型，英文字符串"
  }, (validate.rules).string = {min_len : 2, max_len : 20, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  bool isForce = 2;
}

message DeleteCloudResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
  Cloud data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "data",
    description : "已删除的云模板信息"
  }];
}

message GetCloudRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetCloudRequest"
      description : "查询具体项目请求"
      required : ["cloudID"]
    }
  };

  string cloudID = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "cloudID",
    description : "云模板ID"
  }, (validate.rules).string = {min_len : 2, max_len : 20, pattern : "^[0-9a-zA-Z-]+$"}
  ];
}

message GetCloudResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetCloudResponse"
      description : "查询云模板返回"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  Cloud data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "获取的集群信息"
  }];
}

message ListCloudRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListCloudRequest"
      description : "查询云模板请求，如果填写了目标字段，则组合目标信息查询，如果全为空则为查询全量信息"
    }
  };

  string cloudID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudID",
    description: "云类型，英文字符串"
  }, (validate.rules).string = {max_len : 20}
  ];
  string name = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "name",
    description: "云类型中文名称"
  }];
  bool editable = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "editable",
    description: "对于SaaS层面该信息是否可编辑，BCS默认提供的预定义信息不可编译"
  }];
  string creator = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "creator",
    description: "创建者"
  }];
  string updater = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updater",
    description: "更新者"
  }];
  string cloudProvider = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudProvider",
    description: "特性实现模式"
  }];
}

message ListCloudResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListCloudResponse"
      description : "查询云模板返回"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  repeated Cloud data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "获取到的信息"
  }];
}

// NodeGroup api request & response

message CreateNodeGroupRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CreateNodeGroupRequest"
      description : "创建节点组请求"
      required : [
        "name", "clusterID", "region", "autoScaling", "launchTemplate", "creator", "nodeOS", "instanceTemplate"
      ]
    }
  };

  string name = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "name",
    description: "节点组名称"
  }, (validate.rules).string = {min_len : 1, max_len : 255}
  ];
  string clusterID = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterID",
    description: "节点组所关联的集群，该ID为BCS集群ID"
  },
    (validate.rules).string = {min_len : 2, max_len : 100, pattern : "^[0-9a-zA-Z-]+$", prefix: "BCS-"}
  ];
  string region = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "region",
    description: "节点组所关联区域信息"
  }, (validate.rules).string = {min_len : 1, max_len : 32, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  bool enableAutoscale = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "enableAutoscale",
    description: "是否开启弹性伸缩，默认false"
  }];
  AutoScalingGroup autoScaling = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "autoScaling",
    description: "弹性伸缩具体配置"
  }, (validate.rules).message.required = true
  ];
  LaunchConfiguration  launchTemplate = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "launchTemplate",
    description: "伸缩时创建具体实例的配置模板"
  }, (validate.rules).message.required = true
  ];
  map<string, string> labels = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "labels",
    description: "新实例初始化label信息"
  }];
  map<string, string> taints = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "taints",
    description: "新实例初始化的污点信息"
  }];
  string nodeOS = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeOS",
    description: "新实例选用的系统OS，参照云信息中配置的默认值"
  }];
  string creator = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "creator",
    description: "信息创建者"
  }, (validate.rules).string = {min_len : 2, max_len : 20, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  string provider = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "provider",
    description: "NodeGroup具体依赖的云实现方案，用于方案组合与扩展。默认为空，如果要设置，必须是CloudID"
  }];
  string consumerID = 18[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "consumerID",
    description: "consumerID对接resourceManager模块申请资源使用"
  }];
  NodeTemplate nodeTemplate = 19[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeTemplate",
    description: "节点组实例设置"
  }, (validate.rules).message.required = true
  ];
  map<string, string> tags = 20[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "tags",
    description: "新实例初始化的资源标签信息"
  }];
  string nodeGroupType = 21 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeGroupType",
    description: "节点池类型(normal/external)。普通弹性伸缩节点池和第三方弹性伸缩节点池, 即CVM节点或IDC节点"
  }];
  uint32 bkCloudID = 22 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "bkCloudID",
    description: "云区域ID"
  }];
  string cloudAreaName = 23 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudAreaName",
    description: "云区域名称"
  }];
  GroupExtraInfo extra = 24 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "extra",
    description: "节点池创建extra信息, 主要是针对云的个性化参数"
  }];
}

message GroupExtraInfo {
  string provider = 1;
  string poolID = 2;
}

message CreateNodeGroupResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
  CreateNodeGroupResponseData data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "data",
    description : "返回数据"
  }];
}

message CreateNodeGroupResponseData {
  NodeGroup nodeGroup = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nodeGroup", description : "节点池信息"
  }];
  Task task = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "task", description : "创建节点池后台任务"
  }];
}

message UpdateNodeGroupRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateNodeGroupRequest"
      description : "更新NodeGroup请求"
    }
  };

  string nodeGroupID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeGroupID",
    description: "节点组ID"
  }, (validate.rules).string = {max_len : 20}
  ];
  string clusterID = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterID",
    description: "节点组所关联的集群，该ID为BCS集群ID"
  },
    (validate.rules).string = {min_len : 2, max_len : 100, pattern : "^[0-9a-zA-Z-]+$", prefix: "BCS-"}
  ];
  string name = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "name",
    description: "节点组名称"
  }, (validate.rules).string = {min_len : 2, max_len : 64}
  ];
  string region = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "region",
    description: "节点组所关联区域信息"
  }];
  google.protobuf.BoolValue enableAutoscale = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "enableAutoscale",
    description: "是否开启弹性伸缩，默认false"
  }];
  AutoScalingGroup autoScaling = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "autoScaling",
    description: "弹性伸缩具体配置"
  }, (validate.rules).message.required = true
  ];
  LaunchConfiguration  launchTemplate = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "launchTemplate",
    description: "伸缩时创建具体实例的配置模板"
  }, (validate.rules).message.required = true
  ];
  NodeTemplate nodeTemplate = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeTemplate",
    description: "节点组实例设置"
  }, (validate.rules).message.required = true
  ];
  map<string, string> labels = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "labels",
    description: "新实例初始化label信息"
  }];
  map<string, string> taints = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "taints",
    description: "新实例初始化的污点信息"
  }];
  map<string, string> tags = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "tags",
    description: "新实例初始化的资源标签信息"
  }];
  string nodeOS = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeOS",
    description: "新实例选用的系统OS，参照云信息中配置的默认值"
  }];
  string updater = 13[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updater",
    description: "信息更新者"
  }, (validate.rules).string = {min_len : 2, max_len : 20, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  string provider = 14[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "provider",
    description: "NodeGroup具体依赖的云实现方案，用于方案组合与扩展。默认为空，如果要设置，必须是CloudID"
  }];
  string consumerID = 15[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "consumerID",
    description: "consumerID对接resourceManager模块申请资源使用"
  }];
  string desc = 16[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "desc",
    description: "更新节点组描述信息"
  }];
  google.protobuf.UInt32Value bkCloudID = 17[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "bkCloudID",
    description: "云区域 ID"
  }];
  google.protobuf.StringValue cloudAreaName = 18[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "cloudAreaName",
    description: "云区域名称"
  }];
}

message UpdateNodeGroupResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
  NodeGroup data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "data",
    description : "更新后nodegroup信息"
  }];
}

message DeleteNodeGroupRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "DeleteNodeGroupRequest"
      description : "删除NodeGroup相关信息，当NodeGroup还有可管理的Node时，删除失败。"
      required: ["nodeGroupID", "operator"]
    }
  };

  string nodeGroupID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeGroupID",
    description: "节点组ID"
  }, (validate.rules).string = {min_len : 2, max_len : 20, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  bool isForce = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "isForce",
    description : "强制删除，包括清理节点池管理的机器。外部资源删除转入后台删除长任务对列，"
        "默认会返回Task信息方便确认进度。"
  }];
  bool reserveNodesInCluster = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "reserveNodesInCluster",
    description : "保留节点在集群中，仅删除节点池，解除节点与节点池关联。当且仅当强制删除时生效。"
  }];
  bool keepNodesInstance = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "keepNodesInstance",
    description : "节点从集群移除，清理资源，但不销毁机器，保留机器运行。当且仅当强制删除时生效。"
  }];
  string operator = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "operator",
    description : "操作者"
  }, (validate.rules).string = {min_len : 2, max_len : 100}
  ];
}

message DeleteNodeGroupResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
  DeleteNodeGroupResponseData data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "data",
    description : "返回数据"
  }];
}

message DeleteNodeGroupResponseData {
  NodeGroup nodeGroup = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeGroup",
    description : "已删除的NodeGroup信息"
  }];
  Task task = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "task",
    description : "删除NodeGroup的后台任务信息。例如当强制删除所有节点时会产生任务信息。"
  }];
}

message GetNodeGroupRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetNodeGroupRequest"
      description : "查询NodeGroup信息请求"
    }
  };

  string nodeGroupID = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nodeGroupID",
    description : "NodeGroup ID，自建ID或者云设施ID"
  }, (validate.rules).string = {min_len : 2, max_len : 20, pattern : "^[0-9a-zA-Z-]+$"}
  ];
}

message GetNodeGroupResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetNodeGroupResponse"
      description : "查询云模板返回"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  NodeGroup data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "获取的NodeGroup信息"
  }];
}

message ListNodeGroupRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListNodeGroupRequest"
      description : "查询nodegroup，如果填写了目标字段，则组合目标信息查询，如果全为空则为查询全量信息"
    }
  };

  string name = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "name",
    description: "节点组名称"
  }];
  string clusterID = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterID",
    description: "节点组所关联的集群，该ID为BCS集群ID"
  }
    //(validate.rules).string = {min_len : 2, max_len : 100, pattern : "^[0-9a-zA-Z-]+$", prefix: "BCS-"}
  ];
  string region = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "region",
    description: "节点组所关联区域信息"
  }];
  string projectID = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "projectID",
    description: "节点组所关联项目信息"
  }];
}

message ListNodeGroupResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListNodeGroupResponse"
      description : "查询NodeGroup返回"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  repeated NodeGroup data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "获取到的信息"
  }];
}

message AddNodesRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "AddNodesRequest"
      description : "给指定的集群进行扩容，！注意！扩容的机器如果是腾讯云cvm默认会重装系统，不能使用竞价计费类型的机器"
      required : ["clusterID", "nodes"]
    }
  };

  string clusterID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "clusterID",
    description : "扩容的集群ID"
  }, (validate.rules).string = {min_len : 1, max_len : 100, pattern : "^[0-9a-zA-Z-]+$", prefix: "BCS-"}
  ];
  repeated string nodes = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nodes",
    description : "扩容的集群节点IP地址"
  }, (validate.rules).repeated = {min_items: 1, unique: true}
  ];
  string initLoginPassword = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "initLoginPassword",
    description : "重装时的初始密码"
  }];
  string nodeGroupID = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nodeGroupID",
    description : "扩容节点如果需要加入NodeGroup，需要填写关联ID"
  }];
  bool onlyCreateInfo = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "onlyCreateInfo",
    description : "仅写入节点信息，默认是false。仅写入节点信息时，会通过cluster所属cloudprovider查询节点信息，"
        "并设置为RUNNING。"
  }];
  string operator = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "operator",
    description : "操作者"
  }, (validate.rules).string = {min_len : 2, max_len : 20, pattern : "^[0-9a-zA-Z-]+$"}];
}

message AddNodesResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "AddNodesResponse"
      description : "增加集群节点返回，主要是反馈相关自动化过程的任务信息，便于查阅状态"
      required : ["code", "data"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  Task data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "节点添加任务信息"
  }];
}

message DeleteNodesRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "DeleteNodesRequest"
      description : "集群缩容操作，从指定集群中下架指定IP地址的节点"
      required : ["clusterID", "nodes"]
    }
  };

  string clusterID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "clusterID",
    description : "缩容集群ID"
  }, (validate.rules).string = {min_len : 1, max_len : 100, pattern : "^[0-9a-zA-Z-]+$", prefix: "BCS-"}
  ];
  string nodes = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nodes",
    description : "需要缩容的IP列表,字符','隔开"
  }, (validate.rules).string = {min_len : 1}];
  string deleteMode = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "deleteMode",
    description : "删除模式，RETAIN(移除集群，但是保留主机)，TERMINATE(只支持按量计费的机器)，默认是RETAIN"
  }];
  bool isForce = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "isForce",
    description : "不管节点处于任何状态都强制删除，例如可能刚初始化，NotReady等"
  }];
  string operator = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "operator",
    description : "操作者"
  }, (validate.rules).string = {min_len : 2, max_len : 20, pattern : "^[0-9a-zA-Z-]+$"}];
  bool onlyDeleteInfo = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "onlyDeleteInfo",
    description : "默认为false。设置为true时，仅删除cluster-manager所记录的信息，不会触发任何自动化流程."
  }];
}

message DeleteNodesResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "DeleteNodesResponse"
      description : "下架节点返回，主要是返回下架节点的任务，确认节点下架是否成功"
      required : ["code", "data"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  Task data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "节点下架任务信息"
  }];
}

message MoveNodesToGroupRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "MoveNodesToGroupRequest"
      description : "将集群中节点移入节点池的请求"
      required : ["clusterID", "nodes"]
    }
  };

  string clusterID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "clusterID",
    description : "集群ID"
  }, (validate.rules).string = {min_len : 5, max_len : 100, pattern : "^[0-9a-zA-Z-]+$", prefix: "BCS-"}
  ];
  repeated string nodes = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nodes",
    description : "node IP列表，最大不能超过100"
  }, (validate.rules).repeated = {min_items: 1, max_items: 100,unique: true}
  ];
  string nodeGroupID = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nodeGroupID",
    description : "关联的NodeGroupID"
  }, (validate.rules).string = {min_len : 2, max_len : 20, pattern : "^[0-9a-zA-Z-]+$"}
  ];
}

message MoveNodesToGroupResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "MoveNodesToGroupResponse"
      description : "将节点移入节点池的返回结果"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  Task data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data", description : "将节点移入节点池的后台任务"
  }];
}

message RemoveNodesFromGroupRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "RemoveNodesFromGroupRequest"
      description : "从指定节点池移除节点"
      required : ["clusterID", "nodes"]
    }
  };

  string clusterID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "clusterID",
    description : "集群ID"
  }, (validate.rules).string = {min_len : 5, max_len : 100, pattern : "^[0-9a-zA-Z-]+$", prefix: "BCS-"}
  ];
  repeated string nodes = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nodes",
    description : "需要移除的IP列表"
  }, (validate.rules).repeated = {min_items: 1, max_items: 100, unique: true}
  ];
  string nodeGroupID = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nodeGroupID",
    description : "关联的NodeGroupID"
  }, (validate.rules).string = {min_len : 2, max_len : 20, pattern : "^[0-9a-zA-Z-]+$"}
  ];
}

message RemoveNodesFromGroupResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "RemoveNodesFromGroupResponse"
      description : "节点组移除节点返回，确认节点移除是否成功"
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  Task data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data", description : "从节点池移除的后台任务"
  }];
}

message CleanNodesInGroupRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CleanNodesInGroupRequest"
      description : "从节点池中清理回收指定IP节点"
      required : ["clusterID", "nodeGroupID", "nodes", "operator"]
    }
  };

  string clusterID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "clusterID",
    description : "集群ID"
  }, (validate.rules).string = {min_len : 5, max_len : 100, pattern : "^[0-9a-zA-Z-]+$", prefix: "BCS-"}
  ];
  repeated string nodes = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nodes",
    description : "需要清理回收的IP列表"
  }, (validate.rules).repeated = {min_items: 1, max_items: 100, unique: true}
  ];
  string nodeGroupID = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nodeGroupID",
    description : "关联的NodeGroupID"
  }, (validate.rules).string = {min_len : 2, max_len : 20, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  string operator = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "operator",
    description : "操作者"
  }, (validate.rules).string = {min_len : 2, max_len : 20, pattern : "^[0-9a-zA-Z-]+$"}
  ];
}

message CleanNodesInGroupResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CleanNodesInGroupResponse"
      description : "清理节点返回，由于该请求为异步请求，该返回仅能确认清理任务是否正常创建"
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  Task data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "返回的清理任务"
  }];
}

message CleanNodesInGroupV2Request {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CleanNodesInGroupV2Request"
      description : "从节点池中清理回收指定IP节点"
      required : ["clusterID", "nodeGroupID", "nodes", "operator"]
    }
  };

  string clusterID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "clusterID",
    description : "集群ID"
  }, (validate.rules).string = {min_len : 5, max_len : 100, pattern : "^[0-9a-zA-Z-]+$", prefix: "BCS-"}
  ];
  string nodes = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nodes",
    description : "需要清理回收的IP列表，使用','分割"
  }, (validate.rules).string = {min_len: 1}
  ];
  string nodeGroupID = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nodeGroupID",
    description : "关联的NodeGroupID"
  }, (validate.rules).string = {min_len : 2, max_len : 20, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  string operator = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "operator",
    description : "操作者"
  }, (validate.rules).string = {min_len : 2, max_len : 20, pattern : "^[0-9a-zA-Z-]+$"}
  ];
}

message CleanNodesInGroupV2Response {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CleanNodesInGroupV2Response"
      description : "清理节点返回，由于该请求为异步请求，该返回仅能确认清理任务是否正常创建"
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  Task data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "返回的清理任务"
  }];
}

message ListNodesInGroupRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListNodesInGroupRequest"
      description : "查询NodeGroup节点列表"
    }
  };

  string nodeGroupID = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nodeGroupID",
    description : "NodeGroup ID，自建ID或者云设施ID"
  }, (validate.rules).string = {min_len : 2, max_len : 20, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  string output = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "output",
    description : "输出字段，可选值 wide(全部字段), basic(基本字段)，默认基本字段"
  }
  ];
}

message ListNodesInGroupResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListNodesInGroupResponse"
      description : "返回被节点组管理的node列表"
      required : ["code", "data"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  repeated NodeGroupNode data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "nodes信息列表"
  }];
}

message NodeGroupNode {
  string nodeID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeID",
    description: "节点云instanceID"
  }];
  string innerIP = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "innerIP",
    description: "节点内网主IP"
  }];
  string instanceType = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "instanceType",
    description: "机型信息字符串，可能为空"
  }];
  uint32 CPU = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "CPU",
    description: "节点CPU信息"
  }];
  uint32 mem = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "mem",
    description: "节点内存信息"
  }];
  uint32 GPU = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "GPU",
    description: "节点GPU信息，可能为0"
  }];
  string status = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "status",
    description: "节点状态信息（根据弹性伸缩定义的），RUNNING, DELETEING, CREATING, FAILED, INITIALIZATION"
  }];
  string zoneID = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "zone",
    description: "节点可用区，可能为空"
  }];
  string nodeGroupID = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeGroupID",
    description: "节点所属的NodeGroup ID, 可能为空(仅CA节点归属于nodeGroup)"
  }];
  string clusterID = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterID",
    description: "节点所属的ClusterID"
  }];
  string VPC = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "VPC",
    description: "节点所属的VPC ID"
  }];
  string region = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "region",
    description: "节点所属区域，例如广州，深圳，加州等"
  }];
  string passwd = 13[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "passwd",
    description: "实例初始化密码, 需要进行解密"
  }];
  uint32 zone = 14[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "zoneID",
    description: "节点可用区ID，可能为空; 该信息主要使用于CA"
  }];
  string deviceID = 15[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "deviceID",
    description: "CA instance设备ID号"
  }];
  string instanceRole = 16[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "instanceRole",
    description: "节点角色，MASTER, WORKER, ETCD, MASTER_ETCD,ALL, 默认为WORKER"
  }];
  uint32 unSchedulable = 17[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "unSchedulable",
    description: "调度状态，默认值0表示参与调度，1表示不参与调度"
  }];
}

message UpdateGroupDesiredSizeRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateGroupDesiredSizeRequest"
      description : "修改NodeGroup期望的节点数,扩容前保证数据一致性"
      required : ["nodeGroupID", "desiredSize"]
    }
  };

  string nodeGroupID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nodeGroupID",
    description : "NodeGroupID"
  }, (validate.rules).string = {min_len : 5, max_len : 100, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  uint32 desiredSize = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "desiredSize",
    description : "修改nodeGroup"
  }];
  string operator = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "operator",
    description : "操作人员"
  }, (validate.rules).string = {max_len : 100}];
}

message UpdateGroupDesiredSizeResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateGroupDesiredNodeResponse"
      description : "更新NodeGroup期望节点数的请求结果"
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
}

message UpdateGroupDesiredNodeRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateGroupDesiredNodeRequest"
      description : "更新NodeGroup期望的节点数"
      required : ["nodeGroupID", "desiredNode", "operator"]
    }
  };

  string nodeGroupID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nodeGroupID",
    description : "NodeGroupID"
  }, (validate.rules).string = {min_len : 5, max_len : 100, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  uint32 desiredNode = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "desiredNode",
    description : "期望NodeGroup节点数"
  }];
  string operator = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "operator",
    description : "扩容操作人员"
  }, (validate.rules).string = {max_len : 100}];
}

message UpdateGroupDesiredNodeResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateGroupDesiredNodeResponse"
      description : "更新NodeGroup期望节点数的请求结果"
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  Task data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "返回的扩容节点任务"
  }];
}

message EnableNodeGroupAutoScaleRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "EnableNodeGroupAutoScaleRequest"
      description : "开启NodeGroup自动扩缩容"
      required : ["nodeGroupID"]
    }
  };

  string nodeGroupID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nodeGroupID",
    description : "NodeGroupID"
  }, (validate.rules).string = {min_len : 5, max_len : 100, pattern : "^[0-9a-zA-Z-]+$"}
  ];
}

message EnableNodeGroupAutoScaleResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "EnableNodeGroupAutoScaleResponse"
      description : "开启NodeGroup自动扩缩容返回结果"
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
}

message DisableNodeGroupAutoScaleRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "DisableNodeGroupAutoScaleRequest"
      description : "关闭NodeGroup自动扩缩容"
      required : ["nodeGroupID"]
    }
  };

  string nodeGroupID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nodeGroupID",
    description : "NodeGroupID"
  }, (validate.rules).string = {min_len : 5, max_len : 100, pattern : "^[0-9a-zA-Z-]+$"}
  ];
}

message DisableNodeGroupAutoScaleResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "DisableNodeGroupAutoScaleResponse"
      description : "关闭NodeGroup自动扩缩容返回结果"
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
}

// Task api request & response

message CreateTaskRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CreateTaskRequest"
      description : "创建任务请求"
      required : [
        "taskType", "stepSequence", "steps", "clusterID", "projectID", "creator"
      ]
    }
  };

  string taskType = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "taskType",
    description: "任务类型，例如CreateCluster，AddNodesToCluster，DeleteNodesFromCluster等"
  }];
  string status = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "status",
    description: "任务状态"
  }, (validate.rules).string = {in: ["INITIALIZING", "RUNNING", "SUCCESS", "FAILED", "TIMEOUT"]}
  ];
  string message = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "message",
    description: "任务执行信息，报错时为错误提示信息。"
  }];
  string start = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "start",
    description: "任务启动时间"
  }];
  string end = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "end",
    description: "任务结束时间"
  }];
  uint32 executionTime = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "executionTime",
    description: "任务执行时间"
  }];
  string currentStep = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "currentStep",
    description: "任务正在执行的步骤名称"
  }];
  repeated string stepSequence = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "stepSequence",
    description: "任务执行步骤"
  }, (validate.rules).repeated = {min_items: 1}
  ];
  map<string, Step> steps = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "steps",
    description: "任务详细步骤信息，主要用于信息确认，异常时"
  }, (validate.rules).map = {min_pairs: 1, max_pairs: 20}
  ];
  string clusterID = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterID",
    description: "任务所属集群"
  }, (validate.rules).string = {min_len : 2, max_len : 100, pattern : "^[0-9a-zA-Z-]+$", prefix: "BCS-"}
  ];
  string projectID = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "projectID",
    description: "任务所属项目"
  }, (validate.rules).string = {min_len : 2, max_len : 32, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  string creator = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "creator",
    description: "任务创建人"
  }, (validate.rules).string = {min_len: 2, max_len: 20}
  ];
  string lastUpdate = 13[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "lastUpdate",
    description: "任务上次更新时间"
  }];
}

message CreateTaskResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
  Task data = 4;
}

message RetryTaskRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "RetryTaskRequest"
      description : "重试Task请求"
      required: ["taskID", "updater"]
    }
  };

  string taskID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "taskID",
    description: "任务ID"
  }, (validate.rules).string = {min_len : 2, max_len : 1024, pattern : "^[0-9a-zA-Z-]+$"}];
  string updater = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updater",
    description: "任务重试发起人"
  }, (validate.rules).string = {min_len: 2, max_len: 1024}
  ];
}

message RetryTaskResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
  Task data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "data",
    description : "更新后Task信息"
  }];
}

message UpdateTaskRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateTaskRequest"
      description : "更新Task请求"
      required: ["taskID", "updater"]
    }
  };

  string taskID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "taskID",
    description: "任务ID"
  }, (validate.rules).string = {min_len : 2, max_len : 36, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  string status = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "status",
    description: "任务状态"
  }, (validate.rules).string = {in: ["INITIALIZING", "RUNNING", "SUCCESS", "FAILED", "TIMEOUT"]}
  ];
  string message = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "message",
    description: "任务执行信息，报错时为错误提示信息。"
  }];
  string end = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "end",
    description: "任务结束时间"
  }];
  uint32 executionTime = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "executionTime",
    description: "任务执行时间"
  }];
  string currentStep = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "currentStep",
    description: "任务正在执行的步骤名称"
  }];
  map<string, Step> steps = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "steps",
    description: "任务详细步骤信息，主要用于信息确认，异常时"
  }, (validate.rules).map = {min_pairs: 1, max_pairs: 20}
  ];
  string updater = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updater",
    description: "任务更新人"
  }, (validate.rules).string = {min_len: 2, max_len: 20}
  ];
}

message UpdateTaskResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
  Task data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "data",
    description : "更新后Task信息"
  }];
}

message DeleteTaskRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "DeleteTaskRequest"
      description : "删除任务"
      required: ["taskID"]
    }
  };

  string taskID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "taskID",
    description: "任务ID"
  }, (validate.rules).string = {min_len : 2, max_len : 36, pattern : "^[0-9a-zA-Z-]+$"}
  ];
  bool isForce = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "isForce",
    description : "强制删除Task信息，即使未正常执行完成，也会进入终止。"
  }];
}

message DeleteTaskResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
  Task data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "data",
    description : "已删除的Task信息"
  }];
}

message GetTaskRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetTaskRequest"
      description : "查询Task信息请求"
    }
  };

  string taskID = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "taskID",
    description : "Task ID"
  }, (validate.rules).string = {min_len : 2, max_len : 36, pattern : "^[0-9a-zA-Z-]+$"}
  ];
}

message GetTaskResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetTaskResponse"
      description : "查询云模板返回"
      required : ["code", "message", "data"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  Task data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "获取的Task信息"
  }];
}

message ListTaskRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListTaskRequest"
      description : "查询task，如果填写了目标字段，则组合目标信息查询，如果全为空则为查询全量信息"
    }
  };

  string clusterID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterID",
    description: "任务所关联的集群，该ID为BCS集群ID"
  },
    (validate.rules).string = {max_len : 100}
  ];
  string projectID = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "projectID",
    description: "任务所关联项目信息"
  }, (validate.rules).string = {max_len : 32}
  ];
  string creator = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "creator",
    description: "任务创建者"
  }, (validate.rules).string = {max_len : 20}
  ];
  string updater = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updater",
    description: "任务更新者"
  }, (validate.rules).string = {max_len : 20}
  ];
  string taskType = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "taskType",
    description: "任务类型，例如CreateCluster，AddNodesToCluster，DeleteNodesFromCluster等"
  }];
  string status = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "status",
    description: "任务状态(INITIALIZING, RUNNING, SUCCESS, FAILED, TIMEOUT, FORCETERMINATE)"
  }];
  string nodeIP = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeIP",
    description: "某些场景下通过nodeIP查询对应的任务"
  }];
}

message ListTaskResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListTaskResponse"
      description : "查询任务返回"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  repeated Task data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "获取到的任务列表信息"
  }];
  Task latestTask = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "获取到当前最新的任务信息"
  }];
}


// ClusterAutoScalingOption request & response

message CreateAutoScalingOptionRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CreateAutoScalingOptionRequest"
      description : "创建AutoScalingOption请求"
      required : [
        "clusterID", "projectID", "creator"
      ]
    }
  };
  bool isScaleDownEnable = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "isScaleDownEnable",
    description: "scale-down-enabled,是否允许缩容节点"
  }];
  string expander = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "expander",
    description: "expander,扩容算法，（默认）random, least-waste, most-pod, priority"
  }];
  uint32 maxEmptyBulkDelete = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "maxEmptyBulkDelete",
    description: "max-empty-bulk-delete,单次缩容最大节点数"
  }];
  uint32 scaleDownDelay = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownDelay",
    description: "集群扩容后多长时间开始判定缩容，默认10分钟"
  }];
  uint32 scaleDownUnneededTime = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownUnneededTime",
    description: "scale-down-unneeded-time,执行缩容等待时间，节点连续空闲多少分钟后被缩容，默认10分钟"
  }];
  uint32 scaleDownUtilizationThreahold = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownUtilizationThreahold",
    description: "scale-down-utilization-threshold,触发缩容资源阈值，节点资源使用量低于多少百分比判定为空闲，默认为50"
  }];
  bool skipNodesWithLocalStorage = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "skipNodesWithLocalStorage",
    description: "忽略有本地存储的节点，默认为false"
  }];
  bool skipNodesWithSystemPods = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "skipNodesWithSystemPods",
    description: "忽略kube-system NS下非DaemonSet管理的Pod的节点，默认false"
  }];
  bool ignoreDaemonSetsUtilization = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "ignoreDaemonSetsUtilization",
    description: "忽略DaemonSet的资源计算"
  }];
  uint32 okTotalUnreadyCount = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "okTotalUnreadyCount",
    description: "ok-total-unready-count,允许 unready 节点的数量"
  }];
  uint32 maxTotalUnreadyPercentage = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "maxTotalUnreadyPercentage",
    description: "max-total-unready-percentage,unready节点超过集群总节点的百分比，超过此阈值则停止自动扩容"
  }];
  uint32 scaleDownUnreadyTime = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownUnreadyTime",
    description: "scale-down-unready-time,unready节点缩容等待时间，单位秒"
  }];
  uint32 unregisteredNodeRemovalTime = 13[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "unregisteredNodeRemovalTime",
    description: "cluster-autoscaler等待多长时间将删除未在kubernetes中注册的节点，默认30分钟"
  }];
  string clusterID = 14[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterID",
    description: "BCS集群ID，关联的集群ID"
  }, (validate.rules).string = {min_len : 2, max_len : 100, pattern : "^[0-9a-zA-Z-]+$", prefix: "BCS-"}
  ];
  string creator = 15[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "creator",
    description: "创建者"
  }, (validate.rules).string = {min_len: 2, max_len: 20}
  ];
  string provider = 16[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "provider",
    description: "特性实现模式"
  }];
  bool enableAutoscale = 17[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "enableAutoscale",
    description: "是否开启自动扩缩容，开启后会在该集群部署 ClusterAutoScaling 组件，默认为 false"
  }];
  uint32 bufferResourceRatio = 18[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "bufferResourceRatio",
    description: "buffer-resource-ratio,触发扩容资源阈值百分比，集群资源使用率超过该值，则触发扩容，默认 100"
  }];
  uint32 maxGracefulTerminationSec = 19[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "maxGracefulTerminationSec",
    description: "max-graceful-termination-sec,缩容时，等待 Pod 退出最长时间"
  }];
  uint32 scanInterval = 20[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scanInterval",
    description: "scan-interval,自动扩缩容检测时间间隔，单位为秒，默认为 10"
  }];
  uint32 maxNodeProvisionTime = 21[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "maxNodeProvisionTime",
    description: "max-node-provision-time,等待节点提供最长时间，单位秒，默认 900"
  }];
  bool scaleUpFromZero = 22[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleUpFromZero",
    description: "scale-up-from-zero,允许自动扩容（没有 ready 节点时）"
  }];
  uint32 scaleDownDelayAfterAdd = 23[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownDelayAfterAdd",
    description: "scale-down-delay-after-add,扩容后判断缩容时间间隔，单位秒"
  }];
  uint32 scaleDownDelayAfterDelete = 24[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownDelayAfterDelete",
    description: "scale-down-delay-after-delete,连续两次缩容时间间隔，单位秒"
  }];
  uint32 scaleDownDelayAfterFailure = 25[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownDelayAfterFailure",
    description: "scale-down-delay-after-failure,缩容失败后重试时间间隔，单位秒"
  }];
  uint32 scaleDownGpuUtilizationThreshold = 26[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownGpuUtilizationThreshold",
    description: "scale-down-gpu-utilization-threshold,触发缩容资源阈值(GPU)，节点资源使用量低于多少百分比判定为空闲，默认为50"
  }];
}

message CreateAutoScalingOptionResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
  ClusterAutoScalingOption data = 4;
}

message UpdateAutoScalingOptionRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateAutoScalingOptionRequest"
      description : "更新AutoScalingOption请求"
      required: ["clusterID", "projectID", "updater"]
    }
  };
  bool isScaleDownEnable = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "isScaleDownEnable",
    description: "scale-down-enabled,是否允许缩容节点"
  }];
  string expander = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "expander",
    description: "expander,扩容算法，（默认）random, least-waste, most-pod, priority"
  }, (validate.rules).string = {in: ["random", "least-waste", "most-pod", "priority"]}];
  uint32 maxEmptyBulkDelete = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "maxEmptyBulkDelete",
    description: "max-empty-bulk-delete,单次缩容最大节点数"
  }, (validate.rules).uint32 = {gte: 1, lte: 320000}];
  uint32 scaleDownDelay = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownDelay",
    description: "集群扩容后多长时间开始判定缩容，默认10分钟"
  }, (validate.rules).uint32 = {gte: 60, lte: 86400}];
  uint32 scaleDownUnneededTime = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownUnneededTime",
    description: "scale-down-unneeded-time,执行缩容等待时间，节点连续空闲多少分钟后被缩容，默认10分钟"
  }, (validate.rules).uint32 = {gte: 60, lte: 86400}];
  uint32 scaleDownUtilizationThreahold = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownUtilizationThreahold",
    description: "scale-down-utilization-threshold,触发缩容资源阈值，节点资源使用量低于多少百分比判定为空闲，默认为50"
  }, (validate.rules).uint32 = {gte: 1, lte: 100}];
  bool skipNodesWithLocalStorage = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "skipNodesWithLocalStorage",
    description: "忽略有本地存储的节点，默认为false"
  }];
  bool skipNodesWithSystemPods = 8[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "skipNodesWithSystemPods",
    description: "忽略kube-system NS下非DaemonSet管理的Pod的节点，默认false"
  }];
  bool ignoreDaemonSetsUtilization = 9[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "ignoreDaemonSetsUtilization",
    description: "忽略DaemonSet的资源计算"
  }];
  uint32 okTotalUnreadyCount = 10[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "okTotalUnreadyCount",
    description: "ok-total-unready-count,允许 unready 节点的数量"
  }, (validate.rules).uint32 = {gte: 0, lte: 320000}];
  uint32 maxTotalUnreadyPercentage = 11[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "maxTotalUnreadyPercentage",
    description: "max-total-unready-percentage,unready节点超过集群总节点的百分比，超过此阈值则停止自动扩容"
  }, (validate.rules).uint32 = {gte: 0, lte: 100}];
  uint32 scaleDownUnreadyTime = 12[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownUnreadyTime",
    description: "scale-down-unready-time,unready节点缩容等待时间，单位秒"
  }, (validate.rules).uint32 = {gte: 60, lte: 86400}];
  uint32 unregisteredNodeRemovalTime = 13[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "unregisteredNodeRemovalTime",
    description: "cluster-autoscaler等待多长时间将删除未在kubernetes中注册的节点，默认30分钟"
  }];
  string projectID = 14[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "projectID",
    description: "项目ID，关联的项目信息"
  }, (validate.rules).string = {max_len : 32}];
  string clusterID = 15[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterID",
    description: "BCS集群ID，关联的集群ID"
  }, (validate.rules).string = {max_len : 100}];
  string updater = 16[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updater",
    description: "更新人"
  }, (validate.rules).string = {min_len: 2, max_len: 20}];
  string provider = 17[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "provider",
    description: "特性实现模式"
  }];
  uint32 scaleDownGpuUtilizationThreshold = 18[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownGpuUtilizationThreshold",
    description: "scale-down-gpu-utilization-threshold,触发缩容资源阈值(GPU)，节点资源使用量低于多少百分比判定为空闲，默认为50"
  }, (validate.rules).uint32 = {gte: 1, lte: 100}];
  uint32 bufferResourceRatio = 19[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "bufferResourceRatio",
    description: "buffer-resource-ratio,触发扩容资源阈值百分比，集群资源使用率超过该值，则触发扩容，默认 100"
  }, (validate.rules).uint32 = {gte: 1, lte: 100}];
  uint32 maxGracefulTerminationSec = 20[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "maxGracefulTerminationSec",
    description: "max-graceful-termination-sec,缩容时，等待 Pod 退出最长时间"
  }, (validate.rules).uint32 = {gte: 60, lte: 86400}];
  uint32 scanInterval = 21[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scanInterval",
    description: "scan-interval,自动扩缩容检测时间间隔，单位为秒，默认为 10"
  }, (validate.rules).uint32 = {gte: 5, lte: 86400}];
  uint32 maxNodeProvisionTime = 22[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "maxNodeProvisionTime",
    description: "max-node-provision-time,等待节点提供最长时间，单位秒，默认 900"
  }, (validate.rules).uint32 = {gte: 60, lte: 86400}];
  bool scaleUpFromZero = 23[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleUpFromZero",
    description: "scale-up-from-zero,允许自动扩容（没有 ready 节点时）"
  }];
  uint32 scaleDownDelayAfterAdd = 24[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownDelayAfterAdd",
    description: "scale-down-delay-after-add,扩容后判断缩容时间间隔，单位秒"
  }, (validate.rules).uint32 = {gte: 60, lte: 86400}];
  uint32 scaleDownDelayAfterDelete = 25[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownDelayAfterDelete",
    description: "scale-down-delay-after-delete,连续两次缩容时间间隔，单位秒"
  }, (validate.rules).uint32 = {gte: 0, lte: 86400}];
  uint32 scaleDownDelayAfterFailure = 26[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "scaleDownDelayAfterFailure",
    description: "scale-down-delay-after-failure,缩容失败后重试时间间隔，单位秒"
  }, (validate.rules).uint32 = {gte: 60, lte: 86400}];
}

message UpdateAutoScalingOptionResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
  ClusterAutoScalingOption data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "data",
    description : "更新后AutoScalingOption信息"
  }];
}

message DeleteAutoScalingOptionRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "DeleteAutoScalingOptionRequest"
      description : "删除AutoScalingOption"
      required: ["clusterID"]
    }
  };

  string clusterID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterID",
    description: "BCS集群ID"
  }, (validate.rules).string = {min_len : 2, max_len : 100, pattern : "^[0-9a-zA-Z-]+$", prefix: "BCS-"}
  ];
  bool isForce = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "isForce",
    description : "强制删除AutoScalingOption信息，即使未正常执行完成，也会进入终止。"
        "对于自定义cluster-autoscaler安装的场景下，是需要清理已部署的CA模块。"
  }];
}

message DeleteAutoScalingOptionResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
  ClusterAutoScalingOption data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "data",
    description : "已删除的AutoScalingOption信息"
  }];
}

message GetAutoScalingOptionRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetAutoScalingOptionRequest"
      description : "查询AutoScalingOption信息请求"
    }
  };

  string clusterID = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "clusterID",
    description : "BCS集群ID"
  }, (validate.rules).string = {min_len : 2, max_len : 100, pattern : "^[0-9a-zA-Z-]+$", prefix: "BCS-"}
  ];
  string provider = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "provider",
    description : "CA所属云provider, 可以为空; 为空时, 复用集群所属云provider"
  }];
}

message GetAutoScalingOptionResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetAutoScalingOptionResponse"
      description : "查询AutoScalingOption返回"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  ClusterAutoScalingOption data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "获取的AutoScalingOption信息"
  }];
}

message ListAutoScalingOptionRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListAutoScalingOptionRequest"
      description : "查询AutoScalingOption，如果填写了目标字段，则组合目标信息查询，如果全为空则为查询全量信息"
    }
  };

  string clusterID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterID",
    description: "AutoScalingOption所关联的集群，该ID为BCS集群ID"
  },
    (validate.rules).string = {max_len : 100}
  ];
  string projectID = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "projectID",
    description: "AutoScalingOption所关联项目信息"
  }, (validate.rules).string = {max_len : 32}
  ];
  string creator = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "creator",
    description: "AutoScalingOption创建者"
  }, (validate.rules).string = {max_len : 20}
  ];
  string updater = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updater",
    description: "AutoScalingOption更新者"
  }, (validate.rules).string = {max_len : 20}
  ];
}

message ListAutoScalingOptionResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListAutoScalingOptionResponse"
      description : "查询AutoScalingOption返回"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  repeated ClusterAutoScalingOption data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "获取到的信息"
  }];
}

message UpdateAutoScalingStatusRequest {
  bool enable = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "enable",
    description: "是否开启集群扩缩容"
  }];
  string clusterID = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "clusterID",
    description: "BCS集群ID，关联的集群ID"
  }, (validate.rules).string = {max_len : 100}
  ];
  string updater = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "updater",
    description: "更新人"
  }, (validate.rules).string = {min_len: 2, max_len: 20}
  ];
  string provider = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "provider",
    description: "所属云provider"
  }];
}

message UpdateAutoScalingStatusResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
}

message RegionInfo {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "RegionInfo"
      description : "地域信息"
    }
  };

  string region = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "region",
    description : "地域信息"
  }];
  string regionName = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "regionName",
    description : "地域信息名称"
  }];
  string regionState = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "regionState",
    description : "地域状态"
  }];
}

message GetCloudRegionsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetCloudRegionsRequest"
      description : "获取cloud 地域列表请求"
    }
  };

  string cloudID = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "cloudID",
    description : "云信息"
  }, (validate.rules).string = {min_len : 2}];
  string accountID = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "accountID",
    description : "云凭证ID"
  }, (validate.rules).string = {min_len : 2}];
}

message GetCloudRegionsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetCloudRegionsResponse"
      description : "获取cloud 地域列表"
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  repeated RegionInfo data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "获取到的信息"
  }];
}

message ZoneInfo {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ZoneInfo"
      description : "可用区信息"
    }
  };

  string zoneID = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "zoneID",
    description : "可用区ID"
  }];
  string zone = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "regionName",
    description : "可用区名称"
  }];
  string zoneName = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "regionState",
    description : "地域状态"
  }];
  string zoneState = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "regionState",
    description : "地域状态"
  }];
}

message CloudClusterInfo {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CloudClusterInfo"
      description : "云集群信息"
    }
  };

  string clusterID = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "clusterID",
    description : "云集群ID"
  }];
  string clusterName = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "clusterName",
    description : "集群名称"
  }];
  string clusterDescription = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "clusterDescription",
    description : "集群描述信息"
  }];
  string clusterVersion = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "clusterVersion",
    description : "集群版本"
  }];
  string clusterOS = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "clusterOS",
    description : "集群操作系统"
  }];
  string clusterType = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "clusterType",
    description : "集群类型"
  }];
  string clusterStatus = 7 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "clusterStatus",
    description : "集群状态(Running 运行中 Creating 创建中 Idling 闲置中 Abnormal 异常)"
  }];
}

message ListCloudRegionClusterRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListCloudRegionClusterRequest"
      description : "获取cloud地域集群列表请求"
    }
  };

  string cloudID = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "cloudID",
    description : "云信息"
  }, (validate.rules).string = {min_len : 2}];
  string region = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "region",
    description : "地域信息"
  }, (validate.rules).string = {min_len : 2}];
  string accountID = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "accountID",
    description : "云凭证ID"
  }, (validate.rules).string = {min_len : 2}];
}

message ListCloudRegionClusterResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListCloudRegionClusterResponse"
      description : "获取cloud地域集群列表"
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  repeated CloudClusterInfo data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "获取到的集群列表信息"
  }];
}

message GetCloudRegionZonesRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetCloudRegionZonesRequest"
      description : "获取cloud 地域可用区列表请求"
    }
  };

  string cloudID = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "cloudID",
    description : "云信息"
  }, (validate.rules).string = {min_len : 2}];
  string region = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "region",
    description : "地域信息"
  }];
  string accountID = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "accountID",
    description : "云凭证ID"
  }, (validate.rules).string = {min_len : 2}];
}

message GetCloudRegionZonesResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetCloudRegionZonesResponse"
      description : "获取cloud 地域可用区列表"
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  repeated ZoneInfo data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "获取到的信息"
  }];
}

message OperationLog {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "OperationLog"
      description : "操作日志审计"
    }
  };

  string resourceType = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "resourceType",
    description : "资源类型"
  }];
  string resourceID = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "resourceID",
    description : "资源ID"
  }];
  string taskID = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "taskID",
    description : "任务ID记录"
  }];
  string message = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "审计日志信息"
  }];
  string opUser = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "opUser",
    description : "操作人"
  }];
  string createTime = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "createTime",
    description : "创建时间"
  }];
}

message ListCloudInstanceTypeRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListInstanceTypeRequest"
      description : "查询机型列表，如果填写了目标字段，则组合目标信息查询，如果全为空则为查询全量信息"
    }
  };

  string cloudID = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "cloudID",
    description : "云信息"
  }, (validate.rules).string = {min_len : 2}];
  string region = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "region",
    description : "云地域信息"
  }];
  string accountID = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "accountID",
    description : "云凭证ID"
  }];
  string zone = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "zone",
    description: "可用区，如 ap-guangzhou-1, us-west1-a"
  },
    (validate.rules).string = {max_len : 32}];
  string nodeFamily = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "nodeFamily",
    description: "机型系列"
  },
    (validate.rules).string = {max_len : 32}];
  uint32 cpu = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "cpu",
    description : "CPU 核数"
  }];
  uint32 memory = 7 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "memory",
    description : "内存大小，单位 GB"
  }];
}

message ListCloudInstanceTypeResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListNodeTypeResponse"
      description : "查询机型列表返回"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  repeated InstanceType data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "获取到的信息"
  }];
}

message InstanceType {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "NodeType"
      description : "机器类型"
    }
  };

  string nodeType = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nodeType",
    description : "机器类型"
  }];
  string typeName = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "typeName",
    description : "机型名称"
  }];
  string nodeFamily = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nodeFamily",
    description : "机型系列"
  }];
  uint32 cpu = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "cpu",
    description : "cpu核数"
  }];
  uint32 memory = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "memory",
    description : "内存容量，单位 GB"
  }];
  uint32 gpu = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "gpu",
    description : "gpu核数"
  }];
  string status = 7 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "status",
    description : "机型状态，SELL：表示实例可购买，SOLD_OUT：表示实例已售罄"
  }];
  float unitPrice = 8 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "unitPrice",
    description : "实例价格，单位：元"
  }];
  repeated string zones = 9 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "zones",
    description : "支持的可用区"
  }];
}

message ListCloudOsImageRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListCloudOsImageRequest"
      description : "查询操作系统列表"
    }
  };

  string cloudID = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "cloudID",
    description : "云信息"
  }, (validate.rules).string = {min_len : 2}];
  string region = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "region",
    description : "云地域信息"
  }];
  string accountID = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "accountID",
    description : "云凭证ID"
  }, (validate.rules).string = {min_len : 2}];
  string provider = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "provider",
    description : "镜像提供方，可选值: PUBLIC_IMAGE(公共镜像),PRIVATE_IMAGE(私有镜像),SHARED_IMAGE(共享镜像),MARKET_IMAGE(市场镜像)"
  }];
}

message ListCloudOsImageResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListCloudOsImageResponse"
      description : "查询操作系统镜像列表返回"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  repeated OsImage data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "获取到的信息"
  }];
}

message OsImage {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "OsImage"
      description : "操作系统镜像"
    }
  };

  string imageID = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "imageID",
    description : "镜像 ID"
  }];
  string alias = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "alias",
    description : "镜像别名"
  }];
  string arch = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "arch",
    description : "镜像CPU架构"
  }];
  string osCustomizeType = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "osCustomizeType",
    description : "定制系统类型"
  }];
  string osName = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "osName",
    description : "操作系统名称"
  }];
  string seriesName = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "seriesName",
    description : "操作系统系列名称"
  }];
  string status = 7 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "status",
    description : "镜像状态: NORMAL(正常)"
  }];
  string provider = 8 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "provider",
    description : "镜像提供方，可选值: PUBLIC_IMAGE(公共镜像),PRIVATE_IMAGE(私有镜像),SHARED_IMAGE(共享镜像),MARKET_IMAGE(市场镜像)"
  }];
}

message ListCloudSubnetsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListSubnetsRequest"
      description : "查询云子网列表,适配不同云"
    }
  };

  string cloudID = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "cloudID",
    description : "云信息"
  }, (validate.rules).string = {min_len : 2}];
  string region = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "region",
    description : "云地域信息"
  }];
  string accountID = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "accountID",
    description : "云凭证ID"
  }, (validate.rules).string = {min_len : 2}];
  string vpcID = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "vpcID",
    description: "过滤查询指定vpc的子网列表"
  }];
  string zone = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "zone",
    description: "过滤查询指定vpc的可用区子网列表"
  }];
  string subnetID = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "subnetID",
    description: "查询指定subnet的子网"
  }];
}

message ListCloudSubnetsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListSubnetsResponse"
      description : "查询子网列表返回"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  repeated Subnet data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "获取到的子网列表信息"
  }];
}

message Subnet {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "Subnet"
      description : "子网信息"
    }
  };

  string vpcID = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "vpcID",
    description : "vpcID"
  }];
  string subnetID = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "subnetID",
    description : "子网ID"
  }];
  string subnetName = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "subnetName",
    description : "子网名称"
  }];
  string cidrRange = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "cidrRange",
    description : "子网 IPv4 CIDR"
  }];
  string ipv6CidrRange = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "ipv6CidrRange",
    description : "子网 IPv6 CIDR"
  }];
  string zone = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "zone",
    description : "子网所在可用区"
  }];
  uint64 availableIPAddressCount = 7 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "availableIPAddressCount",
    description : "剩余 IP 数"
  }];
}

message ListCloudSecurityGroupsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListSecurityGroupsRequest"
      description : "查询安全组列表"
    }
  };

  string cloudID = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "cloudID",
    description : "云信息"
  }, (validate.rules).string = {min_len : 2}];
  string region = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "region",
    description : "云地域信息"
  }];
  string accountID = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "accountID",
    description : "云凭证ID"
  }];
}

message ListCloudSecurityGroupsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListSecurityGroupsResponse"
      description : "查询安全组列表返回"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  repeated SecurityGroup data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "获取到的信息"
  }];
}

message SecurityGroup {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "SecurityGroup"
      description : "安全组信息"
    }
  };

  string securityGroupID = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "securityGroupID",
    description : "安全组ID"
  }];
  string securityGroupName = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "securityGroupName",
    description : "安全组名称"
  }];
  string description = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "description",
    description : "安全组描述"
  }];
}

message ListOperationLogsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListOperationLogsRequest"
      description : "获取操作日志请求参数"
    }
  };

  string resourceType = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "resourceType",
    description : "资源类型,可选值: cluster, autoscalingoption, cloud, cloudvpc, nodegroup, task"
  }, (validate.rules).string = {in: ["cluster", "autoscalingoption", "cloud", "cloudvpc", "nodegroup", "task"]}];
  string resourceID = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "resourceID",
    description: "资源ID"
  }];
  uint64 startTime = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "startTime",
    description: "开始时间，GMT 时间戳，秒"
  }, (validate.rules).uint64.gt = 0];
  uint64 endTime = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "endTime",
    description: "结束时间，GMT 时间戳，秒"
  }, (validate.rules).uint64.gt = 0];
  uint32 limit = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "limit",
    description: "每页数量"
  }, (validate.rules).uint32.gt = 0];
  uint32 page = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "page",
    description: "页码"
  }, (validate.rules).uint32.gt = 0];
  bool simple = 7 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "simple",
    description: "只展示 operationLogs 信息"
  }];
}

message ListOperationLogsResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description : "返回结果"
  }];
  ListOperationLogsResponseData data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "data",
    description : "返回数据"
  }];
}

message ListOperationLogsResponseData {
  uint32 count = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "count",
    description : "操作日志数量"
  }];
  repeated OperationLogDetail results = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "results",
    description : "返回数据"
  }];
}

message OperationLogDetail {
  string resourceType = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "resourceType",
    description : "资源类型"
  }];
  string resourceID = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "resourceID",
    description : "资源 ID"
  }];
  string taskID = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "taskID",
    description : "任务 ID，可能为空"
  }];
  string message = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "日志信息"
  }];
  string opUser = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "opUser",
    description : "操作者"
  }];
  string createTime = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "createTime",
    description : "发生时间"
  }];
  Task task = 7[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "task",
    description : "任务详细信息，可能为空"
  }];
}

message NodeOperationStatus {
  repeated NodeOperationStatusInfo fail = 1;
  repeated NodeOperationStatusInfo success = 2;
}

message NodeOperationStatusInfo {
  string nodeName = 1;
  string message = 2;
}

message DrainNodeRequest {
  repeated string innerIPs = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "innerIPs",
      description : "节点内网IP列表，和节点名称列表二选一，优先节点名称列表"
    }];
  string clusterID = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "pod迁移节点所属的clusterID"
    },
    (validate.rules).string = {min_bytes: 1}
  ];
  repeated string nodes = 3 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "nodes",
      description : "节点名称列表，和节点内网IP列表二选一，优先节点名称列表"
    }];
  bool force = 4;
  int32 gracePeriodSeconds = 5;
  bool ignoreAllDaemonSets = 6;
  uint32 timeout = 7;
  bool deleteLocalData = 8;
  string selector = 9;
  string podSelector = 10;
  bool disableEviction = 11;
  uint32 skipWaitForDeleteTimeoutSeconds = 12;
  bool dryRun = 13;
}
message DrainNodeResponse {
  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code", description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  NodeOperationStatus data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "返回数据"
  }];
}

message NodeLabel {
  string nodeName = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nodeName",
    description : "节点名称"
  }, (validate.rules).string = {min_bytes: 1}];
  map<string, string> labels = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "labels",
    description: "节点标签信息"
  }];
}

message UpdateNodeLabelsRequest {
  repeated NodeLabel nodes = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "nodes",
      description : "节点列表"
    }];
  string clusterID = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "更新节点所属的clusterID"
    },
    (validate.rules).string = {min_bytes: 1}
  ];
}

message UpdateNodeLabelsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateNodeLabelsResponse"
      description : "更新节点label"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  NodeOperationStatus data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "返回数据"
  }];
}

message NodeTaint {
  string nodeName = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "nodeName",
    description : "节点名称"
  }, (validate.rules).string = {min_bytes: 1}];
  repeated Taint taints = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "taints",
    description: "节点污点信息"
  }];
}

message UpdateNodeTaintsRequest {
  repeated NodeTaint nodes = 1 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "nodes",
      description : "节点列表"
    }];
  string clusterID = 2 [
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "clusterID",
      description : "更新节点所属的clusterID"
    },
    (validate.rules).string = {min_bytes: 1}
  ];
}

message UpdateNodeTaintsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateNodeTaintsResponse"
      description : "更新节点taints"
      required : ["code", "message"]
    }
  };

  uint32 code = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "message",
    description : "返回错误信息"
  }];
  bool result = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "result",
    description : "返回结果"
  }];
  NodeOperationStatus data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "data",
    description : "返回数据"
  }];
}

message ListResourceSchemaRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListResourceSchemaRequest"
      description : "查询资源模型列表请求"
    }
  };

  string cloudID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "cloudID",
    description : "云 ID"
  }];
}

message GetResourceSchemaRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetResourceSchemaRequest"
      description : "获取资源模型"
    }
  };
  string cloudID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "cloudID",
    description : "云 ID"
  }];
  string name = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "name",
    description : "资源名称"
  }];
}


message QueryPermByActionIDReqData {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "QueryPermByActionIDReqData"
      description : "权限请求的上下文信息"
    }
  };

  string project_id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "project_id",
    description : "项目ID"
  }];
  string cluster_id = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "cluster_id",
    description : "集群ID"
  }];
  string name = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "name",
    description : "命名空间名称"
  }];
  string template_id = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "template_id",
    description : "模板集ID"
  }];
  string account_id = 5[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "account_id",
    description : "云账号ID"
  }];
  string operator = 6[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "operator",
    description: "操作者"
  }, (validate.rules).string = {min_len : 1}];
}

message QueryPermByActionIDRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "QueryPermByActionIDRequest"
      description : "查询用户权限请求"
      required : [
        "actionID", "perm_ctx"
      ]
    }
  };

  string actionID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "actionID",
    description: "权限actionID"
  }];
  QueryPermByActionIDReqData perm_ctx = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "perm_ctx",
    description: "权限请求数据"
  }];
}

message Perms {
  map<string, google.protobuf.Value> perms = 1;
}

message QueryPermByActionIDResponse {
  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "code",
    description : "返回错误码"
  }];
  Perms data = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "data",
    description : "返回结果"
  }];
}

message CommonResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CommonResp"
      description : "通用返回"
    }
  };

  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "code",
    description: "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "message",
    description: "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description: "返回结果"
  }];
  google.protobuf.Struct data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "data",
    description: "返回数据"
  }];
}

message CommonListResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CommonListResp"
      description : "通用列表返回"
    }
  };

  uint32 code = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "code",
    description: "返回错误码"
  }];
  string message = 2[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "message",
    description: "返回错误信息"
  }];
  bool result = 3[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "result",
    description: "返回结果"
  }];
  google.protobuf.ListValue data = 4[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title: "data",
    description: "返回数据"
  }];
}

message ListBKCloudRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListBKCloudRequest"
      description : "获取云区域列表请求"
    }
  };
}

message ListCCTopologyRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListCCTopologyRequest"
      description : "获取业务主机模块拓扑请求"
    }
  };

  string clusterID = 1[(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    title : "clusterID",
    description : "集群ID"
  }, (validate.rules).string = {min_len : 5, max_len : 100, pattern : "^[0-9a-zA-Z-]+$", prefix: "BCS-"}
  ];
}