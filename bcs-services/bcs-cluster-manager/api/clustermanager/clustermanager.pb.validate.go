// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: clustermanager.proto

package clustermanager

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _clustermanager_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Cluster with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Cluster) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClusterID

	// no validation rules for ClusterName

	// no validation rules for FederationClusterID

	// no validation rules for Provider

	// no validation rules for Region

	// no validation rules for VpcID

	// no validation rules for ProjectID

	// no validation rules for BusinessID

	// no validation rules for Environment

	// no validation rules for EngineType

	// no validation rules for IsExclusive

	// no validation rules for ClusterType

	// no validation rules for Labels

	// no validation rules for Creator

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	for key, val := range m.GetBcsAddons() {
		_ = val

		// no validation rules for BcsAddons[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterValidationError{
					field:  fmt.Sprintf("BcsAddons[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetExtraAddons() {
		_ = val

		// no validation rules for ExtraAddons[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterValidationError{
					field:  fmt.Sprintf("ExtraAddons[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SystemID

	// no validation rules for ManageType

	for key, val := range m.GetMaster() {
		_ = val

		// no validation rules for Master[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterValidationError{
					field:  fmt.Sprintf("Master[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetNetworkSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterValidationError{
				field:  "NetworkSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetClusterBasicSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterValidationError{
				field:  "ClusterBasicSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetClusterAdvanceSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterValidationError{
				field:  "ClusterAdvanceSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetNodeSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterValidationError{
				field:  "NodeSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _Cluster_Status_InLookup[m.GetStatus()]; !ok {
		return ClusterValidationError{
			field:  "Status",
			reason: "value must be in list [CREATING RUNNING DELETING FALURE INITIALIZATION]",
		}
	}

	// no validation rules for Updater

	if _, ok := _Cluster_NetworkType_InLookup[m.GetNetworkType()]; !ok {
		return ClusterValidationError{
			field:  "NetworkType",
			reason: "value must be in list [underlay overlay ]",
		}
	}

	// no validation rules for AutoGenerateMasterNodes

	for idx, item := range m.GetTemplate() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterValidationError{
					field:  fmt.Sprintf("Template[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ExtraInfo

	// no validation rules for ModuleID

	// no validation rules for ExtraClusterID

	// no validation rules for IsCommonCluster

	// no validation rules for Description

	// no validation rules for ClusterCategory

	// no validation rules for IsShared

	// no validation rules for KubeConfig

	// no validation rules for ImportCategory

	// no validation rules for CloudAccountID

	if v, ok := interface{}(m.GetArea()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterValidationError{
				field:  "Area",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterValidationError{
				field:  "Module",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetClusterConnectSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterValidationError{
				field:  "ClusterConnectSetting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ClusterValidationError is the validation error returned by Cluster.Validate
// if the designated constraints aren't met.
type ClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterValidationError) ErrorName() string { return "ClusterValidationError" }

// Error satisfies the builtin error interface
func (e ClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterValidationError{}

var _Cluster_Status_InLookup = map[string]struct{}{
	"CREATING":       {},
	"RUNNING":        {},
	"DELETING":       {},
	"FALURE":         {},
	"INITIALIZATION": {},
}

var _Cluster_NetworkType_InLookup = map[string]struct{}{
	"underlay": {},
	"overlay":  {},
	"":         {},
}

// Validate checks the field values on Node with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Node) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NodeID

	// no validation rules for InnerIP

	// no validation rules for InstanceType

	// no validation rules for CPU

	// no validation rules for Mem

	// no validation rules for GPU

	// no validation rules for Status

	// no validation rules for ZoneID

	// no validation rules for NodeGroupID

	// no validation rules for ClusterID

	// no validation rules for VPC

	// no validation rules for Region

	// no validation rules for Passwd

	// no validation rules for Zone

	// no validation rules for DeviceID

	// no validation rules for NodeTemplateID

	// no validation rules for NodeType

	// no validation rules for NodeName

	// no validation rules for InnerIPv6

	// no validation rules for ZoneName

	// no validation rules for TaskID

	return nil
}

// NodeValidationError is the validation error returned by Node.Validate if the
// designated constraints aren't met.
type NodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeValidationError) ErrorName() string { return "NodeValidationError" }

// Error satisfies the builtin error interface
func (e NodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeValidationError{}

// Validate checks the field values on NetworkSetting with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NetworkSetting) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClusterIPv4CIDR

	// no validation rules for ServiceIPv4CIDR

	// no validation rules for MaxNodePodNum

	// no validation rules for MaxServiceNum

	// no validation rules for EnableVPCCni

	if v, ok := interface{}(m.GetSubnetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NetworkSettingValidationError{
				field:  "SubnetSource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsStaticIpMode

	// no validation rules for ClaimExpiredSeconds

	// no validation rules for CidrStep

	// no validation rules for ClusterIpType

	// no validation rules for ClusterIPv6CIDR

	// no validation rules for ServiceIPv6CIDR

	return nil
}

// NetworkSettingValidationError is the validation error returned by
// NetworkSetting.Validate if the designated constraints aren't met.
type NetworkSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkSettingValidationError) ErrorName() string { return "NetworkSettingValidationError" }

// Error satisfies the builtin error interface
func (e NetworkSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkSettingValidationError{}

// Validate checks the field values on SubnetSource with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SubnetSource) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetNew() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubnetSourceValidationError{
					field:  fmt.Sprintf("New[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetExisted()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubnetSourceValidationError{
				field:  "Existed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SubnetSourceValidationError is the validation error returned by
// SubnetSource.Validate if the designated constraints aren't met.
type SubnetSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetSourceValidationError) ErrorName() string { return "SubnetSourceValidationError" }

// Error satisfies the builtin error interface
func (e SubnetSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnetSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetSourceValidationError{}

// Validate checks the field values on ExistedSubnetIDs with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ExistedSubnetIDs) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ExistedSubnetIDsValidationError is the validation error returned by
// ExistedSubnetIDs.Validate if the designated constraints aren't met.
type ExistedSubnetIDsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistedSubnetIDsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistedSubnetIDsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistedSubnetIDsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistedSubnetIDsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistedSubnetIDsValidationError) ErrorName() string { return "ExistedSubnetIDsValidationError" }

// Error satisfies the builtin error interface
func (e ExistedSubnetIDsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistedSubnetIDs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistedSubnetIDsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistedSubnetIDsValidationError{}

// Validate checks the field values on NewSubnet with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *NewSubnet) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Mask

	// no validation rules for Zone

	// no validation rules for IpCnt

	return nil
}

// NewSubnetValidationError is the validation error returned by
// NewSubnet.Validate if the designated constraints aren't met.
type NewSubnetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewSubnetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewSubnetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewSubnetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewSubnetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewSubnetValidationError) ErrorName() string { return "NewSubnetValidationError" }

// Error satisfies the builtin error interface
func (e NewSubnetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewSubnet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewSubnetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewSubnetValidationError{}

// Validate checks the field values on ClusterBasicSetting with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ClusterBasicSetting) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OS

	// no validation rules for Version

	// no validation rules for ClusterTags

	// no validation rules for VersionName

	// no validation rules for SubnetID

	// no validation rules for ClusterLevel

	// no validation rules for IsAutoUpgradeClusterLevel

	return nil
}

// ClusterBasicSettingValidationError is the validation error returned by
// ClusterBasicSetting.Validate if the designated constraints aren't met.
type ClusterBasicSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterBasicSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterBasicSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterBasicSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterBasicSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterBasicSettingValidationError) ErrorName() string {
	return "ClusterBasicSettingValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterBasicSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterBasicSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterBasicSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterBasicSettingValidationError{}

// Validate checks the field values on ClusterAdvanceSetting with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ClusterAdvanceSetting) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IPVS

	// no validation rules for ContainerRuntime

	// no validation rules for RuntimeVersion

	// no validation rules for ExtraArgs

	// no validation rules for NetworkType

	// no validation rules for DeletionProtection

	// no validation rules for AuditEnabled

	// no validation rules for EnableHa

	return nil
}

// ClusterAdvanceSettingValidationError is the validation error returned by
// ClusterAdvanceSetting.Validate if the designated constraints aren't met.
type ClusterAdvanceSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterAdvanceSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterAdvanceSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterAdvanceSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterAdvanceSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterAdvanceSettingValidationError) ErrorName() string {
	return "ClusterAdvanceSettingValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterAdvanceSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterAdvanceSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterAdvanceSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterAdvanceSettingValidationError{}

// Validate checks the field values on ClusterConnectSetting with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ClusterConnectSetting) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsExtranet

	// no validation rules for SubnetId

	// no validation rules for Domain

	// no validation rules for SecurityGroup

	if v, ok := interface{}(m.GetInternet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterConnectSettingValidationError{
				field:  "Internet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ClusterConnectSettingValidationError is the validation error returned by
// ClusterConnectSetting.Validate if the designated constraints aren't met.
type ClusterConnectSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterConnectSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterConnectSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterConnectSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterConnectSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterConnectSettingValidationError) ErrorName() string {
	return "ClusterConnectSettingValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterConnectSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterConnectSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterConnectSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterConnectSettingValidationError{}

// Validate checks the field values on NodeSetting with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NodeSetting) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DockerGraphPath

	// no validation rules for MountTarget

	// no validation rules for UnSchedulable

	// no validation rules for Labels

	// no validation rules for ExtraArgs

	// no validation rules for InitLoginUsername

	// no validation rules for InitLoginPassword

	if v, ok := interface{}(m.GetKeyPair()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeSettingValidationError{
				field:  "KeyPair",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTaints() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeSettingValidationError{
					field:  fmt.Sprintf("Taints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// NodeSettingValidationError is the validation error returned by
// NodeSetting.Validate if the designated constraints aren't met.
type NodeSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeSettingValidationError) ErrorName() string { return "NodeSettingValidationError" }

// Error satisfies the builtin error interface
func (e NodeSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeSettingValidationError{}

// Validate checks the field values on ClusterCredential with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ClusterCredential) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ServerKey

	// no validation rules for ClusterID

	// no validation rules for ClientModule

	// no validation rules for ServerAddress

	// no validation rules for CaCertData

	// no validation rules for UserToken

	// no validation rules for ClusterDomain

	// no validation rules for ConnectMode

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for ClientCert

	// no validation rules for ClientKey

	return nil
}

// ClusterCredentialValidationError is the validation error returned by
// ClusterCredential.Validate if the designated constraints aren't met.
type ClusterCredentialValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterCredentialValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterCredentialValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterCredentialValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterCredentialValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterCredentialValidationError) ErrorName() string {
	return "ClusterCredentialValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterCredentialValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterCredential.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterCredentialValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterCredentialValidationError{}

// Validate checks the field values on Namespace with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Namespace) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for FederationClusterID

	// no validation rules for ProjectID

	// no validation rules for BusinessID

	// no validation rules for Labels

	// no validation rules for MaxQuota

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	for idx, item := range m.GetQuotaList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NamespaceValidationError{
					field:  fmt.Sprintf("QuotaList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// NamespaceValidationError is the validation error returned by
// Namespace.Validate if the designated constraints aren't met.
type NamespaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceValidationError) ErrorName() string { return "NamespaceValidationError" }

// Error satisfies the builtin error interface
func (e NamespaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceValidationError{}

// Validate checks the field values on ResourceQuota with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ResourceQuota) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Namespace

	// no validation rules for FederationClusterID

	// no validation rules for ClusterID

	// no validation rules for ResourceQuota

	// no validation rules for Region

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for Status

	// no validation rules for Message

	return nil
}

// ResourceQuotaValidationError is the validation error returned by
// ResourceQuota.Validate if the designated constraints aren't met.
type ResourceQuotaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceQuotaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceQuotaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceQuotaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceQuotaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceQuotaValidationError) ErrorName() string { return "ResourceQuotaValidationError" }

// Error satisfies the builtin error interface
func (e ResourceQuotaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceQuota.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceQuotaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceQuotaValidationError{}

// Validate checks the field values on Credential with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Credential) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	// no validation rules for Secret

	// no validation rules for SubscriptionID

	// no validation rules for TenantID

	// no validation rules for ResourceGroupName

	// no validation rules for ClientID

	// no validation rules for ClientSecret

	// no validation rules for ServiceAccountSecret

	// no validation rules for GkeProjectID

	return nil
}

// CredentialValidationError is the validation error returned by
// Credential.Validate if the designated constraints aren't met.
type CredentialValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CredentialValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CredentialValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CredentialValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CredentialValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CredentialValidationError) ErrorName() string { return "CredentialValidationError" }

// Error satisfies the builtin error interface
func (e CredentialValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCredential.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CredentialValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CredentialValidationError{}

// Validate checks the field values on BKOpsPlugin with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BKOpsPlugin) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for System

	// no validation rules for Link

	// no validation rules for Params

	// no validation rules for AllowSkipWhenFailed

	return nil
}

// BKOpsPluginValidationError is the validation error returned by
// BKOpsPlugin.Validate if the designated constraints aren't met.
type BKOpsPluginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BKOpsPluginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BKOpsPluginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BKOpsPluginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BKOpsPluginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BKOpsPluginValidationError) ErrorName() string { return "BKOpsPluginValidationError" }

// Error satisfies the builtin error interface
func (e BKOpsPluginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBKOpsPlugin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BKOpsPluginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BKOpsPluginValidationError{}

// Validate checks the field values on Action with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Action) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetPlugins() {
		_ = val

		// no validation rules for Plugins[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionValidationError{
					field:  fmt.Sprintf("Plugins[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ActionValidationError is the validation error returned by Action.Validate if
// the designated constraints aren't met.
type ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionValidationError) ErrorName() string { return "ActionValidationError" }

// Error satisfies the builtin error interface
func (e ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionValidationError{}

// Validate checks the field values on ClusterMgr with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ClusterMgr) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCreateCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterMgrValidationError{
				field:  "CreateCluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDeleteCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterMgrValidationError{
				field:  "DeleteCluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAddNodesToCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterMgrValidationError{
				field:  "AddNodesToCluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDeleteNodesFromCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterMgrValidationError{
				field:  "DeleteNodesFromCluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetImportCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterMgrValidationError{
				field:  "ImportCluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ClusterMgrValidationError is the validation error returned by
// ClusterMgr.Validate if the designated constraints aren't met.
type ClusterMgrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterMgrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterMgrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterMgrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterMgrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterMgrValidationError) ErrorName() string { return "ClusterMgrValidationError" }

// Error satisfies the builtin error interface
func (e ClusterMgrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterMgr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterMgrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterMgrValidationError{}

// Validate checks the field values on NodeGroupMgr with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NodeGroupMgr) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCreateNodeGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeGroupMgrValidationError{
				field:  "CreateNodeGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDeleteNodeGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeGroupMgrValidationError{
				field:  "DeleteNodeGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMoveNodesToGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeGroupMgrValidationError{
				field:  "MoveNodesToGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRemoveNodesFromGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeGroupMgrValidationError{
				field:  "RemoveNodesFromGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCleanNodesInGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeGroupMgrValidationError{
				field:  "CleanNodesInGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateDesiredNodes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeGroupMgrValidationError{
				field:  "UpdateDesiredNodes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAddExternalNodesToCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeGroupMgrValidationError{
				field:  "AddExternalNodesToCluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDeleteExternalNodesFromCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeGroupMgrValidationError{
				field:  "DeleteExternalNodesFromCluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NodeGroupMgrValidationError is the validation error returned by
// NodeGroupMgr.Validate if the designated constraints aren't met.
type NodeGroupMgrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeGroupMgrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeGroupMgrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeGroupMgrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeGroupMgrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeGroupMgrValidationError) ErrorName() string { return "NodeGroupMgrValidationError" }

// Error satisfies the builtin error interface
func (e NodeGroupMgrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeGroupMgr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeGroupMgrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeGroupMgrValidationError{}

// Validate checks the field values on OSInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OSInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Regions

	return nil
}

// OSInfoValidationError is the validation error returned by OSInfo.Validate if
// the designated constraints aren't met.
type OSInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OSInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OSInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OSInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OSInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OSInfoValidationError) ErrorName() string { return "OSInfoValidationError" }

// Error satisfies the builtin error interface
func (e OSInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOSInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OSInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OSInfoValidationError{}

// Validate checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Account) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SecretID

	// no validation rules for SecretKey

	// no validation rules for SubscriptionID

	// no validation rules for TenantID

	// no validation rules for ResourceGroupName

	// no validation rules for ClientID

	// no validation rules for ClientSecret

	// no validation rules for ServiceAccountSecret

	// no validation rules for GkeProjectID

	return nil
}

// AccountValidationError is the validation error returned by Account.Validate
// if the designated constraints aren't met.
type AccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountValidationError) ErrorName() string { return "AccountValidationError" }

// Error satisfies the builtin error interface
func (e AccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountValidationError{}

// Validate checks the field values on CloudAccount with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CloudAccount) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CloudID

	// no validation rules for ProjectID

	// no validation rules for AccountID

	// no validation rules for AccountName

	// no validation rules for Desc

	if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudAccountValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Enable

	// no validation rules for Creator

	// no validation rules for Updater

	// no validation rules for CreatTime

	// no validation rules for UpdateTime

	return nil
}

// CloudAccountValidationError is the validation error returned by
// CloudAccount.Validate if the designated constraints aren't met.
type CloudAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountValidationError) ErrorName() string { return "CloudAccountValidationError" }

// Error satisfies the builtin error interface
func (e CloudAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountValidationError{}

// Validate checks the field values on CreateCloudAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCloudAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetCloudID()); l < 2 || l > 1024 {
		return CreateCloudAccountRequestValidationError{
			field:  "CloudID",
			reason: "value length must be between 2 and 1024 runes, inclusive",
		}
	}

	if !_CreateCloudAccountRequest_CloudID_Pattern.MatchString(m.GetCloudID()) {
		return CreateCloudAccountRequestValidationError{
			field:  "CloudID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if utf8.RuneCountInString(m.GetAccountName()) < 1 {
		return CreateCloudAccountRequestValidationError{
			field:  "AccountName",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Desc

	if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudAccountRequestValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEnable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudAccountRequestValidationError{
				field:  "Enable",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetCreator()); l < 2 || l > 1024 {
		return CreateCloudAccountRequestValidationError{
			field:  "Creator",
			reason: "value length must be between 2 and 1024 runes, inclusive",
		}
	}

	if !_CreateCloudAccountRequest_Creator_Pattern.MatchString(m.GetCreator()) {
		return CreateCloudAccountRequestValidationError{
			field:  "Creator",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if utf8.RuneCountInString(m.GetProjectID()) < 2 {
		return CreateCloudAccountRequestValidationError{
			field:  "ProjectID",
			reason: "value length must be at least 2 runes",
		}
	}

	return nil
}

// CreateCloudAccountRequestValidationError is the validation error returned by
// CreateCloudAccountRequest.Validate if the designated constraints aren't met.
type CreateCloudAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudAccountRequestValidationError) ErrorName() string {
	return "CreateCloudAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudAccountRequestValidationError{}

var _CreateCloudAccountRequest_CloudID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _CreateCloudAccountRequest_Creator_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on CreateCloudAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCloudAccountResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudAccountResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateCloudAccountResponseValidationError is the validation error returned
// by CreateCloudAccountResponse.Validate if the designated constraints aren't met.
type CreateCloudAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudAccountResponseValidationError) ErrorName() string {
	return "CreateCloudAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudAccountResponseValidationError{}

// Validate checks the field values on UpdateCloudAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCloudAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetCloudID()); l < 2 || l > 1024 {
		return UpdateCloudAccountRequestValidationError{
			field:  "CloudID",
			reason: "value length must be between 2 and 1024 runes, inclusive",
		}
	}

	if !_UpdateCloudAccountRequest_CloudID_Pattern.MatchString(m.GetCloudID()) {
		return UpdateCloudAccountRequestValidationError{
			field:  "CloudID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetAccountID()); l < 2 || l > 1024 {
		return UpdateCloudAccountRequestValidationError{
			field:  "AccountID",
			reason: "value length must be between 2 and 1024 runes, inclusive",
		}
	}

	if !_UpdateCloudAccountRequest_AccountID_Pattern.MatchString(m.GetAccountID()) {
		return UpdateCloudAccountRequestValidationError{
			field:  "AccountID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for AccountName

	// no validation rules for Desc

	if v, ok := interface{}(m.GetEnable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCloudAccountRequestValidationError{
				field:  "Enable",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProjectID

	if l := utf8.RuneCountInString(m.GetUpdater()); l < 2 || l > 1024 {
		return UpdateCloudAccountRequestValidationError{
			field:  "Updater",
			reason: "value length must be between 2 and 1024 runes, inclusive",
		}
	}

	if !_UpdateCloudAccountRequest_Updater_Pattern.MatchString(m.GetUpdater()) {
		return UpdateCloudAccountRequestValidationError{
			field:  "Updater",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z]+$\"",
		}
	}

	if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCloudAccountRequestValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateCloudAccountRequestValidationError is the validation error returned by
// UpdateCloudAccountRequest.Validate if the designated constraints aren't met.
type UpdateCloudAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCloudAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCloudAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCloudAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCloudAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCloudAccountRequestValidationError) ErrorName() string {
	return "UpdateCloudAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCloudAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCloudAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCloudAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCloudAccountRequestValidationError{}

var _UpdateCloudAccountRequest_CloudID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _UpdateCloudAccountRequest_AccountID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _UpdateCloudAccountRequest_Updater_Pattern = regexp.MustCompile("^[0-9a-zA-Z]+$")

// Validate checks the field values on UpdateCloudAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCloudAccountResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// UpdateCloudAccountResponseValidationError is the validation error returned
// by UpdateCloudAccountResponse.Validate if the designated constraints aren't met.
type UpdateCloudAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCloudAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCloudAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCloudAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCloudAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCloudAccountResponseValidationError) ErrorName() string {
	return "UpdateCloudAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCloudAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCloudAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCloudAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCloudAccountResponseValidationError{}

// Validate checks the field values on MigrateCloudAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MigrateCloudAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetCloudID()); l < 2 || l > 1024 {
		return MigrateCloudAccountRequestValidationError{
			field:  "CloudID",
			reason: "value length must be between 2 and 1024 runes, inclusive",
		}
	}

	if !_MigrateCloudAccountRequest_CloudID_Pattern.MatchString(m.GetCloudID()) {
		return MigrateCloudAccountRequestValidationError{
			field:  "CloudID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for AccountIDs

	if v, ok := interface{}(m.GetEncrypt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MigrateCloudAccountRequestValidationError{
				field:  "Encrypt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for All

	return nil
}

// MigrateCloudAccountRequestValidationError is the validation error returned
// by MigrateCloudAccountRequest.Validate if the designated constraints aren't met.
type MigrateCloudAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MigrateCloudAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MigrateCloudAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MigrateCloudAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MigrateCloudAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MigrateCloudAccountRequestValidationError) ErrorName() string {
	return "MigrateCloudAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MigrateCloudAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMigrateCloudAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MigrateCloudAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MigrateCloudAccountRequestValidationError{}

var _MigrateCloudAccountRequest_CloudID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on OriginEncrypt with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OriginEncrypt) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EncryptType

	// no validation rules for Kv

	// no validation rules for Iv

	return nil
}

// OriginEncryptValidationError is the validation error returned by
// OriginEncrypt.Validate if the designated constraints aren't met.
type OriginEncryptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OriginEncryptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OriginEncryptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OriginEncryptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OriginEncryptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OriginEncryptValidationError) ErrorName() string { return "OriginEncryptValidationError" }

// Error satisfies the builtin error interface
func (e OriginEncryptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOriginEncrypt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OriginEncryptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OriginEncryptValidationError{}

// Validate checks the field values on MigrateCloudAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MigrateCloudAccountResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// MigrateCloudAccountResponseValidationError is the validation error returned
// by MigrateCloudAccountResponse.Validate if the designated constraints
// aren't met.
type MigrateCloudAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MigrateCloudAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MigrateCloudAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MigrateCloudAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MigrateCloudAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MigrateCloudAccountResponseValidationError) ErrorName() string {
	return "MigrateCloudAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MigrateCloudAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMigrateCloudAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MigrateCloudAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MigrateCloudAccountResponseValidationError{}

// Validate checks the field values on DeleteCloudAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCloudAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetCloudID()); l < 2 || l > 1024 {
		return DeleteCloudAccountRequestValidationError{
			field:  "CloudID",
			reason: "value length must be between 2 and 1024 runes, inclusive",
		}
	}

	if !_DeleteCloudAccountRequest_CloudID_Pattern.MatchString(m.GetCloudID()) {
		return DeleteCloudAccountRequestValidationError{
			field:  "CloudID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetAccountID()); l < 2 || l > 1024 {
		return DeleteCloudAccountRequestValidationError{
			field:  "AccountID",
			reason: "value length must be between 2 and 1024 runes, inclusive",
		}
	}

	if !_DeleteCloudAccountRequest_AccountID_Pattern.MatchString(m.GetAccountID()) {
		return DeleteCloudAccountRequestValidationError{
			field:  "AccountID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	return nil
}

// DeleteCloudAccountRequestValidationError is the validation error returned by
// DeleteCloudAccountRequest.Validate if the designated constraints aren't met.
type DeleteCloudAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloudAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloudAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloudAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloudAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloudAccountRequestValidationError) ErrorName() string {
	return "DeleteCloudAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloudAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloudAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloudAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloudAccountRequestValidationError{}

var _DeleteCloudAccountRequest_CloudID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _DeleteCloudAccountRequest_AccountID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on DeleteCloudAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCloudAccountResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// DeleteCloudAccountResponseValidationError is the validation error returned
// by DeleteCloudAccountResponse.Validate if the designated constraints aren't met.
type DeleteCloudAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloudAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloudAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloudAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloudAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloudAccountResponseValidationError) ErrorName() string {
	return "DeleteCloudAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloudAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloudAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloudAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloudAccountResponseValidationError{}

// Validate checks the field values on ListCloudAccountPermRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudAccountPermRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectID

	// no validation rules for AccountName

	return nil
}

// ListCloudAccountPermRequestValidationError is the validation error returned
// by ListCloudAccountPermRequest.Validate if the designated constraints
// aren't met.
type ListCloudAccountPermRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudAccountPermRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudAccountPermRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudAccountPermRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudAccountPermRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudAccountPermRequestValidationError) ErrorName() string {
	return "ListCloudAccountPermRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudAccountPermRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudAccountPermRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudAccountPermRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudAccountPermRequestValidationError{}

// Validate checks the field values on ListCloudAccountPermResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudAccountPermResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudAccountPermResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCloudAccountPermResponseValidationError is the validation error returned
// by ListCloudAccountPermResponse.Validate if the designated constraints
// aren't met.
type ListCloudAccountPermResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudAccountPermResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudAccountPermResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudAccountPermResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudAccountPermResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudAccountPermResponseValidationError) ErrorName() string {
	return "ListCloudAccountPermResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudAccountPermResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudAccountPermResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudAccountPermResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudAccountPermResponseValidationError{}

// Validate checks the field values on ListCloudAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCloudID()) > 1024 {
		return ListCloudAccountRequestValidationError{
			field:  "CloudID",
			reason: "value length must be at most 1024 runes",
		}
	}

	// no validation rules for AccountID

	// no validation rules for ProjectID

	// no validation rules for Operator

	return nil
}

// ListCloudAccountRequestValidationError is the validation error returned by
// ListCloudAccountRequest.Validate if the designated constraints aren't met.
type ListCloudAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudAccountRequestValidationError) ErrorName() string {
	return "ListCloudAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudAccountRequestValidationError{}

// Validate checks the field values on VerifyCloudAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyCloudAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetCloudID()); l < 2 || l > 1024 {
		return VerifyCloudAccountRequestValidationError{
			field:  "CloudID",
			reason: "value length must be between 2 and 1024 runes, inclusive",
		}
	}

	if !_VerifyCloudAccountRequest_CloudID_Pattern.MatchString(m.GetCloudID()) {
		return VerifyCloudAccountRequestValidationError{
			field:  "CloudID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for Desc

	if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifyCloudAccountRequestValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VerifyCloudAccountRequestValidationError is the validation error returned by
// VerifyCloudAccountRequest.Validate if the designated constraints aren't met.
type VerifyCloudAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyCloudAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyCloudAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyCloudAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyCloudAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyCloudAccountRequestValidationError) ErrorName() string {
	return "VerifyCloudAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyCloudAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyCloudAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyCloudAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyCloudAccountRequestValidationError{}

var _VerifyCloudAccountRequest_CloudID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on VerifyCloudAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyCloudAccountResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// VerifyCloudAccountResponseValidationError is the validation error returned
// by VerifyCloudAccountResponse.Validate if the designated constraints aren't met.
type VerifyCloudAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyCloudAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyCloudAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyCloudAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyCloudAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyCloudAccountResponseValidationError) ErrorName() string {
	return "VerifyCloudAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyCloudAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyCloudAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyCloudAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyCloudAccountResponseValidationError{}

// Validate checks the field values on CloudAccountInfo with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CloudAccountInfo) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudAccountInfoValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CloudAccountInfoValidationError is the validation error returned by
// CloudAccountInfo.Validate if the designated constraints aren't met.
type CloudAccountInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountInfoValidationError) ErrorName() string { return "CloudAccountInfoValidationError" }

// Error satisfies the builtin error interface
func (e CloudAccountInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountInfoValidationError{}

// Validate checks the field values on ListCloudAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudAccountResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudAccountResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCloudAccountResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListCloudAccountResponseValidationError is the validation error returned by
// ListCloudAccountResponse.Validate if the designated constraints aren't met.
type ListCloudAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudAccountResponseValidationError) ErrorName() string {
	return "ListCloudAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudAccountResponseValidationError{}

// Validate checks the field values on CloudVPC with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CloudVPC) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CloudID

	// no validation rules for Region

	// no validation rules for RegionName

	// no validation rules for NetworkType

	// no validation rules for VpcID

	// no validation rules for VpcName

	// no validation rules for Available

	// no validation rules for Extra

	// no validation rules for Creator

	// no validation rules for Updater

	// no validation rules for CreatTime

	// no validation rules for UpdateTime

	// no validation rules for ReservedIPNum

	// no validation rules for BusinessID

	return nil
}

// CloudVPCValidationError is the validation error returned by
// CloudVPC.Validate if the designated constraints aren't met.
type CloudVPCValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudVPCValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudVPCValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudVPCValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudVPCValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudVPCValidationError) ErrorName() string { return "CloudVPCValidationError" }

// Error satisfies the builtin error interface
func (e CloudVPCValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudVPC.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudVPCValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudVPCValidationError{}

// Validate checks the field values on CreateCloudVPCRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCloudVPCRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetCloudID()); l < 2 || l > 100 {
		return CreateCloudVPCRequestValidationError{
			field:  "CloudID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !_CreateCloudVPCRequest_CloudID_Pattern.MatchString(m.GetCloudID()) {
		return CreateCloudVPCRequestValidationError{
			field:  "CloudID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if _, ok := _CreateCloudVPCRequest_NetworkType_InLookup[m.GetNetworkType()]; !ok {
		return CreateCloudVPCRequestValidationError{
			field:  "NetworkType",
			reason: "value must be in list [overlay underlay]",
		}
	}

	if l := utf8.RuneCountInString(m.GetRegion()); l < 2 || l > 100 {
		return CreateCloudVPCRequestValidationError{
			field:  "Region",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !_CreateCloudVPCRequest_Region_Pattern.MatchString(m.GetRegion()) {
		return CreateCloudVPCRequestValidationError{
			field:  "Region",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for RegionName

	if l := utf8.RuneCountInString(m.GetVpcName()); l < 2 || l > 100 {
		return CreateCloudVPCRequestValidationError{
			field:  "VpcName",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !_CreateCloudVPCRequest_VpcName_Pattern.MatchString(m.GetVpcName()) {
		return CreateCloudVPCRequestValidationError{
			field:  "VpcName",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetVpcID()); l < 2 || l > 100 {
		return CreateCloudVPCRequestValidationError{
			field:  "VpcID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !_CreateCloudVPCRequest_VpcID_Pattern.MatchString(m.GetVpcID()) {
		return CreateCloudVPCRequestValidationError{
			field:  "VpcID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if _, ok := _CreateCloudVPCRequest_Available_InLookup[m.GetAvailable()]; !ok {
		return CreateCloudVPCRequestValidationError{
			field:  "Available",
			reason: "value must be in list [true false]",
		}
	}

	// no validation rules for Extra

	if l := utf8.RuneCountInString(m.GetCreator()); l < 2 || l > 100 {
		return CreateCloudVPCRequestValidationError{
			field:  "Creator",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !_CreateCloudVPCRequest_Creator_Pattern.MatchString(m.GetCreator()) {
		return CreateCloudVPCRequestValidationError{
			field:  "Creator",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for ReservedIPNum

	// no validation rules for BusinessID

	return nil
}

// CreateCloudVPCRequestValidationError is the validation error returned by
// CreateCloudVPCRequest.Validate if the designated constraints aren't met.
type CreateCloudVPCRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudVPCRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudVPCRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudVPCRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudVPCRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudVPCRequestValidationError) ErrorName() string {
	return "CreateCloudVPCRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudVPCRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudVPCRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudVPCRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudVPCRequestValidationError{}

var _CreateCloudVPCRequest_CloudID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _CreateCloudVPCRequest_NetworkType_InLookup = map[string]struct{}{
	"overlay":  {},
	"underlay": {},
}

var _CreateCloudVPCRequest_Region_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _CreateCloudVPCRequest_VpcName_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _CreateCloudVPCRequest_VpcID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _CreateCloudVPCRequest_Available_InLookup = map[string]struct{}{
	"true":  {},
	"false": {},
}

var _CreateCloudVPCRequest_Creator_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on CreateCloudVPCResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCloudVPCResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// CreateCloudVPCResponseValidationError is the validation error returned by
// CreateCloudVPCResponse.Validate if the designated constraints aren't met.
type CreateCloudVPCResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudVPCResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudVPCResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudVPCResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudVPCResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudVPCResponseValidationError) ErrorName() string {
	return "CreateCloudVPCResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudVPCResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudVPCResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudVPCResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudVPCResponseValidationError{}

// Validate checks the field values on UpdateCloudVPCRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCloudVPCRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetCloudID()); l < 2 || l > 100 {
		return UpdateCloudVPCRequestValidationError{
			field:  "CloudID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !_UpdateCloudVPCRequest_CloudID_Pattern.MatchString(m.GetCloudID()) {
		return UpdateCloudVPCRequestValidationError{
			field:  "CloudID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for NetworkType

	// no validation rules for Region

	// no validation rules for RegionName

	// no validation rules for VpcName

	if l := utf8.RuneCountInString(m.GetVpcID()); l < 2 || l > 100 {
		return UpdateCloudVPCRequestValidationError{
			field:  "VpcID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !_UpdateCloudVPCRequest_VpcID_Pattern.MatchString(m.GetVpcID()) {
		return UpdateCloudVPCRequestValidationError{
			field:  "VpcID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if _, ok := _UpdateCloudVPCRequest_Available_InLookup[m.GetAvailable()]; !ok {
		return UpdateCloudVPCRequestValidationError{
			field:  "Available",
			reason: "value must be in list [ true false]",
		}
	}

	if l := utf8.RuneCountInString(m.GetUpdater()); l < 2 || l > 100 {
		return UpdateCloudVPCRequestValidationError{
			field:  "Updater",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !_UpdateCloudVPCRequest_Updater_Pattern.MatchString(m.GetUpdater()) {
		return UpdateCloudVPCRequestValidationError{
			field:  "Updater",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z]+$\"",
		}
	}

	if v, ok := interface{}(m.GetReservedIPNum()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCloudVPCRequestValidationError{
				field:  "ReservedIPNum",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetBusinessID()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCloudVPCRequestValidationError{
				field:  "BusinessID",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateCloudVPCRequestValidationError is the validation error returned by
// UpdateCloudVPCRequest.Validate if the designated constraints aren't met.
type UpdateCloudVPCRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCloudVPCRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCloudVPCRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCloudVPCRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCloudVPCRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCloudVPCRequestValidationError) ErrorName() string {
	return "UpdateCloudVPCRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCloudVPCRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCloudVPCRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCloudVPCRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCloudVPCRequestValidationError{}

var _UpdateCloudVPCRequest_CloudID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _UpdateCloudVPCRequest_VpcID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _UpdateCloudVPCRequest_Available_InLookup = map[string]struct{}{
	"":      {},
	"true":  {},
	"false": {},
}

var _UpdateCloudVPCRequest_Updater_Pattern = regexp.MustCompile("^[0-9a-zA-Z]+$")

// Validate checks the field values on UpdateCloudVPCResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCloudVPCResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCloudVPCResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateCloudVPCResponseValidationError is the validation error returned by
// UpdateCloudVPCResponse.Validate if the designated constraints aren't met.
type UpdateCloudVPCResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCloudVPCResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCloudVPCResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCloudVPCResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCloudVPCResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCloudVPCResponseValidationError) ErrorName() string {
	return "UpdateCloudVPCResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCloudVPCResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCloudVPCResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCloudVPCResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCloudVPCResponseValidationError{}

// Validate checks the field values on DeleteCloudVPCRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCloudVPCRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetCloudID()); l < 2 || l > 100 {
		return DeleteCloudVPCRequestValidationError{
			field:  "CloudID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !_DeleteCloudVPCRequest_CloudID_Pattern.MatchString(m.GetCloudID()) {
		return DeleteCloudVPCRequestValidationError{
			field:  "CloudID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetVpcID()); l < 2 || l > 100 {
		return DeleteCloudVPCRequestValidationError{
			field:  "VpcID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !_DeleteCloudVPCRequest_VpcID_Pattern.MatchString(m.GetVpcID()) {
		return DeleteCloudVPCRequestValidationError{
			field:  "VpcID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	return nil
}

// DeleteCloudVPCRequestValidationError is the validation error returned by
// DeleteCloudVPCRequest.Validate if the designated constraints aren't met.
type DeleteCloudVPCRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloudVPCRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloudVPCRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloudVPCRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloudVPCRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloudVPCRequestValidationError) ErrorName() string {
	return "DeleteCloudVPCRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloudVPCRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloudVPCRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloudVPCRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloudVPCRequestValidationError{}

var _DeleteCloudVPCRequest_CloudID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _DeleteCloudVPCRequest_VpcID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on DeleteCloudVPCResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCloudVPCResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteCloudVPCResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteCloudVPCResponseValidationError is the validation error returned by
// DeleteCloudVPCResponse.Validate if the designated constraints aren't met.
type DeleteCloudVPCResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloudVPCResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloudVPCResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloudVPCResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloudVPCResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloudVPCResponseValidationError) ErrorName() string {
	return "DeleteCloudVPCResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloudVPCResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloudVPCResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloudVPCResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloudVPCResponseValidationError{}

// Validate checks the field values on ListCloudVPCRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudVPCRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCloudID()) > 20 {
		return ListCloudVPCRequestValidationError{
			field:  "CloudID",
			reason: "value length must be at most 20 runes",
		}
	}

	// no validation rules for Region

	// no validation rules for VpcID

	if _, ok := _ListCloudVPCRequest_NetworkType_InLookup[m.GetNetworkType()]; !ok {
		return ListCloudVPCRequestValidationError{
			field:  "NetworkType",
			reason: "value must be in list [overlay underlay]",
		}
	}

	// no validation rules for BusinessID

	return nil
}

// ListCloudVPCRequestValidationError is the validation error returned by
// ListCloudVPCRequest.Validate if the designated constraints aren't met.
type ListCloudVPCRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudVPCRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudVPCRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudVPCRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudVPCRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudVPCRequestValidationError) ErrorName() string {
	return "ListCloudVPCRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudVPCRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudVPCRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudVPCRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudVPCRequestValidationError{}

var _ListCloudVPCRequest_NetworkType_InLookup = map[string]struct{}{
	"overlay":  {},
	"underlay": {},
}

// Validate checks the field values on ListCloudVPCResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudVPCResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudVPCResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCloudVPCResponseValidationError is the validation error returned by
// ListCloudVPCResponse.Validate if the designated constraints aren't met.
type ListCloudVPCResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudVPCResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudVPCResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudVPCResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudVPCResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudVPCResponseValidationError) ErrorName() string {
	return "ListCloudVPCResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudVPCResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudVPCResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudVPCResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudVPCResponseValidationError{}

// Validate checks the field values on CloudVPCResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CloudVPCResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CloudID

	// no validation rules for Region

	// no validation rules for RegionName

	// no validation rules for NetworkType

	// no validation rules for VpcID

	// no validation rules for VpcName

	// no validation rules for Available

	// no validation rules for Extra

	// no validation rules for ReservedIPNum

	// no validation rules for AvailableIPNum

	return nil
}

// CloudVPCRespValidationError is the validation error returned by
// CloudVPCResp.Validate if the designated constraints aren't met.
type CloudVPCRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudVPCRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudVPCRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudVPCRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudVPCRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudVPCRespValidationError) ErrorName() string { return "CloudVPCRespValidationError" }

// Error satisfies the builtin error interface
func (e CloudVPCRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudVPCResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudVPCRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudVPCRespValidationError{}

// Validate checks the field values on ListCloudRegionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudRegionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCloudID()) > 20 {
		return ListCloudRegionsRequestValidationError{
			field:  "CloudID",
			reason: "value length must be at most 20 runes",
		}
	}

	return nil
}

// ListCloudRegionsRequestValidationError is the validation error returned by
// ListCloudRegionsRequest.Validate if the designated constraints aren't met.
type ListCloudRegionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudRegionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudRegionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudRegionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudRegionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudRegionsRequestValidationError) ErrorName() string {
	return "ListCloudRegionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudRegionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudRegionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudRegionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudRegionsRequestValidationError{}

// Validate checks the field values on ListCloudRegionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudRegionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudRegionsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCloudRegionsResponseValidationError is the validation error returned by
// ListCloudRegionsResponse.Validate if the designated constraints aren't met.
type ListCloudRegionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudRegionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudRegionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudRegionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudRegionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudRegionsResponseValidationError) ErrorName() string {
	return "ListCloudRegionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudRegionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudRegionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudRegionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudRegionsResponseValidationError{}

// Validate checks the field values on CloudRegion with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CloudRegion) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CloudID

	// no validation rules for RegionName

	// no validation rules for Region

	return nil
}

// CloudRegionValidationError is the validation error returned by
// CloudRegion.Validate if the designated constraints aren't met.
type CloudRegionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudRegionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudRegionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudRegionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudRegionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudRegionValidationError) ErrorName() string { return "CloudRegionValidationError" }

// Error satisfies the builtin error interface
func (e CloudRegionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudRegion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudRegionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudRegionValidationError{}

// Validate checks the field values on GetVPCCidrRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetVPCCidrRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for VpcID

	return nil
}

// GetVPCCidrRequestValidationError is the validation error returned by
// GetVPCCidrRequest.Validate if the designated constraints aren't met.
type GetVPCCidrRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVPCCidrRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVPCCidrRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVPCCidrRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVPCCidrRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVPCCidrRequestValidationError) ErrorName() string {
	return "GetVPCCidrRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVPCCidrRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVPCCidrRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVPCCidrRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVPCCidrRequestValidationError{}

// Validate checks the field values on GetVPCCidrResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetVPCCidrResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetVPCCidrResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetVPCCidrResponseValidationError is the validation error returned by
// GetVPCCidrResponse.Validate if the designated constraints aren't met.
type GetVPCCidrResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVPCCidrResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVPCCidrResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVPCCidrResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVPCCidrResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVPCCidrResponseValidationError) ErrorName() string {
	return "GetVPCCidrResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVPCCidrResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVPCCidrResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVPCCidrResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVPCCidrResponseValidationError{}

// Validate checks the field values on VPCCidr with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *VPCCidr) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Vpc

	// no validation rules for Cidr

	// no validation rules for IPNumber

	// no validation rules for Status

	return nil
}

// VPCCidrValidationError is the validation error returned by VPCCidr.Validate
// if the designated constraints aren't met.
type VPCCidrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VPCCidrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VPCCidrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VPCCidrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VPCCidrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VPCCidrValidationError) ErrorName() string { return "VPCCidrValidationError" }

// Error satisfies the builtin error interface
func (e VPCCidrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVPCCidr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VPCCidrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VPCCidrValidationError{}

// Validate checks the field values on Cloud with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Cloud) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CloudID

	// no validation rules for Name

	// no validation rules for Editable

	for key, val := range m.GetOpsPlugins() {
		_ = val

		// no validation rules for OpsPlugins[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudValidationError{
					field:  fmt.Sprintf("OpsPlugins[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetExtraPlugins() {
		_ = val

		// no validation rules for ExtraPlugins[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudValidationError{
					field:  fmt.Sprintf("ExtraPlugins[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetCloudCredential()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudValidationError{
				field:  "CloudCredential",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOsManagement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudValidationError{
				field:  "OsManagement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetClusterManagement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudValidationError{
				field:  "ClusterManagement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetNodeGroupManagement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudValidationError{
				field:  "NodeGroupManagement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Creator

	// no validation rules for Updater

	// no validation rules for CreatTime

	// no validation rules for UpdateTime

	// no validation rules for CloudProvider

	// no validation rules for Config

	// no validation rules for Description

	// no validation rules for EngineType

	// no validation rules for Enable

	if v, ok := interface{}(m.GetNetworkInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudValidationError{
				field:  "NetworkInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetConfInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudValidationError{
				field:  "ConfInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PlatformInfo

	return nil
}

// CloudValidationError is the validation error returned by Cloud.Validate if
// the designated constraints aren't met.
type CloudValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudValidationError) ErrorName() string { return "CloudValidationError" }

// Error satisfies the builtin error interface
func (e CloudValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloud.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudValidationError{}

// Validate checks the field values on CloudConfigInfo with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CloudConfigInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CloudInternalEnable

	// no validation rules for CloudDomain

	// no validation rules for MachineDomain

	// no validation rules for DisableCreateCluster

	// no validation rules for DisableImportCluster

	// no validation rules for DisableNodeGroup

	// no validation rules for VpcDomain

	return nil
}

// CloudConfigInfoValidationError is the validation error returned by
// CloudConfigInfo.Validate if the designated constraints aren't met.
type CloudConfigInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudConfigInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudConfigInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudConfigInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudConfigInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudConfigInfoValidationError) ErrorName() string { return "CloudConfigInfoValidationError" }

// Error satisfies the builtin error interface
func (e CloudConfigInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudConfigInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudConfigInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudConfigInfoValidationError{}

// Validate checks the field values on CloudNetworkInfo with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CloudNetworkInfo) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CloudNetworkInfoValidationError is the validation error returned by
// CloudNetworkInfo.Validate if the designated constraints aren't met.
type CloudNetworkInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudNetworkInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudNetworkInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudNetworkInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudNetworkInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudNetworkInfoValidationError) ErrorName() string { return "CloudNetworkInfoValidationError" }

// Error satisfies the builtin error interface
func (e CloudNetworkInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudNetworkInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudNetworkInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudNetworkInfoValidationError{}

// Validate checks the field values on NodeGroup with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *NodeGroup) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NodeGroupID

	// no validation rules for Name

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 2 || l > 100 {
		return NodeGroupValidationError{
			field:  "ClusterID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		return NodeGroupValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
	}

	if !_NodeGroup_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return NodeGroupValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for Region

	// no validation rules for EnableAutoscale

	if v, ok := interface{}(m.GetAutoScaling()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeGroupValidationError{
				field:  "AutoScaling",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLaunchTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeGroupValidationError{
				field:  "LaunchTemplate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	// no validation rules for Taints

	// no validation rules for NodeOS

	// no validation rules for Creator

	// no validation rules for Updater

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for ProjectID

	// no validation rules for Provider

	if _, ok := _NodeGroup_Status_InLookup[m.GetStatus()]; !ok {
		return NodeGroupValidationError{
			field:  "Status",
			reason: "value must be in list [CREATING RUNNING DELETING FALURE INITIALIZATION DELETED]",
		}
	}

	// no validation rules for ConsumerID

	if m.GetNodeTemplate() == nil {
		return NodeGroupValidationError{
			field:  "NodeTemplate",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetNodeTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeGroupValidationError{
				field:  "NodeTemplate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CloudNodeGroupID

	// no validation rules for Tags

	// no validation rules for NodeGroupType

	if v, ok := interface{}(m.GetArea()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeGroupValidationError{
				field:  "Area",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NodeGroupValidationError is the validation error returned by
// NodeGroup.Validate if the designated constraints aren't met.
type NodeGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeGroupValidationError) ErrorName() string { return "NodeGroupValidationError" }

// Error satisfies the builtin error interface
func (e NodeGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeGroupValidationError{}

var _NodeGroup_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _NodeGroup_Status_InLookup = map[string]struct{}{
	"CREATING":       {},
	"RUNNING":        {},
	"DELETING":       {},
	"FALURE":         {},
	"INITIALIZATION": {},
	"DELETED":        {},
}

// Validate checks the field values on CloudArea with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CloudArea) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BkCloudID

	// no validation rules for BkCloudName

	return nil
}

// CloudAreaValidationError is the validation error returned by
// CloudArea.Validate if the designated constraints aren't met.
type CloudAreaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAreaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAreaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAreaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAreaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAreaValidationError) ErrorName() string { return "CloudAreaValidationError" }

// Error satisfies the builtin error interface
func (e CloudAreaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudArea.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAreaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAreaValidationError{}

// Validate checks the field values on AutoScalingGroup with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AutoScalingGroup) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AutoScalingID

	// no validation rules for AutoScalingName

	if val := m.GetMinSize(); val < 0 || val > 1000 {
		return AutoScalingGroupValidationError{
			field:  "MinSize",
			reason: "value must be inside range [0, 1000]",
		}
	}

	if val := m.GetMaxSize(); val < 0 || val > 1000 {
		return AutoScalingGroupValidationError{
			field:  "MaxSize",
			reason: "value must be inside range [0, 1000]",
		}
	}

	// no validation rules for DesiredSize

	// no validation rules for VpcID

	// no validation rules for DefaultCooldown

	// no validation rules for RetryPolicy

	// no validation rules for MultiZoneSubnetPolicy

	// no validation rules for ReplaceUnhealthy

	// no validation rules for ScalingMode

	for idx, item := range m.GetTimeRanges() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AutoScalingGroupValidationError{
					field:  fmt.Sprintf("TimeRanges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AutoUpgrade

	return nil
}

// AutoScalingGroupValidationError is the validation error returned by
// AutoScalingGroup.Validate if the designated constraints aren't met.
type AutoScalingGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoScalingGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoScalingGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoScalingGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoScalingGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoScalingGroupValidationError) ErrorName() string { return "AutoScalingGroupValidationError" }

// Error satisfies the builtin error interface
func (e AutoScalingGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoScalingGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoScalingGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoScalingGroupValidationError{}

// Validate checks the field values on TimeRange with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TimeRange) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 1024 {
		return TimeRangeValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 1024 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetSchedule()); l < 2 || l > 1024 {
		return TimeRangeValidationError{
			field:  "Schedule",
			reason: "value length must be between 2 and 1024 runes, inclusive",
		}
	}

	// no validation rules for Zone

	// no validation rules for DesiredNum

	return nil
}

// TimeRangeValidationError is the validation error returned by
// TimeRange.Validate if the designated constraints aren't met.
type TimeRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeRangeValidationError) ErrorName() string { return "TimeRangeValidationError" }

// Error satisfies the builtin error interface
func (e TimeRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeRangeValidationError{}

// Validate checks the field values on DataDisk with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DataDisk) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DiskType

	// no validation rules for DiskSize

	return nil
}

// DataDiskValidationError is the validation error returned by
// DataDisk.Validate if the designated constraints aren't met.
type DataDiskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataDiskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataDiskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataDiskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataDiskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataDiskValidationError) ErrorName() string { return "DataDiskValidationError" }

// Error satisfies the builtin error interface
func (e DataDiskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataDisk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataDiskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataDiskValidationError{}

// Validate checks the field values on CloudDataDisk with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CloudDataDisk) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DiskType

	// no validation rules for DiskSize

	// no validation rules for FileSystem

	// no validation rules for AutoFormatAndMount

	// no validation rules for MountTarget

	// no validation rules for DiskPartition

	return nil
}

// CloudDataDiskValidationError is the validation error returned by
// CloudDataDisk.Validate if the designated constraints aren't met.
type CloudDataDiskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudDataDiskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudDataDiskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudDataDiskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudDataDiskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudDataDiskValidationError) ErrorName() string { return "CloudDataDiskValidationError" }

// Error satisfies the builtin error interface
func (e CloudDataDiskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudDataDisk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudDataDiskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudDataDiskValidationError{}

// Validate checks the field values on InternetAccessible with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InternetAccessible) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for InternetChargeType

	// no validation rules for InternetMaxBandwidth

	// no validation rules for PublicIPAssigned

	// no validation rules for BandwidthPackageId

	return nil
}

// InternetAccessibleValidationError is the validation error returned by
// InternetAccessible.Validate if the designated constraints aren't met.
type InternetAccessibleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InternetAccessibleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InternetAccessibleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InternetAccessibleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InternetAccessibleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InternetAccessibleValidationError) ErrorName() string {
	return "InternetAccessibleValidationError"
}

// Error satisfies the builtin error interface
func (e InternetAccessibleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInternetAccessible.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InternetAccessibleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InternetAccessibleValidationError{}

// Validate checks the field values on InstanceTemplateConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InstanceTemplateConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Region

	// no validation rules for Zone

	// no validation rules for VpcID

	// no validation rules for SubnetID

	// no validation rules for ApplyNum

	// no validation rules for CPU

	// no validation rules for Mem

	// no validation rules for GPU

	// no validation rules for InstanceType

	if _, ok := _InstanceTemplateConfig_InstanceChargeType_InLookup[m.GetInstanceChargeType()]; !ok {
		return InstanceTemplateConfigValidationError{
			field:  "InstanceChargeType",
			reason: "value must be in list [PREPAID POSTPAID_BY_HOUR SPOTPAID]",
		}
	}

	if v, ok := interface{}(m.GetSystemDisk()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceTemplateConfigValidationError{
				field:  "SystemDisk",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDataDisks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceTemplateConfigValidationError{
					field:  fmt.Sprintf("DataDisks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetImageInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceTemplateConfigValidationError{
				field:  "ImageInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InitLoginPassword

	// no validation rules for IsSecurityService

	// no validation rules for IsMonitorService

	for idx, item := range m.GetCloudDataDisks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceTemplateConfigValidationError{
					field:  fmt.Sprintf("CloudDataDisks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for InitLoginUsername

	if v, ok := interface{}(m.GetKeyPair()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceTemplateConfigValidationError{
				field:  "KeyPair",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DockerGraphPath

	// no validation rules for NodeRole

	return nil
}

// InstanceTemplateConfigValidationError is the validation error returned by
// InstanceTemplateConfig.Validate if the designated constraints aren't met.
type InstanceTemplateConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceTemplateConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceTemplateConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceTemplateConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceTemplateConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceTemplateConfigValidationError) ErrorName() string {
	return "InstanceTemplateConfigValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceTemplateConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceTemplateConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceTemplateConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceTemplateConfigValidationError{}

var _InstanceTemplateConfig_InstanceChargeType_InLookup = map[string]struct{}{
	"PREPAID":          {},
	"POSTPAID_BY_HOUR": {},
	"SPOTPAID":         {},
}

// Validate checks the field values on LaunchConfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LaunchConfiguration) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for LaunchConfigurationID

	// no validation rules for LaunchConfigureName

	// no validation rules for ProjectID

	// no validation rules for CPU

	// no validation rules for Mem

	// no validation rules for GPU

	// no validation rules for InstanceType

	// no validation rules for InstanceChargeType

	if v, ok := interface{}(m.GetSystemDisk()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LaunchConfigurationValidationError{
				field:  "SystemDisk",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDataDisks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LaunchConfigurationValidationError{
					field:  fmt.Sprintf("DataDisks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetInternetAccess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LaunchConfigurationValidationError{
				field:  "InternetAccess",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InitLoginPassword

	if v, ok := interface{}(m.GetImageInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LaunchConfigurationValidationError{
				field:  "ImageInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsSecurityService

	// no validation rules for IsMonitorService

	// no validation rules for UserData

	// no validation rules for InitLoginUsername

	// no validation rules for Selector

	if v, ok := interface{}(m.GetKeyPair()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LaunchConfigurationValidationError{
				field:  "KeyPair",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LaunchConfigurationValidationError is the validation error returned by
// LaunchConfiguration.Validate if the designated constraints aren't met.
type LaunchConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LaunchConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LaunchConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LaunchConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LaunchConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LaunchConfigurationValidationError) ErrorName() string {
	return "LaunchConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e LaunchConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLaunchConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LaunchConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LaunchConfigurationValidationError{}

// Validate checks the field values on KeyInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *KeyInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for KeyID

	// no validation rules for KeySecret

	// no validation rules for KeyPublic

	return nil
}

// KeyInfoValidationError is the validation error returned by KeyInfo.Validate
// if the designated constraints aren't met.
type KeyInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyInfoValidationError) ErrorName() string { return "KeyInfoValidationError" }

// Error satisfies the builtin error interface
func (e KeyInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeyInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyInfoValidationError{}

// Validate checks the field values on ImageInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ImageInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ImageID

	// no validation rules for ImageName

	// no validation rules for ImageType

	return nil
}

// ImageInfoValidationError is the validation error returned by
// ImageInfo.Validate if the designated constraints aren't met.
type ImageInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageInfoValidationError) ErrorName() string { return "ImageInfoValidationError" }

// Error satisfies the builtin error interface
func (e ImageInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageInfoValidationError{}

// Validate checks the field values on ClusterAutoScalingOption with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ClusterAutoScalingOption) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsScaleDownEnable

	// no validation rules for Expander

	// no validation rules for MaxEmptyBulkDelete

	// no validation rules for ScaleDownDelay

	// no validation rules for ScaleDownUnneededTime

	// no validation rules for ScaleDownUtilizationThreahold

	// no validation rules for SkipNodesWithLocalStorage

	// no validation rules for SkipNodesWithSystemPods

	// no validation rules for IgnoreDaemonSetsUtilization

	// no validation rules for OkTotalUnreadyCount

	// no validation rules for MaxTotalUnreadyPercentage

	// no validation rules for ScaleDownUnreadyTime

	// no validation rules for UnregisteredNodeRemovalTime

	// no validation rules for ProjectID

	// no validation rules for ClusterID

	// no validation rules for Creator

	// no validation rules for CreateTime

	// no validation rules for Updater

	// no validation rules for UpdateTime

	// no validation rules for Provider

	// no validation rules for EnableAutoscale

	// no validation rules for BufferResourceRatio

	// no validation rules for MaxGracefulTerminationSec

	// no validation rules for ScanInterval

	// no validation rules for MaxNodeProvisionTime

	// no validation rules for ScaleUpFromZero

	// no validation rules for ScaleDownDelayAfterAdd

	// no validation rules for ScaleDownDelayAfterDelete

	// no validation rules for ScaleDownDelayAfterFailure

	// no validation rules for ScaleDownGpuUtilizationThreshold

	// no validation rules for Status

	// no validation rules for ErrorMessage

	// no validation rules for BufferResourceCpuRatio

	// no validation rules for BufferResourceMemRatio

	if v, ok := interface{}(m.GetModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterAutoScalingOptionValidationError{
				field:  "Module",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebhook()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterAutoScalingOptionValidationError{
				field:  "Webhook",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ExpendablePodsPriorityCutoff

	if m.GetNewPodScaleUpDelay() < 0 {
		return ClusterAutoScalingOptionValidationError{
			field:  "NewPodScaleUpDelay",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// ClusterAutoScalingOptionValidationError is the validation error returned by
// ClusterAutoScalingOption.Validate if the designated constraints aren't met.
type ClusterAutoScalingOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterAutoScalingOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterAutoScalingOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterAutoScalingOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterAutoScalingOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterAutoScalingOptionValidationError) ErrorName() string {
	return "ClusterAutoScalingOptionValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterAutoScalingOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterAutoScalingOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterAutoScalingOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterAutoScalingOptionValidationError{}

// Validate checks the field values on WebhookMode with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WebhookMode) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Mode

	// no validation rules for Server

	// no validation rules for Token

	return nil
}

// WebhookModeValidationError is the validation error returned by
// WebhookMode.Validate if the designated constraints aren't met.
type WebhookModeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebhookModeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebhookModeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebhookModeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebhookModeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebhookModeValidationError) ErrorName() string { return "WebhookModeValidationError" }

// Error satisfies the builtin error interface
func (e WebhookModeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebhookMode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebhookModeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebhookModeValidationError{}

// Validate checks the field values on Taint with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Taint) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	// no validation rules for Value

	// no validation rules for Effect

	return nil
}

// TaintValidationError is the validation error returned by Taint.Validate if
// the designated constraints aren't met.
type TaintValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaintValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaintValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaintValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaintValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaintValidationError) ErrorName() string { return "TaintValidationError" }

// Error satisfies the builtin error interface
func (e TaintValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaintValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaintValidationError{}

// Validate checks the field values on NodeTemplate with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NodeTemplate) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NodeTemplateID

	// no validation rules for Name

	// no validation rules for ProjectID

	// no validation rules for Labels

	for idx, item := range m.GetTaints() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeTemplateValidationError{
					field:  fmt.Sprintf("Taints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DockerGraphPath

	// no validation rules for MountTarget

	// no validation rules for UserScript

	// no validation rules for UnSchedulable

	for idx, item := range m.GetDataDisks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeTemplateValidationError{
					field:  fmt.Sprintf("DataDisks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ExtraArgs

	// no validation rules for PreStartUserScript

	if v, ok := interface{}(m.GetBcsScaleOutAddons()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeTemplateValidationError{
				field:  "BcsScaleOutAddons",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetBcsScaleInAddons()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeTemplateValidationError{
				field:  "BcsScaleInAddons",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetScaleOutExtraAddons()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeTemplateValidationError{
				field:  "ScaleOutExtraAddons",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetScaleInExtraAddons()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeTemplateValidationError{
				field:  "ScaleInExtraAddons",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NodeOS

	// no validation rules for Creator

	// no validation rules for Updater

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for Desc

	if v, ok := interface{}(m.GetRuntime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeTemplateValidationError{
				field:  "Runtime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeTemplateValidationError{
				field:  "Module",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ScaleInPreScript

	// no validation rules for ScaleInPostScript

	// no validation rules for Annotations

	// no validation rules for MaxPodsPerNode

	// no validation rules for SkipSystemInit

	// no validation rules for AllowSkipScaleOutWhenFailed

	// no validation rules for AllowSkipScaleInWhenFailed

	return nil
}

// NodeTemplateValidationError is the validation error returned by
// NodeTemplate.Validate if the designated constraints aren't met.
type NodeTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeTemplateValidationError) ErrorName() string { return "NodeTemplateValidationError" }

// Error satisfies the builtin error interface
func (e NodeTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeTemplateValidationError{}

// Validate checks the field values on ModuleInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ModuleInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ScaleOutModuleID

	// no validation rules for ScaleInModuleID

	// no validation rules for ScaleOutBizID

	// no validation rules for ScaleInBizID

	// no validation rules for ScaleOutModuleName

	// no validation rules for ScaleInModuleName

	return nil
}

// ModuleInfoValidationError is the validation error returned by
// ModuleInfo.Validate if the designated constraints aren't met.
type ModuleInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModuleInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModuleInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModuleInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModuleInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModuleInfoValidationError) ErrorName() string { return "ModuleInfoValidationError" }

// Error satisfies the builtin error interface
func (e ModuleInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModuleInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModuleInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModuleInfoValidationError{}

// Validate checks the field values on RunTimeInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RunTimeInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ContainerRuntime

	// no validation rules for RuntimeVersion

	return nil
}

// RunTimeInfoValidationError is the validation error returned by
// RunTimeInfo.Validate if the designated constraints aren't met.
type RunTimeInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunTimeInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunTimeInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunTimeInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunTimeInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunTimeInfoValidationError) ErrorName() string { return "RunTimeInfoValidationError" }

// Error satisfies the builtin error interface
func (e RunTimeInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunTimeInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunTimeInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunTimeInfoValidationError{}

// Validate checks the field values on CreateNodeTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateNodeTemplateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectID()); l < 1 || l > 2048 {
		return CreateNodeTemplateRequestValidationError{
			field:  "ProjectID",
			reason: "value length must be between 1 and 2048 runes, inclusive",
		}
	}

	if !_CreateNodeTemplateRequest_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		return CreateNodeTemplateRequestValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return CreateNodeTemplateRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Desc

	// no validation rules for Labels

	for idx, item := range m.GetTaints() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateNodeTemplateRequestValidationError{
					field:  fmt.Sprintf("Taints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DockerGraphPath

	// no validation rules for MountTarget

	// no validation rules for UserScript

	// no validation rules for UnSchedulable

	for idx, item := range m.GetDataDisks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateNodeTemplateRequestValidationError{
					field:  fmt.Sprintf("DataDisks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ExtraArgs

	// no validation rules for PreStartUserScript

	if v, ok := interface{}(m.GetScaleOutExtraAddons()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNodeTemplateRequestValidationError{
				field:  "ScaleOutExtraAddons",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetScaleInExtraAddons()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNodeTemplateRequestValidationError{
				field:  "ScaleInExtraAddons",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NodeOS

	if l := utf8.RuneCountInString(m.GetCreator()); l < 2 || l > 1024 {
		return CreateNodeTemplateRequestValidationError{
			field:  "Creator",
			reason: "value length must be between 2 and 1024 runes, inclusive",
		}
	}

	if !_CreateNodeTemplateRequest_Creator_Pattern.MatchString(m.GetCreator()) {
		return CreateNodeTemplateRequestValidationError{
			field:  "Creator",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if v, ok := interface{}(m.GetRuntime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNodeTemplateRequestValidationError{
				field:  "Runtime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNodeTemplateRequestValidationError{
				field:  "Module",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetScaleInPreScript()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNodeTemplateRequestValidationError{
				field:  "ScaleInPreScript",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetScaleInPostScript()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNodeTemplateRequestValidationError{
				field:  "ScaleInPostScript",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNodeTemplateRequestValidationError{
				field:  "Annotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateNodeTemplateRequestValidationError is the validation error returned by
// CreateNodeTemplateRequest.Validate if the designated constraints aren't met.
type CreateNodeTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNodeTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNodeTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNodeTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNodeTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNodeTemplateRequestValidationError) ErrorName() string {
	return "CreateNodeTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNodeTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNodeTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNodeTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNodeTemplateRequestValidationError{}

var _CreateNodeTemplateRequest_ProjectID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _CreateNodeTemplateRequest_Creator_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on CreateNodeTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateNodeTemplateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNodeTemplateResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateNodeTemplateResponseValidationError is the validation error returned
// by CreateNodeTemplateResponse.Validate if the designated constraints aren't met.
type CreateNodeTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNodeTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNodeTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNodeTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNodeTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNodeTemplateResponseValidationError) ErrorName() string {
	return "CreateNodeTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNodeTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNodeTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNodeTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNodeTemplateResponseValidationError{}

// Validate checks the field values on UpdateNodeTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNodeTemplateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectID

	// no validation rules for NodeTemplateID

	// no validation rules for Name

	// no validation rules for Desc

	// no validation rules for Labels

	for idx, item := range m.GetTaints() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateNodeTemplateRequestValidationError{
					field:  fmt.Sprintf("Taints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DockerGraphPath

	// no validation rules for MountTarget

	// no validation rules for UserScript

	if v, ok := interface{}(m.GetUnSchedulable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeTemplateRequestValidationError{
				field:  "UnSchedulable",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDataDisks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateNodeTemplateRequestValidationError{
					field:  fmt.Sprintf("DataDisks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ExtraArgs

	// no validation rules for PreStartUserScript

	if v, ok := interface{}(m.GetScaleOutExtraAddons()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeTemplateRequestValidationError{
				field:  "ScaleOutExtraAddons",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetScaleInExtraAddons()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeTemplateRequestValidationError{
				field:  "ScaleInExtraAddons",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NodeOS

	if l := utf8.RuneCountInString(m.GetUpdater()); l < 2 || l > 1024 {
		return UpdateNodeTemplateRequestValidationError{
			field:  "Updater",
			reason: "value length must be between 2 and 1024 runes, inclusive",
		}
	}

	if !_UpdateNodeTemplateRequest_Updater_Pattern.MatchString(m.GetUpdater()) {
		return UpdateNodeTemplateRequestValidationError{
			field:  "Updater",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z]+$\"",
		}
	}

	if v, ok := interface{}(m.GetRuntime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeTemplateRequestValidationError{
				field:  "Runtime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeTemplateRequestValidationError{
				field:  "Module",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetScaleInPreScript()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeTemplateRequestValidationError{
				field:  "ScaleInPreScript",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetScaleInPostScript()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeTemplateRequestValidationError{
				field:  "ScaleInPostScript",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeTemplateRequestValidationError{
				field:  "Annotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateNodeTemplateRequestValidationError is the validation error returned by
// UpdateNodeTemplateRequest.Validate if the designated constraints aren't met.
type UpdateNodeTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNodeTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNodeTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNodeTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNodeTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNodeTemplateRequestValidationError) ErrorName() string {
	return "UpdateNodeTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNodeTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNodeTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNodeTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNodeTemplateRequestValidationError{}

var _UpdateNodeTemplateRequest_Updater_Pattern = regexp.MustCompile("^[0-9a-zA-Z]+$")

// Validate checks the field values on UpdateNodeTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNodeTemplateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeTemplateResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateNodeTemplateResponseValidationError is the validation error returned
// by UpdateNodeTemplateResponse.Validate if the designated constraints aren't met.
type UpdateNodeTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNodeTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNodeTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNodeTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNodeTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNodeTemplateResponseValidationError) ErrorName() string {
	return "UpdateNodeTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNodeTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNodeTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNodeTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNodeTemplateResponseValidationError{}

// Validate checks the field values on DeleteNodeTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteNodeTemplateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectID

	// no validation rules for NodeTemplateID

	return nil
}

// DeleteNodeTemplateRequestValidationError is the validation error returned by
// DeleteNodeTemplateRequest.Validate if the designated constraints aren't met.
type DeleteNodeTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNodeTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNodeTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNodeTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNodeTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNodeTemplateRequestValidationError) ErrorName() string {
	return "DeleteNodeTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNodeTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNodeTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNodeTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNodeTemplateRequestValidationError{}

// Validate checks the field values on DeleteNodeTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteNodeTemplateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteNodeTemplateResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteNodeTemplateResponseValidationError is the validation error returned
// by DeleteNodeTemplateResponse.Validate if the designated constraints aren't met.
type DeleteNodeTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNodeTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNodeTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNodeTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNodeTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNodeTemplateResponseValidationError) ErrorName() string {
	return "DeleteNodeTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNodeTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNodeTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNodeTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNodeTemplateResponseValidationError{}

// Validate checks the field values on GetNodeTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNodeTemplateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectID

	// no validation rules for NodeTemplateID

	return nil
}

// GetNodeTemplateRequestValidationError is the validation error returned by
// GetNodeTemplateRequest.Validate if the designated constraints aren't met.
type GetNodeTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeTemplateRequestValidationError) ErrorName() string {
	return "GetNodeTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNodeTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeTemplateRequestValidationError{}

// Validate checks the field values on GetNodeTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNodeTemplateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNodeTemplateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNodeTemplateResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetNodeTemplateResponseValidationError is the validation error returned by
// GetNodeTemplateResponse.Validate if the designated constraints aren't met.
type GetNodeTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeTemplateResponseValidationError) ErrorName() string {
	return "GetNodeTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNodeTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeTemplateResponseValidationError{}

// Validate checks the field values on ListNodeTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNodeTemplateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectID

	// no validation rules for NodeTemplateID

	return nil
}

// ListNodeTemplateRequestValidationError is the validation error returned by
// ListNodeTemplateRequest.Validate if the designated constraints aren't met.
type ListNodeTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNodeTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNodeTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNodeTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNodeTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNodeTemplateRequestValidationError) ErrorName() string {
	return "ListNodeTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNodeTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNodeTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNodeTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNodeTemplateRequestValidationError{}

// Validate checks the field values on ListNodeTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNodeTemplateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNodeTemplateResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListNodeTemplateResponseValidationError is the validation error returned by
// ListNodeTemplateResponse.Validate if the designated constraints aren't met.
type ListNodeTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNodeTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNodeTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNodeTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNodeTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNodeTemplateResponseValidationError) ErrorName() string {
	return "ListNodeTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNodeTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNodeTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNodeTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNodeTemplateResponseValidationError{}

// Validate checks the field values on Project with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Project) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectID

	// no validation rules for Name

	// no validation rules for EnglishName

	// no validation rules for Creator

	// no validation rules for Updater

	// no validation rules for ProjectType

	// no validation rules for UseBKRes

	// no validation rules for Description

	// no validation rules for IsOffline

	// no validation rules for Kind

	// no validation rules for BusinessID

	// no validation rules for DeployType

	// no validation rules for BgID

	// no validation rules for BgName

	// no validation rules for DeptID

	// no validation rules for DeptName

	// no validation rules for CenterID

	// no validation rules for CenterName

	// no validation rules for IsSecret

	for key, val := range m.GetCredentials() {
		_ = val

		// no validation rules for Credentials[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectValidationError{
					field:  fmt.Sprintf("Credentials[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreatTime

	// no validation rules for UpdateTime

	return nil
}

// ProjectValidationError is the validation error returned by Project.Validate
// if the designated constraints aren't met.
type ProjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectValidationError) ErrorName() string { return "ProjectValidationError" }

// Error satisfies the builtin error interface
func (e ProjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectValidationError{}

// Validate checks the field values on Task with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Task) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TaskID

	// no validation rules for TaskType

	if _, ok := _Task_Status_InLookup[m.GetStatus()]; !ok {
		return TaskValidationError{
			field:  "Status",
			reason: "value must be in list [INITIALIZING RUNNING SUCCESS FAILURE TIMEOUT FORCETERMINATE]",
		}
	}

	// no validation rules for Message

	// no validation rules for Start

	// no validation rules for End

	// no validation rules for ExecutionTime

	// no validation rules for CurrentStep

	for key, val := range m.GetSteps() {
		_ = val

		// no validation rules for Steps[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskValidationError{
					field:  fmt.Sprintf("Steps[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ClusterID

	// no validation rules for ProjectID

	// no validation rules for Creator

	// no validation rules for LastUpdate

	// no validation rules for Updater

	// no validation rules for ForceTerminate

	// no validation rules for CommonParams

	// no validation rules for TaskName

	// no validation rules for NodeGroupID

	return nil
}

// TaskValidationError is the validation error returned by Task.Validate if the
// designated constraints aren't met.
type TaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskValidationError) ErrorName() string { return "TaskValidationError" }

// Error satisfies the builtin error interface
func (e TaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskValidationError{}

var _Task_Status_InLookup = map[string]struct{}{
	"INITIALIZING":   {},
	"RUNNING":        {},
	"SUCCESS":        {},
	"FAILURE":        {},
	"TIMEOUT":        {},
	"FORCETERMINATE": {},
}

// Validate checks the field values on Step with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Step) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for System

	// no validation rules for Link

	// no validation rules for Params

	// no validation rules for Retry

	// no validation rules for Start

	// no validation rules for End

	// no validation rules for ExecutionTime

	if _, ok := _Step_Status_InLookup[m.GetStatus()]; !ok {
		return StepValidationError{
			field:  "Status",
			reason: "value must be in list [NOTSTARTED RUNNING SUCCESS FAILURE TIMEOUT FORCETERMINATE]",
		}
	}

	// no validation rules for Message

	// no validation rules for LastUpdate

	// no validation rules for TaskMethod

	// no validation rules for TaskName

	// no validation rules for SkipOnFailed

	return nil
}

// StepValidationError is the validation error returned by Step.Validate if the
// designated constraints aren't met.
type StepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StepValidationError) ErrorName() string { return "StepValidationError" }

// Error satisfies the builtin error interface
func (e StepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StepValidationError{}

var _Step_Status_InLookup = map[string]struct{}{
	"NOTSTARTED":     {},
	"RUNNING":        {},
	"SUCCESS":        {},
	"FAILURE":        {},
	"TIMEOUT":        {},
	"FORCETERMINATE": {},
}

// Validate checks the field values on TkeCidr with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TkeCidr) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for VPC

	// no validation rules for CIDR

	// no validation rules for IPNumber

	// no validation rules for Status

	// no validation rules for Cluster

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	return nil
}

// TkeCidrValidationError is the validation error returned by TkeCidr.Validate
// if the designated constraints aren't met.
type TkeCidrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TkeCidrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TkeCidrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TkeCidrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TkeCidrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TkeCidrValidationError) ErrorName() string { return "TkeCidrValidationError" }

// Error satisfies the builtin error interface
func (e TkeCidrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTkeCidr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TkeCidrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TkeCidrValidationError{}

// Validate checks the field values on TkeCidrCount with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TkeCidrCount) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Count

	// no validation rules for VPC

	// no validation rules for IPNumber

	// no validation rules for Status

	return nil
}

// TkeCidrCountValidationError is the validation error returned by
// TkeCidrCount.Validate if the designated constraints aren't met.
type TkeCidrCountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TkeCidrCountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TkeCidrCountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TkeCidrCountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TkeCidrCountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TkeCidrCountValidationError) ErrorName() string { return "TkeCidrCountValidationError" }

// Error satisfies the builtin error interface
func (e TkeCidrCountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTkeCidrCount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TkeCidrCountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TkeCidrCountValidationError{}

// Validate checks the field values on CreateClusterReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateClusterReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClusterID

	if l := utf8.RuneCountInString(m.GetClusterName()); l < 1 || l > 1024 {
		return CreateClusterReqValidationError{
			field:  "ClusterName",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetProvider()) > 32 {
		return CreateClusterReqValidationError{
			field:  "Provider",
			reason: "value length must be at most 32 runes",
		}
	}

	if l := utf8.RuneCountInString(m.GetRegion()); l < 1 || l > 100 {
		return CreateClusterReqValidationError{
			field:  "Region",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	if !_CreateClusterReq_Region_Pattern.MatchString(m.GetRegion()) {
		return CreateClusterReqValidationError{
			field:  "Region",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if utf8.RuneCountInString(m.GetVpcID()) > 32 {
		return CreateClusterReqValidationError{
			field:  "VpcID",
			reason: "value length must be at most 32 runes",
		}
	}

	if utf8.RuneCountInString(m.GetProjectID()) > 100 {
		return CreateClusterReqValidationError{
			field:  "ProjectID",
			reason: "value length must be at most 100 runes",
		}
	}

	if !_CreateClusterReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		return CreateClusterReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if utf8.RuneCountInString(m.GetBusinessID()) > 100 {
		return CreateClusterReqValidationError{
			field:  "BusinessID",
			reason: "value length must be at most 100 runes",
		}
	}

	if !_CreateClusterReq_BusinessID_Pattern.MatchString(m.GetBusinessID()) {
		return CreateClusterReqValidationError{
			field:  "BusinessID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if _, ok := _CreateClusterReq_Environment_InLookup[m.GetEnvironment()]; !ok {
		return CreateClusterReqValidationError{
			field:  "Environment",
			reason: "value must be in list [stag debug prod]",
		}
	}

	if _, ok := _CreateClusterReq_EngineType_InLookup[m.GetEngineType()]; !ok {
		return CreateClusterReqValidationError{
			field:  "EngineType",
			reason: "value must be in list [k8s mesos]",
		}
	}

	// no validation rules for IsExclusive

	if _, ok := _CreateClusterReq_ClusterType_InLookup[m.GetClusterType()]; !ok {
		return CreateClusterReqValidationError{
			field:  "ClusterType",
			reason: "value must be in list [federation single]",
		}
	}

	// no validation rules for FederationClusterID

	if len(m.GetLabels()) > 20 {
		return CreateClusterReqValidationError{
			field:  "Labels",
			reason: "value must contain no more than 20 pair(s)",
		}
	}

	if l := utf8.RuneCountInString(m.GetCreator()); l < 2 || l > 20 {
		return CreateClusterReqValidationError{
			field:  "Creator",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	// no validation rules for OnlyCreateInfo

	for key, val := range m.GetBcsAddons() {
		_ = val

		// no validation rules for BcsAddons[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateClusterReqValidationError{
					field:  fmt.Sprintf("BcsAddons[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetExtraAddons() {
		_ = val

		// no validation rules for ExtraAddons[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateClusterReqValidationError{
					field:  fmt.Sprintf("ExtraAddons[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CloudID

	// no validation rules for ManageType

	if m.GetNetworkSettings() == nil {
		return CreateClusterReqValidationError{
			field:  "NetworkSettings",
			reason: "value is required",
		}
	}

	if a := m.GetNetworkSettings(); a != nil {

	}

	if m.GetClusterBasicSettings() == nil {
		return CreateClusterReqValidationError{
			field:  "ClusterBasicSettings",
			reason: "value is required",
		}
	}

	if a := m.GetClusterBasicSettings(); a != nil {

	}

	if v, ok := interface{}(m.GetClusterAdvanceSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateClusterReqValidationError{
				field:  "ClusterAdvanceSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetNodeSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateClusterReqValidationError{
				field:  "NodeSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SystemReinstall

	// no validation rules for InitLoginPassword

	// no validation rules for NetworkType

	// no validation rules for AutoGenerateMasterNodes

	for idx, item := range m.GetInstances() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateClusterReqValidationError{
					field:  fmt.Sprintf("Instances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ExtraInfo

	// no validation rules for ModuleID

	// no validation rules for ExtraClusterID

	// no validation rules for IsCommonCluster

	// no validation rules for Description

	// no validation rules for ClusterCategory

	// no validation rules for IsShared

	// no validation rules for CloudAccountID

	// no validation rules for NodeTemplateID

	if v, ok := interface{}(m.GetArea()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateClusterReqValidationError{
				field:  "Area",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateClusterReqValidationError{
				field:  "Module",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetClusterConnectSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateClusterReqValidationError{
				field:  "ClusterConnectSetting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateClusterReqValidationError is the validation error returned by
// CreateClusterReq.Validate if the designated constraints aren't met.
type CreateClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClusterReqValidationError) ErrorName() string { return "CreateClusterReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClusterReqValidationError{}

var _CreateClusterReq_Region_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _CreateClusterReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _CreateClusterReq_BusinessID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _CreateClusterReq_Environment_InLookup = map[string]struct{}{
	"stag":  {},
	"debug": {},
	"prod":  {},
}

var _CreateClusterReq_EngineType_InLookup = map[string]struct{}{
	"k8s":   {},
	"mesos": {},
}

var _CreateClusterReq_ClusterType_InLookup = map[string]struct{}{
	"federation": {},
	"single":     {},
}

// Validate checks the field values on CreateClusterResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateClusterResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateClusterRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateClusterRespValidationError{
				field:  "Task",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateClusterRespValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateClusterRespValidationError is the validation error returned by
// CreateClusterResp.Validate if the designated constraints aren't met.
type CreateClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClusterRespValidationError) ErrorName() string {
	return "CreateClusterRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClusterRespValidationError{}

// Validate checks the field values on CreateVirtualClusterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateVirtualClusterReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClusterID

	if l := utf8.RuneCountInString(m.GetClusterName()); l < 1 || l > 1024 {
		return CreateVirtualClusterReqValidationError{
			field:  "ClusterName",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetProvider()) > 32 {
		return CreateVirtualClusterReqValidationError{
			field:  "Provider",
			reason: "value length must be at most 32 runes",
		}
	}

	if l := utf8.RuneCountInString(m.GetRegion()); l < 1 || l > 100 {
		return CreateVirtualClusterReqValidationError{
			field:  "Region",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	if !_CreateVirtualClusterReq_Region_Pattern.MatchString(m.GetRegion()) {
		return CreateVirtualClusterReqValidationError{
			field:  "Region",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if utf8.RuneCountInString(m.GetVpcID()) > 32 {
		return CreateVirtualClusterReqValidationError{
			field:  "VpcID",
			reason: "value length must be at most 32 runes",
		}
	}

	if utf8.RuneCountInString(m.GetProjectID()) > 100 {
		return CreateVirtualClusterReqValidationError{
			field:  "ProjectID",
			reason: "value length must be at most 100 runes",
		}
	}

	if !_CreateVirtualClusterReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		return CreateVirtualClusterReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if utf8.RuneCountInString(m.GetBusinessID()) > 100 {
		return CreateVirtualClusterReqValidationError{
			field:  "BusinessID",
			reason: "value length must be at most 100 runes",
		}
	}

	if !_CreateVirtualClusterReq_BusinessID_Pattern.MatchString(m.GetBusinessID()) {
		return CreateVirtualClusterReqValidationError{
			field:  "BusinessID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if _, ok := _CreateVirtualClusterReq_Environment_InLookup[m.GetEnvironment()]; !ok {
		return CreateVirtualClusterReqValidationError{
			field:  "Environment",
			reason: "value must be in list [stag debug prod]",
		}
	}

	if _, ok := _CreateVirtualClusterReq_EngineType_InLookup[m.GetEngineType()]; !ok {
		return CreateVirtualClusterReqValidationError{
			field:  "EngineType",
			reason: "value must be in list [k8s mesos]",
		}
	}

	// no validation rules for IsExclusive

	if _, ok := _CreateVirtualClusterReq_ClusterType_InLookup[m.GetClusterType()]; !ok {
		return CreateVirtualClusterReqValidationError{
			field:  "ClusterType",
			reason: "value must be in list [federation single virtual]",
		}
	}

	// no validation rules for HostClusterID

	if _, ok := _CreateVirtualClusterReq_HostClusterNetwork_InLookup[m.GetHostClusterNetwork()]; !ok {
		return CreateVirtualClusterReqValidationError{
			field:  "HostClusterNetwork",
			reason: "value must be in list [devnet idc ]",
		}
	}

	if len(m.GetLabels()) > 20 {
		return CreateVirtualClusterReqValidationError{
			field:  "Labels",
			reason: "value must contain no more than 20 pair(s)",
		}
	}

	if l := utf8.RuneCountInString(m.GetCreator()); l < 2 || l > 20 {
		return CreateVirtualClusterReqValidationError{
			field:  "Creator",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	// no validation rules for OnlyCreateInfo

	if v, ok := interface{}(m.GetNetworkSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVirtualClusterReqValidationError{
				field:  "NetworkSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetClusterBasicSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVirtualClusterReqValidationError{
				field:  "ClusterBasicSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetClusterAdvanceSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVirtualClusterReqValidationError{
				field:  "ClusterAdvanceSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetNodeSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVirtualClusterReqValidationError{
				field:  "NodeSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ExtraInfo

	// no validation rules for Description

	if v, ok := interface{}(m.GetNs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVirtualClusterReqValidationError{
				field:  "Ns",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProjectCode

	return nil
}

// CreateVirtualClusterReqValidationError is the validation error returned by
// CreateVirtualClusterReq.Validate if the designated constraints aren't met.
type CreateVirtualClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVirtualClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVirtualClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVirtualClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVirtualClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVirtualClusterReqValidationError) ErrorName() string {
	return "CreateVirtualClusterReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVirtualClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVirtualClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVirtualClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVirtualClusterReqValidationError{}

var _CreateVirtualClusterReq_Region_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _CreateVirtualClusterReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _CreateVirtualClusterReq_BusinessID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _CreateVirtualClusterReq_Environment_InLookup = map[string]struct{}{
	"stag":  {},
	"debug": {},
	"prod":  {},
}

var _CreateVirtualClusterReq_EngineType_InLookup = map[string]struct{}{
	"k8s":   {},
	"mesos": {},
}

var _CreateVirtualClusterReq_ClusterType_InLookup = map[string]struct{}{
	"federation": {},
	"single":     {},
	"virtual":    {},
}

var _CreateVirtualClusterReq_HostClusterNetwork_InLookup = map[string]struct{}{
	"devnet": {},
	"idc":    {},
	"":       {},
}

// Validate checks the field values on NamespaceInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NamespaceInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Labels

	// no validation rules for Annotations

	if v, ok := interface{}(m.GetQuota()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceInfoValidationError{
				field:  "Quota",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NamespaceInfoValidationError is the validation error returned by
// NamespaceInfo.Validate if the designated constraints aren't met.
type NamespaceInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceInfoValidationError) ErrorName() string { return "NamespaceInfoValidationError" }

// Error satisfies the builtin error interface
func (e NamespaceInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespaceInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceInfoValidationError{}

// Validate checks the field values on NamespaceQuota with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NamespaceQuota) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CpuRequests

	// no validation rules for CpuLimits

	// no validation rules for MemoryRequests

	// no validation rules for MemoryLimits

	return nil
}

// NamespaceQuotaValidationError is the validation error returned by
// NamespaceQuota.Validate if the designated constraints aren't met.
type NamespaceQuotaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceQuotaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceQuotaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceQuotaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceQuotaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceQuotaValidationError) ErrorName() string { return "NamespaceQuotaValidationError" }

// Error satisfies the builtin error interface
func (e NamespaceQuotaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespaceQuota.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceQuotaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceQuotaValidationError{}

// Validate checks the field values on CreateVirtualClusterResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateVirtualClusterResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVirtualClusterRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVirtualClusterRespValidationError{
				field:  "Task",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVirtualClusterRespValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateVirtualClusterRespValidationError is the validation error returned by
// CreateVirtualClusterResp.Validate if the designated constraints aren't met.
type CreateVirtualClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVirtualClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVirtualClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVirtualClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVirtualClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVirtualClusterRespValidationError) ErrorName() string {
	return "CreateVirtualClusterRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVirtualClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVirtualClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVirtualClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVirtualClusterRespValidationError{}

// Validate checks the field values on KubeConfigReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *KubeConfigReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetKubeConfig()) < 1 {
		return KubeConfigReqValidationError{
			field:  "KubeConfig",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// KubeConfigReqValidationError is the validation error returned by
// KubeConfigReq.Validate if the designated constraints aren't met.
type KubeConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubeConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubeConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubeConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubeConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubeConfigReqValidationError) ErrorName() string { return "KubeConfigReqValidationError" }

// Error satisfies the builtin error interface
func (e KubeConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubeConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubeConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubeConfigReqValidationError{}

// Validate checks the field values on KubeConfigConnectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *KubeConfigConnectReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClusterID

	// no validation rules for IsExtranet

	if l := utf8.RuneCountInString(m.GetCloudID()); l < 1 || l > 1024 {
		return KubeConfigConnectReqValidationError{
			field:  "CloudID",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetAccountID()) > 1024 {
		return KubeConfigConnectReqValidationError{
			field:  "AccountID",
			reason: "value length must be at most 1024 runes",
		}
	}

	if utf8.RuneCountInString(m.GetRegion()) > 100 {
		return KubeConfigConnectReqValidationError{
			field:  "Region",
			reason: "value length must be at most 100 runes",
		}
	}

	if !_KubeConfigConnectReq_Region_Pattern.MatchString(m.GetRegion()) {
		return KubeConfigConnectReqValidationError{
			field:  "Region",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	return nil
}

// KubeConfigConnectReqValidationError is the validation error returned by
// KubeConfigConnectReq.Validate if the designated constraints aren't met.
type KubeConfigConnectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubeConfigConnectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubeConfigConnectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubeConfigConnectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubeConfigConnectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubeConfigConnectReqValidationError) ErrorName() string {
	return "KubeConfigConnectReqValidationError"
}

// Error satisfies the builtin error interface
func (e KubeConfigConnectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubeConfigConnectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubeConfigConnectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubeConfigConnectReqValidationError{}

var _KubeConfigConnectReq_Region_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on KubeConfigResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *KubeConfigResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// KubeConfigRespValidationError is the validation error returned by
// KubeConfigResp.Validate if the designated constraints aren't met.
type KubeConfigRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubeConfigRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubeConfigRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubeConfigRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubeConfigRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubeConfigRespValidationError) ErrorName() string { return "KubeConfigRespValidationError" }

// Error satisfies the builtin error interface
func (e KubeConfigRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubeConfigResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubeConfigRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubeConfigRespValidationError{}

// Validate checks the field values on KubeConfigConnectResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *KubeConfigConnectResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// KubeConfigConnectRespValidationError is the validation error returned by
// KubeConfigConnectResp.Validate if the designated constraints aren't met.
type KubeConfigConnectRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubeConfigConnectRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubeConfigConnectRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubeConfigConnectRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubeConfigConnectRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubeConfigConnectRespValidationError) ErrorName() string {
	return "KubeConfigConnectRespValidationError"
}

// Error satisfies the builtin error interface
func (e KubeConfigConnectRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubeConfigConnectResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubeConfigConnectRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubeConfigConnectRespValidationError{}

// Validate checks the field values on ImportCloudMode with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ImportCloudMode) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CloudID

	// no validation rules for KubeConfig

	return nil
}

// ImportCloudModeValidationError is the validation error returned by
// ImportCloudMode.Validate if the designated constraints aren't met.
type ImportCloudModeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportCloudModeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportCloudModeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportCloudModeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportCloudModeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportCloudModeValidationError) ErrorName() string { return "ImportCloudModeValidationError" }

// Error satisfies the builtin error interface
func (e ImportCloudModeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportCloudMode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportCloudModeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportCloudModeValidationError{}

// Validate checks the field values on ImportClusterReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ImportClusterReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClusterID

	if l := utf8.RuneCountInString(m.GetClusterName()); l < 1 || l > 1024 {
		return ImportClusterReqValidationError{
			field:  "ClusterName",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
	}

	// no validation rules for Description

	if l := utf8.RuneCountInString(m.GetProvider()); l < 1 || l > 1024 {
		return ImportClusterReqValidationError{
			field:  "Provider",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetRegion()) > 100 {
		return ImportClusterReqValidationError{
			field:  "Region",
			reason: "value length must be at most 100 runes",
		}
	}

	if !_ImportClusterReq_Region_Pattern.MatchString(m.GetRegion()) {
		return ImportClusterReqValidationError{
			field:  "Region",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetProjectID()); l < 1 || l > 100 {
		return ImportClusterReqValidationError{
			field:  "ProjectID",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	if !_ImportClusterReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		return ImportClusterReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetBusinessID()); l < 1 || l > 100 {
		return ImportClusterReqValidationError{
			field:  "BusinessID",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	if !_ImportClusterReq_BusinessID_Pattern.MatchString(m.GetBusinessID()) {
		return ImportClusterReqValidationError{
			field:  "BusinessID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if _, ok := _ImportClusterReq_Environment_InLookup[m.GetEnvironment()]; !ok {
		return ImportClusterReqValidationError{
			field:  "Environment",
			reason: "value must be in list [stag debug prod]",
		}
	}

	if _, ok := _ImportClusterReq_EngineType_InLookup[m.GetEngineType()]; !ok {
		return ImportClusterReqValidationError{
			field:  "EngineType",
			reason: "value must be in list [k8s mesos ]",
		}
	}

	if v, ok := interface{}(m.GetIsExclusive()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportClusterReqValidationError{
				field:  "IsExclusive",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _ImportClusterReq_ClusterType_InLookup[m.GetClusterType()]; !ok {
		return ImportClusterReqValidationError{
			field:  "ClusterType",
			reason: "value must be in list [federation single ]",
		}
	}

	if len(m.GetLabels()) > 20 {
		return ImportClusterReqValidationError{
			field:  "Labels",
			reason: "value must contain no more than 20 pair(s)",
		}
	}

	if l := utf8.RuneCountInString(m.GetCreator()); l < 1 || l > 1024 {
		return ImportClusterReqValidationError{
			field:  "Creator",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
	}

	if m.GetCloudMode() == nil {
		return ImportClusterReqValidationError{
			field:  "CloudMode",
			reason: "value is required",
		}
	}

	if a := m.GetCloudMode(); a != nil {

	}

	// no validation rules for ManageType

	// no validation rules for NetworkType

	// no validation rules for ExtraInfo

	// no validation rules for ExtraClusterID

	// no validation rules for ClusterCategory

	// no validation rules for IsShared

	if utf8.RuneCountInString(m.GetVersion()) > 1024 {
		return ImportClusterReqValidationError{
			field:  "Version",
			reason: "value length must be at most 1024 runes",
		}
	}

	if utf8.RuneCountInString(m.GetAccountID()) > 1024 {
		return ImportClusterReqValidationError{
			field:  "AccountID",
			reason: "value length must be at most 1024 runes",
		}
	}

	return nil
}

// ImportClusterReqValidationError is the validation error returned by
// ImportClusterReq.Validate if the designated constraints aren't met.
type ImportClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportClusterReqValidationError) ErrorName() string { return "ImportClusterReqValidationError" }

// Error satisfies the builtin error interface
func (e ImportClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportClusterReqValidationError{}

var _ImportClusterReq_Region_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _ImportClusterReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _ImportClusterReq_BusinessID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _ImportClusterReq_Environment_InLookup = map[string]struct{}{
	"stag":  {},
	"debug": {},
	"prod":  {},
}

var _ImportClusterReq_EngineType_InLookup = map[string]struct{}{
	"k8s":   {},
	"mesos": {},
	"":      {},
}

var _ImportClusterReq_ClusterType_InLookup = map[string]struct{}{
	"federation": {},
	"single":     {},
	"":           {},
}

// Validate checks the field values on ImportClusterResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ImportClusterResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportClusterRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ImportClusterRespValidationError is the validation error returned by
// ImportClusterResp.Validate if the designated constraints aren't met.
type ImportClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportClusterRespValidationError) ErrorName() string {
	return "ImportClusterRespValidationError"
}

// Error satisfies the builtin error interface
func (e ImportClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportClusterRespValidationError{}

// Validate checks the field values on DeleteVirtualClusterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteVirtualClusterReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 1 || l > 100 {
		return DeleteVirtualClusterReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		return DeleteVirtualClusterReqValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
	}

	if !_DeleteVirtualClusterReq_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return DeleteVirtualClusterReqValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for OnlyDeleteInfo

	// no validation rules for Operator

	return nil
}

// DeleteVirtualClusterReqValidationError is the validation error returned by
// DeleteVirtualClusterReq.Validate if the designated constraints aren't met.
type DeleteVirtualClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVirtualClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVirtualClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVirtualClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVirtualClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVirtualClusterReqValidationError) ErrorName() string {
	return "DeleteVirtualClusterReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteVirtualClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVirtualClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVirtualClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVirtualClusterReqValidationError{}

var _DeleteVirtualClusterReq_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on DeleteVirtualClusterResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteVirtualClusterResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteVirtualClusterRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteVirtualClusterRespValidationError{
				field:  "Task",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteVirtualClusterRespValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteVirtualClusterRespValidationError is the validation error returned by
// DeleteVirtualClusterResp.Validate if the designated constraints aren't met.
type DeleteVirtualClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVirtualClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVirtualClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVirtualClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVirtualClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVirtualClusterRespValidationError) ErrorName() string {
	return "DeleteVirtualClusterRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteVirtualClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVirtualClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVirtualClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVirtualClusterRespValidationError{}

// Validate checks the field values on UpdateVirtualClusterQuotaReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateVirtualClusterQuotaReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 1 || l > 100 {
		return UpdateVirtualClusterQuotaReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		return UpdateVirtualClusterQuotaReqValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
	}

	if !_UpdateVirtualClusterQuotaReq_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return UpdateVirtualClusterQuotaReqValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if v, ok := interface{}(m.GetQuota()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVirtualClusterQuotaReqValidationError{
				field:  "Quota",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetUpdater()) > 1024 {
		return UpdateVirtualClusterQuotaReqValidationError{
			field:  "Updater",
			reason: "value length must be at most 1024 runes",
		}
	}

	return nil
}

// UpdateVirtualClusterQuotaReqValidationError is the validation error returned
// by UpdateVirtualClusterQuotaReq.Validate if the designated constraints
// aren't met.
type UpdateVirtualClusterQuotaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVirtualClusterQuotaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVirtualClusterQuotaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVirtualClusterQuotaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVirtualClusterQuotaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVirtualClusterQuotaReqValidationError) ErrorName() string {
	return "UpdateVirtualClusterQuotaReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVirtualClusterQuotaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVirtualClusterQuotaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVirtualClusterQuotaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVirtualClusterQuotaReqValidationError{}

var _UpdateVirtualClusterQuotaReq_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on UpdateVirtualClusterQuotaResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateVirtualClusterQuotaResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVirtualClusterQuotaRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateVirtualClusterQuotaRespValidationError is the validation error
// returned by UpdateVirtualClusterQuotaResp.Validate if the designated
// constraints aren't met.
type UpdateVirtualClusterQuotaRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVirtualClusterQuotaRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVirtualClusterQuotaRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVirtualClusterQuotaRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVirtualClusterQuotaRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVirtualClusterQuotaRespValidationError) ErrorName() string {
	return "UpdateVirtualClusterQuotaRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVirtualClusterQuotaRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVirtualClusterQuotaResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVirtualClusterQuotaRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVirtualClusterQuotaRespValidationError{}

// Validate checks the field values on DeleteClusterReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteClusterReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 1 || l > 100 {
		return DeleteClusterReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		return DeleteClusterReqValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
	}

	if !_DeleteClusterReq_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return DeleteClusterReqValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for IsForced

	// no validation rules for InstanceDeleteMode

	// no validation rules for OnlyDeleteInfo

	// no validation rules for Operator

	// no validation rules for DeleteClusterRecord

	return nil
}

// DeleteClusterReqValidationError is the validation error returned by
// DeleteClusterReq.Validate if the designated constraints aren't met.
type DeleteClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteClusterReqValidationError) ErrorName() string { return "DeleteClusterReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteClusterReqValidationError{}

var _DeleteClusterReq_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on DeleteClusterResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteClusterResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteClusterRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteClusterRespValidationError{
				field:  "Task",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteClusterRespValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteClusterRespValidationError is the validation error returned by
// DeleteClusterResp.Validate if the designated constraints aren't met.
type DeleteClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteClusterRespValidationError) ErrorName() string {
	return "DeleteClusterRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteClusterRespValidationError{}

// Validate checks the field values on UpdateClusterReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateClusterReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetClusterID()) > 1024 {
		return UpdateClusterReqValidationError{
			field:  "ClusterID",
			reason: "value length must be at most 1024 runes",
		}
	}

	// no validation rules for ClusterName

	if utf8.RuneCountInString(m.GetProvider()) > 1024 {
		return UpdateClusterReqValidationError{
			field:  "Provider",
			reason: "value length must be at most 1024 runes",
		}
	}

	// no validation rules for Region

	if utf8.RuneCountInString(m.GetVpcID()) > 1024 {
		return UpdateClusterReqValidationError{
			field:  "VpcID",
			reason: "value length must be at most 1024 runes",
		}
	}

	if utf8.RuneCountInString(m.GetProjectID()) > 1024 {
		return UpdateClusterReqValidationError{
			field:  "ProjectID",
			reason: "value length must be at most 1024 runes",
		}
	}

	if utf8.RuneCountInString(m.GetBusinessID()) > 1024 {
		return UpdateClusterReqValidationError{
			field:  "BusinessID",
			reason: "value length must be at most 1024 runes",
		}
	}

	// no validation rules for Environment

	// no validation rules for EngineType

	if v, ok := interface{}(m.GetIsExclusive()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateClusterReqValidationError{
				field:  "IsExclusive",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClusterType

	// no validation rules for FederationClusterID

	if len(m.GetLabels()) > 20 {
		return UpdateClusterReqValidationError{
			field:  "Labels",
			reason: "value must contain no more than 20 pair(s)",
		}
	}

	if utf8.RuneCountInString(m.GetUpdater()) > 1024 {
		return UpdateClusterReqValidationError{
			field:  "Updater",
			reason: "value length must be at most 1024 runes",
		}
	}

	if _, ok := _UpdateClusterReq_Status_InLookup[m.GetStatus()]; !ok {
		return UpdateClusterReqValidationError{
			field:  "Status",
			reason: "value must be in list [CREATING RUNNING DELETING FAILURE INITIALIZATION DELETED ]",
		}
	}

	for key, val := range m.GetBcsAddons() {
		_ = val

		// no validation rules for BcsAddons[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateClusterReqValidationError{
					field:  fmt.Sprintf("BcsAddons[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetExtraAddons() {
		_ = val

		// no validation rules for ExtraAddons[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateClusterReqValidationError{
					field:  fmt.Sprintf("ExtraAddons[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SystemID

	// no validation rules for ManageType

	if v, ok := interface{}(m.GetNetworkSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateClusterReqValidationError{
				field:  "NetworkSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetClusterBasicSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateClusterReqValidationError{
				field:  "ClusterBasicSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetClusterAdvanceSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateClusterReqValidationError{
				field:  "ClusterAdvanceSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetNodeSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateClusterReqValidationError{
				field:  "NodeSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NetworkType

	// no validation rules for ExtraInfo

	// no validation rules for ModuleID

	// no validation rules for ExtraClusterID

	if v, ok := interface{}(m.GetIsCommonCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateClusterReqValidationError{
				field:  "IsCommonCluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateClusterReqValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClusterCategory

	if v, ok := interface{}(m.GetIsShared()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateClusterReqValidationError{
				field:  "IsShared",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreateTime

	if utf8.RuneCountInString(m.GetCreator()) > 1024 {
		return UpdateClusterReqValidationError{
			field:  "Creator",
			reason: "value length must be at most 1024 runes",
		}
	}

	// no validation rules for ImportCategory

	// no validation rules for CloudAccountID

	return nil
}

// UpdateClusterReqValidationError is the validation error returned by
// UpdateClusterReq.Validate if the designated constraints aren't met.
type UpdateClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClusterReqValidationError) ErrorName() string { return "UpdateClusterReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClusterReqValidationError{}

var _UpdateClusterReq_Status_InLookup = map[string]struct{}{
	"CREATING":       {},
	"RUNNING":        {},
	"DELETING":       {},
	"FAILURE":        {},
	"INITIALIZATION": {},
	"DELETED":        {},
	"":               {},
}

// Validate checks the field values on UpdateClusterResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateClusterResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateClusterRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateClusterRespValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateClusterRespValidationError is the validation error returned by
// UpdateClusterResp.Validate if the designated constraints aren't met.
type UpdateClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClusterRespValidationError) ErrorName() string {
	return "UpdateClusterRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClusterRespValidationError{}

// Validate checks the field values on RetryCreateClusterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetryCreateClusterReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClusterID

	if l := utf8.RuneCountInString(m.GetOperator()); l < 1 || l > 100 {
		return RetryCreateClusterReqValidationError{
			field:  "Operator",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	return nil
}

// RetryCreateClusterReqValidationError is the validation error returned by
// RetryCreateClusterReq.Validate if the designated constraints aren't met.
type RetryCreateClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetryCreateClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetryCreateClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetryCreateClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetryCreateClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetryCreateClusterReqValidationError) ErrorName() string {
	return "RetryCreateClusterReqValidationError"
}

// Error satisfies the builtin error interface
func (e RetryCreateClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetryCreateClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetryCreateClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetryCreateClusterReqValidationError{}

// Validate checks the field values on RetryCreateClusterResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetryCreateClusterResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetryCreateClusterRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetryCreateClusterRespValidationError{
				field:  "Task",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RetryCreateClusterRespValidationError is the validation error returned by
// RetryCreateClusterResp.Validate if the designated constraints aren't met.
type RetryCreateClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetryCreateClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetryCreateClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetryCreateClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetryCreateClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetryCreateClusterRespValidationError) ErrorName() string {
	return "RetryCreateClusterRespValidationError"
}

// Error satisfies the builtin error interface
func (e RetryCreateClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetryCreateClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetryCreateClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetryCreateClusterRespValidationError{}

// Validate checks the field values on GetClusterReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetClusterReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 1 || l > 100 {
		return GetClusterReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		return GetClusterReqValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
	}

	if !_GetClusterReq_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return GetClusterReqValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for CloudInfo

	return nil
}

// GetClusterReqValidationError is the validation error returned by
// GetClusterReq.Validate if the designated constraints aren't met.
type GetClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterReqValidationError) ErrorName() string { return "GetClusterReqValidationError" }

// Error satisfies the builtin error interface
func (e GetClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterReqValidationError{}

var _GetClusterReq_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on GetClusterResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetClusterResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterRespValidationError{
				field:  "Extra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterRespValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetClusterRespValidationError is the validation error returned by
// GetClusterResp.Validate if the designated constraints aren't met.
type GetClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterRespValidationError) ErrorName() string { return "GetClusterRespValidationError" }

// Error satisfies the builtin error interface
func (e GetClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterRespValidationError{}

// Validate checks the field values on ExtraClusterInfo with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ExtraClusterInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProviderType

	return nil
}

// ExtraClusterInfoValidationError is the validation error returned by
// ExtraClusterInfo.Validate if the designated constraints aren't met.
type ExtraClusterInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtraClusterInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtraClusterInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtraClusterInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtraClusterInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtraClusterInfoValidationError) ErrorName() string { return "ExtraClusterInfoValidationError" }

// Error satisfies the builtin error interface
func (e ExtraClusterInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtraClusterInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtraClusterInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtraClusterInfoValidationError{}

// Validate checks the field values on CheckNodesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CheckNodesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CheckNodesRequestValidationError is the validation error returned by
// CheckNodesRequest.Validate if the designated constraints aren't met.
type CheckNodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckNodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckNodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckNodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckNodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckNodesRequestValidationError) ErrorName() string {
	return "CheckNodesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckNodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckNodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckNodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckNodesRequestValidationError{}

// Validate checks the field values on CheckNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckNodesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for key, val := range m.GetData() {
		_ = val

		// no validation rules for Data[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckNodesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CheckNodesResponseValidationError is the validation error returned by
// CheckNodesResponse.Validate if the designated constraints aren't met.
type CheckNodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckNodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckNodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckNodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckNodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckNodesResponseValidationError) ErrorName() string {
	return "CheckNodesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckNodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckNodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckNodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckNodesResponseValidationError{}

// Validate checks the field values on NodeResult with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *NodeResult) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsExist

	// no validation rules for ClusterID

	// no validation rules for ClusterName

	return nil
}

// NodeResultValidationError is the validation error returned by
// NodeResult.Validate if the designated constraints aren't met.
type NodeResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeResultValidationError) ErrorName() string { return "NodeResultValidationError" }

// Error satisfies the builtin error interface
func (e NodeResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeResultValidationError{}

// Validate checks the field values on UnCordonNodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UnCordonNodeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetClusterID()) < 1 {
		return UnCordonNodeRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be at least 1 bytes",
		}
	}

	return nil
}

// UnCordonNodeRequestValidationError is the validation error returned by
// UnCordonNodeRequest.Validate if the designated constraints aren't met.
type UnCordonNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnCordonNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnCordonNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnCordonNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnCordonNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnCordonNodeRequestValidationError) ErrorName() string {
	return "UnCordonNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnCordonNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnCordonNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnCordonNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnCordonNodeRequestValidationError{}

// Validate checks the field values on UnCordonNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UnCordonNodeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnCordonNodeResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UnCordonNodeResponseValidationError is the validation error returned by
// UnCordonNodeResponse.Validate if the designated constraints aren't met.
type UnCordonNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnCordonNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnCordonNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnCordonNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnCordonNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnCordonNodeResponseValidationError) ErrorName() string {
	return "UnCordonNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnCordonNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnCordonNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnCordonNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnCordonNodeResponseValidationError{}

// Validate checks the field values on CordonNodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CordonNodeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetClusterID()) < 1 {
		return CordonNodeRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be at least 1 bytes",
		}
	}

	return nil
}

// CordonNodeRequestValidationError is the validation error returned by
// CordonNodeRequest.Validate if the designated constraints aren't met.
type CordonNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CordonNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CordonNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CordonNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CordonNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CordonNodeRequestValidationError) ErrorName() string {
	return "CordonNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CordonNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCordonNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CordonNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CordonNodeRequestValidationError{}

// Validate checks the field values on CordonNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CordonNodeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CordonNodeResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CordonNodeResponseValidationError is the validation error returned by
// CordonNodeResponse.Validate if the designated constraints aren't met.
type CordonNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CordonNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CordonNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CordonNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CordonNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CordonNodeResponseValidationError) ErrorName() string {
	return "CordonNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CordonNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCordonNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CordonNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CordonNodeResponseValidationError{}

// Validate checks the field values on UpdateNodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateNodeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetInnerIPs()); l < 1 || l > 100 {
		return UpdateNodeRequestValidationError{
			field:  "InnerIPs",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
	}

	if _, ok := _UpdateNodeRequest_Status_InLookup[m.GetStatus()]; !ok {
		return UpdateNodeRequestValidationError{
			field:  "Status",
			reason: "value must be in list [INITIALIZATION RUNNING DELETING ADD-FAILURE REMOVE-FAILURE]",
		}
	}

	// no validation rules for NodeGroupID

	// no validation rules for ClusterID

	if len(m.GetUpdater()) < 1 {
		return UpdateNodeRequestValidationError{
			field:  "Updater",
			reason: "value length must be at least 1 bytes",
		}
	}

	return nil
}

// UpdateNodeRequestValidationError is the validation error returned by
// UpdateNodeRequest.Validate if the designated constraints aren't met.
type UpdateNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNodeRequestValidationError) ErrorName() string {
	return "UpdateNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNodeRequestValidationError{}

var _UpdateNodeRequest_Status_InLookup = map[string]struct{}{
	"INITIALIZATION": {},
	"RUNNING":        {},
	"DELETING":       {},
	"ADD-FAILURE":    {},
	"REMOVE-FAILURE": {},
}

// Validate checks the field values on UpdateNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNodeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateNodeResponseValidationError is the validation error returned by
// UpdateNodeResponse.Validate if the designated constraints aren't met.
type UpdateNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNodeResponseValidationError) ErrorName() string {
	return "UpdateNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNodeResponseValidationError{}

// Validate checks the field values on NodeStatus with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *NodeStatus) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// NodeStatusValidationError is the validation error returned by
// NodeStatus.Validate if the designated constraints aren't met.
type NodeStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeStatusValidationError) ErrorName() string { return "NodeStatusValidationError" }

// Error satisfies the builtin error interface
func (e NodeStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeStatusValidationError{}

// Validate checks the field values on RecordNodeInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RecordNodeInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetNodes()); l < 1 || l > 1000 {
		return RecordNodeInfoRequestValidationError{
			field:  "Nodes",
			reason: "value must contain between 1 and 1000 items, inclusive",
		}
	}

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RecordNodeInfoRequestValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RecordNodeInfoRequestValidationError is the validation error returned by
// RecordNodeInfoRequest.Validate if the designated constraints aren't met.
type RecordNodeInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordNodeInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordNodeInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordNodeInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordNodeInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordNodeInfoRequestValidationError) ErrorName() string {
	return "RecordNodeInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RecordNodeInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordNodeInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordNodeInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordNodeInfoRequestValidationError{}

// Validate checks the field values on GetNodeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetNodeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if ip := net.ParseIP(m.GetInnerIP()); ip == nil || ip.To4() == nil {
		return GetNodeRequestValidationError{
			field:  "InnerIP",
			reason: "value must be a valid IPv4 address",
		}
	}

	// no validation rules for ShowPwd

	return nil
}

// GetNodeRequestValidationError is the validation error returned by
// GetNodeRequest.Validate if the designated constraints aren't met.
type GetNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeRequestValidationError) ErrorName() string { return "GetNodeRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeRequestValidationError{}

// Validate checks the field values on GetNodeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetNodeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNodeResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetNodeResponseValidationError is the validation error returned by
// GetNodeResponse.Validate if the designated constraints aren't met.
type GetNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeResponseValidationError) ErrorName() string { return "GetNodeResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeResponseValidationError{}

// Validate checks the field values on GetNodeInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNodeInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if ip := net.ParseIP(m.GetInnerIP()); ip == nil || ip.To4() == nil {
		return GetNodeInfoRequestValidationError{
			field:  "InnerIP",
			reason: "value must be a valid IPv4 address",
		}
	}

	return nil
}

// GetNodeInfoRequestValidationError is the validation error returned by
// GetNodeInfoRequest.Validate if the designated constraints aren't met.
type GetNodeInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeInfoRequestValidationError) ErrorName() string {
	return "GetNodeInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNodeInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeInfoRequestValidationError{}

// Validate checks the field values on GetNodeInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNodeInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNodeInfoResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetNodeInfoResponseValidationError is the validation error returned by
// GetNodeInfoResponse.Validate if the designated constraints aren't met.
type GetNodeInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeInfoResponseValidationError) ErrorName() string {
	return "GetNodeInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNodeInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeInfoResponseValidationError{}

// Validate checks the field values on NodeConfig with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *NodeConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for InstanceType

	// no validation rules for CPU

	// no validation rules for Mem

	// no validation rules for GPU

	return nil
}

// NodeConfigValidationError is the validation error returned by
// NodeConfig.Validate if the designated constraints aren't met.
type NodeConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeConfigValidationError) ErrorName() string { return "NodeConfigValidationError" }

// Error satisfies the builtin error interface
func (e NodeConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeConfigValidationError{}

// Validate checks the field values on NodeInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *NodeInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NodeName

	// no validation rules for NodeType

	// no validation rules for NodeID

	// no validation rules for InnerIP

	// no validation rules for ClusterID

	// no validation rules for VPC

	// no validation rules for Region

	// no validation rules for DeviceID

	// no validation rules for Status

	if v, ok := interface{}(m.GetInstanceConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeInfoValidationError{
				field:  "InstanceConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetZoneInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeInfoValidationError{
				field:  "ZoneInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeInfoValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetNodeTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeInfoValidationError{
				field:  "NodeTemplate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NodeInfoValidationError is the validation error returned by
// NodeInfo.Validate if the designated constraints aren't met.
type NodeInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeInfoValidationError) ErrorName() string { return "NodeInfoValidationError" }

// Error satisfies the builtin error interface
func (e NodeInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeInfoValidationError{}

// Validate checks the field values on ListCommonClusterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCommonClusterReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ShowVCluster

	return nil
}

// ListCommonClusterReqValidationError is the validation error returned by
// ListCommonClusterReq.Validate if the designated constraints aren't met.
type ListCommonClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommonClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommonClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommonClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommonClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommonClusterReqValidationError) ErrorName() string {
	return "ListCommonClusterReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommonClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommonClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommonClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommonClusterReqValidationError{}

// Validate checks the field values on ListCommonClusterResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCommonClusterResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCommonClusterRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCommonClusterRespValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListCommonClusterRespValidationError is the validation error returned by
// ListCommonClusterResp.Validate if the designated constraints aren't met.
type ListCommonClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommonClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommonClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommonClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommonClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommonClusterRespValidationError) ErrorName() string {
	return "ListCommonClusterRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommonClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommonClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommonClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommonClusterRespValidationError{}

// Validate checks the field values on ListProjectClusterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProjectClusterReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetProjectID()) > 100 {
		return ListProjectClusterReqValidationError{
			field:  "ProjectID",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetRegion()) > 100 {
		return ListProjectClusterReqValidationError{
			field:  "Region",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetProvider()) > 32 {
		return ListProjectClusterReqValidationError{
			field:  "Provider",
			reason: "value length must be at most 32 runes",
		}
	}

	// no validation rules for Operator

	return nil
}

// ListProjectClusterReqValidationError is the validation error returned by
// ListProjectClusterReq.Validate if the designated constraints aren't met.
type ListProjectClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectClusterReqValidationError) ErrorName() string {
	return "ListProjectClusterReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectClusterReqValidationError{}

// Validate checks the field values on ListProjectClusterResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProjectClusterResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectClusterRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetClusterExtraInfo() {
		_ = val

		// no validation rules for ClusterExtraInfo[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectClusterRespValidationError{
					field:  fmt.Sprintf("ClusterExtraInfo[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProjectClusterRespValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListProjectClusterRespValidationError is the validation error returned by
// ListProjectClusterResp.Validate if the designated constraints aren't met.
type ListProjectClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectClusterRespValidationError) ErrorName() string {
	return "ListProjectClusterRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectClusterRespValidationError{}

// Validate checks the field values on ListClusterReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListClusterReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetClusterName()) > 100 {
		return ListClusterReqValidationError{
			field:  "ClusterName",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetProvider()) > 32 {
		return ListClusterReqValidationError{
			field:  "Provider",
			reason: "value length must be at most 32 runes",
		}
	}

	if utf8.RuneCountInString(m.GetRegion()) > 100 {
		return ListClusterReqValidationError{
			field:  "Region",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetVpcID()) > 32 {
		return ListClusterReqValidationError{
			field:  "VpcID",
			reason: "value length must be at most 32 runes",
		}
	}

	if utf8.RuneCountInString(m.GetProjectID()) > 100 {
		return ListClusterReqValidationError{
			field:  "ProjectID",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetBusinessID()) > 100 {
		return ListClusterReqValidationError{
			field:  "BusinessID",
			reason: "value length must be at most 100 runes",
		}
	}

	// no validation rules for Environment

	// no validation rules for EngineType

	// no validation rules for IsExclusive

	// no validation rules for ClusterType

	// no validation rules for FederationClusterID

	if _, ok := _ListClusterReq_Status_InLookup[m.GetStatus()]; !ok {
		return ListClusterReqValidationError{
			field:  "Status",
			reason: "value must be in list [CREATING RUNNING DELETING FALURE INITIALIZATION DELETED ]",
		}
	}

	if m.GetOffset() < 0 {
		return ListClusterReqValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetLimit() > 1000 {
		return ListClusterReqValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 1000",
		}
	}

	// no validation rules for Operator

	if utf8.RuneCountInString(m.GetSystemID()) > 100 {
		return ListClusterReqValidationError{
			field:  "SystemID",
			reason: "value length must be at most 100 runes",
		}
	}

	// no validation rules for ExtraClusterID

	// no validation rules for IsCommonCluster

	// no validation rules for ClusterID

	return nil
}

// ListClusterReqValidationError is the validation error returned by
// ListClusterReq.Validate if the designated constraints aren't met.
type ListClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClusterReqValidationError) ErrorName() string { return "ListClusterReqValidationError" }

// Error satisfies the builtin error interface
func (e ListClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClusterReqValidationError{}

var _ListClusterReq_Status_InLookup = map[string]struct{}{
	"CREATING":       {},
	"RUNNING":        {},
	"DELETING":       {},
	"FALURE":         {},
	"INITIALIZATION": {},
	"DELETED":        {},
	"":               {},
}

// Validate checks the field values on ListClusterResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListClusterResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListClusterRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetClusterExtraInfo() {
		_ = val

		// no validation rules for ClusterExtraInfo[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListClusterRespValidationError{
					field:  fmt.Sprintf("ClusterExtraInfo[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListClusterRespValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListClusterRespValidationError is the validation error returned by
// ListClusterResp.Validate if the designated constraints aren't met.
type ListClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClusterRespValidationError) ErrorName() string { return "ListClusterRespValidationError" }

// Error satisfies the builtin error interface
func (e ListClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClusterRespValidationError{}

// Validate checks the field values on ExtraInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ExtraInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CanDeleted

	// no validation rules for ProviderType

	// no validation rules for AutoScale

	return nil
}

// ExtraInfoValidationError is the validation error returned by
// ExtraInfo.Validate if the designated constraints aren't met.
type ExtraInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtraInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtraInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtraInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtraInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtraInfoValidationError) ErrorName() string { return "ExtraInfoValidationError" }

// Error satisfies the builtin error interface
func (e ExtraInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtraInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtraInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtraInfoValidationError{}

// Validate checks the field values on WebAnnotations with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WebAnnotations) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetPerms() {
		_ = val

		// no validation rules for Perms[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WebAnnotationsValidationError{
					field:  fmt.Sprintf("Perms[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// WebAnnotationsValidationError is the validation error returned by
// WebAnnotations.Validate if the designated constraints aren't met.
type WebAnnotationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebAnnotationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebAnnotationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebAnnotationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebAnnotationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebAnnotationsValidationError) ErrorName() string { return "WebAnnotationsValidationError" }

// Error satisfies the builtin error interface
func (e WebAnnotationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebAnnotations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebAnnotationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebAnnotationsValidationError{}

// Validate checks the field values on WebAnnotationsV2 with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *WebAnnotationsV2) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPerms()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WebAnnotationsV2ValidationError{
				field:  "Perms",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WebAnnotationsV2ValidationError is the validation error returned by
// WebAnnotationsV2.Validate if the designated constraints aren't met.
type WebAnnotationsV2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebAnnotationsV2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebAnnotationsV2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebAnnotationsV2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebAnnotationsV2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebAnnotationsV2ValidationError) ErrorName() string { return "WebAnnotationsV2ValidationError" }

// Error satisfies the builtin error interface
func (e WebAnnotationsV2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebAnnotationsV2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebAnnotationsV2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebAnnotationsV2ValidationError{}

// Validate checks the field values on ListNodesInClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNodesInClusterRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 1 || l > 100 {
		return ListNodesInClusterRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetRegion()) > 100 {
		return ListNodesInClusterRequestValidationError{
			field:  "Region",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetVpcID()) > 32 {
		return ListNodesInClusterRequestValidationError{
			field:  "VpcID",
			reason: "value length must be at most 32 runes",
		}
	}

	if utf8.RuneCountInString(m.GetNodeGroupID()) > 100 {
		return ListNodesInClusterRequestValidationError{
			field:  "NodeGroupID",
			reason: "value length must be at most 100 runes",
		}
	}

	// no validation rules for InstanceType

	// no validation rules for Status

	if m.GetOffset() < 0 {
		return ListNodesInClusterRequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetLimit() > 1000 {
		return ListNodesInClusterRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 1000",
		}
	}

	// no validation rules for ShowPwd

	return nil
}

// ListNodesInClusterRequestValidationError is the validation error returned by
// ListNodesInClusterRequest.Validate if the designated constraints aren't met.
type ListNodesInClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNodesInClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNodesInClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNodesInClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNodesInClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNodesInClusterRequestValidationError) ErrorName() string {
	return "ListNodesInClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNodesInClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNodesInClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNodesInClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNodesInClusterRequestValidationError{}

// Validate checks the field values on ListNodesInClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNodesInClusterResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNodesInClusterResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNodesInClusterResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListNodesInClusterResponseValidationError is the validation error returned
// by ListNodesInClusterResponse.Validate if the designated constraints aren't met.
type ListNodesInClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNodesInClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNodesInClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNodesInClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNodesInClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNodesInClusterResponseValidationError) ErrorName() string {
	return "ListNodesInClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNodesInClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNodesInClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNodesInClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNodesInClusterResponseValidationError{}

// Validate checks the field values on ClusterNode with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ClusterNode) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NodeID

	// no validation rules for InnerIP

	// no validation rules for InstanceType

	// no validation rules for CPU

	// no validation rules for Mem

	// no validation rules for GPU

	// no validation rules for Status

	// no validation rules for ZoneID

	// no validation rules for NodeGroupID

	// no validation rules for ClusterID

	// no validation rules for VPC

	// no validation rules for Region

	// no validation rules for Passwd

	// no validation rules for Zone

	// no validation rules for DeviceID

	// no validation rules for Labels

	for idx, item := range m.GetTaints() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterNodeValidationError{
					field:  fmt.Sprintf("Taints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UnSchedulable

	// no validation rules for NodeName

	// no validation rules for Agent

	// no validation rules for Idc

	// no validation rules for Rack

	// no validation rules for DeviceClass

	// no validation rules for InnerIPv6

	// no validation rules for NodeGroupName

	// no validation rules for BkCloudID

	// no validation rules for Annotations

	// no validation rules for ZoneName

	// no validation rules for TaskID

	return nil
}

// ClusterNodeValidationError is the validation error returned by
// ClusterNode.Validate if the designated constraints aren't met.
type ClusterNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterNodeValidationError) ErrorName() string { return "ClusterNodeValidationError" }

// Error satisfies the builtin error interface
func (e ClusterNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterNodeValidationError{}

// Validate checks the field values on ListMastersInClusterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMastersInClusterRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 1 || l > 100 {
		return ListMastersInClusterRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	return nil
}

// ListMastersInClusterRequestValidationError is the validation error returned
// by ListMastersInClusterRequest.Validate if the designated constraints
// aren't met.
type ListMastersInClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMastersInClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMastersInClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMastersInClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMastersInClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMastersInClusterRequestValidationError) ErrorName() string {
	return "ListMastersInClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMastersInClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMastersInClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMastersInClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMastersInClusterRequestValidationError{}

// Validate checks the field values on ListMastersInClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMastersInClusterResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMastersInClusterResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMastersInClusterResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListMastersInClusterResponseValidationError is the validation error returned
// by ListMastersInClusterResponse.Validate if the designated constraints
// aren't met.
type ListMastersInClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMastersInClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMastersInClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMastersInClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMastersInClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMastersInClusterResponseValidationError) ErrorName() string {
	return "ListMastersInClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMastersInClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMastersInClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMastersInClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMastersInClusterResponseValidationError{}

// Validate checks the field values on GetClusterCredentialReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetClusterCredentialReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetServerKey()); l < 1 || l > 100 {
		return GetClusterCredentialReqValidationError{
			field:  "ServerKey",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	return nil
}

// GetClusterCredentialReqValidationError is the validation error returned by
// GetClusterCredentialReq.Validate if the designated constraints aren't met.
type GetClusterCredentialReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterCredentialReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterCredentialReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterCredentialReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterCredentialReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterCredentialReqValidationError) ErrorName() string {
	return "GetClusterCredentialReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterCredentialReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterCredentialReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterCredentialReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterCredentialReqValidationError{}

// Validate checks the field values on GetClusterCredentialResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetClusterCredentialResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterCredentialRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetClusterCredentialRespValidationError is the validation error returned by
// GetClusterCredentialResp.Validate if the designated constraints aren't met.
type GetClusterCredentialRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterCredentialRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterCredentialRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterCredentialRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterCredentialRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterCredentialRespValidationError) ErrorName() string {
	return "GetClusterCredentialRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterCredentialRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterCredentialResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterCredentialRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterCredentialRespValidationError{}

// Validate checks the field values on UpdateClusterCredentialReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateClusterCredentialReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetServerKey()); l < 1 || l > 100 {
		return UpdateClusterCredentialReqValidationError{
			field:  "ServerKey",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 1 || l > 100 {
		return UpdateClusterCredentialReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetClientModule()); l < 1 || l > 100 {
		return UpdateClusterCredentialReqValidationError{
			field:  "ClientModule",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetServerAddress()); l < 1 || l > 2048 {
		return UpdateClusterCredentialReqValidationError{
			field:  "ServerAddress",
			reason: "value length must be between 1 and 2048 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetCaCertData()) > 4096 {
		return UpdateClusterCredentialReqValidationError{
			field:  "CaCertData",
			reason: "value length must be at most 4096 runes",
		}
	}

	if utf8.RuneCountInString(m.GetUserToken()) > 2048 {
		return UpdateClusterCredentialReqValidationError{
			field:  "UserToken",
			reason: "value length must be at most 2048 runes",
		}
	}

	if utf8.RuneCountInString(m.GetClusterDomain()) > 2048 {
		return UpdateClusterCredentialReqValidationError{
			field:  "ClusterDomain",
			reason: "value length must be at most 2048 runes",
		}
	}

	if utf8.RuneCountInString(m.GetClientCert()) > 4096 {
		return UpdateClusterCredentialReqValidationError{
			field:  "ClientCert",
			reason: "value length must be at most 4096 runes",
		}
	}

	if utf8.RuneCountInString(m.GetClientKey()) > 4096 {
		return UpdateClusterCredentialReqValidationError{
			field:  "ClientKey",
			reason: "value length must be at most 4096 runes",
		}
	}

	return nil
}

// UpdateClusterCredentialReqValidationError is the validation error returned
// by UpdateClusterCredentialReq.Validate if the designated constraints aren't met.
type UpdateClusterCredentialReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClusterCredentialReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClusterCredentialReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClusterCredentialReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClusterCredentialReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClusterCredentialReqValidationError) ErrorName() string {
	return "UpdateClusterCredentialReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClusterCredentialReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClusterCredentialReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClusterCredentialReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClusterCredentialReqValidationError{}

// Validate checks the field values on UpdateClusterCredentialResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateClusterCredentialResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// UpdateClusterCredentialRespValidationError is the validation error returned
// by UpdateClusterCredentialResp.Validate if the designated constraints
// aren't met.
type UpdateClusterCredentialRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClusterCredentialRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClusterCredentialRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClusterCredentialRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClusterCredentialRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClusterCredentialRespValidationError) ErrorName() string {
	return "UpdateClusterCredentialRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClusterCredentialRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClusterCredentialResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClusterCredentialRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClusterCredentialRespValidationError{}

// Validate checks the field values on DeleteClusterCredentialReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteClusterCredentialReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetServerKey()); l < 2 || l > 100 {
		return DeleteClusterCredentialReqValidationError{
			field:  "ServerKey",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	return nil
}

// DeleteClusterCredentialReqValidationError is the validation error returned
// by DeleteClusterCredentialReq.Validate if the designated constraints aren't met.
type DeleteClusterCredentialReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteClusterCredentialReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteClusterCredentialReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteClusterCredentialReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteClusterCredentialReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteClusterCredentialReqValidationError) ErrorName() string {
	return "DeleteClusterCredentialReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteClusterCredentialReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteClusterCredentialReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteClusterCredentialReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteClusterCredentialReqValidationError{}

// Validate checks the field values on DeleteClusterCredentialResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteClusterCredentialResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// DeleteClusterCredentialRespValidationError is the validation error returned
// by DeleteClusterCredentialResp.Validate if the designated constraints
// aren't met.
type DeleteClusterCredentialRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteClusterCredentialRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteClusterCredentialRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteClusterCredentialRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteClusterCredentialRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteClusterCredentialRespValidationError) ErrorName() string {
	return "DeleteClusterCredentialRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteClusterCredentialRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteClusterCredentialResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteClusterCredentialRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteClusterCredentialRespValidationError{}

// Validate checks the field values on ListClusterCredentialReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListClusterCredentialReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetServerKey()) > 100 {
		return ListClusterCredentialReqValidationError{
			field:  "ServerKey",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetClusterID()) > 100 {
		return ListClusterCredentialReqValidationError{
			field:  "ClusterID",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetClientMode()) > 100 {
		return ListClusterCredentialReqValidationError{
			field:  "ClientMode",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetConnectMode()) > 100 {
		return ListClusterCredentialReqValidationError{
			field:  "ConnectMode",
			reason: "value length must be at most 100 runes",
		}
	}

	if m.GetOffset() < 0 {
		return ListClusterCredentialReqValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetLimit() > 1000 {
		return ListClusterCredentialReqValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 1000",
		}
	}

	return nil
}

// ListClusterCredentialReqValidationError is the validation error returned by
// ListClusterCredentialReq.Validate if the designated constraints aren't met.
type ListClusterCredentialReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClusterCredentialReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClusterCredentialReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClusterCredentialReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClusterCredentialReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClusterCredentialReqValidationError) ErrorName() string {
	return "ListClusterCredentialReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListClusterCredentialReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClusterCredentialReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClusterCredentialReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClusterCredentialReqValidationError{}

// Validate checks the field values on ListClusterCredentialResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListClusterCredentialResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListClusterCredentialRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListClusterCredentialRespValidationError is the validation error returned by
// ListClusterCredentialResp.Validate if the designated constraints aren't met.
type ListClusterCredentialRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClusterCredentialRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClusterCredentialRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClusterCredentialRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClusterCredentialRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClusterCredentialRespValidationError) ErrorName() string {
	return "ListClusterCredentialRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListClusterCredentialRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClusterCredentialResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClusterCredentialRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClusterCredentialRespValidationError{}

// Validate checks the field values on InitFederationClusterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InitFederationClusterReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// InitFederationClusterReqValidationError is the validation error returned by
// InitFederationClusterReq.Validate if the designated constraints aren't met.
type InitFederationClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitFederationClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitFederationClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitFederationClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitFederationClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitFederationClusterReqValidationError) ErrorName() string {
	return "InitFederationClusterReqValidationError"
}

// Error satisfies the builtin error interface
func (e InitFederationClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitFederationClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitFederationClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitFederationClusterReqValidationError{}

// Validate checks the field values on InitFederationClusterResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InitFederationClusterResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// InitFederationClusterRespValidationError is the validation error returned by
// InitFederationClusterResp.Validate if the designated constraints aren't met.
type InitFederationClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitFederationClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitFederationClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitFederationClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitFederationClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitFederationClusterRespValidationError) ErrorName() string {
	return "InitFederationClusterRespValidationError"
}

// Error satisfies the builtin error interface
func (e InitFederationClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitFederationClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitFederationClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitFederationClusterRespValidationError{}

// Validate checks the field values on AddFederatedClusterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddFederatedClusterReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FederationClusterID

	// no validation rules for ClusterID

	return nil
}

// AddFederatedClusterReqValidationError is the validation error returned by
// AddFederatedClusterReq.Validate if the designated constraints aren't met.
type AddFederatedClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFederatedClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFederatedClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFederatedClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFederatedClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFederatedClusterReqValidationError) ErrorName() string {
	return "AddFederatedClusterReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddFederatedClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFederatedClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFederatedClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFederatedClusterReqValidationError{}

// Validate checks the field values on AddFederatedClusterResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddFederatedClusterResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// AddFederatedClusterRespValidationError is the validation error returned by
// AddFederatedClusterResp.Validate if the designated constraints aren't met.
type AddFederatedClusterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFederatedClusterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFederatedClusterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFederatedClusterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFederatedClusterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFederatedClusterRespValidationError) ErrorName() string {
	return "AddFederatedClusterRespValidationError"
}

// Error satisfies the builtin error interface
func (e AddFederatedClusterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFederatedClusterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFederatedClusterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFederatedClusterRespValidationError{}

// Validate checks the field values on CreateCloudRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCloudRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetCloudID()); l < 2 || l > 20 {
		return CreateCloudRequestValidationError{
			field:  "CloudID",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	if !_CreateCloudRequest_CloudID_Pattern.MatchString(m.GetCloudID()) {
		return CreateCloudRequestValidationError{
			field:  "CloudID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 64 {
		return CreateCloudRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 64 runes, inclusive",
		}
	}

	// no validation rules for Editable

	for key, val := range m.GetOpsPlugins() {
		_ = val

		// no validation rules for OpsPlugins[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCloudRequestValidationError{
					field:  fmt.Sprintf("OpsPlugins[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetExtraPlugins() {
		_ = val

		// no validation rules for ExtraPlugins[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCloudRequestValidationError{
					field:  fmt.Sprintf("ExtraPlugins[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetCloudCredential()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudRequestValidationError{
				field:  "CloudCredential",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOsManagement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudRequestValidationError{
				field:  "OsManagement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetClusterManagement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudRequestValidationError{
				field:  "ClusterManagement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetNodeGroupManagement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudRequestValidationError{
				field:  "NodeGroupManagement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetCreator()); l < 2 || l > 20 {
		return CreateCloudRequestValidationError{
			field:  "Creator",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	if !_CreateCloudRequest_Creator_Pattern.MatchString(m.GetCreator()) {
		return CreateCloudRequestValidationError{
			field:  "Creator",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for CloudProvider

	// no validation rules for Config

	// no validation rules for Description

	// no validation rules for EngineType

	// no validation rules for Enable

	if v, ok := interface{}(m.GetNetworkInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudRequestValidationError{
				field:  "NetworkInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetConfInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudRequestValidationError{
				field:  "ConfInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PlatformInfo

	return nil
}

// CreateCloudRequestValidationError is the validation error returned by
// CreateCloudRequest.Validate if the designated constraints aren't met.
type CreateCloudRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudRequestValidationError) ErrorName() string {
	return "CreateCloudRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudRequestValidationError{}

var _CreateCloudRequest_CloudID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _CreateCloudRequest_Creator_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on CreateCloudResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCloudResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// CreateCloudResponseValidationError is the validation error returned by
// CreateCloudResponse.Validate if the designated constraints aren't met.
type CreateCloudResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResponseValidationError) ErrorName() string {
	return "CreateCloudResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResponseValidationError{}

// Validate checks the field values on UpdateCloudRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCloudRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCloudID()) > 1024 {
		return UpdateCloudRequestValidationError{
			field:  "CloudID",
			reason: "value length must be at most 1024 runes",
		}
	}

	if utf8.RuneCountInString(m.GetName()) > 1024 {
		return UpdateCloudRequestValidationError{
			field:  "Name",
			reason: "value length must be at most 1024 runes",
		}
	}

	// no validation rules for Editable

	for key, val := range m.GetOpsPlugins() {
		_ = val

		// no validation rules for OpsPlugins[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateCloudRequestValidationError{
					field:  fmt.Sprintf("OpsPlugins[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetExtraPlugins() {
		_ = val

		// no validation rules for ExtraPlugins[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateCloudRequestValidationError{
					field:  fmt.Sprintf("ExtraPlugins[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetCloudCredential()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCloudRequestValidationError{
				field:  "CloudCredential",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOsManagement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCloudRequestValidationError{
				field:  "OsManagement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetClusterManagement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCloudRequestValidationError{
				field:  "ClusterManagement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetNodeGroupManagement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCloudRequestValidationError{
				field:  "NodeGroupManagement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetUpdater()); l < 2 || l > 1024 {
		return UpdateCloudRequestValidationError{
			field:  "Updater",
			reason: "value length must be between 2 and 1024 runes, inclusive",
		}
	}

	if !_UpdateCloudRequest_Updater_Pattern.MatchString(m.GetUpdater()) {
		return UpdateCloudRequestValidationError{
			field:  "Updater",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z]+$\"",
		}
	}

	// no validation rules for CloudProvider

	// no validation rules for Config

	// no validation rules for Description

	// no validation rules for EngineType

	// no validation rules for Enable

	if v, ok := interface{}(m.GetNetworkInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCloudRequestValidationError{
				field:  "NetworkInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetConfInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCloudRequestValidationError{
				field:  "ConfInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PlatformInfo

	return nil
}

// UpdateCloudRequestValidationError is the validation error returned by
// UpdateCloudRequest.Validate if the designated constraints aren't met.
type UpdateCloudRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCloudRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCloudRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCloudRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCloudRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCloudRequestValidationError) ErrorName() string {
	return "UpdateCloudRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCloudRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCloudRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCloudRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCloudRequestValidationError{}

var _UpdateCloudRequest_Updater_Pattern = regexp.MustCompile("^[0-9a-zA-Z]+$")

// Validate checks the field values on UpdateCloudResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCloudResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCloudResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateCloudResponseValidationError is the validation error returned by
// UpdateCloudResponse.Validate if the designated constraints aren't met.
type UpdateCloudResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCloudResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCloudResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCloudResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCloudResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCloudResponseValidationError) ErrorName() string {
	return "UpdateCloudResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCloudResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCloudResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCloudResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCloudResponseValidationError{}

// Validate checks the field values on DeleteCloudRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCloudRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetCloudID()); l < 2 || l > 20 {
		return DeleteCloudRequestValidationError{
			field:  "CloudID",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	if !_DeleteCloudRequest_CloudID_Pattern.MatchString(m.GetCloudID()) {
		return DeleteCloudRequestValidationError{
			field:  "CloudID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for IsForce

	return nil
}

// DeleteCloudRequestValidationError is the validation error returned by
// DeleteCloudRequest.Validate if the designated constraints aren't met.
type DeleteCloudRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloudRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloudRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloudRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloudRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloudRequestValidationError) ErrorName() string {
	return "DeleteCloudRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloudRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloudRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloudRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloudRequestValidationError{}

var _DeleteCloudRequest_CloudID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on DeleteCloudResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCloudResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteCloudResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteCloudResponseValidationError is the validation error returned by
// DeleteCloudResponse.Validate if the designated constraints aren't met.
type DeleteCloudResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloudResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloudResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloudResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloudResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloudResponseValidationError) ErrorName() string {
	return "DeleteCloudResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloudResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloudResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloudResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloudResponseValidationError{}

// Validate checks the field values on GetCloudRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetCloudRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetCloudID()); l < 2 || l > 20 {
		return GetCloudRequestValidationError{
			field:  "CloudID",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	if !_GetCloudRequest_CloudID_Pattern.MatchString(m.GetCloudID()) {
		return GetCloudRequestValidationError{
			field:  "CloudID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	return nil
}

// GetCloudRequestValidationError is the validation error returned by
// GetCloudRequest.Validate if the designated constraints aren't met.
type GetCloudRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCloudRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCloudRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCloudRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCloudRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCloudRequestValidationError) ErrorName() string { return "GetCloudRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCloudRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCloudRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCloudRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCloudRequestValidationError{}

var _GetCloudRequest_CloudID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on GetCloudResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetCloudResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCloudResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCloudResponseValidationError is the validation error returned by
// GetCloudResponse.Validate if the designated constraints aren't met.
type GetCloudResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCloudResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCloudResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCloudResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCloudResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCloudResponseValidationError) ErrorName() string { return "GetCloudResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetCloudResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCloudResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCloudResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCloudResponseValidationError{}

// Validate checks the field values on ListCloudRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListCloudRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCloudID()) > 20 {
		return ListCloudRequestValidationError{
			field:  "CloudID",
			reason: "value length must be at most 20 runes",
		}
	}

	// no validation rules for Name

	// no validation rules for Editable

	// no validation rules for Creator

	// no validation rules for Updater

	// no validation rules for CloudProvider

	return nil
}

// ListCloudRequestValidationError is the validation error returned by
// ListCloudRequest.Validate if the designated constraints aren't met.
type ListCloudRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudRequestValidationError) ErrorName() string { return "ListCloudRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListCloudRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudRequestValidationError{}

// Validate checks the field values on ListCloudResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListCloudResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCloudResponseValidationError is the validation error returned by
// ListCloudResponse.Validate if the designated constraints aren't met.
type ListCloudResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResponseValidationError) ErrorName() string {
	return "ListCloudResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResponseValidationError{}

// Validate checks the field values on CreateNodeGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateNodeGroupRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		return CreateNodeGroupRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 2 || l > 100 {
		return CreateNodeGroupRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		return CreateNodeGroupRequestValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
	}

	if !_CreateNodeGroupRequest_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return CreateNodeGroupRequestValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetRegion()); l < 1 || l > 32 {
		return CreateNodeGroupRequestValidationError{
			field:  "Region",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
	}

	if !_CreateNodeGroupRequest_Region_Pattern.MatchString(m.GetRegion()) {
		return CreateNodeGroupRequestValidationError{
			field:  "Region",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for EnableAutoscale

	if m.GetAutoScaling() == nil {
		return CreateNodeGroupRequestValidationError{
			field:  "AutoScaling",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAutoScaling()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNodeGroupRequestValidationError{
				field:  "AutoScaling",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetLaunchTemplate() == nil {
		return CreateNodeGroupRequestValidationError{
			field:  "LaunchTemplate",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetLaunchTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNodeGroupRequestValidationError{
				field:  "LaunchTemplate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	// no validation rules for Taints

	// no validation rules for NodeOS

	if l := utf8.RuneCountInString(m.GetCreator()); l < 2 || l > 20 {
		return CreateNodeGroupRequestValidationError{
			field:  "Creator",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	if !_CreateNodeGroupRequest_Creator_Pattern.MatchString(m.GetCreator()) {
		return CreateNodeGroupRequestValidationError{
			field:  "Creator",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for Provider

	// no validation rules for ConsumerID

	if v, ok := interface{}(m.GetNodeTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNodeGroupRequestValidationError{
				field:  "NodeTemplate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Tags

	// no validation rules for NodeGroupType

	// no validation rules for BkCloudID

	// no validation rules for CloudAreaName

	if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNodeGroupRequestValidationError{
				field:  "Extra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OnlyCreateInfo

	return nil
}

// CreateNodeGroupRequestValidationError is the validation error returned by
// CreateNodeGroupRequest.Validate if the designated constraints aren't met.
type CreateNodeGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNodeGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNodeGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNodeGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNodeGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNodeGroupRequestValidationError) ErrorName() string {
	return "CreateNodeGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNodeGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNodeGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNodeGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNodeGroupRequestValidationError{}

var _CreateNodeGroupRequest_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _CreateNodeGroupRequest_Region_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _CreateNodeGroupRequest_Creator_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on GroupExtraInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GroupExtraInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Provider

	// no validation rules for PoolID

	return nil
}

// GroupExtraInfoValidationError is the validation error returned by
// GroupExtraInfo.Validate if the designated constraints aren't met.
type GroupExtraInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupExtraInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupExtraInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupExtraInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupExtraInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupExtraInfoValidationError) ErrorName() string { return "GroupExtraInfoValidationError" }

// Error satisfies the builtin error interface
func (e GroupExtraInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupExtraInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupExtraInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupExtraInfoValidationError{}

// Validate checks the field values on CreateNodeGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateNodeGroupResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNodeGroupResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNodeGroupResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateNodeGroupResponseValidationError is the validation error returned by
// CreateNodeGroupResponse.Validate if the designated constraints aren't met.
type CreateNodeGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNodeGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNodeGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNodeGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNodeGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNodeGroupResponseValidationError) ErrorName() string {
	return "CreateNodeGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNodeGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNodeGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNodeGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNodeGroupResponseValidationError{}

// Validate checks the field values on CreateNodeGroupResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateNodeGroupResponseData) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetNodeGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNodeGroupResponseDataValidationError{
				field:  "NodeGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNodeGroupResponseDataValidationError{
				field:  "Task",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateNodeGroupResponseDataValidationError is the validation error returned
// by CreateNodeGroupResponseData.Validate if the designated constraints
// aren't met.
type CreateNodeGroupResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNodeGroupResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNodeGroupResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNodeGroupResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNodeGroupResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNodeGroupResponseDataValidationError) ErrorName() string {
	return "CreateNodeGroupResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNodeGroupResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNodeGroupResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNodeGroupResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNodeGroupResponseDataValidationError{}

// Validate checks the field values on UpdateNodeGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNodeGroupRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetNodeGroupID()) > 20 {
		return UpdateNodeGroupRequestValidationError{
			field:  "NodeGroupID",
			reason: "value length must be at most 20 runes",
		}
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 2 || l > 100 {
		return UpdateNodeGroupRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		return UpdateNodeGroupRequestValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
	}

	if !_UpdateNodeGroupRequest_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return UpdateNodeGroupRequestValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for Name

	// no validation rules for Region

	if v, ok := interface{}(m.GetEnableAutoscale()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeGroupRequestValidationError{
				field:  "EnableAutoscale",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAutoScaling()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeGroupRequestValidationError{
				field:  "AutoScaling",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLaunchTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeGroupRequestValidationError{
				field:  "LaunchTemplate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetNodeTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeGroupRequestValidationError{
				field:  "NodeTemplate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	// no validation rules for Taints

	// no validation rules for Tags

	// no validation rules for NodeOS

	if l := utf8.RuneCountInString(m.GetUpdater()); l < 2 || l > 20 {
		return UpdateNodeGroupRequestValidationError{
			field:  "Updater",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	if !_UpdateNodeGroupRequest_Updater_Pattern.MatchString(m.GetUpdater()) {
		return UpdateNodeGroupRequestValidationError{
			field:  "Updater",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for Provider

	// no validation rules for ConsumerID

	// no validation rules for Desc

	if v, ok := interface{}(m.GetBkCloudID()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeGroupRequestValidationError{
				field:  "BkCloudID",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCloudAreaName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeGroupRequestValidationError{
				field:  "CloudAreaName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OnlyUpdateInfo

	return nil
}

// UpdateNodeGroupRequestValidationError is the validation error returned by
// UpdateNodeGroupRequest.Validate if the designated constraints aren't met.
type UpdateNodeGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNodeGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNodeGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNodeGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNodeGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNodeGroupRequestValidationError) ErrorName() string {
	return "UpdateNodeGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNodeGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNodeGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNodeGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNodeGroupRequestValidationError{}

var _UpdateNodeGroupRequest_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _UpdateNodeGroupRequest_Updater_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on UpdateNodeGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNodeGroupResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeGroupResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeGroupResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateNodeGroupResponseValidationError is the validation error returned by
// UpdateNodeGroupResponse.Validate if the designated constraints aren't met.
type UpdateNodeGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNodeGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNodeGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNodeGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNodeGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNodeGroupResponseValidationError) ErrorName() string {
	return "UpdateNodeGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNodeGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNodeGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNodeGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNodeGroupResponseValidationError{}

// Validate checks the field values on DeleteNodeGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteNodeGroupRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetNodeGroupID()); l < 2 || l > 20 {
		return DeleteNodeGroupRequestValidationError{
			field:  "NodeGroupID",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	if !_DeleteNodeGroupRequest_NodeGroupID_Pattern.MatchString(m.GetNodeGroupID()) {
		return DeleteNodeGroupRequestValidationError{
			field:  "NodeGroupID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for IsForce

	// no validation rules for ReserveNodesInCluster

	// no validation rules for KeepNodesInstance

	if l := utf8.RuneCountInString(m.GetOperator()); l < 2 || l > 100 {
		return DeleteNodeGroupRequestValidationError{
			field:  "Operator",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	// no validation rules for OnlyDeleteInfo

	return nil
}

// DeleteNodeGroupRequestValidationError is the validation error returned by
// DeleteNodeGroupRequest.Validate if the designated constraints aren't met.
type DeleteNodeGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNodeGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNodeGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNodeGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNodeGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNodeGroupRequestValidationError) ErrorName() string {
	return "DeleteNodeGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNodeGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNodeGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNodeGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNodeGroupRequestValidationError{}

var _DeleteNodeGroupRequest_NodeGroupID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on DeleteNodeGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteNodeGroupResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteNodeGroupResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteNodeGroupResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteNodeGroupResponseValidationError is the validation error returned by
// DeleteNodeGroupResponse.Validate if the designated constraints aren't met.
type DeleteNodeGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNodeGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNodeGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNodeGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNodeGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNodeGroupResponseValidationError) ErrorName() string {
	return "DeleteNodeGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNodeGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNodeGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNodeGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNodeGroupResponseValidationError{}

// Validate checks the field values on DeleteNodeGroupResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteNodeGroupResponseData) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetNodeGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteNodeGroupResponseDataValidationError{
				field:  "NodeGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteNodeGroupResponseDataValidationError{
				field:  "Task",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteNodeGroupResponseDataValidationError is the validation error returned
// by DeleteNodeGroupResponseData.Validate if the designated constraints
// aren't met.
type DeleteNodeGroupResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNodeGroupResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNodeGroupResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNodeGroupResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNodeGroupResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNodeGroupResponseDataValidationError) ErrorName() string {
	return "DeleteNodeGroupResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNodeGroupResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNodeGroupResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNodeGroupResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNodeGroupResponseDataValidationError{}

// Validate checks the field values on GetNodeGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNodeGroupRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetNodeGroupID()); l < 2 || l > 20 {
		return GetNodeGroupRequestValidationError{
			field:  "NodeGroupID",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	if !_GetNodeGroupRequest_NodeGroupID_Pattern.MatchString(m.GetNodeGroupID()) {
		return GetNodeGroupRequestValidationError{
			field:  "NodeGroupID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	return nil
}

// GetNodeGroupRequestValidationError is the validation error returned by
// GetNodeGroupRequest.Validate if the designated constraints aren't met.
type GetNodeGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeGroupRequestValidationError) ErrorName() string {
	return "GetNodeGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNodeGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeGroupRequestValidationError{}

var _GetNodeGroupRequest_NodeGroupID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on GetNodeGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNodeGroupResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNodeGroupResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNodeGroupResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetNodeGroupResponseValidationError is the validation error returned by
// GetNodeGroupResponse.Validate if the designated constraints aren't met.
type GetNodeGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeGroupResponseValidationError) ErrorName() string {
	return "GetNodeGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNodeGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeGroupResponseValidationError{}

// Validate checks the field values on ListClusterNodeGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListClusterNodeGroupRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 2 || l > 100 {
		return ListClusterNodeGroupRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		return ListClusterNodeGroupRequestValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
	}

	if !_ListClusterNodeGroupRequest_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return ListClusterNodeGroupRequestValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for EnableFilter

	return nil
}

// ListClusterNodeGroupRequestValidationError is the validation error returned
// by ListClusterNodeGroupRequest.Validate if the designated constraints
// aren't met.
type ListClusterNodeGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClusterNodeGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClusterNodeGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClusterNodeGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClusterNodeGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClusterNodeGroupRequestValidationError) ErrorName() string {
	return "ListClusterNodeGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListClusterNodeGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClusterNodeGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClusterNodeGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClusterNodeGroupRequestValidationError{}

var _ListClusterNodeGroupRequest_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on ListClusterNodeGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListClusterNodeGroupResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListClusterNodeGroupResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListClusterNodeGroupResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListClusterNodeGroupResponseValidationError is the validation error returned
// by ListClusterNodeGroupResponse.Validate if the designated constraints
// aren't met.
type ListClusterNodeGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClusterNodeGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClusterNodeGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClusterNodeGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClusterNodeGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClusterNodeGroupResponseValidationError) ErrorName() string {
	return "ListClusterNodeGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListClusterNodeGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClusterNodeGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClusterNodeGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClusterNodeGroupResponseValidationError{}

// Validate checks the field values on ListNodeGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNodeGroupRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for ClusterID

	// no validation rules for Region

	// no validation rules for ProjectID

	return nil
}

// ListNodeGroupRequestValidationError is the validation error returned by
// ListNodeGroupRequest.Validate if the designated constraints aren't met.
type ListNodeGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNodeGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNodeGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNodeGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNodeGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNodeGroupRequestValidationError) ErrorName() string {
	return "ListNodeGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNodeGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNodeGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNodeGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNodeGroupRequestValidationError{}

// Validate checks the field values on ListNodeGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNodeGroupResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNodeGroupResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListNodeGroupResponseValidationError is the validation error returned by
// ListNodeGroupResponse.Validate if the designated constraints aren't met.
type ListNodeGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNodeGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNodeGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNodeGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNodeGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNodeGroupResponseValidationError) ErrorName() string {
	return "ListNodeGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNodeGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNodeGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNodeGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNodeGroupResponseValidationError{}

// Validate checks the field values on AddNodesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddNodesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 1 || l > 100 {
		return AddNodesRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		return AddNodesRequestValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
	}

	if !_AddNodesRequest_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return AddNodesRequestValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if len(m.GetNodes()) < 1 {
		return AddNodesRequestValidationError{
			field:  "Nodes",
			reason: "value must contain at least 1 item(s)",
		}
	}

	_AddNodesRequest_Nodes_Unique := make(map[string]struct{}, len(m.GetNodes()))

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if _, exists := _AddNodesRequest_Nodes_Unique[item]; exists {
			return AddNodesRequestValidationError{
				field:  fmt.Sprintf("Nodes[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_AddNodesRequest_Nodes_Unique[item] = struct{}{}
		}

		// no validation rules for Nodes[idx]
	}

	// no validation rules for InitLoginPassword

	// no validation rules for NodeGroupID

	// no validation rules for OnlyCreateInfo

	if l := utf8.RuneCountInString(m.GetOperator()); l < 2 || l > 20 {
		return AddNodesRequestValidationError{
			field:  "Operator",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	if !_AddNodesRequest_Operator_Pattern.MatchString(m.GetOperator()) {
		return AddNodesRequestValidationError{
			field:  "Operator",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for NodeTemplateID

	// no validation rules for IsExternalNode

	return nil
}

// AddNodesRequestValidationError is the validation error returned by
// AddNodesRequest.Validate if the designated constraints aren't met.
type AddNodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNodesRequestValidationError) ErrorName() string { return "AddNodesRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddNodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNodesRequestValidationError{}

var _AddNodesRequest_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _AddNodesRequest_Operator_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on AddNodesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddNodesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddNodesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddNodesResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddNodesResponseValidationError is the validation error returned by
// AddNodesResponse.Validate if the designated constraints aren't met.
type AddNodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNodesResponseValidationError) ErrorName() string { return "AddNodesResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddNodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNodesResponseValidationError{}

// Validate checks the field values on BatchDeleteClusterNodesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BatchDeleteClusterNodesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 1 || l > 100 {
		return BatchDeleteClusterNodesRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		return BatchDeleteClusterNodesRequestValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
	}

	if !_BatchDeleteClusterNodesRequest_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return BatchDeleteClusterNodesRequestValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for NodeIPs

	// no validation rules for VirtualNodeIDs

	if l := utf8.RuneCountInString(m.GetOperator()); l < 2 || l > 20 {
		return BatchDeleteClusterNodesRequestValidationError{
			field:  "Operator",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	if !_BatchDeleteClusterNodesRequest_Operator_Pattern.MatchString(m.GetOperator()) {
		return BatchDeleteClusterNodesRequestValidationError{
			field:  "Operator",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	return nil
}

// BatchDeleteClusterNodesRequestValidationError is the validation error
// returned by BatchDeleteClusterNodesRequest.Validate if the designated
// constraints aren't met.
type BatchDeleteClusterNodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchDeleteClusterNodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchDeleteClusterNodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchDeleteClusterNodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchDeleteClusterNodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchDeleteClusterNodesRequestValidationError) ErrorName() string {
	return "BatchDeleteClusterNodesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchDeleteClusterNodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchDeleteClusterNodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchDeleteClusterNodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchDeleteClusterNodesRequestValidationError{}

var _BatchDeleteClusterNodesRequest_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _BatchDeleteClusterNodesRequest_Operator_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on BatchDeleteClusterNodesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BatchDeleteClusterNodesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchDeleteClusterNodesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BatchDeleteClusterNodesResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BatchDeleteClusterNodesResponseValidationError is the validation error
// returned by BatchDeleteClusterNodesResponse.Validate if the designated
// constraints aren't met.
type BatchDeleteClusterNodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchDeleteClusterNodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchDeleteClusterNodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchDeleteClusterNodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchDeleteClusterNodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchDeleteClusterNodesResponseValidationError) ErrorName() string {
	return "BatchDeleteClusterNodesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchDeleteClusterNodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchDeleteClusterNodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchDeleteClusterNodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchDeleteClusterNodesResponseValidationError{}

// Validate checks the field values on BatchNodesStatus with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BatchNodesStatus) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	// no validation rules for Message

	// no validation rules for TaskID

	// no validation rules for NodeGroupID

	// no validation rules for NodeGroupType

	return nil
}

// BatchNodesStatusValidationError is the validation error returned by
// BatchNodesStatus.Validate if the designated constraints aren't met.
type BatchNodesStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchNodesStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchNodesStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchNodesStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchNodesStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchNodesStatusValidationError) ErrorName() string { return "BatchNodesStatusValidationError" }

// Error satisfies the builtin error interface
func (e BatchNodesStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchNodesStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchNodesStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchNodesStatusValidationError{}

// Validate checks the field values on DeleteNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteNodesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 1 || l > 100 {
		return DeleteNodesRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		return DeleteNodesRequestValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
	}

	if !_DeleteNodesRequest_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return DeleteNodesRequestValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if utf8.RuneCountInString(m.GetNodes()) < 1 {
		return DeleteNodesRequestValidationError{
			field:  "Nodes",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for DeleteMode

	// no validation rules for IsForce

	if l := utf8.RuneCountInString(m.GetOperator()); l < 2 || l > 20 {
		return DeleteNodesRequestValidationError{
			field:  "Operator",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	if !_DeleteNodesRequest_Operator_Pattern.MatchString(m.GetOperator()) {
		return DeleteNodesRequestValidationError{
			field:  "Operator",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for OnlyDeleteInfo

	// no validation rules for NodeTemplateID

	// no validation rules for NodeGroupID

	// no validation rules for IsExternalNode

	return nil
}

// DeleteNodesRequestValidationError is the validation error returned by
// DeleteNodesRequest.Validate if the designated constraints aren't met.
type DeleteNodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNodesRequestValidationError) ErrorName() string {
	return "DeleteNodesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNodesRequestValidationError{}

var _DeleteNodesRequest_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _DeleteNodesRequest_Operator_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on DeleteNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteNodesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteNodesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteNodesResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteNodesResponseValidationError is the validation error returned by
// DeleteNodesResponse.Validate if the designated constraints aren't met.
type DeleteNodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNodesResponseValidationError) ErrorName() string {
	return "DeleteNodesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNodesResponseValidationError{}

// Validate checks the field values on MoveNodesToGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MoveNodesToGroupRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 5 || l > 100 {
		return MoveNodesToGroupRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 5 and 100 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		return MoveNodesToGroupRequestValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
	}

	if !_MoveNodesToGroupRequest_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return MoveNodesToGroupRequestValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if l := len(m.GetNodes()); l < 1 || l > 100 {
		return MoveNodesToGroupRequestValidationError{
			field:  "Nodes",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
	}

	_MoveNodesToGroupRequest_Nodes_Unique := make(map[string]struct{}, len(m.GetNodes()))

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if _, exists := _MoveNodesToGroupRequest_Nodes_Unique[item]; exists {
			return MoveNodesToGroupRequestValidationError{
				field:  fmt.Sprintf("Nodes[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_MoveNodesToGroupRequest_Nodes_Unique[item] = struct{}{}
		}

		// no validation rules for Nodes[idx]
	}

	if l := utf8.RuneCountInString(m.GetNodeGroupID()); l < 2 || l > 20 {
		return MoveNodesToGroupRequestValidationError{
			field:  "NodeGroupID",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	if !_MoveNodesToGroupRequest_NodeGroupID_Pattern.MatchString(m.GetNodeGroupID()) {
		return MoveNodesToGroupRequestValidationError{
			field:  "NodeGroupID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	return nil
}

// MoveNodesToGroupRequestValidationError is the validation error returned by
// MoveNodesToGroupRequest.Validate if the designated constraints aren't met.
type MoveNodesToGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoveNodesToGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoveNodesToGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoveNodesToGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoveNodesToGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoveNodesToGroupRequestValidationError) ErrorName() string {
	return "MoveNodesToGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MoveNodesToGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoveNodesToGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoveNodesToGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoveNodesToGroupRequestValidationError{}

var _MoveNodesToGroupRequest_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _MoveNodesToGroupRequest_NodeGroupID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on MoveNodesToGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MoveNodesToGroupResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MoveNodesToGroupResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MoveNodesToGroupResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MoveNodesToGroupResponseValidationError is the validation error returned by
// MoveNodesToGroupResponse.Validate if the designated constraints aren't met.
type MoveNodesToGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoveNodesToGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoveNodesToGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoveNodesToGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoveNodesToGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoveNodesToGroupResponseValidationError) ErrorName() string {
	return "MoveNodesToGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MoveNodesToGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoveNodesToGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoveNodesToGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoveNodesToGroupResponseValidationError{}

// Validate checks the field values on RemoveNodesFromGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveNodesFromGroupRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 5 || l > 100 {
		return RemoveNodesFromGroupRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 5 and 100 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		return RemoveNodesFromGroupRequestValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
	}

	if !_RemoveNodesFromGroupRequest_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return RemoveNodesFromGroupRequestValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if l := len(m.GetNodes()); l < 1 || l > 100 {
		return RemoveNodesFromGroupRequestValidationError{
			field:  "Nodes",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
	}

	_RemoveNodesFromGroupRequest_Nodes_Unique := make(map[string]struct{}, len(m.GetNodes()))

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if _, exists := _RemoveNodesFromGroupRequest_Nodes_Unique[item]; exists {
			return RemoveNodesFromGroupRequestValidationError{
				field:  fmt.Sprintf("Nodes[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_RemoveNodesFromGroupRequest_Nodes_Unique[item] = struct{}{}
		}

		// no validation rules for Nodes[idx]
	}

	if l := utf8.RuneCountInString(m.GetNodeGroupID()); l < 2 || l > 20 {
		return RemoveNodesFromGroupRequestValidationError{
			field:  "NodeGroupID",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	if !_RemoveNodesFromGroupRequest_NodeGroupID_Pattern.MatchString(m.GetNodeGroupID()) {
		return RemoveNodesFromGroupRequestValidationError{
			field:  "NodeGroupID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	return nil
}

// RemoveNodesFromGroupRequestValidationError is the validation error returned
// by RemoveNodesFromGroupRequest.Validate if the designated constraints
// aren't met.
type RemoveNodesFromGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveNodesFromGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveNodesFromGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveNodesFromGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveNodesFromGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveNodesFromGroupRequestValidationError) ErrorName() string {
	return "RemoveNodesFromGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveNodesFromGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveNodesFromGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveNodesFromGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveNodesFromGroupRequestValidationError{}

var _RemoveNodesFromGroupRequest_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _RemoveNodesFromGroupRequest_NodeGroupID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on RemoveNodesFromGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveNodesFromGroupResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveNodesFromGroupResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveNodesFromGroupResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveNodesFromGroupResponseValidationError is the validation error returned
// by RemoveNodesFromGroupResponse.Validate if the designated constraints
// aren't met.
type RemoveNodesFromGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveNodesFromGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveNodesFromGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveNodesFromGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveNodesFromGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveNodesFromGroupResponseValidationError) ErrorName() string {
	return "RemoveNodesFromGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveNodesFromGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveNodesFromGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveNodesFromGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveNodesFromGroupResponseValidationError{}

// Validate checks the field values on CleanNodesInGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CleanNodesInGroupRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 5 || l > 100 {
		return CleanNodesInGroupRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 5 and 100 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		return CleanNodesInGroupRequestValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
	}

	if !_CleanNodesInGroupRequest_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return CleanNodesInGroupRequestValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if l := len(m.GetNodes()); l < 1 || l > 100 {
		return CleanNodesInGroupRequestValidationError{
			field:  "Nodes",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
	}

	_CleanNodesInGroupRequest_Nodes_Unique := make(map[string]struct{}, len(m.GetNodes()))

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if _, exists := _CleanNodesInGroupRequest_Nodes_Unique[item]; exists {
			return CleanNodesInGroupRequestValidationError{
				field:  fmt.Sprintf("Nodes[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_CleanNodesInGroupRequest_Nodes_Unique[item] = struct{}{}
		}

		// no validation rules for Nodes[idx]
	}

	if l := utf8.RuneCountInString(m.GetNodeGroupID()); l < 2 || l > 20 {
		return CleanNodesInGroupRequestValidationError{
			field:  "NodeGroupID",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	if !_CleanNodesInGroupRequest_NodeGroupID_Pattern.MatchString(m.GetNodeGroupID()) {
		return CleanNodesInGroupRequestValidationError{
			field:  "NodeGroupID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetOperator()); l < 2 || l > 20 {
		return CleanNodesInGroupRequestValidationError{
			field:  "Operator",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	if !_CleanNodesInGroupRequest_Operator_Pattern.MatchString(m.GetOperator()) {
		return CleanNodesInGroupRequestValidationError{
			field:  "Operator",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	return nil
}

// CleanNodesInGroupRequestValidationError is the validation error returned by
// CleanNodesInGroupRequest.Validate if the designated constraints aren't met.
type CleanNodesInGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CleanNodesInGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CleanNodesInGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CleanNodesInGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CleanNodesInGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CleanNodesInGroupRequestValidationError) ErrorName() string {
	return "CleanNodesInGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CleanNodesInGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCleanNodesInGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CleanNodesInGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CleanNodesInGroupRequestValidationError{}

var _CleanNodesInGroupRequest_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _CleanNodesInGroupRequest_NodeGroupID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _CleanNodesInGroupRequest_Operator_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on CleanNodesInGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CleanNodesInGroupResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CleanNodesInGroupResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CleanNodesInGroupResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CleanNodesInGroupResponseValidationError is the validation error returned by
// CleanNodesInGroupResponse.Validate if the designated constraints aren't met.
type CleanNodesInGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CleanNodesInGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CleanNodesInGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CleanNodesInGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CleanNodesInGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CleanNodesInGroupResponseValidationError) ErrorName() string {
	return "CleanNodesInGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CleanNodesInGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCleanNodesInGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CleanNodesInGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CleanNodesInGroupResponseValidationError{}

// Validate checks the field values on CleanNodesInGroupV2Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CleanNodesInGroupV2Request) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 5 || l > 100 {
		return CleanNodesInGroupV2RequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 5 and 100 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		return CleanNodesInGroupV2RequestValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
	}

	if !_CleanNodesInGroupV2Request_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return CleanNodesInGroupV2RequestValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if utf8.RuneCountInString(m.GetNodes()) < 1 {
		return CleanNodesInGroupV2RequestValidationError{
			field:  "Nodes",
			reason: "value length must be at least 1 runes",
		}
	}

	if l := utf8.RuneCountInString(m.GetNodeGroupID()); l < 2 || l > 20 {
		return CleanNodesInGroupV2RequestValidationError{
			field:  "NodeGroupID",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	if !_CleanNodesInGroupV2Request_NodeGroupID_Pattern.MatchString(m.GetNodeGroupID()) {
		return CleanNodesInGroupV2RequestValidationError{
			field:  "NodeGroupID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetOperator()); l < 2 || l > 20 {
		return CleanNodesInGroupV2RequestValidationError{
			field:  "Operator",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	if !_CleanNodesInGroupV2Request_Operator_Pattern.MatchString(m.GetOperator()) {
		return CleanNodesInGroupV2RequestValidationError{
			field:  "Operator",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	return nil
}

// CleanNodesInGroupV2RequestValidationError is the validation error returned
// by CleanNodesInGroupV2Request.Validate if the designated constraints aren't met.
type CleanNodesInGroupV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CleanNodesInGroupV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CleanNodesInGroupV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CleanNodesInGroupV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CleanNodesInGroupV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CleanNodesInGroupV2RequestValidationError) ErrorName() string {
	return "CleanNodesInGroupV2RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CleanNodesInGroupV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCleanNodesInGroupV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CleanNodesInGroupV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CleanNodesInGroupV2RequestValidationError{}

var _CleanNodesInGroupV2Request_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _CleanNodesInGroupV2Request_NodeGroupID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _CleanNodesInGroupV2Request_Operator_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on CleanNodesInGroupV2Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CleanNodesInGroupV2Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CleanNodesInGroupV2ResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CleanNodesInGroupV2ResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CleanNodesInGroupV2ResponseValidationError is the validation error returned
// by CleanNodesInGroupV2Response.Validate if the designated constraints
// aren't met.
type CleanNodesInGroupV2ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CleanNodesInGroupV2ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CleanNodesInGroupV2ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CleanNodesInGroupV2ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CleanNodesInGroupV2ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CleanNodesInGroupV2ResponseValidationError) ErrorName() string {
	return "CleanNodesInGroupV2ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CleanNodesInGroupV2ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCleanNodesInGroupV2Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CleanNodesInGroupV2ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CleanNodesInGroupV2ResponseValidationError{}

// Validate checks the field values on ListNodesInGroupV2Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNodesInGroupV2Request) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetNodeGroupID()); l < 2 || l > 20 {
		return ListNodesInGroupV2RequestValidationError{
			field:  "NodeGroupID",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	if !_ListNodesInGroupV2Request_NodeGroupID_Pattern.MatchString(m.GetNodeGroupID()) {
		return ListNodesInGroupV2RequestValidationError{
			field:  "NodeGroupID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for Output

	return nil
}

// ListNodesInGroupV2RequestValidationError is the validation error returned by
// ListNodesInGroupV2Request.Validate if the designated constraints aren't met.
type ListNodesInGroupV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNodesInGroupV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNodesInGroupV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNodesInGroupV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNodesInGroupV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNodesInGroupV2RequestValidationError) ErrorName() string {
	return "ListNodesInGroupV2RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNodesInGroupV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNodesInGroupV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNodesInGroupV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNodesInGroupV2RequestValidationError{}

var _ListNodesInGroupV2Request_NodeGroupID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on ListNodesInGroupV2Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNodesInGroupV2Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNodesInGroupV2ResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNodesInGroupV2ResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListNodesInGroupV2ResponseValidationError is the validation error returned
// by ListNodesInGroupV2Response.Validate if the designated constraints aren't met.
type ListNodesInGroupV2ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNodesInGroupV2ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNodesInGroupV2ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNodesInGroupV2ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNodesInGroupV2ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNodesInGroupV2ResponseValidationError) ErrorName() string {
	return "ListNodesInGroupV2ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNodesInGroupV2ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNodesInGroupV2Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNodesInGroupV2ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNodesInGroupV2ResponseValidationError{}

// Validate checks the field values on NodeGroupNode with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NodeGroupNode) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NodeID

	// no validation rules for InnerIP

	// no validation rules for InstanceType

	// no validation rules for CPU

	// no validation rules for Mem

	// no validation rules for GPU

	// no validation rules for Status

	// no validation rules for ZoneID

	// no validation rules for NodeGroupID

	// no validation rules for ClusterID

	// no validation rules for VPC

	// no validation rules for Region

	// no validation rules for Passwd

	// no validation rules for Zone

	// no validation rules for DeviceID

	// no validation rules for InstanceRole

	// no validation rules for UnSchedulable

	return nil
}

// NodeGroupNodeValidationError is the validation error returned by
// NodeGroupNode.Validate if the designated constraints aren't met.
type NodeGroupNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeGroupNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeGroupNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeGroupNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeGroupNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeGroupNodeValidationError) ErrorName() string { return "NodeGroupNodeValidationError" }

// Error satisfies the builtin error interface
func (e NodeGroupNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeGroupNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeGroupNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeGroupNodeValidationError{}

// Validate checks the field values on ListNodesInGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNodesInGroupResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNodesInGroupResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNodesInGroupResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListNodesInGroupResponseValidationError is the validation error returned by
// ListNodesInGroupResponse.Validate if the designated constraints aren't met.
type ListNodesInGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNodesInGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNodesInGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNodesInGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNodesInGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNodesInGroupResponseValidationError) ErrorName() string {
	return "ListNodesInGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNodesInGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNodesInGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNodesInGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNodesInGroupResponseValidationError{}

// Validate checks the field values on UpdateGroupMinMaxSizeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateGroupMinMaxSizeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetNodeGroupID()); l < 5 || l > 100 {
		return UpdateGroupMinMaxSizeRequestValidationError{
			field:  "NodeGroupID",
			reason: "value length must be between 5 and 100 runes, inclusive",
		}
	}

	if !_UpdateGroupMinMaxSizeRequest_NodeGroupID_Pattern.MatchString(m.GetNodeGroupID()) {
		return UpdateGroupMinMaxSizeRequestValidationError{
			field:  "NodeGroupID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if m.GetMinSize() < 0 {
		return UpdateGroupMinMaxSizeRequestValidationError{
			field:  "MinSize",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetMaxSize() < 0 {
		return UpdateGroupMinMaxSizeRequestValidationError{
			field:  "MaxSize",
			reason: "value must be greater than or equal to 0",
		}
	}

	if l := utf8.RuneCountInString(m.GetOperator()); l < 1 || l > 100 {
		return UpdateGroupMinMaxSizeRequestValidationError{
			field:  "Operator",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	return nil
}

// UpdateGroupMinMaxSizeRequestValidationError is the validation error returned
// by UpdateGroupMinMaxSizeRequest.Validate if the designated constraints
// aren't met.
type UpdateGroupMinMaxSizeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupMinMaxSizeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupMinMaxSizeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupMinMaxSizeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupMinMaxSizeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupMinMaxSizeRequestValidationError) ErrorName() string {
	return "UpdateGroupMinMaxSizeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupMinMaxSizeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupMinMaxSizeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupMinMaxSizeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupMinMaxSizeRequestValidationError{}

var _UpdateGroupMinMaxSizeRequest_NodeGroupID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on UpdateGroupMinMaxSizeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateGroupMinMaxSizeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGroupMinMaxSizeResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateGroupMinMaxSizeResponseValidationError is the validation error
// returned by UpdateGroupMinMaxSizeResponse.Validate if the designated
// constraints aren't met.
type UpdateGroupMinMaxSizeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupMinMaxSizeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupMinMaxSizeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupMinMaxSizeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupMinMaxSizeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupMinMaxSizeResponseValidationError) ErrorName() string {
	return "UpdateGroupMinMaxSizeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupMinMaxSizeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupMinMaxSizeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupMinMaxSizeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupMinMaxSizeResponseValidationError{}

// Validate checks the field values on UpdateGroupDesiredSizeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateGroupDesiredSizeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetNodeGroupID()); l < 5 || l > 100 {
		return UpdateGroupDesiredSizeRequestValidationError{
			field:  "NodeGroupID",
			reason: "value length must be between 5 and 100 runes, inclusive",
		}
	}

	if !_UpdateGroupDesiredSizeRequest_NodeGroupID_Pattern.MatchString(m.GetNodeGroupID()) {
		return UpdateGroupDesiredSizeRequestValidationError{
			field:  "NodeGroupID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for DesiredSize

	if utf8.RuneCountInString(m.GetOperator()) > 100 {
		return UpdateGroupDesiredSizeRequestValidationError{
			field:  "Operator",
			reason: "value length must be at most 100 runes",
		}
	}

	return nil
}

// UpdateGroupDesiredSizeRequestValidationError is the validation error
// returned by UpdateGroupDesiredSizeRequest.Validate if the designated
// constraints aren't met.
type UpdateGroupDesiredSizeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupDesiredSizeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupDesiredSizeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupDesiredSizeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupDesiredSizeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupDesiredSizeRequestValidationError) ErrorName() string {
	return "UpdateGroupDesiredSizeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupDesiredSizeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupDesiredSizeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupDesiredSizeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupDesiredSizeRequestValidationError{}

var _UpdateGroupDesiredSizeRequest_NodeGroupID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on UpdateGroupDesiredSizeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateGroupDesiredSizeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGroupDesiredSizeResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateGroupDesiredSizeResponseValidationError is the validation error
// returned by UpdateGroupDesiredSizeResponse.Validate if the designated
// constraints aren't met.
type UpdateGroupDesiredSizeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupDesiredSizeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupDesiredSizeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupDesiredSizeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupDesiredSizeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupDesiredSizeResponseValidationError) ErrorName() string {
	return "UpdateGroupDesiredSizeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupDesiredSizeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupDesiredSizeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupDesiredSizeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupDesiredSizeResponseValidationError{}

// Validate checks the field values on UpdateGroupDesiredNodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateGroupDesiredNodeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetNodeGroupID()); l < 5 || l > 100 {
		return UpdateGroupDesiredNodeRequestValidationError{
			field:  "NodeGroupID",
			reason: "value length must be between 5 and 100 runes, inclusive",
		}
	}

	if !_UpdateGroupDesiredNodeRequest_NodeGroupID_Pattern.MatchString(m.GetNodeGroupID()) {
		return UpdateGroupDesiredNodeRequestValidationError{
			field:  "NodeGroupID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for DesiredNode

	if utf8.RuneCountInString(m.GetOperator()) > 100 {
		return UpdateGroupDesiredNodeRequestValidationError{
			field:  "Operator",
			reason: "value length must be at most 100 runes",
		}
	}

	// no validation rules for Manual

	return nil
}

// UpdateGroupDesiredNodeRequestValidationError is the validation error
// returned by UpdateGroupDesiredNodeRequest.Validate if the designated
// constraints aren't met.
type UpdateGroupDesiredNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupDesiredNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupDesiredNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupDesiredNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupDesiredNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupDesiredNodeRequestValidationError) ErrorName() string {
	return "UpdateGroupDesiredNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupDesiredNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupDesiredNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupDesiredNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupDesiredNodeRequestValidationError{}

var _UpdateGroupDesiredNodeRequest_NodeGroupID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on UpdateGroupDesiredNodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateGroupDesiredNodeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGroupDesiredNodeResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGroupDesiredNodeResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateGroupDesiredNodeResponseValidationError is the validation error
// returned by UpdateGroupDesiredNodeResponse.Validate if the designated
// constraints aren't met.
type UpdateGroupDesiredNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupDesiredNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupDesiredNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupDesiredNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupDesiredNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupDesiredNodeResponseValidationError) ErrorName() string {
	return "UpdateGroupDesiredNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupDesiredNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupDesiredNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupDesiredNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupDesiredNodeResponseValidationError{}

// Validate checks the field values on EnableNodeGroupAutoScaleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EnableNodeGroupAutoScaleRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetNodeGroupID()); l < 5 || l > 100 {
		return EnableNodeGroupAutoScaleRequestValidationError{
			field:  "NodeGroupID",
			reason: "value length must be between 5 and 100 runes, inclusive",
		}
	}

	if !_EnableNodeGroupAutoScaleRequest_NodeGroupID_Pattern.MatchString(m.GetNodeGroupID()) {
		return EnableNodeGroupAutoScaleRequestValidationError{
			field:  "NodeGroupID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	return nil
}

// EnableNodeGroupAutoScaleRequestValidationError is the validation error
// returned by EnableNodeGroupAutoScaleRequest.Validate if the designated
// constraints aren't met.
type EnableNodeGroupAutoScaleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableNodeGroupAutoScaleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableNodeGroupAutoScaleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableNodeGroupAutoScaleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableNodeGroupAutoScaleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableNodeGroupAutoScaleRequestValidationError) ErrorName() string {
	return "EnableNodeGroupAutoScaleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableNodeGroupAutoScaleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableNodeGroupAutoScaleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableNodeGroupAutoScaleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableNodeGroupAutoScaleRequestValidationError{}

var _EnableNodeGroupAutoScaleRequest_NodeGroupID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on EnableNodeGroupAutoScaleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *EnableNodeGroupAutoScaleResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnableNodeGroupAutoScaleResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EnableNodeGroupAutoScaleResponseValidationError is the validation error
// returned by EnableNodeGroupAutoScaleResponse.Validate if the designated
// constraints aren't met.
type EnableNodeGroupAutoScaleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableNodeGroupAutoScaleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableNodeGroupAutoScaleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableNodeGroupAutoScaleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableNodeGroupAutoScaleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableNodeGroupAutoScaleResponseValidationError) ErrorName() string {
	return "EnableNodeGroupAutoScaleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnableNodeGroupAutoScaleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableNodeGroupAutoScaleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableNodeGroupAutoScaleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableNodeGroupAutoScaleResponseValidationError{}

// Validate checks the field values on DisableNodeGroupAutoScaleRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *DisableNodeGroupAutoScaleRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetNodeGroupID()); l < 5 || l > 100 {
		return DisableNodeGroupAutoScaleRequestValidationError{
			field:  "NodeGroupID",
			reason: "value length must be between 5 and 100 runes, inclusive",
		}
	}

	if !_DisableNodeGroupAutoScaleRequest_NodeGroupID_Pattern.MatchString(m.GetNodeGroupID()) {
		return DisableNodeGroupAutoScaleRequestValidationError{
			field:  "NodeGroupID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	return nil
}

// DisableNodeGroupAutoScaleRequestValidationError is the validation error
// returned by DisableNodeGroupAutoScaleRequest.Validate if the designated
// constraints aren't met.
type DisableNodeGroupAutoScaleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableNodeGroupAutoScaleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableNodeGroupAutoScaleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableNodeGroupAutoScaleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableNodeGroupAutoScaleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableNodeGroupAutoScaleRequestValidationError) ErrorName() string {
	return "DisableNodeGroupAutoScaleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableNodeGroupAutoScaleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableNodeGroupAutoScaleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableNodeGroupAutoScaleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableNodeGroupAutoScaleRequestValidationError{}

var _DisableNodeGroupAutoScaleRequest_NodeGroupID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on DisableNodeGroupAutoScaleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *DisableNodeGroupAutoScaleResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DisableNodeGroupAutoScaleResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DisableNodeGroupAutoScaleResponseValidationError is the validation error
// returned by DisableNodeGroupAutoScaleResponse.Validate if the designated
// constraints aren't met.
type DisableNodeGroupAutoScaleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableNodeGroupAutoScaleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableNodeGroupAutoScaleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableNodeGroupAutoScaleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableNodeGroupAutoScaleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableNodeGroupAutoScaleResponseValidationError) ErrorName() string {
	return "DisableNodeGroupAutoScaleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisableNodeGroupAutoScaleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableNodeGroupAutoScaleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableNodeGroupAutoScaleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableNodeGroupAutoScaleResponseValidationError{}

// Validate checks the field values on CreateTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateTaskRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TaskType

	if _, ok := _CreateTaskRequest_Status_InLookup[m.GetStatus()]; !ok {
		return CreateTaskRequestValidationError{
			field:  "Status",
			reason: "value must be in list [INITIALIZING RUNNING SUCCESS FAILED TIMEOUT]",
		}
	}

	// no validation rules for Message

	// no validation rules for Start

	// no validation rules for End

	// no validation rules for ExecutionTime

	// no validation rules for CurrentStep

	if len(m.GetStepSequence()) < 1 {
		return CreateTaskRequestValidationError{
			field:  "StepSequence",
			reason: "value must contain at least 1 item(s)",
		}
	}

	if l := len(m.GetSteps()); l < 1 || l > 20 {
		return CreateTaskRequestValidationError{
			field:  "Steps",
			reason: "value must contain between 1 and 20 pairs, inclusive",
		}
	}

	for key, val := range m.GetSteps() {
		_ = val

		// no validation rules for Steps[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateTaskRequestValidationError{
					field:  fmt.Sprintf("Steps[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 2 || l > 100 {
		return CreateTaskRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		return CreateTaskRequestValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
	}

	if !_CreateTaskRequest_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return CreateTaskRequestValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetProjectID()); l < 2 || l > 32 {
		return CreateTaskRequestValidationError{
			field:  "ProjectID",
			reason: "value length must be between 2 and 32 runes, inclusive",
		}
	}

	if !_CreateTaskRequest_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		return CreateTaskRequestValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetCreator()); l < 2 || l > 20 {
		return CreateTaskRequestValidationError{
			field:  "Creator",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	// no validation rules for LastUpdate

	return nil
}

// CreateTaskRequestValidationError is the validation error returned by
// CreateTaskRequest.Validate if the designated constraints aren't met.
type CreateTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTaskRequestValidationError) ErrorName() string {
	return "CreateTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTaskRequestValidationError{}

var _CreateTaskRequest_Status_InLookup = map[string]struct{}{
	"INITIALIZING": {},
	"RUNNING":      {},
	"SUCCESS":      {},
	"FAILED":       {},
	"TIMEOUT":      {},
}

var _CreateTaskRequest_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _CreateTaskRequest_ProjectID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on CreateTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTaskResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTaskResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateTaskResponseValidationError is the validation error returned by
// CreateTaskResponse.Validate if the designated constraints aren't met.
type CreateTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTaskResponseValidationError) ErrorName() string {
	return "CreateTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTaskResponseValidationError{}

// Validate checks the field values on RetryTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RetryTaskRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetTaskID()); l < 2 || l > 1024 {
		return RetryTaskRequestValidationError{
			field:  "TaskID",
			reason: "value length must be between 2 and 1024 runes, inclusive",
		}
	}

	if !_RetryTaskRequest_TaskID_Pattern.MatchString(m.GetTaskID()) {
		return RetryTaskRequestValidationError{
			field:  "TaskID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetUpdater()); l < 2 || l > 1024 {
		return RetryTaskRequestValidationError{
			field:  "Updater",
			reason: "value length must be between 2 and 1024 runes, inclusive",
		}
	}

	return nil
}

// RetryTaskRequestValidationError is the validation error returned by
// RetryTaskRequest.Validate if the designated constraints aren't met.
type RetryTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetryTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetryTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetryTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetryTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetryTaskRequestValidationError) ErrorName() string { return "RetryTaskRequestValidationError" }

// Error satisfies the builtin error interface
func (e RetryTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetryTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetryTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetryTaskRequestValidationError{}

var _RetryTaskRequest_TaskID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on RetryTaskResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RetryTaskResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetryTaskResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RetryTaskResponseValidationError is the validation error returned by
// RetryTaskResponse.Validate if the designated constraints aren't met.
type RetryTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetryTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetryTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetryTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetryTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetryTaskResponseValidationError) ErrorName() string {
	return "RetryTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetryTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetryTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetryTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetryTaskResponseValidationError{}

// Validate checks the field values on UpdateTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateTaskRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetTaskID()); l < 2 || l > 36 {
		return UpdateTaskRequestValidationError{
			field:  "TaskID",
			reason: "value length must be between 2 and 36 runes, inclusive",
		}
	}

	if !_UpdateTaskRequest_TaskID_Pattern.MatchString(m.GetTaskID()) {
		return UpdateTaskRequestValidationError{
			field:  "TaskID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if _, ok := _UpdateTaskRequest_Status_InLookup[m.GetStatus()]; !ok {
		return UpdateTaskRequestValidationError{
			field:  "Status",
			reason: "value must be in list [INITIALIZING RUNNING SUCCESS FAILED TIMEOUT]",
		}
	}

	// no validation rules for Message

	// no validation rules for End

	// no validation rules for ExecutionTime

	// no validation rules for CurrentStep

	if l := len(m.GetSteps()); l < 1 || l > 20 {
		return UpdateTaskRequestValidationError{
			field:  "Steps",
			reason: "value must contain between 1 and 20 pairs, inclusive",
		}
	}

	for key, val := range m.GetSteps() {
		_ = val

		// no validation rules for Steps[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateTaskRequestValidationError{
					field:  fmt.Sprintf("Steps[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if l := utf8.RuneCountInString(m.GetUpdater()); l < 2 || l > 20 {
		return UpdateTaskRequestValidationError{
			field:  "Updater",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	return nil
}

// UpdateTaskRequestValidationError is the validation error returned by
// UpdateTaskRequest.Validate if the designated constraints aren't met.
type UpdateTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTaskRequestValidationError) ErrorName() string {
	return "UpdateTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTaskRequestValidationError{}

var _UpdateTaskRequest_TaskID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _UpdateTaskRequest_Status_InLookup = map[string]struct{}{
	"INITIALIZING": {},
	"RUNNING":      {},
	"SUCCESS":      {},
	"FAILED":       {},
	"TIMEOUT":      {},
}

// Validate checks the field values on UpdateTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateTaskResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTaskResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateTaskResponseValidationError is the validation error returned by
// UpdateTaskResponse.Validate if the designated constraints aren't met.
type UpdateTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTaskResponseValidationError) ErrorName() string {
	return "UpdateTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTaskResponseValidationError{}

// Validate checks the field values on DeleteTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteTaskRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetTaskID()); l < 2 || l > 36 {
		return DeleteTaskRequestValidationError{
			field:  "TaskID",
			reason: "value length must be between 2 and 36 runes, inclusive",
		}
	}

	if !_DeleteTaskRequest_TaskID_Pattern.MatchString(m.GetTaskID()) {
		return DeleteTaskRequestValidationError{
			field:  "TaskID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for IsForce

	return nil
}

// DeleteTaskRequestValidationError is the validation error returned by
// DeleteTaskRequest.Validate if the designated constraints aren't met.
type DeleteTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTaskRequestValidationError) ErrorName() string {
	return "DeleteTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTaskRequestValidationError{}

var _DeleteTaskRequest_TaskID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on DeleteTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteTaskResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteTaskResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteTaskResponseValidationError is the validation error returned by
// DeleteTaskResponse.Validate if the designated constraints aren't met.
type DeleteTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTaskResponseValidationError) ErrorName() string {
	return "DeleteTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTaskResponseValidationError{}

// Validate checks the field values on GetTaskRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetTaskRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetTaskID()); l < 2 || l > 36 {
		return GetTaskRequestValidationError{
			field:  "TaskID",
			reason: "value length must be between 2 and 36 runes, inclusive",
		}
	}

	if !_GetTaskRequest_TaskID_Pattern.MatchString(m.GetTaskID()) {
		return GetTaskRequestValidationError{
			field:  "TaskID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	return nil
}

// GetTaskRequestValidationError is the validation error returned by
// GetTaskRequest.Validate if the designated constraints aren't met.
type GetTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskRequestValidationError) ErrorName() string { return "GetTaskRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskRequestValidationError{}

var _GetTaskRequest_TaskID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on GetTaskResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetTaskResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTaskResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetTaskResponseValidationError is the validation error returned by
// GetTaskResponse.Validate if the designated constraints aren't met.
type GetTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskResponseValidationError) ErrorName() string { return "GetTaskResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskResponseValidationError{}

// Validate checks the field values on ListTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListTaskRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetClusterID()) > 100 {
		return ListTaskRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetProjectID()) > 32 {
		return ListTaskRequestValidationError{
			field:  "ProjectID",
			reason: "value length must be at most 32 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCreator()) > 20 {
		return ListTaskRequestValidationError{
			field:  "Creator",
			reason: "value length must be at most 20 runes",
		}
	}

	if utf8.RuneCountInString(m.GetUpdater()) > 20 {
		return ListTaskRequestValidationError{
			field:  "Updater",
			reason: "value length must be at most 20 runes",
		}
	}

	// no validation rules for TaskType

	// no validation rules for Status

	// no validation rules for NodeIP

	// no validation rules for NodeGroupID

	return nil
}

// ListTaskRequestValidationError is the validation error returned by
// ListTaskRequest.Validate if the designated constraints aren't met.
type ListTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaskRequestValidationError) ErrorName() string { return "ListTaskRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaskRequestValidationError{}

// Validate checks the field values on ListTaskResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListTaskResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTaskResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetLatestTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTaskResponseValidationError{
				field:  "LatestTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListTaskResponseValidationError is the validation error returned by
// ListTaskResponse.Validate if the designated constraints aren't met.
type ListTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaskResponseValidationError) ErrorName() string { return "ListTaskResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaskResponseValidationError{}

// Validate checks the field values on CreateAutoScalingOptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAutoScalingOptionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsScaleDownEnable

	// no validation rules for Expander

	// no validation rules for MaxEmptyBulkDelete

	// no validation rules for ScaleDownDelay

	// no validation rules for ScaleDownUnneededTime

	// no validation rules for ScaleDownUtilizationThreahold

	// no validation rules for SkipNodesWithLocalStorage

	// no validation rules for SkipNodesWithSystemPods

	// no validation rules for IgnoreDaemonSetsUtilization

	// no validation rules for OkTotalUnreadyCount

	// no validation rules for MaxTotalUnreadyPercentage

	// no validation rules for ScaleDownUnreadyTime

	// no validation rules for UnregisteredNodeRemovalTime

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 2 || l > 100 {
		return CreateAutoScalingOptionRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		return CreateAutoScalingOptionRequestValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
	}

	if !_CreateAutoScalingOptionRequest_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return CreateAutoScalingOptionRequestValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetCreator()); l < 2 || l > 20 {
		return CreateAutoScalingOptionRequestValidationError{
			field:  "Creator",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	// no validation rules for Provider

	// no validation rules for EnableAutoscale

	// no validation rules for BufferResourceRatio

	// no validation rules for MaxGracefulTerminationSec

	// no validation rules for ScanInterval

	// no validation rules for MaxNodeProvisionTime

	if v, ok := interface{}(m.GetScaleUpFromZero()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAutoScalingOptionRequestValidationError{
				field:  "ScaleUpFromZero",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ScaleDownDelayAfterAdd

	// no validation rules for ScaleDownDelayAfterDelete

	if v, ok := interface{}(m.GetScaleDownDelayAfterFailure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAutoScalingOptionRequestValidationError{
				field:  "ScaleDownDelayAfterFailure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ScaleDownGpuUtilizationThreshold

	// no validation rules for BufferResourceCpuRatio

	// no validation rules for BufferResourceMemRatio

	return nil
}

// CreateAutoScalingOptionRequestValidationError is the validation error
// returned by CreateAutoScalingOptionRequest.Validate if the designated
// constraints aren't met.
type CreateAutoScalingOptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAutoScalingOptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAutoScalingOptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAutoScalingOptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAutoScalingOptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAutoScalingOptionRequestValidationError) ErrorName() string {
	return "CreateAutoScalingOptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAutoScalingOptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAutoScalingOptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAutoScalingOptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAutoScalingOptionRequestValidationError{}

var _CreateAutoScalingOptionRequest_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on CreateAutoScalingOptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAutoScalingOptionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAutoScalingOptionResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateAutoScalingOptionResponseValidationError is the validation error
// returned by CreateAutoScalingOptionResponse.Validate if the designated
// constraints aren't met.
type CreateAutoScalingOptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAutoScalingOptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAutoScalingOptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAutoScalingOptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAutoScalingOptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAutoScalingOptionResponseValidationError) ErrorName() string {
	return "CreateAutoScalingOptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAutoScalingOptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAutoScalingOptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAutoScalingOptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAutoScalingOptionResponseValidationError{}

// Validate checks the field values on UpdateAutoScalingOptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAutoScalingOptionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsScaleDownEnable

	if _, ok := _UpdateAutoScalingOptionRequest_Expander_InLookup[m.GetExpander()]; !ok {
		return UpdateAutoScalingOptionRequestValidationError{
			field:  "Expander",
			reason: "value must be in list [random least-waste most-pods priority]",
		}
	}

	if val := m.GetMaxEmptyBulkDelete(); val < 1 || val > 100 {
		return UpdateAutoScalingOptionRequestValidationError{
			field:  "MaxEmptyBulkDelete",
			reason: "value must be inside range [1, 100]",
		}
	}

	if val := m.GetScaleDownDelay(); val < 60 || val > 86400 {
		return UpdateAutoScalingOptionRequestValidationError{
			field:  "ScaleDownDelay",
			reason: "value must be inside range [60, 86400]",
		}
	}

	if val := m.GetScaleDownUnneededTime(); val < 60 || val > 86400 {
		return UpdateAutoScalingOptionRequestValidationError{
			field:  "ScaleDownUnneededTime",
			reason: "value must be inside range [60, 86400]",
		}
	}

	if val := m.GetScaleDownUtilizationThreahold(); val < 0 || val > 80 {
		return UpdateAutoScalingOptionRequestValidationError{
			field:  "ScaleDownUtilizationThreahold",
			reason: "value must be inside range [0, 80]",
		}
	}

	if v, ok := interface{}(m.GetSkipNodesWithLocalStorage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAutoScalingOptionRequestValidationError{
				field:  "SkipNodesWithLocalStorage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSkipNodesWithSystemPods()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAutoScalingOptionRequestValidationError{
				field:  "SkipNodesWithSystemPods",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetIgnoreDaemonSetsUtilization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAutoScalingOptionRequestValidationError{
				field:  "IgnoreDaemonSetsUtilization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if val := m.GetOkTotalUnreadyCount(); val < 0 || val > 320000 {
		return UpdateAutoScalingOptionRequestValidationError{
			field:  "OkTotalUnreadyCount",
			reason: "value must be inside range [0, 320000]",
		}
	}

	if val := m.GetMaxTotalUnreadyPercentage(); val < 0 || val > 100 {
		return UpdateAutoScalingOptionRequestValidationError{
			field:  "MaxTotalUnreadyPercentage",
			reason: "value must be inside range [0, 100]",
		}
	}

	if val := m.GetScaleDownUnreadyTime(); val < 1200 || val > 86400 {
		return UpdateAutoScalingOptionRequestValidationError{
			field:  "ScaleDownUnreadyTime",
			reason: "value must be inside range [1200, 86400]",
		}
	}

	// no validation rules for UnregisteredNodeRemovalTime

	if utf8.RuneCountInString(m.GetProjectID()) > 32 {
		return UpdateAutoScalingOptionRequestValidationError{
			field:  "ProjectID",
			reason: "value length must be at most 32 runes",
		}
	}

	if utf8.RuneCountInString(m.GetClusterID()) > 100 {
		return UpdateAutoScalingOptionRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be at most 100 runes",
		}
	}

	if l := utf8.RuneCountInString(m.GetUpdater()); l < 2 || l > 20 {
		return UpdateAutoScalingOptionRequestValidationError{
			field:  "Updater",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	// no validation rules for Provider

	// no validation rules for ScaleDownGpuUtilizationThreshold

	if wrapper := m.GetBufferResourceRatio(); wrapper != nil {

		if val := wrapper.GetValue(); val < 0 || val > 100 {
			return UpdateAutoScalingOptionRequestValidationError{
				field:  "BufferResourceRatio",
				reason: "value must be inside range [0, 100]",
			}
		}

	}

	if val := m.GetMaxGracefulTerminationSec(); val < 60 || val > 86400 {
		return UpdateAutoScalingOptionRequestValidationError{
			field:  "MaxGracefulTerminationSec",
			reason: "value must be inside range [60, 86400]",
		}
	}

	if val := m.GetScanInterval(); val < 5 || val > 86400 {
		return UpdateAutoScalingOptionRequestValidationError{
			field:  "ScanInterval",
			reason: "value must be inside range [5, 86400]",
		}
	}

	if val := m.GetMaxNodeProvisionTime(); val < 900 || val > 86400 {
		return UpdateAutoScalingOptionRequestValidationError{
			field:  "MaxNodeProvisionTime",
			reason: "value must be inside range [900, 86400]",
		}
	}

	if v, ok := interface{}(m.GetScaleUpFromZero()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAutoScalingOptionRequestValidationError{
				field:  "ScaleUpFromZero",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if val := m.GetScaleDownDelayAfterAdd(); val < 1200 || val > 86400 {
		return UpdateAutoScalingOptionRequestValidationError{
			field:  "ScaleDownDelayAfterAdd",
			reason: "value must be inside range [1200, 86400]",
		}
	}

	if val := m.GetScaleDownDelayAfterDelete(); val < 0 || val > 86400 {
		return UpdateAutoScalingOptionRequestValidationError{
			field:  "ScaleDownDelayAfterDelete",
			reason: "value must be inside range [0, 86400]",
		}
	}

	if wrapper := m.GetScaleDownDelayAfterFailure(); wrapper != nil {

		if val := wrapper.GetValue(); val < 60 || val > 86400 {
			return UpdateAutoScalingOptionRequestValidationError{
				field:  "ScaleDownDelayAfterFailure",
				reason: "value must be inside range [60, 86400]",
			}
		}

	}

	if val := m.GetBufferResourceCpuRatio(); val < 0 || val > 100 {
		return UpdateAutoScalingOptionRequestValidationError{
			field:  "BufferResourceCpuRatio",
			reason: "value must be inside range [0, 100]",
		}
	}

	if val := m.GetBufferResourceMemRatio(); val < 0 || val > 100 {
		return UpdateAutoScalingOptionRequestValidationError{
			field:  "BufferResourceMemRatio",
			reason: "value must be inside range [0, 100]",
		}
	}

	if v, ok := interface{}(m.GetModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAutoScalingOptionRequestValidationError{
				field:  "Module",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebhook()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAutoScalingOptionRequestValidationError{
				field:  "Webhook",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OnlyUpdateInfo

	if v, ok := interface{}(m.GetExpendablePodsPriorityCutoff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAutoScalingOptionRequestValidationError{
				field:  "ExpendablePodsPriorityCutoff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if wrapper := m.GetNewPodScaleUpDelay(); wrapper != nil {

		if wrapper.GetValue() < 0 {
			return UpdateAutoScalingOptionRequestValidationError{
				field:  "NewPodScaleUpDelay",
				reason: "value must be greater than or equal to 0",
			}
		}

	}

	return nil
}

// UpdateAutoScalingOptionRequestValidationError is the validation error
// returned by UpdateAutoScalingOptionRequest.Validate if the designated
// constraints aren't met.
type UpdateAutoScalingOptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAutoScalingOptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAutoScalingOptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAutoScalingOptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAutoScalingOptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAutoScalingOptionRequestValidationError) ErrorName() string {
	return "UpdateAutoScalingOptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAutoScalingOptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAutoScalingOptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAutoScalingOptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAutoScalingOptionRequestValidationError{}

var _UpdateAutoScalingOptionRequest_Expander_InLookup = map[string]struct{}{
	"random":      {},
	"least-waste": {},
	"most-pods":   {},
	"priority":    {},
}

// Validate checks the field values on UpdateAutoScalingOptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAutoScalingOptionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAutoScalingOptionResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAutoScalingOptionResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateAutoScalingOptionResponseValidationError is the validation error
// returned by UpdateAutoScalingOptionResponse.Validate if the designated
// constraints aren't met.
type UpdateAutoScalingOptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAutoScalingOptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAutoScalingOptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAutoScalingOptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAutoScalingOptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAutoScalingOptionResponseValidationError) ErrorName() string {
	return "UpdateAutoScalingOptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAutoScalingOptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAutoScalingOptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAutoScalingOptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAutoScalingOptionResponseValidationError{}

// Validate checks the field values on SyncAutoScalingOptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SyncAutoScalingOptionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsScaleDownEnable

	if _, ok := _SyncAutoScalingOptionRequest_Expander_InLookup[m.GetExpander()]; !ok {
		return SyncAutoScalingOptionRequestValidationError{
			field:  "Expander",
			reason: "value must be in list [random least-waste most-pods priority]",
		}
	}

	if val := m.GetMaxEmptyBulkDelete(); val < 1 || val > 100 {
		return SyncAutoScalingOptionRequestValidationError{
			field:  "MaxEmptyBulkDelete",
			reason: "value must be inside range [1, 100]",
		}
	}

	if val := m.GetScaleDownDelay(); val < 60 || val > 86400 {
		return SyncAutoScalingOptionRequestValidationError{
			field:  "ScaleDownDelay",
			reason: "value must be inside range [60, 86400]",
		}
	}

	if val := m.GetScaleDownUnneededTime(); val < 60 || val > 86400 {
		return SyncAutoScalingOptionRequestValidationError{
			field:  "ScaleDownUnneededTime",
			reason: "value must be inside range [60, 86400]",
		}
	}

	if val := m.GetScaleDownUtilizationThreahold(); val < 0 || val > 80 {
		return SyncAutoScalingOptionRequestValidationError{
			field:  "ScaleDownUtilizationThreahold",
			reason: "value must be inside range [0, 80]",
		}
	}

	// no validation rules for SkipNodesWithLocalStorage

	// no validation rules for SkipNodesWithSystemPods

	// no validation rules for IgnoreDaemonSetsUtilization

	if val := m.GetOkTotalUnreadyCount(); val < 0 || val > 320000 {
		return SyncAutoScalingOptionRequestValidationError{
			field:  "OkTotalUnreadyCount",
			reason: "value must be inside range [0, 320000]",
		}
	}

	if val := m.GetMaxTotalUnreadyPercentage(); val < 0 || val > 100 {
		return SyncAutoScalingOptionRequestValidationError{
			field:  "MaxTotalUnreadyPercentage",
			reason: "value must be inside range [0, 100]",
		}
	}

	if val := m.GetScaleDownUnreadyTime(); val < 1200 || val > 86400 {
		return SyncAutoScalingOptionRequestValidationError{
			field:  "ScaleDownUnreadyTime",
			reason: "value must be inside range [1200, 86400]",
		}
	}

	if utf8.RuneCountInString(m.GetClusterID()) > 100 {
		return SyncAutoScalingOptionRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be at most 100 runes",
		}
	}

	if l := utf8.RuneCountInString(m.GetUpdater()); l < 2 || l > 20 {
		return SyncAutoScalingOptionRequestValidationError{
			field:  "Updater",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	// no validation rules for ScaleDownGpuUtilizationThreshold

	if val := m.GetBufferResourceRatio(); val < 0 || val > 100 {
		return SyncAutoScalingOptionRequestValidationError{
			field:  "BufferResourceRatio",
			reason: "value must be inside range [0, 100]",
		}
	}

	if val := m.GetMaxGracefulTerminationSec(); val < 60 || val > 86400 {
		return SyncAutoScalingOptionRequestValidationError{
			field:  "MaxGracefulTerminationSec",
			reason: "value must be inside range [60, 86400]",
		}
	}

	if val := m.GetScanInterval(); val < 5 || val > 86400 {
		return SyncAutoScalingOptionRequestValidationError{
			field:  "ScanInterval",
			reason: "value must be inside range [5, 86400]",
		}
	}

	if val := m.GetMaxNodeProvisionTime(); val < 900 || val > 86400 {
		return SyncAutoScalingOptionRequestValidationError{
			field:  "MaxNodeProvisionTime",
			reason: "value must be inside range [900, 86400]",
		}
	}

	if val := m.GetMaxNodeStartupTime(); val < 900 || val > 86400 {
		return SyncAutoScalingOptionRequestValidationError{
			field:  "MaxNodeStartupTime",
			reason: "value must be inside range [900, 86400]",
		}
	}

	if val := m.GetMaxNodeStartScheduleTime(); val < 900 || val > 86400 {
		return SyncAutoScalingOptionRequestValidationError{
			field:  "MaxNodeStartScheduleTime",
			reason: "value must be inside range [900, 86400]",
		}
	}

	if v, ok := interface{}(m.GetScaleUpFromZero()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SyncAutoScalingOptionRequestValidationError{
				field:  "ScaleUpFromZero",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if val := m.GetScaleDownDelayAfterAdd(); val < 1200 || val > 86400 {
		return SyncAutoScalingOptionRequestValidationError{
			field:  "ScaleDownDelayAfterAdd",
			reason: "value must be inside range [1200, 86400]",
		}
	}

	if val := m.GetScaleDownDelayAfterDelete(); val < 0 || val > 86400 {
		return SyncAutoScalingOptionRequestValidationError{
			field:  "ScaleDownDelayAfterDelete",
			reason: "value must be inside range [0, 86400]",
		}
	}

	if wrapper := m.GetScaleDownDelayAfterFailure(); wrapper != nil {

		if val := wrapper.GetValue(); val < 60 || val > 86400 {
			return SyncAutoScalingOptionRequestValidationError{
				field:  "ScaleDownDelayAfterFailure",
				reason: "value must be inside range [60, 86400]",
			}
		}

	}

	if val := m.GetBufferResourceCpuRatio(); val < 0 || val > 100 {
		return SyncAutoScalingOptionRequestValidationError{
			field:  "BufferResourceCpuRatio",
			reason: "value must be inside range [0, 100]",
		}
	}

	if val := m.GetBufferResourceMemRatio(); val < 0 || val > 100 {
		return SyncAutoScalingOptionRequestValidationError{
			field:  "BufferResourceMemRatio",
			reason: "value must be inside range [0, 100]",
		}
	}

	if v, ok := interface{}(m.GetWebhook()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SyncAutoScalingOptionRequestValidationError{
				field:  "Webhook",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetExpendablePodsPriorityCutoff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SyncAutoScalingOptionRequestValidationError{
				field:  "ExpendablePodsPriorityCutoff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if wrapper := m.GetNewPodScaleUpDelay(); wrapper != nil {

		if wrapper.GetValue() < 0 {
			return SyncAutoScalingOptionRequestValidationError{
				field:  "NewPodScaleUpDelay",
				reason: "value must be greater than or equal to 0",
			}
		}

	}

	return nil
}

// SyncAutoScalingOptionRequestValidationError is the validation error returned
// by SyncAutoScalingOptionRequest.Validate if the designated constraints
// aren't met.
type SyncAutoScalingOptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncAutoScalingOptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncAutoScalingOptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncAutoScalingOptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncAutoScalingOptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncAutoScalingOptionRequestValidationError) ErrorName() string {
	return "SyncAutoScalingOptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SyncAutoScalingOptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncAutoScalingOptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncAutoScalingOptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncAutoScalingOptionRequestValidationError{}

var _SyncAutoScalingOptionRequest_Expander_InLookup = map[string]struct{}{
	"random":      {},
	"least-waste": {},
	"most-pods":   {},
	"priority":    {},
}

// Validate checks the field values on SyncAutoScalingOptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SyncAutoScalingOptionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SyncAutoScalingOptionResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SyncAutoScalingOptionResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SyncAutoScalingOptionResponseValidationError is the validation error
// returned by SyncAutoScalingOptionResponse.Validate if the designated
// constraints aren't met.
type SyncAutoScalingOptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncAutoScalingOptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncAutoScalingOptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncAutoScalingOptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncAutoScalingOptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncAutoScalingOptionResponseValidationError) ErrorName() string {
	return "SyncAutoScalingOptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SyncAutoScalingOptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncAutoScalingOptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncAutoScalingOptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncAutoScalingOptionResponseValidationError{}

// Validate checks the field values on DeleteAutoScalingOptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAutoScalingOptionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 2 || l > 100 {
		return DeleteAutoScalingOptionRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		return DeleteAutoScalingOptionRequestValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
	}

	if !_DeleteAutoScalingOptionRequest_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return DeleteAutoScalingOptionRequestValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for IsForce

	return nil
}

// DeleteAutoScalingOptionRequestValidationError is the validation error
// returned by DeleteAutoScalingOptionRequest.Validate if the designated
// constraints aren't met.
type DeleteAutoScalingOptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAutoScalingOptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAutoScalingOptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAutoScalingOptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAutoScalingOptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAutoScalingOptionRequestValidationError) ErrorName() string {
	return "DeleteAutoScalingOptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAutoScalingOptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAutoScalingOptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAutoScalingOptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAutoScalingOptionRequestValidationError{}

var _DeleteAutoScalingOptionRequest_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on DeleteAutoScalingOptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAutoScalingOptionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteAutoScalingOptionResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteAutoScalingOptionResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteAutoScalingOptionResponseValidationError is the validation error
// returned by DeleteAutoScalingOptionResponse.Validate if the designated
// constraints aren't met.
type DeleteAutoScalingOptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAutoScalingOptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAutoScalingOptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAutoScalingOptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAutoScalingOptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAutoScalingOptionResponseValidationError) ErrorName() string {
	return "DeleteAutoScalingOptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAutoScalingOptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAutoScalingOptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAutoScalingOptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAutoScalingOptionResponseValidationError{}

// Validate checks the field values on GetAutoScalingOptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAutoScalingOptionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 2 || l > 100 {
		return GetAutoScalingOptionRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		return GetAutoScalingOptionRequestValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
	}

	if !_GetAutoScalingOptionRequest_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return GetAutoScalingOptionRequestValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for Provider

	return nil
}

// GetAutoScalingOptionRequestValidationError is the validation error returned
// by GetAutoScalingOptionRequest.Validate if the designated constraints
// aren't met.
type GetAutoScalingOptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAutoScalingOptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAutoScalingOptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAutoScalingOptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAutoScalingOptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAutoScalingOptionRequestValidationError) ErrorName() string {
	return "GetAutoScalingOptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAutoScalingOptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAutoScalingOptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAutoScalingOptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAutoScalingOptionRequestValidationError{}

var _GetAutoScalingOptionRequest_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on GetAutoScalingOptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAutoScalingOptionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAutoScalingOptionResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAutoScalingOptionResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetAutoScalingOptionResponseValidationError is the validation error returned
// by GetAutoScalingOptionResponse.Validate if the designated constraints
// aren't met.
type GetAutoScalingOptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAutoScalingOptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAutoScalingOptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAutoScalingOptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAutoScalingOptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAutoScalingOptionResponseValidationError) ErrorName() string {
	return "GetAutoScalingOptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAutoScalingOptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAutoScalingOptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAutoScalingOptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAutoScalingOptionResponseValidationError{}

// Validate checks the field values on ListAutoScalingOptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAutoScalingOptionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetClusterID()) > 100 {
		return ListAutoScalingOptionRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetProjectID()) > 32 {
		return ListAutoScalingOptionRequestValidationError{
			field:  "ProjectID",
			reason: "value length must be at most 32 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCreator()) > 20 {
		return ListAutoScalingOptionRequestValidationError{
			field:  "Creator",
			reason: "value length must be at most 20 runes",
		}
	}

	if utf8.RuneCountInString(m.GetUpdater()) > 20 {
		return ListAutoScalingOptionRequestValidationError{
			field:  "Updater",
			reason: "value length must be at most 20 runes",
		}
	}

	return nil
}

// ListAutoScalingOptionRequestValidationError is the validation error returned
// by ListAutoScalingOptionRequest.Validate if the designated constraints
// aren't met.
type ListAutoScalingOptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAutoScalingOptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAutoScalingOptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAutoScalingOptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAutoScalingOptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAutoScalingOptionRequestValidationError) ErrorName() string {
	return "ListAutoScalingOptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAutoScalingOptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAutoScalingOptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAutoScalingOptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAutoScalingOptionRequestValidationError{}

// Validate checks the field values on ListAutoScalingOptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAutoScalingOptionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAutoScalingOptionResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAutoScalingOptionResponseValidationError is the validation error
// returned by ListAutoScalingOptionResponse.Validate if the designated
// constraints aren't met.
type ListAutoScalingOptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAutoScalingOptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAutoScalingOptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAutoScalingOptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAutoScalingOptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAutoScalingOptionResponseValidationError) ErrorName() string {
	return "ListAutoScalingOptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAutoScalingOptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAutoScalingOptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAutoScalingOptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAutoScalingOptionResponseValidationError{}

// Validate checks the field values on UpdateAutoScalingStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAutoScalingStatusRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Enable

	if utf8.RuneCountInString(m.GetClusterID()) > 100 {
		return UpdateAutoScalingStatusRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be at most 100 runes",
		}
	}

	if l := utf8.RuneCountInString(m.GetUpdater()); l < 2 || l > 20 {
		return UpdateAutoScalingStatusRequestValidationError{
			field:  "Updater",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
	}

	// no validation rules for Provider

	return nil
}

// UpdateAutoScalingStatusRequestValidationError is the validation error
// returned by UpdateAutoScalingStatusRequest.Validate if the designated
// constraints aren't met.
type UpdateAutoScalingStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAutoScalingStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAutoScalingStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAutoScalingStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAutoScalingStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAutoScalingStatusRequestValidationError) ErrorName() string {
	return "UpdateAutoScalingStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAutoScalingStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAutoScalingStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAutoScalingStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAutoScalingStatusRequestValidationError{}

// Validate checks the field values on UpdateAutoScalingStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAutoScalingStatusResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAutoScalingStatusResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAutoScalingStatusResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateAutoScalingStatusResponseValidationError is the validation error
// returned by UpdateAutoScalingStatusResponse.Validate if the designated
// constraints aren't met.
type UpdateAutoScalingStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAutoScalingStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAutoScalingStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAutoScalingStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAutoScalingStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAutoScalingStatusResponseValidationError) ErrorName() string {
	return "UpdateAutoScalingStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAutoScalingStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAutoScalingStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAutoScalingStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAutoScalingStatusResponseValidationError{}

// Validate checks the field values on RegionInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RegionInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Region

	// no validation rules for RegionName

	// no validation rules for RegionState

	return nil
}

// RegionInfoValidationError is the validation error returned by
// RegionInfo.Validate if the designated constraints aren't met.
type RegionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegionInfoValidationError) ErrorName() string { return "RegionInfoValidationError" }

// Error satisfies the builtin error interface
func (e RegionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegionInfoValidationError{}

// Validate checks the field values on GetCloudRegionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCloudRegionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCloudID()) < 2 {
		return GetCloudRegionsRequestValidationError{
			field:  "CloudID",
			reason: "value length must be at least 2 runes",
		}
	}

	if utf8.RuneCountInString(m.GetAccountID()) < 2 {
		return GetCloudRegionsRequestValidationError{
			field:  "AccountID",
			reason: "value length must be at least 2 runes",
		}
	}

	return nil
}

// GetCloudRegionsRequestValidationError is the validation error returned by
// GetCloudRegionsRequest.Validate if the designated constraints aren't met.
type GetCloudRegionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCloudRegionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCloudRegionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCloudRegionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCloudRegionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCloudRegionsRequestValidationError) ErrorName() string {
	return "GetCloudRegionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCloudRegionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCloudRegionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCloudRegionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCloudRegionsRequestValidationError{}

// Validate checks the field values on GetCloudRegionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCloudRegionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCloudRegionsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetCloudRegionsResponseValidationError is the validation error returned by
// GetCloudRegionsResponse.Validate if the designated constraints aren't met.
type GetCloudRegionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCloudRegionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCloudRegionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCloudRegionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCloudRegionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCloudRegionsResponseValidationError) ErrorName() string {
	return "GetCloudRegionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCloudRegionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCloudRegionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCloudRegionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCloudRegionsResponseValidationError{}

// Validate checks the field values on ZoneInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ZoneInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ZoneID

	// no validation rules for Zone

	// no validation rules for ZoneName

	// no validation rules for ZoneState

	return nil
}

// ZoneInfoValidationError is the validation error returned by
// ZoneInfo.Validate if the designated constraints aren't met.
type ZoneInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ZoneInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ZoneInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ZoneInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ZoneInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ZoneInfoValidationError) ErrorName() string { return "ZoneInfoValidationError" }

// Error satisfies the builtin error interface
func (e ZoneInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sZoneInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ZoneInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ZoneInfoValidationError{}

// Validate checks the field values on CloudClusterInfo with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CloudClusterInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClusterID

	// no validation rules for ClusterName

	// no validation rules for ClusterDescription

	// no validation rules for ClusterVersion

	// no validation rules for ClusterOS

	// no validation rules for ClusterType

	// no validation rules for ClusterStatus

	// no validation rules for Location

	// no validation rules for ClusterLevel

	return nil
}

// CloudClusterInfoValidationError is the validation error returned by
// CloudClusterInfo.Validate if the designated constraints aren't met.
type CloudClusterInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudClusterInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudClusterInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudClusterInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudClusterInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudClusterInfoValidationError) ErrorName() string { return "CloudClusterInfoValidationError" }

// Error satisfies the builtin error interface
func (e CloudClusterInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudClusterInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudClusterInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudClusterInfoValidationError{}

// Validate checks the field values on ListCloudRegionClusterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudRegionClusterRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCloudID()) < 2 {
		return ListCloudRegionClusterRequestValidationError{
			field:  "CloudID",
			reason: "value length must be at least 2 runes",
		}
	}

	if utf8.RuneCountInString(m.GetRegion()) < 2 {
		return ListCloudRegionClusterRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 2 runes",
		}
	}

	if utf8.RuneCountInString(m.GetAccountID()) < 2 {
		return ListCloudRegionClusterRequestValidationError{
			field:  "AccountID",
			reason: "value length must be at least 2 runes",
		}
	}

	return nil
}

// ListCloudRegionClusterRequestValidationError is the validation error
// returned by ListCloudRegionClusterRequest.Validate if the designated
// constraints aren't met.
type ListCloudRegionClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudRegionClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudRegionClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudRegionClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudRegionClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudRegionClusterRequestValidationError) ErrorName() string {
	return "ListCloudRegionClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudRegionClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudRegionClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudRegionClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudRegionClusterRequestValidationError{}

// Validate checks the field values on ListCloudRegionClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudRegionClusterResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudRegionClusterResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCloudRegionClusterResponseValidationError is the validation error
// returned by ListCloudRegionClusterResponse.Validate if the designated
// constraints aren't met.
type ListCloudRegionClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudRegionClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudRegionClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudRegionClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudRegionClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudRegionClusterResponseValidationError) ErrorName() string {
	return "ListCloudRegionClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudRegionClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudRegionClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudRegionClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudRegionClusterResponseValidationError{}

// Validate checks the field values on GetCloudRegionZonesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCloudRegionZonesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCloudID()) < 2 {
		return GetCloudRegionZonesRequestValidationError{
			field:  "CloudID",
			reason: "value length must be at least 2 runes",
		}
	}

	// no validation rules for Region

	// no validation rules for AccountID

	return nil
}

// GetCloudRegionZonesRequestValidationError is the validation error returned
// by GetCloudRegionZonesRequest.Validate if the designated constraints aren't met.
type GetCloudRegionZonesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCloudRegionZonesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCloudRegionZonesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCloudRegionZonesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCloudRegionZonesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCloudRegionZonesRequestValidationError) ErrorName() string {
	return "GetCloudRegionZonesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCloudRegionZonesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCloudRegionZonesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCloudRegionZonesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCloudRegionZonesRequestValidationError{}

// Validate checks the field values on GetCloudRegionZonesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCloudRegionZonesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCloudRegionZonesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetCloudRegionZonesResponseValidationError is the validation error returned
// by GetCloudRegionZonesResponse.Validate if the designated constraints
// aren't met.
type GetCloudRegionZonesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCloudRegionZonesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCloudRegionZonesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCloudRegionZonesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCloudRegionZonesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCloudRegionZonesResponseValidationError) ErrorName() string {
	return "GetCloudRegionZonesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCloudRegionZonesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCloudRegionZonesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCloudRegionZonesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCloudRegionZonesResponseValidationError{}

// Validate checks the field values on OperationLog with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OperationLog) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ResourceType

	// no validation rules for ResourceID

	// no validation rules for TaskID

	// no validation rules for Message

	// no validation rules for OpUser

	// no validation rules for CreateTime

	// no validation rules for ClusterID

	// no validation rules for ProjectID

	return nil
}

// OperationLogValidationError is the validation error returned by
// OperationLog.Validate if the designated constraints aren't met.
type OperationLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperationLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperationLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperationLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperationLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperationLogValidationError) ErrorName() string { return "OperationLogValidationError" }

// Error satisfies the builtin error interface
func (e OperationLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperationLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperationLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperationLogValidationError{}

// Validate checks the field values on TaskOperationLog with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TaskOperationLog) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ResourceType

	// no validation rules for ResourceID

	// no validation rules for TaskID

	// no validation rules for Message

	// no validation rules for OpUser

	// no validation rules for CreateTime

	// no validation rules for ClusterID

	// no validation rules for ProjectID

	// no validation rules for Status

	// no validation rules for TaskType

	return nil
}

// TaskOperationLogValidationError is the validation error returned by
// TaskOperationLog.Validate if the designated constraints aren't met.
type TaskOperationLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskOperationLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskOperationLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskOperationLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskOperationLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskOperationLogValidationError) ErrorName() string { return "TaskOperationLogValidationError" }

// Error satisfies the builtin error interface
func (e TaskOperationLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskOperationLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskOperationLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskOperationLogValidationError{}

// Validate checks the field values on ListCloudInstanceTypeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudInstanceTypeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCloudID()) < 2 {
		return ListCloudInstanceTypeRequestValidationError{
			field:  "CloudID",
			reason: "value length must be at least 2 runes",
		}
	}

	// no validation rules for Region

	// no validation rules for AccountID

	if utf8.RuneCountInString(m.GetZone()) > 32 {
		return ListCloudInstanceTypeRequestValidationError{
			field:  "Zone",
			reason: "value length must be at most 32 runes",
		}
	}

	if utf8.RuneCountInString(m.GetNodeFamily()) > 32 {
		return ListCloudInstanceTypeRequestValidationError{
			field:  "NodeFamily",
			reason: "value length must be at most 32 runes",
		}
	}

	// no validation rules for Cpu

	// no validation rules for Memory

	// no validation rules for ProjectID

	// no validation rules for BizID

	// no validation rules for Version

	// no validation rules for Provider

	return nil
}

// ListCloudInstanceTypeRequestValidationError is the validation error returned
// by ListCloudInstanceTypeRequest.Validate if the designated constraints
// aren't met.
type ListCloudInstanceTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudInstanceTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudInstanceTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudInstanceTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudInstanceTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudInstanceTypeRequestValidationError) ErrorName() string {
	return "ListCloudInstanceTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudInstanceTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudInstanceTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudInstanceTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudInstanceTypeRequestValidationError{}

// Validate checks the field values on ListCloudInstanceTypeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudInstanceTypeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudInstanceTypeResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCloudInstanceTypeResponseValidationError is the validation error
// returned by ListCloudInstanceTypeResponse.Validate if the designated
// constraints aren't met.
type ListCloudInstanceTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudInstanceTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudInstanceTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudInstanceTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudInstanceTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudInstanceTypeResponseValidationError) ErrorName() string {
	return "ListCloudInstanceTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudInstanceTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudInstanceTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudInstanceTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudInstanceTypeResponseValidationError{}

// Validate checks the field values on InstanceType with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *InstanceType) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NodeType

	// no validation rules for TypeName

	// no validation rules for NodeFamily

	// no validation rules for Cpu

	// no validation rules for Memory

	// no validation rules for Gpu

	// no validation rules for Status

	// no validation rules for UnitPrice

	// no validation rules for Provider

	// no validation rules for ResourcePoolID

	if v, ok := interface{}(m.GetSystemDisk()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceTypeValidationError{
				field:  "SystemDisk",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDataDisks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceTypeValidationError{
					field:  fmt.Sprintf("DataDisks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// InstanceTypeValidationError is the validation error returned by
// InstanceType.Validate if the designated constraints aren't met.
type InstanceTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceTypeValidationError) ErrorName() string { return "InstanceTypeValidationError" }

// Error satisfies the builtin error interface
func (e InstanceTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceTypeValidationError{}

// Validate checks the field values on ListCloudInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudInstancesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCloudID()) < 2 {
		return ListCloudInstancesRequestValidationError{
			field:  "CloudID",
			reason: "value length must be at least 2 runes",
		}
	}

	// no validation rules for Region

	// no validation rules for AccountID

	if utf8.RuneCountInString(m.GetIpList()) < 1 {
		return ListCloudInstancesRequestValidationError{
			field:  "IpList",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// ListCloudInstancesRequestValidationError is the validation error returned by
// ListCloudInstancesRequest.Validate if the designated constraints aren't met.
type ListCloudInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudInstancesRequestValidationError) ErrorName() string {
	return "ListCloudInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudInstancesRequestValidationError{}

// Validate checks the field values on ListCloudInstancesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudInstancesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudInstancesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCloudInstancesResponseValidationError is the validation error returned
// by ListCloudInstancesResponse.Validate if the designated constraints aren't met.
type ListCloudInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudInstancesResponseValidationError) ErrorName() string {
	return "ListCloudInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudInstancesResponseValidationError{}

// Validate checks the field values on CloudNode with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CloudNode) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NodeID

	// no validation rules for InnerIP

	// no validation rules for InstanceType

	// no validation rules for Cpu

	// no validation rules for Mem

	// no validation rules for Gpu

	// no validation rules for Vpc

	// no validation rules for Region

	// no validation rules for InnerIPv6

	// no validation rules for ZoneID

	// no validation rules for Zone

	// no validation rules for ZoneName

	// no validation rules for CloudRegionNode

	return nil
}

// CloudNodeValidationError is the validation error returned by
// CloudNode.Validate if the designated constraints aren't met.
type CloudNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudNodeValidationError) ErrorName() string { return "CloudNodeValidationError" }

// Error satisfies the builtin error interface
func (e CloudNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudNodeValidationError{}

// Validate checks the field values on GetCloudAccountTypeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCloudAccountTypeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCloudID()) < 2 {
		return GetCloudAccountTypeRequestValidationError{
			field:  "CloudID",
			reason: "value length must be at least 2 runes",
		}
	}

	// no validation rules for Region

	// no validation rules for AccountID

	return nil
}

// GetCloudAccountTypeRequestValidationError is the validation error returned
// by GetCloudAccountTypeRequest.Validate if the designated constraints aren't met.
type GetCloudAccountTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCloudAccountTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCloudAccountTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCloudAccountTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCloudAccountTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCloudAccountTypeRequestValidationError) ErrorName() string {
	return "GetCloudAccountTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCloudAccountTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCloudAccountTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCloudAccountTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCloudAccountTypeRequestValidationError{}

// Validate checks the field values on GetCloudAccountTypeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCloudAccountTypeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCloudAccountTypeResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCloudAccountTypeResponseValidationError is the validation error returned
// by GetCloudAccountTypeResponse.Validate if the designated constraints
// aren't met.
type GetCloudAccountTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCloudAccountTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCloudAccountTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCloudAccountTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCloudAccountTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCloudAccountTypeResponseValidationError) ErrorName() string {
	return "GetCloudAccountTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCloudAccountTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCloudAccountTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCloudAccountTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCloudAccountTypeResponseValidationError{}

// Validate checks the field values on CloudAccountType with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CloudAccountType) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	return nil
}

// CloudAccountTypeValidationError is the validation error returned by
// CloudAccountType.Validate if the designated constraints aren't met.
type CloudAccountTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAccountTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAccountTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAccountTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAccountTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAccountTypeValidationError) ErrorName() string { return "CloudAccountTypeValidationError" }

// Error satisfies the builtin error interface
func (e CloudAccountTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAccountType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAccountTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAccountTypeValidationError{}

// Validate checks the field values on GetCloudBandwidthPackagesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCloudBandwidthPackagesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCloudID()) < 1 {
		return GetCloudBandwidthPackagesRequestValidationError{
			field:  "CloudID",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetRegion()) < 1 {
		return GetCloudBandwidthPackagesRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for AccountID

	return nil
}

// GetCloudBandwidthPackagesRequestValidationError is the validation error
// returned by GetCloudBandwidthPackagesRequest.Validate if the designated
// constraints aren't met.
type GetCloudBandwidthPackagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCloudBandwidthPackagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCloudBandwidthPackagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCloudBandwidthPackagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCloudBandwidthPackagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCloudBandwidthPackagesRequestValidationError) ErrorName() string {
	return "GetCloudBandwidthPackagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCloudBandwidthPackagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCloudBandwidthPackagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCloudBandwidthPackagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCloudBandwidthPackagesRequestValidationError{}

// Validate checks the field values on GetCloudBandwidthPackagesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCloudBandwidthPackagesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCloudBandwidthPackagesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetCloudBandwidthPackagesResponseValidationError is the validation error
// returned by GetCloudBandwidthPackagesResponse.Validate if the designated
// constraints aren't met.
type GetCloudBandwidthPackagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCloudBandwidthPackagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCloudBandwidthPackagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCloudBandwidthPackagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCloudBandwidthPackagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCloudBandwidthPackagesResponseValidationError) ErrorName() string {
	return "GetCloudBandwidthPackagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCloudBandwidthPackagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCloudBandwidthPackagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCloudBandwidthPackagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCloudBandwidthPackagesResponseValidationError{}

// Validate checks the field values on BandwidthPackageInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BandwidthPackageInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for NetworkType

	// no validation rules for Status

	// no validation rules for Bandwidth

	return nil
}

// BandwidthPackageInfoValidationError is the validation error returned by
// BandwidthPackageInfo.Validate if the designated constraints aren't met.
type BandwidthPackageInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BandwidthPackageInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BandwidthPackageInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BandwidthPackageInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BandwidthPackageInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BandwidthPackageInfoValidationError) ErrorName() string {
	return "BandwidthPackageInfoValidationError"
}

// Error satisfies the builtin error interface
func (e BandwidthPackageInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBandwidthPackageInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BandwidthPackageInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BandwidthPackageInfoValidationError{}

// Validate checks the field values on ListCloudOsImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudOsImageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCloudID()) < 2 {
		return ListCloudOsImageRequestValidationError{
			field:  "CloudID",
			reason: "value length must be at least 2 runes",
		}
	}

	// no validation rules for Region

	// no validation rules for AccountID

	// no validation rules for Provider

	return nil
}

// ListCloudOsImageRequestValidationError is the validation error returned by
// ListCloudOsImageRequest.Validate if the designated constraints aren't met.
type ListCloudOsImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudOsImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudOsImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudOsImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudOsImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudOsImageRequestValidationError) ErrorName() string {
	return "ListCloudOsImageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudOsImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudOsImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudOsImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudOsImageRequestValidationError{}

// Validate checks the field values on ListCloudOsImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudOsImageResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudOsImageResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCloudOsImageResponseValidationError is the validation error returned by
// ListCloudOsImageResponse.Validate if the designated constraints aren't met.
type ListCloudOsImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudOsImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudOsImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudOsImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudOsImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudOsImageResponseValidationError) ErrorName() string {
	return "ListCloudOsImageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudOsImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudOsImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudOsImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudOsImageResponseValidationError{}

// Validate checks the field values on OsImage with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OsImage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ImageID

	// no validation rules for Alias

	// no validation rules for Arch

	// no validation rules for OsCustomizeType

	// no validation rules for OsName

	// no validation rules for SeriesName

	// no validation rules for Status

	// no validation rules for Provider

	return nil
}

// OsImageValidationError is the validation error returned by OsImage.Validate
// if the designated constraints aren't met.
type OsImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OsImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OsImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OsImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OsImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OsImageValidationError) ErrorName() string { return "OsImageValidationError" }

// Error satisfies the builtin error interface
func (e OsImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOsImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OsImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OsImageValidationError{}

// Validate checks the field values on ListCloudProjectsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudProjectsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCloudID()) < 2 {
		return ListCloudProjectsRequestValidationError{
			field:  "CloudID",
			reason: "value length must be at least 2 runes",
		}
	}

	// no validation rules for Region

	// no validation rules for AccountID

	return nil
}

// ListCloudProjectsRequestValidationError is the validation error returned by
// ListCloudProjectsRequest.Validate if the designated constraints aren't met.
type ListCloudProjectsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudProjectsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudProjectsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudProjectsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudProjectsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudProjectsRequestValidationError) ErrorName() string {
	return "ListCloudProjectsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudProjectsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudProjectsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudProjectsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudProjectsRequestValidationError{}

// Validate checks the field values on ListCloudProjectsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudProjectsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudProjectsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCloudProjectsResponseValidationError is the validation error returned by
// ListCloudProjectsResponse.Validate if the designated constraints aren't met.
type ListCloudProjectsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudProjectsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudProjectsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudProjectsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudProjectsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudProjectsResponseValidationError) ErrorName() string {
	return "ListCloudProjectsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudProjectsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudProjectsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudProjectsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudProjectsResponseValidationError{}

// Validate checks the field values on CloudProject with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CloudProject) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectID

	// no validation rules for ProjectName

	return nil
}

// CloudProjectValidationError is the validation error returned by
// CloudProject.Validate if the designated constraints aren't met.
type CloudProjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudProjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudProjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudProjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudProjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudProjectValidationError) ErrorName() string { return "CloudProjectValidationError" }

// Error satisfies the builtin error interface
func (e CloudProjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudProject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudProjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudProjectValidationError{}

// Validate checks the field values on ListCloudVpcsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudVpcsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCloudID()) < 2 {
		return ListCloudVpcsRequestValidationError{
			field:  "CloudID",
			reason: "value length must be at least 2 runes",
		}
	}

	// no validation rules for Region

	// no validation rules for AccountID

	// no validation rules for VpcID

	return nil
}

// ListCloudVpcsRequestValidationError is the validation error returned by
// ListCloudVpcsRequest.Validate if the designated constraints aren't met.
type ListCloudVpcsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudVpcsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudVpcsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudVpcsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudVpcsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudVpcsRequestValidationError) ErrorName() string {
	return "ListCloudVpcsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudVpcsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudVpcsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudVpcsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudVpcsRequestValidationError{}

// Validate checks the field values on ListCloudVpcsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudVpcsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudVpcsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCloudVpcsResponseValidationError is the validation error returned by
// ListCloudVpcsResponse.Validate if the designated constraints aren't met.
type ListCloudVpcsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudVpcsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudVpcsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudVpcsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudVpcsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudVpcsResponseValidationError) ErrorName() string {
	return "ListCloudVpcsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudVpcsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudVpcsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudVpcsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudVpcsResponseValidationError{}

// Validate checks the field values on CloudVpc with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CloudVpc) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for VpcId

	// no validation rules for Ipv4Cidr

	// no validation rules for Ipv6Cidr

	for idx, item := range m.GetCidrs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudVpcValidationError{
					field:  fmt.Sprintf("Cidrs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CloudVpcValidationError is the validation error returned by
// CloudVpc.Validate if the designated constraints aren't met.
type CloudVpcValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudVpcValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudVpcValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudVpcValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudVpcValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudVpcValidationError) ErrorName() string { return "CloudVpcValidationError" }

// Error satisfies the builtin error interface
func (e CloudVpcValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudVpc.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudVpcValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudVpcValidationError{}

// Validate checks the field values on AssistantCidr with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AssistantCidr) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Cidr

	// no validation rules for CidrType

	return nil
}

// AssistantCidrValidationError is the validation error returned by
// AssistantCidr.Validate if the designated constraints aren't met.
type AssistantCidrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssistantCidrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssistantCidrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssistantCidrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssistantCidrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssistantCidrValidationError) ErrorName() string { return "AssistantCidrValidationError" }

// Error satisfies the builtin error interface
func (e AssistantCidrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssistantCidr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssistantCidrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssistantCidrValidationError{}

// Validate checks the field values on ListCloudSubnetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudSubnetsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCloudID()) < 2 {
		return ListCloudSubnetsRequestValidationError{
			field:  "CloudID",
			reason: "value length must be at least 2 runes",
		}
	}

	// no validation rules for Region

	if utf8.RuneCountInString(m.GetAccountID()) < 2 {
		return ListCloudSubnetsRequestValidationError{
			field:  "AccountID",
			reason: "value length must be at least 2 runes",
		}
	}

	// no validation rules for VpcID

	// no validation rules for Zone

	// no validation rules for SubnetID

	return nil
}

// ListCloudSubnetsRequestValidationError is the validation error returned by
// ListCloudSubnetsRequest.Validate if the designated constraints aren't met.
type ListCloudSubnetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudSubnetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudSubnetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudSubnetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudSubnetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudSubnetsRequestValidationError) ErrorName() string {
	return "ListCloudSubnetsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudSubnetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudSubnetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudSubnetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudSubnetsRequestValidationError{}

// Validate checks the field values on ListCloudSubnetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudSubnetsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudSubnetsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCloudSubnetsResponseValidationError is the validation error returned by
// ListCloudSubnetsResponse.Validate if the designated constraints aren't met.
type ListCloudSubnetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudSubnetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudSubnetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudSubnetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudSubnetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudSubnetsResponseValidationError) ErrorName() string {
	return "ListCloudSubnetsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudSubnetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudSubnetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudSubnetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudSubnetsResponseValidationError{}

// Validate checks the field values on Subnet with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Subnet) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for VpcID

	// no validation rules for SubnetID

	// no validation rules for SubnetName

	// no validation rules for CidrRange

	// no validation rules for Ipv6CidrRange

	// no validation rules for Zone

	// no validation rules for AvailableIPAddressCount

	// no validation rules for ZoneName

	return nil
}

// SubnetValidationError is the validation error returned by Subnet.Validate if
// the designated constraints aren't met.
type SubnetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubnetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubnetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubnetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubnetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubnetValidationError) ErrorName() string { return "SubnetValidationError" }

// Error satisfies the builtin error interface
func (e SubnetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubnet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubnetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubnetValidationError{}

// Validate checks the field values on ListCloudSecurityGroupsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudSecurityGroupsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCloudID()) < 2 {
		return ListCloudSecurityGroupsRequestValidationError{
			field:  "CloudID",
			reason: "value length must be at least 2 runes",
		}
	}

	// no validation rules for Region

	// no validation rules for AccountID

	return nil
}

// ListCloudSecurityGroupsRequestValidationError is the validation error
// returned by ListCloudSecurityGroupsRequest.Validate if the designated
// constraints aren't met.
type ListCloudSecurityGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudSecurityGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudSecurityGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudSecurityGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudSecurityGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudSecurityGroupsRequestValidationError) ErrorName() string {
	return "ListCloudSecurityGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudSecurityGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudSecurityGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudSecurityGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudSecurityGroupsRequestValidationError{}

// Validate checks the field values on ListCloudSecurityGroupsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudSecurityGroupsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudSecurityGroupsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCloudSecurityGroupsResponseValidationError is the validation error
// returned by ListCloudSecurityGroupsResponse.Validate if the designated
// constraints aren't met.
type ListCloudSecurityGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudSecurityGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudSecurityGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudSecurityGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudSecurityGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudSecurityGroupsResponseValidationError) ErrorName() string {
	return "ListCloudSecurityGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudSecurityGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudSecurityGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudSecurityGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudSecurityGroupsResponseValidationError{}

// Validate checks the field values on ListKeyPairsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListKeyPairsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCloudID()) < 2 {
		return ListKeyPairsRequestValidationError{
			field:  "CloudID",
			reason: "value length must be at least 2 runes",
		}
	}

	// no validation rules for Region

	// no validation rules for AccountID

	return nil
}

// ListKeyPairsRequestValidationError is the validation error returned by
// ListKeyPairsRequest.Validate if the designated constraints aren't met.
type ListKeyPairsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKeyPairsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKeyPairsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKeyPairsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKeyPairsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKeyPairsRequestValidationError) ErrorName() string {
	return "ListKeyPairsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListKeyPairsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKeyPairsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKeyPairsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKeyPairsRequestValidationError{}

// Validate checks the field values on ListKeyPairsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListKeyPairsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListKeyPairsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListKeyPairsResponseValidationError is the validation error returned by
// ListKeyPairsResponse.Validate if the designated constraints aren't met.
type ListKeyPairsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKeyPairsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKeyPairsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKeyPairsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKeyPairsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKeyPairsResponseValidationError) ErrorName() string {
	return "ListKeyPairsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListKeyPairsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKeyPairsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKeyPairsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKeyPairsResponseValidationError{}

// Validate checks the field values on KeyPair with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *KeyPair) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for KeyID

	// no validation rules for KeyName

	// no validation rules for Description

	return nil
}

// KeyPairValidationError is the validation error returned by KeyPair.Validate
// if the designated constraints aren't met.
type KeyPairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyPairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyPairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyPairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyPairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyPairValidationError) ErrorName() string { return "KeyPairValidationError" }

// Error satisfies the builtin error interface
func (e KeyPairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeyPair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyPairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyPairValidationError{}

// Validate checks the field values on ListOperationLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOperationLogsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _ListOperationLogsRequest_ResourceType_InLookup[m.GetResourceType()]; !ok {
		return ListOperationLogsRequestValidationError{
			field:  "ResourceType",
			reason: "value must be in list [cluster autoscalingoption cloud cloudvpc nodegroup task]",
		}
	}

	// no validation rules for ResourceID

	if m.GetStartTime() <= 0 {
		return ListOperationLogsRequestValidationError{
			field:  "StartTime",
			reason: "value must be greater than 0",
		}
	}

	if m.GetEndTime() <= 0 {
		return ListOperationLogsRequestValidationError{
			field:  "EndTime",
			reason: "value must be greater than 0",
		}
	}

	if m.GetLimit() <= 0 {
		return ListOperationLogsRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
	}

	if m.GetPage() <= 0 {
		return ListOperationLogsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Simple

	// no validation rules for TaskIDNull

	// no validation rules for ClusterID

	// no validation rules for ProjectID

	// no validation rules for Status

	// no validation rules for TaskType

	// no validation rules for V2

	// no validation rules for IpList

	return nil
}

// ListOperationLogsRequestValidationError is the validation error returned by
// ListOperationLogsRequest.Validate if the designated constraints aren't met.
type ListOperationLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOperationLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOperationLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOperationLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOperationLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOperationLogsRequestValidationError) ErrorName() string {
	return "ListOperationLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOperationLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOperationLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOperationLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOperationLogsRequestValidationError{}

var _ListOperationLogsRequest_ResourceType_InLookup = map[string]struct{}{
	"cluster":           {},
	"autoscalingoption": {},
	"cloud":             {},
	"cloudvpc":          {},
	"nodegroup":         {},
	"task":              {},
}

// Validate checks the field values on ListOperationLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOperationLogsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOperationLogsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListOperationLogsResponseValidationError is the validation error returned by
// ListOperationLogsResponse.Validate if the designated constraints aren't met.
type ListOperationLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOperationLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOperationLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOperationLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOperationLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOperationLogsResponseValidationError) ErrorName() string {
	return "ListOperationLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOperationLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOperationLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOperationLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOperationLogsResponseValidationError{}

// Validate checks the field values on ListOperationLogsResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOperationLogsResponseData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Count

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOperationLogsResponseDataValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListOperationLogsResponseDataValidationError is the validation error
// returned by ListOperationLogsResponseData.Validate if the designated
// constraints aren't met.
type ListOperationLogsResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOperationLogsResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOperationLogsResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOperationLogsResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOperationLogsResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOperationLogsResponseDataValidationError) ErrorName() string {
	return "ListOperationLogsResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e ListOperationLogsResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOperationLogsResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOperationLogsResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOperationLogsResponseDataValidationError{}

// Validate checks the field values on OperationLogDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OperationLogDetail) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ResourceType

	// no validation rules for ResourceID

	// no validation rules for TaskID

	// no validation rules for Message

	// no validation rules for OpUser

	// no validation rules for CreateTime

	if v, ok := interface{}(m.GetTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperationLogDetailValidationError{
				field:  "Task",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TaskType

	// no validation rules for Status

	return nil
}

// OperationLogDetailValidationError is the validation error returned by
// OperationLogDetail.Validate if the designated constraints aren't met.
type OperationLogDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperationLogDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperationLogDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperationLogDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperationLogDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperationLogDetailValidationError) ErrorName() string {
	return "OperationLogDetailValidationError"
}

// Error satisfies the builtin error interface
func (e OperationLogDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperationLogDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperationLogDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperationLogDetailValidationError{}

// Validate checks the field values on SecurityGroup with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SecurityGroup) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SecurityGroupID

	// no validation rules for SecurityGroupName

	// no validation rules for Description

	return nil
}

// SecurityGroupValidationError is the validation error returned by
// SecurityGroup.Validate if the designated constraints aren't met.
type SecurityGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecurityGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecurityGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecurityGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecurityGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecurityGroupValidationError) ErrorName() string { return "SecurityGroupValidationError" }

// Error satisfies the builtin error interface
func (e SecurityGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecurityGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecurityGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecurityGroupValidationError{}

// Validate checks the field values on NodeOperationStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NodeOperationStatus) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetFail() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeOperationStatusValidationError{
					field:  fmt.Sprintf("Fail[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSuccess() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeOperationStatusValidationError{
					field:  fmt.Sprintf("Success[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// NodeOperationStatusValidationError is the validation error returned by
// NodeOperationStatus.Validate if the designated constraints aren't met.
type NodeOperationStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeOperationStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeOperationStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeOperationStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeOperationStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeOperationStatusValidationError) ErrorName() string {
	return "NodeOperationStatusValidationError"
}

// Error satisfies the builtin error interface
func (e NodeOperationStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeOperationStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeOperationStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeOperationStatusValidationError{}

// Validate checks the field values on NodeOperationStatusInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NodeOperationStatusInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NodeName

	// no validation rules for Message

	return nil
}

// NodeOperationStatusInfoValidationError is the validation error returned by
// NodeOperationStatusInfo.Validate if the designated constraints aren't met.
type NodeOperationStatusInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeOperationStatusInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeOperationStatusInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeOperationStatusInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeOperationStatusInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeOperationStatusInfoValidationError) ErrorName() string {
	return "NodeOperationStatusInfoValidationError"
}

// Error satisfies the builtin error interface
func (e NodeOperationStatusInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeOperationStatusInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeOperationStatusInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeOperationStatusInfoValidationError{}

// Validate checks the field values on DrainNodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DrainNodeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetClusterID()) < 1 {
		return DrainNodeRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be at least 1 bytes",
		}
	}

	// no validation rules for Force

	// no validation rules for GracePeriodSeconds

	// no validation rules for IgnoreAllDaemonSets

	// no validation rules for Timeout

	// no validation rules for DeleteLocalData

	// no validation rules for Selector

	// no validation rules for PodSelector

	// no validation rules for DisableEviction

	// no validation rules for SkipWaitForDeleteTimeoutSeconds

	// no validation rules for DryRun

	return nil
}

// DrainNodeRequestValidationError is the validation error returned by
// DrainNodeRequest.Validate if the designated constraints aren't met.
type DrainNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DrainNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DrainNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DrainNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DrainNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DrainNodeRequestValidationError) ErrorName() string { return "DrainNodeRequestValidationError" }

// Error satisfies the builtin error interface
func (e DrainNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDrainNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DrainNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DrainNodeRequestValidationError{}

// Validate checks the field values on DrainNodeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DrainNodeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DrainNodeResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DrainNodeResponseValidationError is the validation error returned by
// DrainNodeResponse.Validate if the designated constraints aren't met.
type DrainNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DrainNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DrainNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DrainNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DrainNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DrainNodeResponseValidationError) ErrorName() string {
	return "DrainNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DrainNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDrainNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DrainNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DrainNodeResponseValidationError{}

// Validate checks the field values on NodeAnnotation with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NodeAnnotation) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetNodeName()) < 1 {
		return NodeAnnotationValidationError{
			field:  "NodeName",
			reason: "value length must be at least 1 bytes",
		}
	}

	// no validation rules for Annotations

	return nil
}

// NodeAnnotationValidationError is the validation error returned by
// NodeAnnotation.Validate if the designated constraints aren't met.
type NodeAnnotationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeAnnotationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeAnnotationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeAnnotationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeAnnotationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeAnnotationValidationError) ErrorName() string { return "NodeAnnotationValidationError" }

// Error satisfies the builtin error interface
func (e NodeAnnotationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeAnnotation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeAnnotationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeAnnotationValidationError{}

// Validate checks the field values on UpdateNodeAnnotationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNodeAnnotationsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetClusterID()) < 1 {
		return UpdateNodeAnnotationsRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be at least 1 bytes",
		}
	}

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateNodeAnnotationsRequestValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpdateNodeAnnotationsRequestValidationError is the validation error returned
// by UpdateNodeAnnotationsRequest.Validate if the designated constraints
// aren't met.
type UpdateNodeAnnotationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNodeAnnotationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNodeAnnotationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNodeAnnotationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNodeAnnotationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNodeAnnotationsRequestValidationError) ErrorName() string {
	return "UpdateNodeAnnotationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNodeAnnotationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNodeAnnotationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNodeAnnotationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNodeAnnotationsRequestValidationError{}

// Validate checks the field values on UpdateNodeAnnotationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNodeAnnotationsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeAnnotationsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateNodeAnnotationsResponseValidationError is the validation error
// returned by UpdateNodeAnnotationsResponse.Validate if the designated
// constraints aren't met.
type UpdateNodeAnnotationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNodeAnnotationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNodeAnnotationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNodeAnnotationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNodeAnnotationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNodeAnnotationsResponseValidationError) ErrorName() string {
	return "UpdateNodeAnnotationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNodeAnnotationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNodeAnnotationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNodeAnnotationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNodeAnnotationsResponseValidationError{}

// Validate checks the field values on NodeLabel with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *NodeLabel) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetNodeName()) < 1 {
		return NodeLabelValidationError{
			field:  "NodeName",
			reason: "value length must be at least 1 bytes",
		}
	}

	// no validation rules for Labels

	return nil
}

// NodeLabelValidationError is the validation error returned by
// NodeLabel.Validate if the designated constraints aren't met.
type NodeLabelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeLabelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeLabelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeLabelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeLabelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeLabelValidationError) ErrorName() string { return "NodeLabelValidationError" }

// Error satisfies the builtin error interface
func (e NodeLabelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeLabel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeLabelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeLabelValidationError{}

// Validate checks the field values on UpdateNodeLabelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNodeLabelsRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateNodeLabelsRequestValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetClusterID()) < 1 {
		return UpdateNodeLabelsRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be at least 1 bytes",
		}
	}

	return nil
}

// UpdateNodeLabelsRequestValidationError is the validation error returned by
// UpdateNodeLabelsRequest.Validate if the designated constraints aren't met.
type UpdateNodeLabelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNodeLabelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNodeLabelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNodeLabelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNodeLabelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNodeLabelsRequestValidationError) ErrorName() string {
	return "UpdateNodeLabelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNodeLabelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNodeLabelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNodeLabelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNodeLabelsRequestValidationError{}

// Validate checks the field values on UpdateNodeLabelsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNodeLabelsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeLabelsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateNodeLabelsResponseValidationError is the validation error returned by
// UpdateNodeLabelsResponse.Validate if the designated constraints aren't met.
type UpdateNodeLabelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNodeLabelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNodeLabelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNodeLabelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNodeLabelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNodeLabelsResponseValidationError) ErrorName() string {
	return "UpdateNodeLabelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNodeLabelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNodeLabelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNodeLabelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNodeLabelsResponseValidationError{}

// Validate checks the field values on NodeTaint with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *NodeTaint) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetNodeName()) < 1 {
		return NodeTaintValidationError{
			field:  "NodeName",
			reason: "value length must be at least 1 bytes",
		}
	}

	for idx, item := range m.GetTaints() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeTaintValidationError{
					field:  fmt.Sprintf("Taints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// NodeTaintValidationError is the validation error returned by
// NodeTaint.Validate if the designated constraints aren't met.
type NodeTaintValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeTaintValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeTaintValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeTaintValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeTaintValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeTaintValidationError) ErrorName() string { return "NodeTaintValidationError" }

// Error satisfies the builtin error interface
func (e NodeTaintValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeTaint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeTaintValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeTaintValidationError{}

// Validate checks the field values on UpdateNodeTaintsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNodeTaintsRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateNodeTaintsRequestValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetClusterID()) < 1 {
		return UpdateNodeTaintsRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be at least 1 bytes",
		}
	}

	return nil
}

// UpdateNodeTaintsRequestValidationError is the validation error returned by
// UpdateNodeTaintsRequest.Validate if the designated constraints aren't met.
type UpdateNodeTaintsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNodeTaintsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNodeTaintsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNodeTaintsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNodeTaintsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNodeTaintsRequestValidationError) ErrorName() string {
	return "UpdateNodeTaintsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNodeTaintsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNodeTaintsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNodeTaintsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNodeTaintsRequestValidationError{}

// Validate checks the field values on UpdateNodeTaintsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNodeTaintsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNodeTaintsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateNodeTaintsResponseValidationError is the validation error returned by
// UpdateNodeTaintsResponse.Validate if the designated constraints aren't met.
type UpdateNodeTaintsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNodeTaintsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNodeTaintsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNodeTaintsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNodeTaintsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNodeTaintsResponseValidationError) ErrorName() string {
	return "UpdateNodeTaintsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNodeTaintsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNodeTaintsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNodeTaintsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNodeTaintsResponseValidationError{}

// Validate checks the field values on HealthRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HealthRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// HealthRequestValidationError is the validation error returned by
// HealthRequest.Validate if the designated constraints aren't met.
type HealthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthRequestValidationError) ErrorName() string { return "HealthRequestValidationError" }

// Error satisfies the builtin error interface
func (e HealthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthRequestValidationError{}

// Validate checks the field values on HealthResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HealthResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Available

	return nil
}

// HealthResponseValidationError is the validation error returned by
// HealthResponse.Validate if the designated constraints aren't met.
type HealthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthResponseValidationError) ErrorName() string { return "HealthResponseValidationError" }

// Error satisfies the builtin error interface
func (e HealthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthResponseValidationError{}

// Validate checks the field values on ListResourceSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListResourceSchemaRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CloudID

	return nil
}

// ListResourceSchemaRequestValidationError is the validation error returned by
// ListResourceSchemaRequest.Validate if the designated constraints aren't met.
type ListResourceSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResourceSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResourceSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResourceSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResourceSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResourceSchemaRequestValidationError) ErrorName() string {
	return "ListResourceSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListResourceSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResourceSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResourceSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResourceSchemaRequestValidationError{}

// Validate checks the field values on GetResourceSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetResourceSchemaRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CloudID

	// no validation rules for Name

	return nil
}

// GetResourceSchemaRequestValidationError is the validation error returned by
// GetResourceSchemaRequest.Validate if the designated constraints aren't met.
type GetResourceSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourceSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourceSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourceSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourceSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourceSchemaRequestValidationError) ErrorName() string {
	return "GetResourceSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourceSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourceSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourceSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourceSchemaRequestValidationError{}

// Validate checks the field values on QueryPermByActionIDReqData with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *QueryPermByActionIDReqData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectId

	// no validation rules for ClusterId

	// no validation rules for Name

	// no validation rules for TemplateId

	// no validation rules for AccountId

	if utf8.RuneCountInString(m.GetOperator()) < 1 {
		return QueryPermByActionIDReqDataValidationError{
			field:  "Operator",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// QueryPermByActionIDReqDataValidationError is the validation error returned
// by QueryPermByActionIDReqData.Validate if the designated constraints aren't met.
type QueryPermByActionIDReqDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryPermByActionIDReqDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryPermByActionIDReqDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryPermByActionIDReqDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryPermByActionIDReqDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryPermByActionIDReqDataValidationError) ErrorName() string {
	return "QueryPermByActionIDReqDataValidationError"
}

// Error satisfies the builtin error interface
func (e QueryPermByActionIDReqDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryPermByActionIDReqData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryPermByActionIDReqDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryPermByActionIDReqDataValidationError{}

// Validate checks the field values on QueryPermByActionIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *QueryPermByActionIDRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ActionID

	if v, ok := interface{}(m.GetPermCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryPermByActionIDRequestValidationError{
				field:  "PermCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// QueryPermByActionIDRequestValidationError is the validation error returned
// by QueryPermByActionIDRequest.Validate if the designated constraints aren't met.
type QueryPermByActionIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryPermByActionIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryPermByActionIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryPermByActionIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryPermByActionIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryPermByActionIDRequestValidationError) ErrorName() string {
	return "QueryPermByActionIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryPermByActionIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryPermByActionIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryPermByActionIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryPermByActionIDRequestValidationError{}

// Validate checks the field values on Perms with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Perms) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetPerms() {
		_ = val

		// no validation rules for Perms[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PermsValidationError{
					field:  fmt.Sprintf("Perms[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PermsValidationError is the validation error returned by Perms.Validate if
// the designated constraints aren't met.
type PermsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermsValidationError) ErrorName() string { return "PermsValidationError" }

// Error satisfies the builtin error interface
func (e PermsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerms.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermsValidationError{}

// Validate checks the field values on QueryPermByActionIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *QueryPermByActionIDResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryPermByActionIDResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// QueryPermByActionIDResponseValidationError is the validation error returned
// by QueryPermByActionIDResponse.Validate if the designated constraints
// aren't met.
type QueryPermByActionIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryPermByActionIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryPermByActionIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryPermByActionIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryPermByActionIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryPermByActionIDResponseValidationError) ErrorName() string {
	return "QueryPermByActionIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryPermByActionIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryPermByActionIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryPermByActionIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryPermByActionIDResponseValidationError{}

// Validate checks the field values on CommonResp with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CommonResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommonRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CommonRespValidationError is the validation error returned by
// CommonResp.Validate if the designated constraints aren't met.
type CommonRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonRespValidationError) ErrorName() string { return "CommonRespValidationError" }

// Error satisfies the builtin error interface
func (e CommonRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonRespValidationError{}

// Validate checks the field values on CommonListResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CommonListResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommonListRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CommonListRespValidationError is the validation error returned by
// CommonListResp.Validate if the designated constraints aren't met.
type CommonListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonListRespValidationError) ErrorName() string { return "CommonListRespValidationError" }

// Error satisfies the builtin error interface
func (e CommonListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonListRespValidationError{}

// Validate checks the field values on ListBKCloudRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListBKCloudRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListBKCloudRequestValidationError is the validation error returned by
// ListBKCloudRequest.Validate if the designated constraints aren't met.
type ListBKCloudRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBKCloudRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBKCloudRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBKCloudRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBKCloudRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBKCloudRequestValidationError) ErrorName() string {
	return "ListBKCloudRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBKCloudRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBKCloudRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBKCloudRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBKCloudRequestValidationError{}

// Validate checks the field values on ListCCTopologyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCCTopologyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 5 || l > 100 {
		return ListCCTopologyRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 5 and 100 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		return ListCCTopologyRequestValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
	}

	if !_ListCCTopologyRequest_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		return ListCCTopologyRequestValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
	}

	// no validation rules for BizID

	if v, ok := interface{}(m.GetFilterInter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCCTopologyRequestValidationError{
				field:  "FilterInter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListCCTopologyRequestValidationError is the validation error returned by
// ListCCTopologyRequest.Validate if the designated constraints aren't met.
type ListCCTopologyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCCTopologyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCCTopologyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCCTopologyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCCTopologyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCCTopologyRequestValidationError) ErrorName() string {
	return "ListCCTopologyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCCTopologyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCCTopologyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCCTopologyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCCTopologyRequestValidationError{}

var _ListCCTopologyRequest_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on GetBkSopsTemplateListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetBkSopsTemplateListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BusinessID

	// no validation rules for Operator

	if _, ok := _GetBkSopsTemplateListRequest_TemplateSource_InLookup[m.GetTemplateSource()]; !ok {
		return GetBkSopsTemplateListRequestValidationError{
			field:  "TemplateSource",
			reason: "value must be in list [business common ]",
		}
	}

	if _, ok := _GetBkSopsTemplateListRequest_Scope_InLookup[m.GetScope()]; !ok {
		return GetBkSopsTemplateListRequestValidationError{
			field:  "Scope",
			reason: "value must be in list [cmdb_biz project ]",
		}
	}

	return nil
}

// GetBkSopsTemplateListRequestValidationError is the validation error returned
// by GetBkSopsTemplateListRequest.Validate if the designated constraints
// aren't met.
type GetBkSopsTemplateListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBkSopsTemplateListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBkSopsTemplateListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBkSopsTemplateListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBkSopsTemplateListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBkSopsTemplateListRequestValidationError) ErrorName() string {
	return "GetBkSopsTemplateListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBkSopsTemplateListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBkSopsTemplateListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBkSopsTemplateListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBkSopsTemplateListRequestValidationError{}

var _GetBkSopsTemplateListRequest_TemplateSource_InLookup = map[string]struct{}{
	"business": {},
	"common":   {},
	"":         {},
}

var _GetBkSopsTemplateListRequest_Scope_InLookup = map[string]struct{}{
	"cmdb_biz": {},
	"project":  {},
	"":         {},
}

// Validate checks the field values on GetBkSopsTemplateListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetBkSopsTemplateListResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBkSopsTemplateListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetBkSopsTemplateListResponseValidationError is the validation error
// returned by GetBkSopsTemplateListResponse.Validate if the designated
// constraints aren't met.
type GetBkSopsTemplateListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBkSopsTemplateListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBkSopsTemplateListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBkSopsTemplateListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBkSopsTemplateListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBkSopsTemplateListResponseValidationError) ErrorName() string {
	return "GetBkSopsTemplateListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBkSopsTemplateListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBkSopsTemplateListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBkSopsTemplateListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBkSopsTemplateListResponseValidationError{}

// Validate checks the field values on TemplateInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TemplateInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TemplateName

	// no validation rules for TemplateID

	// no validation rules for BusinessID

	// no validation rules for BusinessName

	// no validation rules for Creator

	// no validation rules for Editor

	// no validation rules for ProjectID

	return nil
}

// TemplateInfoValidationError is the validation error returned by
// TemplateInfo.Validate if the designated constraints aren't met.
type TemplateInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateInfoValidationError) ErrorName() string { return "TemplateInfoValidationError" }

// Error satisfies the builtin error interface
func (e TemplateInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateInfoValidationError{}

// Validate checks the field values on GetBkSopsTemplateInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetBkSopsTemplateInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BusinessID

	// no validation rules for TemplateID

	// no validation rules for Operator

	if _, ok := _GetBkSopsTemplateInfoRequest_TemplateSource_InLookup[m.GetTemplateSource()]; !ok {
		return GetBkSopsTemplateInfoRequestValidationError{
			field:  "TemplateSource",
			reason: "value must be in list [business common ]",
		}
	}

	if _, ok := _GetBkSopsTemplateInfoRequest_Scope_InLookup[m.GetScope()]; !ok {
		return GetBkSopsTemplateInfoRequestValidationError{
			field:  "Scope",
			reason: "value must be in list [cmdb_biz project ]",
		}
	}

	return nil
}

// GetBkSopsTemplateInfoRequestValidationError is the validation error returned
// by GetBkSopsTemplateInfoRequest.Validate if the designated constraints
// aren't met.
type GetBkSopsTemplateInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBkSopsTemplateInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBkSopsTemplateInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBkSopsTemplateInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBkSopsTemplateInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBkSopsTemplateInfoRequestValidationError) ErrorName() string {
	return "GetBkSopsTemplateInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBkSopsTemplateInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBkSopsTemplateInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBkSopsTemplateInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBkSopsTemplateInfoRequestValidationError{}

var _GetBkSopsTemplateInfoRequest_TemplateSource_InLookup = map[string]struct{}{
	"business": {},
	"common":   {},
	"":         {},
}

var _GetBkSopsTemplateInfoRequest_Scope_InLookup = map[string]struct{}{
	"cmdb_biz": {},
	"project":  {},
	"":         {},
}

// Validate checks the field values on GetBkSopsTemplateInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetBkSopsTemplateInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBkSopsTemplateInfoResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetBkSopsTemplateInfoResponseValidationError is the validation error
// returned by GetBkSopsTemplateInfoResponse.Validate if the designated
// constraints aren't met.
type GetBkSopsTemplateInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBkSopsTemplateInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBkSopsTemplateInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBkSopsTemplateInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBkSopsTemplateInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBkSopsTemplateInfoResponseValidationError) ErrorName() string {
	return "GetBkSopsTemplateInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBkSopsTemplateInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBkSopsTemplateInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBkSopsTemplateInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBkSopsTemplateInfoResponseValidationError{}

// Validate checks the field values on TemplateDetailInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TemplateDetailInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TemplateUrl

	for idx, item := range m.GetValues() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TemplateDetailInfoValidationError{
					field:  fmt.Sprintf("Values[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TemplateDetailInfoValidationError is the validation error returned by
// TemplateDetailInfo.Validate if the designated constraints aren't met.
type TemplateDetailInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateDetailInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateDetailInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateDetailInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateDetailInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateDetailInfoValidationError) ErrorName() string {
	return "TemplateDetailInfoValidationError"
}

// Error satisfies the builtin error interface
func (e TemplateDetailInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateDetailInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateDetailInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateDetailInfoValidationError{}

// Validate checks the field values on ConstantValue with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ConstantValue) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	// no validation rules for Name

	// no validation rules for Index

	// no validation rules for Desc

	return nil
}

// ConstantValueValidationError is the validation error returned by
// ConstantValue.Validate if the designated constraints aren't met.
type ConstantValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConstantValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConstantValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConstantValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConstantValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConstantValueValidationError) ErrorName() string { return "ConstantValueValidationError" }

// Error satisfies the builtin error interface
func (e ConstantValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConstantValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConstantValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConstantValueValidationError{}

// Validate checks the field values on GetInnerTemplateValuesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetInnerTemplateValuesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClusterID

	// no validation rules for Operator

	return nil
}

// GetInnerTemplateValuesRequestValidationError is the validation error
// returned by GetInnerTemplateValuesRequest.Validate if the designated
// constraints aren't met.
type GetInnerTemplateValuesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInnerTemplateValuesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInnerTemplateValuesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInnerTemplateValuesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInnerTemplateValuesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInnerTemplateValuesRequestValidationError) ErrorName() string {
	return "GetInnerTemplateValuesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInnerTemplateValuesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInnerTemplateValuesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInnerTemplateValuesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInnerTemplateValuesRequestValidationError{}

// Validate checks the field values on GetInnerTemplateValuesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetInnerTemplateValuesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetInnerTemplateValuesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetInnerTemplateValuesResponseValidationError is the validation error
// returned by GetInnerTemplateValuesResponse.Validate if the designated
// constraints aren't met.
type GetInnerTemplateValuesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInnerTemplateValuesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInnerTemplateValuesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInnerTemplateValuesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInnerTemplateValuesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInnerTemplateValuesResponseValidationError) ErrorName() string {
	return "GetInnerTemplateValuesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetInnerTemplateValuesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInnerTemplateValuesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInnerTemplateValuesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInnerTemplateValuesResponseValidationError{}

// Validate checks the field values on TemplateValue with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TemplateValue) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Desc

	// no validation rules for Refer

	// no validation rules for Trans

	// no validation rules for Value

	return nil
}

// TemplateValueValidationError is the validation error returned by
// TemplateValue.Validate if the designated constraints aren't met.
type TemplateValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateValueValidationError) ErrorName() string { return "TemplateValueValidationError" }

// Error satisfies the builtin error interface
func (e TemplateValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateValueValidationError{}

// Validate checks the field values on DebugBkSopsTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DebugBkSopsTaskRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetBusinessID()) < 1 {
		return DebugBkSopsTaskRequestValidationError{
			field:  "BusinessID",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetTemplateID()) < 1 {
		return DebugBkSopsTaskRequestValidationError{
			field:  "TemplateID",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetOperator()) < 1 {
		return DebugBkSopsTaskRequestValidationError{
			field:  "Operator",
			reason: "value length must be at least 1 runes",
		}
	}

	if _, ok := _DebugBkSopsTaskRequest_TemplateSource_InLookup[m.GetTemplateSource()]; !ok {
		return DebugBkSopsTaskRequestValidationError{
			field:  "TemplateSource",
			reason: "value must be in list [business common ]",
		}
	}

	// no validation rules for Constant

	return nil
}

// DebugBkSopsTaskRequestValidationError is the validation error returned by
// DebugBkSopsTaskRequest.Validate if the designated constraints aren't met.
type DebugBkSopsTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebugBkSopsTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebugBkSopsTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebugBkSopsTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebugBkSopsTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebugBkSopsTaskRequestValidationError) ErrorName() string {
	return "DebugBkSopsTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DebugBkSopsTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebugBkSopsTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebugBkSopsTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebugBkSopsTaskRequestValidationError{}

var _DebugBkSopsTaskRequest_TemplateSource_InLookup = map[string]struct{}{
	"business": {},
	"common":   {},
	"":         {},
}

// Validate checks the field values on DebugBkSopsTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DebugBkSopsTaskResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DebugBkSopsTaskResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DebugBkSopsTaskResponseValidationError is the validation error returned by
// DebugBkSopsTaskResponse.Validate if the designated constraints aren't met.
type DebugBkSopsTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebugBkSopsTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebugBkSopsTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebugBkSopsTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebugBkSopsTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebugBkSopsTaskResponseValidationError) ErrorName() string {
	return "DebugBkSopsTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DebugBkSopsTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebugBkSopsTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebugBkSopsTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebugBkSopsTaskResponseValidationError{}

// Validate checks the field values on DebugBkSopsTaskInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DebugBkSopsTaskInfo) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DebugBkSopsTaskInfoValidationError{
				field:  "Task",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DebugBkSopsTaskInfoValidationError is the validation error returned by
// DebugBkSopsTaskInfo.Validate if the designated constraints aren't met.
type DebugBkSopsTaskInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebugBkSopsTaskInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebugBkSopsTaskInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebugBkSopsTaskInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebugBkSopsTaskInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebugBkSopsTaskInfoValidationError) ErrorName() string {
	return "DebugBkSopsTaskInfoValidationError"
}

// Error satisfies the builtin error interface
func (e DebugBkSopsTaskInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebugBkSopsTaskInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebugBkSopsTaskInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebugBkSopsTaskInfoValidationError{}

// Validate checks the field values on CloudModuleFlag with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CloudModuleFlag) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CloudID

	// no validation rules for Version

	// no validation rules for ModuleID

	// no validation rules for FlagName

	// no validation rules for FlagDesc

	// no validation rules for DefaultValue

	// no validation rules for Enable

	// no validation rules for Creator

	// no validation rules for Updater

	// no validation rules for CreatTime

	// no validation rules for UpdateTime

	// no validation rules for FlagType

	if v, ok := interface{}(m.GetRegex()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudModuleFlagValidationError{
				field:  "Regex",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudModuleFlagValidationError{
				field:  "Range",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CloudModuleFlagValidationError is the validation error returned by
// CloudModuleFlag.Validate if the designated constraints aren't met.
type CloudModuleFlagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudModuleFlagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudModuleFlagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudModuleFlagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudModuleFlagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudModuleFlagValidationError) ErrorName() string { return "CloudModuleFlagValidationError" }

// Error satisfies the builtin error interface
func (e CloudModuleFlagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudModuleFlag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudModuleFlagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudModuleFlagValidationError{}

// Validate checks the field values on FlagInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FlagInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FlagName

	// no validation rules for FlagDesc

	// no validation rules for DefaultValue

	if v, ok := interface{}(m.GetEnable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FlagInfoValidationError{
				field:  "Enable",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FlagType

	if v, ok := interface{}(m.GetRegex()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FlagInfoValidationError{
				field:  "Regex",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FlagInfoValidationError{
				field:  "Range",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FlagInfoValidationError is the validation error returned by
// FlagInfo.Validate if the designated constraints aren't met.
type FlagInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlagInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlagInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlagInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlagInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlagInfoValidationError) ErrorName() string { return "FlagInfoValidationError" }

// Error satisfies the builtin error interface
func (e FlagInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlagInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlagInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlagInfoValidationError{}

// Validate checks the field values on ValueRegex with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ValueRegex) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Validator

	// no validation rules for Message

	return nil
}

// ValueRegexValidationError is the validation error returned by
// ValueRegex.Validate if the designated constraints aren't met.
type ValueRegexValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValueRegexValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValueRegexValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValueRegexValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValueRegexValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValueRegexValidationError) ErrorName() string { return "ValueRegexValidationError" }

// Error satisfies the builtin error interface
func (e ValueRegexValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValueRegex.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValueRegexValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValueRegexValidationError{}

// Validate checks the field values on NumberRange with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NumberRange) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Min

	// no validation rules for Max

	return nil
}

// NumberRangeValidationError is the validation error returned by
// NumberRange.Validate if the designated constraints aren't met.
type NumberRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NumberRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NumberRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NumberRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NumberRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NumberRangeValidationError) ErrorName() string { return "NumberRangeValidationError" }

// Error satisfies the builtin error interface
func (e NumberRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNumberRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NumberRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NumberRangeValidationError{}

// Validate checks the field values on CreateCloudModuleFlagRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCloudModuleFlagRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CloudID

	// no validation rules for Version

	if utf8.RuneCountInString(m.GetModuleID()) < 1 {
		return CreateCloudModuleFlagRequestValidationError{
			field:  "ModuleID",
			reason: "value length must be at least 1 runes",
		}
	}

	if len(m.GetFlagList()) < 1 {
		return CreateCloudModuleFlagRequestValidationError{
			field:  "FlagList",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetFlagList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCloudModuleFlagRequestValidationError{
					field:  fmt.Sprintf("FlagList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Operator

	return nil
}

// CreateCloudModuleFlagRequestValidationError is the validation error returned
// by CreateCloudModuleFlagRequest.Validate if the designated constraints
// aren't met.
type CreateCloudModuleFlagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudModuleFlagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudModuleFlagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudModuleFlagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudModuleFlagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudModuleFlagRequestValidationError) ErrorName() string {
	return "CreateCloudModuleFlagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudModuleFlagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudModuleFlagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudModuleFlagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudModuleFlagRequestValidationError{}

// Validate checks the field values on CreateCloudModuleFlagResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCloudModuleFlagResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// CreateCloudModuleFlagResponseValidationError is the validation error
// returned by CreateCloudModuleFlagResponse.Validate if the designated
// constraints aren't met.
type CreateCloudModuleFlagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudModuleFlagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudModuleFlagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudModuleFlagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudModuleFlagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudModuleFlagResponseValidationError) ErrorName() string {
	return "CreateCloudModuleFlagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudModuleFlagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudModuleFlagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudModuleFlagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudModuleFlagResponseValidationError{}

// Validate checks the field values on UpdateCloudModuleFlagRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCloudModuleFlagRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CloudID

	// no validation rules for Version

	// no validation rules for ModuleID

	if len(m.GetFlagList()) < 1 {
		return UpdateCloudModuleFlagRequestValidationError{
			field:  "FlagList",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetFlagList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateCloudModuleFlagRequestValidationError{
					field:  fmt.Sprintf("FlagList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Operator

	return nil
}

// UpdateCloudModuleFlagRequestValidationError is the validation error returned
// by UpdateCloudModuleFlagRequest.Validate if the designated constraints
// aren't met.
type UpdateCloudModuleFlagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCloudModuleFlagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCloudModuleFlagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCloudModuleFlagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCloudModuleFlagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCloudModuleFlagRequestValidationError) ErrorName() string {
	return "UpdateCloudModuleFlagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCloudModuleFlagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCloudModuleFlagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCloudModuleFlagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCloudModuleFlagRequestValidationError{}

// Validate checks the field values on UpdateCloudModuleFlagResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCloudModuleFlagResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// UpdateCloudModuleFlagResponseValidationError is the validation error
// returned by UpdateCloudModuleFlagResponse.Validate if the designated
// constraints aren't met.
type UpdateCloudModuleFlagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCloudModuleFlagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCloudModuleFlagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCloudModuleFlagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCloudModuleFlagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCloudModuleFlagResponseValidationError) ErrorName() string {
	return "UpdateCloudModuleFlagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCloudModuleFlagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCloudModuleFlagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCloudModuleFlagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCloudModuleFlagResponseValidationError{}

// Validate checks the field values on DeleteCloudModuleFlagRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCloudModuleFlagRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CloudID

	// no validation rules for Version

	// no validation rules for ModuleID

	// no validation rules for Operator

	return nil
}

// DeleteCloudModuleFlagRequestValidationError is the validation error returned
// by DeleteCloudModuleFlagRequest.Validate if the designated constraints
// aren't met.
type DeleteCloudModuleFlagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloudModuleFlagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloudModuleFlagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloudModuleFlagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloudModuleFlagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloudModuleFlagRequestValidationError) ErrorName() string {
	return "DeleteCloudModuleFlagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloudModuleFlagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloudModuleFlagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloudModuleFlagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloudModuleFlagRequestValidationError{}

// Validate checks the field values on DeleteCloudModuleFlagResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCloudModuleFlagResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// DeleteCloudModuleFlagResponseValidationError is the validation error
// returned by DeleteCloudModuleFlagResponse.Validate if the designated
// constraints aren't met.
type DeleteCloudModuleFlagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloudModuleFlagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloudModuleFlagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloudModuleFlagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloudModuleFlagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloudModuleFlagResponseValidationError) ErrorName() string {
	return "DeleteCloudModuleFlagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloudModuleFlagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloudModuleFlagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloudModuleFlagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloudModuleFlagResponseValidationError{}

// Validate checks the field values on ListCloudModuleFlagRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudModuleFlagRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CloudID

	// no validation rules for Version

	// no validation rules for ModuleID

	// no validation rules for Operator

	return nil
}

// ListCloudModuleFlagRequestValidationError is the validation error returned
// by ListCloudModuleFlagRequest.Validate if the designated constraints aren't met.
type ListCloudModuleFlagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudModuleFlagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudModuleFlagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudModuleFlagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudModuleFlagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudModuleFlagRequestValidationError) ErrorName() string {
	return "ListCloudModuleFlagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudModuleFlagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudModuleFlagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudModuleFlagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudModuleFlagRequestValidationError{}

// Validate checks the field values on ListCloudModuleFlagResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudModuleFlagResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudModuleFlagResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCloudModuleFlagResponseValidationError is the validation error returned
// by ListCloudModuleFlagResponse.Validate if the designated constraints
// aren't met.
type ListCloudModuleFlagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudModuleFlagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudModuleFlagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudModuleFlagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudModuleFlagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudModuleFlagResponseValidationError) ErrorName() string {
	return "ListCloudModuleFlagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudModuleFlagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudModuleFlagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudModuleFlagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudModuleFlagResponseValidationError{}

// Validate checks the field values on GetExternalNodeScriptRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetExternalNodeScriptRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NodeGroupID

	// no validation rules for Operator

	return nil
}

// GetExternalNodeScriptRequestValidationError is the validation error returned
// by GetExternalNodeScriptRequest.Validate if the designated constraints
// aren't met.
type GetExternalNodeScriptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExternalNodeScriptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExternalNodeScriptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExternalNodeScriptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExternalNodeScriptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExternalNodeScriptRequestValidationError) ErrorName() string {
	return "GetExternalNodeScriptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetExternalNodeScriptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExternalNodeScriptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExternalNodeScriptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExternalNodeScriptRequestValidationError{}

// Validate checks the field values on GetExternalNodeScriptResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetExternalNodeScriptResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	// no validation rules for Data

	if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetExternalNodeScriptResponseValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetExternalNodeScriptResponseValidationError is the validation error
// returned by GetExternalNodeScriptResponse.Validate if the designated
// constraints aren't met.
type GetExternalNodeScriptResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExternalNodeScriptResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExternalNodeScriptResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExternalNodeScriptResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExternalNodeScriptResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExternalNodeScriptResponseValidationError) ErrorName() string {
	return "GetExternalNodeScriptResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetExternalNodeScriptResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExternalNodeScriptResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExternalNodeScriptResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExternalNodeScriptResponseValidationError{}

// Validate checks the field values on MapStruct with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MapStruct) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Values

	return nil
}

// MapStructValidationError is the validation error returned by
// MapStruct.Validate if the designated constraints aren't met.
type MapStructValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapStructValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapStructValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapStructValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapStructValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapStructValidationError) ErrorName() string { return "MapStructValidationError" }

// Error satisfies the builtin error interface
func (e MapStructValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapStruct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapStructValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapStructValidationError{}

// Validate checks the field values on GetBatchCustomSettingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetBatchCustomSettingRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ScopeType

	// no validation rules for ScopeId

	return nil
}

// GetBatchCustomSettingRequestValidationError is the validation error returned
// by GetBatchCustomSettingRequest.Validate if the designated constraints
// aren't met.
type GetBatchCustomSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBatchCustomSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBatchCustomSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBatchCustomSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBatchCustomSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBatchCustomSettingRequestValidationError) ErrorName() string {
	return "GetBatchCustomSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBatchCustomSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBatchCustomSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBatchCustomSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBatchCustomSettingRequestValidationError{}

// Validate checks the field values on GetBatchCustomSettingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetBatchCustomSettingResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Success

	// no validation rules for ErrorMsg

	// no validation rules for RequestId

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBatchCustomSettingResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetBatchCustomSettingResponseValidationError is the validation error
// returned by GetBatchCustomSettingResponse.Validate if the designated
// constraints aren't met.
type GetBatchCustomSettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBatchCustomSettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBatchCustomSettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBatchCustomSettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBatchCustomSettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBatchCustomSettingResponseValidationError) ErrorName() string {
	return "GetBatchCustomSettingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBatchCustomSettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBatchCustomSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBatchCustomSettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBatchCustomSettingResponseValidationError{}

// Validate checks the field values on ScopeInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ScopeInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ScopeType

	// no validation rules for ScopeId

	return nil
}

// ScopeInfoValidationError is the validation error returned by
// ScopeInfo.Validate if the designated constraints aren't met.
type ScopeInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeInfoValidationError) ErrorName() string { return "ScopeInfoValidationError" }

// Error satisfies the builtin error interface
func (e ScopeInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopeInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeInfoValidationError{}

// Validate checks the field values on GetBizTopologyHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetBizTopologyHostRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ScopeType

	// no validation rules for ScopeId

	// no validation rules for AllScope

	for idx, item := range m.GetScopeList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBizTopologyHostRequestValidationError{
					field:  fmt.Sprintf("ScopeList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetBizTopologyHostRequestValidationError is the validation error returned by
// GetBizTopologyHostRequest.Validate if the designated constraints aren't met.
type GetBizTopologyHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBizTopologyHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBizTopologyHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBizTopologyHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBizTopologyHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBizTopologyHostRequestValidationError) ErrorName() string {
	return "GetBizTopologyHostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBizTopologyHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBizTopologyHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBizTopologyHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBizTopologyHostRequestValidationError{}

// Validate checks the field values on GetBizTopologyHostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetBizTopologyHostResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Success

	// no validation rules for ErrorMsg

	// no validation rules for RequestId

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBizTopologyHostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetBizTopologyHostResponseValidationError is the validation error returned
// by GetBizTopologyHostResponse.Validate if the designated constraints aren't met.
type GetBizTopologyHostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBizTopologyHostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBizTopologyHostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBizTopologyHostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBizTopologyHostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBizTopologyHostResponseValidationError) ErrorName() string {
	return "GetBizTopologyHostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBizTopologyHostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBizTopologyHostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBizTopologyHostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBizTopologyHostResponseValidationError{}

// Validate checks the field values on NodeData with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *NodeData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ObjectId

	// no validation rules for InstanceId

	return nil
}

// NodeDataValidationError is the validation error returned by
// NodeData.Validate if the designated constraints aren't met.
type NodeDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeDataValidationError) ErrorName() string { return "NodeDataValidationError" }

// Error satisfies the builtin error interface
func (e NodeDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeDataValidationError{}

// Validate checks the field values on GetTopologyNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTopologyNodesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ScopeType

	// no validation rules for ScopeId

	if len(m.GetNodeList()) < 1 {
		return GetTopologyNodesRequestValidationError{
			field:  "NodeList",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetNodeList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTopologyNodesRequestValidationError{
					field:  fmt.Sprintf("NodeList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SearchContent

	if v, ok := interface{}(m.GetAlive()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTopologyNodesRequestValidationError{
				field:  "Alive",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Start

	// no validation rules for PageSize

	return nil
}

// GetTopologyNodesRequestValidationError is the validation error returned by
// GetTopologyNodesRequest.Validate if the designated constraints aren't met.
type GetTopologyNodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopologyNodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopologyNodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopologyNodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopologyNodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopologyNodesRequestValidationError) ErrorName() string {
	return "GetTopologyNodesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopologyNodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopologyNodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopologyNodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopologyNodesRequestValidationError{}

// Validate checks the field values on GetTopologyNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTopologyNodesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Success

	// no validation rules for ErrorMsg

	// no validation rules for RequestId

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTopologyNodesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetTopologyNodesResponseValidationError is the validation error returned by
// GetTopologyNodesResponse.Validate if the designated constraints aren't met.
type GetTopologyNodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopologyNodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopologyNodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopologyNodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopologyNodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopologyNodesResponseValidationError) ErrorName() string {
	return "GetTopologyNodesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopologyNodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopologyNodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopologyNodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopologyNodesResponseValidationError{}

// Validate checks the field values on GetTopologyNodesData with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTopologyNodesData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Start

	// no validation rules for PageSize

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTopologyNodesDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetTopologyNodesDataValidationError is the validation error returned by
// GetTopologyNodesData.Validate if the designated constraints aren't met.
type GetTopologyNodesDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopologyNodesDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopologyNodesDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopologyNodesDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopologyNodesDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopologyNodesDataValidationError) ErrorName() string {
	return "GetTopologyNodesDataValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopologyNodesDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopologyNodesData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopologyNodesDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopologyNodesDataValidationError{}

// Validate checks the field values on HostData with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *HostData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for HostId

	// no validation rules for Ip

	// no validation rules for Ipv6

	// no validation rules for HostName

	// no validation rules for Alive

	// no validation rules for OsName

	if v, ok := interface{}(m.GetCloudArea()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HostDataValidationError{
				field:  "CloudArea",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// HostDataValidationError is the validation error returned by
// HostData.Validate if the designated constraints aren't met.
type HostDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HostDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HostDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HostDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HostDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HostDataValidationError) ErrorName() string { return "HostDataValidationError" }

// Error satisfies the builtin error interface
func (e HostDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHostData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HostDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HostDataValidationError{}

// Validate checks the field values on HostCloudArea with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HostCloudArea) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// HostCloudAreaValidationError is the validation error returned by
// HostCloudArea.Validate if the designated constraints aren't met.
type HostCloudAreaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HostCloudAreaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HostCloudAreaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HostCloudAreaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HostCloudAreaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HostCloudAreaValidationError) ErrorName() string { return "HostCloudAreaValidationError" }

// Error satisfies the builtin error interface
func (e HostCloudAreaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHostCloudArea.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HostCloudAreaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HostCloudAreaValidationError{}

// Validate checks the field values on GetTopologyHostIdsNodesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTopologyHostIdsNodesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ScopeType

	// no validation rules for ScopeId

	if len(m.GetNodeList()) < 1 {
		return GetTopologyHostIdsNodesRequestValidationError{
			field:  "NodeList",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetNodeList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTopologyHostIdsNodesRequestValidationError{
					field:  fmt.Sprintf("NodeList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SearchContent

	if v, ok := interface{}(m.GetAlive()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTopologyHostIdsNodesRequestValidationError{
				field:  "Alive",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Start

	// no validation rules for PageSize

	return nil
}

// GetTopologyHostIdsNodesRequestValidationError is the validation error
// returned by GetTopologyHostIdsNodesRequest.Validate if the designated
// constraints aren't met.
type GetTopologyHostIdsNodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopologyHostIdsNodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopologyHostIdsNodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopologyHostIdsNodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopologyHostIdsNodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopologyHostIdsNodesRequestValidationError) ErrorName() string {
	return "GetTopologyHostIdsNodesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopologyHostIdsNodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopologyHostIdsNodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopologyHostIdsNodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopologyHostIdsNodesRequestValidationError{}

// Validate checks the field values on GetTopologyHostIdsNodesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTopologyHostIdsNodesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Success

	// no validation rules for ErrorMsg

	// no validation rules for RequestId

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTopologyHostIdsNodesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetTopologyHostIdsNodesResponseValidationError is the validation error
// returned by GetTopologyHostIdsNodesResponse.Validate if the designated
// constraints aren't met.
type GetTopologyHostIdsNodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopologyHostIdsNodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopologyHostIdsNodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopologyHostIdsNodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopologyHostIdsNodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopologyHostIdsNodesResponseValidationError) ErrorName() string {
	return "GetTopologyHostIdsNodesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopologyHostIdsNodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopologyHostIdsNodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopologyHostIdsNodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopologyHostIdsNodesResponseValidationError{}

// Validate checks the field values on GetTopologyHostIdsNodesData with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTopologyHostIdsNodesData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Start

	// no validation rules for PageSize

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTopologyHostIdsNodesDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetTopologyHostIdsNodesDataValidationError is the validation error returned
// by GetTopologyHostIdsNodesData.Validate if the designated constraints
// aren't met.
type GetTopologyHostIdsNodesDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopologyHostIdsNodesDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopologyHostIdsNodesDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopologyHostIdsNodesDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopologyHostIdsNodesDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopologyHostIdsNodesDataValidationError) ErrorName() string {
	return "GetTopologyHostIdsNodesDataValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopologyHostIdsNodesDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopologyHostIdsNodesData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopologyHostIdsNodesDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopologyHostIdsNodesDataValidationError{}

// Validate checks the field values on HostIDsNodeData with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *HostIDsNodeData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for HostId

	if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HostIDsNodeDataValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// HostIDsNodeDataValidationError is the validation error returned by
// HostIDsNodeData.Validate if the designated constraints aren't met.
type HostIDsNodeDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HostIDsNodeDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HostIDsNodeDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HostIDsNodeDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HostIDsNodeDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HostIDsNodeDataValidationError) ErrorName() string { return "HostIDsNodeDataValidationError" }

// Error satisfies the builtin error interface
func (e HostIDsNodeDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHostIDsNodeData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HostIDsNodeDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HostIDsNodeDataValidationError{}

// Validate checks the field values on Meta with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Meta) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ScopeType

	// no validation rules for ScopeId

	// no validation rules for BkBizId

	return nil
}

// MetaValidationError is the validation error returned by Meta.Validate if the
// designated constraints aren't met.
type MetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetaValidationError) ErrorName() string { return "MetaValidationError" }

// Error satisfies the builtin error interface
func (e MetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetaValidationError{}

// Validate checks the field values on GetHostsDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetHostsDetailsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ScopeType

	// no validation rules for ScopeId

	for idx, item := range m.GetHostList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetHostsDetailsRequestValidationError{
					field:  fmt.Sprintf("HostList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetHostsDetailsRequestValidationError is the validation error returned by
// GetHostsDetailsRequest.Validate if the designated constraints aren't met.
type GetHostsDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHostsDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHostsDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHostsDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHostsDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHostsDetailsRequestValidationError) ErrorName() string {
	return "GetHostsDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetHostsDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHostsDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHostsDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHostsDetailsRequestValidationError{}

// Validate checks the field values on GetHostsDetailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetHostsDetailsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Success

	// no validation rules for ErrorMsg

	// no validation rules for RequestId

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetHostsDetailsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetHostsDetailsResponseValidationError is the validation error returned by
// GetHostsDetailsResponse.Validate if the designated constraints aren't met.
type GetHostsDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHostsDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHostsDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHostsDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHostsDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHostsDetailsResponseValidationError) ErrorName() string {
	return "GetHostsDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetHostsDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHostsDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHostsDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHostsDetailsResponseValidationError{}

// Validate checks the field values on HostDataWithMeta with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *HostDataWithMeta) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for HostId

	// no validation rules for Ip

	// no validation rules for Ipv6

	// no validation rules for HostName

	// no validation rules for Alive

	// no validation rules for OsName

	if v, ok := interface{}(m.GetCloudArea()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HostDataWithMetaValidationError{
				field:  "CloudArea",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HostDataWithMetaValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// HostDataWithMetaValidationError is the validation error returned by
// HostDataWithMeta.Validate if the designated constraints aren't met.
type HostDataWithMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HostDataWithMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HostDataWithMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HostDataWithMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HostDataWithMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HostDataWithMetaValidationError) ErrorName() string { return "HostDataWithMetaValidationError" }

// Error satisfies the builtin error interface
func (e HostDataWithMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHostDataWithMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HostDataWithMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HostDataWithMetaValidationError{}

// Validate checks the field values on GetScopeHostCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetScopeHostCheckRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ScopeType

	// no validation rules for ScopeId

	return nil
}

// GetScopeHostCheckRequestValidationError is the validation error returned by
// GetScopeHostCheckRequest.Validate if the designated constraints aren't met.
type GetScopeHostCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScopeHostCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScopeHostCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScopeHostCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScopeHostCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScopeHostCheckRequestValidationError) ErrorName() string {
	return "GetScopeHostCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetScopeHostCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScopeHostCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScopeHostCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScopeHostCheckRequestValidationError{}

// Validate checks the field values on GetScopeHostCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetScopeHostCheckResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Success

	// no validation rules for ErrorMsg

	// no validation rules for RequestId

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetScopeHostCheckResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetScopeHostCheckResponseValidationError is the validation error returned by
// GetScopeHostCheckResponse.Validate if the designated constraints aren't met.
type GetScopeHostCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScopeHostCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScopeHostCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScopeHostCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScopeHostCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScopeHostCheckResponseValidationError) ErrorName() string {
	return "GetScopeHostCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetScopeHostCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScopeHostCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScopeHostCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScopeHostCheckResponseValidationError{}
