// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cidrmanager.proto

package cidrmanager

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//* cidr management tenc part
type CreateSubnetInput struct {
	CidrType             string   `protobuf:"bytes,1,opt,name=cidrType,proto3" json:"cidrType,omitempty"`
	Region               string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	VpcId                string   `protobuf:"bytes,3,opt,name=vpcId,proto3" json:"vpcId,omitempty"`
	Mask                 int32    `protobuf:"varint,4,opt,name=mask,proto3" json:"mask,omitempty"`
	Zone                 string   `protobuf:"bytes,5,opt,name=zone,proto3" json:"zone,omitempty"`
	Name                 string   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CreateSubnetInput) Reset()         { *m = CreateSubnetInput{} }
func (m *CreateSubnetInput) String() string { return proto.CompactTextString(m) }
func (*CreateSubnetInput) ProtoMessage()    {}
func (*CreateSubnetInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{0}
}

func (m *CreateSubnetInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateSubnetInput.Unmarshal(m, b)
}
func (m *CreateSubnetInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateSubnetInput.Marshal(b, m, deterministic)
}
func (m *CreateSubnetInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSubnetInput.Merge(m, src)
}
func (m *CreateSubnetInput) XXX_Size() int {
	return xxx_messageInfo_CreateSubnetInput.Size(m)
}
func (m *CreateSubnetInput) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSubnetInput.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSubnetInput proto.InternalMessageInfo

func (m *CreateSubnetInput) GetCidrType() string {
	if m != nil {
		return m.CidrType
	}
	return ""
}

func (m *CreateSubnetInput) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *CreateSubnetInput) GetVpcId() string {
	if m != nil {
		return m.VpcId
	}
	return ""
}

func (m *CreateSubnetInput) GetMask() int32 {
	if m != nil {
		return m.Mask
	}
	return 0
}

func (m *CreateSubnetInput) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *CreateSubnetInput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteSubnetInput struct {
	CidrType             string   `protobuf:"bytes,1,opt,name=cidrType,proto3" json:"cidrType,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Region               string   `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DeleteSubnetInput) Reset()         { *m = DeleteSubnetInput{} }
func (m *DeleteSubnetInput) String() string { return proto.CompactTextString(m) }
func (*DeleteSubnetInput) ProtoMessage()    {}
func (*DeleteSubnetInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{1}
}

func (m *DeleteSubnetInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteSubnetInput.Unmarshal(m, b)
}
func (m *DeleteSubnetInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteSubnetInput.Marshal(b, m, deterministic)
}
func (m *DeleteSubnetInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSubnetInput.Merge(m, src)
}
func (m *DeleteSubnetInput) XXX_Size() int {
	return xxx_messageInfo_DeleteSubnetInput.Size(m)
}
func (m *DeleteSubnetInput) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSubnetInput.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSubnetInput proto.InternalMessageInfo

func (m *DeleteSubnetInput) GetCidrType() string {
	if m != nil {
		return m.CidrType
	}
	return ""
}

func (m *DeleteSubnetInput) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteSubnetInput) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

type SubnetOutput struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IpNet                string   `protobuf:"bytes,2,opt,name=ipNet,proto3" json:"ipNet,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Zone                 string   `protobuf:"bytes,4,opt,name=zone,proto3" json:"zone,omitempty"`
	VpcId                string   `protobuf:"bytes,5,opt,name=vpcId,proto3" json:"vpcId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SubnetOutput) Reset()         { *m = SubnetOutput{} }
func (m *SubnetOutput) String() string { return proto.CompactTextString(m) }
func (*SubnetOutput) ProtoMessage()    {}
func (*SubnetOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{2}
}

func (m *SubnetOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubnetOutput.Unmarshal(m, b)
}
func (m *SubnetOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubnetOutput.Marshal(b, m, deterministic)
}
func (m *SubnetOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubnetOutput.Merge(m, src)
}
func (m *SubnetOutput) XXX_Size() int {
	return xxx_messageInfo_SubnetOutput.Size(m)
}
func (m *SubnetOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_SubnetOutput.DiscardUnknown(m)
}

var xxx_messageInfo_SubnetOutput proto.InternalMessageInfo

func (m *SubnetOutput) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SubnetOutput) GetIpNet() string {
	if m != nil {
		return m.IpNet
	}
	return ""
}

func (m *SubnetOutput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SubnetOutput) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *SubnetOutput) GetVpcId() string {
	if m != nil {
		return m.VpcId
	}
	return ""
}

type SubnetResp struct {
	Code                 uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 *SubnetOutput `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-" bson:"-"`
	XXX_unrecognized     []byte        `json:"-" bson:"-"`
	XXX_sizecache        int32         `json:"-" bson:"-"`
}

func (m *SubnetResp) Reset()         { *m = SubnetResp{} }
func (m *SubnetResp) String() string { return proto.CompactTextString(m) }
func (*SubnetResp) ProtoMessage()    {}
func (*SubnetResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{3}
}

func (m *SubnetResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubnetResp.Unmarshal(m, b)
}
func (m *SubnetResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubnetResp.Marshal(b, m, deterministic)
}
func (m *SubnetResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubnetResp.Merge(m, src)
}
func (m *SubnetResp) XXX_Size() int {
	return xxx_messageInfo_SubnetResp.Size(m)
}
func (m *SubnetResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SubnetResp.DiscardUnknown(m)
}

var xxx_messageInfo_SubnetResp proto.InternalMessageInfo

func (m *SubnetResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SubnetResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SubnetResp) GetData() *SubnetOutput {
	if m != nil {
		return m.Data
	}
	return nil
}

type SubnetsResp struct {
	Code                 uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 []*SubnetOutput `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" bson:"-"`
}

func (m *SubnetsResp) Reset()         { *m = SubnetsResp{} }
func (m *SubnetsResp) String() string { return proto.CompactTextString(m) }
func (*SubnetsResp) ProtoMessage()    {}
func (*SubnetsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{4}
}

func (m *SubnetsResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubnetsResp.Unmarshal(m, b)
}
func (m *SubnetsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubnetsResp.Marshal(b, m, deterministic)
}
func (m *SubnetsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubnetsResp.Merge(m, src)
}
func (m *SubnetsResp) XXX_Size() int {
	return xxx_messageInfo_SubnetsResp.Size(m)
}
func (m *SubnetsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SubnetsResp.DiscardUnknown(m)
}

var xxx_messageInfo_SubnetsResp proto.InternalMessageInfo

func (m *SubnetsResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SubnetsResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SubnetsResp) GetData() []*SubnetOutput {
	if m != nil {
		return m.Data
	}
	return nil
}

type EmptyDataResp struct {
	Code                 uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *EmptyDataResp) Reset()         { *m = EmptyDataResp{} }
func (m *EmptyDataResp) String() string { return proto.CompactTextString(m) }
func (*EmptyDataResp) ProtoMessage()    {}
func (*EmptyDataResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{5}
}

func (m *EmptyDataResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyDataResp.Unmarshal(m, b)
}
func (m *EmptyDataResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyDataResp.Marshal(b, m, deterministic)
}
func (m *EmptyDataResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyDataResp.Merge(m, src)
}
func (m *EmptyDataResp) XXX_Size() int {
	return xxx_messageInfo_EmptyDataResp.Size(m)
}
func (m *EmptyDataResp) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyDataResp.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyDataResp proto.InternalMessageInfo

func (m *EmptyDataResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *EmptyDataResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type MaskRangeResp struct {
	Code                 uint32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 *MaskRangeQueryOutput `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-" bson:"-"`
	XXX_unrecognized     []byte                `json:"-" bson:"-"`
	XXX_sizecache        int32                 `json:"-" bson:"-"`
}

func (m *MaskRangeResp) Reset()         { *m = MaskRangeResp{} }
func (m *MaskRangeResp) String() string { return proto.CompactTextString(m) }
func (*MaskRangeResp) ProtoMessage()    {}
func (*MaskRangeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{6}
}

func (m *MaskRangeResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MaskRangeResp.Unmarshal(m, b)
}
func (m *MaskRangeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MaskRangeResp.Marshal(b, m, deterministic)
}
func (m *MaskRangeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaskRangeResp.Merge(m, src)
}
func (m *MaskRangeResp) XXX_Size() int {
	return xxx_messageInfo_MaskRangeResp.Size(m)
}
func (m *MaskRangeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MaskRangeResp.DiscardUnknown(m)
}

var xxx_messageInfo_MaskRangeResp proto.InternalMessageInfo

func (m *MaskRangeResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *MaskRangeResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MaskRangeResp) GetData() *MaskRangeQueryOutput {
	if m != nil {
		return m.Data
	}
	return nil
}

type MaskRangeQueryInput struct {
	CidrType             string   `protobuf:"bytes,1,opt,name=cidrType,proto3" json:"cidrType,omitempty"`
	Region               string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	VpcId                string   `protobuf:"bytes,3,opt,name=vpcId,proto3" json:"vpcId,omitempty"`
	CidrBlocks           string   `protobuf:"bytes,4,opt,name=cidrBlocks,proto3" json:"cidrBlocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *MaskRangeQueryInput) Reset()         { *m = MaskRangeQueryInput{} }
func (m *MaskRangeQueryInput) String() string { return proto.CompactTextString(m) }
func (*MaskRangeQueryInput) ProtoMessage()    {}
func (*MaskRangeQueryInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{7}
}

func (m *MaskRangeQueryInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MaskRangeQueryInput.Unmarshal(m, b)
}
func (m *MaskRangeQueryInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MaskRangeQueryInput.Marshal(b, m, deterministic)
}
func (m *MaskRangeQueryInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaskRangeQueryInput.Merge(m, src)
}
func (m *MaskRangeQueryInput) XXX_Size() int {
	return xxx_messageInfo_MaskRangeQueryInput.Size(m)
}
func (m *MaskRangeQueryInput) XXX_DiscardUnknown() {
	xxx_messageInfo_MaskRangeQueryInput.DiscardUnknown(m)
}

var xxx_messageInfo_MaskRangeQueryInput proto.InternalMessageInfo

func (m *MaskRangeQueryInput) GetCidrType() string {
	if m != nil {
		return m.CidrType
	}
	return ""
}

func (m *MaskRangeQueryInput) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *MaskRangeQueryInput) GetVpcId() string {
	if m != nil {
		return m.VpcId
	}
	return ""
}

func (m *MaskRangeQueryInput) GetCidrBlocks() string {
	if m != nil {
		return m.CidrBlocks
	}
	return ""
}

type MaskRangeQueryOutput struct {
	Min                  int32    `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max                  int32    `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *MaskRangeQueryOutput) Reset()         { *m = MaskRangeQueryOutput{} }
func (m *MaskRangeQueryOutput) String() string { return proto.CompactTextString(m) }
func (*MaskRangeQueryOutput) ProtoMessage()    {}
func (*MaskRangeQueryOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{8}
}

func (m *MaskRangeQueryOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MaskRangeQueryOutput.Unmarshal(m, b)
}
func (m *MaskRangeQueryOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MaskRangeQueryOutput.Marshal(b, m, deterministic)
}
func (m *MaskRangeQueryOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaskRangeQueryOutput.Merge(m, src)
}
func (m *MaskRangeQueryOutput) XXX_Size() int {
	return xxx_messageInfo_MaskRangeQueryOutput.Size(m)
}
func (m *MaskRangeQueryOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_MaskRangeQueryOutput.DiscardUnknown(m)
}

var xxx_messageInfo_MaskRangeQueryOutput proto.InternalMessageInfo

func (m *MaskRangeQueryOutput) GetMin() int32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *MaskRangeQueryOutput) GetMax() int32 {
	if m != nil {
		return m.Max
	}
	return 0
}

type GetSubnetInput struct {
	CidrType             string   `protobuf:"bytes,1,opt,name=cidrType,proto3" json:"cidrType,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Region               string   `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GetSubnetInput) Reset()         { *m = GetSubnetInput{} }
func (m *GetSubnetInput) String() string { return proto.CompactTextString(m) }
func (*GetSubnetInput) ProtoMessage()    {}
func (*GetSubnetInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{9}
}

func (m *GetSubnetInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSubnetInput.Unmarshal(m, b)
}
func (m *GetSubnetInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSubnetInput.Marshal(b, m, deterministic)
}
func (m *GetSubnetInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubnetInput.Merge(m, src)
}
func (m *GetSubnetInput) XXX_Size() int {
	return xxx_messageInfo_GetSubnetInput.Size(m)
}
func (m *GetSubnetInput) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubnetInput.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubnetInput proto.InternalMessageInfo

func (m *GetSubnetInput) GetCidrType() string {
	if m != nil {
		return m.CidrType
	}
	return ""
}

func (m *GetSubnetInput) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetSubnetInput) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

type ListSubnetsInput struct {
	CidrType             string   `protobuf:"bytes,1,opt,name=cidrType,proto3" json:"cidrType,omitempty"`
	Region               string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	VpcId                string   `protobuf:"bytes,3,opt,name=vpcId,proto3" json:"vpcId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ListSubnetsInput) Reset()         { *m = ListSubnetsInput{} }
func (m *ListSubnetsInput) String() string { return proto.CompactTextString(m) }
func (*ListSubnetsInput) ProtoMessage()    {}
func (*ListSubnetsInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{10}
}

func (m *ListSubnetsInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSubnetsInput.Unmarshal(m, b)
}
func (m *ListSubnetsInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSubnetsInput.Marshal(b, m, deterministic)
}
func (m *ListSubnetsInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSubnetsInput.Merge(m, src)
}
func (m *ListSubnetsInput) XXX_Size() int {
	return xxx_messageInfo_ListSubnetsInput.Size(m)
}
func (m *ListSubnetsInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSubnetsInput.DiscardUnknown(m)
}

var xxx_messageInfo_ListSubnetsInput proto.InternalMessageInfo

func (m *ListSubnetsInput) GetCidrType() string {
	if m != nil {
		return m.CidrType
	}
	return ""
}

func (m *ListSubnetsInput) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *ListSubnetsInput) GetVpcId() string {
	if m != nil {
		return m.VpcId
	}
	return ""
}

//* cidr management bcs part
type GetClusterCidrRequest struct {
	Region               string   `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	CidrType             string   `protobuf:"bytes,2,opt,name=cidrType,proto3" json:"cidrType,omitempty"`
	ClusterID            string   `protobuf:"bytes,3,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GetClusterCidrRequest) Reset()         { *m = GetClusterCidrRequest{} }
func (m *GetClusterCidrRequest) String() string { return proto.CompactTextString(m) }
func (*GetClusterCidrRequest) ProtoMessage()    {}
func (*GetClusterCidrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{11}
}

func (m *GetClusterCidrRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterCidrRequest.Unmarshal(m, b)
}
func (m *GetClusterCidrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterCidrRequest.Marshal(b, m, deterministic)
}
func (m *GetClusterCidrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterCidrRequest.Merge(m, src)
}
func (m *GetClusterCidrRequest) XXX_Size() int {
	return xxx_messageInfo_GetClusterCidrRequest.Size(m)
}
func (m *GetClusterCidrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterCidrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterCidrRequest proto.InternalMessageInfo

func (m *GetClusterCidrRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *GetClusterCidrRequest) GetCidrType() string {
	if m != nil {
		return m.CidrType
	}
	return ""
}

func (m *GetClusterCidrRequest) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

type GetClusterCidrResponse struct {
	Code                 uint32                      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string                      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 *GetClusterCidrResponseData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-" bson:"-"`
	XXX_unrecognized     []byte                      `json:"-" bson:"-"`
	XXX_sizecache        int32                       `json:"-" bson:"-"`
}

func (m *GetClusterCidrResponse) Reset()         { *m = GetClusterCidrResponse{} }
func (m *GetClusterCidrResponse) String() string { return proto.CompactTextString(m) }
func (*GetClusterCidrResponse) ProtoMessage()    {}
func (*GetClusterCidrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{12}
}

func (m *GetClusterCidrResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterCidrResponse.Unmarshal(m, b)
}
func (m *GetClusterCidrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterCidrResponse.Marshal(b, m, deterministic)
}
func (m *GetClusterCidrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterCidrResponse.Merge(m, src)
}
func (m *GetClusterCidrResponse) XXX_Size() int {
	return xxx_messageInfo_GetClusterCidrResponse.Size(m)
}
func (m *GetClusterCidrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterCidrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterCidrResponse proto.InternalMessageInfo

func (m *GetClusterCidrResponse) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetClusterCidrResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetClusterCidrResponse) GetData() *GetClusterCidrResponseData {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetClusterCidrResponseData struct {
	Cidrs                []*Cidr  `protobuf:"bytes,1,rep,name=cidrs,proto3" json:"cidrs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GetClusterCidrResponseData) Reset()         { *m = GetClusterCidrResponseData{} }
func (m *GetClusterCidrResponseData) String() string { return proto.CompactTextString(m) }
func (*GetClusterCidrResponseData) ProtoMessage()    {}
func (*GetClusterCidrResponseData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{13}
}

func (m *GetClusterCidrResponseData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterCidrResponseData.Unmarshal(m, b)
}
func (m *GetClusterCidrResponseData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterCidrResponseData.Marshal(b, m, deterministic)
}
func (m *GetClusterCidrResponseData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterCidrResponseData.Merge(m, src)
}
func (m *GetClusterCidrResponseData) XXX_Size() int {
	return xxx_messageInfo_GetClusterCidrResponseData.Size(m)
}
func (m *GetClusterCidrResponseData) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterCidrResponseData.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterCidrResponseData proto.InternalMessageInfo

func (m *GetClusterCidrResponseData) GetCidrs() []*Cidr {
	if m != nil {
		return m.Cidrs
	}
	return nil
}

type Cidr struct {
	Ipnet                string   `protobuf:"bytes,1,opt,name=ipnet,proto3" json:"ipnet,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *Cidr) Reset()         { *m = Cidr{} }
func (m *Cidr) String() string { return proto.CompactTextString(m) }
func (*Cidr) ProtoMessage()    {}
func (*Cidr) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{14}
}

func (m *Cidr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cidr.Unmarshal(m, b)
}
func (m *Cidr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cidr.Marshal(b, m, deterministic)
}
func (m *Cidr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cidr.Merge(m, src)
}
func (m *Cidr) XXX_Size() int {
	return xxx_messageInfo_Cidr.Size(m)
}
func (m *Cidr) XXX_DiscardUnknown() {
	xxx_messageInfo_Cidr.DiscardUnknown(m)
}

var xxx_messageInfo_Cidr proto.InternalMessageInfo

func (m *Cidr) GetIpnet() string {
	if m != nil {
		return m.Ipnet
	}
	return ""
}

func (m *Cidr) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type AddClusterCidrRequest struct {
	Region               string   `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	CidrType             string   `protobuf:"bytes,2,opt,name=cidrType,proto3" json:"cidrType,omitempty"`
	ClusterID            string   `protobuf:"bytes,3,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	CidrLens             []uint32 `protobuf:"varint,4,rep,packed,name=cidrLens,proto3" json:"cidrLens,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *AddClusterCidrRequest) Reset()         { *m = AddClusterCidrRequest{} }
func (m *AddClusterCidrRequest) String() string { return proto.CompactTextString(m) }
func (*AddClusterCidrRequest) ProtoMessage()    {}
func (*AddClusterCidrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{15}
}

func (m *AddClusterCidrRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddClusterCidrRequest.Unmarshal(m, b)
}
func (m *AddClusterCidrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddClusterCidrRequest.Marshal(b, m, deterministic)
}
func (m *AddClusterCidrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddClusterCidrRequest.Merge(m, src)
}
func (m *AddClusterCidrRequest) XXX_Size() int {
	return xxx_messageInfo_AddClusterCidrRequest.Size(m)
}
func (m *AddClusterCidrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddClusterCidrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddClusterCidrRequest proto.InternalMessageInfo

func (m *AddClusterCidrRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *AddClusterCidrRequest) GetCidrType() string {
	if m != nil {
		return m.CidrType
	}
	return ""
}

func (m *AddClusterCidrRequest) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *AddClusterCidrRequest) GetCidrLens() []uint32 {
	if m != nil {
		return m.CidrLens
	}
	return nil
}

type AddClusterCidrResponse struct {
	Code                 uint32                      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string                      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 *AddClusterCidrResponseData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-" bson:"-"`
	XXX_unrecognized     []byte                      `json:"-" bson:"-"`
	XXX_sizecache        int32                       `json:"-" bson:"-"`
}

func (m *AddClusterCidrResponse) Reset()         { *m = AddClusterCidrResponse{} }
func (m *AddClusterCidrResponse) String() string { return proto.CompactTextString(m) }
func (*AddClusterCidrResponse) ProtoMessage()    {}
func (*AddClusterCidrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{16}
}

func (m *AddClusterCidrResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddClusterCidrResponse.Unmarshal(m, b)
}
func (m *AddClusterCidrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddClusterCidrResponse.Marshal(b, m, deterministic)
}
func (m *AddClusterCidrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddClusterCidrResponse.Merge(m, src)
}
func (m *AddClusterCidrResponse) XXX_Size() int {
	return xxx_messageInfo_AddClusterCidrResponse.Size(m)
}
func (m *AddClusterCidrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddClusterCidrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddClusterCidrResponse proto.InternalMessageInfo

func (m *AddClusterCidrResponse) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AddClusterCidrResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AddClusterCidrResponse) GetData() *AddClusterCidrResponseData {
	if m != nil {
		return m.Data
	}
	return nil
}

type AddClusterCidrResponseData struct {
	Cidrs                []*Cidr  `protobuf:"bytes,1,rep,name=cidrs,proto3" json:"cidrs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *AddClusterCidrResponseData) Reset()         { *m = AddClusterCidrResponseData{} }
func (m *AddClusterCidrResponseData) String() string { return proto.CompactTextString(m) }
func (*AddClusterCidrResponseData) ProtoMessage()    {}
func (*AddClusterCidrResponseData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{17}
}

func (m *AddClusterCidrResponseData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddClusterCidrResponseData.Unmarshal(m, b)
}
func (m *AddClusterCidrResponseData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddClusterCidrResponseData.Marshal(b, m, deterministic)
}
func (m *AddClusterCidrResponseData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddClusterCidrResponseData.Merge(m, src)
}
func (m *AddClusterCidrResponseData) XXX_Size() int {
	return xxx_messageInfo_AddClusterCidrResponseData.Size(m)
}
func (m *AddClusterCidrResponseData) XXX_DiscardUnknown() {
	xxx_messageInfo_AddClusterCidrResponseData.DiscardUnknown(m)
}

var xxx_messageInfo_AddClusterCidrResponseData proto.InternalMessageInfo

func (m *AddClusterCidrResponseData) GetCidrs() []*Cidr {
	if m != nil {
		return m.Cidrs
	}
	return nil
}

type GetClusterIPSurplusRequest struct {
	Region               string   `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	CidrType             string   `protobuf:"bytes,2,opt,name=cidrType,proto3" json:"cidrType,omitempty"`
	ClusterID            string   `protobuf:"bytes,3,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GetClusterIPSurplusRequest) Reset()         { *m = GetClusterIPSurplusRequest{} }
func (m *GetClusterIPSurplusRequest) String() string { return proto.CompactTextString(m) }
func (*GetClusterIPSurplusRequest) ProtoMessage()    {}
func (*GetClusterIPSurplusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{18}
}

func (m *GetClusterIPSurplusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterIPSurplusRequest.Unmarshal(m, b)
}
func (m *GetClusterIPSurplusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterIPSurplusRequest.Marshal(b, m, deterministic)
}
func (m *GetClusterIPSurplusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterIPSurplusRequest.Merge(m, src)
}
func (m *GetClusterIPSurplusRequest) XXX_Size() int {
	return xxx_messageInfo_GetClusterIPSurplusRequest.Size(m)
}
func (m *GetClusterIPSurplusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterIPSurplusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterIPSurplusRequest proto.InternalMessageInfo

func (m *GetClusterIPSurplusRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *GetClusterIPSurplusRequest) GetCidrType() string {
	if m != nil {
		return m.CidrType
	}
	return ""
}

func (m *GetClusterIPSurplusRequest) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

type GetClusterIPSurplusResponse struct {
	Code                 uint32                           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string                           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 *GetClusterIPSurplusResponseData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-" bson:"-"`
	XXX_unrecognized     []byte                           `json:"-" bson:"-"`
	XXX_sizecache        int32                            `json:"-" bson:"-"`
}

func (m *GetClusterIPSurplusResponse) Reset()         { *m = GetClusterIPSurplusResponse{} }
func (m *GetClusterIPSurplusResponse) String() string { return proto.CompactTextString(m) }
func (*GetClusterIPSurplusResponse) ProtoMessage()    {}
func (*GetClusterIPSurplusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{19}
}

func (m *GetClusterIPSurplusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterIPSurplusResponse.Unmarshal(m, b)
}
func (m *GetClusterIPSurplusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterIPSurplusResponse.Marshal(b, m, deterministic)
}
func (m *GetClusterIPSurplusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterIPSurplusResponse.Merge(m, src)
}
func (m *GetClusterIPSurplusResponse) XXX_Size() int {
	return xxx_messageInfo_GetClusterIPSurplusResponse.Size(m)
}
func (m *GetClusterIPSurplusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterIPSurplusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterIPSurplusResponse proto.InternalMessageInfo

func (m *GetClusterIPSurplusResponse) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetClusterIPSurplusResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetClusterIPSurplusResponse) GetData() *GetClusterIPSurplusResponseData {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetClusterIPSurplusResponseData struct {
	IPSurplus            uint32   `protobuf:"varint,1,opt,name=IPSurplus,proto3" json:"IPSurplus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GetClusterIPSurplusResponseData) Reset()         { *m = GetClusterIPSurplusResponseData{} }
func (m *GetClusterIPSurplusResponseData) String() string { return proto.CompactTextString(m) }
func (*GetClusterIPSurplusResponseData) ProtoMessage()    {}
func (*GetClusterIPSurplusResponseData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{20}
}

func (m *GetClusterIPSurplusResponseData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterIPSurplusResponseData.Unmarshal(m, b)
}
func (m *GetClusterIPSurplusResponseData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterIPSurplusResponseData.Marshal(b, m, deterministic)
}
func (m *GetClusterIPSurplusResponseData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterIPSurplusResponseData.Merge(m, src)
}
func (m *GetClusterIPSurplusResponseData) XXX_Size() int {
	return xxx_messageInfo_GetClusterIPSurplusResponseData.Size(m)
}
func (m *GetClusterIPSurplusResponseData) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterIPSurplusResponseData.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterIPSurplusResponseData proto.InternalMessageInfo

func (m *GetClusterIPSurplusResponseData) GetIPSurplus() uint32 {
	if m != nil {
		return m.IPSurplus
	}
	return 0
}

type GetAllocatableCidrRequest struct {
	Region               string   `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	CidrType             string   `protobuf:"bytes,2,opt,name=cidrType,proto3" json:"cidrType,omitempty"`
	VpcID                string   `protobuf:"bytes,3,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	CidrLen              uint32   `protobuf:"varint,4,opt,name=cidrLen,proto3" json:"cidrLen,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GetAllocatableCidrRequest) Reset()         { *m = GetAllocatableCidrRequest{} }
func (m *GetAllocatableCidrRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllocatableCidrRequest) ProtoMessage()    {}
func (*GetAllocatableCidrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{21}
}

func (m *GetAllocatableCidrRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllocatableCidrRequest.Unmarshal(m, b)
}
func (m *GetAllocatableCidrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllocatableCidrRequest.Marshal(b, m, deterministic)
}
func (m *GetAllocatableCidrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllocatableCidrRequest.Merge(m, src)
}
func (m *GetAllocatableCidrRequest) XXX_Size() int {
	return xxx_messageInfo_GetAllocatableCidrRequest.Size(m)
}
func (m *GetAllocatableCidrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllocatableCidrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllocatableCidrRequest proto.InternalMessageInfo

func (m *GetAllocatableCidrRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *GetAllocatableCidrRequest) GetCidrType() string {
	if m != nil {
		return m.CidrType
	}
	return ""
}

func (m *GetAllocatableCidrRequest) GetVpcID() string {
	if m != nil {
		return m.VpcID
	}
	return ""
}

func (m *GetAllocatableCidrRequest) GetCidrLen() uint32 {
	if m != nil {
		return m.CidrLen
	}
	return 0
}

type GetAllocatableCidrResponse struct {
	Code                 uint32                          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string                          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 *GetAllocatableCidrResponseData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-" bson:"-"`
	XXX_unrecognized     []byte                          `json:"-" bson:"-"`
	XXX_sizecache        int32                           `json:"-" bson:"-"`
}

func (m *GetAllocatableCidrResponse) Reset()         { *m = GetAllocatableCidrResponse{} }
func (m *GetAllocatableCidrResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllocatableCidrResponse) ProtoMessage()    {}
func (*GetAllocatableCidrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{22}
}

func (m *GetAllocatableCidrResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllocatableCidrResponse.Unmarshal(m, b)
}
func (m *GetAllocatableCidrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllocatableCidrResponse.Marshal(b, m, deterministic)
}
func (m *GetAllocatableCidrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllocatableCidrResponse.Merge(m, src)
}
func (m *GetAllocatableCidrResponse) XXX_Size() int {
	return xxx_messageInfo_GetAllocatableCidrResponse.Size(m)
}
func (m *GetAllocatableCidrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllocatableCidrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllocatableCidrResponse proto.InternalMessageInfo

func (m *GetAllocatableCidrResponse) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetAllocatableCidrResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetAllocatableCidrResponse) GetData() *GetAllocatableCidrResponseData {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetAllocatableCidrResponseData struct {
	Cidr                 string   `protobuf:"bytes,1,opt,name=cidr,proto3" json:"cidr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GetAllocatableCidrResponseData) Reset()         { *m = GetAllocatableCidrResponseData{} }
func (m *GetAllocatableCidrResponseData) String() string { return proto.CompactTextString(m) }
func (*GetAllocatableCidrResponseData) ProtoMessage()    {}
func (*GetAllocatableCidrResponseData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{23}
}

func (m *GetAllocatableCidrResponseData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllocatableCidrResponseData.Unmarshal(m, b)
}
func (m *GetAllocatableCidrResponseData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllocatableCidrResponseData.Marshal(b, m, deterministic)
}
func (m *GetAllocatableCidrResponseData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllocatableCidrResponseData.Merge(m, src)
}
func (m *GetAllocatableCidrResponseData) XXX_Size() int {
	return xxx_messageInfo_GetAllocatableCidrResponseData.Size(m)
}
func (m *GetAllocatableCidrResponseData) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllocatableCidrResponseData.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllocatableCidrResponseData proto.InternalMessageInfo

func (m *GetAllocatableCidrResponseData) GetCidr() string {
	if m != nil {
		return m.Cidr
	}
	return ""
}

type GetVPCIPSurplusRequest struct {
	Region               string   `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	CidrType             string   `protobuf:"bytes,2,opt,name=cidrType,proto3" json:"cidrType,omitempty"`
	VpcID                string   `protobuf:"bytes,3,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GetVPCIPSurplusRequest) Reset()         { *m = GetVPCIPSurplusRequest{} }
func (m *GetVPCIPSurplusRequest) String() string { return proto.CompactTextString(m) }
func (*GetVPCIPSurplusRequest) ProtoMessage()    {}
func (*GetVPCIPSurplusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{24}
}

func (m *GetVPCIPSurplusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVPCIPSurplusRequest.Unmarshal(m, b)
}
func (m *GetVPCIPSurplusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVPCIPSurplusRequest.Marshal(b, m, deterministic)
}
func (m *GetVPCIPSurplusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVPCIPSurplusRequest.Merge(m, src)
}
func (m *GetVPCIPSurplusRequest) XXX_Size() int {
	return xxx_messageInfo_GetVPCIPSurplusRequest.Size(m)
}
func (m *GetVPCIPSurplusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVPCIPSurplusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVPCIPSurplusRequest proto.InternalMessageInfo

func (m *GetVPCIPSurplusRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *GetVPCIPSurplusRequest) GetCidrType() string {
	if m != nil {
		return m.CidrType
	}
	return ""
}

func (m *GetVPCIPSurplusRequest) GetVpcID() string {
	if m != nil {
		return m.VpcID
	}
	return ""
}

type GetVPCIPSurplusResponse struct {
	Code                 uint32                       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string                       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 *GetVPCIPSurplusResponseData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-" bson:"-"`
	XXX_unrecognized     []byte                       `json:"-" bson:"-"`
	XXX_sizecache        int32                        `json:"-" bson:"-"`
}

func (m *GetVPCIPSurplusResponse) Reset()         { *m = GetVPCIPSurplusResponse{} }
func (m *GetVPCIPSurplusResponse) String() string { return proto.CompactTextString(m) }
func (*GetVPCIPSurplusResponse) ProtoMessage()    {}
func (*GetVPCIPSurplusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{25}
}

func (m *GetVPCIPSurplusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVPCIPSurplusResponse.Unmarshal(m, b)
}
func (m *GetVPCIPSurplusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVPCIPSurplusResponse.Marshal(b, m, deterministic)
}
func (m *GetVPCIPSurplusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVPCIPSurplusResponse.Merge(m, src)
}
func (m *GetVPCIPSurplusResponse) XXX_Size() int {
	return xxx_messageInfo_GetVPCIPSurplusResponse.Size(m)
}
func (m *GetVPCIPSurplusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVPCIPSurplusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetVPCIPSurplusResponse proto.InternalMessageInfo

func (m *GetVPCIPSurplusResponse) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetVPCIPSurplusResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetVPCIPSurplusResponse) GetData() *GetVPCIPSurplusResponseData {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetVPCIPSurplusResponseData struct {
	IPSurplus            uint32   `protobuf:"varint,1,opt,name=IPSurplus,proto3" json:"IPSurplus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GetVPCIPSurplusResponseData) Reset()         { *m = GetVPCIPSurplusResponseData{} }
func (m *GetVPCIPSurplusResponseData) String() string { return proto.CompactTextString(m) }
func (*GetVPCIPSurplusResponseData) ProtoMessage()    {}
func (*GetVPCIPSurplusResponseData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dff743ee33b9964, []int{26}
}

func (m *GetVPCIPSurplusResponseData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVPCIPSurplusResponseData.Unmarshal(m, b)
}
func (m *GetVPCIPSurplusResponseData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVPCIPSurplusResponseData.Marshal(b, m, deterministic)
}
func (m *GetVPCIPSurplusResponseData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVPCIPSurplusResponseData.Merge(m, src)
}
func (m *GetVPCIPSurplusResponseData) XXX_Size() int {
	return xxx_messageInfo_GetVPCIPSurplusResponseData.Size(m)
}
func (m *GetVPCIPSurplusResponseData) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVPCIPSurplusResponseData.DiscardUnknown(m)
}

var xxx_messageInfo_GetVPCIPSurplusResponseData proto.InternalMessageInfo

func (m *GetVPCIPSurplusResponseData) GetIPSurplus() uint32 {
	if m != nil {
		return m.IPSurplus
	}
	return 0
}

func init() {
	proto.RegisterType((*CreateSubnetInput)(nil), "cidrmanager.CreateSubnetInput")
	proto.RegisterType((*DeleteSubnetInput)(nil), "cidrmanager.DeleteSubnetInput")
	proto.RegisterType((*SubnetOutput)(nil), "cidrmanager.SubnetOutput")
	proto.RegisterType((*SubnetResp)(nil), "cidrmanager.SubnetResp")
	proto.RegisterType((*SubnetsResp)(nil), "cidrmanager.SubnetsResp")
	proto.RegisterType((*EmptyDataResp)(nil), "cidrmanager.EmptyDataResp")
	proto.RegisterType((*MaskRangeResp)(nil), "cidrmanager.MaskRangeResp")
	proto.RegisterType((*MaskRangeQueryInput)(nil), "cidrmanager.MaskRangeQueryInput")
	proto.RegisterType((*MaskRangeQueryOutput)(nil), "cidrmanager.MaskRangeQueryOutput")
	proto.RegisterType((*GetSubnetInput)(nil), "cidrmanager.GetSubnetInput")
	proto.RegisterType((*ListSubnetsInput)(nil), "cidrmanager.ListSubnetsInput")
	proto.RegisterType((*GetClusterCidrRequest)(nil), "cidrmanager.GetClusterCidrRequest")
	proto.RegisterType((*GetClusterCidrResponse)(nil), "cidrmanager.GetClusterCidrResponse")
	proto.RegisterType((*GetClusterCidrResponseData)(nil), "cidrmanager.GetClusterCidrResponseData")
	proto.RegisterType((*Cidr)(nil), "cidrmanager.Cidr")
	proto.RegisterType((*AddClusterCidrRequest)(nil), "cidrmanager.AddClusterCidrRequest")
	proto.RegisterType((*AddClusterCidrResponse)(nil), "cidrmanager.AddClusterCidrResponse")
	proto.RegisterType((*AddClusterCidrResponseData)(nil), "cidrmanager.AddClusterCidrResponseData")
	proto.RegisterType((*GetClusterIPSurplusRequest)(nil), "cidrmanager.GetClusterIPSurplusRequest")
	proto.RegisterType((*GetClusterIPSurplusResponse)(nil), "cidrmanager.GetClusterIPSurplusResponse")
	proto.RegisterType((*GetClusterIPSurplusResponseData)(nil), "cidrmanager.GetClusterIPSurplusResponseData")
	proto.RegisterType((*GetAllocatableCidrRequest)(nil), "cidrmanager.GetAllocatableCidrRequest")
	proto.RegisterType((*GetAllocatableCidrResponse)(nil), "cidrmanager.GetAllocatableCidrResponse")
	proto.RegisterType((*GetAllocatableCidrResponseData)(nil), "cidrmanager.GetAllocatableCidrResponseData")
	proto.RegisterType((*GetVPCIPSurplusRequest)(nil), "cidrmanager.GetVPCIPSurplusRequest")
	proto.RegisterType((*GetVPCIPSurplusResponse)(nil), "cidrmanager.GetVPCIPSurplusResponse")
	proto.RegisterType((*GetVPCIPSurplusResponseData)(nil), "cidrmanager.GetVPCIPSurplusResponseData")
}

func init() { proto.RegisterFile("cidrmanager.proto", fileDescriptor_3dff743ee33b9964) }

var fileDescriptor_3dff743ee33b9964 = []byte{
	// 2615 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x5a, 0x4f, 0x70, 0x1b, 0xd5,
	0x19, 0x9f, 0x95, 0x65, 0x13, 0xbf, 0x38, 0x71, 0xf2, 0x12, 0x62, 0x45, 0x76, 0x8c, 0xbc, 0x61,
	0x62, 0xb3, 0xc8, 0x56, 0xbc, 0x01, 0x03, 0xca, 0x40, 0x79, 0x92, 0x48, 0x10, 0x49, 0x88, 0xd9,
	0x34, 0xa1, 0x84, 0x52, 0xba, 0x91, 0xb6, 0xaa, 0x88, 0x2c, 0xa9, 0xd2, 0x3a, 0x04, 0x18, 0x5a,
	0x27, 0xb5, 0x21, 0xa1, 0x4e, 0x04, 0x0f, 0x43, 0x1a, 0x27, 0x03, 0xa1, 0x4d, 0xc0, 0x94, 0x06,
	0x39, 0x40, 0xc7, 0xae, 0x1d, 0x93, 0x6b, 0xcf, 0x6e, 0x4f, 0x1c, 0x38, 0x74, 0xb4, 0x92, 0x7c,
	0x69, 0x2e, 0xed, 0x85, 0xe9, 0xa1, 0xb3, 0xef, 0xad, 0xe4, 0x5d, 0x69, 0x57, 0x16, 0x4c, 0x1b,
	0x98, 0x72, 0xb1, 0xbc, 0xdf, 0xfb, 0xf7, 0xfb, 0xfe, 0xfe, 0xbe, 0x7d, 0x12, 0x58, 0x1f, 0x8a,
	0x86, 0x53, 0x43, 0x62, 0x5c, 0x8c, 0x48, 0xa9, 0xbe, 0x64, 0x2a, 0x21, 0x27, 0xe0, 0x6a, 0x9d,
	0xc8, 0xd9, 0x11, 0x49, 0x24, 0x22, 0x31, 0xc9, 0x23, 0x26, 0xa3, 0x1e, 0x31, 0x1e, 0x4f, 0xc8,
	0xa2, 0x1c, 0x4d, 0xc4, 0xd3, 0x74, 0xaa, 0xd3, 0x4d, 0x3e, 0x42, 0xbd, 0x11, 0x29, 0xde, 0x9b,
	0x7e, 0x5e, 0x8c, 0x44, 0xa4, 0x94, 0x27, 0x91, 0x24, 0x33, 0x4c, 0x66, 0xb7, 0x1d, 0x13, 0x63,
	0xd1, 0xb0, 0x28, 0x4b, 0x9e, 0xd2, 0x3f, 0x74, 0x80, 0xfd, 0x67, 0x03, 0x58, 0xef, 0x4f, 0x49,
	0xa2, 0x2c, 0x1d, 0x18, 0x3e, 0x12, 0x97, 0xe4, 0x60, 0x3c, 0x39, 0x2c, 0xc3, 0xfb, 0xc0, 0x2a,
	0x15, 0xc9, 0x0f, 0x5f, 0x48, 0x4a, 0x0e, 0xc6, 0xc5, 0xf4, 0x34, 0xfb, 0xda, 0x31, 0x72, 0x70,
	0x65, 0x21, 0xdf, 0xa2, 0x5c, 0x7d, 0xbd, 0xb0, 0xf0, 0x46, 0xe1, 0xda, 0xbc, 0xf2, 0xce, 0x6f,
	0x84, 0xb2, 0x1c, 0xde, 0x0d, 0x9a, 0x52, 0x52, 0x24, 0x9a, 0x88, 0x3b, 0x6c, 0x64, 0xd9, 0x06,
	0x8c, 0xd6, 0x71, 0x9a, 0x88, 0x6f, 0x52, 0x2e, 0x4e, 0x2b, 0xef, 0xbe, 0x2b, 0x68, 0xcf, 0xb0,
	0x07, 0x34, 0x1e, 0x4b, 0x86, 0x82, 0x61, 0x47, 0x03, 0x99, 0x0b, 0x31, 0x6a, 0xe5, 0xa8, 0x84,
	0x6f, 0x3a, 0x34, 0xe8, 0x77, 0x05, 0x03, 0x02, 0x7d, 0x84, 0xfd, 0xc0, 0x3e, 0x24, 0xa6, 0x8f,
	0x3a, 0xec, 0x2e, 0xa6, 0xa7, 0xd1, 0xb7, 0x05, 0x23, 0x27, 0x47, 0x04, 0x3c, 0xa4, 0x38, 0xf2,
	0x67, 0x3f, 0x2c, 0x5c, 0x3a, 0xa1, 0x5c, 0xfe, 0x40, 0x99, 0xce, 0x08, 0x64, 0x04, 0x86, 0x80,
	0xfd, 0xc5, 0x44, 0x5c, 0x72, 0x34, 0x92, 0xbd, 0xf7, 0x63, 0xb4, 0x97, 0x23, 0x02, 0x3e, 0xa0,
	0x64, 0xb2, 0x85, 0x89, 0x29, 0x65, 0x7c, 0x2e, 0x18, 0xb8, 0x79, 0x7d, 0x5c, 0x19, 0x9b, 0x52,
	0xae, 0x8d, 0x14, 0x67, 0xb2, 0x85, 0x89, 0x6b, 0xf9, 0xa9, 0xf7, 0x94, 0xeb, 0x99, 0xdc, 0xec,
	0x99, 0xa5, 0x8b, 0x23, 0xc5, 0xf7, 0x4f, 0xdc, 0xbc, 0x3e, 0x5e, 0xb8, 0xf0, 0x59, 0xfe, 0xec,
	0x15, 0xfd, 0xa8, 0x72, 0x63, 0x6c, 0x69, 0xe4, 0xb4, 0x40, 0xf6, 0x82, 0x47, 0x81, 0x3d, 0x2e,
	0x0e, 0x49, 0x8e, 0x26, 0x72, 0xc8, 0x93, 0x18, 0xed, 0xe1, 0x88, 0x80, 0xf7, 0x53, 0x5c, 0xca,
	0xeb, 0x67, 0x0a, 0x1f, 0x4c, 0xbb, 0x5d, 0x35, 0x0e, 0x71, 0xbb, 0x4c, 0xce, 0xc8, 0x64, 0x97,
	0x46, 0x4e, 0x7f, 0xe5, 0x6b, 0x4a, 0xd9, 0xd7, 0xd9, 0x1c, 0x61, 0x81, 0xec, 0xe9, 0x7d, 0x0c,
	0xa3, 0xdd, 0xe0, 0x11, 0xae, 0xda, 0x5d, 0xbc, 0x43, 0x39, 0x75, 0x41, 0x99, 0x9f, 0xa3, 0x67,
	0x16, 0x3f, 0x7f, 0x53, 0x19, 0xbb, 0xa2, 0x64, 0x4e, 0xe6, 0xdf, 0x9a, 0x5e, 0x64, 0x34, 0x5b,
	0x2f, 0x32, 0xd4, 0x92, 0x8b, 0x0c, 0xb1, 0x0e, 0xfb, 0x25, 0x03, 0xd6, 0x07, 0xa4, 0x98, 0xf4,
	0x5f, 0x72, 0x7b, 0x17, 0xb0, 0x45, 0xc3, 0x9a, 0xcb, 0xd7, 0x63, 0xb4, 0x96, 0xb3, 0x45, 0xc3,
	0xfc, 0x2a, 0x3a, 0x39, 0x1a, 0x16, 0x6c, 0xd1, 0xb0, 0x2e, 0x32, 0x1a, 0x56, 0x8c, 0x0c, 0xef,
	0xc3, 0x18, 0x3d, 0x08, 0x76, 0x72, 0xd5, 0x10, 0x6b, 0xa9, 0x6a, 0x8b, 0x86, 0xcb, 0xfa, 0xb2,
	0xff, 0x62, 0x40, 0x0b, 0x5d, 0xb7, 0x7f, 0x58, 0x56, 0x75, 0xa3, 0x10, 0x19, 0x53, 0x88, 0xc1,
	0x00, 0x81, 0xd8, 0x05, 0x1a, 0xa3, 0xc9, 0xc7, 0x25, 0x59, 0x53, 0x64, 0x35, 0x46, 0xab, 0xf8,
	0x26, 0x3a, 0x43, 0xa0, 0x23, 0xb0, 0x47, 0x73, 0x38, 0xd5, 0x61, 0x23, 0x46, 0xeb, 0x35, 0x87,
	0x37, 0x97, 0x1d, 0x4e, 0xbd, 0xa5, 0xce, 0x24, 0xf1, 0x67, 0xd7, 0xcd, 0x24, 0xf1, 0xd7, 0x5c,
	0x8e, 0x3f, 0x2d, 0x88, 0xca, 0x69, 0xd0, 0xb8, 0x42, 0x1a, 0x78, 0xbb, 0x30, 0xea, 0x04, 0x1d,
	0x9c, 0x41, 0xb1, 0x92, 0x4f, 0x72, 0x37, 0xde, 0xcb, 0x9f, 0xc8, 0xb2, 0xff, 0x66, 0x00, 0xa0,
	0xc3, 0x82, 0x94, 0x4e, 0xc2, 0x3e, 0x60, 0x0f, 0x25, 0xc2, 0xd4, 0x9b, 0x6b, 0x7c, 0x4e, 0x8c,
	0xda, 0x38, 0x22, 0xe0, 0x5b, 0x8b, 0x37, 0x26, 0x94, 0x0b, 0xef, 0x2c, 0x4d, 0x9c, 0x2f, 0x66,
	0xb3, 0x85, 0x4b, 0x27, 0x04, 0x22, 0x86, 0x5e, 0x70, 0xdb, 0x90, 0x94, 0x4e, 0x8b, 0x11, 0x49,
	0x33, 0x82, 0x0b, 0xa3, 0x2d, 0x5c, 0x49, 0xc6, 0x43, 0xfd, 0x2a, 0x7a, 0xa2, 0x50, 0x1a, 0x84,
	0xbb, 0x80, 0x3d, 0x2c, 0xca, 0x22, 0xb1, 0xcd, 0x6a, 0x7e, 0x73, 0x9f, 0xbe, 0xbc, 0xe9, 0x11,
	0xfb, 0xda, 0x30, 0xda, 0xc8, 0x91, 0xb9, 0x46, 0xf0, 0x02, 0x91, 0x79, 0xbd, 0x18, 0xdd, 0x07,
	0xee, 0xe5, 0x74, 0x6a, 0xf0, 0xad, 0x5a, 0xdc, 0x4d, 0x8e, 0x52, 0x00, 0x8b, 0x0c, 0x81, 0xbb,
	0xc8, 0x94, 0x0e, 0x5f, 0x64, 0xc8, 0x5a, 0x76, 0xd4, 0x06, 0x56, 0xd3, 0x75, 0xe9, 0x5b, 0xae,
	0xff, 0xde, 0xb2, 0xfe, 0x0d, 0xb5, 0xf5, 0xa7, 0xf5, 0x8b, 0xe8, 0x0f, 0xf5, 0xfa, 0x2b, 0xa7,
	0xce, 0x15, 0xdf, 0x9b, 0xd2, 0xac, 0xb0, 0x13, 0xa3, 0xfb, 0xc1, 0x00, 0xa7, 0xd7, 0xa6, 0x7e,
	0x33, 0x7c, 0xca, 0x80, 0x35, 0x8f, 0x0c, 0x25, 0xe5, 0x17, 0x02, 0xa2, 0x2c, 0xde, 0x6a, 0x43,
	0x78, 0x07, 0x30, 0xda, 0x01, 0xfa, 0x39, 0x23, 0x82, 0x95, 0xc1, 0xb3, 0x1f, 0xd9, 0xc0, 0x9a,
	0x7d, 0x62, 0xfa, 0xa8, 0x20, 0xc6, 0x23, 0xd2, 0x2d, 0x77, 0x5f, 0xc8, 0x10, 0xbe, 0x5d, 0x06,
	0xf7, 0x95, 0x51, 0x3d, 0x31, 0x2c, 0xa5, 0x5e, 0xd0, 0xdc, 0xe8, 0xc6, 0xe8, 0x2e, 0xcd, 0x8d,
	0x5d, 0x4a, 0x26, 0xab, 0x9c, 0x7a, 0x65, 0x69, 0xec, 0x8c, 0x9e, 0x8f, 0x8a, 0xe3, 0xbf, 0x56,
	0x2e, 0x7c, 0x66, 0x88, 0xed, 0x20, 0x46, 0xbb, 0x40, 0x80, 0x33, 0xaa, 0xc9, 0xb7, 0xd7, 0x58,
	0x6e, 0xe9, 0xe3, 0xbf, 0xd9, 0xc0, 0x06, 0x23, 0xae, 0xef, 0x26, 0x77, 0x3f, 0x03, 0x80, 0x7a,
	0x84, 0x2f, 0x96, 0x08, 0x1d, 0x4d, 0x6b, 0xe5, 0xf0, 0x41, 0x8c, 0xbc, 0x9c, 0x4e, 0xcc, 0xbb,
	0xf3, 0xe3, 0xaf, 0x2a, 0x1f, 0x4f, 0xaa, 0x12, 0x37, 0x65, 0x3f, 0x95, 0x9a, 0x2f, 0x4f, 0xe6,
	0x66, 0xff, 0x90, 0x5b, 0xb8, 0x51, 0x98, 0x98, 0x5a, 0x1a, 0x39, 0xa7, 0x64, 0x66, 0x54, 0x23,
	0x4d, 0x4e, 0x08, 0xba, 0x95, 0xde, 0xc7, 0x31, 0xda, 0x03, 0x82, 0x9c, 0x99, 0x29, 0x6a, 0xba,
	0x25, 0xff, 0xee, 0x95, 0x62, 0xf6, 0x77, 0x55, 0x04, 0xc9, 0xbe, 0xcf, 0x80, 0x8d, 0x66, 0xee,
	0x86, 0xdb, 0x40, 0xc3, 0x50, 0x34, 0x4e, 0x4c, 0xda, 0x48, 0xeb, 0xb9, 0xfa, 0xcc, 0x83, 0xfc,
	0xc5, 0x11, 0x65, 0x3a, 0xa3, 0xb2, 0xaa, 0xa0, 0x0a, 0xc8, 0x3c, 0xf1, 0x38, 0xb1, 0x61, 0x79,
	0x9e, 0x78, 0x9c, 0xce, 0xbb, 0xfc, 0x81, 0x36, 0x4f, 0x3c, 0xee, 0x7d, 0x08, 0xa3, 0x9d, 0xe0,
	0x01, 0xce, 0xf4, 0xb0, 0x3a, 0x90, 0xab, 0x14, 0xbe, 0x76, 0xb7, 0x24, 0xff, 0xcf, 0xf9, 0x5b,
	0x23, 0xc7, 0xaf, 0xc5, 0xdf, 0x7e, 0x8c, 0x1e, 0x06, 0x0f, 0x71, 0x15, 0xf8, 0xf8, 0xce, 0xe2,
	0xd9, 0x19, 0x25, 0xf3, 0xb6, 0xbe, 0xe6, 0x51, 0x65, 0xaa, 0xba, 0x15, 0x5b, 0x34, 0xcc, 0xfe,
	0x83, 0x01, 0xeb, 0xf6, 0x46, 0xd3, 0xda, 0x0e, 0xe9, 0xef, 0x64, 0x74, 0x97, 0x9a, 0xb2, 0xd6,
	0x65, 0xa0, 0xa5, 0xd0, 0x9b, 0xf9, 0x44, 0xb9, 0xfa, 0x5b, 0xe5, 0xe2, 0x94, 0xd6, 0x18, 0x90,
	0xda, 0x6e, 0xa1, 0xad, 0x16, 0x7a, 0x5f, 0xd8, 0xc0, 0xed, 0xbb, 0x25, 0xd9, 0x1f, 0x1b, 0x4e,
	0xcb, 0x52, 0xca, 0x1f, 0x0d, 0xa7, 0x04, 0xe9, 0x17, 0xc3, 0x52, 0x5a, 0xd6, 0x81, 0x67, 0x56,
	0x06, 0xaf, 0x37, 0x91, 0xed, 0xeb, 0x98, 0xe8, 0x57, 0xa0, 0x39, 0x44, 0xcf, 0x0e, 0x06, 0x34,
	0xcd, 0x45, 0x8c, 0x1e, 0xe2, 0x96, 0xa5, 0x7c, 0x7f, 0xf1, 0xb5, 0x93, 0x85, 0x93, 0x7f, 0x2e,
	0xcc, 0x8f, 0xe6, 0x4f, 0x8f, 0x28, 0x63, 0x9f, 0x16, 0x4f, 0x4c, 0x14, 0x26, 0x47, 0x97, 0x2e,
	0xbc, 0x52, 0xf8, 0xfc, 0xf2, 0xcd, 0xeb, 0xe3, 0xc5, 0xec, 0x95, 0x60, 0x20, 0x37, 0x3b, 0xe7,
	0xf3, 0x1f, 0xa0, 0xb2, 0x60, 0xe0, 0x2b, 0xdf, 0x96, 0x54, 0xbb, 0xda, 0xc5, 0xf2, 0xad, 0x3f,
	0x79, 0x7a, 0x7b, 0xef, 0x03, 0x62, 0xef, 0x8b, 0xa8, 0xf7, 0x70, 0xef, 0x33, 0x77, 0xdf, 0xe9,
	0xb5, 0xfb, 0xfc, 0x07, 0x7a, 0x85, 0xe5, 0xdd, 0xbd, 0x87, 0x31, 0x7a, 0x12, 0x1c, 0xe4, 0xcc,
	0x8d, 0xc0, 0x77, 0x50, 0xeb, 0xd1, 0x8d, 0x55, 0xd0, 0x34, 0x82, 0x8a, 0xd9, 0x99, 0xfc, 0xb5,
	0x93, 0x3a, 0x6b, 0x96, 0x15, 0x5a, 0x64, 0x96, 0xf7, 0x66, 0x2f, 0xd9, 0xc0, 0xa6, 0xca, 0x7d,
	0xd3, 0xc9, 0x44, 0x3c, 0x4d, 0x5a, 0x35, 0x1d, 0xcb, 0xd0, 0x56, 0x8d, 0xb0, 0x4c, 0x33, 0xe5,
	0x8b, 0x65, 0x7e, 0xb9, 0xa7, 0x92, 0x5f, 0x08, 0x25, 0x95, 0xf9, 0xa5, 0x85, 0xce, 0xaf, 0x64,
	0x96, 0x1f, 0x19, 0x98, 0xa5, 0xdb, 0xc0, 0x2c, 0xe6, 0x90, 0x54, 0xd2, 0xa4, 0x5e, 0xa3, 0xfc,
	0xb2, 0xae, 0x52, 0x69, 0x8d, 0x4e, 0xf6, 0x62, 0x14, 0x04, 0xbb, 0x39, 0x0b, 0xc5, 0xac, 0x2c,
	0xa6, 0xbc, 0x79, 0x46, 0x99, 0x9b, 0xa8, 0xe6, 0xdf, 0x9f, 0x01, 0xa7, 0x35, 0x1c, 0xf8, 0x28,
	0x68, 0x54, 0xb7, 0x48, 0x3b, 0x18, 0xd2, 0xdf, 0xac, 0x37, 0xa8, 0xa1, 0xce, 0xf6, 0xdd, 0x81,
	0x51, 0x07, 0x47, 0x27, 0xf1, 0x1b, 0xe8, 0xa1, 0x85, 0xc9, 0x51, 0xf5, 0x59, 0xeb, 0x6c, 0xe8,
	0x18, 0xfb, 0x2a, 0x03, 0xec, 0xea, 0x02, 0xd8, 0xad, 0x36, 0xdc, 0x71, 0x49, 0xd6, 0xb7, 0xe5,
	0x54, 0xc2, 0xd3, 0x0f, 0x81, 0x7e, 0xc0, 0xad, 0xc0, 0x2e, 0x2f, 0x87, 0x73, 0x2b, 0x46, 0x2d,
	0x1c, 0x11, 0xf0, 0xe4, 0xaf, 0x40, 0xfe, 0x7a, 0xfb, 0x31, 0xea, 0x03, 0x6e, 0xce, 0xae, 0x1e,
	0xc2, 0x77, 0x90, 0x63, 0xc7, 0xc7, 0x94, 0xd7, 0x3f, 0x22, 0x5b, 0xe4, 0x66, 0xcf, 0xaa, 0x93,
	0x94, 0xab, 0xe7, 0xf2, 0x1f, 0xff, 0x69, 0x91, 0xa1, 0xfb, 0xb2, 0x9f, 0x34, 0x80, 0xdb, 0x51,
	0x38, 0xfc, 0xbd, 0xcd, 0x38, 0xf8, 0x04, 0x45, 0xbe, 0x57, 0x8a, 0xab, 0xd4, 0xdc, 0xd0, 0xb3,
	0xc6, 0x77, 0x2f, 0x46, 0x3c, 0x57, 0x16, 0xf2, 0xdb, 0xb4, 0xff, 0x5c, 0xb1, 0x68, 0x5a, 0x76,
	0xbb, 0xd4, 0x27, 0x97, 0xca, 0x61, 0xae, 0x98, 0x14, 0x8f, 0xc8, 0x3f, 0x77, 0xbb, 0xfa, 0x5d,
	0xbf, 0x74, 0xed, 0xe0, 0x85, 0xf2, 0x0a, 0xef, 0xb3, 0x18, 0xfd, 0x18, 0x1c, 0xe6, 0xcc, 0xed,
	0xca, 0x6f, 0xa2, 0x28, 0xf3, 0x33, 0xf3, 0xca, 0x6b, 0x97, 0xd4, 0x35, 0xf5, 0xa5, 0xaf, 0x26,
	0x56, 0x0f, 0x60, 0x7f, 0x6f, 0x03, 0x9b, 0x2a, 0x37, 0xbf, 0x45, 0x99, 0xfc, 0x74, 0x8d, 0x4c,
	0x36, 0x87, 0x44, 0x32, 0xb9, 0x13, 0xa3, 0x76, 0x2d, 0x93, 0x37, 0x50, 0xcd, 0xb5, 0xbc, 0x30,
	0x4d, 0x66, 0xf3, 0x8d, 0xbe, 0x41, 0x32, 0x5b, 0x23, 0xfa, 0xba, 0xc9, 0x6c, 0x06, 0x5a, 0x4b,
	0x66, 0xc5, 0xa6, 0xaf, 0x1a, 0xc1, 0xc1, 0x03, 0xc3, 0xa9, 0x64, 0x6c, 0x38, 0xfd, 0x3d, 0x63,
	0xae, 0x9f, 0x62, 0xf4, 0x0c, 0x78, 0x9a, 0xab, 0x61, 0x09, 0x7e, 0x8b, 0xde, 0x7f, 0xca, 0xe9,
	0x0f, 0x73, 0x0b, 0xe7, 0xa3, 0xc9, 0xfc, 0x5b, 0xd3, 0x75, 0xf2, 0xd7, 0x9c, 0x0d, 0xb4, 0x9b,
	0xee, 0xae, 0x85, 0xfe, 0xad, 0x7c, 0x55, 0x32, 0xa6, 0x81, 0xdb, 0x82, 0xd0, 0xaa, 0x30, 0x92,
	0x5c, 0xd8, 0x8c, 0xd1, 0x26, 0x2d, 0x17, 0xd6, 0x52, 0x5b, 0x44, 0x93, 0xb9, 0x85, 0xf3, 0x4b,
	0xaf, 0x66, 0xb4, 0x34, 0x10, 0x30, 0xda, 0x0f, 0xf6, 0x71, 0xb5, 0x94, 0xb5, 0xb4, 0xa5, 0x55,
	0x32, 0x3c, 0x05, 0xee, 0x58, 0x01, 0x17, 0x1c, 0x00, 0xcd, 0xe5, 0x01, 0xcd, 0x88, 0x0e, 0x8c,
	0x6e, 0xe7, 0x96, 0xa5, 0xfc, 0xaa, 0x32, 0xd2, 0x65, 0x21, 0xfb, 0x46, 0x03, 0xd8, 0xbc, 0x5b,
	0x92, 0x51, 0x2c, 0x96, 0x08, 0x89, 0xb2, 0x78, 0x24, 0x26, 0xe9, 0x69, 0xe4, 0x07, 0x15, 0xe1,
	0xdf, 0x8d, 0xd1, 0x9d, 0xe5, 0xf0, 0x77, 0xd2, 0x4f, 0xb7, 0x4b, 0xab, 0x89, 0xa7, 0x47, 0xd4,
	0x76, 0xd1, 0x98, 0x12, 0x07, 0xab, 0x52, 0xe2, 0x01, 0x8c, 0x06, 0x74, 0x29, 0xc1, 0xe9, 0x53,
	0xc2, 0xed, 0x8a, 0xc4, 0x12, 0x47, 0xc4, 0x58, 0x2a, 0x31, 0x2c, 0x4b, 0x29, 0x57, 0x22, 0xe5,
	0x0a, 0x47, 0x53, 0x52, 0x48, 0xa6, 0xcf, 0xba, 0x84, 0xb9, 0x87, 0x36, 0xb8, 0xa5, 0x64, 0x21,
	0x05, 0x8a, 0x4a, 0x78, 0xa8, 0x47, 0x73, 0x28, 0x19, 0x2a, 0x37, 0xbb, 0x01, 0xf8, 0x30, 0xb8,
	0x4d, 0xab, 0xc2, 0xe4, 0x3d, 0x6e, 0x8d, 0x6f, 0x1b, 0x46, 0x5b, 0xb9, 0x92, 0x8c, 0x77, 0x58,
	0xb2, 0x43, 0x69, 0x8a, 0x37, 0x8c, 0x91, 0x08, 0x9e, 0xe5, 0xac, 0x2d, 0xf6, 0x4d, 0xba, 0x3c,
	0x8a, 0x6e, 0x91, 0x29, 0x9d, 0xc2, 0xce, 0xd3, 0x9a, 0x54, 0x75, 0xc2, 0xb7, 0x90, 0x2a, 0xcf,
	0x1a, 0x52, 0xe5, 0xee, 0xca, 0x54, 0xb1, 0x80, 0x58, 0xc5, 0x1a, 0xc7, 0x92, 0x21, 0x7a, 0x6d,
	0x58, 0xc5, 0x1a, 0x83, 0x18, 0xed, 0x03, 0x7b, 0xb8, 0x1a, 0xfa, 0xf2, 0x1d, 0xf4, 0xb5, 0x8b,
	0xee, 0x41, 0xdf, 0x2a, 0x49, 0x77, 0x64, 0x91, 0x2c, 0x8f, 0x83, 0xce, 0xda, 0xc8, 0xa0, 0x1b,
	0x90, 0x26, 0x4b, 0x8b, 0x69, 0x92, 0x26, 0xb4, 0xeb, 0x5a, 0x43, 0xf6, 0xbd, 0x7a, 0xae, 0xf0,
	0xc7, 0xf7, 0x73, 0xb3, 0x9f, 0x08, 0x44, 0xc8, 0x2e, 0xd0, 0xce, 0xfb, 0xd0, 0xa0, 0xbf, 0x8a,
	0x1d, 0xfe, 0xaf, 0xd2, 0xc3, 0x7b, 0x10, 0x23, 0x01, 0x0c, 0x72, 0x16, 0xca, 0xf2, 0x4e, 0x1a,
	0xd9, 0x87, 0x06, 0xfd, 0x85, 0xc9, 0xd1, 0xe0, 0x20, 0x2d, 0x25, 0x2b, 0xc7, 0x35, 0xfb, 0x91,
	0x0d, 0xb4, 0x55, 0x6d, 0xf9, 0x2d, 0x84, 0xf2, 0x93, 0x86, 0x50, 0xee, 0xa9, 0x0c, 0x65, 0x33,
	0x7c, 0xf5, 0x55, 0xfc, 0x3d, 0x18, 0x3d, 0x0a, 0x76, 0x71, 0x56, 0x4a, 0x1a, 0x0d, 0x57, 0x5a,
	0x6b, 0x15, 0xbd, 0x07, 0x09, 0x4d, 0x5a, 0x81, 0xf9, 0xa6, 0x65, 0x9e, 0xbf, 0xb9, 0x16, 0xac,
	0x56, 0xf3, 0x60, 0x1f, 0x55, 0x18, 0xce, 0x32, 0xa0, 0x45, 0xff, 0x45, 0x0c, 0xec, 0x34, 0xb6,
	0x50, 0x95, 0xdf, 0xd1, 0x38, 0xdb, 0x4c, 0xee, 0x83, 0x55, 0x64, 0x6c, 0x02, 0xa3, 0xc7, 0xa0,
	0x57, 0xff, 0xb5, 0x86, 0x9b, 0x46, 0xab, 0x92, 0xc9, 0xe6, 0xe6, 0xaf, 0xe4, 0x66, 0xe7, 0xf4,
	0x41, 0x9b, 0x3f, 0xf5, 0x76, 0x71, 0x64, 0x4c, 0x1f, 0xb6, 0xce, 0x16, 0xfd, 0xda, 0x93, 0x7f,
	0xcd, 0xbd, 0x69, 0xeb, 0x60, 0xdb, 0x3c, 0xba, 0xd3, 0x3c, 0xc7, 0xfa, 0x3d, 0x69, 0x7a, 0x89,
	0xe2, 0x65, 0x38, 0x98, 0x61, 0x40, 0x8b, 0xfe, 0x8b, 0x95, 0x0a, 0xe8, 0x55, 0xdf, 0xb9, 0x38,
	0x9d, 0x86, 0x71, 0xc3, 0xad, 0x2e, 0xeb, 0xc7, 0xa8, 0x03, 0xb6, 0x28, 0xa7, 0x2e, 0x2d, 0x9d,
	0xbf, 0x4c, 0x11, 0x38, 0x0d, 0x4f, 0x04, 0x4f, 0x27, 0xd7, 0x61, 0x81, 0xc7, 0xf3, 0x52, 0x34,
	0xfc, 0x32, 0xfc, 0x82, 0x21, 0x11, 0xae, 0x2b, 0x39, 0xe5, 0x4b, 0x31, 0xe8, 0xaa, 0x71, 0x11,
	0x6b, 0x06, 0xcf, 0x70, 0xb3, 0xca, 0x8e, 0x30, 0x18, 0xed, 0x82, 0x5d, 0xa5, 0x7b, 0x97, 0xac,
	0xde, 0x54, 0xfa, 0x3b, 0x35, 0xe7, 0xca, 0x53, 0x88, 0x26, 0xfd, 0xd0, 0x63, 0x65, 0xd9, 0x88,
	0x85, 0x02, 0x98, 0x01, 0xcd, 0xe5, 0x7b, 0x30, 0xd8, 0x5e, 0x99, 0x36, 0x75, 0xc5, 0xc8, 0x7e,
	0x8c, 0x7a, 0x20, 0xd4, 0x20, 0xea, 0x6e, 0xcf, 0x9c, 0x26, 0x32, 0x6a, 0x71, 0x58, 0xdb, 0xe2,
	0xef, 0x30, 0x60, 0xb5, 0xee, 0x6e, 0x0d, 0x6e, 0x31, 0x9c, 0x5c, 0x79, 0xeb, 0xe6, 0x74, 0x98,
	0x00, 0x23, 0x79, 0xc5, 0x1e, 0xc2, 0xe8, 0x1e, 0xe8, 0xa8, 0x46, 0x41, 0xdf, 0xf8, 0x9d, 0x96,
	0x23, 0x04, 0xe5, 0x66, 0x68, 0x15, 0xa7, 0x70, 0x81, 0xde, 0x6e, 0xea, 0xde, 0x5f, 0x20, 0x5b,
	0xf3, 0xe2, 0x84, 0xd4, 0x58, 0xe7, 0xd6, 0x3a, 0x2e, 0x57, 0xd8, 0x23, 0x18, 0x6d, 0x87, 0x9b,
	0xcc, 0xfb, 0x0c, 0xa7, 0x85, 0x9c, 0xe0, 0xbd, 0x0b, 0x76, 0x57, 0xe2, 0xd5, 0x1a, 0x74, 0x55,
	0xea, 0x79, 0xa9, 0xdc, 0xad, 0xbf, 0x0c, 0x3f, 0x66, 0xc0, 0x5a, 0xe3, 0xfb, 0x57, 0x05, 0x7e,
	0xd3, 0xd7, 0xe3, 0x0a, 0xfc, 0xe6, 0x2f, 0x70, 0xec, 0x01, 0x8c, 0x38, 0xb8, 0xa1, 0x30, 0x7f,
	0xbe, 0xf2, 0x5d, 0xda, 0x69, 0x26, 0x24, 0xc8, 0x5d, 0x6c, 0x7b, 0x0d, 0xe4, 0x6a, 0x55, 0xf8,
	0x3b, 0x03, 0x36, 0x98, 0xf4, 0xc8, 0xb0, 0x7b, 0xe5, 0xee, 0x9e, 0x42, 0xef, 0xa9, 0xf7, 0x35,
	0x80, 0x3d, 0x8e, 0x11, 0x0f, 0xdb, 0x2c, 0x5a, 0x78, 0xa7, 0xd5, 0x00, 0xd1, 0xe3, 0x41, 0xb8,
	0xb3, 0x4e, 0x0f, 0xa8, 0xf9, 0x58, 0xa5, 0xcc, 0x97, 0x0c, 0x80, 0xd5, 0xbd, 0x0d, 0xdc, 0xb6,
	0x62, 0x5b, 0x46, 0x55, 0xec, 0xae, 0xb3, 0x7d, 0x63, 0x9f, 0xc7, 0x68, 0x00, 0x6e, 0x36, 0x28,
	0x52, 0x2a, 0x2c, 0xc4, 0x4f, 0xd6, 0x43, 0x44, 0xcb, 0xfb, 0xe1, 0x40, 0x4d, 0x2d, 0x49, 0x5f,
	0xf0, 0x72, 0x45, 0xc5, 0x21, 0x9a, 0xfc, 0x85, 0x01, 0xad, 0x15, 0xf4, 0x07, 0xb7, 0xd6, 0x66,
	0x6a, 0xaa, 0xda, 0x9d, 0xf5, 0xd0, 0x39, 0xfb, 0x1c, 0x46, 0x6e, 0xb8, 0xd1, 0x8c, 0x8e, 0x9d,
	0xa6, 0x52, 0xa2, 0xcd, 0xbd, 0x70, 0x47, 0x9d, 0xda, 0xe8, 0xcf, 0xf4, 0x3d, 0xa5, 0x56, 0xee,
	0x2d, 0x60, 0xa3, 0x3f, 0x18, 0x10, 0x5c, 0x1a, 0xed, 0xba, 0xd0, 0x60, 0xd0, 0x15, 0x48, 0x84,
	0xf8, 0xc6, 0xed, 0x7d, 0xfd, 0x7d, 0xdb, 0x39, 0x86, 0xe1, 0xd7, 0x89, 0xc9, 0x64, 0x2c, 0x1a,
	0x22, 0xbf, 0x76, 0xf1, 0x3c, 0x97, 0x4e, 0xc4, 0xbd, 0x55, 0x92, 0xc3, 0x6b, 0xfb, 0x3c, 0x3b,
	0x75, 0x08, 0x8e, 0x34, 0x91, 0xdf, 0xbe, 0xec, 0xf8, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
	0xa0, 0xe2, 0xae, 0x82, 0x23, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CidrManagerClient is the client API for CidrManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CidrManagerClient interface {
	//* cidr management tenc part
	CreateSubnet(ctx context.Context, in *CreateSubnetInput, opts ...grpc.CallOption) (*SubnetResp, error)
	DeleteSubnet(ctx context.Context, in *DeleteSubnetInput, opts ...grpc.CallOption) (*EmptyDataResp, error)
	GetAllocatableMaskRange(ctx context.Context, in *MaskRangeQueryInput, opts ...grpc.CallOption) (*MaskRangeResp, error)
	GetSubnet(ctx context.Context, in *GetSubnetInput, opts ...grpc.CallOption) (*SubnetResp, error)
	ListSubnets(ctx context.Context, in *ListSubnetsInput, opts ...grpc.CallOption) (*SubnetsResp, error)
	//* cidr management bcs part
	GetClusterCidr(ctx context.Context, in *GetClusterCidrRequest, opts ...grpc.CallOption) (*GetClusterCidrResponse, error)
	AddClusterCidr(ctx context.Context, in *AddClusterCidrRequest, opts ...grpc.CallOption) (*AddClusterCidrResponse, error)
	GetClusterIPSurplus(ctx context.Context, in *GetClusterIPSurplusRequest, opts ...grpc.CallOption) (*GetClusterIPSurplusResponse, error)
	GetAllocatableCidr(ctx context.Context, in *GetAllocatableCidrRequest, opts ...grpc.CallOption) (*GetAllocatableCidrResponse, error)
	GetVPCIPSurplus(ctx context.Context, in *GetVPCIPSurplusRequest, opts ...grpc.CallOption) (*GetVPCIPSurplusResponse, error)
}

type cidrManagerClient struct {
	cc *grpc.ClientConn
}

func NewCidrManagerClient(cc *grpc.ClientConn) CidrManagerClient {
	return &cidrManagerClient{cc}
}

func (c *cidrManagerClient) CreateSubnet(ctx context.Context, in *CreateSubnetInput, opts ...grpc.CallOption) (*SubnetResp, error) {
	out := new(SubnetResp)
	err := c.cc.Invoke(ctx, "/cidrmanager.CidrManager/CreateSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cidrManagerClient) DeleteSubnet(ctx context.Context, in *DeleteSubnetInput, opts ...grpc.CallOption) (*EmptyDataResp, error) {
	out := new(EmptyDataResp)
	err := c.cc.Invoke(ctx, "/cidrmanager.CidrManager/DeleteSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cidrManagerClient) GetAllocatableMaskRange(ctx context.Context, in *MaskRangeQueryInput, opts ...grpc.CallOption) (*MaskRangeResp, error) {
	out := new(MaskRangeResp)
	err := c.cc.Invoke(ctx, "/cidrmanager.CidrManager/GetAllocatableMaskRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cidrManagerClient) GetSubnet(ctx context.Context, in *GetSubnetInput, opts ...grpc.CallOption) (*SubnetResp, error) {
	out := new(SubnetResp)
	err := c.cc.Invoke(ctx, "/cidrmanager.CidrManager/GetSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cidrManagerClient) ListSubnets(ctx context.Context, in *ListSubnetsInput, opts ...grpc.CallOption) (*SubnetsResp, error) {
	out := new(SubnetsResp)
	err := c.cc.Invoke(ctx, "/cidrmanager.CidrManager/ListSubnets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cidrManagerClient) GetClusterCidr(ctx context.Context, in *GetClusterCidrRequest, opts ...grpc.CallOption) (*GetClusterCidrResponse, error) {
	out := new(GetClusterCidrResponse)
	err := c.cc.Invoke(ctx, "/cidrmanager.CidrManager/GetClusterCidr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cidrManagerClient) AddClusterCidr(ctx context.Context, in *AddClusterCidrRequest, opts ...grpc.CallOption) (*AddClusterCidrResponse, error) {
	out := new(AddClusterCidrResponse)
	err := c.cc.Invoke(ctx, "/cidrmanager.CidrManager/AddClusterCidr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cidrManagerClient) GetClusterIPSurplus(ctx context.Context, in *GetClusterIPSurplusRequest, opts ...grpc.CallOption) (*GetClusterIPSurplusResponse, error) {
	out := new(GetClusterIPSurplusResponse)
	err := c.cc.Invoke(ctx, "/cidrmanager.CidrManager/GetClusterIPSurplus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cidrManagerClient) GetAllocatableCidr(ctx context.Context, in *GetAllocatableCidrRequest, opts ...grpc.CallOption) (*GetAllocatableCidrResponse, error) {
	out := new(GetAllocatableCidrResponse)
	err := c.cc.Invoke(ctx, "/cidrmanager.CidrManager/GetAllocatableCidr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cidrManagerClient) GetVPCIPSurplus(ctx context.Context, in *GetVPCIPSurplusRequest, opts ...grpc.CallOption) (*GetVPCIPSurplusResponse, error) {
	out := new(GetVPCIPSurplusResponse)
	err := c.cc.Invoke(ctx, "/cidrmanager.CidrManager/GetVPCIPSurplus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CidrManagerServer is the server API for CidrManager service.
type CidrManagerServer interface {
	//* cidr management tenc part
	CreateSubnet(context.Context, *CreateSubnetInput) (*SubnetResp, error)
	DeleteSubnet(context.Context, *DeleteSubnetInput) (*EmptyDataResp, error)
	GetAllocatableMaskRange(context.Context, *MaskRangeQueryInput) (*MaskRangeResp, error)
	GetSubnet(context.Context, *GetSubnetInput) (*SubnetResp, error)
	ListSubnets(context.Context, *ListSubnetsInput) (*SubnetsResp, error)
	//* cidr management bcs part
	GetClusterCidr(context.Context, *GetClusterCidrRequest) (*GetClusterCidrResponse, error)
	AddClusterCidr(context.Context, *AddClusterCidrRequest) (*AddClusterCidrResponse, error)
	GetClusterIPSurplus(context.Context, *GetClusterIPSurplusRequest) (*GetClusterIPSurplusResponse, error)
	GetAllocatableCidr(context.Context, *GetAllocatableCidrRequest) (*GetAllocatableCidrResponse, error)
	GetVPCIPSurplus(context.Context, *GetVPCIPSurplusRequest) (*GetVPCIPSurplusResponse, error)
}

// UnimplementedCidrManagerServer can be embedded to have forward compatible implementations.
type UnimplementedCidrManagerServer struct {
}

func (*UnimplementedCidrManagerServer) CreateSubnet(ctx context.Context, req *CreateSubnetInput) (*SubnetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubnet not implemented")
}
func (*UnimplementedCidrManagerServer) DeleteSubnet(ctx context.Context, req *DeleteSubnetInput) (*EmptyDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubnet not implemented")
}
func (*UnimplementedCidrManagerServer) GetAllocatableMaskRange(ctx context.Context, req *MaskRangeQueryInput) (*MaskRangeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllocatableMaskRange not implemented")
}
func (*UnimplementedCidrManagerServer) GetSubnet(ctx context.Context, req *GetSubnetInput) (*SubnetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet not implemented")
}
func (*UnimplementedCidrManagerServer) ListSubnets(ctx context.Context, req *ListSubnetsInput) (*SubnetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubnets not implemented")
}
func (*UnimplementedCidrManagerServer) GetClusterCidr(ctx context.Context, req *GetClusterCidrRequest) (*GetClusterCidrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterCidr not implemented")
}
func (*UnimplementedCidrManagerServer) AddClusterCidr(ctx context.Context, req *AddClusterCidrRequest) (*AddClusterCidrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClusterCidr not implemented")
}
func (*UnimplementedCidrManagerServer) GetClusterIPSurplus(ctx context.Context, req *GetClusterIPSurplusRequest) (*GetClusterIPSurplusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterIPSurplus not implemented")
}
func (*UnimplementedCidrManagerServer) GetAllocatableCidr(ctx context.Context, req *GetAllocatableCidrRequest) (*GetAllocatableCidrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllocatableCidr not implemented")
}
func (*UnimplementedCidrManagerServer) GetVPCIPSurplus(ctx context.Context, req *GetVPCIPSurplusRequest) (*GetVPCIPSurplusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVPCIPSurplus not implemented")
}

func RegisterCidrManagerServer(s *grpc.Server, srv CidrManagerServer) {
	s.RegisterService(&_CidrManager_serviceDesc, srv)
}

func _CidrManager_CreateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubnetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CidrManagerServer).CreateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cidrmanager.CidrManager/CreateSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CidrManagerServer).CreateSubnet(ctx, req.(*CreateSubnetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CidrManager_DeleteSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubnetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CidrManagerServer).DeleteSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cidrmanager.CidrManager/DeleteSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CidrManagerServer).DeleteSubnet(ctx, req.(*DeleteSubnetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CidrManager_GetAllocatableMaskRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaskRangeQueryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CidrManagerServer).GetAllocatableMaskRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cidrmanager.CidrManager/GetAllocatableMaskRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CidrManagerServer).GetAllocatableMaskRange(ctx, req.(*MaskRangeQueryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CidrManager_GetSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CidrManagerServer).GetSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cidrmanager.CidrManager/GetSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CidrManagerServer).GetSubnet(ctx, req.(*GetSubnetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CidrManager_ListSubnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubnetsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CidrManagerServer).ListSubnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cidrmanager.CidrManager/ListSubnets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CidrManagerServer).ListSubnets(ctx, req.(*ListSubnetsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CidrManager_GetClusterCidr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterCidrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CidrManagerServer).GetClusterCidr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cidrmanager.CidrManager/GetClusterCidr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CidrManagerServer).GetClusterCidr(ctx, req.(*GetClusterCidrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CidrManager_AddClusterCidr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClusterCidrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CidrManagerServer).AddClusterCidr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cidrmanager.CidrManager/AddClusterCidr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CidrManagerServer).AddClusterCidr(ctx, req.(*AddClusterCidrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CidrManager_GetClusterIPSurplus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterIPSurplusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CidrManagerServer).GetClusterIPSurplus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cidrmanager.CidrManager/GetClusterIPSurplus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CidrManagerServer).GetClusterIPSurplus(ctx, req.(*GetClusterIPSurplusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CidrManager_GetAllocatableCidr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllocatableCidrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CidrManagerServer).GetAllocatableCidr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cidrmanager.CidrManager/GetAllocatableCidr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CidrManagerServer).GetAllocatableCidr(ctx, req.(*GetAllocatableCidrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CidrManager_GetVPCIPSurplus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVPCIPSurplusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CidrManagerServer).GetVPCIPSurplus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cidrmanager.CidrManager/GetVPCIPSurplus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CidrManagerServer).GetVPCIPSurplus(ctx, req.(*GetVPCIPSurplusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CidrManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cidrmanager.CidrManager",
	HandlerType: (*CidrManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubnet",
			Handler:    _CidrManager_CreateSubnet_Handler,
		},
		{
			MethodName: "DeleteSubnet",
			Handler:    _CidrManager_DeleteSubnet_Handler,
		},
		{
			MethodName: "GetAllocatableMaskRange",
			Handler:    _CidrManager_GetAllocatableMaskRange_Handler,
		},
		{
			MethodName: "GetSubnet",
			Handler:    _CidrManager_GetSubnet_Handler,
		},
		{
			MethodName: "ListSubnets",
			Handler:    _CidrManager_ListSubnets_Handler,
		},
		{
			MethodName: "GetClusterCidr",
			Handler:    _CidrManager_GetClusterCidr_Handler,
		},
		{
			MethodName: "AddClusterCidr",
			Handler:    _CidrManager_AddClusterCidr_Handler,
		},
		{
			MethodName: "GetClusterIPSurplus",
			Handler:    _CidrManager_GetClusterIPSurplus_Handler,
		},
		{
			MethodName: "GetAllocatableCidr",
			Handler:    _CidrManager_GetAllocatableCidr_Handler,
		},
		{
			MethodName: "GetVPCIPSurplus",
			Handler:    _CidrManager_GetVPCIPSurplus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cidrmanager.proto",
}