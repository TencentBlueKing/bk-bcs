// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	storage "github.com/Tencent/bk-bcs/bcs-services/bcs-nodegroup-manager/pkg/storage"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// CreateNodeGroup provides a mock function with given fields: nodegroup, opt
func (_m *Storage) CreateNodeGroup(nodegroup *storage.NodeGroup, opt *storage.CreateOptions) error {
	ret := _m.Called(nodegroup, opt)

	var r0 error
	if rf, ok := ret.Get(0).(func(*storage.NodeGroup, *storage.CreateOptions) error); ok {
		r0 = rf(nodegroup, opt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNodeGroupAction provides a mock function with given fields: action, opt
func (_m *Storage) CreateNodeGroupAction(action *storage.NodeGroupAction, opt *storage.CreateOptions) error {
	ret := _m.Called(action, opt)

	var r0 error
	if rf, ok := ret.Get(0).(func(*storage.NodeGroupAction, *storage.CreateOptions) error); ok {
		r0 = rf(action, opt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNodeGroupEvent provides a mock function with given fields: event, opt
func (_m *Storage) CreateNodeGroupEvent(event *storage.NodeGroupEvent, opt *storage.CreateOptions) error {
	ret := _m.Called(event, opt)

	var r0 error
	if rf, ok := ret.Get(0).(func(*storage.NodeGroupEvent, *storage.CreateOptions) error); ok {
		r0 = rf(event, opt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNodeGroupStrategy provides a mock function with given fields: strategy, opt
func (_m *Storage) CreateNodeGroupStrategy(strategy *storage.NodeGroupMgrStrategy, opt *storage.CreateOptions) error {
	ret := _m.Called(strategy, opt)

	var r0 error
	if rf, ok := ret.Get(0).(func(*storage.NodeGroupMgrStrategy, *storage.CreateOptions) error); ok {
		r0 = rf(strategy, opt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTask provides a mock function with given fields: task, opt
func (_m *Storage) CreateTask(task *storage.ScaleDownTask, opt *storage.CreateOptions) error {
	ret := _m.Called(task, opt)

	var r0 error
	if rf, ok := ret.Get(0).(func(*storage.ScaleDownTask, *storage.CreateOptions) error); ok {
		r0 = rf(task, opt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNodeGroup provides a mock function with given fields: nodegroupID, opt
func (_m *Storage) DeleteNodeGroup(nodegroupID string, opt *storage.DeleteOptions) (*storage.NodeGroup, error) {
	ret := _m.Called(nodegroupID, opt)

	var r0 *storage.NodeGroup
	if rf, ok := ret.Get(0).(func(string, *storage.DeleteOptions) *storage.NodeGroup); ok {
		r0 = rf(nodegroupID, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.NodeGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *storage.DeleteOptions) error); ok {
		r1 = rf(nodegroupID, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNodeGroupAction provides a mock function with given fields: action, opt
func (_m *Storage) DeleteNodeGroupAction(action *storage.NodeGroupAction, opt *storage.DeleteOptions) (*storage.NodeGroupAction, error) {
	ret := _m.Called(action, opt)

	var r0 *storage.NodeGroupAction
	if rf, ok := ret.Get(0).(func(*storage.NodeGroupAction, *storage.DeleteOptions) *storage.NodeGroupAction); ok {
		r0 = rf(action, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.NodeGroupAction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*storage.NodeGroupAction, *storage.DeleteOptions) error); ok {
		r1 = rf(action, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNodeGroupStrategy provides a mock function with given fields: name, opt
func (_m *Storage) DeleteNodeGroupStrategy(name string, opt *storage.DeleteOptions) (*storage.NodeGroupMgrStrategy, error) {
	ret := _m.Called(name, opt)

	var r0 *storage.NodeGroupMgrStrategy
	if rf, ok := ret.Get(0).(func(string, *storage.DeleteOptions) *storage.NodeGroupMgrStrategy); ok {
		r0 = rf(name, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.NodeGroupMgrStrategy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *storage.DeleteOptions) error); ok {
		r1 = rf(name, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: taskID, opt
func (_m *Storage) DeleteTask(taskID string, opt *storage.DeleteOptions) (*storage.ScaleDownTask, error) {
	ret := _m.Called(taskID, opt)

	var r0 *storage.ScaleDownTask
	if rf, ok := ret.Get(0).(func(string, *storage.DeleteOptions) *storage.ScaleDownTask); ok {
		r0 = rf(taskID, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.ScaleDownTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *storage.DeleteOptions) error); ok {
		r1 = rf(taskID, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeGroup provides a mock function with given fields: nodegroupID, opt
func (_m *Storage) GetNodeGroup(nodegroupID string, opt *storage.GetOptions) (*storage.NodeGroup, error) {
	ret := _m.Called(nodegroupID, opt)

	var r0 *storage.NodeGroup
	if rf, ok := ret.Get(0).(func(string, *storage.GetOptions) *storage.NodeGroup); ok {
		r0 = rf(nodegroupID, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.NodeGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *storage.GetOptions) error); ok {
		r1 = rf(nodegroupID, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeGroupAction provides a mock function with given fields: nodeGroupID, event, opt
func (_m *Storage) GetNodeGroupAction(nodeGroupID string, event string, opt *storage.GetOptions) (*storage.NodeGroupAction, error) {
	ret := _m.Called(nodeGroupID, event, opt)

	var r0 *storage.NodeGroupAction
	if rf, ok := ret.Get(0).(func(string, string, *storage.GetOptions) *storage.NodeGroupAction); ok {
		r0 = rf(nodeGroupID, event, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.NodeGroupAction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *storage.GetOptions) error); ok {
		r1 = rf(nodeGroupID, event, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeGroupStrategy provides a mock function with given fields: name, opt
func (_m *Storage) GetNodeGroupStrategy(name string, opt *storage.GetOptions) (*storage.NodeGroupMgrStrategy, error) {
	ret := _m.Called(name, opt)

	var r0 *storage.NodeGroupMgrStrategy
	if rf, ok := ret.Get(0).(func(string, *storage.GetOptions) *storage.NodeGroupMgrStrategy); ok {
		r0 = rf(name, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.NodeGroupMgrStrategy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *storage.GetOptions) error); ok {
		r1 = rf(name, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTask provides a mock function with given fields: taskID, opt
func (_m *Storage) GetTask(taskID string, opt *storage.GetOptions) (*storage.ScaleDownTask, error) {
	ret := _m.Called(taskID, opt)

	var r0 *storage.ScaleDownTask
	if rf, ok := ret.Get(0).(func(string, *storage.GetOptions) *storage.ScaleDownTask); ok {
		r0 = rf(taskID, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.ScaleDownTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *storage.GetOptions) error); ok {
		r1 = rf(taskID, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodeGroupAction provides a mock function with given fields: nodeGroupID, opt
func (_m *Storage) ListNodeGroupAction(nodeGroupID string, opt *storage.ListOptions) ([]*storage.NodeGroupAction, error) {
	ret := _m.Called(nodeGroupID, opt)

	var r0 []*storage.NodeGroupAction
	if rf, ok := ret.Get(0).(func(string, *storage.ListOptions) []*storage.NodeGroupAction); ok {
		r0 = rf(nodeGroupID, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storage.NodeGroupAction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *storage.ListOptions) error); ok {
		r1 = rf(nodeGroupID, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodeGroupActionByTaskID provides a mock function with given fields: taskID, opt
func (_m *Storage) ListNodeGroupActionByTaskID(taskID string, opt *storage.ListOptions) ([]*storage.NodeGroupAction, error) {
	ret := _m.Called(taskID, opt)

	var r0 []*storage.NodeGroupAction
	if rf, ok := ret.Get(0).(func(string, *storage.ListOptions) []*storage.NodeGroupAction); ok {
		r0 = rf(taskID, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storage.NodeGroupAction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *storage.ListOptions) error); ok {
		r1 = rf(taskID, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodeGroupEvent provides a mock function with given fields: nodeGroupID, opt
func (_m *Storage) ListNodeGroupEvent(nodeGroupID string, opt *storage.ListOptions) ([]*storage.NodeGroupEvent, error) {
	ret := _m.Called(nodeGroupID, opt)

	var r0 []*storage.NodeGroupEvent
	if rf, ok := ret.Get(0).(func(string, *storage.ListOptions) []*storage.NodeGroupEvent); ok {
		r0 = rf(nodeGroupID, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storage.NodeGroupEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *storage.ListOptions) error); ok {
		r1 = rf(nodeGroupID, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodeGroupStrategies provides a mock function with given fields: opt
func (_m *Storage) ListNodeGroupStrategies(opt *storage.ListOptions) ([]*storage.NodeGroupMgrStrategy, error) {
	ret := _m.Called(opt)

	var r0 []*storage.NodeGroupMgrStrategy
	if rf, ok := ret.Get(0).(func(*storage.ListOptions) []*storage.NodeGroupMgrStrategy); ok {
		r0 = rf(opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storage.NodeGroupMgrStrategy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*storage.ListOptions) error); ok {
		r1 = rf(opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodeGroupStrategiesByType provides a mock function with given fields: strategyType, opt
func (_m *Storage) ListNodeGroupStrategiesByType(strategyType string, opt *storage.ListOptions) ([]*storage.NodeGroupMgrStrategy, error) {
	ret := _m.Called(strategyType, opt)

	var r0 []*storage.NodeGroupMgrStrategy
	if rf, ok := ret.Get(0).(func(string, *storage.ListOptions) []*storage.NodeGroupMgrStrategy); ok {
		r0 = rf(strategyType, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storage.NodeGroupMgrStrategy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *storage.ListOptions) error); ok {
		r1 = rf(strategyType, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodeGroups provides a mock function with given fields: opt
func (_m *Storage) ListNodeGroups(opt *storage.ListOptions) ([]*storage.NodeGroup, error) {
	ret := _m.Called(opt)

	var r0 []*storage.NodeGroup
	if rf, ok := ret.Get(0).(func(*storage.ListOptions) []*storage.NodeGroup); ok {
		r0 = rf(opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storage.NodeGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*storage.ListOptions) error); ok {
		r1 = rf(opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTasks provides a mock function with given fields: opt
func (_m *Storage) ListTasks(opt *storage.ListOptions) ([]*storage.ScaleDownTask, error) {
	ret := _m.Called(opt)

	var r0 []*storage.ScaleDownTask
	if rf, ok := ret.Get(0).(func(*storage.ListOptions) []*storage.ScaleDownTask); ok {
		r0 = rf(opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storage.ScaleDownTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*storage.ListOptions) error); ok {
		r1 = rf(opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTasksByStrategy provides a mock function with given fields: strategyName, opt
func (_m *Storage) ListTasksByStrategy(strategyName string, opt *storage.ListOptions) ([]*storage.ScaleDownTask, error) {
	ret := _m.Called(strategyName, opt)

	var r0 []*storage.ScaleDownTask
	if rf, ok := ret.Get(0).(func(string, *storage.ListOptions) []*storage.ScaleDownTask); ok {
		r0 = rf(strategyName, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storage.ScaleDownTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *storage.ListOptions) error); ok {
		r1 = rf(strategyName, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNodeGroup provides a mock function with given fields: nodegroup, opt
func (_m *Storage) UpdateNodeGroup(nodegroup *storage.NodeGroup, opt *storage.UpdateOptions) (*storage.NodeGroup, error) {
	ret := _m.Called(nodegroup, opt)

	var r0 *storage.NodeGroup
	if rf, ok := ret.Get(0).(func(*storage.NodeGroup, *storage.UpdateOptions) *storage.NodeGroup); ok {
		r0 = rf(nodegroup, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.NodeGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*storage.NodeGroup, *storage.UpdateOptions) error); ok {
		r1 = rf(nodegroup, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNodeGroupAction provides a mock function with given fields: action, opt
func (_m *Storage) UpdateNodeGroupAction(action *storage.NodeGroupAction, opt *storage.UpdateOptions) (*storage.NodeGroupAction, error) {
	ret := _m.Called(action, opt)

	var r0 *storage.NodeGroupAction
	if rf, ok := ret.Get(0).(func(*storage.NodeGroupAction, *storage.UpdateOptions) *storage.NodeGroupAction); ok {
		r0 = rf(action, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.NodeGroupAction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*storage.NodeGroupAction, *storage.UpdateOptions) error); ok {
		r1 = rf(action, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNodeGroupStrategy provides a mock function with given fields: strategy, opt
func (_m *Storage) UpdateNodeGroupStrategy(strategy *storage.NodeGroupMgrStrategy, opt *storage.UpdateOptions) (*storage.NodeGroupMgrStrategy, error) {
	ret := _m.Called(strategy, opt)

	var r0 *storage.NodeGroupMgrStrategy
	if rf, ok := ret.Get(0).(func(*storage.NodeGroupMgrStrategy, *storage.UpdateOptions) *storage.NodeGroupMgrStrategy); ok {
		r0 = rf(strategy, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.NodeGroupMgrStrategy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*storage.NodeGroupMgrStrategy, *storage.UpdateOptions) error); ok {
		r1 = rf(strategy, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: task, opt
func (_m *Storage) UpdateTask(task *storage.ScaleDownTask, opt *storage.UpdateOptions) (*storage.ScaleDownTask, error) {
	ret := _m.Called(task, opt)

	var r0 *storage.ScaleDownTask
	if rf, ok := ret.Get(0).(func(*storage.ScaleDownTask, *storage.UpdateOptions) *storage.ScaleDownTask); ok {
		r0 = rf(task, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.ScaleDownTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*storage.ScaleDownTask, *storage.UpdateOptions) error); ok {
		r1 = rf(task, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
