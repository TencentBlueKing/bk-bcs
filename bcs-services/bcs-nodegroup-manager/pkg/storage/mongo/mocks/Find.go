// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	drivers "github.com/Tencent/bk-bcs/bcs-common/pkg/odm/drivers"
	mock "github.com/stretchr/testify/mock"
)

// Find is an autogenerated mock type for the Find type
type Find struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx, result
func (_m *Find) All(ctx context.Context, result interface{}) error {
	ret := _m.Called(ctx, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Count provides a mock function with given fields: ctx
func (_m *Find) Count(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// One provides a mock function with given fields: ctx, result
func (_m *Find) One(ctx context.Context, result interface{}) error {
	ret := _m.Called(ctx, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithLimit provides a mock function with given fields: limit
func (_m *Find) WithLimit(limit int64) drivers.Find {
	ret := _m.Called(limit)

	var r0 drivers.Find
	if rf, ok := ret.Get(0).(func(int64) drivers.Find); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(drivers.Find)
		}
	}

	return r0
}

// WithProjection provides a mock function with given fields: projection
func (_m *Find) WithProjection(projection map[string]int) drivers.Find {
	ret := _m.Called(projection)

	var r0 drivers.Find
	if rf, ok := ret.Get(0).(func(map[string]int) drivers.Find); ok {
		r0 = rf(projection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(drivers.Find)
		}
	}

	return r0
}

// WithSort provides a mock function with given fields: sort
func (_m *Find) WithSort(sort map[string]interface{}) drivers.Find {
	ret := _m.Called(sort)

	var r0 drivers.Find
	if rf, ok := ret.Get(0).(func(map[string]interface{}) drivers.Find); ok {
		r0 = rf(sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(drivers.Find)
		}
	}

	return r0
}

// WithStart provides a mock function with given fields: start
func (_m *Find) WithStart(start int64) drivers.Find {
	ret := _m.Called(start)

	var r0 drivers.Find
	if rf, ok := ret.Get(0).(func(int64) drivers.Find); ok {
		r0 = rf(start)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(drivers.Find)
		}
	}

	return r0
}

type mockConstructorTestingTNewFind interface {
	mock.TestingT
	Cleanup(func())
}

// NewFind creates a new instance of Find. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFind(t mockConstructorTestingTNewFind) *Find {
	mock := &Find{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
