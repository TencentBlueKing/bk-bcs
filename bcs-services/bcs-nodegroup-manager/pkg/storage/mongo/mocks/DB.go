// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	drivers "github.com/Tencent/bk-bcs/bcs-common/pkg/odm/drivers"
	mock "github.com/stretchr/testify/mock"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *DB) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTable provides a mock function with given fields: ctx, tableName
func (_m *DB) CreateTable(ctx context.Context, tableName string) error {
	ret := _m.Called(ctx, tableName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, tableName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataBase provides a mock function with given fields:
func (_m *DB) DataBase() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DropTable provides a mock function with given fields: ctx, tableName
func (_m *DB) DropTable(ctx context.Context, tableName string) error {
	ret := _m.Called(ctx, tableName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, tableName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HasTable provides a mock function with given fields: ctx, tableName
func (_m *DB) HasTable(ctx context.Context, tableName string) (bool, error) {
	ret := _m.Called(ctx, tableName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, tableName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tableName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTableNames provides a mock function with given fields: ctx
func (_m *DB) ListTableNames(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields:
func (_m *DB) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Table provides a mock function with given fields: tName
func (_m *DB) Table(tName string) drivers.Table {
	ret := _m.Called(tName)

	var r0 drivers.Table
	if rf, ok := ret.Get(0).(func(string) drivers.Table); ok {
		r0 = rf(tName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(drivers.Table)
		}
	}

	return r0
}

type mockConstructorTestingTNewDB interface {
	mock.TestingT
	Cleanup(func())
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDB(t mockConstructorTestingTNewDB) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
