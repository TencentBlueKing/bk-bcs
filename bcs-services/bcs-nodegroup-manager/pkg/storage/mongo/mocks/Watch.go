// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	drivers "github.com/Tencent/bk-bcs/bcs-common/pkg/odm/drivers"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Watch is an autogenerated mock type for the Watch type
type Watch struct {
	mock.Mock
}

// DoWatch provides a mock function with given fields: ctx
func (_m *Watch) DoWatch(ctx context.Context) (chan *drivers.WatchEvent, error) {
	ret := _m.Called(ctx)

	var r0 chan *drivers.WatchEvent
	if rf, ok := ret.Get(0).(func(context.Context) chan *drivers.WatchEvent); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *drivers.WatchEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithBatchSize provides a mock function with given fields: batch
func (_m *Watch) WithBatchSize(batch int32) drivers.Watch {
	ret := _m.Called(batch)

	var r0 drivers.Watch
	if rf, ok := ret.Get(0).(func(int32) drivers.Watch); ok {
		r0 = rf(batch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(drivers.Watch)
		}
	}

	return r0
}

// WithFullContent provides a mock function with given fields: isFull
func (_m *Watch) WithFullContent(isFull bool) drivers.Watch {
	ret := _m.Called(isFull)

	var r0 drivers.Watch
	if rf, ok := ret.Get(0).(func(bool) drivers.Watch); ok {
		r0 = rf(isFull)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(drivers.Watch)
		}
	}

	return r0
}

// WithMaxAwaitTime provides a mock function with given fields: duration
func (_m *Watch) WithMaxAwaitTime(duration time.Duration) drivers.Watch {
	ret := _m.Called(duration)

	var r0 drivers.Watch
	if rf, ok := ret.Get(0).(func(time.Duration) drivers.Watch); ok {
		r0 = rf(duration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(drivers.Watch)
		}
	}

	return r0
}

// WithStartTimestamp provides a mock function with given fields: _a0, _a1
func (_m *Watch) WithStartTimestamp(_a0 uint32, _a1 uint32) drivers.Watch {
	ret := _m.Called(_a0, _a1)

	var r0 drivers.Watch
	if rf, ok := ret.Get(0).(func(uint32, uint32) drivers.Watch); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(drivers.Watch)
		}
	}

	return r0
}

type mockConstructorTestingTNewWatch interface {
	mock.TestingT
	Cleanup(func())
}

// NewWatch creates a new instance of Watch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWatch(t mockConstructorTestingTNewWatch) *Watch {
	mock := &Watch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
