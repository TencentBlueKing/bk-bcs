// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	drivers "github.com/Tencent/bk-bcs/bcs-common/pkg/odm/drivers"
	mock "github.com/stretchr/testify/mock"

	operator "github.com/Tencent/bk-bcs/bcs-common/pkg/odm/operator"
)

// Table is an autogenerated mock type for the Table type
type Table struct {
	mock.Mock
}

// Aggregation provides a mock function with given fields: ctx, pipeline, result
func (_m *Table) Aggregation(ctx context.Context, pipeline interface{}, result interface{}) error {
	ret := _m.Called(ctx, pipeline, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) error); ok {
		r0 = rf(ctx, pipeline, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateIndex provides a mock function with given fields: ctx, index
func (_m *Table) CreateIndex(ctx context.Context, index drivers.Index) error {
	ret := _m.Called(ctx, index)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, drivers.Index) error); ok {
		r0 = rf(ctx, index)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, condition
func (_m *Table) Delete(ctx context.Context, condition *operator.Condition) (int64, error) {
	ret := _m.Called(ctx, condition)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *operator.Condition) int64); ok {
		r0 = rf(ctx, condition)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *operator.Condition) error); ok {
		r1 = rf(ctx, condition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DropIndex provides a mock function with given fields: ctx, indexName
func (_m *Table) DropIndex(ctx context.Context, indexName string) error {
	ret := _m.Called(ctx, indexName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, indexName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: condition
func (_m *Table) Find(condition *operator.Condition) drivers.Find {
	ret := _m.Called(condition)

	var r0 drivers.Find
	if rf, ok := ret.Get(0).(func(*operator.Condition) drivers.Find); ok {
		r0 = rf(condition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(drivers.Find)
		}
	}

	return r0
}

// HasIndex provides a mock function with given fields: ctx, indexName
func (_m *Table) HasIndex(ctx context.Context, indexName string) (bool, error) {
	ret := _m.Called(ctx, indexName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, indexName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, indexName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Indexes provides a mock function with given fields: ctx
func (_m *Table) Indexes(ctx context.Context) ([]drivers.Index, error) {
	ret := _m.Called(ctx)

	var r0 []drivers.Index
	if rf, ok := ret.Get(0).(func(context.Context) []drivers.Index); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]drivers.Index)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, docs
func (_m *Table) Insert(ctx context.Context, docs []interface{}) (int, error) {
	ret := _m.Called(ctx, docs)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, []interface{}) int); ok {
		r0 = rf(ctx, docs)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []interface{}) error); ok {
		r1 = rf(ctx, docs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, condition, data
func (_m *Table) Update(ctx context.Context, condition *operator.Condition, data interface{}) error {
	ret := _m.Called(ctx, condition, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *operator.Condition, interface{}) error); ok {
		r0 = rf(ctx, condition, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMany provides a mock function with given fields: ctx, condition, data
func (_m *Table) UpdateMany(ctx context.Context, condition *operator.Condition, data interface{}) (int64, error) {
	ret := _m.Called(ctx, condition, data)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *operator.Condition, interface{}) int64); ok {
		r0 = rf(ctx, condition, data)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *operator.Condition, interface{}) error); ok {
		r1 = rf(ctx, condition, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: ctx, condition, data
func (_m *Table) Upsert(ctx context.Context, condition *operator.Condition, data interface{}) error {
	ret := _m.Called(ctx, condition, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *operator.Condition, interface{}) error); ok {
		r0 = rf(ctx, condition, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Watch provides a mock function with given fields: condition
func (_m *Table) Watch(condition []*operator.Condition) drivers.Watch {
	ret := _m.Called(condition)

	var r0 drivers.Watch
	if rf, ok := ret.Get(0).(func([]*operator.Condition) drivers.Watch); ok {
		r0 = rf(condition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(drivers.Watch)
		}
	}

	return r0
}

type mockConstructorTestingTNewTable interface {
	mock.TestingT
	Cleanup(func())
}

// NewTable creates a new instance of Table. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTable(t mockConstructorTestingTNewTable) *Table {
	mock := &Table{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
