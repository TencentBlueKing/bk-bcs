// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	resourcemgr "github.com/Tencent/bk-bcs/bcs-services/bcs-nodegroup-manager/pkg/resourcemgr"
	storage "github.com/Tencent/bk-bcs/bcs-services/bcs-nodegroup-manager/pkg/storage"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// FillDeviceRecordIp provides a mock function with given fields: recordID, ipList
func (_m *Client) FillDeviceRecordIp(recordID string, ipList []string) error {
	ret := _m.Called(recordID, ipList)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(recordID, ipList)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeviceListByConsumer provides a mock function with given fields: consumerID, option
func (_m *Client) GetDeviceListByConsumer(consumerID string, option *resourcemgr.GetOptions) (*storage.DeviceGroup, error) {
	ret := _m.Called(consumerID, option)

	var r0 *storage.DeviceGroup
	if rf, ok := ret.Get(0).(func(string, *resourcemgr.GetOptions) *storage.DeviceGroup); ok {
		r0 = rf(consumerID, option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.DeviceGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *resourcemgr.GetOptions) error); ok {
		r1 = rf(consumerID, option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceListByPoolID provides a mock function with given fields: consumerID, devicePoolID, option
func (_m *Client) GetDeviceListByPoolID(consumerID string, devicePoolID []string, option *resourcemgr.GetOptions) (*storage.DeviceGroup, error) {
	ret := _m.Called(consumerID, devicePoolID, option)

	var r0 *storage.DeviceGroup
	if rf, ok := ret.Get(0).(func(string, []string, *resourcemgr.GetOptions) *storage.DeviceGroup); ok {
		r0 = rf(consumerID, devicePoolID, option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.DeviceGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string, *resourcemgr.GetOptions) error); ok {
		r1 = rf(consumerID, devicePoolID, option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskByID provides a mock function with given fields: recordID, opt
func (_m *Client) GetTaskByID(recordID string, opt *resourcemgr.GetOptions) (*storage.ScaleDownTask, error) {
	ret := _m.Called(recordID, opt)

	var r0 *storage.ScaleDownTask
	if rf, ok := ret.Get(0).(func(string, *resourcemgr.GetOptions) *storage.ScaleDownTask); ok {
		r0 = rf(recordID, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.ScaleDownTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *resourcemgr.GetOptions) error); ok {
		r1 = rf(recordID, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTasksByCond provides a mock function with given fields: recordType, status
func (_m *Client) ListTasksByCond(recordType []int64, status []int64) ([]*storage.ScaleDownTask, error) {
	ret := _m.Called(recordType, status)

	var r0 []*storage.ScaleDownTask
	if rf, ok := ret.Get(0).(func([]int64, []int64) []*storage.ScaleDownTask); ok {
		r0 = rf(recordType, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storage.ScaleDownTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int64, []int64) error); ok {
		r1 = rf(recordType, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTasksByConsumer provides a mock function with given fields: consumerID, option
func (_m *Client) ListTasksByConsumer(consumerID string, option *resourcemgr.ListOptions) ([]*storage.ScaleDownTask, error) {
	ret := _m.Called(consumerID, option)

	var r0 []*storage.ScaleDownTask
	if rf, ok := ret.Get(0).(func(string, *resourcemgr.ListOptions) []*storage.ScaleDownTask); ok {
		r0 = rf(consumerID, option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storage.ScaleDownTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *resourcemgr.ListOptions) error); ok {
		r1 = rf(consumerID, option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
