// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: bcs-resource-manager.proto

package resourcemanager

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ResourceManager service

func NewResourceManagerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "ResourceManager.Available",
			Path:    []string{"/resourcemanager/v1/available"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.CreateDeviceConsumer",
			Path:    []string{"/resourcemanager/v1/device/consumer"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.GetDeviceConsumer",
			Path:    []string{"/resourcemanager/v1/device/consumer/{deviceConsumerID}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.ListDeviceConsumer",
			Path:    []string{"/resourcemanager/v1/device/consumer"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.UpdateDeviceConsumer",
			Path:    []string{"/resourcemanager/v1/device/consumer/{deviceConsumerID}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.DeleteDeviceConsumer",
			Path:    []string{"/resourcemanager/v1/device/consumer/{deviceConsumerID}"},
			Method:  []string{"DELETE"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.ConsumeDevice",
			Path:    []string{"/resourcemanager/v1/device/consumer/{deviceConsumerID}/consume"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.ReturnDevice",
			Path:    []string{"/resourcemanager/v1/device/consumer/{deviceConsumerID}/return"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.CreateDevicePool",
			Path:    []string{"/resourcemanager/v1/device/pool"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.GetDevicePool",
			Path:    []string{"/resourcemanager/v1/device/pool/{devicePoolID}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.ListDevicePool",
			Path:    []string{"/resourcemanager/v1/device/pool"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.UpdateDevicePool",
			Path:    []string{"/resourcemanager/v1/device/pool/{devicePoolID}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.DeleteDevicePool",
			Path:    []string{"/resourcemanager/v1/device/pool/{devicePoolID}"},
			Method:  []string{"DELETE"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.ImportDeviceToDevicePool",
			Path:    []string{"/resourcemanager/v1/device/pool/{devicePoolID}/import"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.ListDeviceBill",
			Path:    []string{"/resourcemanager/v1/device/bill"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.GetDeviceRecord",
			Path:    []string{"/resourcemanager/v1/device/record/{deviceRecordID}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.ListDeviceRecord",
			Path:    []string{"/resourcemanager/v1/device/record"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.CreateProvider",
			Path:    []string{"/resourcemanager/v1/provider"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.GetProvider",
			Path:    []string{"/resourcemanager/v1/provider/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.ListProvider",
			Path:    []string{"/resourcemanager/v1/provider"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.UpdateProvider",
			Path:    []string{"/resourcemanager/v1/provider/{name}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.DeleteProvider",
			Path:    []string{"/resourcemanager/v1/provider/{name}"},
			Method:  []string{"DELETE"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.QueryProviderOrder",
			Path:    []string{"/resourcemanager/v1/provider/{name}/order"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.QueryProviderNetwork",
			Path:    []string{"/resourcemanager/v1/provider/{name}/network"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.QueryObsBill",
			Path:    []string{"/resourcemanager/v1/obs/bill"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.CreateObsCost",
			Path:    []string{"/resourcemanager/v1/obs/cost"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.CreateResourcePool",
			Path:    []string{"/resourcemanager/v1/resource_pools"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.ListResourcePool",
			Path:    []string{"/resourcemanager/v1/resource_pools"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.ImportResource",
			Path:    []string{"/resourcemanager/v1/resource_pools/{poolID}/import"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.ListResource",
			Path:    []string{"/resourcemanager/v1/resource_pools/{poolID}/resources"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.ListDeviceRecordByPool",
			Path:    []string{"/resourcemanager/v1/resource_pools/{poolID}/device_records"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.CreateDeviceRecordByPool",
			Path:    []string{"/resourcemanager/v1/resource_pools/{poolID}/device_records"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.GetDevice",
			Path:    []string{"/resourcemanager/v1/device/{deviceID}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.ListDevices",
			Path:    []string{"/resourcemanager/v1/devices"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "ResourceManager.UpdateDevice",
			Path:    []string{"/resourcemanager/v1/device/{deviceID}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for ResourceManager service

type ResourceManagerService interface {
	//* common service
	Available(ctx context.Context, in *AvailableReq, opts ...client.CallOption) (*AvailableResp, error)
	//* resource service
	//* device consumer
	CreateDeviceConsumer(ctx context.Context, in *CreateDeviceConsumerReq, opts ...client.CallOption) (*CreateDeviceConsumerResp, error)
	GetDeviceConsumer(ctx context.Context, in *GetDeviceConsumerReq, opts ...client.CallOption) (*GetDeviceConsumerResp, error)
	ListDeviceConsumer(ctx context.Context, in *ListDeviceConsumerReq, opts ...client.CallOption) (*ListDeviceConsumerResp, error)
	UpdateDeviceConsumer(ctx context.Context, in *UpdateDeviceConsumerReq, opts ...client.CallOption) (*UpdateDeviceConsumerResp, error)
	DeleteDeviceConsumer(ctx context.Context, in *DeleteDeviceConsumerReq, opts ...client.CallOption) (*DeleteDeviceConsumerResp, error)
	ConsumeDevice(ctx context.Context, in *ConsumeDeviceReq, opts ...client.CallOption) (*ConsumeDeviceResp, error)
	ReturnDevice(ctx context.Context, in *ReturnDeviceReq, opts ...client.CallOption) (*ReturnDeviceResp, error)
	//* device pool
	CreateDevicePool(ctx context.Context, in *CreateDevicePoolReq, opts ...client.CallOption) (*CreateDevicePoolResp, error)
	GetDevicePool(ctx context.Context, in *GetDevicePoolReq, opts ...client.CallOption) (*GetDevicePoolResp, error)
	ListDevicePool(ctx context.Context, in *ListDevicePoolReq, opts ...client.CallOption) (*ListDevicePoolResp, error)
	UpdateDevicePool(ctx context.Context, in *UpdateDevicePoolReq, opts ...client.CallOption) (*UpdateDevicePoolResp, error)
	DeleteDevicePool(ctx context.Context, in *DeleteDevicePoolReq, opts ...client.CallOption) (*DeleteDevicePoolResp, error)
	ImportDeviceToDevicePool(ctx context.Context, in *ImportDeviceToDevicePoolReq, opts ...client.CallOption) (*ImportDeviceToDevicePoolResp, error)
	// device bill
	ListDeviceBill(ctx context.Context, in *ListDeviceBillReq, opts ...client.CallOption) (*ListDeviceBillResp, error)
	// device record
	GetDeviceRecord(ctx context.Context, in *GetDeviceRecordReq, opts ...client.CallOption) (*GetDeviceRecordResp, error)
	ListDeviceRecord(ctx context.Context, in *ListDeviceRecordReq, opts ...client.CallOption) (*ListDeviceRecordResp, error)
	// provider
	CreateProvider(ctx context.Context, in *CreateProviderReq, opts ...client.CallOption) (*CreateProviderResp, error)
	GetProvider(ctx context.Context, in *GetProviderReq, opts ...client.CallOption) (*GetProviderResp, error)
	ListProvider(ctx context.Context, in *ListProviderReq, opts ...client.CallOption) (*ListProviderResp, error)
	UpdateProvider(ctx context.Context, in *UpdateProviderReq, opts ...client.CallOption) (*UpdateProviderResp, error)
	DeleteProvider(ctx context.Context, in *DeleteProviderReq, opts ...client.CallOption) (*DeleteProviderResp, error)
	QueryProviderOrder(ctx context.Context, in *QueryProviderOrderReq, opts ...client.CallOption) (*QueryProviderOrderResp, error)
	QueryProviderNetwork(ctx context.Context, in *QueryProviderNetworkReq, opts ...client.CallOption) (*QueryProviderNetworkResp, error)
	// obs
	QueryObsBill(ctx context.Context, in *QueryObsBillReq, opts ...client.CallOption) (*QueryObsBillResp, error)
	CreateObsCost(ctx context.Context, in *CreateObsCostReq, opts ...client.CallOption) (*CreateObsCostResp, error)
	// 资源池
	CreateResourcePool(ctx context.Context, in *CreateResourcePoolReq, opts ...client.CallOption) (*CreateResourcePoolResp, error)
	ListResourcePool(ctx context.Context, in *ListResourcePoolReq, opts ...client.CallOption) (*ListResourcePoolResp, error)
	ImportResource(ctx context.Context, in *ImportResourceReq, opts ...client.CallOption) (*ImportResourceResp, error)
	ListResource(ctx context.Context, in *ListResourceReq, opts ...client.CallOption) (*ListResourceResp, error)
	ListDeviceRecordByPool(ctx context.Context, in *ListDeviceRecordByPoolReq, opts ...client.CallOption) (*ListDeviceRecordResp, error)
	CreateDeviceRecordByPool(ctx context.Context, in *CreateDeviceRecordByPoolReq, opts ...client.CallOption) (*CreateDeviceRecordByPoolResp, error)
	//* device
	GetDevice(ctx context.Context, in *GetDeviceReq, opts ...client.CallOption) (*GetDeviceResp, error)
	ListDevices(ctx context.Context, in *ListDevicesReq, opts ...client.CallOption) (*ListDevicesResp, error)
	UpdateDevice(ctx context.Context, in *UpdateDeviceReq, opts ...client.CallOption) (*UpdateDeviceResp, error)
}

type resourceManagerService struct {
	c    client.Client
	name string
}

func NewResourceManagerService(name string, c client.Client) ResourceManagerService {
	return &resourceManagerService{
		c:    c,
		name: name,
	}
}

func (c *resourceManagerService) Available(ctx context.Context, in *AvailableReq, opts ...client.CallOption) (*AvailableResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.Available", in)
	out := new(AvailableResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) CreateDeviceConsumer(ctx context.Context, in *CreateDeviceConsumerReq, opts ...client.CallOption) (*CreateDeviceConsumerResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.CreateDeviceConsumer", in)
	out := new(CreateDeviceConsumerResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) GetDeviceConsumer(ctx context.Context, in *GetDeviceConsumerReq, opts ...client.CallOption) (*GetDeviceConsumerResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.GetDeviceConsumer", in)
	out := new(GetDeviceConsumerResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) ListDeviceConsumer(ctx context.Context, in *ListDeviceConsumerReq, opts ...client.CallOption) (*ListDeviceConsumerResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.ListDeviceConsumer", in)
	out := new(ListDeviceConsumerResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) UpdateDeviceConsumer(ctx context.Context, in *UpdateDeviceConsumerReq, opts ...client.CallOption) (*UpdateDeviceConsumerResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.UpdateDeviceConsumer", in)
	out := new(UpdateDeviceConsumerResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) DeleteDeviceConsumer(ctx context.Context, in *DeleteDeviceConsumerReq, opts ...client.CallOption) (*DeleteDeviceConsumerResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.DeleteDeviceConsumer", in)
	out := new(DeleteDeviceConsumerResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) ConsumeDevice(ctx context.Context, in *ConsumeDeviceReq, opts ...client.CallOption) (*ConsumeDeviceResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.ConsumeDevice", in)
	out := new(ConsumeDeviceResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) ReturnDevice(ctx context.Context, in *ReturnDeviceReq, opts ...client.CallOption) (*ReturnDeviceResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.ReturnDevice", in)
	out := new(ReturnDeviceResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) CreateDevicePool(ctx context.Context, in *CreateDevicePoolReq, opts ...client.CallOption) (*CreateDevicePoolResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.CreateDevicePool", in)
	out := new(CreateDevicePoolResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) GetDevicePool(ctx context.Context, in *GetDevicePoolReq, opts ...client.CallOption) (*GetDevicePoolResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.GetDevicePool", in)
	out := new(GetDevicePoolResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) ListDevicePool(ctx context.Context, in *ListDevicePoolReq, opts ...client.CallOption) (*ListDevicePoolResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.ListDevicePool", in)
	out := new(ListDevicePoolResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) UpdateDevicePool(ctx context.Context, in *UpdateDevicePoolReq, opts ...client.CallOption) (*UpdateDevicePoolResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.UpdateDevicePool", in)
	out := new(UpdateDevicePoolResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) DeleteDevicePool(ctx context.Context, in *DeleteDevicePoolReq, opts ...client.CallOption) (*DeleteDevicePoolResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.DeleteDevicePool", in)
	out := new(DeleteDevicePoolResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) ImportDeviceToDevicePool(ctx context.Context, in *ImportDeviceToDevicePoolReq, opts ...client.CallOption) (*ImportDeviceToDevicePoolResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.ImportDeviceToDevicePool", in)
	out := new(ImportDeviceToDevicePoolResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) ListDeviceBill(ctx context.Context, in *ListDeviceBillReq, opts ...client.CallOption) (*ListDeviceBillResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.ListDeviceBill", in)
	out := new(ListDeviceBillResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) GetDeviceRecord(ctx context.Context, in *GetDeviceRecordReq, opts ...client.CallOption) (*GetDeviceRecordResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.GetDeviceRecord", in)
	out := new(GetDeviceRecordResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) ListDeviceRecord(ctx context.Context, in *ListDeviceRecordReq, opts ...client.CallOption) (*ListDeviceRecordResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.ListDeviceRecord", in)
	out := new(ListDeviceRecordResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) CreateProvider(ctx context.Context, in *CreateProviderReq, opts ...client.CallOption) (*CreateProviderResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.CreateProvider", in)
	out := new(CreateProviderResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) GetProvider(ctx context.Context, in *GetProviderReq, opts ...client.CallOption) (*GetProviderResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.GetProvider", in)
	out := new(GetProviderResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) ListProvider(ctx context.Context, in *ListProviderReq, opts ...client.CallOption) (*ListProviderResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.ListProvider", in)
	out := new(ListProviderResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) UpdateProvider(ctx context.Context, in *UpdateProviderReq, opts ...client.CallOption) (*UpdateProviderResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.UpdateProvider", in)
	out := new(UpdateProviderResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) DeleteProvider(ctx context.Context, in *DeleteProviderReq, opts ...client.CallOption) (*DeleteProviderResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.DeleteProvider", in)
	out := new(DeleteProviderResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) QueryProviderOrder(ctx context.Context, in *QueryProviderOrderReq, opts ...client.CallOption) (*QueryProviderOrderResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.QueryProviderOrder", in)
	out := new(QueryProviderOrderResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) QueryProviderNetwork(ctx context.Context, in *QueryProviderNetworkReq, opts ...client.CallOption) (*QueryProviderNetworkResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.QueryProviderNetwork", in)
	out := new(QueryProviderNetworkResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) QueryObsBill(ctx context.Context, in *QueryObsBillReq, opts ...client.CallOption) (*QueryObsBillResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.QueryObsBill", in)
	out := new(QueryObsBillResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) CreateObsCost(ctx context.Context, in *CreateObsCostReq, opts ...client.CallOption) (*CreateObsCostResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.CreateObsCost", in)
	out := new(CreateObsCostResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) CreateResourcePool(ctx context.Context, in *CreateResourcePoolReq, opts ...client.CallOption) (*CreateResourcePoolResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.CreateResourcePool", in)
	out := new(CreateResourcePoolResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) ListResourcePool(ctx context.Context, in *ListResourcePoolReq, opts ...client.CallOption) (*ListResourcePoolResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.ListResourcePool", in)
	out := new(ListResourcePoolResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) ImportResource(ctx context.Context, in *ImportResourceReq, opts ...client.CallOption) (*ImportResourceResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.ImportResource", in)
	out := new(ImportResourceResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) ListResource(ctx context.Context, in *ListResourceReq, opts ...client.CallOption) (*ListResourceResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.ListResource", in)
	out := new(ListResourceResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) ListDeviceRecordByPool(ctx context.Context, in *ListDeviceRecordByPoolReq, opts ...client.CallOption) (*ListDeviceRecordResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.ListDeviceRecordByPool", in)
	out := new(ListDeviceRecordResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) CreateDeviceRecordByPool(ctx context.Context, in *CreateDeviceRecordByPoolReq, opts ...client.CallOption) (*CreateDeviceRecordByPoolResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.CreateDeviceRecordByPool", in)
	out := new(CreateDeviceRecordByPoolResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) GetDevice(ctx context.Context, in *GetDeviceReq, opts ...client.CallOption) (*GetDeviceResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.GetDevice", in)
	out := new(GetDeviceResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) ListDevices(ctx context.Context, in *ListDevicesReq, opts ...client.CallOption) (*ListDevicesResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.ListDevices", in)
	out := new(ListDevicesResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) UpdateDevice(ctx context.Context, in *UpdateDeviceReq, opts ...client.CallOption) (*UpdateDeviceResp, error) {
	req := c.c.NewRequest(c.name, "ResourceManager.UpdateDevice", in)
	out := new(UpdateDeviceResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ResourceManager service

type ResourceManagerHandler interface {
	//* common service
	Available(context.Context, *AvailableReq, *AvailableResp) error
	//* resource service
	//* device consumer
	CreateDeviceConsumer(context.Context, *CreateDeviceConsumerReq, *CreateDeviceConsumerResp) error
	GetDeviceConsumer(context.Context, *GetDeviceConsumerReq, *GetDeviceConsumerResp) error
	ListDeviceConsumer(context.Context, *ListDeviceConsumerReq, *ListDeviceConsumerResp) error
	UpdateDeviceConsumer(context.Context, *UpdateDeviceConsumerReq, *UpdateDeviceConsumerResp) error
	DeleteDeviceConsumer(context.Context, *DeleteDeviceConsumerReq, *DeleteDeviceConsumerResp) error
	ConsumeDevice(context.Context, *ConsumeDeviceReq, *ConsumeDeviceResp) error
	ReturnDevice(context.Context, *ReturnDeviceReq, *ReturnDeviceResp) error
	//* device pool
	CreateDevicePool(context.Context, *CreateDevicePoolReq, *CreateDevicePoolResp) error
	GetDevicePool(context.Context, *GetDevicePoolReq, *GetDevicePoolResp) error
	ListDevicePool(context.Context, *ListDevicePoolReq, *ListDevicePoolResp) error
	UpdateDevicePool(context.Context, *UpdateDevicePoolReq, *UpdateDevicePoolResp) error
	DeleteDevicePool(context.Context, *DeleteDevicePoolReq, *DeleteDevicePoolResp) error
	ImportDeviceToDevicePool(context.Context, *ImportDeviceToDevicePoolReq, *ImportDeviceToDevicePoolResp) error
	// device bill
	ListDeviceBill(context.Context, *ListDeviceBillReq, *ListDeviceBillResp) error
	// device record
	GetDeviceRecord(context.Context, *GetDeviceRecordReq, *GetDeviceRecordResp) error
	ListDeviceRecord(context.Context, *ListDeviceRecordReq, *ListDeviceRecordResp) error
	// provider
	CreateProvider(context.Context, *CreateProviderReq, *CreateProviderResp) error
	GetProvider(context.Context, *GetProviderReq, *GetProviderResp) error
	ListProvider(context.Context, *ListProviderReq, *ListProviderResp) error
	UpdateProvider(context.Context, *UpdateProviderReq, *UpdateProviderResp) error
	DeleteProvider(context.Context, *DeleteProviderReq, *DeleteProviderResp) error
	QueryProviderOrder(context.Context, *QueryProviderOrderReq, *QueryProviderOrderResp) error
	QueryProviderNetwork(context.Context, *QueryProviderNetworkReq, *QueryProviderNetworkResp) error
	// obs
	QueryObsBill(context.Context, *QueryObsBillReq, *QueryObsBillResp) error
	CreateObsCost(context.Context, *CreateObsCostReq, *CreateObsCostResp) error
	// 资源池
	CreateResourcePool(context.Context, *CreateResourcePoolReq, *CreateResourcePoolResp) error
	ListResourcePool(context.Context, *ListResourcePoolReq, *ListResourcePoolResp) error
	ImportResource(context.Context, *ImportResourceReq, *ImportResourceResp) error
	ListResource(context.Context, *ListResourceReq, *ListResourceResp) error
	ListDeviceRecordByPool(context.Context, *ListDeviceRecordByPoolReq, *ListDeviceRecordResp) error
	CreateDeviceRecordByPool(context.Context, *CreateDeviceRecordByPoolReq, *CreateDeviceRecordByPoolResp) error
	//* device
	GetDevice(context.Context, *GetDeviceReq, *GetDeviceResp) error
	ListDevices(context.Context, *ListDevicesReq, *ListDevicesResp) error
	UpdateDevice(context.Context, *UpdateDeviceReq, *UpdateDeviceResp) error
}

func RegisterResourceManagerHandler(s server.Server, hdlr ResourceManagerHandler, opts ...server.HandlerOption) error {
	type resourceManager interface {
		Available(ctx context.Context, in *AvailableReq, out *AvailableResp) error
		CreateDeviceConsumer(ctx context.Context, in *CreateDeviceConsumerReq, out *CreateDeviceConsumerResp) error
		GetDeviceConsumer(ctx context.Context, in *GetDeviceConsumerReq, out *GetDeviceConsumerResp) error
		ListDeviceConsumer(ctx context.Context, in *ListDeviceConsumerReq, out *ListDeviceConsumerResp) error
		UpdateDeviceConsumer(ctx context.Context, in *UpdateDeviceConsumerReq, out *UpdateDeviceConsumerResp) error
		DeleteDeviceConsumer(ctx context.Context, in *DeleteDeviceConsumerReq, out *DeleteDeviceConsumerResp) error
		ConsumeDevice(ctx context.Context, in *ConsumeDeviceReq, out *ConsumeDeviceResp) error
		ReturnDevice(ctx context.Context, in *ReturnDeviceReq, out *ReturnDeviceResp) error
		CreateDevicePool(ctx context.Context, in *CreateDevicePoolReq, out *CreateDevicePoolResp) error
		GetDevicePool(ctx context.Context, in *GetDevicePoolReq, out *GetDevicePoolResp) error
		ListDevicePool(ctx context.Context, in *ListDevicePoolReq, out *ListDevicePoolResp) error
		UpdateDevicePool(ctx context.Context, in *UpdateDevicePoolReq, out *UpdateDevicePoolResp) error
		DeleteDevicePool(ctx context.Context, in *DeleteDevicePoolReq, out *DeleteDevicePoolResp) error
		ImportDeviceToDevicePool(ctx context.Context, in *ImportDeviceToDevicePoolReq, out *ImportDeviceToDevicePoolResp) error
		ListDeviceBill(ctx context.Context, in *ListDeviceBillReq, out *ListDeviceBillResp) error
		GetDeviceRecord(ctx context.Context, in *GetDeviceRecordReq, out *GetDeviceRecordResp) error
		ListDeviceRecord(ctx context.Context, in *ListDeviceRecordReq, out *ListDeviceRecordResp) error
		CreateProvider(ctx context.Context, in *CreateProviderReq, out *CreateProviderResp) error
		GetProvider(ctx context.Context, in *GetProviderReq, out *GetProviderResp) error
		ListProvider(ctx context.Context, in *ListProviderReq, out *ListProviderResp) error
		UpdateProvider(ctx context.Context, in *UpdateProviderReq, out *UpdateProviderResp) error
		DeleteProvider(ctx context.Context, in *DeleteProviderReq, out *DeleteProviderResp) error
		QueryProviderOrder(ctx context.Context, in *QueryProviderOrderReq, out *QueryProviderOrderResp) error
		QueryProviderNetwork(ctx context.Context, in *QueryProviderNetworkReq, out *QueryProviderNetworkResp) error
		QueryObsBill(ctx context.Context, in *QueryObsBillReq, out *QueryObsBillResp) error
		CreateObsCost(ctx context.Context, in *CreateObsCostReq, out *CreateObsCostResp) error
		CreateResourcePool(ctx context.Context, in *CreateResourcePoolReq, out *CreateResourcePoolResp) error
		ListResourcePool(ctx context.Context, in *ListResourcePoolReq, out *ListResourcePoolResp) error
		ImportResource(ctx context.Context, in *ImportResourceReq, out *ImportResourceResp) error
		ListResource(ctx context.Context, in *ListResourceReq, out *ListResourceResp) error
		ListDeviceRecordByPool(ctx context.Context, in *ListDeviceRecordByPoolReq, out *ListDeviceRecordResp) error
		CreateDeviceRecordByPool(ctx context.Context, in *CreateDeviceRecordByPoolReq, out *CreateDeviceRecordByPoolResp) error
		GetDevice(ctx context.Context, in *GetDeviceReq, out *GetDeviceResp) error
		ListDevices(ctx context.Context, in *ListDevicesReq, out *ListDevicesResp) error
		UpdateDevice(ctx context.Context, in *UpdateDeviceReq, out *UpdateDeviceResp) error
	}
	type ResourceManager struct {
		resourceManager
	}
	h := &resourceManagerHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.Available",
		Path:    []string{"/resourcemanager/v1/available"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.CreateDeviceConsumer",
		Path:    []string{"/resourcemanager/v1/device/consumer"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.GetDeviceConsumer",
		Path:    []string{"/resourcemanager/v1/device/consumer/{deviceConsumerID}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.ListDeviceConsumer",
		Path:    []string{"/resourcemanager/v1/device/consumer"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.UpdateDeviceConsumer",
		Path:    []string{"/resourcemanager/v1/device/consumer/{deviceConsumerID}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.DeleteDeviceConsumer",
		Path:    []string{"/resourcemanager/v1/device/consumer/{deviceConsumerID}"},
		Method:  []string{"DELETE"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.ConsumeDevice",
		Path:    []string{"/resourcemanager/v1/device/consumer/{deviceConsumerID}/consume"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.ReturnDevice",
		Path:    []string{"/resourcemanager/v1/device/consumer/{deviceConsumerID}/return"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.CreateDevicePool",
		Path:    []string{"/resourcemanager/v1/device/pool"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.GetDevicePool",
		Path:    []string{"/resourcemanager/v1/device/pool/{devicePoolID}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.ListDevicePool",
		Path:    []string{"/resourcemanager/v1/device/pool"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.UpdateDevicePool",
		Path:    []string{"/resourcemanager/v1/device/pool/{devicePoolID}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.DeleteDevicePool",
		Path:    []string{"/resourcemanager/v1/device/pool/{devicePoolID}"},
		Method:  []string{"DELETE"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.ImportDeviceToDevicePool",
		Path:    []string{"/resourcemanager/v1/device/pool/{devicePoolID}/import"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.ListDeviceBill",
		Path:    []string{"/resourcemanager/v1/device/bill"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.GetDeviceRecord",
		Path:    []string{"/resourcemanager/v1/device/record/{deviceRecordID}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.ListDeviceRecord",
		Path:    []string{"/resourcemanager/v1/device/record"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.CreateProvider",
		Path:    []string{"/resourcemanager/v1/provider"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.GetProvider",
		Path:    []string{"/resourcemanager/v1/provider/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.ListProvider",
		Path:    []string{"/resourcemanager/v1/provider"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.UpdateProvider",
		Path:    []string{"/resourcemanager/v1/provider/{name}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.DeleteProvider",
		Path:    []string{"/resourcemanager/v1/provider/{name}"},
		Method:  []string{"DELETE"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.QueryProviderOrder",
		Path:    []string{"/resourcemanager/v1/provider/{name}/order"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.QueryProviderNetwork",
		Path:    []string{"/resourcemanager/v1/provider/{name}/network"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.QueryObsBill",
		Path:    []string{"/resourcemanager/v1/obs/bill"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.CreateObsCost",
		Path:    []string{"/resourcemanager/v1/obs/cost"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.CreateResourcePool",
		Path:    []string{"/resourcemanager/v1/resource_pools"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.ListResourcePool",
		Path:    []string{"/resourcemanager/v1/resource_pools"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.ImportResource",
		Path:    []string{"/resourcemanager/v1/resource_pools/{poolID}/import"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.ListResource",
		Path:    []string{"/resourcemanager/v1/resource_pools/{poolID}/resources"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.ListDeviceRecordByPool",
		Path:    []string{"/resourcemanager/v1/resource_pools/{poolID}/device_records"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.CreateDeviceRecordByPool",
		Path:    []string{"/resourcemanager/v1/resource_pools/{poolID}/device_records"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.GetDevice",
		Path:    []string{"/resourcemanager/v1/device/{deviceID}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.ListDevices",
		Path:    []string{"/resourcemanager/v1/devices"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ResourceManager.UpdateDevice",
		Path:    []string{"/resourcemanager/v1/device/{deviceID}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&ResourceManager{h}, opts...))
}

type resourceManagerHandler struct {
	ResourceManagerHandler
}

func (h *resourceManagerHandler) Available(ctx context.Context, in *AvailableReq, out *AvailableResp) error {
	return h.ResourceManagerHandler.Available(ctx, in, out)
}

func (h *resourceManagerHandler) CreateDeviceConsumer(ctx context.Context, in *CreateDeviceConsumerReq, out *CreateDeviceConsumerResp) error {
	return h.ResourceManagerHandler.CreateDeviceConsumer(ctx, in, out)
}

func (h *resourceManagerHandler) GetDeviceConsumer(ctx context.Context, in *GetDeviceConsumerReq, out *GetDeviceConsumerResp) error {
	return h.ResourceManagerHandler.GetDeviceConsumer(ctx, in, out)
}

func (h *resourceManagerHandler) ListDeviceConsumer(ctx context.Context, in *ListDeviceConsumerReq, out *ListDeviceConsumerResp) error {
	return h.ResourceManagerHandler.ListDeviceConsumer(ctx, in, out)
}

func (h *resourceManagerHandler) UpdateDeviceConsumer(ctx context.Context, in *UpdateDeviceConsumerReq, out *UpdateDeviceConsumerResp) error {
	return h.ResourceManagerHandler.UpdateDeviceConsumer(ctx, in, out)
}

func (h *resourceManagerHandler) DeleteDeviceConsumer(ctx context.Context, in *DeleteDeviceConsumerReq, out *DeleteDeviceConsumerResp) error {
	return h.ResourceManagerHandler.DeleteDeviceConsumer(ctx, in, out)
}

func (h *resourceManagerHandler) ConsumeDevice(ctx context.Context, in *ConsumeDeviceReq, out *ConsumeDeviceResp) error {
	return h.ResourceManagerHandler.ConsumeDevice(ctx, in, out)
}

func (h *resourceManagerHandler) ReturnDevice(ctx context.Context, in *ReturnDeviceReq, out *ReturnDeviceResp) error {
	return h.ResourceManagerHandler.ReturnDevice(ctx, in, out)
}

func (h *resourceManagerHandler) CreateDevicePool(ctx context.Context, in *CreateDevicePoolReq, out *CreateDevicePoolResp) error {
	return h.ResourceManagerHandler.CreateDevicePool(ctx, in, out)
}

func (h *resourceManagerHandler) GetDevicePool(ctx context.Context, in *GetDevicePoolReq, out *GetDevicePoolResp) error {
	return h.ResourceManagerHandler.GetDevicePool(ctx, in, out)
}

func (h *resourceManagerHandler) ListDevicePool(ctx context.Context, in *ListDevicePoolReq, out *ListDevicePoolResp) error {
	return h.ResourceManagerHandler.ListDevicePool(ctx, in, out)
}

func (h *resourceManagerHandler) UpdateDevicePool(ctx context.Context, in *UpdateDevicePoolReq, out *UpdateDevicePoolResp) error {
	return h.ResourceManagerHandler.UpdateDevicePool(ctx, in, out)
}

func (h *resourceManagerHandler) DeleteDevicePool(ctx context.Context, in *DeleteDevicePoolReq, out *DeleteDevicePoolResp) error {
	return h.ResourceManagerHandler.DeleteDevicePool(ctx, in, out)
}

func (h *resourceManagerHandler) ImportDeviceToDevicePool(ctx context.Context, in *ImportDeviceToDevicePoolReq, out *ImportDeviceToDevicePoolResp) error {
	return h.ResourceManagerHandler.ImportDeviceToDevicePool(ctx, in, out)
}

func (h *resourceManagerHandler) ListDeviceBill(ctx context.Context, in *ListDeviceBillReq, out *ListDeviceBillResp) error {
	return h.ResourceManagerHandler.ListDeviceBill(ctx, in, out)
}

func (h *resourceManagerHandler) GetDeviceRecord(ctx context.Context, in *GetDeviceRecordReq, out *GetDeviceRecordResp) error {
	return h.ResourceManagerHandler.GetDeviceRecord(ctx, in, out)
}

func (h *resourceManagerHandler) ListDeviceRecord(ctx context.Context, in *ListDeviceRecordReq, out *ListDeviceRecordResp) error {
	return h.ResourceManagerHandler.ListDeviceRecord(ctx, in, out)
}

func (h *resourceManagerHandler) CreateProvider(ctx context.Context, in *CreateProviderReq, out *CreateProviderResp) error {
	return h.ResourceManagerHandler.CreateProvider(ctx, in, out)
}

func (h *resourceManagerHandler) GetProvider(ctx context.Context, in *GetProviderReq, out *GetProviderResp) error {
	return h.ResourceManagerHandler.GetProvider(ctx, in, out)
}

func (h *resourceManagerHandler) ListProvider(ctx context.Context, in *ListProviderReq, out *ListProviderResp) error {
	return h.ResourceManagerHandler.ListProvider(ctx, in, out)
}

func (h *resourceManagerHandler) UpdateProvider(ctx context.Context, in *UpdateProviderReq, out *UpdateProviderResp) error {
	return h.ResourceManagerHandler.UpdateProvider(ctx, in, out)
}

func (h *resourceManagerHandler) DeleteProvider(ctx context.Context, in *DeleteProviderReq, out *DeleteProviderResp) error {
	return h.ResourceManagerHandler.DeleteProvider(ctx, in, out)
}

func (h *resourceManagerHandler) QueryProviderOrder(ctx context.Context, in *QueryProviderOrderReq, out *QueryProviderOrderResp) error {
	return h.ResourceManagerHandler.QueryProviderOrder(ctx, in, out)
}

func (h *resourceManagerHandler) QueryProviderNetwork(ctx context.Context, in *QueryProviderNetworkReq, out *QueryProviderNetworkResp) error {
	return h.ResourceManagerHandler.QueryProviderNetwork(ctx, in, out)
}

func (h *resourceManagerHandler) QueryObsBill(ctx context.Context, in *QueryObsBillReq, out *QueryObsBillResp) error {
	return h.ResourceManagerHandler.QueryObsBill(ctx, in, out)
}

func (h *resourceManagerHandler) CreateObsCost(ctx context.Context, in *CreateObsCostReq, out *CreateObsCostResp) error {
	return h.ResourceManagerHandler.CreateObsCost(ctx, in, out)
}

func (h *resourceManagerHandler) CreateResourcePool(ctx context.Context, in *CreateResourcePoolReq, out *CreateResourcePoolResp) error {
	return h.ResourceManagerHandler.CreateResourcePool(ctx, in, out)
}

func (h *resourceManagerHandler) ListResourcePool(ctx context.Context, in *ListResourcePoolReq, out *ListResourcePoolResp) error {
	return h.ResourceManagerHandler.ListResourcePool(ctx, in, out)
}

func (h *resourceManagerHandler) ImportResource(ctx context.Context, in *ImportResourceReq, out *ImportResourceResp) error {
	return h.ResourceManagerHandler.ImportResource(ctx, in, out)
}

func (h *resourceManagerHandler) ListResource(ctx context.Context, in *ListResourceReq, out *ListResourceResp) error {
	return h.ResourceManagerHandler.ListResource(ctx, in, out)
}

func (h *resourceManagerHandler) ListDeviceRecordByPool(ctx context.Context, in *ListDeviceRecordByPoolReq, out *ListDeviceRecordResp) error {
	return h.ResourceManagerHandler.ListDeviceRecordByPool(ctx, in, out)
}

func (h *resourceManagerHandler) CreateDeviceRecordByPool(ctx context.Context, in *CreateDeviceRecordByPoolReq, out *CreateDeviceRecordByPoolResp) error {
	return h.ResourceManagerHandler.CreateDeviceRecordByPool(ctx, in, out)
}

func (h *resourceManagerHandler) GetDevice(ctx context.Context, in *GetDeviceReq, out *GetDeviceResp) error {
	return h.ResourceManagerHandler.GetDevice(ctx, in, out)
}

func (h *resourceManagerHandler) ListDevices(ctx context.Context, in *ListDevicesReq, out *ListDevicesResp) error {
	return h.ResourceManagerHandler.ListDevices(ctx, in, out)
}

func (h *resourceManagerHandler) UpdateDevice(ctx context.Context, in *UpdateDeviceReq, out *UpdateDeviceResp) error {
	return h.ResourceManagerHandler.UpdateDevice(ctx, in, out)
}
