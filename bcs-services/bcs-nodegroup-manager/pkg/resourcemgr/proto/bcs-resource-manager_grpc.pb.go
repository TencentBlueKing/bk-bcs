// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package resourcemanager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourceManagerClient is the client API for ResourceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceManagerClient interface {
	//* common service
	Available(ctx context.Context, in *AvailableReq, opts ...grpc.CallOption) (*AvailableResp, error)
	//* resource service
	//* device consumer
	CreateDeviceConsumer(ctx context.Context, in *CreateDeviceConsumerReq, opts ...grpc.CallOption) (*CreateDeviceConsumerResp, error)
	GetDeviceConsumer(ctx context.Context, in *GetDeviceConsumerReq, opts ...grpc.CallOption) (*GetDeviceConsumerResp, error)
	ListDeviceConsumer(ctx context.Context, in *ListDeviceConsumerReq, opts ...grpc.CallOption) (*ListDeviceConsumerResp, error)
	UpdateDeviceConsumer(ctx context.Context, in *UpdateDeviceConsumerReq, opts ...grpc.CallOption) (*UpdateDeviceConsumerResp, error)
	DeleteDeviceConsumer(ctx context.Context, in *DeleteDeviceConsumerReq, opts ...grpc.CallOption) (*DeleteDeviceConsumerResp, error)
	ConsumeDevice(ctx context.Context, in *ConsumeDeviceReq, opts ...grpc.CallOption) (*ConsumeDeviceResp, error)
	ReturnDevice(ctx context.Context, in *ReturnDeviceReq, opts ...grpc.CallOption) (*ReturnDeviceResp, error)
	//* device pool
	CreateDevicePool(ctx context.Context, in *CreateDevicePoolReq, opts ...grpc.CallOption) (*CreateDevicePoolResp, error)
	GetDevicePool(ctx context.Context, in *GetDevicePoolReq, opts ...grpc.CallOption) (*GetDevicePoolResp, error)
	ListDevicePool(ctx context.Context, in *ListDevicePoolReq, opts ...grpc.CallOption) (*ListDevicePoolResp, error)
	UpdateDevicePool(ctx context.Context, in *UpdateDevicePoolReq, opts ...grpc.CallOption) (*UpdateDevicePoolResp, error)
	DeleteDevicePool(ctx context.Context, in *DeleteDevicePoolReq, opts ...grpc.CallOption) (*DeleteDevicePoolResp, error)
	ImportDeviceToDevicePool(ctx context.Context, in *ImportDeviceToDevicePoolReq, opts ...grpc.CallOption) (*ImportDeviceToDevicePoolResp, error)
	// device bill
	ListDeviceBill(ctx context.Context, in *ListDeviceBillReq, opts ...grpc.CallOption) (*ListDeviceBillResp, error)
	// device record
	GetDeviceRecord(ctx context.Context, in *GetDeviceRecordReq, opts ...grpc.CallOption) (*GetDeviceRecordResp, error)
	ListDeviceRecord(ctx context.Context, in *ListDeviceRecordReq, opts ...grpc.CallOption) (*ListDeviceRecordResp, error)
	// provider
	CreateProvider(ctx context.Context, in *CreateProviderReq, opts ...grpc.CallOption) (*CreateProviderResp, error)
	GetProvider(ctx context.Context, in *GetProviderReq, opts ...grpc.CallOption) (*GetProviderResp, error)
	ListProvider(ctx context.Context, in *ListProviderReq, opts ...grpc.CallOption) (*ListProviderResp, error)
	UpdateProvider(ctx context.Context, in *UpdateProviderReq, opts ...grpc.CallOption) (*UpdateProviderResp, error)
	DeleteProvider(ctx context.Context, in *DeleteProviderReq, opts ...grpc.CallOption) (*DeleteProviderResp, error)
	QueryProviderOrder(ctx context.Context, in *QueryProviderOrderReq, opts ...grpc.CallOption) (*QueryProviderOrderResp, error)
	QueryProviderNetwork(ctx context.Context, in *QueryProviderNetworkReq, opts ...grpc.CallOption) (*QueryProviderNetworkResp, error)
	// obs
	QueryObsBill(ctx context.Context, in *QueryObsBillReq, opts ...grpc.CallOption) (*QueryObsBillResp, error)
	CreateObsCost(ctx context.Context, in *CreateObsCostReq, opts ...grpc.CallOption) (*CreateObsCostResp, error)
	// 资源池
	CreateResourcePool(ctx context.Context, in *CreateResourcePoolReq, opts ...grpc.CallOption) (*CreateResourcePoolResp, error)
	ListResourcePool(ctx context.Context, in *ListResourcePoolReq, opts ...grpc.CallOption) (*ListResourcePoolResp, error)
	ImportResource(ctx context.Context, in *ImportResourceReq, opts ...grpc.CallOption) (*ImportResourceResp, error)
	ListResource(ctx context.Context, in *ListResourceReq, opts ...grpc.CallOption) (*ListResourceResp, error)
	ListDeviceRecordByPool(ctx context.Context, in *ListDeviceRecordByPoolReq, opts ...grpc.CallOption) (*ListDeviceRecordResp, error)
	CreateDeviceRecordByPool(ctx context.Context, in *CreateDeviceRecordByPoolReq, opts ...grpc.CallOption) (*CreateDeviceRecordByPoolResp, error)
	//* device
	GetDevice(ctx context.Context, in *GetDeviceReq, opts ...grpc.CallOption) (*GetDeviceResp, error)
	ListDevices(ctx context.Context, in *ListDevicesReq, opts ...grpc.CallOption) (*ListDevicesResp, error)
	UpdateDevice(ctx context.Context, in *UpdateDeviceReq, opts ...grpc.CallOption) (*UpdateDeviceResp, error)
}

type resourceManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceManagerClient(cc grpc.ClientConnInterface) ResourceManagerClient {
	return &resourceManagerClient{cc}
}

func (c *resourceManagerClient) Available(ctx context.Context, in *AvailableReq, opts ...grpc.CallOption) (*AvailableResp, error) {
	out := new(AvailableResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/Available", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) CreateDeviceConsumer(ctx context.Context, in *CreateDeviceConsumerReq, opts ...grpc.CallOption) (*CreateDeviceConsumerResp, error) {
	out := new(CreateDeviceConsumerResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/CreateDeviceConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) GetDeviceConsumer(ctx context.Context, in *GetDeviceConsumerReq, opts ...grpc.CallOption) (*GetDeviceConsumerResp, error) {
	out := new(GetDeviceConsumerResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/GetDeviceConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ListDeviceConsumer(ctx context.Context, in *ListDeviceConsumerReq, opts ...grpc.CallOption) (*ListDeviceConsumerResp, error) {
	out := new(ListDeviceConsumerResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/ListDeviceConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) UpdateDeviceConsumer(ctx context.Context, in *UpdateDeviceConsumerReq, opts ...grpc.CallOption) (*UpdateDeviceConsumerResp, error) {
	out := new(UpdateDeviceConsumerResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/UpdateDeviceConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) DeleteDeviceConsumer(ctx context.Context, in *DeleteDeviceConsumerReq, opts ...grpc.CallOption) (*DeleteDeviceConsumerResp, error) {
	out := new(DeleteDeviceConsumerResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/DeleteDeviceConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ConsumeDevice(ctx context.Context, in *ConsumeDeviceReq, opts ...grpc.CallOption) (*ConsumeDeviceResp, error) {
	out := new(ConsumeDeviceResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/ConsumeDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ReturnDevice(ctx context.Context, in *ReturnDeviceReq, opts ...grpc.CallOption) (*ReturnDeviceResp, error) {
	out := new(ReturnDeviceResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/ReturnDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) CreateDevicePool(ctx context.Context, in *CreateDevicePoolReq, opts ...grpc.CallOption) (*CreateDevicePoolResp, error) {
	out := new(CreateDevicePoolResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/CreateDevicePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) GetDevicePool(ctx context.Context, in *GetDevicePoolReq, opts ...grpc.CallOption) (*GetDevicePoolResp, error) {
	out := new(GetDevicePoolResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/GetDevicePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ListDevicePool(ctx context.Context, in *ListDevicePoolReq, opts ...grpc.CallOption) (*ListDevicePoolResp, error) {
	out := new(ListDevicePoolResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/ListDevicePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) UpdateDevicePool(ctx context.Context, in *UpdateDevicePoolReq, opts ...grpc.CallOption) (*UpdateDevicePoolResp, error) {
	out := new(UpdateDevicePoolResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/UpdateDevicePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) DeleteDevicePool(ctx context.Context, in *DeleteDevicePoolReq, opts ...grpc.CallOption) (*DeleteDevicePoolResp, error) {
	out := new(DeleteDevicePoolResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/DeleteDevicePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ImportDeviceToDevicePool(ctx context.Context, in *ImportDeviceToDevicePoolReq, opts ...grpc.CallOption) (*ImportDeviceToDevicePoolResp, error) {
	out := new(ImportDeviceToDevicePoolResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/ImportDeviceToDevicePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ListDeviceBill(ctx context.Context, in *ListDeviceBillReq, opts ...grpc.CallOption) (*ListDeviceBillResp, error) {
	out := new(ListDeviceBillResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/ListDeviceBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) GetDeviceRecord(ctx context.Context, in *GetDeviceRecordReq, opts ...grpc.CallOption) (*GetDeviceRecordResp, error) {
	out := new(GetDeviceRecordResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/GetDeviceRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ListDeviceRecord(ctx context.Context, in *ListDeviceRecordReq, opts ...grpc.CallOption) (*ListDeviceRecordResp, error) {
	out := new(ListDeviceRecordResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/ListDeviceRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) CreateProvider(ctx context.Context, in *CreateProviderReq, opts ...grpc.CallOption) (*CreateProviderResp, error) {
	out := new(CreateProviderResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/CreateProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) GetProvider(ctx context.Context, in *GetProviderReq, opts ...grpc.CallOption) (*GetProviderResp, error) {
	out := new(GetProviderResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/GetProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ListProvider(ctx context.Context, in *ListProviderReq, opts ...grpc.CallOption) (*ListProviderResp, error) {
	out := new(ListProviderResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/ListProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) UpdateProvider(ctx context.Context, in *UpdateProviderReq, opts ...grpc.CallOption) (*UpdateProviderResp, error) {
	out := new(UpdateProviderResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/UpdateProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) DeleteProvider(ctx context.Context, in *DeleteProviderReq, opts ...grpc.CallOption) (*DeleteProviderResp, error) {
	out := new(DeleteProviderResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/DeleteProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) QueryProviderOrder(ctx context.Context, in *QueryProviderOrderReq, opts ...grpc.CallOption) (*QueryProviderOrderResp, error) {
	out := new(QueryProviderOrderResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/QueryProviderOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) QueryProviderNetwork(ctx context.Context, in *QueryProviderNetworkReq, opts ...grpc.CallOption) (*QueryProviderNetworkResp, error) {
	out := new(QueryProviderNetworkResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/QueryProviderNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) QueryObsBill(ctx context.Context, in *QueryObsBillReq, opts ...grpc.CallOption) (*QueryObsBillResp, error) {
	out := new(QueryObsBillResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/QueryObsBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) CreateObsCost(ctx context.Context, in *CreateObsCostReq, opts ...grpc.CallOption) (*CreateObsCostResp, error) {
	out := new(CreateObsCostResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/CreateObsCost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) CreateResourcePool(ctx context.Context, in *CreateResourcePoolReq, opts ...grpc.CallOption) (*CreateResourcePoolResp, error) {
	out := new(CreateResourcePoolResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/CreateResourcePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ListResourcePool(ctx context.Context, in *ListResourcePoolReq, opts ...grpc.CallOption) (*ListResourcePoolResp, error) {
	out := new(ListResourcePoolResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/ListResourcePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ImportResource(ctx context.Context, in *ImportResourceReq, opts ...grpc.CallOption) (*ImportResourceResp, error) {
	out := new(ImportResourceResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/ImportResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ListResource(ctx context.Context, in *ListResourceReq, opts ...grpc.CallOption) (*ListResourceResp, error) {
	out := new(ListResourceResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/ListResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ListDeviceRecordByPool(ctx context.Context, in *ListDeviceRecordByPoolReq, opts ...grpc.CallOption) (*ListDeviceRecordResp, error) {
	out := new(ListDeviceRecordResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/ListDeviceRecordByPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) CreateDeviceRecordByPool(ctx context.Context, in *CreateDeviceRecordByPoolReq, opts ...grpc.CallOption) (*CreateDeviceRecordByPoolResp, error) {
	out := new(CreateDeviceRecordByPoolResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/CreateDeviceRecordByPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) GetDevice(ctx context.Context, in *GetDeviceReq, opts ...grpc.CallOption) (*GetDeviceResp, error) {
	out := new(GetDeviceResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/GetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ListDevices(ctx context.Context, in *ListDevicesReq, opts ...grpc.CallOption) (*ListDevicesResp, error) {
	out := new(ListDevicesResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/ListDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) UpdateDevice(ctx context.Context, in *UpdateDeviceReq, opts ...grpc.CallOption) (*UpdateDeviceResp, error) {
	out := new(UpdateDeviceResp)
	err := c.cc.Invoke(ctx, "/resourcemanager.ResourceManager/UpdateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceManagerServer is the server API for ResourceManager service.
// All implementations must embed UnimplementedResourceManagerServer
// for forward compatibility
type ResourceManagerServer interface {
	//* common service
	Available(context.Context, *AvailableReq) (*AvailableResp, error)
	//* resource service
	//* device consumer
	CreateDeviceConsumer(context.Context, *CreateDeviceConsumerReq) (*CreateDeviceConsumerResp, error)
	GetDeviceConsumer(context.Context, *GetDeviceConsumerReq) (*GetDeviceConsumerResp, error)
	ListDeviceConsumer(context.Context, *ListDeviceConsumerReq) (*ListDeviceConsumerResp, error)
	UpdateDeviceConsumer(context.Context, *UpdateDeviceConsumerReq) (*UpdateDeviceConsumerResp, error)
	DeleteDeviceConsumer(context.Context, *DeleteDeviceConsumerReq) (*DeleteDeviceConsumerResp, error)
	ConsumeDevice(context.Context, *ConsumeDeviceReq) (*ConsumeDeviceResp, error)
	ReturnDevice(context.Context, *ReturnDeviceReq) (*ReturnDeviceResp, error)
	//* device pool
	CreateDevicePool(context.Context, *CreateDevicePoolReq) (*CreateDevicePoolResp, error)
	GetDevicePool(context.Context, *GetDevicePoolReq) (*GetDevicePoolResp, error)
	ListDevicePool(context.Context, *ListDevicePoolReq) (*ListDevicePoolResp, error)
	UpdateDevicePool(context.Context, *UpdateDevicePoolReq) (*UpdateDevicePoolResp, error)
	DeleteDevicePool(context.Context, *DeleteDevicePoolReq) (*DeleteDevicePoolResp, error)
	ImportDeviceToDevicePool(context.Context, *ImportDeviceToDevicePoolReq) (*ImportDeviceToDevicePoolResp, error)
	// device bill
	ListDeviceBill(context.Context, *ListDeviceBillReq) (*ListDeviceBillResp, error)
	// device record
	GetDeviceRecord(context.Context, *GetDeviceRecordReq) (*GetDeviceRecordResp, error)
	ListDeviceRecord(context.Context, *ListDeviceRecordReq) (*ListDeviceRecordResp, error)
	// provider
	CreateProvider(context.Context, *CreateProviderReq) (*CreateProviderResp, error)
	GetProvider(context.Context, *GetProviderReq) (*GetProviderResp, error)
	ListProvider(context.Context, *ListProviderReq) (*ListProviderResp, error)
	UpdateProvider(context.Context, *UpdateProviderReq) (*UpdateProviderResp, error)
	DeleteProvider(context.Context, *DeleteProviderReq) (*DeleteProviderResp, error)
	QueryProviderOrder(context.Context, *QueryProviderOrderReq) (*QueryProviderOrderResp, error)
	QueryProviderNetwork(context.Context, *QueryProviderNetworkReq) (*QueryProviderNetworkResp, error)
	// obs
	QueryObsBill(context.Context, *QueryObsBillReq) (*QueryObsBillResp, error)
	CreateObsCost(context.Context, *CreateObsCostReq) (*CreateObsCostResp, error)
	// 资源池
	CreateResourcePool(context.Context, *CreateResourcePoolReq) (*CreateResourcePoolResp, error)
	ListResourcePool(context.Context, *ListResourcePoolReq) (*ListResourcePoolResp, error)
	ImportResource(context.Context, *ImportResourceReq) (*ImportResourceResp, error)
	ListResource(context.Context, *ListResourceReq) (*ListResourceResp, error)
	ListDeviceRecordByPool(context.Context, *ListDeviceRecordByPoolReq) (*ListDeviceRecordResp, error)
	CreateDeviceRecordByPool(context.Context, *CreateDeviceRecordByPoolReq) (*CreateDeviceRecordByPoolResp, error)
	//* device
	GetDevice(context.Context, *GetDeviceReq) (*GetDeviceResp, error)
	ListDevices(context.Context, *ListDevicesReq) (*ListDevicesResp, error)
	UpdateDevice(context.Context, *UpdateDeviceReq) (*UpdateDeviceResp, error)
	mustEmbedUnimplementedResourceManagerServer()
}

// UnimplementedResourceManagerServer must be embedded to have forward compatible implementations.
type UnimplementedResourceManagerServer struct {
}

func (UnimplementedResourceManagerServer) Available(context.Context, *AvailableReq) (*AvailableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Available not implemented")
}
func (UnimplementedResourceManagerServer) CreateDeviceConsumer(context.Context, *CreateDeviceConsumerReq) (*CreateDeviceConsumerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceConsumer not implemented")
}
func (UnimplementedResourceManagerServer) GetDeviceConsumer(context.Context, *GetDeviceConsumerReq) (*GetDeviceConsumerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceConsumer not implemented")
}
func (UnimplementedResourceManagerServer) ListDeviceConsumer(context.Context, *ListDeviceConsumerReq) (*ListDeviceConsumerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceConsumer not implemented")
}
func (UnimplementedResourceManagerServer) UpdateDeviceConsumer(context.Context, *UpdateDeviceConsumerReq) (*UpdateDeviceConsumerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceConsumer not implemented")
}
func (UnimplementedResourceManagerServer) DeleteDeviceConsumer(context.Context, *DeleteDeviceConsumerReq) (*DeleteDeviceConsumerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceConsumer not implemented")
}
func (UnimplementedResourceManagerServer) ConsumeDevice(context.Context, *ConsumeDeviceReq) (*ConsumeDeviceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumeDevice not implemented")
}
func (UnimplementedResourceManagerServer) ReturnDevice(context.Context, *ReturnDeviceReq) (*ReturnDeviceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnDevice not implemented")
}
func (UnimplementedResourceManagerServer) CreateDevicePool(context.Context, *CreateDevicePoolReq) (*CreateDevicePoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevicePool not implemented")
}
func (UnimplementedResourceManagerServer) GetDevicePool(context.Context, *GetDevicePoolReq) (*GetDevicePoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevicePool not implemented")
}
func (UnimplementedResourceManagerServer) ListDevicePool(context.Context, *ListDevicePoolReq) (*ListDevicePoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevicePool not implemented")
}
func (UnimplementedResourceManagerServer) UpdateDevicePool(context.Context, *UpdateDevicePoolReq) (*UpdateDevicePoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevicePool not implemented")
}
func (UnimplementedResourceManagerServer) DeleteDevicePool(context.Context, *DeleteDevicePoolReq) (*DeleteDevicePoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevicePool not implemented")
}
func (UnimplementedResourceManagerServer) ImportDeviceToDevicePool(context.Context, *ImportDeviceToDevicePoolReq) (*ImportDeviceToDevicePoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportDeviceToDevicePool not implemented")
}
func (UnimplementedResourceManagerServer) ListDeviceBill(context.Context, *ListDeviceBillReq) (*ListDeviceBillResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceBill not implemented")
}
func (UnimplementedResourceManagerServer) GetDeviceRecord(context.Context, *GetDeviceRecordReq) (*GetDeviceRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceRecord not implemented")
}
func (UnimplementedResourceManagerServer) ListDeviceRecord(context.Context, *ListDeviceRecordReq) (*ListDeviceRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceRecord not implemented")
}
func (UnimplementedResourceManagerServer) CreateProvider(context.Context, *CreateProviderReq) (*CreateProviderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProvider not implemented")
}
func (UnimplementedResourceManagerServer) GetProvider(context.Context, *GetProviderReq) (*GetProviderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProvider not implemented")
}
func (UnimplementedResourceManagerServer) ListProvider(context.Context, *ListProviderReq) (*ListProviderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProvider not implemented")
}
func (UnimplementedResourceManagerServer) UpdateProvider(context.Context, *UpdateProviderReq) (*UpdateProviderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProvider not implemented")
}
func (UnimplementedResourceManagerServer) DeleteProvider(context.Context, *DeleteProviderReq) (*DeleteProviderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProvider not implemented")
}
func (UnimplementedResourceManagerServer) QueryProviderOrder(context.Context, *QueryProviderOrderReq) (*QueryProviderOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProviderOrder not implemented")
}
func (UnimplementedResourceManagerServer) QueryProviderNetwork(context.Context, *QueryProviderNetworkReq) (*QueryProviderNetworkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProviderNetwork not implemented")
}
func (UnimplementedResourceManagerServer) QueryObsBill(context.Context, *QueryObsBillReq) (*QueryObsBillResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryObsBill not implemented")
}
func (UnimplementedResourceManagerServer) CreateObsCost(context.Context, *CreateObsCostReq) (*CreateObsCostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObsCost not implemented")
}
func (UnimplementedResourceManagerServer) CreateResourcePool(context.Context, *CreateResourcePoolReq) (*CreateResourcePoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourcePool not implemented")
}
func (UnimplementedResourceManagerServer) ListResourcePool(context.Context, *ListResourcePoolReq) (*ListResourcePoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourcePool not implemented")
}
func (UnimplementedResourceManagerServer) ImportResource(context.Context, *ImportResourceReq) (*ImportResourceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportResource not implemented")
}
func (UnimplementedResourceManagerServer) ListResource(context.Context, *ListResourceReq) (*ListResourceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResource not implemented")
}
func (UnimplementedResourceManagerServer) ListDeviceRecordByPool(context.Context, *ListDeviceRecordByPoolReq) (*ListDeviceRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceRecordByPool not implemented")
}
func (UnimplementedResourceManagerServer) CreateDeviceRecordByPool(context.Context, *CreateDeviceRecordByPoolReq) (*CreateDeviceRecordByPoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceRecordByPool not implemented")
}
func (UnimplementedResourceManagerServer) GetDevice(context.Context, *GetDeviceReq) (*GetDeviceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedResourceManagerServer) ListDevices(context.Context, *ListDevicesReq) (*ListDevicesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedResourceManagerServer) UpdateDevice(context.Context, *UpdateDeviceReq) (*UpdateDeviceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedResourceManagerServer) mustEmbedUnimplementedResourceManagerServer() {}

// UnsafeResourceManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceManagerServer will
// result in compilation errors.
type UnsafeResourceManagerServer interface {
	mustEmbedUnimplementedResourceManagerServer()
}

func RegisterResourceManagerServer(s grpc.ServiceRegistrar, srv ResourceManagerServer) {
	s.RegisterService(&ResourceManager_ServiceDesc, srv)
}

func _ResourceManager_Available_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).Available(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/Available",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).Available(ctx, req.(*AvailableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_CreateDeviceConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceConsumerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).CreateDeviceConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/CreateDeviceConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).CreateDeviceConsumer(ctx, req.(*CreateDeviceConsumerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_GetDeviceConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceConsumerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).GetDeviceConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/GetDeviceConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).GetDeviceConsumer(ctx, req.(*GetDeviceConsumerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ListDeviceConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeviceConsumerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ListDeviceConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/ListDeviceConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ListDeviceConsumer(ctx, req.(*ListDeviceConsumerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_UpdateDeviceConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceConsumerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).UpdateDeviceConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/UpdateDeviceConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).UpdateDeviceConsumer(ctx, req.(*UpdateDeviceConsumerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_DeleteDeviceConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceConsumerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).DeleteDeviceConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/DeleteDeviceConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).DeleteDeviceConsumer(ctx, req.(*DeleteDeviceConsumerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ConsumeDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ConsumeDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/ConsumeDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ConsumeDevice(ctx, req.(*ConsumeDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ReturnDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ReturnDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/ReturnDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ReturnDevice(ctx, req.(*ReturnDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_CreateDevicePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDevicePoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).CreateDevicePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/CreateDevicePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).CreateDevicePool(ctx, req.(*CreateDevicePoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_GetDevicePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicePoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).GetDevicePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/GetDevicePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).GetDevicePool(ctx, req.(*GetDevicePoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ListDevicePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicePoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ListDevicePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/ListDevicePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ListDevicePool(ctx, req.(*ListDevicePoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_UpdateDevicePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDevicePoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).UpdateDevicePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/UpdateDevicePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).UpdateDevicePool(ctx, req.(*UpdateDevicePoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_DeleteDevicePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDevicePoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).DeleteDevicePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/DeleteDevicePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).DeleteDevicePool(ctx, req.(*DeleteDevicePoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ImportDeviceToDevicePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportDeviceToDevicePoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ImportDeviceToDevicePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/ImportDeviceToDevicePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ImportDeviceToDevicePool(ctx, req.(*ImportDeviceToDevicePoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ListDeviceBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeviceBillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ListDeviceBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/ListDeviceBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ListDeviceBill(ctx, req.(*ListDeviceBillReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_GetDeviceRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).GetDeviceRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/GetDeviceRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).GetDeviceRecord(ctx, req.(*GetDeviceRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ListDeviceRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeviceRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ListDeviceRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/ListDeviceRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ListDeviceRecord(ctx, req.(*ListDeviceRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_CreateProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProviderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).CreateProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/CreateProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).CreateProvider(ctx, req.(*CreateProviderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_GetProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).GetProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/GetProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).GetProvider(ctx, req.(*GetProviderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ListProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProviderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ListProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/ListProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ListProvider(ctx, req.(*ListProviderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_UpdateProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProviderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).UpdateProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/UpdateProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).UpdateProvider(ctx, req.(*UpdateProviderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_DeleteProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProviderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).DeleteProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/DeleteProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).DeleteProvider(ctx, req.(*DeleteProviderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_QueryProviderOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProviderOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).QueryProviderOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/QueryProviderOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).QueryProviderOrder(ctx, req.(*QueryProviderOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_QueryProviderNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProviderNetworkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).QueryProviderNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/QueryProviderNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).QueryProviderNetwork(ctx, req.(*QueryProviderNetworkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_QueryObsBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryObsBillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).QueryObsBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/QueryObsBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).QueryObsBill(ctx, req.(*QueryObsBillReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_CreateObsCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObsCostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).CreateObsCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/CreateObsCost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).CreateObsCost(ctx, req.(*CreateObsCostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_CreateResourcePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourcePoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).CreateResourcePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/CreateResourcePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).CreateResourcePool(ctx, req.(*CreateResourcePoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ListResourcePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcePoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ListResourcePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/ListResourcePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ListResourcePool(ctx, req.(*ListResourcePoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ImportResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ImportResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/ImportResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ImportResource(ctx, req.(*ImportResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ListResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ListResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/ListResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ListResource(ctx, req.(*ListResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ListDeviceRecordByPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeviceRecordByPoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ListDeviceRecordByPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/ListDeviceRecordByPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ListDeviceRecordByPool(ctx, req.(*ListDeviceRecordByPoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_CreateDeviceRecordByPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRecordByPoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).CreateDeviceRecordByPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/CreateDeviceRecordByPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).CreateDeviceRecordByPool(ctx, req.(*CreateDeviceRecordByPoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).GetDevice(ctx, req.(*GetDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ListDevices(ctx, req.(*ListDevicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanager.ResourceManager/UpdateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).UpdateDevice(ctx, req.(*UpdateDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceManager_ServiceDesc is the grpc.ServiceDesc for ResourceManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resourcemanager.ResourceManager",
	HandlerType: (*ResourceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Available",
			Handler:    _ResourceManager_Available_Handler,
		},
		{
			MethodName: "CreateDeviceConsumer",
			Handler:    _ResourceManager_CreateDeviceConsumer_Handler,
		},
		{
			MethodName: "GetDeviceConsumer",
			Handler:    _ResourceManager_GetDeviceConsumer_Handler,
		},
		{
			MethodName: "ListDeviceConsumer",
			Handler:    _ResourceManager_ListDeviceConsumer_Handler,
		},
		{
			MethodName: "UpdateDeviceConsumer",
			Handler:    _ResourceManager_UpdateDeviceConsumer_Handler,
		},
		{
			MethodName: "DeleteDeviceConsumer",
			Handler:    _ResourceManager_DeleteDeviceConsumer_Handler,
		},
		{
			MethodName: "ConsumeDevice",
			Handler:    _ResourceManager_ConsumeDevice_Handler,
		},
		{
			MethodName: "ReturnDevice",
			Handler:    _ResourceManager_ReturnDevice_Handler,
		},
		{
			MethodName: "CreateDevicePool",
			Handler:    _ResourceManager_CreateDevicePool_Handler,
		},
		{
			MethodName: "GetDevicePool",
			Handler:    _ResourceManager_GetDevicePool_Handler,
		},
		{
			MethodName: "ListDevicePool",
			Handler:    _ResourceManager_ListDevicePool_Handler,
		},
		{
			MethodName: "UpdateDevicePool",
			Handler:    _ResourceManager_UpdateDevicePool_Handler,
		},
		{
			MethodName: "DeleteDevicePool",
			Handler:    _ResourceManager_DeleteDevicePool_Handler,
		},
		{
			MethodName: "ImportDeviceToDevicePool",
			Handler:    _ResourceManager_ImportDeviceToDevicePool_Handler,
		},
		{
			MethodName: "ListDeviceBill",
			Handler:    _ResourceManager_ListDeviceBill_Handler,
		},
		{
			MethodName: "GetDeviceRecord",
			Handler:    _ResourceManager_GetDeviceRecord_Handler,
		},
		{
			MethodName: "ListDeviceRecord",
			Handler:    _ResourceManager_ListDeviceRecord_Handler,
		},
		{
			MethodName: "CreateProvider",
			Handler:    _ResourceManager_CreateProvider_Handler,
		},
		{
			MethodName: "GetProvider",
			Handler:    _ResourceManager_GetProvider_Handler,
		},
		{
			MethodName: "ListProvider",
			Handler:    _ResourceManager_ListProvider_Handler,
		},
		{
			MethodName: "UpdateProvider",
			Handler:    _ResourceManager_UpdateProvider_Handler,
		},
		{
			MethodName: "DeleteProvider",
			Handler:    _ResourceManager_DeleteProvider_Handler,
		},
		{
			MethodName: "QueryProviderOrder",
			Handler:    _ResourceManager_QueryProviderOrder_Handler,
		},
		{
			MethodName: "QueryProviderNetwork",
			Handler:    _ResourceManager_QueryProviderNetwork_Handler,
		},
		{
			MethodName: "QueryObsBill",
			Handler:    _ResourceManager_QueryObsBill_Handler,
		},
		{
			MethodName: "CreateObsCost",
			Handler:    _ResourceManager_CreateObsCost_Handler,
		},
		{
			MethodName: "CreateResourcePool",
			Handler:    _ResourceManager_CreateResourcePool_Handler,
		},
		{
			MethodName: "ListResourcePool",
			Handler:    _ResourceManager_ListResourcePool_Handler,
		},
		{
			MethodName: "ImportResource",
			Handler:    _ResourceManager_ImportResource_Handler,
		},
		{
			MethodName: "ListResource",
			Handler:    _ResourceManager_ListResource_Handler,
		},
		{
			MethodName: "ListDeviceRecordByPool",
			Handler:    _ResourceManager_ListDeviceRecordByPool_Handler,
		},
		{
			MethodName: "CreateDeviceRecordByPool",
			Handler:    _ResourceManager_CreateDeviceRecordByPool_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _ResourceManager_GetDevice_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _ResourceManager_ListDevices_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _ResourceManager_UpdateDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bcs-resource-manager.proto",
}
