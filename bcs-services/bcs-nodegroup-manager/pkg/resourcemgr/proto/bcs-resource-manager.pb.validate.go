// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bcs-resource-manager.proto

package resourcemanager

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AvailableReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AvailableReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AvailableReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AvailableReqMultiError, or
// nil if none found.
func (m *AvailableReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AvailableReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AvailableReqMultiError(errors)
	}
	return nil
}

// AvailableReqMultiError is an error wrapping multiple validation errors
// returned by AvailableReq.ValidateAll() if the designated constraints aren't met.
type AvailableReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AvailableReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AvailableReqMultiError) AllErrors() []error { return m }

// AvailableReqValidationError is the validation error returned by
// AvailableReq.Validate if the designated constraints aren't met.
type AvailableReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AvailableReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AvailableReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AvailableReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AvailableReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AvailableReqValidationError) ErrorName() string { return "AvailableReqValidationError" }

// Error satisfies the builtin error interface
func (e AvailableReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAvailableReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AvailableReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AvailableReqValidationError{}

// Validate checks the field values on AvailableResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AvailableResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AvailableResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AvailableRespMultiError, or
// nil if none found.
func (m *AvailableResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AvailableResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if len(errors) > 0 {
		return AvailableRespMultiError(errors)
	}
	return nil
}

// AvailableRespMultiError is an error wrapping multiple validation errors
// returned by AvailableResp.ValidateAll() if the designated constraints
// aren't met.
type AvailableRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AvailableRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AvailableRespMultiError) AllErrors() []error { return m }

// AvailableRespValidationError is the validation error returned by
// AvailableResp.Validate if the designated constraints aren't met.
type AvailableRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AvailableRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AvailableRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AvailableRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AvailableRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AvailableRespValidationError) ErrorName() string { return "AvailableRespValidationError" }

// Error satisfies the builtin error interface
func (e AvailableRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAvailableResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AvailableRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AvailableRespValidationError{}

// Validate checks the field values on CreateObsCostReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateObsCostReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateObsCostReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateObsCostReqMultiError, or nil if none found.
func (m *CreateObsCostReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateObsCostReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SpecName

	// no validation rules for TypeName

	// no validation rules for Type

	// no validation rules for Unit

	// no validation rules for UnitPrice

	// no validation rules for Region

	if len(errors) > 0 {
		return CreateObsCostReqMultiError(errors)
	}
	return nil
}

// CreateObsCostReqMultiError is an error wrapping multiple validation errors
// returned by CreateObsCostReq.ValidateAll() if the designated constraints
// aren't met.
type CreateObsCostReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateObsCostReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateObsCostReqMultiError) AllErrors() []error { return m }

// CreateObsCostReqValidationError is the validation error returned by
// CreateObsCostReq.Validate if the designated constraints aren't met.
type CreateObsCostReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateObsCostReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateObsCostReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateObsCostReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateObsCostReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateObsCostReqValidationError) ErrorName() string { return "CreateObsCostReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateObsCostReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateObsCostReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateObsCostReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateObsCostReqValidationError{}

// Validate checks the field values on CreateObsCostResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateObsCostResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateObsCostResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateObsCostRespMultiError, or nil if none found.
func (m *CreateObsCostResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateObsCostResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateObsCostRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateObsCostRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateObsCostRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateObsCostRespMultiError(errors)
	}
	return nil
}

// CreateObsCostRespMultiError is an error wrapping multiple validation errors
// returned by CreateObsCostResp.ValidateAll() if the designated constraints
// aren't met.
type CreateObsCostRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateObsCostRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateObsCostRespMultiError) AllErrors() []error { return m }

// CreateObsCostRespValidationError is the validation error returned by
// CreateObsCostResp.Validate if the designated constraints aren't met.
type CreateObsCostRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateObsCostRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateObsCostRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateObsCostRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateObsCostRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateObsCostRespValidationError) ErrorName() string {
	return "CreateObsCostRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateObsCostRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateObsCostResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateObsCostRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateObsCostRespValidationError{}

// Validate checks the field values on ObsCost with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ObsCost) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObsCost with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ObsCostMultiError, or nil if none found.
func (m *ObsCost) ValidateAll() error {
	return m.validate(true)
}

func (m *ObsCost) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SpecName

	// no validation rules for TypeName

	// no validation rules for Type

	// no validation rules for Unit

	// no validation rules for UnitPrice

	// no validation rules for Region

	if len(errors) > 0 {
		return ObsCostMultiError(errors)
	}
	return nil
}

// ObsCostMultiError is an error wrapping multiple validation errors returned
// by ObsCost.ValidateAll() if the designated constraints aren't met.
type ObsCostMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObsCostMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObsCostMultiError) AllErrors() []error { return m }

// ObsCostValidationError is the validation error returned by ObsCost.Validate
// if the designated constraints aren't met.
type ObsCostValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObsCostValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObsCostValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObsCostValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObsCostValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObsCostValidationError) ErrorName() string { return "ObsCostValidationError" }

// Error satisfies the builtin error interface
func (e ObsCostValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObsCost.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObsCostValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObsCostValidationError{}

// Validate checks the field values on QueryObsBillReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryObsBillReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryObsBillReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryObsBillReqMultiError, or nil if none found.
func (m *QueryObsBillReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryObsBillReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Year

	if val := m.GetMonth(); val < 1 || val > 12 {
		err := QueryObsBillReqValidationError{
			field:  "Month",
			reason: "value must be inside range [1, 12]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for LeftTime

	// no validation rules for RightTime

	if len(errors) > 0 {
		return QueryObsBillReqMultiError(errors)
	}
	return nil
}

// QueryObsBillReqMultiError is an error wrapping multiple validation errors
// returned by QueryObsBillReq.ValidateAll() if the designated constraints
// aren't met.
type QueryObsBillReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryObsBillReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryObsBillReqMultiError) AllErrors() []error { return m }

// QueryObsBillReqValidationError is the validation error returned by
// QueryObsBillReq.Validate if the designated constraints aren't met.
type QueryObsBillReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryObsBillReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryObsBillReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryObsBillReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryObsBillReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryObsBillReqValidationError) ErrorName() string { return "QueryObsBillReqValidationError" }

// Error satisfies the builtin error interface
func (e QueryObsBillReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryObsBillReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryObsBillReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryObsBillReqValidationError{}

// Validate checks the field values on QueryObsBillResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryObsBillResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryObsBillResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryObsBillRespMultiError, or nil if none found.
func (m *QueryObsBillResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryObsBillResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryObsBillRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryObsBillRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryObsBillRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryObsBillRespMultiError(errors)
	}
	return nil
}

// QueryObsBillRespMultiError is an error wrapping multiple validation errors
// returned by QueryObsBillResp.ValidateAll() if the designated constraints
// aren't met.
type QueryObsBillRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryObsBillRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryObsBillRespMultiError) AllErrors() []error { return m }

// QueryObsBillRespValidationError is the validation error returned by
// QueryObsBillResp.Validate if the designated constraints aren't met.
type QueryObsBillRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryObsBillRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryObsBillRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryObsBillRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryObsBillRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryObsBillRespValidationError) ErrorName() string { return "QueryObsBillRespValidationError" }

// Error satisfies the builtin error interface
func (e QueryObsBillRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryObsBillResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryObsBillRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryObsBillRespValidationError{}

// Validate checks the field values on ObsBill with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ObsBill) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObsBill with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ObsBillMultiError, or nil if none found.
func (m *ObsBill) ValidateAll() error {
	return m.validate(true)
}

func (m *ObsBill) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Year

	// no validation rules for Month

	// no validation rules for LeftTime

	// no validation rules for RightTime

	// no validation rules for ProductionID

	// no validation rules for ProductionName

	// no validation rules for ResourceType

	// no validation rules for ResourceSpec

	// no validation rules for ResourceUnit

	// no validation rules for ResourceAmount

	// no validation rules for ResourceUnitPrice

	// no validation rules for TotalPrice

	// no validation rules for ConsumerProductionID

	// no validation rules for ConsumerProductionName

	if len(errors) > 0 {
		return ObsBillMultiError(errors)
	}
	return nil
}

// ObsBillMultiError is an error wrapping multiple validation errors returned
// by ObsBill.ValidateAll() if the designated constraints aren't met.
type ObsBillMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObsBillMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObsBillMultiError) AllErrors() []error { return m }

// ObsBillValidationError is the validation error returned by ObsBill.Validate
// if the designated constraints aren't met.
type ObsBillValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObsBillValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObsBillValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObsBillValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObsBillValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObsBillValidationError) ErrorName() string { return "ObsBillValidationError" }

// Error satisfies the builtin error interface
func (e ObsBillValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObsBill.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObsBillValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObsBillValidationError{}

// Validate checks the field values on CreateDeviceConsumerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDeviceConsumerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeviceConsumerReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeviceConsumerReqMultiError, or nil if none found.
func (m *CreateDeviceConsumerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeviceConsumerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 64 {
		err := CreateDeviceConsumerReqValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Provider

	// no validation rules for ClusterID

	// no validation rules for Labels

	// no validation rules for Operator

	for idx, item := range m.GetQuotas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDeviceConsumerReqValidationError{
						field:  fmt.Sprintf("Quotas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDeviceConsumerReqValidationError{
						field:  fmt.Sprintf("Quotas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDeviceConsumerReqValidationError{
					field:  fmt.Sprintf("Quotas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateDeviceConsumerReqMultiError(errors)
	}
	return nil
}

// CreateDeviceConsumerReqMultiError is an error wrapping multiple validation
// errors returned by CreateDeviceConsumerReq.ValidateAll() if the designated
// constraints aren't met.
type CreateDeviceConsumerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeviceConsumerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeviceConsumerReqMultiError) AllErrors() []error { return m }

// CreateDeviceConsumerReqValidationError is the validation error returned by
// CreateDeviceConsumerReq.Validate if the designated constraints aren't met.
type CreateDeviceConsumerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeviceConsumerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeviceConsumerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeviceConsumerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeviceConsumerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeviceConsumerReqValidationError) ErrorName() string {
	return "CreateDeviceConsumerReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeviceConsumerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeviceConsumerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeviceConsumerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeviceConsumerReqValidationError{}

// Validate checks the field values on CreateDeviceConsumerResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDeviceConsumerResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeviceConsumerResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeviceConsumerRespMultiError, or nil if none found.
func (m *CreateDeviceConsumerResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeviceConsumerResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDeviceConsumerRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDeviceConsumerRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDeviceConsumerRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDeviceConsumerRespMultiError(errors)
	}
	return nil
}

// CreateDeviceConsumerRespMultiError is an error wrapping multiple validation
// errors returned by CreateDeviceConsumerResp.ValidateAll() if the designated
// constraints aren't met.
type CreateDeviceConsumerRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeviceConsumerRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeviceConsumerRespMultiError) AllErrors() []error { return m }

// CreateDeviceConsumerRespValidationError is the validation error returned by
// CreateDeviceConsumerResp.Validate if the designated constraints aren't met.
type CreateDeviceConsumerRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeviceConsumerRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeviceConsumerRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeviceConsumerRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeviceConsumerRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeviceConsumerRespValidationError) ErrorName() string {
	return "CreateDeviceConsumerRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeviceConsumerRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeviceConsumerResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeviceConsumerRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeviceConsumerRespValidationError{}

// Validate checks the field values on GetDeviceConsumerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeviceConsumerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeviceConsumerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeviceConsumerReqMultiError, or nil if none found.
func (m *GetDeviceConsumerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeviceConsumerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetDeviceConsumerID()); l < 2 || l > 30 {
		err := GetDeviceConsumerReqValidationError{
			field:  "DeviceConsumerID",
			reason: "value length must be between 2 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetDeviceConsumerReq_DeviceConsumerID_Pattern.MatchString(m.GetDeviceConsumerID()) {
		err := GetDeviceConsumerReqValidationError{
			field:  "DeviceConsumerID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDeviceConsumerReqMultiError(errors)
	}
	return nil
}

// GetDeviceConsumerReqMultiError is an error wrapping multiple validation
// errors returned by GetDeviceConsumerReq.ValidateAll() if the designated
// constraints aren't met.
type GetDeviceConsumerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeviceConsumerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeviceConsumerReqMultiError) AllErrors() []error { return m }

// GetDeviceConsumerReqValidationError is the validation error returned by
// GetDeviceConsumerReq.Validate if the designated constraints aren't met.
type GetDeviceConsumerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeviceConsumerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeviceConsumerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeviceConsumerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeviceConsumerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeviceConsumerReqValidationError) ErrorName() string {
	return "GetDeviceConsumerReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeviceConsumerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeviceConsumerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeviceConsumerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeviceConsumerReqValidationError{}

var _GetDeviceConsumerReq_DeviceConsumerID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on GetDeviceConsumerResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeviceConsumerResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeviceConsumerResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeviceConsumerRespMultiError, or nil if none found.
func (m *GetDeviceConsumerResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeviceConsumerResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDeviceConsumerRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDeviceConsumerRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDeviceConsumerRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDeviceConsumerRespMultiError(errors)
	}
	return nil
}

// GetDeviceConsumerRespMultiError is an error wrapping multiple validation
// errors returned by GetDeviceConsumerResp.ValidateAll() if the designated
// constraints aren't met.
type GetDeviceConsumerRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeviceConsumerRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeviceConsumerRespMultiError) AllErrors() []error { return m }

// GetDeviceConsumerRespValidationError is the validation error returned by
// GetDeviceConsumerResp.Validate if the designated constraints aren't met.
type GetDeviceConsumerRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeviceConsumerRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeviceConsumerRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeviceConsumerRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeviceConsumerRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeviceConsumerRespValidationError) ErrorName() string {
	return "GetDeviceConsumerRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeviceConsumerRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeviceConsumerResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeviceConsumerRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeviceConsumerRespValidationError{}

// Validate checks the field values on ListDeviceConsumerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeviceConsumerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeviceConsumerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeviceConsumerReqMultiError, or nil if none found.
func (m *ListDeviceConsumerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeviceConsumerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sort

	// no validation rules for Desc

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return ListDeviceConsumerReqMultiError(errors)
	}
	return nil
}

// ListDeviceConsumerReqMultiError is an error wrapping multiple validation
// errors returned by ListDeviceConsumerReq.ValidateAll() if the designated
// constraints aren't met.
type ListDeviceConsumerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeviceConsumerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeviceConsumerReqMultiError) AllErrors() []error { return m }

// ListDeviceConsumerReqValidationError is the validation error returned by
// ListDeviceConsumerReq.Validate if the designated constraints aren't met.
type ListDeviceConsumerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeviceConsumerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeviceConsumerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeviceConsumerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeviceConsumerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeviceConsumerReqValidationError) ErrorName() string {
	return "ListDeviceConsumerReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeviceConsumerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeviceConsumerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeviceConsumerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeviceConsumerReqValidationError{}

// Validate checks the field values on ListDeviceConsumerResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeviceConsumerResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeviceConsumerResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeviceConsumerRespMultiError, or nil if none found.
func (m *ListDeviceConsumerResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeviceConsumerResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDeviceConsumerRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDeviceConsumerRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeviceConsumerRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDeviceConsumerRespMultiError(errors)
	}
	return nil
}

// ListDeviceConsumerRespMultiError is an error wrapping multiple validation
// errors returned by ListDeviceConsumerResp.ValidateAll() if the designated
// constraints aren't met.
type ListDeviceConsumerRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeviceConsumerRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeviceConsumerRespMultiError) AllErrors() []error { return m }

// ListDeviceConsumerRespValidationError is the validation error returned by
// ListDeviceConsumerResp.Validate if the designated constraints aren't met.
type ListDeviceConsumerRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeviceConsumerRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeviceConsumerRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeviceConsumerRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeviceConsumerRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeviceConsumerRespValidationError) ErrorName() string {
	return "ListDeviceConsumerRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeviceConsumerRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeviceConsumerResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeviceConsumerRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeviceConsumerRespValidationError{}

// Validate checks the field values on UpdateDeviceConsumerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeviceConsumerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeviceConsumerReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeviceConsumerReqMultiError, or nil if none found.
func (m *UpdateDeviceConsumerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeviceConsumerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceConsumerID

	// no validation rules for Name

	// no validation rules for Provider

	// no validation rules for ClusterID

	if all {
		switch v := interface{}(m.GetAssociatedDevicePool()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDeviceConsumerReqValidationError{
					field:  "AssociatedDevicePool",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDeviceConsumerReqValidationError{
					field:  "AssociatedDevicePool",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAssociatedDevicePool()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDeviceConsumerReqValidationError{
				field:  "AssociatedDevicePool",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLabels()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDeviceConsumerReqValidationError{
					field:  "Labels",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDeviceConsumerReqValidationError{
					field:  "Labels",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLabels()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDeviceConsumerReqValidationError{
				field:  "Labels",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Operator

	if all {
		switch v := interface{}(m.GetQuotas()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDeviceConsumerReqValidationError{
					field:  "Quotas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDeviceConsumerReqValidationError{
					field:  "Quotas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuotas()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDeviceConsumerReqValidationError{
				field:  "Quotas",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDeviceConsumerReqMultiError(errors)
	}
	return nil
}

// UpdateDeviceConsumerReqMultiError is an error wrapping multiple validation
// errors returned by UpdateDeviceConsumerReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateDeviceConsumerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeviceConsumerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeviceConsumerReqMultiError) AllErrors() []error { return m }

// UpdateDeviceConsumerReqValidationError is the validation error returned by
// UpdateDeviceConsumerReq.Validate if the designated constraints aren't met.
type UpdateDeviceConsumerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeviceConsumerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeviceConsumerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeviceConsumerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeviceConsumerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeviceConsumerReqValidationError) ErrorName() string {
	return "UpdateDeviceConsumerReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeviceConsumerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeviceConsumerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeviceConsumerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeviceConsumerReqValidationError{}

// Validate checks the field values on ListString with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListString) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListString with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListStringMultiError, or
// nil if none found.
func (m *ListString) ValidateAll() error {
	return m.validate(true)
}

func (m *ListString) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListStringMultiError(errors)
	}
	return nil
}

// ListStringMultiError is an error wrapping multiple validation errors
// returned by ListString.ValidateAll() if the designated constraints aren't met.
type ListStringMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStringMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStringMultiError) AllErrors() []error { return m }

// ListStringValidationError is the validation error returned by
// ListString.Validate if the designated constraints aren't met.
type ListStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStringValidationError) ErrorName() string { return "ListStringValidationError" }

// Error satisfies the builtin error interface
func (e ListStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStringValidationError{}

// Validate checks the field values on Labels with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Labels) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Labels with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LabelsMultiError, or nil if none found.
func (m *Labels) ValidateAll() error {
	return m.validate(true)
}

func (m *Labels) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return LabelsMultiError(errors)
	}
	return nil
}

// LabelsMultiError is an error wrapping multiple validation errors returned by
// Labels.ValidateAll() if the designated constraints aren't met.
type LabelsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LabelsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LabelsMultiError) AllErrors() []error { return m }

// LabelsValidationError is the validation error returned by Labels.Validate if
// the designated constraints aren't met.
type LabelsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabelsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabelsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabelsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabelsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabelsValidationError) ErrorName() string { return "LabelsValidationError" }

// Error satisfies the builtin error interface
func (e LabelsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabels.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabelsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabelsValidationError{}

// Validate checks the field values on ListQuota with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListQuota) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListQuota with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListQuotaMultiError, or nil
// if none found.
func (m *ListQuota) ValidateAll() error {
	return m.validate(true)
}

func (m *ListQuota) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListQuotaValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListQuotaValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListQuotaValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListQuotaMultiError(errors)
	}
	return nil
}

// ListQuotaMultiError is an error wrapping multiple validation errors returned
// by ListQuota.ValidateAll() if the designated constraints aren't met.
type ListQuotaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListQuotaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListQuotaMultiError) AllErrors() []error { return m }

// ListQuotaValidationError is the validation error returned by
// ListQuota.Validate if the designated constraints aren't met.
type ListQuotaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListQuotaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListQuotaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListQuotaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListQuotaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListQuotaValidationError) ErrorName() string { return "ListQuotaValidationError" }

// Error satisfies the builtin error interface
func (e ListQuotaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListQuota.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListQuotaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListQuotaValidationError{}

// Validate checks the field values on UpdateDeviceConsumerResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeviceConsumerResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeviceConsumerResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeviceConsumerRespMultiError, or nil if none found.
func (m *UpdateDeviceConsumerResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeviceConsumerResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDeviceConsumerRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDeviceConsumerRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDeviceConsumerRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDeviceConsumerRespMultiError(errors)
	}
	return nil
}

// UpdateDeviceConsumerRespMultiError is an error wrapping multiple validation
// errors returned by UpdateDeviceConsumerResp.ValidateAll() if the designated
// constraints aren't met.
type UpdateDeviceConsumerRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeviceConsumerRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeviceConsumerRespMultiError) AllErrors() []error { return m }

// UpdateDeviceConsumerRespValidationError is the validation error returned by
// UpdateDeviceConsumerResp.Validate if the designated constraints aren't met.
type UpdateDeviceConsumerRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeviceConsumerRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeviceConsumerRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeviceConsumerRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeviceConsumerRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeviceConsumerRespValidationError) ErrorName() string {
	return "UpdateDeviceConsumerRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeviceConsumerRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeviceConsumerResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeviceConsumerRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeviceConsumerRespValidationError{}

// Validate checks the field values on DeleteDeviceConsumerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeviceConsumerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeviceConsumerReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeviceConsumerReqMultiError, or nil if none found.
func (m *DeleteDeviceConsumerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeviceConsumerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetDeviceConsumerID()); l < 2 || l > 30 {
		err := DeleteDeviceConsumerReqValidationError{
			field:  "DeviceConsumerID",
			reason: "value length must be between 2 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteDeviceConsumerReq_DeviceConsumerID_Pattern.MatchString(m.GetDeviceConsumerID()) {
		err := DeleteDeviceConsumerReqValidationError{
			field:  "DeviceConsumerID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDeviceConsumerReqMultiError(errors)
	}
	return nil
}

// DeleteDeviceConsumerReqMultiError is an error wrapping multiple validation
// errors returned by DeleteDeviceConsumerReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteDeviceConsumerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeviceConsumerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeviceConsumerReqMultiError) AllErrors() []error { return m }

// DeleteDeviceConsumerReqValidationError is the validation error returned by
// DeleteDeviceConsumerReq.Validate if the designated constraints aren't met.
type DeleteDeviceConsumerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeviceConsumerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeviceConsumerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeviceConsumerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeviceConsumerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeviceConsumerReqValidationError) ErrorName() string {
	return "DeleteDeviceConsumerReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeviceConsumerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeviceConsumerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeviceConsumerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeviceConsumerReqValidationError{}

var _DeleteDeviceConsumerReq_DeviceConsumerID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on DeleteDeviceConsumerResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeviceConsumerResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeviceConsumerResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeviceConsumerRespMultiError, or nil if none found.
func (m *DeleteDeviceConsumerResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeviceConsumerResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if len(errors) > 0 {
		return DeleteDeviceConsumerRespMultiError(errors)
	}
	return nil
}

// DeleteDeviceConsumerRespMultiError is an error wrapping multiple validation
// errors returned by DeleteDeviceConsumerResp.ValidateAll() if the designated
// constraints aren't met.
type DeleteDeviceConsumerRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeviceConsumerRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeviceConsumerRespMultiError) AllErrors() []error { return m }

// DeleteDeviceConsumerRespValidationError is the validation error returned by
// DeleteDeviceConsumerResp.Validate if the designated constraints aren't met.
type DeleteDeviceConsumerRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeviceConsumerRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeviceConsumerRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeviceConsumerRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeviceConsumerRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeviceConsumerRespValidationError) ErrorName() string {
	return "DeleteDeviceConsumerRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeviceConsumerRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeviceConsumerResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeviceConsumerRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeviceConsumerRespValidationError{}

// Validate checks the field values on ConsumeDeviceReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConsumeDeviceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsumeDeviceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConsumeDeviceReqMultiError, or nil if none found.
func (m *ConsumeDeviceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsumeDeviceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceConsumerID

	// no validation rules for Num

	for idx, item := range m.GetDesire() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConsumeDeviceReqValidationError{
						field:  fmt.Sprintf("Desire[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConsumeDeviceReqValidationError{
						field:  fmt.Sprintf("Desire[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConsumeDeviceReqValidationError{
					field:  fmt.Sprintf("Desire[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Operator

	if len(errors) > 0 {
		return ConsumeDeviceReqMultiError(errors)
	}
	return nil
}

// ConsumeDeviceReqMultiError is an error wrapping multiple validation errors
// returned by ConsumeDeviceReq.ValidateAll() if the designated constraints
// aren't met.
type ConsumeDeviceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsumeDeviceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsumeDeviceReqMultiError) AllErrors() []error { return m }

// ConsumeDeviceReqValidationError is the validation error returned by
// ConsumeDeviceReq.Validate if the designated constraints aren't met.
type ConsumeDeviceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumeDeviceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumeDeviceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumeDeviceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumeDeviceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumeDeviceReqValidationError) ErrorName() string { return "ConsumeDeviceReqValidationError" }

// Error satisfies the builtin error interface
func (e ConsumeDeviceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumeDeviceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumeDeviceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumeDeviceReqValidationError{}

// Validate checks the field values on ConsumeDeviceResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConsumeDeviceResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsumeDeviceResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConsumeDeviceRespMultiError, or nil if none found.
func (m *ConsumeDeviceResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsumeDeviceResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsumeDeviceRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsumeDeviceRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsumeDeviceRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConsumeDeviceRespMultiError(errors)
	}
	return nil
}

// ConsumeDeviceRespMultiError is an error wrapping multiple validation errors
// returned by ConsumeDeviceResp.ValidateAll() if the designated constraints
// aren't met.
type ConsumeDeviceRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsumeDeviceRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsumeDeviceRespMultiError) AllErrors() []error { return m }

// ConsumeDeviceRespValidationError is the validation error returned by
// ConsumeDeviceResp.Validate if the designated constraints aren't met.
type ConsumeDeviceRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumeDeviceRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumeDeviceRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumeDeviceRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumeDeviceRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumeDeviceRespValidationError) ErrorName() string {
	return "ConsumeDeviceRespValidationError"
}

// Error satisfies the builtin error interface
func (e ConsumeDeviceRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumeDeviceResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumeDeviceRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumeDeviceRespValidationError{}

// Validate checks the field values on ReturnDeviceReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReturnDeviceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnDeviceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnDeviceReqMultiError, or nil if none found.
func (m *ReturnDeviceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnDeviceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetDeviceConsumerID()); l < 2 || l > 30 {
		err := ReturnDeviceReqValidationError{
			field:  "DeviceConsumerID",
			reason: "value length must be between 2 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ReturnDeviceReq_DeviceConsumerID_Pattern.MatchString(m.GetDeviceConsumerID()) {
		err := ReturnDeviceReqValidationError{
			field:  "DeviceConsumerID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetDevices()) < 1 {
		err := ReturnDeviceReqValidationError{
			field:  "Devices",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Operator

	// no validation rules for ExtraSystemID

	if len(errors) > 0 {
		return ReturnDeviceReqMultiError(errors)
	}
	return nil
}

// ReturnDeviceReqMultiError is an error wrapping multiple validation errors
// returned by ReturnDeviceReq.ValidateAll() if the designated constraints
// aren't met.
type ReturnDeviceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnDeviceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnDeviceReqMultiError) AllErrors() []error { return m }

// ReturnDeviceReqValidationError is the validation error returned by
// ReturnDeviceReq.Validate if the designated constraints aren't met.
type ReturnDeviceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnDeviceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnDeviceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnDeviceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnDeviceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnDeviceReqValidationError) ErrorName() string { return "ReturnDeviceReqValidationError" }

// Error satisfies the builtin error interface
func (e ReturnDeviceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnDeviceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnDeviceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnDeviceReqValidationError{}

var _ReturnDeviceReq_DeviceConsumerID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on ReturnDeviceResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReturnDeviceResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnDeviceResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnDeviceRespMultiError, or nil if none found.
func (m *ReturnDeviceResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnDeviceResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReturnDeviceRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReturnDeviceRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReturnDeviceRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReturnDeviceRespMultiError(errors)
	}
	return nil
}

// ReturnDeviceRespMultiError is an error wrapping multiple validation errors
// returned by ReturnDeviceResp.ValidateAll() if the designated constraints
// aren't met.
type ReturnDeviceRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnDeviceRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnDeviceRespMultiError) AllErrors() []error { return m }

// ReturnDeviceRespValidationError is the validation error returned by
// ReturnDeviceResp.Validate if the designated constraints aren't met.
type ReturnDeviceRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnDeviceRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnDeviceRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnDeviceRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnDeviceRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnDeviceRespValidationError) ErrorName() string { return "ReturnDeviceRespValidationError" }

// Error satisfies the builtin error interface
func (e ReturnDeviceRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnDeviceResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnDeviceRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnDeviceRespValidationError{}

// Validate checks the field values on RecordData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RecordData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RecordDataMultiError, or
// nil if none found.
func (m *RecordData) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if len(errors) > 0 {
		return RecordDataMultiError(errors)
	}
	return nil
}

// RecordDataMultiError is an error wrapping multiple validation errors
// returned by RecordData.ValidateAll() if the designated constraints aren't met.
type RecordDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordDataMultiError) AllErrors() []error { return m }

// RecordDataValidationError is the validation error returned by
// RecordData.Validate if the designated constraints aren't met.
type RecordDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordDataValidationError) ErrorName() string { return "RecordDataValidationError" }

// Error satisfies the builtin error interface
func (e RecordDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordDataValidationError{}

// Validate checks the field values on ConsumeDesire with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConsumeDesire) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsumeDesire with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConsumeDesireMultiError, or
// nil if none found.
func (m *ConsumeDesire) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsumeDesire) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceType

	// no validation rules for Cpu

	// no validation rules for Mem

	// no validation rules for Gpu

	if all {
		switch v := interface{}(m.GetSystemDisk()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsumeDesireValidationError{
					field:  "SystemDisk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsumeDesireValidationError{
					field:  "SystemDisk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSystemDisk()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsumeDesireValidationError{
				field:  "SystemDisk",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDataDisks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConsumeDesireValidationError{
						field:  fmt.Sprintf("DataDisks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConsumeDesireValidationError{
						field:  fmt.Sprintf("DataDisks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConsumeDesireValidationError{
					field:  fmt.Sprintf("DataDisks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSecurity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsumeDesireValidationError{
					field:  "Security",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsumeDesireValidationError{
					field:  "Security",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecurity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsumeDesireValidationError{
				field:  "Security",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsumeDesireValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsumeDesireValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsumeDesireValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Vpc

	if all {
		switch v := interface{}(m.GetZone()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsumeDesireValidationError{
					field:  "Zone",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsumeDesireValidationError{
					field:  "Zone",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetZone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsumeDesireValidationError{
				field:  "Zone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConsumeDesireMultiError(errors)
	}
	return nil
}

// ConsumeDesireMultiError is an error wrapping multiple validation errors
// returned by ConsumeDesire.ValidateAll() if the designated constraints
// aren't met.
type ConsumeDesireMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsumeDesireMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsumeDesireMultiError) AllErrors() []error { return m }

// ConsumeDesireValidationError is the validation error returned by
// ConsumeDesire.Validate if the designated constraints aren't met.
type ConsumeDesireValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumeDesireValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumeDesireValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumeDesireValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumeDesireValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumeDesireValidationError) ErrorName() string { return "ConsumeDesireValidationError" }

// Error satisfies the builtin error interface
func (e ConsumeDesireValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumeDesire.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumeDesireValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumeDesireValidationError{}

// Validate checks the field values on DeviceDisk with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceDisk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceDisk with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceDiskMultiError, or
// nil if none found.
func (m *DeviceDisk) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceDisk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Size

	if len(errors) > 0 {
		return DeviceDiskMultiError(errors)
	}
	return nil
}

// DeviceDiskMultiError is an error wrapping multiple validation errors
// returned by DeviceDisk.ValidateAll() if the designated constraints aren't met.
type DeviceDiskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceDiskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceDiskMultiError) AllErrors() []error { return m }

// DeviceDiskValidationError is the validation error returned by
// DeviceDisk.Validate if the designated constraints aren't met.
type DeviceDiskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceDiskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceDiskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceDiskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceDiskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceDiskValidationError) ErrorName() string { return "DeviceDiskValidationError" }

// Error satisfies the builtin error interface
func (e DeviceDiskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceDisk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceDiskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceDiskValidationError{}

// Validate checks the field values on ConsumerQuota with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConsumerQuota) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsumerQuota with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConsumerQuotaMultiError, or
// nil if none found.
func (m *ConsumerQuota) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsumerQuota) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Quota

	if len(errors) > 0 {
		return ConsumerQuotaMultiError(errors)
	}
	return nil
}

// ConsumerQuotaMultiError is an error wrapping multiple validation errors
// returned by ConsumerQuota.ValidateAll() if the designated constraints
// aren't met.
type ConsumerQuotaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsumerQuotaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsumerQuotaMultiError) AllErrors() []error { return m }

// ConsumerQuotaValidationError is the validation error returned by
// ConsumerQuota.Validate if the designated constraints aren't met.
type ConsumerQuotaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumerQuotaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumerQuotaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumerQuotaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumerQuotaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumerQuotaValidationError) ErrorName() string { return "ConsumerQuotaValidationError" }

// Error satisfies the builtin error interface
func (e ConsumerQuotaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumerQuota.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumerQuotaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumerQuotaValidationError{}

// Validate checks the field values on DeviceConsumer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceConsumer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceConsumer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceConsumerMultiError,
// or nil if none found.
func (m *DeviceConsumer) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceConsumer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Provider

	// no validation rules for ClusterID

	// no validation rules for Labels

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	for idx, item := range m.GetQuotas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeviceConsumerValidationError{
						field:  fmt.Sprintf("Quotas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeviceConsumerValidationError{
						field:  fmt.Sprintf("Quotas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeviceConsumerValidationError{
					field:  fmt.Sprintf("Quotas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUsages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeviceConsumerValidationError{
						field:  fmt.Sprintf("Usages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeviceConsumerValidationError{
						field:  fmt.Sprintf("Usages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeviceConsumerValidationError{
					field:  fmt.Sprintf("Usages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeviceConsumerMultiError(errors)
	}
	return nil
}

// DeviceConsumerMultiError is an error wrapping multiple validation errors
// returned by DeviceConsumer.ValidateAll() if the designated constraints
// aren't met.
type DeviceConsumerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceConsumerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceConsumerMultiError) AllErrors() []error { return m }

// DeviceConsumerValidationError is the validation error returned by
// DeviceConsumer.Validate if the designated constraints aren't met.
type DeviceConsumerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceConsumerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceConsumerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceConsumerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceConsumerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceConsumerValidationError) ErrorName() string { return "DeviceConsumerValidationError" }

// Error satisfies the builtin error interface
func (e DeviceConsumerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceConsumer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceConsumerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceConsumerValidationError{}

// Validate checks the field values on CreateDevicePoolReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDevicePoolReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDevicePoolReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDevicePoolReqMultiError, or nil if none found.
func (m *CreateDevicePoolReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDevicePoolReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 64 {
		err := CreateDevicePoolReqValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Provider

	if all {
		switch v := interface{}(m.GetBaseConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDevicePoolReqValidationError{
					field:  "BaseConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDevicePoolReqValidationError{
					field:  "BaseConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBaseConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDevicePoolReqValidationError{
				field:  "BaseConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	// no validation rules for Operator

	// no validation rules for EnableAS

	if all {
		switch v := interface{}(m.GetAsOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDevicePoolReqValidationError{
					field:  "AsOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDevicePoolReqValidationError{
					field:  "AsOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAsOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDevicePoolReqValidationError{
				field:  "AsOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Reserved

	if len(errors) > 0 {
		return CreateDevicePoolReqMultiError(errors)
	}
	return nil
}

// CreateDevicePoolReqMultiError is an error wrapping multiple validation
// errors returned by CreateDevicePoolReq.ValidateAll() if the designated
// constraints aren't met.
type CreateDevicePoolReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDevicePoolReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDevicePoolReqMultiError) AllErrors() []error { return m }

// CreateDevicePoolReqValidationError is the validation error returned by
// CreateDevicePoolReq.Validate if the designated constraints aren't met.
type CreateDevicePoolReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDevicePoolReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDevicePoolReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDevicePoolReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDevicePoolReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDevicePoolReqValidationError) ErrorName() string {
	return "CreateDevicePoolReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDevicePoolReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDevicePoolReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDevicePoolReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDevicePoolReqValidationError{}

// Validate checks the field values on CreateDevicePoolResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDevicePoolResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDevicePoolResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDevicePoolRespMultiError, or nil if none found.
func (m *CreateDevicePoolResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDevicePoolResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDevicePoolRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDevicePoolRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDevicePoolRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDevicePoolRespMultiError(errors)
	}
	return nil
}

// CreateDevicePoolRespMultiError is an error wrapping multiple validation
// errors returned by CreateDevicePoolResp.ValidateAll() if the designated
// constraints aren't met.
type CreateDevicePoolRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDevicePoolRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDevicePoolRespMultiError) AllErrors() []error { return m }

// CreateDevicePoolRespValidationError is the validation error returned by
// CreateDevicePoolResp.Validate if the designated constraints aren't met.
type CreateDevicePoolRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDevicePoolRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDevicePoolRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDevicePoolRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDevicePoolRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDevicePoolRespValidationError) ErrorName() string {
	return "CreateDevicePoolRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDevicePoolRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDevicePoolResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDevicePoolRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDevicePoolRespValidationError{}

// Validate checks the field values on GetDevicePoolReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDevicePoolReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDevicePoolReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDevicePoolReqMultiError, or nil if none found.
func (m *GetDevicePoolReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDevicePoolReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetDevicePoolID()); l < 2 || l > 30 {
		err := GetDevicePoolReqValidationError{
			field:  "DevicePoolID",
			reason: "value length must be between 2 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetDevicePoolReq_DevicePoolID_Pattern.MatchString(m.GetDevicePoolID()) {
		err := GetDevicePoolReqValidationError{
			field:  "DevicePoolID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDevicePoolReqMultiError(errors)
	}
	return nil
}

// GetDevicePoolReqMultiError is an error wrapping multiple validation errors
// returned by GetDevicePoolReq.ValidateAll() if the designated constraints
// aren't met.
type GetDevicePoolReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDevicePoolReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDevicePoolReqMultiError) AllErrors() []error { return m }

// GetDevicePoolReqValidationError is the validation error returned by
// GetDevicePoolReq.Validate if the designated constraints aren't met.
type GetDevicePoolReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDevicePoolReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDevicePoolReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDevicePoolReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDevicePoolReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDevicePoolReqValidationError) ErrorName() string { return "GetDevicePoolReqValidationError" }

// Error satisfies the builtin error interface
func (e GetDevicePoolReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDevicePoolReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDevicePoolReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDevicePoolReqValidationError{}

var _GetDevicePoolReq_DevicePoolID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on GetDevicePoolResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDevicePoolResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDevicePoolResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDevicePoolRespMultiError, or nil if none found.
func (m *GetDevicePoolResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDevicePoolResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDevicePoolRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDevicePoolRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDevicePoolRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDevicePoolRespMultiError(errors)
	}
	return nil
}

// GetDevicePoolRespMultiError is an error wrapping multiple validation errors
// returned by GetDevicePoolResp.ValidateAll() if the designated constraints
// aren't met.
type GetDevicePoolRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDevicePoolRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDevicePoolRespMultiError) AllErrors() []error { return m }

// GetDevicePoolRespValidationError is the validation error returned by
// GetDevicePoolResp.Validate if the designated constraints aren't met.
type GetDevicePoolRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDevicePoolRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDevicePoolRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDevicePoolRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDevicePoolRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDevicePoolRespValidationError) ErrorName() string {
	return "GetDevicePoolRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetDevicePoolRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDevicePoolResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDevicePoolRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDevicePoolRespValidationError{}

// Validate checks the field values on ListDevicePoolReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDevicePoolReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDevicePoolReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDevicePoolReqMultiError, or nil if none found.
func (m *ListDevicePoolReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDevicePoolReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sort

	// no validation rules for Desc

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return ListDevicePoolReqMultiError(errors)
	}
	return nil
}

// ListDevicePoolReqMultiError is an error wrapping multiple validation errors
// returned by ListDevicePoolReq.ValidateAll() if the designated constraints
// aren't met.
type ListDevicePoolReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDevicePoolReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDevicePoolReqMultiError) AllErrors() []error { return m }

// ListDevicePoolReqValidationError is the validation error returned by
// ListDevicePoolReq.Validate if the designated constraints aren't met.
type ListDevicePoolReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDevicePoolReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDevicePoolReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDevicePoolReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDevicePoolReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDevicePoolReqValidationError) ErrorName() string {
	return "ListDevicePoolReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListDevicePoolReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDevicePoolReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDevicePoolReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDevicePoolReqValidationError{}

// Validate checks the field values on ListDevicePoolResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDevicePoolResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDevicePoolResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDevicePoolRespMultiError, or nil if none found.
func (m *ListDevicePoolResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDevicePoolResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDevicePoolRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDevicePoolRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDevicePoolRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDevicePoolRespMultiError(errors)
	}
	return nil
}

// ListDevicePoolRespMultiError is an error wrapping multiple validation errors
// returned by ListDevicePoolResp.ValidateAll() if the designated constraints
// aren't met.
type ListDevicePoolRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDevicePoolRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDevicePoolRespMultiError) AllErrors() []error { return m }

// ListDevicePoolRespValidationError is the validation error returned by
// ListDevicePoolResp.Validate if the designated constraints aren't met.
type ListDevicePoolRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDevicePoolRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDevicePoolRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDevicePoolRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDevicePoolRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDevicePoolRespValidationError) ErrorName() string {
	return "ListDevicePoolRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListDevicePoolRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDevicePoolResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDevicePoolRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDevicePoolRespValidationError{}

// Validate checks the field values on UpdateDevicePoolReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDevicePoolReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDevicePoolReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDevicePoolReqMultiError, or nil if none found.
func (m *UpdateDevicePoolReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDevicePoolReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DevicePoolID

	// no validation rules for Name

	// no validation rules for Provider

	if all {
		switch v := interface{}(m.GetBaseConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDevicePoolReqValidationError{
					field:  "BaseConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDevicePoolReqValidationError{
					field:  "BaseConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBaseConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDevicePoolReqValidationError{
				field:  "BaseConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAllowedDeviceConsumer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDevicePoolReqValidationError{
					field:  "AllowedDeviceConsumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDevicePoolReqValidationError{
					field:  "AllowedDeviceConsumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAllowedDeviceConsumer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDevicePoolReqValidationError{
				field:  "AllowedDeviceConsumer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLabels()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDevicePoolReqValidationError{
					field:  "Labels",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDevicePoolReqValidationError{
					field:  "Labels",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLabels()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDevicePoolReqValidationError{
				field:  "Labels",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Operator

	// no validation rules for EnableAS

	if all {
		switch v := interface{}(m.GetAsOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDevicePoolReqValidationError{
					field:  "AsOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDevicePoolReqValidationError{
					field:  "AsOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAsOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDevicePoolReqValidationError{
				field:  "AsOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Reserved

	if len(errors) > 0 {
		return UpdateDevicePoolReqMultiError(errors)
	}
	return nil
}

// UpdateDevicePoolReqMultiError is an error wrapping multiple validation
// errors returned by UpdateDevicePoolReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateDevicePoolReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDevicePoolReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDevicePoolReqMultiError) AllErrors() []error { return m }

// UpdateDevicePoolReqValidationError is the validation error returned by
// UpdateDevicePoolReq.Validate if the designated constraints aren't met.
type UpdateDevicePoolReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDevicePoolReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDevicePoolReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDevicePoolReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDevicePoolReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDevicePoolReqValidationError) ErrorName() string {
	return "UpdateDevicePoolReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDevicePoolReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDevicePoolReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDevicePoolReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDevicePoolReqValidationError{}

// Validate checks the field values on UpdateDevicePoolResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDevicePoolResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDevicePoolResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDevicePoolRespMultiError, or nil if none found.
func (m *UpdateDevicePoolResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDevicePoolResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDevicePoolRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDevicePoolRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDevicePoolRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDevicePoolRespMultiError(errors)
	}
	return nil
}

// UpdateDevicePoolRespMultiError is an error wrapping multiple validation
// errors returned by UpdateDevicePoolResp.ValidateAll() if the designated
// constraints aren't met.
type UpdateDevicePoolRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDevicePoolRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDevicePoolRespMultiError) AllErrors() []error { return m }

// UpdateDevicePoolRespValidationError is the validation error returned by
// UpdateDevicePoolResp.Validate if the designated constraints aren't met.
type UpdateDevicePoolRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDevicePoolRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDevicePoolRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDevicePoolRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDevicePoolRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDevicePoolRespValidationError) ErrorName() string {
	return "UpdateDevicePoolRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDevicePoolRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDevicePoolResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDevicePoolRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDevicePoolRespValidationError{}

// Validate checks the field values on DeleteDevicePoolReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDevicePoolReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDevicePoolReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDevicePoolReqMultiError, or nil if none found.
func (m *DeleteDevicePoolReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDevicePoolReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetDevicePoolID()); l < 2 || l > 30 {
		err := DeleteDevicePoolReqValidationError{
			field:  "DevicePoolID",
			reason: "value length must be between 2 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteDevicePoolReq_DevicePoolID_Pattern.MatchString(m.GetDevicePoolID()) {
		err := DeleteDevicePoolReqValidationError{
			field:  "DevicePoolID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDevicePoolReqMultiError(errors)
	}
	return nil
}

// DeleteDevicePoolReqMultiError is an error wrapping multiple validation
// errors returned by DeleteDevicePoolReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteDevicePoolReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDevicePoolReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDevicePoolReqMultiError) AllErrors() []error { return m }

// DeleteDevicePoolReqValidationError is the validation error returned by
// DeleteDevicePoolReq.Validate if the designated constraints aren't met.
type DeleteDevicePoolReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDevicePoolReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDevicePoolReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDevicePoolReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDevicePoolReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDevicePoolReqValidationError) ErrorName() string {
	return "DeleteDevicePoolReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDevicePoolReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDevicePoolReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDevicePoolReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDevicePoolReqValidationError{}

var _DeleteDevicePoolReq_DevicePoolID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on DeleteDevicePoolResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDevicePoolResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDevicePoolResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDevicePoolRespMultiError, or nil if none found.
func (m *DeleteDevicePoolResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDevicePoolResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if len(errors) > 0 {
		return DeleteDevicePoolRespMultiError(errors)
	}
	return nil
}

// DeleteDevicePoolRespMultiError is an error wrapping multiple validation
// errors returned by DeleteDevicePoolResp.ValidateAll() if the designated
// constraints aren't met.
type DeleteDevicePoolRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDevicePoolRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDevicePoolRespMultiError) AllErrors() []error { return m }

// DeleteDevicePoolRespValidationError is the validation error returned by
// DeleteDevicePoolResp.Validate if the designated constraints aren't met.
type DeleteDevicePoolRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDevicePoolRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDevicePoolRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDevicePoolRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDevicePoolRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDevicePoolRespValidationError) ErrorName() string {
	return "DeleteDevicePoolRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDevicePoolRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDevicePoolResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDevicePoolRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDevicePoolRespValidationError{}

// Validate checks the field values on ImportDeviceToDevicePoolReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportDeviceToDevicePoolReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportDeviceToDevicePoolReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportDeviceToDevicePoolReqMultiError, or nil if none found.
func (m *ImportDeviceToDevicePoolReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportDeviceToDevicePoolReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DevicePoolID

	for idx, item := range m.GetDevices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportDeviceToDevicePoolReqValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportDeviceToDevicePoolReqValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportDeviceToDevicePoolReqValidationError{
					field:  fmt.Sprintf("Devices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Operator

	if len(errors) > 0 {
		return ImportDeviceToDevicePoolReqMultiError(errors)
	}
	return nil
}

// ImportDeviceToDevicePoolReqMultiError is an error wrapping multiple
// validation errors returned by ImportDeviceToDevicePoolReq.ValidateAll() if
// the designated constraints aren't met.
type ImportDeviceToDevicePoolReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportDeviceToDevicePoolReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportDeviceToDevicePoolReqMultiError) AllErrors() []error { return m }

// ImportDeviceToDevicePoolReqValidationError is the validation error returned
// by ImportDeviceToDevicePoolReq.Validate if the designated constraints
// aren't met.
type ImportDeviceToDevicePoolReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportDeviceToDevicePoolReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportDeviceToDevicePoolReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportDeviceToDevicePoolReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportDeviceToDevicePoolReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportDeviceToDevicePoolReqValidationError) ErrorName() string {
	return "ImportDeviceToDevicePoolReqValidationError"
}

// Error satisfies the builtin error interface
func (e ImportDeviceToDevicePoolReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportDeviceToDevicePoolReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportDeviceToDevicePoolReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportDeviceToDevicePoolReqValidationError{}

// Validate checks the field values on ImportDeviceToDevicePoolResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportDeviceToDevicePoolResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportDeviceToDevicePoolResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportDeviceToDevicePoolRespMultiError, or nil if none found.
func (m *ImportDeviceToDevicePoolResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportDeviceToDevicePoolResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if len(errors) > 0 {
		return ImportDeviceToDevicePoolRespMultiError(errors)
	}
	return nil
}

// ImportDeviceToDevicePoolRespMultiError is an error wrapping multiple
// validation errors returned by ImportDeviceToDevicePoolResp.ValidateAll() if
// the designated constraints aren't met.
type ImportDeviceToDevicePoolRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportDeviceToDevicePoolRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportDeviceToDevicePoolRespMultiError) AllErrors() []error { return m }

// ImportDeviceToDevicePoolRespValidationError is the validation error returned
// by ImportDeviceToDevicePoolResp.Validate if the designated constraints
// aren't met.
type ImportDeviceToDevicePoolRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportDeviceToDevicePoolRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportDeviceToDevicePoolRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportDeviceToDevicePoolRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportDeviceToDevicePoolRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportDeviceToDevicePoolRespValidationError) ErrorName() string {
	return "ImportDeviceToDevicePoolRespValidationError"
}

// Error satisfies the builtin error interface
func (e ImportDeviceToDevicePoolRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportDeviceToDevicePoolResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportDeviceToDevicePoolRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportDeviceToDevicePoolRespValidationError{}

// Validate checks the field values on CreateProviderReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateProviderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProviderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProviderReqMultiError, or nil if none found.
func (m *CreateProviderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProviderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Key

	// no validation rules for Secret

	// no validation rules for Labels

	// no validation rules for Operator

	if len(errors) > 0 {
		return CreateProviderReqMultiError(errors)
	}
	return nil
}

// CreateProviderReqMultiError is an error wrapping multiple validation errors
// returned by CreateProviderReq.ValidateAll() if the designated constraints
// aren't met.
type CreateProviderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProviderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProviderReqMultiError) AllErrors() []error { return m }

// CreateProviderReqValidationError is the validation error returned by
// CreateProviderReq.Validate if the designated constraints aren't met.
type CreateProviderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProviderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProviderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProviderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProviderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProviderReqValidationError) ErrorName() string {
	return "CreateProviderReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProviderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProviderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProviderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProviderReqValidationError{}

// Validate checks the field values on CreateProviderResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProviderResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProviderResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProviderRespMultiError, or nil if none found.
func (m *CreateProviderResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProviderResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProviderRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProviderRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProviderRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProviderRespMultiError(errors)
	}
	return nil
}

// CreateProviderRespMultiError is an error wrapping multiple validation errors
// returned by CreateProviderResp.ValidateAll() if the designated constraints
// aren't met.
type CreateProviderRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProviderRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProviderRespMultiError) AllErrors() []error { return m }

// CreateProviderRespValidationError is the validation error returned by
// CreateProviderResp.Validate if the designated constraints aren't met.
type CreateProviderRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProviderRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProviderRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProviderRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProviderRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProviderRespValidationError) ErrorName() string {
	return "CreateProviderRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProviderRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProviderResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProviderRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProviderRespValidationError{}

// Validate checks the field values on GetProviderReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetProviderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProviderReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetProviderReqMultiError,
// or nil if none found.
func (m *GetProviderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProviderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetProviderReqMultiError(errors)
	}
	return nil
}

// GetProviderReqMultiError is an error wrapping multiple validation errors
// returned by GetProviderReq.ValidateAll() if the designated constraints
// aren't met.
type GetProviderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProviderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProviderReqMultiError) AllErrors() []error { return m }

// GetProviderReqValidationError is the validation error returned by
// GetProviderReq.Validate if the designated constraints aren't met.
type GetProviderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProviderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProviderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProviderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProviderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProviderReqValidationError) ErrorName() string { return "GetProviderReqValidationError" }

// Error satisfies the builtin error interface
func (e GetProviderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProviderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProviderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProviderReqValidationError{}

// Validate checks the field values on GetProviderResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProviderResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProviderResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProviderRespMultiError, or nil if none found.
func (m *GetProviderResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProviderResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProviderRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProviderRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProviderRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProviderRespMultiError(errors)
	}
	return nil
}

// GetProviderRespMultiError is an error wrapping multiple validation errors
// returned by GetProviderResp.ValidateAll() if the designated constraints
// aren't met.
type GetProviderRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProviderRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProviderRespMultiError) AllErrors() []error { return m }

// GetProviderRespValidationError is the validation error returned by
// GetProviderResp.Validate if the designated constraints aren't met.
type GetProviderRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProviderRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProviderRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProviderRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProviderRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProviderRespValidationError) ErrorName() string { return "GetProviderRespValidationError" }

// Error satisfies the builtin error interface
func (e GetProviderRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProviderResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProviderRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProviderRespValidationError{}

// Validate checks the field values on ListProviderReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListProviderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProviderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProviderReqMultiError, or nil if none found.
func (m *ListProviderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProviderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sort

	// no validation rules for Desc

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return ListProviderReqMultiError(errors)
	}
	return nil
}

// ListProviderReqMultiError is an error wrapping multiple validation errors
// returned by ListProviderReq.ValidateAll() if the designated constraints
// aren't met.
type ListProviderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProviderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProviderReqMultiError) AllErrors() []error { return m }

// ListProviderReqValidationError is the validation error returned by
// ListProviderReq.Validate if the designated constraints aren't met.
type ListProviderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProviderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProviderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProviderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProviderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProviderReqValidationError) ErrorName() string { return "ListProviderReqValidationError" }

// Error satisfies the builtin error interface
func (e ListProviderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProviderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProviderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProviderReqValidationError{}

// Validate checks the field values on ListProviderResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListProviderResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProviderResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProviderRespMultiError, or nil if none found.
func (m *ListProviderResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProviderResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProviderRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProviderRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProviderRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProviderRespMultiError(errors)
	}
	return nil
}

// ListProviderRespMultiError is an error wrapping multiple validation errors
// returned by ListProviderResp.ValidateAll() if the designated constraints
// aren't met.
type ListProviderRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProviderRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProviderRespMultiError) AllErrors() []error { return m }

// ListProviderRespValidationError is the validation error returned by
// ListProviderResp.Validate if the designated constraints aren't met.
type ListProviderRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProviderRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProviderRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProviderRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProviderRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProviderRespValidationError) ErrorName() string { return "ListProviderRespValidationError" }

// Error satisfies the builtin error interface
func (e ListProviderRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProviderResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProviderRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProviderRespValidationError{}

// Validate checks the field values on UpdateProviderReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateProviderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProviderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProviderReqMultiError, or nil if none found.
func (m *UpdateProviderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProviderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Key

	// no validation rules for Secret

	if all {
		switch v := interface{}(m.GetLabels()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProviderReqValidationError{
					field:  "Labels",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProviderReqValidationError{
					field:  "Labels",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLabels()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProviderReqValidationError{
				field:  "Labels",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Operator

	if len(errors) > 0 {
		return UpdateProviderReqMultiError(errors)
	}
	return nil
}

// UpdateProviderReqMultiError is an error wrapping multiple validation errors
// returned by UpdateProviderReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateProviderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProviderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProviderReqMultiError) AllErrors() []error { return m }

// UpdateProviderReqValidationError is the validation error returned by
// UpdateProviderReq.Validate if the designated constraints aren't met.
type UpdateProviderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProviderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProviderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProviderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProviderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProviderReqValidationError) ErrorName() string {
	return "UpdateProviderReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProviderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProviderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProviderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProviderReqValidationError{}

// Validate checks the field values on UpdateProviderResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProviderResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProviderResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProviderRespMultiError, or nil if none found.
func (m *UpdateProviderResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProviderResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProviderRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProviderRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProviderRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProviderRespMultiError(errors)
	}
	return nil
}

// UpdateProviderRespMultiError is an error wrapping multiple validation errors
// returned by UpdateProviderResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateProviderRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProviderRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProviderRespMultiError) AllErrors() []error { return m }

// UpdateProviderRespValidationError is the validation error returned by
// UpdateProviderResp.Validate if the designated constraints aren't met.
type UpdateProviderRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProviderRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProviderRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProviderRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProviderRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProviderRespValidationError) ErrorName() string {
	return "UpdateProviderRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProviderRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProviderResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProviderRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProviderRespValidationError{}

// Validate checks the field values on DeleteProviderReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteProviderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProviderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProviderReqMultiError, or nil if none found.
func (m *DeleteProviderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProviderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteProviderReqMultiError(errors)
	}
	return nil
}

// DeleteProviderReqMultiError is an error wrapping multiple validation errors
// returned by DeleteProviderReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteProviderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProviderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProviderReqMultiError) AllErrors() []error { return m }

// DeleteProviderReqValidationError is the validation error returned by
// DeleteProviderReq.Validate if the designated constraints aren't met.
type DeleteProviderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProviderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProviderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProviderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProviderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProviderReqValidationError) ErrorName() string {
	return "DeleteProviderReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProviderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProviderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProviderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProviderReqValidationError{}

// Validate checks the field values on DeleteProviderResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProviderResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProviderResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProviderRespMultiError, or nil if none found.
func (m *DeleteProviderResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProviderResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if len(errors) > 0 {
		return DeleteProviderRespMultiError(errors)
	}
	return nil
}

// DeleteProviderRespMultiError is an error wrapping multiple validation errors
// returned by DeleteProviderResp.ValidateAll() if the designated constraints
// aren't met.
type DeleteProviderRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProviderRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProviderRespMultiError) AllErrors() []error { return m }

// DeleteProviderRespValidationError is the validation error returned by
// DeleteProviderResp.Validate if the designated constraints aren't met.
type DeleteProviderRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProviderRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProviderRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProviderRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProviderRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProviderRespValidationError) ErrorName() string {
	return "DeleteProviderRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProviderRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProviderResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProviderRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProviderRespValidationError{}

// Validate checks the field values on QueryProviderOrderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryProviderOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryProviderOrderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryProviderOrderReqMultiError, or nil if none found.
func (m *QueryProviderOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryProviderOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for OrderID

	// no validation rules for OrderType

	if len(errors) > 0 {
		return QueryProviderOrderReqMultiError(errors)
	}
	return nil
}

// QueryProviderOrderReqMultiError is an error wrapping multiple validation
// errors returned by QueryProviderOrderReq.ValidateAll() if the designated
// constraints aren't met.
type QueryProviderOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryProviderOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryProviderOrderReqMultiError) AllErrors() []error { return m }

// QueryProviderOrderReqValidationError is the validation error returned by
// QueryProviderOrderReq.Validate if the designated constraints aren't met.
type QueryProviderOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryProviderOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryProviderOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryProviderOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryProviderOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryProviderOrderReqValidationError) ErrorName() string {
	return "QueryProviderOrderReqValidationError"
}

// Error satisfies the builtin error interface
func (e QueryProviderOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryProviderOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryProviderOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryProviderOrderReqValidationError{}

// Validate checks the field values on QueryProviderOrderResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryProviderOrderResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryProviderOrderResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryProviderOrderRespMultiError, or nil if none found.
func (m *QueryProviderOrderResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryProviderOrderResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryProviderOrderRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryProviderOrderRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryProviderOrderRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryProviderOrderRespMultiError(errors)
	}
	return nil
}

// QueryProviderOrderRespMultiError is an error wrapping multiple validation
// errors returned by QueryProviderOrderResp.ValidateAll() if the designated
// constraints aren't met.
type QueryProviderOrderRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryProviderOrderRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryProviderOrderRespMultiError) AllErrors() []error { return m }

// QueryProviderOrderRespValidationError is the validation error returned by
// QueryProviderOrderResp.Validate if the designated constraints aren't met.
type QueryProviderOrderRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryProviderOrderRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryProviderOrderRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryProviderOrderRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryProviderOrderRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryProviderOrderRespValidationError) ErrorName() string {
	return "QueryProviderOrderRespValidationError"
}

// Error satisfies the builtin error interface
func (e QueryProviderOrderRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryProviderOrderResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryProviderOrderRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryProviderOrderRespValidationError{}

// Validate checks the field values on ProviderOrder with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProviderOrder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProviderOrder with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProviderOrderMultiError, or
// nil if none found.
func (m *ProviderOrder) ValidateAll() error {
	return m.validate(true)
}

func (m *ProviderOrder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Status

	// no validation rules for Message

	for idx, item := range m.GetDevices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProviderOrderValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProviderOrderValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProviderOrderValidationError{
					field:  fmt.Sprintf("Devices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProviderOrderMultiError(errors)
	}
	return nil
}

// ProviderOrderMultiError is an error wrapping multiple validation errors
// returned by ProviderOrder.ValidateAll() if the designated constraints
// aren't met.
type ProviderOrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProviderOrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProviderOrderMultiError) AllErrors() []error { return m }

// ProviderOrderValidationError is the validation error returned by
// ProviderOrder.Validate if the designated constraints aren't met.
type ProviderOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderOrderValidationError) ErrorName() string { return "ProviderOrderValidationError" }

// Error satisfies the builtin error interface
func (e ProviderOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProviderOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderOrderValidationError{}

// Validate checks the field values on QueryProviderNetworkReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryProviderNetworkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryProviderNetworkReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryProviderNetworkReqMultiError, or nil if none found.
func (m *QueryProviderNetworkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryProviderNetworkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Vpc

	// no validation rules for Zone

	// no validation rules for Region

	if len(errors) > 0 {
		return QueryProviderNetworkReqMultiError(errors)
	}
	return nil
}

// QueryProviderNetworkReqMultiError is an error wrapping multiple validation
// errors returned by QueryProviderNetworkReq.ValidateAll() if the designated
// constraints aren't met.
type QueryProviderNetworkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryProviderNetworkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryProviderNetworkReqMultiError) AllErrors() []error { return m }

// QueryProviderNetworkReqValidationError is the validation error returned by
// QueryProviderNetworkReq.Validate if the designated constraints aren't met.
type QueryProviderNetworkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryProviderNetworkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryProviderNetworkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryProviderNetworkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryProviderNetworkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryProviderNetworkReqValidationError) ErrorName() string {
	return "QueryProviderNetworkReqValidationError"
}

// Error satisfies the builtin error interface
func (e QueryProviderNetworkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryProviderNetworkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryProviderNetworkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryProviderNetworkReqValidationError{}

// Validate checks the field values on QueryProviderNetworkResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryProviderNetworkResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryProviderNetworkResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryProviderNetworkRespMultiError, or nil if none found.
func (m *QueryProviderNetworkResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryProviderNetworkResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryProviderNetworkRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryProviderNetworkRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryProviderNetworkRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryProviderNetworkRespMultiError(errors)
	}
	return nil
}

// QueryProviderNetworkRespMultiError is an error wrapping multiple validation
// errors returned by QueryProviderNetworkResp.ValidateAll() if the designated
// constraints aren't met.
type QueryProviderNetworkRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryProviderNetworkRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryProviderNetworkRespMultiError) AllErrors() []error { return m }

// QueryProviderNetworkRespValidationError is the validation error returned by
// QueryProviderNetworkResp.Validate if the designated constraints aren't met.
type QueryProviderNetworkRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryProviderNetworkRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryProviderNetworkRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryProviderNetworkRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryProviderNetworkRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryProviderNetworkRespValidationError) ErrorName() string {
	return "QueryProviderNetworkRespValidationError"
}

// Error satisfies the builtin error interface
func (e QueryProviderNetworkRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryProviderNetworkResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryProviderNetworkRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryProviderNetworkRespValidationError{}

// Validate checks the field values on ProviderNetwork with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProviderNetwork) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProviderNetwork with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProviderNetworkMultiError, or nil if none found.
func (m *ProviderNetwork) ValidateAll() error {
	return m.validate(true)
}

func (m *ProviderNetwork) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubnet() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProviderNetworkValidationError{
						field:  fmt.Sprintf("Subnet[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProviderNetworkValidationError{
						field:  fmt.Sprintf("Subnet[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProviderNetworkValidationError{
					field:  fmt.Sprintf("Subnet[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProviderNetworkMultiError(errors)
	}
	return nil
}

// ProviderNetworkMultiError is an error wrapping multiple validation errors
// returned by ProviderNetwork.ValidateAll() if the designated constraints
// aren't met.
type ProviderNetworkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProviderNetworkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProviderNetworkMultiError) AllErrors() []error { return m }

// ProviderNetworkValidationError is the validation error returned by
// ProviderNetwork.Validate if the designated constraints aren't met.
type ProviderNetworkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderNetworkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderNetworkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderNetworkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderNetworkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderNetworkValidationError) ErrorName() string { return "ProviderNetworkValidationError" }

// Error satisfies the builtin error interface
func (e ProviderNetworkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProviderNetwork.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderNetworkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderNetworkValidationError{}

// Validate checks the field values on ProviderSubnet with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProviderSubnet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProviderSubnet with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProviderSubnetMultiError,
// or nil if none found.
func (m *ProviderSubnet) ValidateAll() error {
	return m.validate(true)
}

func (m *ProviderSubnet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subnet

	// no validation rules for Name

	// no validation rules for LeftIPNum

	if len(errors) > 0 {
		return ProviderSubnetMultiError(errors)
	}
	return nil
}

// ProviderSubnetMultiError is an error wrapping multiple validation errors
// returned by ProviderSubnet.ValidateAll() if the designated constraints
// aren't met.
type ProviderSubnetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProviderSubnetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProviderSubnetMultiError) AllErrors() []error { return m }

// ProviderSubnetValidationError is the validation error returned by
// ProviderSubnet.Validate if the designated constraints aren't met.
type ProviderSubnetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderSubnetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderSubnetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderSubnetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderSubnetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderSubnetValidationError) ErrorName() string { return "ProviderSubnetValidationError" }

// Error satisfies the builtin error interface
func (e ProviderSubnetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProviderSubnet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderSubnetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderSubnetValidationError{}

// Validate checks the field values on GetDeviceRecordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeviceRecordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeviceRecordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeviceRecordReqMultiError, or nil if none found.
func (m *GetDeviceRecordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeviceRecordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceRecordID

	if len(errors) > 0 {
		return GetDeviceRecordReqMultiError(errors)
	}
	return nil
}

// GetDeviceRecordReqMultiError is an error wrapping multiple validation errors
// returned by GetDeviceRecordReq.ValidateAll() if the designated constraints
// aren't met.
type GetDeviceRecordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeviceRecordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeviceRecordReqMultiError) AllErrors() []error { return m }

// GetDeviceRecordReqValidationError is the validation error returned by
// GetDeviceRecordReq.Validate if the designated constraints aren't met.
type GetDeviceRecordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeviceRecordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeviceRecordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeviceRecordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeviceRecordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeviceRecordReqValidationError) ErrorName() string {
	return "GetDeviceRecordReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeviceRecordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeviceRecordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeviceRecordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeviceRecordReqValidationError{}

// Validate checks the field values on GetDeviceRecordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeviceRecordResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeviceRecordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeviceRecordRespMultiError, or nil if none found.
func (m *GetDeviceRecordResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeviceRecordResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDeviceRecordRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDeviceRecordRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDeviceRecordRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDeviceRecordRespMultiError(errors)
	}
	return nil
}

// GetDeviceRecordRespMultiError is an error wrapping multiple validation
// errors returned by GetDeviceRecordResp.ValidateAll() if the designated
// constraints aren't met.
type GetDeviceRecordRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeviceRecordRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeviceRecordRespMultiError) AllErrors() []error { return m }

// GetDeviceRecordRespValidationError is the validation error returned by
// GetDeviceRecordResp.Validate if the designated constraints aren't met.
type GetDeviceRecordRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeviceRecordRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeviceRecordRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeviceRecordRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeviceRecordRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeviceRecordRespValidationError) ErrorName() string {
	return "GetDeviceRecordRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeviceRecordRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeviceRecordResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeviceRecordRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeviceRecordRespValidationError{}

// Validate checks the field values on ListDeviceRecordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeviceRecordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeviceRecordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeviceRecordReqMultiError, or nil if none found.
func (m *ListDeviceRecordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeviceRecordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sort

	// no validation rules for Desc

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return ListDeviceRecordReqMultiError(errors)
	}
	return nil
}

// ListDeviceRecordReqMultiError is an error wrapping multiple validation
// errors returned by ListDeviceRecordReq.ValidateAll() if the designated
// constraints aren't met.
type ListDeviceRecordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeviceRecordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeviceRecordReqMultiError) AllErrors() []error { return m }

// ListDeviceRecordReqValidationError is the validation error returned by
// ListDeviceRecordReq.Validate if the designated constraints aren't met.
type ListDeviceRecordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeviceRecordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeviceRecordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeviceRecordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeviceRecordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeviceRecordReqValidationError) ErrorName() string {
	return "ListDeviceRecordReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeviceRecordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeviceRecordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeviceRecordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeviceRecordReqValidationError{}

// Validate checks the field values on ListDeviceRecordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeviceRecordResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeviceRecordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeviceRecordRespMultiError, or nil if none found.
func (m *ListDeviceRecordResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeviceRecordResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDeviceRecordRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDeviceRecordRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeviceRecordRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDeviceRecordRespMultiError(errors)
	}
	return nil
}

// ListDeviceRecordRespMultiError is an error wrapping multiple validation
// errors returned by ListDeviceRecordResp.ValidateAll() if the designated
// constraints aren't met.
type ListDeviceRecordRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeviceRecordRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeviceRecordRespMultiError) AllErrors() []error { return m }

// ListDeviceRecordRespValidationError is the validation error returned by
// ListDeviceRecordResp.Validate if the designated constraints aren't met.
type ListDeviceRecordRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeviceRecordRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeviceRecordRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeviceRecordRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeviceRecordRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeviceRecordRespValidationError) ErrorName() string {
	return "ListDeviceRecordRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeviceRecordRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeviceRecordResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeviceRecordRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeviceRecordRespValidationError{}

// Validate checks the field values on ListDeviceBillReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDeviceBillReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeviceBillReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeviceBillReqMultiError, or nil if none found.
func (m *ListDeviceBillReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeviceBillReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sort

	// no validation rules for Desc

	// no validation rules for Offset

	// no validation rules for Limit

	// no validation rules for Finished

	// no validation rules for LeftTime

	// no validation rules for RightTime

	if len(errors) > 0 {
		return ListDeviceBillReqMultiError(errors)
	}
	return nil
}

// ListDeviceBillReqMultiError is an error wrapping multiple validation errors
// returned by ListDeviceBillReq.ValidateAll() if the designated constraints
// aren't met.
type ListDeviceBillReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeviceBillReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeviceBillReqMultiError) AllErrors() []error { return m }

// ListDeviceBillReqValidationError is the validation error returned by
// ListDeviceBillReq.Validate if the designated constraints aren't met.
type ListDeviceBillReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeviceBillReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeviceBillReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeviceBillReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeviceBillReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeviceBillReqValidationError) ErrorName() string {
	return "ListDeviceBillReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeviceBillReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeviceBillReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeviceBillReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeviceBillReqValidationError{}

// Validate checks the field values on ListDeviceBillResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeviceBillResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeviceBillResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeviceBillRespMultiError, or nil if none found.
func (m *ListDeviceBillResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeviceBillResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDeviceBillRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDeviceBillRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeviceBillRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDeviceBillRespMultiError(errors)
	}
	return nil
}

// ListDeviceBillRespMultiError is an error wrapping multiple validation errors
// returned by ListDeviceBillResp.ValidateAll() if the designated constraints
// aren't met.
type ListDeviceBillRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeviceBillRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeviceBillRespMultiError) AllErrors() []error { return m }

// ListDeviceBillRespValidationError is the validation error returned by
// ListDeviceBillResp.Validate if the designated constraints aren't met.
type ListDeviceBillRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeviceBillRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeviceBillRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeviceBillRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeviceBillRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeviceBillRespValidationError) ErrorName() string {
	return "ListDeviceBillRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeviceBillRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeviceBillResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeviceBillRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeviceBillRespValidationError{}

// Validate checks the field values on DevicePool with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DevicePool) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DevicePool with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DevicePoolMultiError, or
// nil if none found.
func (m *DevicePool) ValidateAll() error {
	return m.validate(true)
}

func (m *DevicePool) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Provider

	if all {
		switch v := interface{}(m.GetBaseConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DevicePoolValidationError{
					field:  "BaseConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DevicePoolValidationError{
					field:  "BaseConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBaseConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DevicePoolValidationError{
				field:  "BaseConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for EnableAS

	if all {
		switch v := interface{}(m.GetAsOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DevicePoolValidationError{
					field:  "AsOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DevicePoolValidationError{
					field:  "AsOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAsOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DevicePoolValidationError{
				field:  "AsOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AsStatus

	// no validation rules for AsActionOrder

	// no validation rules for Reserved

	if len(errors) > 0 {
		return DevicePoolMultiError(errors)
	}
	return nil
}

// DevicePoolMultiError is an error wrapping multiple validation errors
// returned by DevicePool.ValidateAll() if the designated constraints aren't met.
type DevicePoolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DevicePoolMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DevicePoolMultiError) AllErrors() []error { return m }

// DevicePoolValidationError is the validation error returned by
// DevicePool.Validate if the designated constraints aren't met.
type DevicePoolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DevicePoolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DevicePoolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DevicePoolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DevicePoolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DevicePoolValidationError) ErrorName() string { return "DevicePoolValidationError" }

// Error satisfies the builtin error interface
func (e DevicePoolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevicePool.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DevicePoolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DevicePoolValidationError{}

// Validate checks the field values on DevicePoolAutoScalerOption with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DevicePoolAutoScalerOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DevicePoolAutoScalerOption with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DevicePoolAutoScalerOptionMultiError, or nil if none found.
func (m *DevicePoolAutoScalerOption) ValidateAll() error {
	return m.validate(true)
}

func (m *DevicePoolAutoScalerOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Settings

	if len(errors) > 0 {
		return DevicePoolAutoScalerOptionMultiError(errors)
	}
	return nil
}

// DevicePoolAutoScalerOptionMultiError is an error wrapping multiple
// validation errors returned by DevicePoolAutoScalerOption.ValidateAll() if
// the designated constraints aren't met.
type DevicePoolAutoScalerOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DevicePoolAutoScalerOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DevicePoolAutoScalerOptionMultiError) AllErrors() []error { return m }

// DevicePoolAutoScalerOptionValidationError is the validation error returned
// by DevicePoolAutoScalerOption.Validate if the designated constraints aren't met.
type DevicePoolAutoScalerOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DevicePoolAutoScalerOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DevicePoolAutoScalerOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DevicePoolAutoScalerOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DevicePoolAutoScalerOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DevicePoolAutoScalerOptionValidationError) ErrorName() string {
	return "DevicePoolAutoScalerOptionValidationError"
}

// Error satisfies the builtin error interface
func (e DevicePoolAutoScalerOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevicePoolAutoScalerOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DevicePoolAutoScalerOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DevicePoolAutoScalerOptionValidationError{}

// Validate checks the field values on Device with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Device) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Device with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DeviceMultiError, or nil if none found.
func (m *Device) ValidateAll() error {
	return m.validate(true)
}

func (m *Device) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Provider

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for LastConsumedTime

	// no validation rules for LastReturnedTime

	// no validation rules for LastConsumerID

	// no validation rules for LastRecordID

	// no validation rules for LastReturnRecordID

	// no validation rules for DevicePoolID

	if len(errors) > 0 {
		return DeviceMultiError(errors)
	}
	return nil
}

// DeviceMultiError is an error wrapping multiple validation errors returned by
// Device.ValidateAll() if the designated constraints aren't met.
type DeviceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceMultiError) AllErrors() []error { return m }

// DeviceValidationError is the validation error returned by Device.Validate if
// the designated constraints aren't met.
type DeviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceValidationError) ErrorName() string { return "DeviceValidationError" }

// Error satisfies the builtin error interface
func (e DeviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceValidationError{}

// Validate checks the field values on DeviceEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceEventMultiError, or
// nil if none found.
func (m *DeviceEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DeviceID

	// no validation rules for Type

	// no validation rules for Message

	// no validation rules for EventTime

	if len(errors) > 0 {
		return DeviceEventMultiError(errors)
	}
	return nil
}

// DeviceEventMultiError is an error wrapping multiple validation errors
// returned by DeviceEvent.ValidateAll() if the designated constraints aren't met.
type DeviceEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceEventMultiError) AllErrors() []error { return m }

// DeviceEventValidationError is the validation error returned by
// DeviceEvent.Validate if the designated constraints aren't met.
type DeviceEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceEventValidationError) ErrorName() string { return "DeviceEventValidationError" }

// Error satisfies the builtin error interface
func (e DeviceEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceEventValidationError{}

// Validate checks the field values on DeviceInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceInfoMultiError, or
// nil if none found.
func (m *DeviceInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Instance

	// no validation rules for InnerIP

	// no validation rules for InstanceType

	// no validation rules for Cpu

	// no validation rules for Mem

	// no validation rules for Gpu

	if all {
		switch v := interface{}(m.GetZone()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceInfoValidationError{
					field:  "Zone",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceInfoValidationError{
					field:  "Zone",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetZone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceInfoValidationError{
				field:  "Zone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSecurity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceInfoValidationError{
					field:  "Security",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceInfoValidationError{
					field:  "Security",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecurity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceInfoValidationError{
				field:  "Security",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceInfoValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceInfoValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceInfoValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Vpc

	// no validation rules for Region

	// no validation rules for Password

	if all {
		switch v := interface{}(m.GetSystemDisk()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceInfoValidationError{
					field:  "SystemDisk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceInfoValidationError{
					field:  "SystemDisk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSystemDisk()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceInfoValidationError{
				field:  "SystemDisk",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDataDisks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeviceInfoValidationError{
						field:  fmt.Sprintf("DataDisks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeviceInfoValidationError{
						field:  fmt.Sprintf("DataDisks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeviceInfoValidationError{
					field:  fmt.Sprintf("DataDisks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeviceInfoMultiError(errors)
	}
	return nil
}

// DeviceInfoMultiError is an error wrapping multiple validation errors
// returned by DeviceInfo.ValidateAll() if the designated constraints aren't met.
type DeviceInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceInfoMultiError) AllErrors() []error { return m }

// DeviceInfoValidationError is the validation error returned by
// DeviceInfo.Validate if the designated constraints aren't met.
type DeviceInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceInfoValidationError) ErrorName() string { return "DeviceInfoValidationError" }

// Error satisfies the builtin error interface
func (e DeviceInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceInfoValidationError{}

// Validate checks the field values on DeviceSecurity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceSecurity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceSecurity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceSecurityMultiError,
// or nil if none found.
func (m *DeviceSecurity) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceSecurity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Group

	// no validation rules for GroupName

	// no validation rules for GroupDescription

	if len(errors) > 0 {
		return DeviceSecurityMultiError(errors)
	}
	return nil
}

// DeviceSecurityMultiError is an error wrapping multiple validation errors
// returned by DeviceSecurity.ValidateAll() if the designated constraints
// aren't met.
type DeviceSecurityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceSecurityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceSecurityMultiError) AllErrors() []error { return m }

// DeviceSecurityValidationError is the validation error returned by
// DeviceSecurity.Validate if the designated constraints aren't met.
type DeviceSecurityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceSecurityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceSecurityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceSecurityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceSecurityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceSecurityValidationError) ErrorName() string { return "DeviceSecurityValidationError" }

// Error satisfies the builtin error interface
func (e DeviceSecurityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceSecurity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceSecurityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceSecurityValidationError{}

// Validate checks the field values on DeviceImage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceImage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceImage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceImageMultiError, or
// nil if none found.
func (m *DeviceImage) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceImage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Image

	// no validation rules for Name

	if len(errors) > 0 {
		return DeviceImageMultiError(errors)
	}
	return nil
}

// DeviceImageMultiError is an error wrapping multiple validation errors
// returned by DeviceImage.ValidateAll() if the designated constraints aren't met.
type DeviceImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceImageMultiError) AllErrors() []error { return m }

// DeviceImageValidationError is the validation error returned by
// DeviceImage.Validate if the designated constraints aren't met.
type DeviceImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceImageValidationError) ErrorName() string { return "DeviceImageValidationError" }

// Error satisfies the builtin error interface
func (e DeviceImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceImageValidationError{}

// Validate checks the field values on DeviceZone with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceZone) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceZone with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceZoneMultiError, or
// nil if none found.
func (m *DeviceZone) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceZone) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Zone

	// no validation rules for Subnet

	if len(errors) > 0 {
		return DeviceZoneMultiError(errors)
	}
	return nil
}

// DeviceZoneMultiError is an error wrapping multiple validation errors
// returned by DeviceZone.ValidateAll() if the designated constraints aren't met.
type DeviceZoneMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceZoneMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceZoneMultiError) AllErrors() []error { return m }

// DeviceZoneValidationError is the validation error returned by
// DeviceZone.Validate if the designated constraints aren't met.
type DeviceZoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceZoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceZoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceZoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceZoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceZoneValidationError) ErrorName() string { return "DeviceZoneValidationError" }

// Error satisfies the builtin error interface
func (e DeviceZoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceZone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceZoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceZoneValidationError{}

// Validate checks the field values on DeviceRecord with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceRecord with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceRecordMultiError, or
// nil if none found.
func (m *DeviceRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DeviceConsumerID

	// no validation rules for RequestTime

	// no validation rules for FinishTime

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for Message

	// no validation rules for Num

	for idx, item := range m.GetDesires() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeviceRecordValidationError{
						field:  fmt.Sprintf("Desires[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeviceRecordValidationError{
						field:  fmt.Sprintf("Desires[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeviceRecordValidationError{
					field:  fmt.Sprintf("Desires[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SelectedPool

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for ConsumerLabels

	for idx, item := range m.GetDeviceDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeviceRecordValidationError{
						field:  fmt.Sprintf("DeviceDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeviceRecordValidationError{
						field:  fmt.Sprintf("DeviceDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeviceRecordValidationError{
					field:  fmt.Sprintf("DeviceDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ExtraLabels

	// no validation rules for SnapshotPool

	// no validation rules for Provider

	if len(errors) > 0 {
		return DeviceRecordMultiError(errors)
	}
	return nil
}

// DeviceRecordMultiError is an error wrapping multiple validation errors
// returned by DeviceRecord.ValidateAll() if the designated constraints aren't met.
type DeviceRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceRecordMultiError) AllErrors() []error { return m }

// DeviceRecordValidationError is the validation error returned by
// DeviceRecord.Validate if the designated constraints aren't met.
type DeviceRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceRecordValidationError) ErrorName() string { return "DeviceRecordValidationError" }

// Error satisfies the builtin error interface
func (e DeviceRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceRecordValidationError{}

// Validate checks the field values on DeviceBill with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceBill) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceBill with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceBillMultiError, or
// nil if none found.
func (m *DeviceBill) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceBill) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DeviceID

	// no validation rules for DeviceConsumerID

	// no validation rules for ConsumeRequestTime

	// no validation rules for ConsumeTime

	// no validation rules for ReturnRequestTime

	// no validation rules for ReturnTime

	// no validation rules for Finished

	// no validation rules for ConsumerLabels

	// no validation rules for DeviceRecordID

	if all {
		switch v := interface{}(m.GetDeviceInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceBillValidationError{
					field:  "DeviceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceBillValidationError{
					field:  "DeviceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeviceInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceBillValidationError{
				field:  "DeviceInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Provider

	if len(errors) > 0 {
		return DeviceBillMultiError(errors)
	}
	return nil
}

// DeviceBillMultiError is an error wrapping multiple validation errors
// returned by DeviceBill.ValidateAll() if the designated constraints aren't met.
type DeviceBillMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceBillMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceBillMultiError) AllErrors() []error { return m }

// DeviceBillValidationError is the validation error returned by
// DeviceBill.Validate if the designated constraints aren't met.
type DeviceBillValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceBillValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceBillValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceBillValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceBillValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceBillValidationError) ErrorName() string { return "DeviceBillValidationError" }

// Error satisfies the builtin error interface
func (e DeviceBillValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceBill.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceBillValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceBillValidationError{}

// Validate checks the field values on Provider with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Provider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Provider with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProviderMultiError, or nil
// if none found.
func (m *Provider) ValidateAll() error {
	return m.validate(true)
}

func (m *Provider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Key

	// no validation rules for Secret

	// no validation rules for Labels

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return ProviderMultiError(errors)
	}
	return nil
}

// ProviderMultiError is an error wrapping multiple validation errors returned
// by Provider.ValidateAll() if the designated constraints aren't met.
type ProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProviderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProviderMultiError) AllErrors() []error { return m }

// ProviderValidationError is the validation error returned by
// Provider.Validate if the designated constraints aren't met.
type ProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderValidationError) ErrorName() string { return "ProviderValidationError" }

// Error satisfies the builtin error interface
func (e ProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderValidationError{}

// Validate checks the field values on CreateResourcePoolReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateResourcePoolReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateResourcePoolReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateResourcePoolReqMultiError, or nil if none found.
func (m *CreateResourcePoolReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateResourcePoolReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 64 {
		err := CreateResourcePoolReqValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Labels

	// no validation rules for Annotations

	// no validation rules for Comment

	if len(errors) > 0 {
		return CreateResourcePoolReqMultiError(errors)
	}
	return nil
}

// CreateResourcePoolReqMultiError is an error wrapping multiple validation
// errors returned by CreateResourcePoolReq.ValidateAll() if the designated
// constraints aren't met.
type CreateResourcePoolReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateResourcePoolReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateResourcePoolReqMultiError) AllErrors() []error { return m }

// CreateResourcePoolReqValidationError is the validation error returned by
// CreateResourcePoolReq.Validate if the designated constraints aren't met.
type CreateResourcePoolReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResourcePoolReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResourcePoolReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResourcePoolReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResourcePoolReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResourcePoolReqValidationError) ErrorName() string {
	return "CreateResourcePoolReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateResourcePoolReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateResourcePoolReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResourcePoolReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResourcePoolReqValidationError{}

// Validate checks the field values on CreateResourcePoolResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateResourcePoolResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateResourcePoolResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateResourcePoolRespMultiError, or nil if none found.
func (m *CreateResourcePoolResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateResourcePoolResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateResourcePoolRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateResourcePoolRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateResourcePoolRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateResourcePoolRespMultiError(errors)
	}
	return nil
}

// CreateResourcePoolRespMultiError is an error wrapping multiple validation
// errors returned by CreateResourcePoolResp.ValidateAll() if the designated
// constraints aren't met.
type CreateResourcePoolRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateResourcePoolRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateResourcePoolRespMultiError) AllErrors() []error { return m }

// CreateResourcePoolRespValidationError is the validation error returned by
// CreateResourcePoolResp.Validate if the designated constraints aren't met.
type CreateResourcePoolRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResourcePoolRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResourcePoolRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResourcePoolRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResourcePoolRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResourcePoolRespValidationError) ErrorName() string {
	return "CreateResourcePoolRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateResourcePoolRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateResourcePoolResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResourcePoolRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResourcePoolRespValidationError{}

// Validate checks the field values on ListResourcePoolReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListResourcePoolReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResourcePoolReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListResourcePoolReqMultiError, or nil if none found.
func (m *ListResourcePoolReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResourcePoolReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ListResourcePoolReqMultiError(errors)
	}
	return nil
}

// ListResourcePoolReqMultiError is an error wrapping multiple validation
// errors returned by ListResourcePoolReq.ValidateAll() if the designated
// constraints aren't met.
type ListResourcePoolReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResourcePoolReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResourcePoolReqMultiError) AllErrors() []error { return m }

// ListResourcePoolReqValidationError is the validation error returned by
// ListResourcePoolReq.Validate if the designated constraints aren't met.
type ListResourcePoolReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResourcePoolReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResourcePoolReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResourcePoolReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResourcePoolReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResourcePoolReqValidationError) ErrorName() string {
	return "ListResourcePoolReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListResourcePoolReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResourcePoolReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResourcePoolReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResourcePoolReqValidationError{}

// Validate checks the field values on ListResourcePoolResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListResourcePoolResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResourcePoolResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListResourcePoolRespMultiError, or nil if none found.
func (m *ListResourcePoolResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResourcePoolResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListResourcePoolRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListResourcePoolRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListResourcePoolRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListResourcePoolRespMultiError(errors)
	}
	return nil
}

// ListResourcePoolRespMultiError is an error wrapping multiple validation
// errors returned by ListResourcePoolResp.ValidateAll() if the designated
// constraints aren't met.
type ListResourcePoolRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResourcePoolRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResourcePoolRespMultiError) AllErrors() []error { return m }

// ListResourcePoolRespValidationError is the validation error returned by
// ListResourcePoolResp.Validate if the designated constraints aren't met.
type ListResourcePoolRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResourcePoolRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResourcePoolRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResourcePoolRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResourcePoolRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResourcePoolRespValidationError) ErrorName() string {
	return "ListResourcePoolRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListResourcePoolRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResourcePoolResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResourcePoolRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResourcePoolRespValidationError{}

// Validate checks the field values on ResourcePool with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResourcePool) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourcePool with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourcePoolMultiError, or
// nil if none found.
func (m *ResourcePool) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourcePool) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Comment

	// no validation rules for Labels

	// no validation rules for Annotations

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return ResourcePoolMultiError(errors)
	}
	return nil
}

// ResourcePoolMultiError is an error wrapping multiple validation errors
// returned by ResourcePool.ValidateAll() if the designated constraints aren't met.
type ResourcePoolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourcePoolMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourcePoolMultiError) AllErrors() []error { return m }

// ResourcePoolValidationError is the validation error returned by
// ResourcePool.Validate if the designated constraints aren't met.
type ResourcePoolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourcePoolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourcePoolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourcePoolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourcePoolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourcePoolValidationError) ErrorName() string { return "ResourcePoolValidationError" }

// Error satisfies the builtin error interface
func (e ResourcePoolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourcePool.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourcePoolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourcePoolValidationError{}

// Validate checks the field values on ImportResourceReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ImportResourceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportResourceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportResourceReqMultiError, or nil if none found.
func (m *ImportResourceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportResourceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPoolID()); l < 2 || l > 30 {
		err := ImportResourceReqValidationError{
			field:  "PoolID",
			reason: "value length must be between 2 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ImportResourceReq_PoolID_Pattern.MatchString(m.GetPoolID()) {
		err := ImportResourceReqValidationError{
			field:  "PoolID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportResourceReqValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportResourceReqValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportResourceReqValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Operator

	if len(errors) > 0 {
		return ImportResourceReqMultiError(errors)
	}
	return nil
}

// ImportResourceReqMultiError is an error wrapping multiple validation errors
// returned by ImportResourceReq.ValidateAll() if the designated constraints
// aren't met.
type ImportResourceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportResourceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportResourceReqMultiError) AllErrors() []error { return m }

// ImportResourceReqValidationError is the validation error returned by
// ImportResourceReq.Validate if the designated constraints aren't met.
type ImportResourceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportResourceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportResourceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportResourceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportResourceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportResourceReqValidationError) ErrorName() string {
	return "ImportResourceReqValidationError"
}

// Error satisfies the builtin error interface
func (e ImportResourceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportResourceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportResourceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportResourceReqValidationError{}

var _ImportResourceReq_PoolID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on ImportResourceResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportResourceResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportResourceResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportResourceRespMultiError, or nil if none found.
func (m *ImportResourceResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportResourceResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportResourceRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportResourceRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportResourceRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImportResourceRespMultiError(errors)
	}
	return nil
}

// ImportResourceRespMultiError is an error wrapping multiple validation errors
// returned by ImportResourceResp.ValidateAll() if the designated constraints
// aren't met.
type ImportResourceRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportResourceRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportResourceRespMultiError) AllErrors() []error { return m }

// ImportResourceRespValidationError is the validation error returned by
// ImportResourceResp.Validate if the designated constraints aren't met.
type ImportResourceRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportResourceRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportResourceRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportResourceRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportResourceRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportResourceRespValidationError) ErrorName() string {
	return "ImportResourceRespValidationError"
}

// Error satisfies the builtin error interface
func (e ImportResourceRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportResourceResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportResourceRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportResourceRespValidationError{}

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceMultiError, or nil
// if none found.
func (m *Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for InnerIP

	// no validation rules for InnerIPv6

	// no validation rules for ResourceType

	// no validation rules for ResourceProvider

	// no validation rules for PoolID

	// no validation rules for Labels

	// no validation rules for Annotations

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResourceMultiError(errors)
	}
	return nil
}

// ResourceMultiError is an error wrapping multiple validation errors returned
// by Resource.ValidateAll() if the designated constraints aren't met.
type ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMultiError) AllErrors() []error { return m }

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

// Validate checks the field values on ResourceStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResourceStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceStatusMultiError,
// or nil if none found.
func (m *ResourceStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phase

	// no validation rules for UpdateTime

	// no validation rules for ConsumeOrderID

	// no validation rules for DevicePoolID

	// no validation rules for ClusterID

	// no validation rules for ReturnOrderID

	if len(errors) > 0 {
		return ResourceStatusMultiError(errors)
	}
	return nil
}

// ResourceStatusMultiError is an error wrapping multiple validation errors
// returned by ResourceStatus.ValidateAll() if the designated constraints
// aren't met.
type ResourceStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceStatusMultiError) AllErrors() []error { return m }

// ResourceStatusValidationError is the validation error returned by
// ResourceStatus.Validate if the designated constraints aren't met.
type ResourceStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceStatusValidationError) ErrorName() string { return "ResourceStatusValidationError" }

// Error satisfies the builtin error interface
func (e ResourceStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceStatusValidationError{}

// Validate checks the field values on ListResourceReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListResourceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResourceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListResourceReqMultiError, or nil if none found.
func (m *ListResourceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResourceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPoolID()); l < 2 || l > 30 {
		err := ListResourceReqValidationError{
			field:  "PoolID",
			reason: "value length must be between 2 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListResourceReq_PoolID_Pattern.MatchString(m.GetPoolID()) {
		err := ListResourceReqValidationError{
			field:  "PoolID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Consumable

	// no validation rules for MatchConsumerID

	// no validation rules for MatchDeviceRecordID

	if len(errors) > 0 {
		return ListResourceReqMultiError(errors)
	}
	return nil
}

// ListResourceReqMultiError is an error wrapping multiple validation errors
// returned by ListResourceReq.ValidateAll() if the designated constraints
// aren't met.
type ListResourceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResourceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResourceReqMultiError) AllErrors() []error { return m }

// ListResourceReqValidationError is the validation error returned by
// ListResourceReq.Validate if the designated constraints aren't met.
type ListResourceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResourceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResourceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResourceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResourceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResourceReqValidationError) ErrorName() string { return "ListResourceReqValidationError" }

// Error satisfies the builtin error interface
func (e ListResourceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResourceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResourceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResourceReqValidationError{}

var _ListResourceReq_PoolID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on ListDeviceRecordByPoolReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeviceRecordByPoolReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeviceRecordByPoolReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeviceRecordByPoolReqMultiError, or nil if none found.
func (m *ListDeviceRecordByPoolReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeviceRecordByPoolReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPoolID()); l < 2 || l > 30 {
		err := ListDeviceRecordByPoolReqValidationError{
			field:  "PoolID",
			reason: "value length must be between 2 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListDeviceRecordByPoolReq_PoolID_Pattern.MatchString(m.GetPoolID()) {
		err := ListDeviceRecordByPoolReqValidationError{
			field:  "PoolID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Sort

	// no validation rules for Desc

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return ListDeviceRecordByPoolReqMultiError(errors)
	}
	return nil
}

// ListDeviceRecordByPoolReqMultiError is an error wrapping multiple validation
// errors returned by ListDeviceRecordByPoolReq.ValidateAll() if the
// designated constraints aren't met.
type ListDeviceRecordByPoolReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeviceRecordByPoolReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeviceRecordByPoolReqMultiError) AllErrors() []error { return m }

// ListDeviceRecordByPoolReqValidationError is the validation error returned by
// ListDeviceRecordByPoolReq.Validate if the designated constraints aren't met.
type ListDeviceRecordByPoolReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeviceRecordByPoolReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeviceRecordByPoolReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeviceRecordByPoolReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeviceRecordByPoolReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeviceRecordByPoolReqValidationError) ErrorName() string {
	return "ListDeviceRecordByPoolReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeviceRecordByPoolReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeviceRecordByPoolReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeviceRecordByPoolReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeviceRecordByPoolReqValidationError{}

var _ListDeviceRecordByPoolReq_PoolID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on ListResourceResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListResourceResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResourceResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListResourceRespMultiError, or nil if none found.
func (m *ListResourceResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResourceResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListResourceRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListResourceRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListResourceRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListResourceRespMultiError(errors)
	}
	return nil
}

// ListResourceRespMultiError is an error wrapping multiple validation errors
// returned by ListResourceResp.ValidateAll() if the designated constraints
// aren't met.
type ListResourceRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResourceRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResourceRespMultiError) AllErrors() []error { return m }

// ListResourceRespValidationError is the validation error returned by
// ListResourceResp.Validate if the designated constraints aren't met.
type ListResourceRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResourceRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResourceRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResourceRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResourceRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResourceRespValidationError) ErrorName() string { return "ListResourceRespValidationError" }

// Error satisfies the builtin error interface
func (e ListResourceRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResourceResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResourceRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResourceRespValidationError{}

// Validate checks the field values on CreateDeviceRecordByPoolReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDeviceRecordByPoolReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeviceRecordByPoolReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeviceRecordByPoolReqMultiError, or nil if none found.
func (m *CreateDeviceRecordByPoolReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeviceRecordByPoolReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPoolID()); l < 2 || l > 30 {
		err := CreateDeviceRecordByPoolReqValidationError{
			field:  "PoolID",
			reason: "value length must be between 2 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateDeviceRecordByPoolReq_PoolID_Pattern.MatchString(m.GetPoolID()) {
		err := CreateDeviceRecordByPoolReqValidationError{
			field:  "PoolID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Num

	if all {
		switch v := interface{}(m.GetDesire()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDeviceRecordByPoolReqValidationError{
					field:  "Desire",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDeviceRecordByPoolReqValidationError{
					field:  "Desire",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDesire()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDeviceRecordByPoolReqValidationError{
				field:  "Desire",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DrainDelay

	if len(errors) > 0 {
		return CreateDeviceRecordByPoolReqMultiError(errors)
	}
	return nil
}

// CreateDeviceRecordByPoolReqMultiError is an error wrapping multiple
// validation errors returned by CreateDeviceRecordByPoolReq.ValidateAll() if
// the designated constraints aren't met.
type CreateDeviceRecordByPoolReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeviceRecordByPoolReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeviceRecordByPoolReqMultiError) AllErrors() []error { return m }

// CreateDeviceRecordByPoolReqValidationError is the validation error returned
// by CreateDeviceRecordByPoolReq.Validate if the designated constraints
// aren't met.
type CreateDeviceRecordByPoolReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeviceRecordByPoolReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeviceRecordByPoolReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeviceRecordByPoolReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeviceRecordByPoolReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeviceRecordByPoolReqValidationError) ErrorName() string {
	return "CreateDeviceRecordByPoolReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeviceRecordByPoolReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeviceRecordByPoolReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeviceRecordByPoolReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeviceRecordByPoolReqValidationError{}

var _CreateDeviceRecordByPoolReq_PoolID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on CreateDeviceRecordByPoolResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDeviceRecordByPoolResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeviceRecordByPoolResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeviceRecordByPoolRespMultiError, or nil if none found.
func (m *CreateDeviceRecordByPoolResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeviceRecordByPoolResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDeviceRecordByPoolRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDeviceRecordByPoolRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDeviceRecordByPoolRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDeviceRecordByPoolRespMultiError(errors)
	}
	return nil
}

// CreateDeviceRecordByPoolRespMultiError is an error wrapping multiple
// validation errors returned by CreateDeviceRecordByPoolResp.ValidateAll() if
// the designated constraints aren't met.
type CreateDeviceRecordByPoolRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeviceRecordByPoolRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeviceRecordByPoolRespMultiError) AllErrors() []error { return m }

// CreateDeviceRecordByPoolRespValidationError is the validation error returned
// by CreateDeviceRecordByPoolResp.Validate if the designated constraints
// aren't met.
type CreateDeviceRecordByPoolRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeviceRecordByPoolRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeviceRecordByPoolRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeviceRecordByPoolRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeviceRecordByPoolRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeviceRecordByPoolRespValidationError) ErrorName() string {
	return "CreateDeviceRecordByPoolRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeviceRecordByPoolRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeviceRecordByPoolResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeviceRecordByPoolRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeviceRecordByPoolRespValidationError{}

// Validate checks the field values on GetDeviceReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDeviceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeviceReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDeviceReqMultiError, or
// nil if none found.
func (m *GetDeviceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeviceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetDeviceID()); l < 2 || l > 30 {
		err := GetDeviceReqValidationError{
			field:  "DeviceID",
			reason: "value length must be between 2 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetDeviceReq_DeviceID_Pattern.MatchString(m.GetDeviceID()) {
		err := GetDeviceReqValidationError{
			field:  "DeviceID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDeviceReqMultiError(errors)
	}
	return nil
}

// GetDeviceReqMultiError is an error wrapping multiple validation errors
// returned by GetDeviceReq.ValidateAll() if the designated constraints aren't met.
type GetDeviceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeviceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeviceReqMultiError) AllErrors() []error { return m }

// GetDeviceReqValidationError is the validation error returned by
// GetDeviceReq.Validate if the designated constraints aren't met.
type GetDeviceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeviceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeviceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeviceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeviceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeviceReqValidationError) ErrorName() string { return "GetDeviceReqValidationError" }

// Error satisfies the builtin error interface
func (e GetDeviceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeviceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeviceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeviceReqValidationError{}

var _GetDeviceReq_DeviceID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on GetDeviceResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDeviceResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeviceResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDeviceRespMultiError, or
// nil if none found.
func (m *GetDeviceResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeviceResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDeviceRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDeviceRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDeviceRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDeviceRespMultiError(errors)
	}
	return nil
}

// GetDeviceRespMultiError is an error wrapping multiple validation errors
// returned by GetDeviceResp.ValidateAll() if the designated constraints
// aren't met.
type GetDeviceRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeviceRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeviceRespMultiError) AllErrors() []error { return m }

// GetDeviceRespValidationError is the validation error returned by
// GetDeviceResp.Validate if the designated constraints aren't met.
type GetDeviceRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeviceRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeviceRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeviceRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeviceRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeviceRespValidationError) ErrorName() string { return "GetDeviceRespValidationError" }

// Error satisfies the builtin error interface
func (e GetDeviceRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeviceResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeviceRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeviceRespValidationError{}

// Validate checks the field values on ListDevicesReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListDevicesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDevicesReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListDevicesReqMultiError,
// or nil if none found.
func (m *ListDevicesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDevicesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sort

	// no validation rules for Desc

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return ListDevicesReqMultiError(errors)
	}
	return nil
}

// ListDevicesReqMultiError is an error wrapping multiple validation errors
// returned by ListDevicesReq.ValidateAll() if the designated constraints
// aren't met.
type ListDevicesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDevicesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDevicesReqMultiError) AllErrors() []error { return m }

// ListDevicesReqValidationError is the validation error returned by
// ListDevicesReq.Validate if the designated constraints aren't met.
type ListDevicesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDevicesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDevicesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDevicesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDevicesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDevicesReqValidationError) ErrorName() string { return "ListDevicesReqValidationError" }

// Error satisfies the builtin error interface
func (e ListDevicesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDevicesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDevicesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDevicesReqValidationError{}

// Validate checks the field values on ListDevicesResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDevicesResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDevicesResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDevicesRespMultiError, or nil if none found.
func (m *ListDevicesResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDevicesResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDevicesRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDevicesRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDevicesRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDevicesRespMultiError(errors)
	}
	return nil
}

// ListDevicesRespMultiError is an error wrapping multiple validation errors
// returned by ListDevicesResp.ValidateAll() if the designated constraints
// aren't met.
type ListDevicesRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDevicesRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDevicesRespMultiError) AllErrors() []error { return m }

// ListDevicesRespValidationError is the validation error returned by
// ListDevicesResp.Validate if the designated constraints aren't met.
type ListDevicesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDevicesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDevicesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDevicesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDevicesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDevicesRespValidationError) ErrorName() string { return "ListDevicesRespValidationError" }

// Error satisfies the builtin error interface
func (e ListDevicesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDevicesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDevicesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDevicesRespValidationError{}

// Validate checks the field values on UpdateDeviceReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeviceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeviceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeviceReqMultiError, or nil if none found.
func (m *UpdateDeviceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeviceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetDeviceID()); l < 2 || l > 30 {
		err := UpdateDeviceReqValidationError{
			field:  "DeviceID",
			reason: "value length must be between 2 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateDeviceReq_DeviceID_Pattern.MatchString(m.GetDeviceID()) {
		err := UpdateDeviceReqValidationError{
			field:  "DeviceID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Provider

	// no validation rules for Pool

	// no validation rules for Status

	// no validation rules for SystemID

	if len(errors) > 0 {
		return UpdateDeviceReqMultiError(errors)
	}
	return nil
}

// UpdateDeviceReqMultiError is an error wrapping multiple validation errors
// returned by UpdateDeviceReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateDeviceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeviceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeviceReqMultiError) AllErrors() []error { return m }

// UpdateDeviceReqValidationError is the validation error returned by
// UpdateDeviceReq.Validate if the designated constraints aren't met.
type UpdateDeviceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeviceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeviceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeviceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeviceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeviceReqValidationError) ErrorName() string { return "UpdateDeviceReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateDeviceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeviceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeviceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeviceReqValidationError{}

var _UpdateDeviceReq_DeviceID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on UpdateDeviceResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeviceResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeviceResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeviceRespMultiError, or nil if none found.
func (m *UpdateDeviceResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeviceResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDeviceRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDeviceRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDeviceRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDeviceRespMultiError(errors)
	}
	return nil
}

// UpdateDeviceRespMultiError is an error wrapping multiple validation errors
// returned by UpdateDeviceResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateDeviceRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeviceRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeviceRespMultiError) AllErrors() []error { return m }

// UpdateDeviceRespValidationError is the validation error returned by
// UpdateDeviceResp.Validate if the designated constraints aren't met.
type UpdateDeviceRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeviceRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeviceRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeviceRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeviceRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeviceRespValidationError) ErrorName() string { return "UpdateDeviceRespValidationError" }

// Error satisfies the builtin error interface
func (e UpdateDeviceRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeviceResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeviceRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeviceRespValidationError{}
