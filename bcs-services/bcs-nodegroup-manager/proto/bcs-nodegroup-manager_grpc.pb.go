// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/bcs-nodegroup-manager.proto

package nodegroupmanager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodegroupManagerClient is the client API for NodegroupManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodegroupManagerClient interface {
	GetClusterAutoscalerReview(ctx context.Context, in *ClusterAutoscalerReview, opts ...grpc.CallOption) (*ClusterAutoscalerReview, error)
	CreateNodePoolMgrStrategy(ctx context.Context, in *CreateNodePoolMgrStrategyReq, opts ...grpc.CallOption) (*CreateNodePoolMgrStrategyRsp, error)
	UpdateNodePoolMgrStrategy(ctx context.Context, in *UpdateNodePoolMgrStrategyReq, opts ...grpc.CallOption) (*CreateNodePoolMgrStrategyRsp, error)
	GetNodePoolMgrStrategy(ctx context.Context, in *GetNodePoolMgrStrategyReq, opts ...grpc.CallOption) (*GetNodePoolMgrStrategyRsp, error)
	ListNodePoolMgrStrategies(ctx context.Context, in *ListNodePoolMgrStrategyReq, opts ...grpc.CallOption) (*ListNodePoolMgrStrategyRsp, error)
	DeleteNodePoolMgrStrategy(ctx context.Context, in *DeleteNodePoolMgrStrategyReq, opts ...grpc.CallOption) (*DeleteNodePoolMgrStrategyRsp, error)
}

type nodegroupManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewNodegroupManagerClient(cc grpc.ClientConnInterface) NodegroupManagerClient {
	return &nodegroupManagerClient{cc}
}

func (c *nodegroupManagerClient) GetClusterAutoscalerReview(ctx context.Context, in *ClusterAutoscalerReview, opts ...grpc.CallOption) (*ClusterAutoscalerReview, error) {
	out := new(ClusterAutoscalerReview)
	err := c.cc.Invoke(ctx, "/nodegroupmanager.NodegroupManager/GetClusterAutoscalerReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodegroupManagerClient) CreateNodePoolMgrStrategy(ctx context.Context, in *CreateNodePoolMgrStrategyReq, opts ...grpc.CallOption) (*CreateNodePoolMgrStrategyRsp, error) {
	out := new(CreateNodePoolMgrStrategyRsp)
	err := c.cc.Invoke(ctx, "/nodegroupmanager.NodegroupManager/CreateNodePoolMgrStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodegroupManagerClient) UpdateNodePoolMgrStrategy(ctx context.Context, in *UpdateNodePoolMgrStrategyReq, opts ...grpc.CallOption) (*CreateNodePoolMgrStrategyRsp, error) {
	out := new(CreateNodePoolMgrStrategyRsp)
	err := c.cc.Invoke(ctx, "/nodegroupmanager.NodegroupManager/UpdateNodePoolMgrStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodegroupManagerClient) GetNodePoolMgrStrategy(ctx context.Context, in *GetNodePoolMgrStrategyReq, opts ...grpc.CallOption) (*GetNodePoolMgrStrategyRsp, error) {
	out := new(GetNodePoolMgrStrategyRsp)
	err := c.cc.Invoke(ctx, "/nodegroupmanager.NodegroupManager/GetNodePoolMgrStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodegroupManagerClient) ListNodePoolMgrStrategies(ctx context.Context, in *ListNodePoolMgrStrategyReq, opts ...grpc.CallOption) (*ListNodePoolMgrStrategyRsp, error) {
	out := new(ListNodePoolMgrStrategyRsp)
	err := c.cc.Invoke(ctx, "/nodegroupmanager.NodegroupManager/ListNodePoolMgrStrategies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodegroupManagerClient) DeleteNodePoolMgrStrategy(ctx context.Context, in *DeleteNodePoolMgrStrategyReq, opts ...grpc.CallOption) (*DeleteNodePoolMgrStrategyRsp, error) {
	out := new(DeleteNodePoolMgrStrategyRsp)
	err := c.cc.Invoke(ctx, "/nodegroupmanager.NodegroupManager/DeleteNodePoolMgrStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodegroupManagerServer is the server API for NodegroupManager service.
// All implementations must embed UnimplementedNodegroupManagerServer
// for forward compatibility
type NodegroupManagerServer interface {
	GetClusterAutoscalerReview(context.Context, *ClusterAutoscalerReview) (*ClusterAutoscalerReview, error)
	CreateNodePoolMgrStrategy(context.Context, *CreateNodePoolMgrStrategyReq) (*CreateNodePoolMgrStrategyRsp, error)
	UpdateNodePoolMgrStrategy(context.Context, *UpdateNodePoolMgrStrategyReq) (*CreateNodePoolMgrStrategyRsp, error)
	GetNodePoolMgrStrategy(context.Context, *GetNodePoolMgrStrategyReq) (*GetNodePoolMgrStrategyRsp, error)
	ListNodePoolMgrStrategies(context.Context, *ListNodePoolMgrStrategyReq) (*ListNodePoolMgrStrategyRsp, error)
	DeleteNodePoolMgrStrategy(context.Context, *DeleteNodePoolMgrStrategyReq) (*DeleteNodePoolMgrStrategyRsp, error)
	mustEmbedUnimplementedNodegroupManagerServer()
}

// UnimplementedNodegroupManagerServer must be embedded to have forward compatible implementations.
type UnimplementedNodegroupManagerServer struct {
}

func (UnimplementedNodegroupManagerServer) GetClusterAutoscalerReview(context.Context, *ClusterAutoscalerReview) (*ClusterAutoscalerReview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterAutoscalerReview not implemented")
}
func (UnimplementedNodegroupManagerServer) CreateNodePoolMgrStrategy(context.Context, *CreateNodePoolMgrStrategyReq) (*CreateNodePoolMgrStrategyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNodePoolMgrStrategy not implemented")
}
func (UnimplementedNodegroupManagerServer) UpdateNodePoolMgrStrategy(context.Context, *UpdateNodePoolMgrStrategyReq) (*CreateNodePoolMgrStrategyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodePoolMgrStrategy not implemented")
}
func (UnimplementedNodegroupManagerServer) GetNodePoolMgrStrategy(context.Context, *GetNodePoolMgrStrategyReq) (*GetNodePoolMgrStrategyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodePoolMgrStrategy not implemented")
}
func (UnimplementedNodegroupManagerServer) ListNodePoolMgrStrategies(context.Context, *ListNodePoolMgrStrategyReq) (*ListNodePoolMgrStrategyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodePoolMgrStrategies not implemented")
}
func (UnimplementedNodegroupManagerServer) DeleteNodePoolMgrStrategy(context.Context, *DeleteNodePoolMgrStrategyReq) (*DeleteNodePoolMgrStrategyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodePoolMgrStrategy not implemented")
}
func (UnimplementedNodegroupManagerServer) mustEmbedUnimplementedNodegroupManagerServer() {}

// UnsafeNodegroupManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodegroupManagerServer will
// result in compilation errors.
type UnsafeNodegroupManagerServer interface {
	mustEmbedUnimplementedNodegroupManagerServer()
}

func RegisterNodegroupManagerServer(s grpc.ServiceRegistrar, srv NodegroupManagerServer) {
	s.RegisterService(&NodegroupManager_ServiceDesc, srv)
}

func _NodegroupManager_GetClusterAutoscalerReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterAutoscalerReview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodegroupManagerServer).GetClusterAutoscalerReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodegroupmanager.NodegroupManager/GetClusterAutoscalerReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodegroupManagerServer).GetClusterAutoscalerReview(ctx, req.(*ClusterAutoscalerReview))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodegroupManager_CreateNodePoolMgrStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodePoolMgrStrategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodegroupManagerServer).CreateNodePoolMgrStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodegroupmanager.NodegroupManager/CreateNodePoolMgrStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodegroupManagerServer).CreateNodePoolMgrStrategy(ctx, req.(*CreateNodePoolMgrStrategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodegroupManager_UpdateNodePoolMgrStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodePoolMgrStrategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodegroupManagerServer).UpdateNodePoolMgrStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodegroupmanager.NodegroupManager/UpdateNodePoolMgrStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodegroupManagerServer).UpdateNodePoolMgrStrategy(ctx, req.(*UpdateNodePoolMgrStrategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodegroupManager_GetNodePoolMgrStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodePoolMgrStrategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodegroupManagerServer).GetNodePoolMgrStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodegroupmanager.NodegroupManager/GetNodePoolMgrStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodegroupManagerServer).GetNodePoolMgrStrategy(ctx, req.(*GetNodePoolMgrStrategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodegroupManager_ListNodePoolMgrStrategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodePoolMgrStrategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodegroupManagerServer).ListNodePoolMgrStrategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodegroupmanager.NodegroupManager/ListNodePoolMgrStrategies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodegroupManagerServer).ListNodePoolMgrStrategies(ctx, req.(*ListNodePoolMgrStrategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodegroupManager_DeleteNodePoolMgrStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodePoolMgrStrategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodegroupManagerServer).DeleteNodePoolMgrStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodegroupmanager.NodegroupManager/DeleteNodePoolMgrStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodegroupManagerServer).DeleteNodePoolMgrStrategy(ctx, req.(*DeleteNodePoolMgrStrategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NodegroupManager_ServiceDesc is the grpc.ServiceDesc for NodegroupManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodegroupManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nodegroupmanager.NodegroupManager",
	HandlerType: (*NodegroupManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusterAutoscalerReview",
			Handler:    _NodegroupManager_GetClusterAutoscalerReview_Handler,
		},
		{
			MethodName: "CreateNodePoolMgrStrategy",
			Handler:    _NodegroupManager_CreateNodePoolMgrStrategy_Handler,
		},
		{
			MethodName: "UpdateNodePoolMgrStrategy",
			Handler:    _NodegroupManager_UpdateNodePoolMgrStrategy_Handler,
		},
		{
			MethodName: "GetNodePoolMgrStrategy",
			Handler:    _NodegroupManager_GetNodePoolMgrStrategy_Handler,
		},
		{
			MethodName: "ListNodePoolMgrStrategies",
			Handler:    _NodegroupManager_ListNodePoolMgrStrategies_Handler,
		},
		{
			MethodName: "DeleteNodePoolMgrStrategy",
			Handler:    _NodegroupManager_DeleteNodePoolMgrStrategy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bcs-nodegroup-manager.proto",
}
