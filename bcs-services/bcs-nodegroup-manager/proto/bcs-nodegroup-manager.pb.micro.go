// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/bcs-nodegroup-manager.proto

package nodegroupmanager

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for NodegroupManager service

func NewNodegroupManagerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "NodegroupManager.GetClusterAutoscalerReview",
			Path:    []string{"/nodegroupmanager/v1/autoscaler/review"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "NodegroupManager.CreateNodePoolMgrStrategy",
			Path:    []string{"/nodegroupmanager/v1/nodegroupstrategy"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "NodegroupManager.UpdateNodePoolMgrStrategy",
			Path:    []string{"/nodegroupmanager/v1/nodegroupstrategy"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "NodegroupManager.GetNodePoolMgrStrategy",
			Path:    []string{"/nodegroupmanager/v1/nodegroupstrategy"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "NodegroupManager.ListNodePoolMgrStrategies",
			Path:    []string{"/nodegroupmanager/v1/nodegroupstrategies"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "NodegroupManager.DeleteNodePoolMgrStrategy",
			Path:    []string{"/nodegroupmanager/v1/nodegroupstrategy"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
	}
}

// Client API for NodegroupManager service

type NodegroupManagerService interface {
	GetClusterAutoscalerReview(ctx context.Context, in *ClusterAutoscalerReview, opts ...client.CallOption) (*ClusterAutoscalerReview, error)
	CreateNodePoolMgrStrategy(ctx context.Context, in *CreateNodePoolMgrStrategyReq, opts ...client.CallOption) (*CreateNodePoolMgrStrategyRsp, error)
	UpdateNodePoolMgrStrategy(ctx context.Context, in *UpdateNodePoolMgrStrategyReq, opts ...client.CallOption) (*CreateNodePoolMgrStrategyRsp, error)
	GetNodePoolMgrStrategy(ctx context.Context, in *GetNodePoolMgrStrategyReq, opts ...client.CallOption) (*GetNodePoolMgrStrategyRsp, error)
	ListNodePoolMgrStrategies(ctx context.Context, in *ListNodePoolMgrStrategyReq, opts ...client.CallOption) (*ListNodePoolMgrStrategyRsp, error)
	DeleteNodePoolMgrStrategy(ctx context.Context, in *DeleteNodePoolMgrStrategyReq, opts ...client.CallOption) (*DeleteNodePoolMgrStrategyRsp, error)
}

type nodegroupManagerService struct {
	c    client.Client
	name string
}

func NewNodegroupManagerService(name string, c client.Client) NodegroupManagerService {
	return &nodegroupManagerService{
		c:    c,
		name: name,
	}
}

func (c *nodegroupManagerService) GetClusterAutoscalerReview(ctx context.Context, in *ClusterAutoscalerReview, opts ...client.CallOption) (*ClusterAutoscalerReview, error) {
	req := c.c.NewRequest(c.name, "NodegroupManager.GetClusterAutoscalerReview", in)
	out := new(ClusterAutoscalerReview)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodegroupManagerService) CreateNodePoolMgrStrategy(ctx context.Context, in *CreateNodePoolMgrStrategyReq, opts ...client.CallOption) (*CreateNodePoolMgrStrategyRsp, error) {
	req := c.c.NewRequest(c.name, "NodegroupManager.CreateNodePoolMgrStrategy", in)
	out := new(CreateNodePoolMgrStrategyRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodegroupManagerService) UpdateNodePoolMgrStrategy(ctx context.Context, in *UpdateNodePoolMgrStrategyReq, opts ...client.CallOption) (*CreateNodePoolMgrStrategyRsp, error) {
	req := c.c.NewRequest(c.name, "NodegroupManager.UpdateNodePoolMgrStrategy", in)
	out := new(CreateNodePoolMgrStrategyRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodegroupManagerService) GetNodePoolMgrStrategy(ctx context.Context, in *GetNodePoolMgrStrategyReq, opts ...client.CallOption) (*GetNodePoolMgrStrategyRsp, error) {
	req := c.c.NewRequest(c.name, "NodegroupManager.GetNodePoolMgrStrategy", in)
	out := new(GetNodePoolMgrStrategyRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodegroupManagerService) ListNodePoolMgrStrategies(ctx context.Context, in *ListNodePoolMgrStrategyReq, opts ...client.CallOption) (*ListNodePoolMgrStrategyRsp, error) {
	req := c.c.NewRequest(c.name, "NodegroupManager.ListNodePoolMgrStrategies", in)
	out := new(ListNodePoolMgrStrategyRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodegroupManagerService) DeleteNodePoolMgrStrategy(ctx context.Context, in *DeleteNodePoolMgrStrategyReq, opts ...client.CallOption) (*DeleteNodePoolMgrStrategyRsp, error) {
	req := c.c.NewRequest(c.name, "NodegroupManager.DeleteNodePoolMgrStrategy", in)
	out := new(DeleteNodePoolMgrStrategyRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodegroupManager service

type NodegroupManagerHandler interface {
	GetClusterAutoscalerReview(context.Context, *ClusterAutoscalerReview, *ClusterAutoscalerReview) error
	CreateNodePoolMgrStrategy(context.Context, *CreateNodePoolMgrStrategyReq, *CreateNodePoolMgrStrategyRsp) error
	UpdateNodePoolMgrStrategy(context.Context, *UpdateNodePoolMgrStrategyReq, *CreateNodePoolMgrStrategyRsp) error
	GetNodePoolMgrStrategy(context.Context, *GetNodePoolMgrStrategyReq, *GetNodePoolMgrStrategyRsp) error
	ListNodePoolMgrStrategies(context.Context, *ListNodePoolMgrStrategyReq, *ListNodePoolMgrStrategyRsp) error
	DeleteNodePoolMgrStrategy(context.Context, *DeleteNodePoolMgrStrategyReq, *DeleteNodePoolMgrStrategyRsp) error
}

func RegisterNodegroupManagerHandler(s server.Server, hdlr NodegroupManagerHandler, opts ...server.HandlerOption) error {
	type nodegroupManager interface {
		GetClusterAutoscalerReview(ctx context.Context, in *ClusterAutoscalerReview, out *ClusterAutoscalerReview) error
		CreateNodePoolMgrStrategy(ctx context.Context, in *CreateNodePoolMgrStrategyReq, out *CreateNodePoolMgrStrategyRsp) error
		UpdateNodePoolMgrStrategy(ctx context.Context, in *UpdateNodePoolMgrStrategyReq, out *CreateNodePoolMgrStrategyRsp) error
		GetNodePoolMgrStrategy(ctx context.Context, in *GetNodePoolMgrStrategyReq, out *GetNodePoolMgrStrategyRsp) error
		ListNodePoolMgrStrategies(ctx context.Context, in *ListNodePoolMgrStrategyReq, out *ListNodePoolMgrStrategyRsp) error
		DeleteNodePoolMgrStrategy(ctx context.Context, in *DeleteNodePoolMgrStrategyReq, out *DeleteNodePoolMgrStrategyRsp) error
	}
	type NodegroupManager struct {
		nodegroupManager
	}
	h := &nodegroupManagerHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "NodegroupManager.GetClusterAutoscalerReview",
		Path:    []string{"/nodegroupmanager/v1/autoscaler/review"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "NodegroupManager.CreateNodePoolMgrStrategy",
		Path:    []string{"/nodegroupmanager/v1/nodegroupstrategy"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "NodegroupManager.UpdateNodePoolMgrStrategy",
		Path:    []string{"/nodegroupmanager/v1/nodegroupstrategy"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "NodegroupManager.GetNodePoolMgrStrategy",
		Path:    []string{"/nodegroupmanager/v1/nodegroupstrategy"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "NodegroupManager.ListNodePoolMgrStrategies",
		Path:    []string{"/nodegroupmanager/v1/nodegroupstrategies"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "NodegroupManager.DeleteNodePoolMgrStrategy",
		Path:    []string{"/nodegroupmanager/v1/nodegroupstrategy"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&NodegroupManager{h}, opts...))
}

type nodegroupManagerHandler struct {
	NodegroupManagerHandler
}

func (h *nodegroupManagerHandler) GetClusterAutoscalerReview(ctx context.Context, in *ClusterAutoscalerReview, out *ClusterAutoscalerReview) error {
	return h.NodegroupManagerHandler.GetClusterAutoscalerReview(ctx, in, out)
}

func (h *nodegroupManagerHandler) CreateNodePoolMgrStrategy(ctx context.Context, in *CreateNodePoolMgrStrategyReq, out *CreateNodePoolMgrStrategyRsp) error {
	return h.NodegroupManagerHandler.CreateNodePoolMgrStrategy(ctx, in, out)
}

func (h *nodegroupManagerHandler) UpdateNodePoolMgrStrategy(ctx context.Context, in *UpdateNodePoolMgrStrategyReq, out *CreateNodePoolMgrStrategyRsp) error {
	return h.NodegroupManagerHandler.UpdateNodePoolMgrStrategy(ctx, in, out)
}

func (h *nodegroupManagerHandler) GetNodePoolMgrStrategy(ctx context.Context, in *GetNodePoolMgrStrategyReq, out *GetNodePoolMgrStrategyRsp) error {
	return h.NodegroupManagerHandler.GetNodePoolMgrStrategy(ctx, in, out)
}

func (h *nodegroupManagerHandler) ListNodePoolMgrStrategies(ctx context.Context, in *ListNodePoolMgrStrategyReq, out *ListNodePoolMgrStrategyRsp) error {
	return h.NodegroupManagerHandler.ListNodePoolMgrStrategies(ctx, in, out)
}

func (h *nodegroupManagerHandler) DeleteNodePoolMgrStrategy(ctx context.Context, in *DeleteNodePoolMgrStrategyReq, out *DeleteNodePoolMgrStrategyRsp) error {
	return h.NodegroupManagerHandler.DeleteNodePoolMgrStrategy(ctx, in, out)
}
