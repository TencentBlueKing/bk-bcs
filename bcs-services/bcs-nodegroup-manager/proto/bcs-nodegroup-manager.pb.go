// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: proto/bcs-nodegroup-manager.proto

package nodegroupmanager

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClusterAutoscalerReview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request  *AutoscalerReviewRequest  `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Response *AutoscalerReviewResponse `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ClusterAutoscalerReview) Reset() {
	*x = ClusterAutoscalerReview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAutoscalerReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAutoscalerReview) ProtoMessage() {}

func (x *ClusterAutoscalerReview) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAutoscalerReview.ProtoReflect.Descriptor instead.
func (*ClusterAutoscalerReview) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{0}
}

func (x *ClusterAutoscalerReview) GetRequest() *AutoscalerReviewRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ClusterAutoscalerReview) GetResponse() *AutoscalerReviewResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type AutoscalerReviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        string                `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	NodeGroups map[string]*NodeGroup `protobuf:"bytes,2,rep,name=nodeGroups,proto3" json:"nodeGroups,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AutoscalerReviewRequest) Reset() {
	*x = AutoscalerReviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoscalerReviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoscalerReviewRequest) ProtoMessage() {}

func (x *AutoscalerReviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoscalerReviewRequest.ProtoReflect.Descriptor instead.
func (*AutoscalerReviewRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{1}
}

func (x *AutoscalerReviewRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *AutoscalerReviewRequest) GetNodeGroups() map[string]*NodeGroup {
	if x != nil {
		return x.NodeGroups
	}
	return nil
}

type AutoscalerReviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ScaleUps   []*NodeScaleUpPolicy   `protobuf:"bytes,2,rep,name=scaleUps,proto3" json:"scaleUps,omitempty"`
	ScaleDowns []*NodeScaleDownPolicy `protobuf:"bytes,3,rep,name=scaleDowns,proto3" json:"scaleDowns,omitempty"`
}

func (x *AutoscalerReviewResponse) Reset() {
	*x = AutoscalerReviewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoscalerReviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoscalerReviewResponse) ProtoMessage() {}

func (x *AutoscalerReviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoscalerReviewResponse.ProtoReflect.Descriptor instead.
func (*AutoscalerReviewResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{2}
}

func (x *AutoscalerReviewResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *AutoscalerReviewResponse) GetScaleUps() []*NodeScaleUpPolicy {
	if x != nil {
		return x.ScaleUps
	}
	return nil
}

func (x *AutoscalerReviewResponse) GetScaleDowns() []*NodeScaleDownPolicy {
	if x != nil {
		return x.ScaleDowns
	}
	return nil
}

type NodeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeGroupID  string        `protobuf:"bytes,1,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	MaxSize      int32         `protobuf:"varint,2,opt,name=maxSize,proto3" json:"maxSize,omitempty"`
	MinSize      int32         `protobuf:"varint,3,opt,name=minSize,proto3" json:"minSize,omitempty"`
	DesiredSize  int32         `protobuf:"varint,4,opt,name=desiredSize,proto3" json:"desiredSize,omitempty"`
	UpcomingSize int32         `protobuf:"varint,5,opt,name=upcomingSize,proto3" json:"upcomingSize,omitempty"`
	NodeTemplate *NodeTemplate `protobuf:"bytes,6,opt,name=nodeTemplate,proto3" json:"nodeTemplate,omitempty"`
	NodeIPs      []string      `protobuf:"bytes,7,rep,name=nodeIPs,proto3" json:"nodeIPs,omitempty"`
}

func (x *NodeGroup) Reset() {
	*x = NodeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeGroup) ProtoMessage() {}

func (x *NodeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeGroup.ProtoReflect.Descriptor instead.
func (*NodeGroup) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{3}
}

func (x *NodeGroup) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *NodeGroup) GetMaxSize() int32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *NodeGroup) GetMinSize() int32 {
	if x != nil {
		return x.MinSize
	}
	return 0
}

func (x *NodeGroup) GetDesiredSize() int32 {
	if x != nil {
		return x.DesiredSize
	}
	return 0
}

func (x *NodeGroup) GetUpcomingSize() int32 {
	if x != nil {
		return x.UpcomingSize
	}
	return 0
}

func (x *NodeGroup) GetNodeTemplate() *NodeTemplate {
	if x != nil {
		return x.NodeTemplate
	}
	return nil
}

func (x *NodeGroup) GetNodeIPs() []string {
	if x != nil {
		return x.NodeIPs
	}
	return nil
}

type NodeTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu    int32             `protobuf:"varint,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Mem    float64           `protobuf:"fixed64,2,opt,name=mem,proto3" json:"mem,omitempty"`
	Gpu    int32             `protobuf:"varint,3,opt,name=gpu,proto3" json:"gpu,omitempty"`
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Taints []*NodeTaint      `protobuf:"bytes,5,rep,name=taints,proto3" json:"taints,omitempty"`
}

func (x *NodeTemplate) Reset() {
	*x = NodeTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeTemplate) ProtoMessage() {}

func (x *NodeTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeTemplate.ProtoReflect.Descriptor instead.
func (*NodeTemplate) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{4}
}

func (x *NodeTemplate) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *NodeTemplate) GetMem() float64 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *NodeTemplate) GetGpu() int32 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *NodeTemplate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NodeTemplate) GetTaints() []*NodeTaint {
	if x != nil {
		return x.Taints
	}
	return nil
}

type NodeTaint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value     string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Effect    string `protobuf:"bytes,3,opt,name=effect,proto3" json:"effect,omitempty"`
	TimeAdded string `protobuf:"bytes,4,opt,name=timeAdded,proto3" json:"timeAdded,omitempty"`
}

func (x *NodeTaint) Reset() {
	*x = NodeTaint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeTaint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeTaint) ProtoMessage() {}

func (x *NodeTaint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeTaint.ProtoReflect.Descriptor instead.
func (*NodeTaint) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{5}
}

func (x *NodeTaint) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NodeTaint) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *NodeTaint) GetEffect() string {
	if x != nil {
		return x.Effect
	}
	return ""
}

func (x *NodeTaint) GetTimeAdded() string {
	if x != nil {
		return x.TimeAdded
	}
	return ""
}

type NodeScaleUpPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeGroupID string `protobuf:"bytes,1,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	DesiredSize int32  `protobuf:"varint,2,opt,name=desiredSize,proto3" json:"desiredSize,omitempty"`
}

func (x *NodeScaleUpPolicy) Reset() {
	*x = NodeScaleUpPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeScaleUpPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeScaleUpPolicy) ProtoMessage() {}

func (x *NodeScaleUpPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeScaleUpPolicy.ProtoReflect.Descriptor instead.
func (*NodeScaleUpPolicy) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{6}
}

func (x *NodeScaleUpPolicy) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *NodeScaleUpPolicy) GetDesiredSize() int32 {
	if x != nil {
		return x.DesiredSize
	}
	return 0
}

type NodeScaleDownPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeGroupID string   `protobuf:"bytes,1,opt,name=nodeGroupID,proto3" json:"nodeGroupID,omitempty"`
	Type        string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	NodeIPs     []string `protobuf:"bytes,3,rep,name=nodeIPs,proto3" json:"nodeIPs,omitempty"`
	NodeNum     int32    `protobuf:"varint,4,opt,name=nodeNum,proto3" json:"nodeNum,omitempty"`
}

func (x *NodeScaleDownPolicy) Reset() {
	*x = NodeScaleDownPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeScaleDownPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeScaleDownPolicy) ProtoMessage() {}

func (x *NodeScaleDownPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeScaleDownPolicy.ProtoReflect.Descriptor instead.
func (*NodeScaleDownPolicy) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{7}
}

func (x *NodeScaleDownPolicy) GetNodeGroupID() string {
	if x != nil {
		return x.NodeGroupID
	}
	return ""
}

func (x *NodeScaleDownPolicy) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NodeScaleDownPolicy) GetNodeIPs() []string {
	if x != nil {
		return x.NodeIPs
	}
	return nil
}

func (x *NodeScaleDownPolicy) GetNodeNum() int32 {
	if x != nil {
		return x.NodeNum
	}
	return 0
}

type CreateNodePoolMgrStrategyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option   *CreateOptions     `protobuf:"bytes,1,opt,name=option,proto3" json:"option,omitempty"`
	Strategy *NodeGroupStrategy `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
}

func (x *CreateNodePoolMgrStrategyReq) Reset() {
	*x = CreateNodePoolMgrStrategyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodePoolMgrStrategyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodePoolMgrStrategyReq) ProtoMessage() {}

func (x *CreateNodePoolMgrStrategyReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodePoolMgrStrategyReq.ProtoReflect.Descriptor instead.
func (*CreateNodePoolMgrStrategyReq) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{8}
}

func (x *CreateNodePoolMgrStrategyReq) GetOption() *CreateOptions {
	if x != nil {
		return x.Option
	}
	return nil
}

func (x *CreateNodePoolMgrStrategyReq) GetStrategy() *NodeGroupStrategy {
	if x != nil {
		return x.Strategy
	}
	return nil
}

type UpdateNodePoolMgrStrategyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option   *UpdateOptions     `protobuf:"bytes,1,opt,name=option,proto3" json:"option,omitempty"`
	Strategy *NodeGroupStrategy `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
}

func (x *UpdateNodePoolMgrStrategyReq) Reset() {
	*x = UpdateNodePoolMgrStrategyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodePoolMgrStrategyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodePoolMgrStrategyReq) ProtoMessage() {}

func (x *UpdateNodePoolMgrStrategyReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodePoolMgrStrategyReq.ProtoReflect.Descriptor instead.
func (*UpdateNodePoolMgrStrategyReq) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateNodePoolMgrStrategyReq) GetOption() *UpdateOptions {
	if x != nil {
		return x.Option
	}
	return nil
}

func (x *UpdateNodePoolMgrStrategyReq) GetStrategy() *NodeGroupStrategy {
	if x != nil {
		return x.Strategy
	}
	return nil
}

type CreateNodePoolMgrStrategyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateNodePoolMgrStrategyRsp) Reset() {
	*x = CreateNodePoolMgrStrategyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodePoolMgrStrategyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodePoolMgrStrategyRsp) ProtoMessage() {}

func (x *CreateNodePoolMgrStrategyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodePoolMgrStrategyRsp.ProtoReflect.Descriptor instead.
func (*CreateNodePoolMgrStrategyRsp) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{10}
}

func (x *CreateNodePoolMgrStrategyRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateNodePoolMgrStrategyRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateNodePoolMgrStrategyRsp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type GetNodePoolMgrStrategyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetNodePoolMgrStrategyReq) Reset() {
	*x = GetNodePoolMgrStrategyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodePoolMgrStrategyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodePoolMgrStrategyReq) ProtoMessage() {}

func (x *GetNodePoolMgrStrategyReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodePoolMgrStrategyReq.ProtoReflect.Descriptor instead.
func (*GetNodePoolMgrStrategyReq) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{11}
}

func (x *GetNodePoolMgrStrategyReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetNodePoolMgrStrategyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *NodeGroupStrategy `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNodePoolMgrStrategyRsp) Reset() {
	*x = GetNodePoolMgrStrategyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodePoolMgrStrategyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodePoolMgrStrategyRsp) ProtoMessage() {}

func (x *GetNodePoolMgrStrategyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodePoolMgrStrategyRsp.ProtoReflect.Descriptor instead.
func (*GetNodePoolMgrStrategyRsp) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{12}
}

func (x *GetNodePoolMgrStrategyRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetNodePoolMgrStrategyRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetNodePoolMgrStrategyRsp) GetData() *NodeGroupStrategy {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListNodePoolMgrStrategyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page  uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListNodePoolMgrStrategyReq) Reset() {
	*x = ListNodePoolMgrStrategyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodePoolMgrStrategyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodePoolMgrStrategyReq) ProtoMessage() {}

func (x *ListNodePoolMgrStrategyReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodePoolMgrStrategyReq.ProtoReflect.Descriptor instead.
func (*ListNodePoolMgrStrategyReq) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{13}
}

func (x *ListNodePoolMgrStrategyReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListNodePoolMgrStrategyReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type ListNodePoolMgrStrategyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Total   uint32               `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Data    []*NodeGroupStrategy `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListNodePoolMgrStrategyRsp) Reset() {
	*x = ListNodePoolMgrStrategyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodePoolMgrStrategyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodePoolMgrStrategyRsp) ProtoMessage() {}

func (x *ListNodePoolMgrStrategyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodePoolMgrStrategyRsp.ProtoReflect.Descriptor instead.
func (*ListNodePoolMgrStrategyRsp) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{14}
}

func (x *ListNodePoolMgrStrategyRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListNodePoolMgrStrategyRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListNodePoolMgrStrategyRsp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListNodePoolMgrStrategyRsp) GetData() []*NodeGroupStrategy {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteNodePoolMgrStrategyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Operator string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *DeleteNodePoolMgrStrategyReq) Reset() {
	*x = DeleteNodePoolMgrStrategyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodePoolMgrStrategyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodePoolMgrStrategyReq) ProtoMessage() {}

func (x *DeleteNodePoolMgrStrategyReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodePoolMgrStrategyReq.ProtoReflect.Descriptor instead.
func (*DeleteNodePoolMgrStrategyReq) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteNodePoolMgrStrategyReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteNodePoolMgrStrategyReq) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type DeleteNodePoolMgrStrategyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DeleteNodePoolMgrStrategyRsp) Reset() {
	*x = DeleteNodePoolMgrStrategyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodePoolMgrStrategyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodePoolMgrStrategyRsp) ProtoMessage() {}

func (x *DeleteNodePoolMgrStrategyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodePoolMgrStrategyRsp.ProtoReflect.Descriptor instead.
func (*DeleteNodePoolMgrStrategyRsp) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteNodePoolMgrStrategyRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteNodePoolMgrStrategyRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteNodePoolMgrStrategyRsp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type NodeGroupStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind              string              `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Name              string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Labels            map[string]string   `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResourcePool      string              `protobuf:"bytes,4,opt,name=resourcePool,proto3" json:"resourcePool,omitempty"`
	ReservedNodeGroup *ReservedNodeGroup  `protobuf:"bytes,5,opt,name=reservedNodeGroup,proto3" json:"reservedNodeGroup,omitempty"`
	ElasticNodeGroups []*ElasticNodeGroup `protobuf:"bytes,6,rep,name=elasticNodeGroups,proto3" json:"elasticNodeGroups,omitempty"`
	Strategy          *Strategy           `protobuf:"bytes,7,opt,name=strategy,proto3" json:"strategy,omitempty"`
}

func (x *NodeGroupStrategy) Reset() {
	*x = NodeGroupStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeGroupStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeGroupStrategy) ProtoMessage() {}

func (x *NodeGroupStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeGroupStrategy.ProtoReflect.Descriptor instead.
func (*NodeGroupStrategy) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{17}
}

func (x *NodeGroupStrategy) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *NodeGroupStrategy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeGroupStrategy) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NodeGroupStrategy) GetResourcePool() string {
	if x != nil {
		return x.ResourcePool
	}
	return ""
}

func (x *NodeGroupStrategy) GetReservedNodeGroup() *ReservedNodeGroup {
	if x != nil {
		return x.ReservedNodeGroup
	}
	return nil
}

func (x *NodeGroupStrategy) GetElasticNodeGroups() []*ElasticNodeGroup {
	if x != nil {
		return x.ElasticNodeGroups
	}
	return nil
}

func (x *NodeGroupStrategy) GetStrategy() *Strategy {
	if x != nil {
		return x.Strategy
	}
	return nil
}

type ReservedNodeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId  string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	NodeGroup  string `protobuf:"bytes,2,opt,name=nodeGroup,proto3" json:"nodeGroup,omitempty"`
	ConsumerId string `protobuf:"bytes,3,opt,name=consumerId,proto3" json:"consumerId,omitempty"`
}

func (x *ReservedNodeGroup) Reset() {
	*x = ReservedNodeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReservedNodeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReservedNodeGroup) ProtoMessage() {}

func (x *ReservedNodeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReservedNodeGroup.ProtoReflect.Descriptor instead.
func (*ReservedNodeGroup) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{18}
}

func (x *ReservedNodeGroup) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ReservedNodeGroup) GetNodeGroup() string {
	if x != nil {
		return x.NodeGroup
	}
	return ""
}

func (x *ReservedNodeGroup) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

type ElasticNodeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId  string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	NodeGroup  string `protobuf:"bytes,2,opt,name=nodeGroup,proto3" json:"nodeGroup,omitempty"`
	ConsumerId string `protobuf:"bytes,3,opt,name=consumerId,proto3" json:"consumerId,omitempty"`
	Weight     int32  `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *ElasticNodeGroup) Reset() {
	*x = ElasticNodeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElasticNodeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElasticNodeGroup) ProtoMessage() {}

func (x *ElasticNodeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElasticNodeGroup.ProtoReflect.Descriptor instead.
func (*ElasticNodeGroup) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{19}
}

func (x *ElasticNodeGroup) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ElasticNodeGroup) GetNodeGroup() string {
	if x != nil {
		return x.NodeGroup
	}
	return ""
}

func (x *ElasticNodeGroup) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

func (x *ElasticNodeGroup) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type Strategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               string  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ScaleUpCoolDown    int32   `protobuf:"varint,2,opt,name=scaleUpCoolDown,proto3" json:"scaleUpCoolDown,omitempty"`
	ScaleUpDelay       int32   `protobuf:"varint,3,opt,name=scaleUpDelay,proto3" json:"scaleUpDelay,omitempty"`
	MinScaleUpSize     int32   `protobuf:"varint,4,opt,name=minScaleUpSize,proto3" json:"minScaleUpSize,omitempty"`
	ScaleDownDelay     int32   `protobuf:"varint,5,opt,name=scaleDownDelay,proto3" json:"scaleDownDelay,omitempty"`
	MaxIdleDelay       int32   `protobuf:"varint,6,opt,name=maxIdleDelay,proto3" json:"maxIdleDelay,omitempty"`
	ReservedTimeRange  string  `protobuf:"bytes,7,opt,name=reservedTimeRange,proto3" json:"reservedTimeRange,omitempty"`
	Buffer             *Buffer `protobuf:"bytes,8,opt,name=buffer,proto3" json:"buffer,omitempty"`
	ScaleDownBeforeDDL int32   `protobuf:"varint,9,opt,name=scaleDownBeforeDDL,proto3" json:"scaleDownBeforeDDL,omitempty"`
}

func (x *Strategy) Reset() {
	*x = Strategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Strategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Strategy) ProtoMessage() {}

func (x *Strategy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Strategy.ProtoReflect.Descriptor instead.
func (*Strategy) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{20}
}

func (x *Strategy) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Strategy) GetScaleUpCoolDown() int32 {
	if x != nil {
		return x.ScaleUpCoolDown
	}
	return 0
}

func (x *Strategy) GetScaleUpDelay() int32 {
	if x != nil {
		return x.ScaleUpDelay
	}
	return 0
}

func (x *Strategy) GetMinScaleUpSize() int32 {
	if x != nil {
		return x.MinScaleUpSize
	}
	return 0
}

func (x *Strategy) GetScaleDownDelay() int32 {
	if x != nil {
		return x.ScaleDownDelay
	}
	return 0
}

func (x *Strategy) GetMaxIdleDelay() int32 {
	if x != nil {
		return x.MaxIdleDelay
	}
	return 0
}

func (x *Strategy) GetReservedTimeRange() string {
	if x != nil {
		return x.ReservedTimeRange
	}
	return ""
}

func (x *Strategy) GetBuffer() *Buffer {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *Strategy) GetScaleDownBeforeDDL() int32 {
	if x != nil {
		return x.ScaleDownBeforeDDL
	}
	return 0
}

type Buffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Low          int32 `protobuf:"varint,1,opt,name=low,proto3" json:"low,omitempty"`
	High         int32 `protobuf:"varint,2,opt,name=high,proto3" json:"high,omitempty"`
	ReservedDays int32 `protobuf:"varint,3,opt,name=reservedDays,proto3" json:"reservedDays,omitempty"`
}

func (x *Buffer) Reset() {
	*x = Buffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Buffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Buffer) ProtoMessage() {}

func (x *Buffer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Buffer.ProtoReflect.Descriptor instead.
func (*Buffer) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{21}
}

func (x *Buffer) GetLow() int32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Buffer) GetHigh() int32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Buffer) GetReservedDays() int32 {
	if x != nil {
		return x.ReservedDays
	}
	return 0
}

type CreateOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverWriteIfExist bool   `protobuf:"varint,1,opt,name=overWriteIfExist,proto3" json:"overWriteIfExist,omitempty"`
	Operator         string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *CreateOptions) Reset() {
	*x = CreateOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOptions) ProtoMessage() {}

func (x *CreateOptions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOptions.ProtoReflect.Descriptor instead.
func (*CreateOptions) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{22}
}

func (x *CreateOptions) GetOverWriteIfExist() bool {
	if x != nil {
		return x.OverWriteIfExist
	}
	return false
}

func (x *CreateOptions) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type UpdateOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateIfNotExist        bool   `protobuf:"varint,1,opt,name=createIfNotExist,proto3" json:"createIfNotExist,omitempty"`
	OverwriteZeroOrEmptyStr bool   `protobuf:"varint,2,opt,name=overwriteZeroOrEmptyStr,proto3" json:"overwriteZeroOrEmptyStr,omitempty"`
	Operator                string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *UpdateOptions) Reset() {
	*x = UpdateOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOptions) ProtoMessage() {}

func (x *UpdateOptions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_nodegroup_manager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOptions.ProtoReflect.Descriptor instead.
func (*UpdateOptions) Descriptor() ([]byte, []int) {
	return file_proto_bcs_nodegroup_manager_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateOptions) GetCreateIfNotExist() bool {
	if x != nil {
		return x.CreateIfNotExist
	}
	return false
}

func (x *UpdateOptions) GetOverwriteZeroOrEmptyStr() bool {
	if x != nil {
		return x.OverwriteZeroOrEmptyStr
	}
	return false
}

func (x *UpdateOptions) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

var File_proto_bcs_nodegroup_manager_proto protoreflect.FileDescriptor

var file_proto_bcs_nodegroup_manager_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x63, 0x73, 0x2d, 0x6e, 0x6f, 0x64, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x01, 0x0a, 0x17, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x66, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x13, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x66, 0x72,
	0x6f, 0x6d, 0x20, 0x63, 0x61, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x79,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x31, 0x92, 0x41,
	0x2e, 0x2a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x22, 0x74, 0x68, 0x65,
	0x20, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x61, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc1, 0x03, 0x0a, 0x17, 0x41, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x03, 0x75, 0x69, 0x64, 0x32, 0x31, 0x55, 0x49,
	0x44, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x72,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0xb0, 0x01, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x55, 0x92, 0x41, 0x52, 0x2a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x32, 0x44, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x64,
	0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x49, 0x44, 0x2e, 0x52, 0x0a, 0x6e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x5a, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x3a, 0x48, 0x92, 0x41, 0x45, 0x0a, 0x43, 0x2a, 0x1a, 0x47, 0x65, 0x74, 0x41,
	0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x25, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0xad, 0x03,
	0x0a, 0x18, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x03, 0x75, 0x69,
	0x64, 0x32, 0x31, 0x55, 0x49, 0x44, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x74, 0x0a, 0x08, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x55, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x42, 0x33, 0x92, 0x41, 0x30, 0x2a, 0x08, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x73, 0x32,
	0x24, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x20, 0x75, 0x70, 0x2e, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x73, 0x12,
	0x80, 0x01, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x39, 0x92, 0x41, 0x36,
	0x2a, 0x0a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x32, 0x28, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x70, 0x6f, 0x6c, 0x6f, 0x63, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x20, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x52, 0x0a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x73, 0x3a, 0x49, 0x92, 0x41, 0x46, 0x0a, 0x44, 0x2a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x25, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0x22, 0xd8, 0x07,
	0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x5b, 0x0a, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x39, 0x92, 0x41, 0x36, 0x2a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x32, 0x27, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x20,
	0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x6e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x54, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x2a, 0x07,
	0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x32, 0x2c, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x70, 0x65, 0x72, 0x20, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x54,
	0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x3a, 0x92, 0x41, 0x37, 0x2a, 0x07, 0x6d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x32, 0x2c, 0x4d,
	0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0xc9, 0x01, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0xa6, 0x01, 0x92, 0x41, 0xa2,
	0x01, 0x2a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x32, 0x92,
	0x01, 0x20, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x69, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x69, 0x7a,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,
	0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x65, 0x6e, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0xb6, 0x01, 0x0a, 0x0c, 0x75, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x91, 0x01, 0x92, 0x41, 0x8d, 0x01, 0x2a, 0x0c,
	0x75, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x32, 0x7d, 0x55, 0x70,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x68, 0x6f, 0x77, 0x20, 0x6d, 0x61, 0x6e, 0x79,
	0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x68, 0x61, 0x76, 0x65,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20,
	0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x2e, 0x52, 0x0c, 0x75, 0x70, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x0c, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x42, 0x55, 0x92, 0x41, 0x52, 0x2a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x32, 0x42, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
	0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x64,
	0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x49, 0x92, 0x41, 0x46, 0x2a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x50, 0x73, 0x32, 0x3b, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x73, 0x20, 0x61, 0x72,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x50, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x73, 0x3a, 0x3c, 0x92, 0x41, 0x39, 0x0a,
	0x37, 0x2a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x2a, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x6f,
	0x64, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xb6, 0x04, 0x0a, 0x0c, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x03, 0x63, 0x70, 0x75,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x2a, 0x03, 0x63, 0x70, 0x75,
	0x32, 0x32, 0x43, 0x50, 0x55, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x50, 0x55,
	0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x4f, 0x0a, 0x03, 0x6d, 0x65, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x3d, 0x92, 0x41, 0x3a, 0x2a, 0x03, 0x6d, 0x65, 0x6d,
	0x32, 0x33, 0x4d, 0x65, 0x6d, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x74, 0x20, 0x69,
	0x73, 0x20, 0x47, 0x69, 0x2e, 0x52, 0x03, 0x6d, 0x65, 0x6d, 0x12, 0x3c, 0x0a, 0x03, 0x67, 0x70,
	0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x03, 0x67, 0x70,
	0x75, 0x32, 0x20, 0x47, 0x50, 0x55, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x50,
	0x55, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x6e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x32, 0x1d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5e, 0x0a, 0x06, 0x74, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x61, 0x69, 0x6e, 0x74, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x06, 0x74, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x32, 0x1c, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x52, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x3a, 0x3c, 0x92, 0x41, 0x39, 0x0a, 0x37, 0x2a, 0x0c, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x32, 0x27, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x6f, 0x64,
	0x65, 0x22, 0xd0, 0x03, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x12,
	0x42, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41,
	0x2d, 0x2a, 0x03, 0x6b, 0x65, 0x79, 0x32, 0x26, 0x54, 0x68, 0x65, 0x20, 0x74, 0x61, 0x69, 0x6e,
	0x74, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x2f,
	0x54, 0x68, 0x65, 0x20, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x65, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4d, 0x92, 0x41, 0x4a, 0x2a, 0x06, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x32, 0x40, 0x20, 0x54, 0x68, 0x65, 0x20, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x20, 0x6f, 0x6e,
	0x20, 0x70, 0x6f, 0x64, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
	0x61, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x91, 0x01,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x73, 0x92, 0x41, 0x70, 0x2a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x65,
	0x64, 0x32, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x20, 0x72, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65,
	0x20, 0x61, 0x74, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61,
	0x69, 0x6e, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x61, 0x64, 0x64, 0x65, 0x64, 0x2e, 0x49, 0x74,
	0x20, 0x69, 0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x4e, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x20, 0x74,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x65,
	0x64, 0x3a, 0x31, 0x92, 0x41, 0x2e, 0x0a, 0x2c, 0x2a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61,
	0x69, 0x6e, 0x74, 0x32, 0x1f, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x20, 0x69,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x6e, 0x6f, 0x64, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x55, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x57, 0x0a, 0x0b, 0x6e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x35, 0x92, 0x41, 0x32, 0x2a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x32, 0x23, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x20, 0x69,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x6f, 0x64, 0x65,
	0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x12, 0x61, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x2a, 0x0b, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x32, 0x2d, 0x44, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x6e,
	0x6f, 0x64, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x3a, 0x5a, 0x92, 0x41, 0x57, 0x0a, 0x55, 0x2a, 0x11, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x32, 0x40, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x20, 0x75, 0x70, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0x83, 0x04, 0x0a, 0x13, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x44, 0x6f, 0x77, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x57, 0x0a, 0x0b, 0x6e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x35, 0x92, 0x41, 0x32, 0x2a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x32, 0x23, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x20, 0x69,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x6f, 0x64, 0x65,
	0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x12, 0x6f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x5b, 0x92, 0x41, 0x58, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x50, 0x54, 0x79,
	0x70, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x77, 0x61, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x20, 0x64, 0x6f,
	0x77, 0x6e, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x20, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a, 0x20, 0x5b, 0x4e, 0x6f, 0x64,
	0x65, 0x4e, 0x75, 0x6d, 0x2c, 0x20, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x73, 0x5d, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x40, 0x2a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x50, 0x73, 0x32, 0x35, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x73, 0x20, 0x61, 0x72, 0x65,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x50, 0x73, 0x12, 0x61, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x47, 0x92, 0x41, 0x44, 0x2a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x4e,
	0x75, 0x6d, 0x32, 0x39, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x20, 0x69, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62,
	0x65, 0x20, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x3a, 0x60, 0x92, 0x41, 0x5d, 0x0a, 0x5b, 0x2a, 0x13, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x32, 0x44, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f,
	0x64, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xa2, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x12, 0x54, 0x0a, 0x06, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a,
	0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x56, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x08, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x32, 0x06, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f, 0x2a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x67,
	0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x32, 0x1b, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe7, 0xad, 0x96,
	0xe7, 0x95, 0xa5, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x06, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0xd2, 0x01, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0xa2, 0x02,
	0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x4d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x12, 0x54,
	0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x1b, 0x92, 0x41, 0x18, 0x2a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x0e, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x15, 0x92, 0x41, 0x12,
	0x2a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x32, 0x06, 0xe7, 0xad, 0x96, 0xe7,
	0x95, 0xa5, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3a, 0x54, 0x92, 0x41,
	0x51, 0x0a, 0x4f, 0x2a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65,
	0x71, 0x32, 0x1b, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6,
	0xb1, 0xa0, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01,
	0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x22, 0x96, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x52, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x37, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x12, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x51, 0x92, 0x41, 0x4e, 0x0a, 0x4c, 0x2a,
	0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d,
	0x67, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x73, 0x70, 0x32, 0x1b, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe7, 0xad,
	0x96, 0xe7, 0x95, 0xa5, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x32, 0x0d, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x3b, 0x92, 0x41, 0x38, 0x0a, 0x36, 0x2a, 0x19,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52,
	0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x52,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x3a, 0x45, 0x92, 0x41, 0x42, 0x0a, 0x40, 0x2a, 0x19, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x73, 0x70, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xad, 0x96, 0xe7,
	0x95, 0xa5, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2,
	0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x32, 0x0c, 0xe9, 0xa1, 0xb5, 0xe9, 0x9d, 0xa2, 0xe5, 0xa4, 0xa7, 0xe5, 0xb0,
	0x8f, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x2c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0x92,
	0x41, 0x0e, 0x2a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x32, 0x06, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0,
	0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x3a, 0x3b, 0x92,
	0x41, 0x38, 0x0a, 0x36, 0x2a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71,
	0x32, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0xcb, 0x02, 0x0a, 0x1a, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x32, 0x0e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x52, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x3b, 0x92, 0x41, 0x38,
	0x0a, 0x36, 0x2a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x4d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x73, 0x70, 0x32, 0x18,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0x22, 0xd5, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x32, 0x0c, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe4,
	0xba, 0xba, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x52, 0x92, 0x41,
	0x4f, 0x0a, 0x4d, 0x2a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65,
	0x71, 0x32, 0x1b, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6,
	0xb1, 0xa0, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x96, 0x02, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x73,
	0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1f, 0x92,
	0x41, 0x1c, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x12, 0xe5, 0x88, 0xa0, 0xe9,
	0x99, 0xa4, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x51, 0x92, 0x41, 0x4e, 0x0a, 0x4c, 0x2a, 0x1c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x73, 0x70, 0x32, 0x1b, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xb1, 0xa0, 0xe7, 0xad, 0x96, 0xe7,
	0x95, 0xa5, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2,
	0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb3, 0x05, 0x0a, 0x11, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x25, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x2a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x32, 0x06, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32,
	0x0c, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32,
	0x06, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x88, 0x01, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x64, 0x92, 0x41, 0x61, 0x2a, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x32, 0x51, 0xe6, 0x9d, 0xa5, 0xe8, 0x87,
	0xaa, 0xe4, 0xba, 0x8e, 0x62, 0x63, 0x73, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0xe7, 0x9a, 0x84, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x20, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe7, 0x94,
	0xa8, 0xe4, 0xba, 0x8e, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x69, 0x0a, 0x11, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a,
	0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x68, 0x0a, 0x11, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63,
	0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x11, 0x65, 0x6c, 0x61, 0x73, 0x74,
	0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x11, 0x65, 0x6c,
	0x61, 0x73, 0x74, 0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x53, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x1b, 0x92,
	0x41, 0x18, 0x2a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x32, 0x0c, 0xe7, 0xad,
	0x96, 0xe7, 0x95, 0xa5, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xc5, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0x69, 0x64, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x32, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x69, 0x64, 0x52, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92,
	0x41, 0x19, 0x2a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x32, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x20, 0x69, 0x64, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf1, 0x01, 0x0a, 0x10, 0x45, 0x6c, 0x61, 0x73,
	0x74, 0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x36, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32,
	0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x69, 0x64, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x20, 0x69, 0x64, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x32, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x20,
	0x69, 0x64, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13,
	0x92, 0x41, 0x10, 0x2a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x32, 0x06, 0xe6, 0x9d, 0x83,
	0xe9, 0x87, 0x8d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xa9, 0x09, 0x0a, 0x08,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x52, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x2a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x32, 0x33, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe5, 0x90, 0x8e, 0xe7, 0xbb, 0xad, 0xe6, 0x89,
	0xa9, 0xe5, 0xb1, 0x95, 0xe7, 0x9a, 0x84, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe6, 0xa8, 0xa1,
	0xe5, 0xbc, 0x8f, 0xef, 0xbc, 0x8c, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x73, 0x0a, 0x0f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x43, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x49, 0x92, 0x41, 0x46, 0x2a, 0x0f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x55, 0x70, 0x43, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x32, 0x33, 0x65, 0x6c, 0x61,
	0x73, 0x74, 0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe6, 0x89, 0xa9,
	0xe5, 0xae, 0xb9, 0xe7, 0x9a, 0x84, 0xe5, 0x86, 0xb7, 0xe5, 0x8d, 0xb4, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x43, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77,
	0x6e, 0x12, 0x6e, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x4a, 0x92, 0x41, 0x47, 0x2a, 0x0c, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x55, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x32, 0x37, 0x65, 0x6c, 0x61, 0x73,
	0x74, 0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe6, 0x89, 0xa9, 0xe5,
	0xae, 0xb9, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0xbb, 0xb6, 0xe6, 0x97, 0xb6, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe5, 0x88, 0x86,
	0xe9, 0x92, 0x9f, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x86, 0x01, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x5e, 0x92, 0x41, 0x5b, 0x2a,
	0x0e, 0x6d, 0x69, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x32,
	0x49, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0xe6, 0x95, 0xb0,
	0xe9, 0x87, 0x8f, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xba, 0xe4, 0xbf, 0x9d, 0xe9, 0x9a, 0x9c, 0xe7,
	0xa8, 0xb3, 0xe5, 0xae, 0x9a, 0xe5, 0xb9, 0xb6, 0xe4, 0xb8, 0x8d, 0xe6, 0x98, 0xaf, 0xe9, 0x9a,
	0x8f, 0xe6, 0x84, 0x8f, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x0e, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x7f, 0x92, 0x41, 0x7c, 0x2a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x32, 0x6a, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69,
	0x63, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe5, 0xbb, 0xb6, 0xe8,
	0xbf, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd,
	0x8d, 0xe5, 0x88, 0x86, 0xe9, 0x92, 0x9f, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c,
	0xe8, 0xb6, 0x85, 0xe6, 0x9c, 0x9f, 0xe6, 0x9c, 0xaa, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe5,
	0x88, 0x99, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe9, 0x87, 0x8d, 0xe6, 0x96, 0xb0, 0xe5, 0x8f,
	0x91, 0xe8, 0xb5, 0xb7, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x12, 0xac, 0x01, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x87, 0x01, 0x92, 0x41,
	0x83, 0x01, 0x2a, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x32, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0xe6, 0x9c,
	0x80, 0xe5, 0xa4, 0xa7, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb2, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0xef, 0xbc, 0x8c, 0xe5, 0xaf, 0xb9, 0xe4, 0xba, 0x8e, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63,
	0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe8, 0x80, 0x8c, 0xe8, 0xa8, 0x80, 0xe5,
	0xb0, 0xb1, 0xe6, 0x98, 0xaf, 0xe4, 0xb8, 0x8b, 0xe9, 0x99, 0x8d, 0xe6, 0x95, 0xb0, 0xe9, 0x87,
	0x8f, 0xe5, 0x9c, 0xa8, 0xe9, 0xa2, 0x84, 0xe6, 0x9c, 0x9f, 0xe5, 0x86, 0x85, 0xe7, 0x9a, 0x84,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe5,
	0x88, 0x86, 0xe9, 0x92, 0x9f, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0xa0, 0x01, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x72, 0x92, 0x41, 0x6f, 0x2a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x32, 0x5a, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0xae, 0xb5, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba,
	0x8e, 0xe4, 0xbf, 0x9d, 0xe6, 0x8a, 0xa4, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20,
	0x70, 0x6f, 0x6f, 0x6c, 0xe7, 0xa8, 0xb3, 0xe5, 0xae, 0x9a, 0xef, 0xbc, 0x8c, 0xe5, 0x87, 0x86,
	0xe5, 0xa4, 0x87, 0xe7, 0xbb, 0x99, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xe9, 0xa2, 0x84, 0xe7, 0x95, 0x99, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0x52, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x32, 0x18, 0xe9,
	0xa2, 0x84, 0xe7, 0x95, 0x99, 0xe6, 0xb0, 0xb4, 0xe4, 0xbd, 0x8d, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb,
	0x86, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12,
	0x85, 0x01, 0x0a, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x44, 0x44, 0x4c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x55, 0x92, 0x41,
	0x52, 0x2a, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x44, 0x44, 0x4c, 0x32, 0x3c, 0xe5, 0x9c, 0xa8, 0x64, 0x64, 0x6c, 0xe5, 0xa4, 0x9a,
	0xe5, 0xb0, 0x91, 0xe5, 0x88, 0x86, 0xe9, 0x92, 0x9f, 0xe4, 0xb9, 0x8b, 0xe5, 0x89, 0x8d, 0xe6,
	0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0xef, 0xbc, 0x8c, 0xe7, 0x94,
	0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0x88, 0x86, 0xe7, 0xba, 0xa7, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0xe6, 0xb1, 0xa0, 0x52, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x44, 0x44, 0x4c, 0x22, 0xa1, 0x02, 0x0a, 0x06, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x12, 0x71, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x5f, 0x92, 0x41, 0x5c, 0x2a, 0x03, 0x6c, 0x6f, 0x77, 0x32, 0x55, 0xe5, 0xae, 0x9a, 0xe4, 0xb9,
	0x89, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0xe4, 0xb8,
	0xad, 0xe5, 0x8f, 0xaf, 0xe5, 0xae, 0xb9, 0xe5, 0xbf, 0x8d, 0xe7, 0x9a, 0x84, 0xe6, 0x9c, 0x80,
	0xe4, 0xbd, 0x8e, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb2, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6,
	0xb0, 0xb4, 0xe4, 0xbd, 0x8d, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe7, 0x94,
	0xa8, 0xe4, 0xba, 0x8e, 0xe9, 0xa2, 0x84, 0xe8, 0xad, 0xa6, 0xe7, 0x94, 0xa8, 0xe9, 0x80, 0x94,
	0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x50, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x2a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x32, 0x31,
	0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x70,
	0x6f, 0x6f, 0x6c, 0xe4, 0xb8, 0xad, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb2, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe7, 0x9a, 0x84, 0xe6, 0x9c, 0x80, 0xe9, 0xab, 0x98, 0xe6, 0xb0, 0xb4, 0xe4, 0xbd,
	0x8d, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x52, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x44, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2e, 0x92,
	0x41, 0x2b, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x44, 0x61, 0x79, 0x73,
	0x32, 0x1b, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1,
	0xa0, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5, 0xa4, 0xa9, 0xe6, 0x95, 0xb0, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x44, 0x61, 0x79, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a,
	0x10, 0x6f, 0x76, 0x65, 0x72, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x66, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x10, 0x6f, 0x76,
	0x65, 0x72, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x32, 0x09,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe8, 0xbf, 0x94, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x49, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92,
	0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93,
	0x8d, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x22, 0xa0, 0x02, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x66, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x32, 0x92,
	0x41, 0x2f, 0x2a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x66, 0x4e, 0x6f, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x32, 0x1b, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe4, 0xb8, 0x8d, 0xe5,
	0xad, 0x98, 0xe5, 0x9c, 0xa8, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x12, 0x79, 0x0a, 0x17, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5a, 0x65, 0x72, 0x6f, 0x4f, 0x72, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x74, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x2a, 0x17, 0x6f, 0x76, 0x65, 0x72, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5a, 0x65, 0x72, 0x6f, 0x4f, 0x72, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53,
	0x74, 0x72, 0x32, 0x21, 0xe9, 0x9b, 0xb6, 0xe5, 0x80, 0xbc, 0xe6, 0x88, 0x96, 0xe7, 0xa9, 0xba,
	0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe8,
	0xa6, 0x86, 0xe7, 0x9b, 0x96, 0x52, 0x17, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5a, 0x65, 0x72, 0x6f, 0x4f, 0x72, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x74, 0x72, 0x12, 0x34,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32,
	0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x32, 0x8b, 0x0b, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0xea, 0x01, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x29, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x1a, 0x29, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0x76,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x26, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x3a, 0x01,
	0x2a, 0x92, 0x41, 0x42, 0x12, 0x1f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x20, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x1a, 0x1f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x20,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0xe7, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x2e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x73, 0x70, 0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x26, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x36, 0x12, 0x19, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x1a, 0x19, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x6e, 0x6f, 0x64,
	0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x12, 0xe7, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2e,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x4d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x2e,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x4d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x73, 0x70, 0x22, 0x6a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x1a, 0x26, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3a, 0x01,
	0x2a, 0x92, 0x41, 0x36, 0x12, 0x19, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x6e, 0x6f, 0x64, 0x65,
	0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x1a,
	0x19, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x20, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0xdb, 0x01, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52,
	0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x73, 0x70, 0x22,
	0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f,
	0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x92,
	0x41, 0x36, 0x12, 0x19, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x20, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x1a, 0x19, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0xf0, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52,
	0x73, 0x70, 0x22, 0x77, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x69, 0x65, 0x73, 0x92, 0x41, 0x44, 0x12, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x6e,
	0x6f, 0x64, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xe4, 0x01, 0x0a, 0x19,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x67,
	0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2e, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x73, 0x70, 0x22, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x2a, 0x26, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x92, 0x41, 0x36, 0x12, 0x19, 0xe5, 0x88,
	0xa0, 0xe9, 0x99, 0xa4, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x1a, 0x19, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x6e,
	0x6f, 0x64, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x42, 0x1a, 0x5a, 0x18, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x6e, 0x6f,
	0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_bcs_nodegroup_manager_proto_rawDescOnce sync.Once
	file_proto_bcs_nodegroup_manager_proto_rawDescData = file_proto_bcs_nodegroup_manager_proto_rawDesc
)

func file_proto_bcs_nodegroup_manager_proto_rawDescGZIP() []byte {
	file_proto_bcs_nodegroup_manager_proto_rawDescOnce.Do(func() {
		file_proto_bcs_nodegroup_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_bcs_nodegroup_manager_proto_rawDescData)
	})
	return file_proto_bcs_nodegroup_manager_proto_rawDescData
}

var file_proto_bcs_nodegroup_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_proto_bcs_nodegroup_manager_proto_goTypes = []interface{}{
	(*ClusterAutoscalerReview)(nil),      // 0: nodegroupmanager.ClusterAutoscalerReview
	(*AutoscalerReviewRequest)(nil),      // 1: nodegroupmanager.AutoscalerReviewRequest
	(*AutoscalerReviewResponse)(nil),     // 2: nodegroupmanager.AutoscalerReviewResponse
	(*NodeGroup)(nil),                    // 3: nodegroupmanager.NodeGroup
	(*NodeTemplate)(nil),                 // 4: nodegroupmanager.NodeTemplate
	(*NodeTaint)(nil),                    // 5: nodegroupmanager.NodeTaint
	(*NodeScaleUpPolicy)(nil),            // 6: nodegroupmanager.NodeScaleUpPolicy
	(*NodeScaleDownPolicy)(nil),          // 7: nodegroupmanager.NodeScaleDownPolicy
	(*CreateNodePoolMgrStrategyReq)(nil), // 8: nodegroupmanager.CreateNodePoolMgrStrategyReq
	(*UpdateNodePoolMgrStrategyReq)(nil), // 9: nodegroupmanager.UpdateNodePoolMgrStrategyReq
	(*CreateNodePoolMgrStrategyRsp)(nil), // 10: nodegroupmanager.CreateNodePoolMgrStrategyRsp
	(*GetNodePoolMgrStrategyReq)(nil),    // 11: nodegroupmanager.GetNodePoolMgrStrategyReq
	(*GetNodePoolMgrStrategyRsp)(nil),    // 12: nodegroupmanager.GetNodePoolMgrStrategyRsp
	(*ListNodePoolMgrStrategyReq)(nil),   // 13: nodegroupmanager.ListNodePoolMgrStrategyReq
	(*ListNodePoolMgrStrategyRsp)(nil),   // 14: nodegroupmanager.ListNodePoolMgrStrategyRsp
	(*DeleteNodePoolMgrStrategyReq)(nil), // 15: nodegroupmanager.DeleteNodePoolMgrStrategyReq
	(*DeleteNodePoolMgrStrategyRsp)(nil), // 16: nodegroupmanager.DeleteNodePoolMgrStrategyRsp
	(*NodeGroupStrategy)(nil),            // 17: nodegroupmanager.NodeGroupStrategy
	(*ReservedNodeGroup)(nil),            // 18: nodegroupmanager.ReservedNodeGroup
	(*ElasticNodeGroup)(nil),             // 19: nodegroupmanager.ElasticNodeGroup
	(*Strategy)(nil),                     // 20: nodegroupmanager.Strategy
	(*Buffer)(nil),                       // 21: nodegroupmanager.Buffer
	(*CreateOptions)(nil),                // 22: nodegroupmanager.CreateOptions
	(*UpdateOptions)(nil),                // 23: nodegroupmanager.UpdateOptions
	nil,                                  // 24: nodegroupmanager.AutoscalerReviewRequest.NodeGroupsEntry
	nil,                                  // 25: nodegroupmanager.NodeTemplate.LabelsEntry
	nil,                                  // 26: nodegroupmanager.NodeGroupStrategy.LabelsEntry
}
var file_proto_bcs_nodegroup_manager_proto_depIdxs = []int32{
	1,  // 0: nodegroupmanager.ClusterAutoscalerReview.request:type_name -> nodegroupmanager.AutoscalerReviewRequest
	2,  // 1: nodegroupmanager.ClusterAutoscalerReview.response:type_name -> nodegroupmanager.AutoscalerReviewResponse
	24, // 2: nodegroupmanager.AutoscalerReviewRequest.nodeGroups:type_name -> nodegroupmanager.AutoscalerReviewRequest.NodeGroupsEntry
	6,  // 3: nodegroupmanager.AutoscalerReviewResponse.scaleUps:type_name -> nodegroupmanager.NodeScaleUpPolicy
	7,  // 4: nodegroupmanager.AutoscalerReviewResponse.scaleDowns:type_name -> nodegroupmanager.NodeScaleDownPolicy
	4,  // 5: nodegroupmanager.NodeGroup.nodeTemplate:type_name -> nodegroupmanager.NodeTemplate
	25, // 6: nodegroupmanager.NodeTemplate.labels:type_name -> nodegroupmanager.NodeTemplate.LabelsEntry
	5,  // 7: nodegroupmanager.NodeTemplate.taints:type_name -> nodegroupmanager.NodeTaint
	22, // 8: nodegroupmanager.CreateNodePoolMgrStrategyReq.option:type_name -> nodegroupmanager.CreateOptions
	17, // 9: nodegroupmanager.CreateNodePoolMgrStrategyReq.strategy:type_name -> nodegroupmanager.NodeGroupStrategy
	23, // 10: nodegroupmanager.UpdateNodePoolMgrStrategyReq.option:type_name -> nodegroupmanager.UpdateOptions
	17, // 11: nodegroupmanager.UpdateNodePoolMgrStrategyReq.strategy:type_name -> nodegroupmanager.NodeGroupStrategy
	17, // 12: nodegroupmanager.GetNodePoolMgrStrategyRsp.data:type_name -> nodegroupmanager.NodeGroupStrategy
	17, // 13: nodegroupmanager.ListNodePoolMgrStrategyRsp.data:type_name -> nodegroupmanager.NodeGroupStrategy
	26, // 14: nodegroupmanager.NodeGroupStrategy.labels:type_name -> nodegroupmanager.NodeGroupStrategy.LabelsEntry
	18, // 15: nodegroupmanager.NodeGroupStrategy.reservedNodeGroup:type_name -> nodegroupmanager.ReservedNodeGroup
	19, // 16: nodegroupmanager.NodeGroupStrategy.elasticNodeGroups:type_name -> nodegroupmanager.ElasticNodeGroup
	20, // 17: nodegroupmanager.NodeGroupStrategy.strategy:type_name -> nodegroupmanager.Strategy
	21, // 18: nodegroupmanager.Strategy.buffer:type_name -> nodegroupmanager.Buffer
	3,  // 19: nodegroupmanager.AutoscalerReviewRequest.NodeGroupsEntry.value:type_name -> nodegroupmanager.NodeGroup
	0,  // 20: nodegroupmanager.NodegroupManager.GetClusterAutoscalerReview:input_type -> nodegroupmanager.ClusterAutoscalerReview
	8,  // 21: nodegroupmanager.NodegroupManager.CreateNodePoolMgrStrategy:input_type -> nodegroupmanager.CreateNodePoolMgrStrategyReq
	9,  // 22: nodegroupmanager.NodegroupManager.UpdateNodePoolMgrStrategy:input_type -> nodegroupmanager.UpdateNodePoolMgrStrategyReq
	11, // 23: nodegroupmanager.NodegroupManager.GetNodePoolMgrStrategy:input_type -> nodegroupmanager.GetNodePoolMgrStrategyReq
	13, // 24: nodegroupmanager.NodegroupManager.ListNodePoolMgrStrategies:input_type -> nodegroupmanager.ListNodePoolMgrStrategyReq
	15, // 25: nodegroupmanager.NodegroupManager.DeleteNodePoolMgrStrategy:input_type -> nodegroupmanager.DeleteNodePoolMgrStrategyReq
	0,  // 26: nodegroupmanager.NodegroupManager.GetClusterAutoscalerReview:output_type -> nodegroupmanager.ClusterAutoscalerReview
	10, // 27: nodegroupmanager.NodegroupManager.CreateNodePoolMgrStrategy:output_type -> nodegroupmanager.CreateNodePoolMgrStrategyRsp
	10, // 28: nodegroupmanager.NodegroupManager.UpdateNodePoolMgrStrategy:output_type -> nodegroupmanager.CreateNodePoolMgrStrategyRsp
	12, // 29: nodegroupmanager.NodegroupManager.GetNodePoolMgrStrategy:output_type -> nodegroupmanager.GetNodePoolMgrStrategyRsp
	14, // 30: nodegroupmanager.NodegroupManager.ListNodePoolMgrStrategies:output_type -> nodegroupmanager.ListNodePoolMgrStrategyRsp
	16, // 31: nodegroupmanager.NodegroupManager.DeleteNodePoolMgrStrategy:output_type -> nodegroupmanager.DeleteNodePoolMgrStrategyRsp
	26, // [26:32] is the sub-list for method output_type
	20, // [20:26] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_proto_bcs_nodegroup_manager_proto_init() }
func file_proto_bcs_nodegroup_manager_proto_init() {
	if File_proto_bcs_nodegroup_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_bcs_nodegroup_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAutoscalerReview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoscalerReviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoscalerReviewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeTaint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeScaleUpPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeScaleDownPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodePoolMgrStrategyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodePoolMgrStrategyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodePoolMgrStrategyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodePoolMgrStrategyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodePoolMgrStrategyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodePoolMgrStrategyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodePoolMgrStrategyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodePoolMgrStrategyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodePoolMgrStrategyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeGroupStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReservedNodeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElasticNodeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Strategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Buffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_nodegroup_manager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_bcs_nodegroup_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_bcs_nodegroup_manager_proto_goTypes,
		DependencyIndexes: file_proto_bcs_nodegroup_manager_proto_depIdxs,
		MessageInfos:      file_proto_bcs_nodegroup_manager_proto_msgTypes,
	}.Build()
	File_proto_bcs_nodegroup_manager_proto = out.File
	file_proto_bcs_nodegroup_manager_proto_rawDesc = nil
	file_proto_bcs_nodegroup_manager_proto_goTypes = nil
	file_proto_bcs_nodegroup_manager_proto_depIdxs = nil
}
