// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/bcs-data-manager/bcs-data-manager.proto

package datamanager

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetAllProjectListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllProjectListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllProjectListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllProjectListRequestMultiError, or nil if none found.
func (m *GetAllProjectListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllProjectListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _GetAllProjectListRequest_Dimension_InLookup[m.GetDimension()]; !ok {
		err := GetAllProjectListRequestValidationError{
			field:  "Dimension",
			reason: "value must be in list [minute hour day ]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() < 0 {
		err := GetAllProjectListRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSize() > 10 {
		err := GetAllProjectListRequestValidationError{
			field:  "Size",
			reason: "value must be less than or equal to 10",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return GetAllProjectListRequestMultiError(errors)
	}
	return nil
}

// GetAllProjectListRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllProjectListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllProjectListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllProjectListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllProjectListRequestMultiError) AllErrors() []error { return m }

// GetAllProjectListRequestValidationError is the validation error returned by
// GetAllProjectListRequest.Validate if the designated constraints aren't met.
type GetAllProjectListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllProjectListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllProjectListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllProjectListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllProjectListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllProjectListRequestValidationError) ErrorName() string {
	return "GetAllProjectListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllProjectListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllProjectListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllProjectListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllProjectListRequestValidationError{}

var _GetAllProjectListRequest_Dimension_InLookup = map[string]struct{}{
	"minute": {},
	"hour":   {},
	"day":    {},
	"":       {},
}

// Validate checks the field values on GetAllProjectListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllProjectListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllProjectListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllProjectListResponseMultiError, or nil if none found.
func (m *GetAllProjectListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllProjectListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllProjectListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllProjectListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllProjectListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetAllProjectListResponseMultiError(errors)
	}
	return nil
}

// GetAllProjectListResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllProjectListResponse.ValidateAll() if the
// designated constraints aren't met.
type GetAllProjectListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllProjectListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllProjectListResponseMultiError) AllErrors() []error { return m }

// GetAllProjectListResponseValidationError is the validation error returned by
// GetAllProjectListResponse.Validate if the designated constraints aren't met.
type GetAllProjectListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllProjectListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllProjectListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllProjectListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllProjectListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllProjectListResponseValidationError) ErrorName() string {
	return "GetAllProjectListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllProjectListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllProjectListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllProjectListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllProjectListResponseValidationError{}

// Validate checks the field values on GetProjectInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectInfoRequestMultiError, or nil if none found.
func (m *GetProjectInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProject()) > 100 {
		err := GetProjectInfoRequestValidationError{
			field:  "Project",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetProjectInfoRequest_Project_Pattern.MatchString(m.GetProject()) {
		err := GetProjectInfoRequestValidationError{
			field:  "Project",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GetProjectInfoRequest_Dimension_InLookup[m.GetDimension()]; !ok {
		err := GetProjectInfoRequestValidationError{
			field:  "Dimension",
			reason: "value must be in list [minute hour day ]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBusiness()) > 100 {
		err := GetProjectInfoRequestValidationError{
			field:  "Business",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetProjectInfoRequest_Business_Pattern.MatchString(m.GetBusiness()) {
		err := GetProjectInfoRequestValidationError{
			field:  "Business",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProjectCode()) > 100 {
		err := GetProjectInfoRequestValidationError{
			field:  "ProjectCode",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetProjectInfoRequest_ProjectCode_Pattern.MatchString(m.GetProjectCode()) {
		err := GetProjectInfoRequestValidationError{
			field:  "ProjectCode",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return GetProjectInfoRequestMultiError(errors)
	}
	return nil
}

// GetProjectInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetProjectInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProjectInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectInfoRequestMultiError) AllErrors() []error { return m }

// GetProjectInfoRequestValidationError is the validation error returned by
// GetProjectInfoRequest.Validate if the designated constraints aren't met.
type GetProjectInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectInfoRequestValidationError) ErrorName() string {
	return "GetProjectInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectInfoRequestValidationError{}

var _GetProjectInfoRequest_Project_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _GetProjectInfoRequest_Dimension_InLookup = map[string]struct{}{
	"minute": {},
	"hour":   {},
	"day":    {},
	"":       {},
}

var _GetProjectInfoRequest_Business_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _GetProjectInfoRequest_ProjectCode_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on GetProjectInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectInfoResponseMultiError, or nil if none found.
func (m *GetProjectInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProjectInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProjectInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectInfoResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProjectInfoResponseMultiError(errors)
	}
	return nil
}

// GetProjectInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetProjectInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProjectInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectInfoResponseMultiError) AllErrors() []error { return m }

// GetProjectInfoResponseValidationError is the validation error returned by
// GetProjectInfoResponse.Validate if the designated constraints aren't met.
type GetProjectInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectInfoResponseValidationError) ErrorName() string {
	return "GetProjectInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectInfoResponseValidationError{}

// Validate checks the field values on GetClusterListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterListRequestMultiError, or nil if none found.
func (m *GetClusterListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProject()) > 100 {
		err := GetClusterListRequestValidationError{
			field:  "Project",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetClusterListRequest_Project_Pattern.MatchString(m.GetProject()) {
		err := GetClusterListRequestValidationError{
			field:  "Project",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBusiness()) > 100 {
		err := GetClusterListRequestValidationError{
			field:  "Business",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetClusterListRequest_Business_Pattern.MatchString(m.GetBusiness()) {
		err := GetClusterListRequestValidationError{
			field:  "Business",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GetClusterListRequest_Dimension_InLookup[m.GetDimension()]; !ok {
		err := GetClusterListRequestValidationError{
			field:  "Dimension",
			reason: "value must be in list [minute hour day ]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() < 0 {
		err := GetClusterListRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSize() > 10 {
		err := GetClusterListRequestValidationError{
			field:  "Size",
			reason: "value must be less than or equal to 10",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProjectCode()) > 100 {
		err := GetClusterListRequestValidationError{
			field:  "ProjectCode",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetClusterListRequest_ProjectCode_Pattern.MatchString(m.GetProjectCode()) {
		err := GetClusterListRequestValidationError{
			field:  "ProjectCode",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return GetClusterListRequestMultiError(errors)
	}
	return nil
}

// GetClusterListRequestMultiError is an error wrapping multiple validation
// errors returned by GetClusterListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetClusterListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterListRequestMultiError) AllErrors() []error { return m }

// GetClusterListRequestValidationError is the validation error returned by
// GetClusterListRequest.Validate if the designated constraints aren't met.
type GetClusterListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterListRequestValidationError) ErrorName() string {
	return "GetClusterListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterListRequestValidationError{}

var _GetClusterListRequest_Project_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _GetClusterListRequest_Business_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _GetClusterListRequest_Dimension_InLookup = map[string]struct{}{
	"minute": {},
	"hour":   {},
	"day":    {},
	"":       {},
}

var _GetClusterListRequest_ProjectCode_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on GetClusterListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterListResponseMultiError, or nil if none found.
func (m *GetClusterListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetClusterListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetClusterListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetClusterListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetClusterListResponseMultiError(errors)
	}
	return nil
}

// GetClusterListResponseMultiError is an error wrapping multiple validation
// errors returned by GetClusterListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetClusterListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterListResponseMultiError) AllErrors() []error { return m }

// GetClusterListResponseValidationError is the validation error returned by
// GetClusterListResponse.Validate if the designated constraints aren't met.
type GetClusterListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterListResponseValidationError) ErrorName() string {
	return "GetClusterListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterListResponseValidationError{}

// Validate checks the field values on GetClusterInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterInfoRequestMultiError, or nil if none found.
func (m *GetClusterInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 2 || l > 100 {
		err := GetClusterInfoRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		err := GetClusterInfoRequestValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetClusterInfoRequest_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		err := GetClusterInfoRequestValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GetClusterInfoRequest_Dimension_InLookup[m.GetDimension()]; !ok {
		err := GetClusterInfoRequestValidationError{
			field:  "Dimension",
			reason: "value must be in list [minute hour day ]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return GetClusterInfoRequestMultiError(errors)
	}
	return nil
}

// GetClusterInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetClusterInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetClusterInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterInfoRequestMultiError) AllErrors() []error { return m }

// GetClusterInfoRequestValidationError is the validation error returned by
// GetClusterInfoRequest.Validate if the designated constraints aren't met.
type GetClusterInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterInfoRequestValidationError) ErrorName() string {
	return "GetClusterInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterInfoRequestValidationError{}

var _GetClusterInfoRequest_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _GetClusterInfoRequest_Dimension_InLookup = map[string]struct{}{
	"minute": {},
	"hour":   {},
	"day":    {},
	"":       {},
}

// Validate checks the field values on GetClusterInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterInfoResponseMultiError, or nil if none found.
func (m *GetClusterInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetClusterInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetClusterInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterInfoResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetClusterInfoResponseMultiError(errors)
	}
	return nil
}

// GetClusterInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetClusterInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetClusterInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterInfoResponseMultiError) AllErrors() []error { return m }

// GetClusterInfoResponseValidationError is the validation error returned by
// GetClusterInfoResponse.Validate if the designated constraints aren't met.
type GetClusterInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterInfoResponseValidationError) ErrorName() string {
	return "GetClusterInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterInfoResponseValidationError{}

// Validate checks the field values on GetNamespaceInfoListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNamespaceInfoListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespaceInfoListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNamespaceInfoListRequestMultiError, or nil if none found.
func (m *GetNamespaceInfoListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespaceInfoListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 2 || l > 100 {
		err := GetNamespaceInfoListRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		err := GetNamespaceInfoListRequestValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetNamespaceInfoListRequest_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		err := GetNamespaceInfoListRequestValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GetNamespaceInfoListRequest_Dimension_InLookup[m.GetDimension()]; !ok {
		err := GetNamespaceInfoListRequestValidationError{
			field:  "Dimension",
			reason: "value must be in list [minute hour day ]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() < 0 {
		err := GetNamespaceInfoListRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSize() > 10 {
		err := GetNamespaceInfoListRequestValidationError{
			field:  "Size",
			reason: "value must be less than or equal to 10",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return GetNamespaceInfoListRequestMultiError(errors)
	}
	return nil
}

// GetNamespaceInfoListRequestMultiError is an error wrapping multiple
// validation errors returned by GetNamespaceInfoListRequest.ValidateAll() if
// the designated constraints aren't met.
type GetNamespaceInfoListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespaceInfoListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespaceInfoListRequestMultiError) AllErrors() []error { return m }

// GetNamespaceInfoListRequestValidationError is the validation error returned
// by GetNamespaceInfoListRequest.Validate if the designated constraints
// aren't met.
type GetNamespaceInfoListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceInfoListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceInfoListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceInfoListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceInfoListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceInfoListRequestValidationError) ErrorName() string {
	return "GetNamespaceInfoListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceInfoListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceInfoListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceInfoListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceInfoListRequestValidationError{}

var _GetNamespaceInfoListRequest_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _GetNamespaceInfoListRequest_Dimension_InLookup = map[string]struct{}{
	"minute": {},
	"hour":   {},
	"day":    {},
	"":       {},
}

// Validate checks the field values on GetNamespaceInfoListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNamespaceInfoListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespaceInfoListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNamespaceInfoListResponseMultiError, or nil if none found.
func (m *GetNamespaceInfoListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespaceInfoListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNamespaceInfoListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNamespaceInfoListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNamespaceInfoListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetNamespaceInfoListResponseMultiError(errors)
	}
	return nil
}

// GetNamespaceInfoListResponseMultiError is an error wrapping multiple
// validation errors returned by GetNamespaceInfoListResponse.ValidateAll() if
// the designated constraints aren't met.
type GetNamespaceInfoListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespaceInfoListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespaceInfoListResponseMultiError) AllErrors() []error { return m }

// GetNamespaceInfoListResponseValidationError is the validation error returned
// by GetNamespaceInfoListResponse.Validate if the designated constraints
// aren't met.
type GetNamespaceInfoListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceInfoListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceInfoListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceInfoListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceInfoListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceInfoListResponseValidationError) ErrorName() string {
	return "GetNamespaceInfoListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceInfoListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceInfoListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceInfoListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceInfoListResponseValidationError{}

// Validate checks the field values on GetNamespaceInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNamespaceInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespaceInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNamespaceInfoRequestMultiError, or nil if none found.
func (m *GetNamespaceInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespaceInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 2 || l > 100 {
		err := GetNamespaceInfoRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		err := GetNamespaceInfoRequestValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetNamespaceInfoRequest_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		err := GetNamespaceInfoRequestValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 100 {
		err := GetNamespaceInfoRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetNamespaceInfoRequest_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := GetNamespaceInfoRequestValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GetNamespaceInfoRequest_Dimension_InLookup[m.GetDimension()]; !ok {
		err := GetNamespaceInfoRequestValidationError{
			field:  "Dimension",
			reason: "value must be in list [minute hour day ]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return GetNamespaceInfoRequestMultiError(errors)
	}
	return nil
}

// GetNamespaceInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetNamespaceInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNamespaceInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespaceInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespaceInfoRequestMultiError) AllErrors() []error { return m }

// GetNamespaceInfoRequestValidationError is the validation error returned by
// GetNamespaceInfoRequest.Validate if the designated constraints aren't met.
type GetNamespaceInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceInfoRequestValidationError) ErrorName() string {
	return "GetNamespaceInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceInfoRequestValidationError{}

var _GetNamespaceInfoRequest_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _GetNamespaceInfoRequest_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _GetNamespaceInfoRequest_Dimension_InLookup = map[string]struct{}{
	"minute": {},
	"hour":   {},
	"day":    {},
	"":       {},
}

// Validate checks the field values on GetNamespaceInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNamespaceInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespaceInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNamespaceInfoResponseMultiError, or nil if none found.
func (m *GetNamespaceInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespaceInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNamespaceInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNamespaceInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNamespaceInfoResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNamespaceInfoResponseMultiError(errors)
	}
	return nil
}

// GetNamespaceInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetNamespaceInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNamespaceInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespaceInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespaceInfoResponseMultiError) AllErrors() []error { return m }

// GetNamespaceInfoResponseValidationError is the validation error returned by
// GetNamespaceInfoResponse.Validate if the designated constraints aren't met.
type GetNamespaceInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceInfoResponseValidationError) ErrorName() string {
	return "GetNamespaceInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceInfoResponseValidationError{}

// Validate checks the field values on GetWorkloadInfoListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkloadInfoListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkloadInfoListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkloadInfoListRequestMultiError, or nil if none found.
func (m *GetWorkloadInfoListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkloadInfoListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 2 || l > 100 {
		err := GetWorkloadInfoListRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		err := GetWorkloadInfoListRequestValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetWorkloadInfoListRequest_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		err := GetWorkloadInfoListRequestValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 100 {
		err := GetWorkloadInfoListRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetWorkloadInfoListRequest_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := GetWorkloadInfoListRequestValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWorkloadType()) > 100 {
		err := GetWorkloadInfoListRequestValidationError{
			field:  "WorkloadType",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetWorkloadInfoListRequest_WorkloadType_Pattern.MatchString(m.GetWorkloadType()) {
		err := GetWorkloadInfoListRequestValidationError{
			field:  "WorkloadType",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GetWorkloadInfoListRequest_Dimension_InLookup[m.GetDimension()]; !ok {
		err := GetWorkloadInfoListRequestValidationError{
			field:  "Dimension",
			reason: "value must be in list [minute hour day ]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() < 0 {
		err := GetWorkloadInfoListRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSize() > 10 {
		err := GetWorkloadInfoListRequestValidationError{
			field:  "Size",
			reason: "value must be less than or equal to 10",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return GetWorkloadInfoListRequestMultiError(errors)
	}
	return nil
}

// GetWorkloadInfoListRequestMultiError is an error wrapping multiple
// validation errors returned by GetWorkloadInfoListRequest.ValidateAll() if
// the designated constraints aren't met.
type GetWorkloadInfoListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkloadInfoListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkloadInfoListRequestMultiError) AllErrors() []error { return m }

// GetWorkloadInfoListRequestValidationError is the validation error returned
// by GetWorkloadInfoListRequest.Validate if the designated constraints aren't met.
type GetWorkloadInfoListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkloadInfoListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkloadInfoListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkloadInfoListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkloadInfoListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkloadInfoListRequestValidationError) ErrorName() string {
	return "GetWorkloadInfoListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkloadInfoListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkloadInfoListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkloadInfoListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkloadInfoListRequestValidationError{}

var _GetWorkloadInfoListRequest_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _GetWorkloadInfoListRequest_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _GetWorkloadInfoListRequest_WorkloadType_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _GetWorkloadInfoListRequest_Dimension_InLookup = map[string]struct{}{
	"minute": {},
	"hour":   {},
	"day":    {},
	"":       {},
}

// Validate checks the field values on GetWorkloadInfoListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkloadInfoListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkloadInfoListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkloadInfoListResponseMultiError, or nil if none found.
func (m *GetWorkloadInfoListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkloadInfoListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWorkloadInfoListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWorkloadInfoListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWorkloadInfoListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetWorkloadInfoListResponseMultiError(errors)
	}
	return nil
}

// GetWorkloadInfoListResponseMultiError is an error wrapping multiple
// validation errors returned by GetWorkloadInfoListResponse.ValidateAll() if
// the designated constraints aren't met.
type GetWorkloadInfoListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkloadInfoListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkloadInfoListResponseMultiError) AllErrors() []error { return m }

// GetWorkloadInfoListResponseValidationError is the validation error returned
// by GetWorkloadInfoListResponse.Validate if the designated constraints
// aren't met.
type GetWorkloadInfoListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkloadInfoListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkloadInfoListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkloadInfoListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkloadInfoListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkloadInfoListResponseValidationError) ErrorName() string {
	return "GetWorkloadInfoListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkloadInfoListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkloadInfoListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkloadInfoListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkloadInfoListResponseValidationError{}

// Validate checks the field values on GetWorkloadInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkloadInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkloadInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkloadInfoRequestMultiError, or nil if none found.
func (m *GetWorkloadInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkloadInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 2 || l > 100 {
		err := GetWorkloadInfoRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		err := GetWorkloadInfoRequestValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetWorkloadInfoRequest_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		err := GetWorkloadInfoRequestValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 100 {
		err := GetWorkloadInfoRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetWorkloadInfoRequest_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := GetWorkloadInfoRequestValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWorkloadType()) > 100 {
		err := GetWorkloadInfoRequestValidationError{
			field:  "WorkloadType",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetWorkloadInfoRequest_WorkloadType_Pattern.MatchString(m.GetWorkloadType()) {
		err := GetWorkloadInfoRequestValidationError{
			field:  "WorkloadType",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWorkloadName()) > 100 {
		err := GetWorkloadInfoRequestValidationError{
			field:  "WorkloadName",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetWorkloadInfoRequest_WorkloadName_Pattern.MatchString(m.GetWorkloadName()) {
		err := GetWorkloadInfoRequestValidationError{
			field:  "WorkloadName",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GetWorkloadInfoRequest_Dimension_InLookup[m.GetDimension()]; !ok {
		err := GetWorkloadInfoRequestValidationError{
			field:  "Dimension",
			reason: "value must be in list [minute hour day ]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return GetWorkloadInfoRequestMultiError(errors)
	}
	return nil
}

// GetWorkloadInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetWorkloadInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWorkloadInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkloadInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkloadInfoRequestMultiError) AllErrors() []error { return m }

// GetWorkloadInfoRequestValidationError is the validation error returned by
// GetWorkloadInfoRequest.Validate if the designated constraints aren't met.
type GetWorkloadInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkloadInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkloadInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkloadInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkloadInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkloadInfoRequestValidationError) ErrorName() string {
	return "GetWorkloadInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkloadInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkloadInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkloadInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkloadInfoRequestValidationError{}

var _GetWorkloadInfoRequest_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _GetWorkloadInfoRequest_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _GetWorkloadInfoRequest_WorkloadType_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _GetWorkloadInfoRequest_WorkloadName_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _GetWorkloadInfoRequest_Dimension_InLookup = map[string]struct{}{
	"minute": {},
	"hour":   {},
	"day":    {},
	"":       {},
}

// Validate checks the field values on GetWorkloadInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkloadInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkloadInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkloadInfoResponseMultiError, or nil if none found.
func (m *GetWorkloadInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkloadInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWorkloadInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWorkloadInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWorkloadInfoResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetWorkloadInfoResponseMultiError(errors)
	}
	return nil
}

// GetWorkloadInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetWorkloadInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWorkloadInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkloadInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkloadInfoResponseMultiError) AllErrors() []error { return m }

// GetWorkloadInfoResponseValidationError is the validation error returned by
// GetWorkloadInfoResponse.Validate if the designated constraints aren't met.
type GetWorkloadInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkloadInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkloadInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkloadInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkloadInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkloadInfoResponseValidationError) ErrorName() string {
	return "GetWorkloadInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkloadInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkloadInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkloadInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkloadInfoResponseValidationError{}

// Validate checks the field values on Project with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Project) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Project with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProjectMultiError, or nil if none found.
func (m *Project) ValidateAll() error {
	return m.validate(true)
}

func (m *Project) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for BusinessID

	// no validation rules for Dimension

	// no validation rules for StartTime

	// no validation rules for EndTime

	for idx, item := range m.GetMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectValidationError{
					field:  fmt.Sprintf("Metrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMinNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "MinNode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "MinNode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectValidationError{
				field:  "MinNode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "MaxNode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "MaxNode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectValidationError{
				field:  "MaxNode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Label

	// no validation rules for ProjectCode

	if len(errors) > 0 {
		return ProjectMultiError(errors)
	}
	return nil
}

// ProjectMultiError is an error wrapping multiple validation errors returned
// by Project.ValidateAll() if the designated constraints aren't met.
type ProjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectMultiError) AllErrors() []error { return m }

// ProjectValidationError is the validation error returned by Project.Validate
// if the designated constraints aren't met.
type ProjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectValidationError) ErrorName() string { return "ProjectValidationError" }

// Error satisfies the builtin error interface
func (e ProjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectValidationError{}

// Validate checks the field values on ProjectMetrics with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProjectMetrics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectMetrics with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProjectMetricsMultiError,
// or nil if none found.
func (m *ProjectMetrics) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectMetrics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Time

	// no validation rules for ClustersCount

	// no validation rules for TotalCPU

	// no validation rules for TotalMemory

	// no validation rules for TotalLoadCPU

	// no validation rules for TotalLoadMemory

	// no validation rules for AvgLoadCPU

	// no validation rules for AvgLoadMemory

	// no validation rules for CPUUsage

	// no validation rules for MemoryUsage

	// no validation rules for NodeCount

	// no validation rules for AvailableNodeCount

	// no validation rules for MinNodeCount

	// no validation rules for MinNodeTime

	// no validation rules for MaxNodeCount

	// no validation rules for MaxNodeTime

	if len(errors) > 0 {
		return ProjectMetricsMultiError(errors)
	}
	return nil
}

// ProjectMetricsMultiError is an error wrapping multiple validation errors
// returned by ProjectMetrics.ValidateAll() if the designated constraints
// aren't met.
type ProjectMetricsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectMetricsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectMetricsMultiError) AllErrors() []error { return m }

// ProjectMetricsValidationError is the validation error returned by
// ProjectMetrics.Validate if the designated constraints aren't met.
type ProjectMetricsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectMetricsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectMetricsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectMetricsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectMetricsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectMetricsValidationError) ErrorName() string { return "ProjectMetricsValidationError" }

// Error satisfies the builtin error interface
func (e ProjectMetricsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectMetrics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectMetricsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectMetricsValidationError{}

// Validate checks the field values on Cluster with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Cluster) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Cluster with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ClusterMultiError, or nil if none found.
func (m *Cluster) ValidateAll() error {
	return m.validate(true)
}

func (m *Cluster) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for ClusterID

	// no validation rules for Dimension

	// no validation rules for StartTime

	// no validation rules for EndTime

	for idx, item := range m.GetMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterValidationError{
					field:  fmt.Sprintf("Metrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMinNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterValidationError{
					field:  "MinNode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterValidationError{
					field:  "MinNode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterValidationError{
				field:  "MinNode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterValidationError{
					field:  "MaxNode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterValidationError{
					field:  "MaxNode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterValidationError{
				field:  "MaxNode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMinInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterValidationError{
					field:  "MinInstance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterValidationError{
					field:  "MinInstance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterValidationError{
				field:  "MinInstance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterValidationError{
					field:  "MaxInstance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterValidationError{
					field:  "MaxInstance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterValidationError{
				field:  "MaxInstance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BusinessID

	// no validation rules for Label

	// no validation rules for ProjectCode

	if len(errors) > 0 {
		return ClusterMultiError(errors)
	}
	return nil
}

// ClusterMultiError is an error wrapping multiple validation errors returned
// by Cluster.ValidateAll() if the designated constraints aren't met.
type ClusterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterMultiError) AllErrors() []error { return m }

// ClusterValidationError is the validation error returned by Cluster.Validate
// if the designated constraints aren't met.
type ClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterValidationError) ErrorName() string { return "ClusterValidationError" }

// Error satisfies the builtin error interface
func (e ClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterValidationError{}

// Validate checks the field values on ClusterMetrics with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClusterMetrics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterMetrics with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClusterMetricsMultiError,
// or nil if none found.
func (m *ClusterMetrics) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterMetrics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Time

	// no validation rules for NodeCount

	// no validation rules for AvailableNodeCount

	if all {
		switch v := interface{}(m.GetMinNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterMetricsValidationError{
					field:  "MinNode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterMetricsValidationError{
					field:  "MinNode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterMetricsValidationError{
				field:  "MinNode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterMetricsValidationError{
					field:  "MaxNode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterMetricsValidationError{
					field:  "MaxNode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterMetricsValidationError{
				field:  "MaxNode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetNodeQuantile() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterMetricsValidationError{
						field:  fmt.Sprintf("NodeQuantile[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterMetricsValidationError{
						field:  fmt.Sprintf("NodeQuantile[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterMetricsValidationError{
					field:  fmt.Sprintf("NodeQuantile[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for MinUsageNode

	// no validation rules for TotalCPU

	// no validation rules for TotalMemory

	// no validation rules for TotalLoadCPU

	// no validation rules for TotalLoadMemory

	// no validation rules for AvgLoadCPU

	// no validation rules for AvgLoadMemory

	// no validation rules for CPUUsage

	// no validation rules for MemoryUsage

	// no validation rules for WorkloadCount

	// no validation rules for InstanceCount

	if all {
		switch v := interface{}(m.GetMinInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterMetricsValidationError{
					field:  "MinInstance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterMetricsValidationError{
					field:  "MinInstance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterMetricsValidationError{
				field:  "MinInstance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterMetricsValidationError{
					field:  "MaxInstance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterMetricsValidationError{
					field:  "MaxInstance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterMetricsValidationError{
				field:  "MaxInstance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CpuRequest

	// no validation rules for MemoryRequest

	// no validation rules for CACount

	// no validation rules for CpuLimit

	// no validation rules for MemoryLimit

	if all {
		switch v := interface{}(m.GetMinCPU()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterMetricsValidationError{
					field:  "MinCPU",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterMetricsValidationError{
					field:  "MinCPU",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinCPU()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterMetricsValidationError{
				field:  "MinCPU",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxCPU()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterMetricsValidationError{
					field:  "MaxCPU",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterMetricsValidationError{
					field:  "MaxCPU",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxCPU()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterMetricsValidationError{
				field:  "MaxCPU",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMinMemory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterMetricsValidationError{
					field:  "MinMemory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterMetricsValidationError{
					field:  "MinMemory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinMemory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterMetricsValidationError{
				field:  "MinMemory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxMemory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterMetricsValidationError{
					field:  "MaxMemory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterMetricsValidationError{
					field:  "MaxMemory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxMemory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterMetricsValidationError{
				field:  "MaxMemory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ClusterMetricsMultiError(errors)
	}
	return nil
}

// ClusterMetricsMultiError is an error wrapping multiple validation errors
// returned by ClusterMetrics.ValidateAll() if the designated constraints
// aren't met.
type ClusterMetricsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterMetricsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterMetricsMultiError) AllErrors() []error { return m }

// ClusterMetricsValidationError is the validation error returned by
// ClusterMetrics.Validate if the designated constraints aren't met.
type ClusterMetricsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterMetricsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterMetricsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterMetricsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterMetricsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterMetricsValidationError) ErrorName() string { return "ClusterMetricsValidationError" }

// Error satisfies the builtin error interface
func (e ClusterMetricsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterMetrics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterMetricsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterMetricsValidationError{}

// Validate checks the field values on NodeQuantile with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeQuantile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeQuantile with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeQuantileMultiError, or
// nil if none found.
func (m *NodeQuantile) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeQuantile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Percentage

	// no validation rules for NodeCPUUsage

	if len(errors) > 0 {
		return NodeQuantileMultiError(errors)
	}
	return nil
}

// NodeQuantileMultiError is an error wrapping multiple validation errors
// returned by NodeQuantile.ValidateAll() if the designated constraints aren't met.
type NodeQuantileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeQuantileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeQuantileMultiError) AllErrors() []error { return m }

// NodeQuantileValidationError is the validation error returned by
// NodeQuantile.Validate if the designated constraints aren't met.
type NodeQuantileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeQuantileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeQuantileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeQuantileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeQuantileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeQuantileValidationError) ErrorName() string { return "NodeQuantileValidationError" }

// Error satisfies the builtin error interface
func (e NodeQuantileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeQuantile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeQuantileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeQuantileValidationError{}

// Validate checks the field values on Namespace with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Namespace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Namespace with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NamespaceMultiError, or nil
// if none found.
func (m *Namespace) ValidateAll() error {
	return m.validate(true)
}

func (m *Namespace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for ClusterID

	// no validation rules for Namespace

	// no validation rules for Dimension

	for idx, item := range m.GetMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NamespaceValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NamespaceValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NamespaceValidationError{
					field:  fmt.Sprintf("Metrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for SuggestCPU

	// no validation rules for SuggestMemory

	if all {
		switch v := interface{}(m.GetResourceLimit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "ResourceLimit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "ResourceLimit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceLimit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceValidationError{
				field:  "ResourceLimit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxCPUUsageTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "MaxCPUUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "MaxCPUUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxCPUUsageTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceValidationError{
				field:  "MaxCPUUsageTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMinCPUUsageTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "MinCPUUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "MinCPUUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinCPUUsageTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceValidationError{
				field:  "MinCPUUsageTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxMemoryUsageTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "MaxMemoryUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "MaxMemoryUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxMemoryUsageTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceValidationError{
				field:  "MaxMemoryUsageTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMinMemoryUsageTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "MinMemoryUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "MinMemoryUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinMemoryUsageTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceValidationError{
				field:  "MinMemoryUsageTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMinInstanceTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "MinInstanceTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "MinInstanceTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinInstanceTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceValidationError{
				field:  "MinInstanceTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxInstanceTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "MaxInstanceTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "MaxInstanceTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxInstanceTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceValidationError{
				field:  "MaxInstanceTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMinWorkloadUsage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "MinWorkloadUsage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "MinWorkloadUsage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinWorkloadUsage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceValidationError{
				field:  "MinWorkloadUsage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxWorkloadUsage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "MaxWorkloadUsage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceValidationError{
					field:  "MaxWorkloadUsage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxWorkloadUsage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceValidationError{
				field:  "MaxWorkloadUsage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BusinessID

	// no validation rules for Label

	// no validation rules for ProjectCode

	if len(errors) > 0 {
		return NamespaceMultiError(errors)
	}
	return nil
}

// NamespaceMultiError is an error wrapping multiple validation errors returned
// by Namespace.ValidateAll() if the designated constraints aren't met.
type NamespaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespaceMultiError) AllErrors() []error { return m }

// NamespaceValidationError is the validation error returned by
// Namespace.Validate if the designated constraints aren't met.
type NamespaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceValidationError) ErrorName() string { return "NamespaceValidationError" }

// Error satisfies the builtin error interface
func (e NamespaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceValidationError{}

// Validate checks the field values on ResourceLimit with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResourceLimit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceLimit with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceLimitMultiError, or
// nil if none found.
func (m *ResourceLimit) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceLimit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CPULimit

	// no validation rules for CPURequest

	// no validation rules for MemoryLimit

	// no validation rules for MemoryRequest

	if len(errors) > 0 {
		return ResourceLimitMultiError(errors)
	}
	return nil
}

// ResourceLimitMultiError is an error wrapping multiple validation errors
// returned by ResourceLimit.ValidateAll() if the designated constraints
// aren't met.
type ResourceLimitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceLimitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceLimitMultiError) AllErrors() []error { return m }

// ResourceLimitValidationError is the validation error returned by
// ResourceLimit.Validate if the designated constraints aren't met.
type ResourceLimitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceLimitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceLimitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceLimitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceLimitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceLimitValidationError) ErrorName() string { return "ResourceLimitValidationError" }

// Error satisfies the builtin error interface
func (e ResourceLimitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceLimit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceLimitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceLimitValidationError{}

// Validate checks the field values on NamespaceMetrics with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NamespaceMetrics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamespaceMetrics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NamespaceMetricsMultiError, or nil if none found.
func (m *NamespaceMetrics) ValidateAll() error {
	return m.validate(true)
}

func (m *NamespaceMetrics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Time

	// no validation rules for CPURequest

	// no validation rules for MemoryRequest

	// no validation rules for CPUUsageAmount

	// no validation rules for MemoryUsageAmount

	// no validation rules for CPUUsage

	// no validation rules for MemoryUsage

	if all {
		switch v := interface{}(m.GetMaxCPU()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceMetricsValidationError{
					field:  "MaxCPU",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceMetricsValidationError{
					field:  "MaxCPU",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxCPU()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceMetricsValidationError{
				field:  "MaxCPU",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMinCPU()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceMetricsValidationError{
					field:  "MinCPU",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceMetricsValidationError{
					field:  "MinCPU",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinCPU()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceMetricsValidationError{
				field:  "MinCPU",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxMemory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceMetricsValidationError{
					field:  "MaxMemory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceMetricsValidationError{
					field:  "MaxMemory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxMemory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceMetricsValidationError{
				field:  "MaxMemory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMinMemory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceMetricsValidationError{
					field:  "MinMemory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceMetricsValidationError{
					field:  "MinMemory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinMemory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceMetricsValidationError{
				field:  "MinMemory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WorkloadCount

	// no validation rules for InstanceCount

	if all {
		switch v := interface{}(m.GetMinInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceMetricsValidationError{
					field:  "MinInstance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceMetricsValidationError{
					field:  "MinInstance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceMetricsValidationError{
				field:  "MinInstance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceMetricsValidationError{
					field:  "MaxInstance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceMetricsValidationError{
					field:  "MaxInstance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceMetricsValidationError{
				field:  "MaxInstance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMinWorkloadUsage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceMetricsValidationError{
					field:  "MinWorkloadUsage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceMetricsValidationError{
					field:  "MinWorkloadUsage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinWorkloadUsage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceMetricsValidationError{
				field:  "MinWorkloadUsage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxWorkloadUsage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceMetricsValidationError{
					field:  "MaxWorkloadUsage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceMetricsValidationError{
					field:  "MaxWorkloadUsage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxWorkloadUsage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceMetricsValidationError{
				field:  "MaxWorkloadUsage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CPULimit

	// no validation rules for MemoryLimit

	if len(errors) > 0 {
		return NamespaceMetricsMultiError(errors)
	}
	return nil
}

// NamespaceMetricsMultiError is an error wrapping multiple validation errors
// returned by NamespaceMetrics.ValidateAll() if the designated constraints
// aren't met.
type NamespaceMetricsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespaceMetricsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespaceMetricsMultiError) AllErrors() []error { return m }

// NamespaceMetricsValidationError is the validation error returned by
// NamespaceMetrics.Validate if the designated constraints aren't met.
type NamespaceMetricsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceMetricsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceMetricsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceMetricsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceMetricsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceMetricsValidationError) ErrorName() string { return "NamespaceMetricsValidationError" }

// Error satisfies the builtin error interface
func (e NamespaceMetricsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespaceMetrics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceMetricsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceMetricsValidationError{}

// Validate checks the field values on ExtremumRecord with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExtremumRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtremumRecord with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExtremumRecordMultiError,
// or nil if none found.
func (m *ExtremumRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtremumRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for MetricName

	// no validation rules for Value

	// no validation rules for Period

	if len(errors) > 0 {
		return ExtremumRecordMultiError(errors)
	}
	return nil
}

// ExtremumRecordMultiError is an error wrapping multiple validation errors
// returned by ExtremumRecord.ValidateAll() if the designated constraints
// aren't met.
type ExtremumRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtremumRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtremumRecordMultiError) AllErrors() []error { return m }

// ExtremumRecordValidationError is the validation error returned by
// ExtremumRecord.Validate if the designated constraints aren't met.
type ExtremumRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtremumRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtremumRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtremumRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtremumRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtremumRecordValidationError) ErrorName() string { return "ExtremumRecordValidationError" }

// Error satisfies the builtin error interface
func (e ExtremumRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtremumRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtremumRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtremumRecordValidationError{}

// Validate checks the field values on Workload with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Workload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Workload with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WorkloadMultiError, or nil
// if none found.
func (m *Workload) ValidateAll() error {
	return m.validate(true)
}

func (m *Workload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for ClusterID

	// no validation rules for Namespace

	// no validation rules for WorkloadType

	// no validation rules for WorkloadName

	// no validation rules for Dimension

	for idx, item := range m.GetMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkloadValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkloadValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkloadValidationError{
					field:  fmt.Sprintf("Metrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for SuggestCPU

	// no validation rules for SuggestMemory

	if all {
		switch v := interface{}(m.GetMaxCPUUsageTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkloadValidationError{
					field:  "MaxCPUUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkloadValidationError{
					field:  "MaxCPUUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxCPUUsageTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadValidationError{
				field:  "MaxCPUUsageTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMinCPUUsageTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkloadValidationError{
					field:  "MinCPUUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkloadValidationError{
					field:  "MinCPUUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinCPUUsageTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadValidationError{
				field:  "MinCPUUsageTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxMemoryUsageTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkloadValidationError{
					field:  "MaxMemoryUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkloadValidationError{
					field:  "MaxMemoryUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxMemoryUsageTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadValidationError{
				field:  "MaxMemoryUsageTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMinMemoryUsageTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkloadValidationError{
					field:  "MinMemoryUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkloadValidationError{
					field:  "MinMemoryUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinMemoryUsageTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadValidationError{
				field:  "MinMemoryUsageTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMinInstanceTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkloadValidationError{
					field:  "MinInstanceTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkloadValidationError{
					field:  "MinInstanceTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinInstanceTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadValidationError{
				field:  "MinInstanceTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxInstanceTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkloadValidationError{
					field:  "MaxInstanceTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkloadValidationError{
					field:  "MaxInstanceTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxInstanceTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadValidationError{
				field:  "MaxInstanceTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BusinessID

	// no validation rules for Label

	// no validation rules for ProjectCode

	if len(errors) > 0 {
		return WorkloadMultiError(errors)
	}
	return nil
}

// WorkloadMultiError is an error wrapping multiple validation errors returned
// by Workload.ValidateAll() if the designated constraints aren't met.
type WorkloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkloadMultiError) AllErrors() []error { return m }

// WorkloadValidationError is the validation error returned by
// Workload.Validate if the designated constraints aren't met.
type WorkloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkloadValidationError) ErrorName() string { return "WorkloadValidationError" }

// Error satisfies the builtin error interface
func (e WorkloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkloadValidationError{}

// Validate checks the field values on WorkloadMetrics with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WorkloadMetrics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkloadMetrics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkloadMetricsMultiError, or nil if none found.
func (m *WorkloadMetrics) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkloadMetrics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Time

	// no validation rules for CPURequest

	// no validation rules for MemoryRequest

	// no validation rules for CPUUsageAmount

	// no validation rules for MemoryUsageAmount

	// no validation rules for CPUUsage

	// no validation rules for MemoryUsage

	if all {
		switch v := interface{}(m.GetMaxCPUUsageTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkloadMetricsValidationError{
					field:  "MaxCPUUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkloadMetricsValidationError{
					field:  "MaxCPUUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxCPUUsageTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadMetricsValidationError{
				field:  "MaxCPUUsageTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMinCPUUsageTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkloadMetricsValidationError{
					field:  "MinCPUUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkloadMetricsValidationError{
					field:  "MinCPUUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinCPUUsageTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadMetricsValidationError{
				field:  "MinCPUUsageTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxMemoryUsageTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkloadMetricsValidationError{
					field:  "MaxMemoryUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkloadMetricsValidationError{
					field:  "MaxMemoryUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxMemoryUsageTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadMetricsValidationError{
				field:  "MaxMemoryUsageTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMinMemoryUsageTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkloadMetricsValidationError{
					field:  "MinMemoryUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkloadMetricsValidationError{
					field:  "MinMemoryUsageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinMemoryUsageTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadMetricsValidationError{
				field:  "MinMemoryUsageTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InstanceCount

	if all {
		switch v := interface{}(m.GetMinInstanceTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkloadMetricsValidationError{
					field:  "MinInstanceTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkloadMetricsValidationError{
					field:  "MinInstanceTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinInstanceTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadMetricsValidationError{
				field:  "MinInstanceTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxInstanceTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkloadMetricsValidationError{
					field:  "MaxInstanceTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkloadMetricsValidationError{
					field:  "MaxInstanceTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxInstanceTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadMetricsValidationError{
				field:  "MaxInstanceTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CPULimit

	// no validation rules for MemoryLimit

	if len(errors) > 0 {
		return WorkloadMetricsMultiError(errors)
	}
	return nil
}

// WorkloadMetricsMultiError is an error wrapping multiple validation errors
// returned by WorkloadMetrics.ValidateAll() if the designated constraints
// aren't met.
type WorkloadMetricsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkloadMetricsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkloadMetricsMultiError) AllErrors() []error { return m }

// WorkloadMetricsValidationError is the validation error returned by
// WorkloadMetrics.Validate if the designated constraints aren't met.
type WorkloadMetricsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkloadMetricsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkloadMetricsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkloadMetricsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkloadMetricsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkloadMetricsValidationError) ErrorName() string { return "WorkloadMetricsValidationError" }

// Error satisfies the builtin error interface
func (e WorkloadMetricsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkloadMetrics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkloadMetricsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkloadMetricsValidationError{}

// Validate checks the field values on GetPodAutoscalerListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPodAutoscalerListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPodAutoscalerListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPodAutoscalerListRequestMultiError, or nil if none found.
func (m *GetPodAutoscalerListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPodAutoscalerListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 2 || l > 100 {
		err := GetPodAutoscalerListRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		err := GetPodAutoscalerListRequestValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetPodAutoscalerListRequest_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		err := GetPodAutoscalerListRequestValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 100 {
		err := GetPodAutoscalerListRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetPodAutoscalerListRequest_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := GetPodAutoscalerListRequestValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWorkloadType()) > 100 {
		err := GetPodAutoscalerListRequestValidationError{
			field:  "WorkloadType",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetPodAutoscalerListRequest_WorkloadType_Pattern.MatchString(m.GetWorkloadType()) {
		err := GetPodAutoscalerListRequestValidationError{
			field:  "WorkloadType",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWorkloadName()) > 100 {
		err := GetPodAutoscalerListRequestValidationError{
			field:  "WorkloadName",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetPodAutoscalerListRequest_WorkloadName_Pattern.MatchString(m.GetWorkloadName()) {
		err := GetPodAutoscalerListRequestValidationError{
			field:  "WorkloadName",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GetPodAutoscalerListRequest_Dimension_InLookup[m.GetDimension()]; !ok {
		err := GetPodAutoscalerListRequestValidationError{
			field:  "Dimension",
			reason: "value must be in list [minute hour day ]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() < 0 {
		err := GetPodAutoscalerListRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSize() > 10 {
		err := GetPodAutoscalerListRequestValidationError{
			field:  "Size",
			reason: "value must be less than or equal to 10",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBusiness()) > 100 {
		err := GetPodAutoscalerListRequestValidationError{
			field:  "Business",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetPodAutoscalerListRequest_Business_Pattern.MatchString(m.GetBusiness()) {
		err := GetPodAutoscalerListRequestValidationError{
			field:  "Business",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) > 100 {
		err := GetPodAutoscalerListRequestValidationError{
			field:  "Project",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetPodAutoscalerListRequest_Project_Pattern.MatchString(m.GetProject()) {
		err := GetPodAutoscalerListRequestValidationError{
			field:  "Project",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PodAutoscalerType

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return GetPodAutoscalerListRequestMultiError(errors)
	}
	return nil
}

// GetPodAutoscalerListRequestMultiError is an error wrapping multiple
// validation errors returned by GetPodAutoscalerListRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPodAutoscalerListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPodAutoscalerListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPodAutoscalerListRequestMultiError) AllErrors() []error { return m }

// GetPodAutoscalerListRequestValidationError is the validation error returned
// by GetPodAutoscalerListRequest.Validate if the designated constraints
// aren't met.
type GetPodAutoscalerListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPodAutoscalerListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPodAutoscalerListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPodAutoscalerListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPodAutoscalerListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPodAutoscalerListRequestValidationError) ErrorName() string {
	return "GetPodAutoscalerListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPodAutoscalerListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPodAutoscalerListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPodAutoscalerListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPodAutoscalerListRequestValidationError{}

var _GetPodAutoscalerListRequest_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _GetPodAutoscalerListRequest_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _GetPodAutoscalerListRequest_WorkloadType_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _GetPodAutoscalerListRequest_WorkloadName_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _GetPodAutoscalerListRequest_Dimension_InLookup = map[string]struct{}{
	"minute": {},
	"hour":   {},
	"day":    {},
	"":       {},
}

var _GetPodAutoscalerListRequest_Business_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _GetPodAutoscalerListRequest_Project_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on GetPodAutoscalerListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPodAutoscalerListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPodAutoscalerListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPodAutoscalerListResponseMultiError, or nil if none found.
func (m *GetPodAutoscalerListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPodAutoscalerListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPodAutoscalerListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPodAutoscalerListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPodAutoscalerListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPodAutoscalerListResponseMultiError(errors)
	}
	return nil
}

// GetPodAutoscalerListResponseMultiError is an error wrapping multiple
// validation errors returned by GetPodAutoscalerListResponse.ValidateAll() if
// the designated constraints aren't met.
type GetPodAutoscalerListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPodAutoscalerListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPodAutoscalerListResponseMultiError) AllErrors() []error { return m }

// GetPodAutoscalerListResponseValidationError is the validation error returned
// by GetPodAutoscalerListResponse.Validate if the designated constraints
// aren't met.
type GetPodAutoscalerListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPodAutoscalerListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPodAutoscalerListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPodAutoscalerListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPodAutoscalerListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPodAutoscalerListResponseValidationError) ErrorName() string {
	return "GetPodAutoscalerListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPodAutoscalerListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPodAutoscalerListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPodAutoscalerListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPodAutoscalerListResponseValidationError{}

// Validate checks the field values on GetPodAutoscalerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPodAutoscalerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPodAutoscalerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPodAutoscalerRequestMultiError, or nil if none found.
func (m *GetPodAutoscalerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPodAutoscalerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 2 || l > 100 {
		err := GetPodAutoscalerRequestValidationError{
			field:  "ClusterID",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !strings.HasPrefix(m.GetClusterID(), "BCS-") {
		err := GetPodAutoscalerRequestValidationError{
			field:  "ClusterID",
			reason: "value does not have prefix \"BCS-\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetPodAutoscalerRequest_ClusterID_Pattern.MatchString(m.GetClusterID()) {
		err := GetPodAutoscalerRequestValidationError{
			field:  "ClusterID",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 100 {
		err := GetPodAutoscalerRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetPodAutoscalerRequest_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := GetPodAutoscalerRequestValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GetPodAutoscalerRequest_Dimension_InLookup[m.GetDimension()]; !ok {
		err := GetPodAutoscalerRequestValidationError{
			field:  "Dimension",
			reason: "value must be in list [minute hour day ]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PodAutoscalerType

	// no validation rules for PodAutoscalerName

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return GetPodAutoscalerRequestMultiError(errors)
	}
	return nil
}

// GetPodAutoscalerRequestMultiError is an error wrapping multiple validation
// errors returned by GetPodAutoscalerRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPodAutoscalerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPodAutoscalerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPodAutoscalerRequestMultiError) AllErrors() []error { return m }

// GetPodAutoscalerRequestValidationError is the validation error returned by
// GetPodAutoscalerRequest.Validate if the designated constraints aren't met.
type GetPodAutoscalerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPodAutoscalerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPodAutoscalerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPodAutoscalerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPodAutoscalerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPodAutoscalerRequestValidationError) ErrorName() string {
	return "GetPodAutoscalerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPodAutoscalerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPodAutoscalerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPodAutoscalerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPodAutoscalerRequestValidationError{}

var _GetPodAutoscalerRequest_ClusterID_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _GetPodAutoscalerRequest_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _GetPodAutoscalerRequest_Dimension_InLookup = map[string]struct{}{
	"minute": {},
	"hour":   {},
	"day":    {},
	"":       {},
}

// Validate checks the field values on GetPodAutoscalerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPodAutoscalerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPodAutoscalerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPodAutoscalerResponseMultiError, or nil if none found.
func (m *GetPodAutoscalerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPodAutoscalerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Total

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPodAutoscalerResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPodAutoscalerResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPodAutoscalerResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPodAutoscalerResponseMultiError(errors)
	}
	return nil
}

// GetPodAutoscalerResponseMultiError is an error wrapping multiple validation
// errors returned by GetPodAutoscalerResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPodAutoscalerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPodAutoscalerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPodAutoscalerResponseMultiError) AllErrors() []error { return m }

// GetPodAutoscalerResponseValidationError is the validation error returned by
// GetPodAutoscalerResponse.Validate if the designated constraints aren't met.
type GetPodAutoscalerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPodAutoscalerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPodAutoscalerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPodAutoscalerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPodAutoscalerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPodAutoscalerResponseValidationError) ErrorName() string {
	return "GetPodAutoscalerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPodAutoscalerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPodAutoscalerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPodAutoscalerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPodAutoscalerResponseValidationError{}

// Validate checks the field values on PodAutoscaler with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PodAutoscaler) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodAutoscaler with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PodAutoscalerMultiError, or
// nil if none found.
func (m *PodAutoscaler) ValidateAll() error {
	return m.validate(true)
}

func (m *PodAutoscaler) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for ClusterID

	// no validation rules for Namespace

	// no validation rules for WorkloadType

	// no validation rules for WorkloadName

	// no validation rules for Dimension

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for BusinessID

	// no validation rules for PodAutoscalerType

	// no validation rules for PodAutoscalerName

	for idx, item := range m.GetMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PodAutoscalerValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PodAutoscalerValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PodAutoscalerValidationError{
					field:  fmt.Sprintf("Metrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Label

	// no validation rules for ProjectCode

	if len(errors) > 0 {
		return PodAutoscalerMultiError(errors)
	}
	return nil
}

// PodAutoscalerMultiError is an error wrapping multiple validation errors
// returned by PodAutoscaler.ValidateAll() if the designated constraints
// aren't met.
type PodAutoscalerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodAutoscalerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodAutoscalerMultiError) AllErrors() []error { return m }

// PodAutoscalerValidationError is the validation error returned by
// PodAutoscaler.Validate if the designated constraints aren't met.
type PodAutoscalerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodAutoscalerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodAutoscalerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodAutoscalerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodAutoscalerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodAutoscalerValidationError) ErrorName() string { return "PodAutoscalerValidationError" }

// Error satisfies the builtin error interface
func (e PodAutoscalerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodAutoscaler.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodAutoscalerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodAutoscalerValidationError{}

// Validate checks the field values on PodAutoscalerMetrics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PodAutoscalerMetrics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodAutoscalerMetrics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PodAutoscalerMetricsMultiError, or nil if none found.
func (m *PodAutoscalerMetrics) ValidateAll() error {
	return m.validate(true)
}

func (m *PodAutoscalerMetrics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Time

	// no validation rules for TotalSuccessfulRescale

	if len(errors) > 0 {
		return PodAutoscalerMetricsMultiError(errors)
	}
	return nil
}

// PodAutoscalerMetricsMultiError is an error wrapping multiple validation
// errors returned by PodAutoscalerMetrics.ValidateAll() if the designated
// constraints aren't met.
type PodAutoscalerMetricsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodAutoscalerMetricsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodAutoscalerMetricsMultiError) AllErrors() []error { return m }

// PodAutoscalerMetricsValidationError is the validation error returned by
// PodAutoscalerMetrics.Validate if the designated constraints aren't met.
type PodAutoscalerMetricsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodAutoscalerMetricsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodAutoscalerMetricsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodAutoscalerMetricsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodAutoscalerMetricsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodAutoscalerMetricsValidationError) ErrorName() string {
	return "PodAutoscalerMetricsValidationError"
}

// Error satisfies the builtin error interface
func (e PodAutoscalerMetricsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodAutoscalerMetrics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodAutoscalerMetricsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodAutoscalerMetricsValidationError{}

// Validate checks the field values on GetPowerTradingDataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPowerTradingDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPowerTradingDataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPowerTradingDataRequestMultiError, or nil if none found.
func (m *GetPowerTradingDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPowerTradingDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Table

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Params

	// no validation rules for Sort

	if len(errors) > 0 {
		return GetPowerTradingDataRequestMultiError(errors)
	}
	return nil
}

// GetPowerTradingDataRequestMultiError is an error wrapping multiple
// validation errors returned by GetPowerTradingDataRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPowerTradingDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPowerTradingDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPowerTradingDataRequestMultiError) AllErrors() []error { return m }

// GetPowerTradingDataRequestValidationError is the validation error returned
// by GetPowerTradingDataRequest.Validate if the designated constraints aren't met.
type GetPowerTradingDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPowerTradingDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPowerTradingDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPowerTradingDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPowerTradingDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPowerTradingDataRequestValidationError) ErrorName() string {
	return "GetPowerTradingDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPowerTradingDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPowerTradingDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPowerTradingDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPowerTradingDataRequestValidationError{}

// Validate checks the field values on GetPowerTradingDataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPowerTradingDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPowerTradingDataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPowerTradingDataResponseMultiError, or nil if none found.
func (m *GetPowerTradingDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPowerTradingDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPowerTradingDataResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPowerTradingDataResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPowerTradingDataResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPowerTradingDataResponseMultiError(errors)
	}
	return nil
}

// GetPowerTradingDataResponseMultiError is an error wrapping multiple
// validation errors returned by GetPowerTradingDataResponse.ValidateAll() if
// the designated constraints aren't met.
type GetPowerTradingDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPowerTradingDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPowerTradingDataResponseMultiError) AllErrors() []error { return m }

// GetPowerTradingDataResponseValidationError is the validation error returned
// by GetPowerTradingDataResponse.Validate if the designated constraints
// aren't met.
type GetPowerTradingDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPowerTradingDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPowerTradingDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPowerTradingDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPowerTradingDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPowerTradingDataResponseValidationError) ErrorName() string {
	return "GetPowerTradingDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPowerTradingDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPowerTradingDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPowerTradingDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPowerTradingDataResponseValidationError{}
