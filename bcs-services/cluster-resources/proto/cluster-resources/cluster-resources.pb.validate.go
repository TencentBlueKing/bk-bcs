// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cluster-resources.proto

package clusterresources

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EchoReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EchoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EchoReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EchoReqMultiError, or nil if none found.
func (m *EchoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EchoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetStr()); l < 2 || l > 30 {
		err := EchoReqValidationError{
			field:  "Str",
			reason: "value length must be between 2 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_EchoReq_Str_Pattern.MatchString(m.GetStr()) {
		err := EchoReqValidationError{
			field:  "Str",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EchoReqMultiError(errors)
	}

	return nil
}

// EchoReqMultiError is an error wrapping multiple validation errors returned
// by EchoReq.ValidateAll() if the designated constraints aren't met.
type EchoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EchoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EchoReqMultiError) AllErrors() []error { return m }

// EchoReqValidationError is the validation error returned by EchoReq.Validate
// if the designated constraints aren't met.
type EchoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EchoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EchoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EchoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EchoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EchoReqValidationError) ErrorName() string { return "EchoReqValidationError" }

// Error satisfies the builtin error interface
func (e EchoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEchoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EchoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EchoReqValidationError{}

var _EchoReq_Str_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

// Validate checks the field values on EchoResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EchoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EchoResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EchoRespMultiError, or nil
// if none found.
func (m *EchoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *EchoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ret

	if len(errors) > 0 {
		return EchoRespMultiError(errors)
	}

	return nil
}

// EchoRespMultiError is an error wrapping multiple validation errors returned
// by EchoResp.ValidateAll() if the designated constraints aren't met.
type EchoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EchoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EchoRespMultiError) AllErrors() []error { return m }

// EchoRespValidationError is the validation error returned by
// EchoResp.Validate if the designated constraints aren't met.
type EchoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EchoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EchoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EchoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EchoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EchoRespValidationError) ErrorName() string { return "EchoRespValidationError" }

// Error satisfies the builtin error interface
func (e EchoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEchoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EchoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EchoRespValidationError{}

// Validate checks the field values on PingReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PingReqMultiError, or nil if none found.
func (m *PingReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PingReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PingReqMultiError(errors)
	}

	return nil
}

// PingReqMultiError is an error wrapping multiple validation errors returned
// by PingReq.ValidateAll() if the designated constraints aren't met.
type PingReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingReqMultiError) AllErrors() []error { return m }

// PingReqValidationError is the validation error returned by PingReq.Validate
// if the designated constraints aren't met.
type PingReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingReqValidationError) ErrorName() string { return "PingReqValidationError" }

// Error satisfies the builtin error interface
func (e PingReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingReqValidationError{}

// Validate checks the field values on PingResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingRespMultiError, or nil
// if none found.
func (m *PingResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PingResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ret

	if len(errors) > 0 {
		return PingRespMultiError(errors)
	}

	return nil
}

// PingRespMultiError is an error wrapping multiple validation errors returned
// by PingResp.ValidateAll() if the designated constraints aren't met.
type PingRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingRespMultiError) AllErrors() []error { return m }

// PingRespValidationError is the validation error returned by
// PingResp.Validate if the designated constraints aren't met.
type PingRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRespValidationError) ErrorName() string { return "PingRespValidationError" }

// Error satisfies the builtin error interface
func (e PingRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRespValidationError{}

// Validate checks the field values on HealthzReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HealthzReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthzReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HealthzReqMultiError, or
// nil if none found.
func (m *HealthzReq) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthzReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RaiseErr

	// no validation rules for Token

	if len(errors) > 0 {
		return HealthzReqMultiError(errors)
	}

	return nil
}

// HealthzReqMultiError is an error wrapping multiple validation errors
// returned by HealthzReq.ValidateAll() if the designated constraints aren't met.
type HealthzReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthzReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthzReqMultiError) AllErrors() []error { return m }

// HealthzReqValidationError is the validation error returned by
// HealthzReq.Validate if the designated constraints aren't met.
type HealthzReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthzReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthzReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthzReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthzReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthzReqValidationError) ErrorName() string { return "HealthzReqValidationError" }

// Error satisfies the builtin error interface
func (e HealthzReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthzReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthzReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthzReqValidationError{}

// Validate checks the field values on HealthzResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HealthzResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthzResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HealthzRespMultiError, or
// nil if none found.
func (m *HealthzResp) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthzResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallTime

	// no validation rules for Status

	// no validation rules for Redis

	if len(errors) > 0 {
		return HealthzRespMultiError(errors)
	}

	return nil
}

// HealthzRespMultiError is an error wrapping multiple validation errors
// returned by HealthzResp.ValidateAll() if the designated constraints aren't met.
type HealthzRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthzRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthzRespMultiError) AllErrors() []error { return m }

// HealthzRespValidationError is the validation error returned by
// HealthzResp.Validate if the designated constraints aren't met.
type HealthzRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthzRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthzRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthzRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthzRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthzRespValidationError) ErrorName() string { return "HealthzRespValidationError" }

// Error satisfies the builtin error interface
func (e HealthzRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthzResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthzRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthzRespValidationError{}

// Validate checks the field values on VersionReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VersionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VersionReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VersionReqMultiError, or
// nil if none found.
func (m *VersionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VersionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VersionReqMultiError(errors)
	}

	return nil
}

// VersionReqMultiError is an error wrapping multiple validation errors
// returned by VersionReq.ValidateAll() if the designated constraints aren't met.
type VersionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VersionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VersionReqMultiError) AllErrors() []error { return m }

// VersionReqValidationError is the validation error returned by
// VersionReq.Validate if the designated constraints aren't met.
type VersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionReqValidationError) ErrorName() string { return "VersionReqValidationError" }

// Error satisfies the builtin error interface
func (e VersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionReqValidationError{}

// Validate checks the field values on VersionResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VersionResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VersionResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VersionRespMultiError, or
// nil if none found.
func (m *VersionResp) ValidateAll() error {
	return m.validate(true)
}

func (m *VersionResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for GitCommit

	// no validation rules for BuildTime

	// no validation rules for GoVersion

	// no validation rules for RunMode

	// no validation rules for CallTime

	if len(errors) > 0 {
		return VersionRespMultiError(errors)
	}

	return nil
}

// VersionRespMultiError is an error wrapping multiple validation errors
// returned by VersionResp.ValidateAll() if the designated constraints aren't met.
type VersionRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VersionRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VersionRespMultiError) AllErrors() []error { return m }

// VersionRespValidationError is the validation error returned by
// VersionResp.Validate if the designated constraints aren't met.
type VersionRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionRespValidationError) ErrorName() string { return "VersionRespValidationError" }

// Error satisfies the builtin error interface
func (e VersionRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersionResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionRespValidationError{}

// Validate checks the field values on ResListReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResListReqMultiError, or
// nil if none found.
func (m *ResListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ResListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ResListReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := ResListReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := ResListReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := ResListReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ResListReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := ResListReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLabelSelector()) > 2048 {
		err := ResListReqValidationError{
			field:  "LabelSelector",
			reason: "value length must be at most 2048 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApiVersion()) > 63 {
		err := ResListReqValidationError{
			field:  "ApiVersion",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOwnerName()) > 256 {
		err := ResListReqValidationError{
			field:  "OwnerName",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOwnerKind()) > 64 {
		err := ResListReqValidationError{
			field:  "OwnerKind",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ResListReq_Format_InLookup[m.GetFormat()]; !ok {
		err := ResListReqValidationError{
			field:  "Format",
			reason: "value must be in list [ manifest selectItems]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScene()) > 32 {
		err := ResListReqValidationError{
			field:  "Scene",
			reason: "value length must be at most 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResListReqMultiError(errors)
	}

	return nil
}

// ResListReqMultiError is an error wrapping multiple validation errors
// returned by ResListReq.ValidateAll() if the designated constraints aren't met.
type ResListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResListReqMultiError) AllErrors() []error { return m }

// ResListReqValidationError is the validation error returned by
// ResListReq.Validate if the designated constraints aren't met.
type ResListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResListReqValidationError) ErrorName() string { return "ResListReqValidationError" }

// Error satisfies the builtin error interface
func (e ResListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResListReqValidationError{}

var _ResListReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _ResListReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]*$")

var _ResListReq_Format_InLookup = map[string]struct{}{
	"":            {},
	"manifest":    {},
	"selectItems": {},
}

// Validate checks the field values on ResGetReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResGetReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResGetReqMultiError, or nil
// if none found.
func (m *ResGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ResGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ResGetReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := ResGetReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := ResGetReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := ResGetReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ResGetReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := ResGetReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) > 253 {
		err := ResGetReqValidationError{
			field:  "Name",
			reason: "value length must be at most 253 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ResGetReq_Name_Pattern.MatchString(m.GetName()) {
		err := ResGetReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApiVersion()) > 63 {
		err := ResGetReqValidationError{
			field:  "ApiVersion",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ResGetReq_Format_InLookup[m.GetFormat()]; !ok {
		err := ResGetReqValidationError{
			field:  "Format",
			reason: "value must be in list [ manifest formData]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResGetReqMultiError(errors)
	}

	return nil
}

// ResGetReqMultiError is an error wrapping multiple validation errors returned
// by ResGetReq.ValidateAll() if the designated constraints aren't met.
type ResGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResGetReqMultiError) AllErrors() []error { return m }

// ResGetReqValidationError is the validation error returned by
// ResGetReq.Validate if the designated constraints aren't met.
type ResGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResGetReqValidationError) ErrorName() string { return "ResGetReqValidationError" }

// Error satisfies the builtin error interface
func (e ResGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResGetReqValidationError{}

var _ResGetReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _ResGetReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]*$")

var _ResGetReq_Name_Pattern = regexp.MustCompile("[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*")

var _ResGetReq_Format_InLookup = map[string]struct{}{
	"":         {},
	"manifest": {},
	"formData": {},
}

// Validate checks the field values on ResCreateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResCreateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResCreateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResCreateReqMultiError, or
// nil if none found.
func (m *ResCreateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ResCreateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ResCreateReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := ResCreateReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := ResCreateReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRawData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResCreateReqValidationError{
					field:  "RawData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResCreateReqValidationError{
					field:  "RawData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRawData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResCreateReqValidationError{
				field:  "RawData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _ResCreateReq_Format_InLookup[m.GetFormat()]; !ok {
		err := ResCreateReqValidationError{
			field:  "Format",
			reason: "value must be in list [ manifest formData]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResCreateReqMultiError(errors)
	}

	return nil
}

// ResCreateReqMultiError is an error wrapping multiple validation errors
// returned by ResCreateReq.ValidateAll() if the designated constraints aren't met.
type ResCreateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResCreateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResCreateReqMultiError) AllErrors() []error { return m }

// ResCreateReqValidationError is the validation error returned by
// ResCreateReq.Validate if the designated constraints aren't met.
type ResCreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResCreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResCreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResCreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResCreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResCreateReqValidationError) ErrorName() string { return "ResCreateReqValidationError" }

// Error satisfies the builtin error interface
func (e ResCreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResCreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResCreateReqValidationError{}

var _ResCreateReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _ResCreateReq_Format_InLookup = map[string]struct{}{
	"":         {},
	"manifest": {},
	"formData": {},
}

// Validate checks the field values on ResUpdateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResUpdateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResUpdateReqMultiError, or
// nil if none found.
func (m *ResUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ResUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ResUpdateReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := ResUpdateReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := ResUpdateReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := ResUpdateReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ResUpdateReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := ResUpdateReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) > 253 {
		err := ResUpdateReqValidationError{
			field:  "Name",
			reason: "value length must be at most 253 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ResUpdateReq_Name_Pattern.MatchString(m.GetName()) {
		err := ResUpdateReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRawData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResUpdateReqValidationError{
					field:  "RawData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResUpdateReqValidationError{
					field:  "RawData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRawData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResUpdateReqValidationError{
				field:  "RawData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _ResUpdateReq_Format_InLookup[m.GetFormat()]; !ok {
		err := ResUpdateReqValidationError{
			field:  "Format",
			reason: "value must be in list [ manifest formData]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResUpdateReqMultiError(errors)
	}

	return nil
}

// ResUpdateReqMultiError is an error wrapping multiple validation errors
// returned by ResUpdateReq.ValidateAll() if the designated constraints aren't met.
type ResUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResUpdateReqMultiError) AllErrors() []error { return m }

// ResUpdateReqValidationError is the validation error returned by
// ResUpdateReq.Validate if the designated constraints aren't met.
type ResUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResUpdateReqValidationError) ErrorName() string { return "ResUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e ResUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResUpdateReqValidationError{}

var _ResUpdateReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _ResUpdateReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]*$")

var _ResUpdateReq_Name_Pattern = regexp.MustCompile("[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*")

var _ResUpdateReq_Format_InLookup = map[string]struct{}{
	"":         {},
	"manifest": {},
	"formData": {},
}

// Validate checks the field values on ResRestartReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResRestartReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResRestartReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResRestartReqMultiError, or
// nil if none found.
func (m *ResRestartReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ResRestartReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ResRestartReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := ResRestartReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := ResRestartReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := ResRestartReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ResRestartReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := ResRestartReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) > 253 {
		err := ResRestartReqValidationError{
			field:  "Name",
			reason: "value length must be at most 253 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ResRestartReq_Name_Pattern.MatchString(m.GetName()) {
		err := ResRestartReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResRestartReqMultiError(errors)
	}

	return nil
}

// ResRestartReqMultiError is an error wrapping multiple validation errors
// returned by ResRestartReq.ValidateAll() if the designated constraints
// aren't met.
type ResRestartReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResRestartReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResRestartReqMultiError) AllErrors() []error { return m }

// ResRestartReqValidationError is the validation error returned by
// ResRestartReq.Validate if the designated constraints aren't met.
type ResRestartReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResRestartReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResRestartReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResRestartReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResRestartReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResRestartReqValidationError) ErrorName() string { return "ResRestartReqValidationError" }

// Error satisfies the builtin error interface
func (e ResRestartReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResRestartReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResRestartReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResRestartReqValidationError{}

var _ResRestartReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _ResRestartReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]*$")

var _ResRestartReq_Name_Pattern = regexp.MustCompile("[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*")

// Validate checks the field values on ResPauseOrResumeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResPauseOrResumeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResPauseOrResumeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResPauseOrResumeReqMultiError, or nil if none found.
func (m *ResPauseOrResumeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ResPauseOrResumeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ResPauseOrResumeReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := ResPauseOrResumeReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := ResPauseOrResumeReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := ResPauseOrResumeReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ResPauseOrResumeReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := ResPauseOrResumeReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) > 253 {
		err := ResPauseOrResumeReqValidationError{
			field:  "Name",
			reason: "value length must be at most 253 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ResPauseOrResumeReq_Name_Pattern.MatchString(m.GetName()) {
		err := ResPauseOrResumeReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Value

	if len(errors) > 0 {
		return ResPauseOrResumeReqMultiError(errors)
	}

	return nil
}

// ResPauseOrResumeReqMultiError is an error wrapping multiple validation
// errors returned by ResPauseOrResumeReq.ValidateAll() if the designated
// constraints aren't met.
type ResPauseOrResumeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResPauseOrResumeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResPauseOrResumeReqMultiError) AllErrors() []error { return m }

// ResPauseOrResumeReqValidationError is the validation error returned by
// ResPauseOrResumeReq.Validate if the designated constraints aren't met.
type ResPauseOrResumeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResPauseOrResumeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResPauseOrResumeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResPauseOrResumeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResPauseOrResumeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResPauseOrResumeReqValidationError) ErrorName() string {
	return "ResPauseOrResumeReqValidationError"
}

// Error satisfies the builtin error interface
func (e ResPauseOrResumeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResPauseOrResumeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResPauseOrResumeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResPauseOrResumeReqValidationError{}

var _ResPauseOrResumeReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _ResPauseOrResumeReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]*$")

var _ResPauseOrResumeReq_Name_Pattern = regexp.MustCompile("[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*")

// Validate checks the field values on ResScaleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResScaleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResScaleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResScaleReqMultiError, or
// nil if none found.
func (m *ResScaleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ResScaleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ResScaleReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := ResScaleReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := ResScaleReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := ResScaleReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ResScaleReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := ResScaleReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) > 253 {
		err := ResScaleReqValidationError{
			field:  "Name",
			reason: "value length must be at most 253 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ResScaleReq_Name_Pattern.MatchString(m.GetName()) {
		err := ResScaleReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetReplicas(); val < 0 || val > 8192 {
		err := ResScaleReqValidationError{
			field:  "Replicas",
			reason: "value must be inside range [0, 8192]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResScaleReqMultiError(errors)
	}

	return nil
}

// ResScaleReqMultiError is an error wrapping multiple validation errors
// returned by ResScaleReq.ValidateAll() if the designated constraints aren't met.
type ResScaleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResScaleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResScaleReqMultiError) AllErrors() []error { return m }

// ResScaleReqValidationError is the validation error returned by
// ResScaleReq.Validate if the designated constraints aren't met.
type ResScaleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResScaleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResScaleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResScaleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResScaleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResScaleReqValidationError) ErrorName() string { return "ResScaleReqValidationError" }

// Error satisfies the builtin error interface
func (e ResScaleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResScaleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResScaleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResScaleReqValidationError{}

var _ResScaleReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _ResScaleReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]*$")

var _ResScaleReq_Name_Pattern = regexp.MustCompile("[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*")

// Validate checks the field values on ResDeleteReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResDeleteReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResDeleteReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResDeleteReqMultiError, or
// nil if none found.
func (m *ResDeleteReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ResDeleteReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ResDeleteReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := ResDeleteReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := ResDeleteReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := ResDeleteReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ResDeleteReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := ResDeleteReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) > 253 {
		err := ResDeleteReqValidationError{
			field:  "Name",
			reason: "value length must be at most 253 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ResDeleteReq_Name_Pattern.MatchString(m.GetName()) {
		err := ResDeleteReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResDeleteReqMultiError(errors)
	}

	return nil
}

// ResDeleteReqMultiError is an error wrapping multiple validation errors
// returned by ResDeleteReq.ValidateAll() if the designated constraints aren't met.
type ResDeleteReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResDeleteReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResDeleteReqMultiError) AllErrors() []error { return m }

// ResDeleteReqValidationError is the validation error returned by
// ResDeleteReq.Validate if the designated constraints aren't met.
type ResDeleteReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResDeleteReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResDeleteReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResDeleteReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResDeleteReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResDeleteReqValidationError) ErrorName() string { return "ResDeleteReqValidationError" }

// Error satisfies the builtin error interface
func (e ResDeleteReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResDeleteReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResDeleteReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResDeleteReqValidationError{}

var _ResDeleteReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _ResDeleteReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]*$")

var _ResDeleteReq_Name_Pattern = regexp.MustCompile("[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*")

// Validate checks the field values on GetResHistoryReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetResHistoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResHistoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResHistoryReqMultiError, or nil if none found.
func (m *GetResHistoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResHistoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetResHistoryReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := GetResHistoryReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := GetResHistoryReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := GetResHistoryReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetResHistoryReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := GetResHistoryReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) > 253 {
		err := GetResHistoryReqValidationError{
			field:  "Name",
			reason: "value length must be at most 253 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetResHistoryReq_Name_Pattern.MatchString(m.GetName()) {
		err := GetResHistoryReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetResHistoryReqMultiError(errors)
	}

	return nil
}

// GetResHistoryReqMultiError is an error wrapping multiple validation errors
// returned by GetResHistoryReq.ValidateAll() if the designated constraints
// aren't met.
type GetResHistoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResHistoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResHistoryReqMultiError) AllErrors() []error { return m }

// GetResHistoryReqValidationError is the validation error returned by
// GetResHistoryReq.Validate if the designated constraints aren't met.
type GetResHistoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResHistoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResHistoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResHistoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResHistoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResHistoryReqValidationError) ErrorName() string { return "GetResHistoryReqValidationError" }

// Error satisfies the builtin error interface
func (e GetResHistoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResHistoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResHistoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResHistoryReqValidationError{}

var _GetResHistoryReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _GetResHistoryReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]*$")

var _GetResHistoryReq_Name_Pattern = regexp.MustCompile("[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*")

// Validate checks the field values on RolloutRevisionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RolloutRevisionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RolloutRevisionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RolloutRevisionReqMultiError, or nil if none found.
func (m *RolloutRevisionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RolloutRevisionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_RolloutRevisionReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := RolloutRevisionReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := RolloutRevisionReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := RolloutRevisionReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RolloutRevisionReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := RolloutRevisionReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) > 253 {
		err := RolloutRevisionReqValidationError{
			field:  "Name",
			reason: "value length must be at most 253 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RolloutRevisionReq_Name_Pattern.MatchString(m.GetName()) {
		err := RolloutRevisionReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRevision() < 0 {
		err := RolloutRevisionReqValidationError{
			field:  "Revision",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RolloutRevisionReqMultiError(errors)
	}

	return nil
}

// RolloutRevisionReqMultiError is an error wrapping multiple validation errors
// returned by RolloutRevisionReq.ValidateAll() if the designated constraints
// aren't met.
type RolloutRevisionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RolloutRevisionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RolloutRevisionReqMultiError) AllErrors() []error { return m }

// RolloutRevisionReqValidationError is the validation error returned by
// RolloutRevisionReq.Validate if the designated constraints aren't met.
type RolloutRevisionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RolloutRevisionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RolloutRevisionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RolloutRevisionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RolloutRevisionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RolloutRevisionReqValidationError) ErrorName() string {
	return "RolloutRevisionReqValidationError"
}

// Error satisfies the builtin error interface
func (e RolloutRevisionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRolloutRevisionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RolloutRevisionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RolloutRevisionReqValidationError{}

var _RolloutRevisionReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _RolloutRevisionReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]*$")

var _RolloutRevisionReq_Name_Pattern = regexp.MustCompile("[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*")

// Validate checks the field values on ResBatchRescheduleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResBatchRescheduleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResBatchRescheduleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResBatchRescheduleReqMultiError, or nil if none found.
func (m *ResBatchRescheduleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ResBatchRescheduleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ResBatchRescheduleReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := ResBatchRescheduleReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := ResBatchRescheduleReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := ResBatchRescheduleReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ResBatchRescheduleReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := ResBatchRescheduleReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) > 253 {
		err := ResBatchRescheduleReqValidationError{
			field:  "Name",
			reason: "value length must be at most 253 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ResBatchRescheduleReq_Name_Pattern.MatchString(m.GetName()) {
		err := ResBatchRescheduleReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLabelSelector()) > 2048 {
		err := ResBatchRescheduleReqValidationError{
			field:  "LabelSelector",
			reason: "value length must be at most 2048 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPodNames()) < 1 {
		err := ResBatchRescheduleReqValidationError{
			field:  "PodNames",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_ResBatchRescheduleReq_PodNames_Unique := make(map[string]struct{}, len(m.GetPodNames()))

	for idx, item := range m.GetPodNames() {
		_, _ = idx, item

		if _, exists := _ResBatchRescheduleReq_PodNames_Unique[item]; exists {
			err := ResBatchRescheduleReqValidationError{
				field:  fmt.Sprintf("PodNames[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_ResBatchRescheduleReq_PodNames_Unique[item] = struct{}{}
		}

		if utf8.RuneCountInString(item) > 253 {
			err := ResBatchRescheduleReqValidationError{
				field:  fmt.Sprintf("PodNames[%v]", idx),
				reason: "value length must be at most 253 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ResBatchRescheduleReq_PodNames_Pattern.MatchString(item) {
			err := ResBatchRescheduleReqValidationError{
				field:  fmt.Sprintf("PodNames[%v]", idx),
				reason: "value does not match regex pattern \"[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ResBatchRescheduleReqMultiError(errors)
	}

	return nil
}

// ResBatchRescheduleReqMultiError is an error wrapping multiple validation
// errors returned by ResBatchRescheduleReq.ValidateAll() if the designated
// constraints aren't met.
type ResBatchRescheduleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResBatchRescheduleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResBatchRescheduleReqMultiError) AllErrors() []error { return m }

// ResBatchRescheduleReqValidationError is the validation error returned by
// ResBatchRescheduleReq.Validate if the designated constraints aren't met.
type ResBatchRescheduleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResBatchRescheduleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResBatchRescheduleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResBatchRescheduleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResBatchRescheduleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResBatchRescheduleReqValidationError) ErrorName() string {
	return "ResBatchRescheduleReqValidationError"
}

// Error satisfies the builtin error interface
func (e ResBatchRescheduleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResBatchRescheduleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResBatchRescheduleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResBatchRescheduleReqValidationError{}

var _ResBatchRescheduleReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _ResBatchRescheduleReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]*$")

var _ResBatchRescheduleReq_Name_Pattern = regexp.MustCompile("[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*")

var _ResBatchRescheduleReq_PodNames_Pattern = regexp.MustCompile("[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*")

// Validate checks the field values on ListPoByNodeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPoByNodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPoByNodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPoByNodeReqMultiError, or nil if none found.
func (m *ListPoByNodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPoByNodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ListPoByNodeReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := ListPoByNodeReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := ListPoByNodeReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNodeName()) > 256 {
		err := ListPoByNodeReqValidationError{
			field:  "NodeName",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListPoByNodeReqMultiError(errors)
	}

	return nil
}

// ListPoByNodeReqMultiError is an error wrapping multiple validation errors
// returned by ListPoByNodeReq.ValidateAll() if the designated constraints
// aren't met.
type ListPoByNodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPoByNodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPoByNodeReqMultiError) AllErrors() []error { return m }

// ListPoByNodeReqValidationError is the validation error returned by
// ListPoByNodeReq.Validate if the designated constraints aren't met.
type ListPoByNodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPoByNodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPoByNodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPoByNodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPoByNodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPoByNodeReqValidationError) ErrorName() string { return "ListPoByNodeReqValidationError" }

// Error satisfies the builtin error interface
func (e ListPoByNodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPoByNodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPoByNodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPoByNodeReqValidationError{}

var _ListPoByNodeReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

// Validate checks the field values on ContainerListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ContainerListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerListReqMultiError, or nil if none found.
func (m *ContainerListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ContainerListReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := ContainerListReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := ContainerListReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := ContainerListReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ContainerListReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := ContainerListReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPodName()) > 253 {
		err := ContainerListReqValidationError{
			field:  "PodName",
			reason: "value length must be at most 253 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ContainerListReq_PodName_Pattern.MatchString(m.GetPodName()) {
		err := ContainerListReqValidationError{
			field:  "PodName",
			reason: "value does not match regex pattern \"[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ContainerListReqMultiError(errors)
	}

	return nil
}

// ContainerListReqMultiError is an error wrapping multiple validation errors
// returned by ContainerListReq.ValidateAll() if the designated constraints
// aren't met.
type ContainerListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerListReqMultiError) AllErrors() []error { return m }

// ContainerListReqValidationError is the validation error returned by
// ContainerListReq.Validate if the designated constraints aren't met.
type ContainerListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerListReqValidationError) ErrorName() string { return "ContainerListReqValidationError" }

// Error satisfies the builtin error interface
func (e ContainerListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerListReqValidationError{}

var _ContainerListReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _ContainerListReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _ContainerListReq_PodName_Pattern = regexp.MustCompile("[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*")

// Validate checks the field values on ContainerGetReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ContainerGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerGetReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerGetReqMultiError, or nil if none found.
func (m *ContainerGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ContainerGetReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := ContainerGetReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := ContainerGetReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := ContainerGetReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ContainerGetReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := ContainerGetReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPodName()) > 253 {
		err := ContainerGetReqValidationError{
			field:  "PodName",
			reason: "value length must be at most 253 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ContainerGetReq_PodName_Pattern.MatchString(m.GetPodName()) {
		err := ContainerGetReqValidationError{
			field:  "PodName",
			reason: "value does not match regex pattern \"[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContainerName()) > 63 {
		err := ContainerGetReqValidationError{
			field:  "ContainerName",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ContainerGetReq_ContainerName_Pattern.MatchString(m.GetContainerName()) {
		err := ContainerGetReqValidationError{
			field:  "ContainerName",
			reason: "value does not match regex pattern \"[a-z0-9]([-a-z0-9]*[a-z0-9])?\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ContainerGetReqMultiError(errors)
	}

	return nil
}

// ContainerGetReqMultiError is an error wrapping multiple validation errors
// returned by ContainerGetReq.ValidateAll() if the designated constraints
// aren't met.
type ContainerGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerGetReqMultiError) AllErrors() []error { return m }

// ContainerGetReqValidationError is the validation error returned by
// ContainerGetReq.Validate if the designated constraints aren't met.
type ContainerGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerGetReqValidationError) ErrorName() string { return "ContainerGetReqValidationError" }

// Error satisfies the builtin error interface
func (e ContainerGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerGetReqValidationError{}

var _ContainerGetReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _ContainerGetReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]+$")

var _ContainerGetReq_PodName_Pattern = regexp.MustCompile("[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*")

var _ContainerGetReq_ContainerName_Pattern = regexp.MustCompile("[a-z0-9]([-a-z0-9]*[a-z0-9])?")

// Validate checks the field values on GetK8SResTemplateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetK8SResTemplateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetK8SResTemplateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetK8SResTemplateReqMultiError, or nil if none found.
func (m *GetK8SResTemplateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetK8SResTemplateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetK8SResTemplateReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := GetK8SResTemplateReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := GetK8SResTemplateReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetKind()); l < 3 || l > 64 {
		err := GetK8SResTemplateReqValidationError{
			field:  "Kind",
			reason: "value length must be between 3 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := GetK8SResTemplateReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetK8SResTemplateReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := GetK8SResTemplateReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetK8SResTemplateReqMultiError(errors)
	}

	return nil
}

// GetK8SResTemplateReqMultiError is an error wrapping multiple validation
// errors returned by GetK8SResTemplateReq.ValidateAll() if the designated
// constraints aren't met.
type GetK8SResTemplateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetK8SResTemplateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetK8SResTemplateReqMultiError) AllErrors() []error { return m }

// GetK8SResTemplateReqValidationError is the validation error returned by
// GetK8SResTemplateReq.Validate if the designated constraints aren't met.
type GetK8SResTemplateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetK8SResTemplateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetK8SResTemplateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetK8SResTemplateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetK8SResTemplateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetK8SResTemplateReqValidationError) ErrorName() string {
	return "GetK8SResTemplateReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetK8SResTemplateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetK8SResTemplateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetK8SResTemplateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetK8SResTemplateReqValidationError{}

var _GetK8SResTemplateReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _GetK8SResTemplateReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]*$")

// Validate checks the field values on CObjListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CObjListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CObjListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CObjListReqMultiError, or
// nil if none found.
func (m *CObjListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CObjListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CObjListReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := CObjListReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := CObjListReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCRDName()) > 256 {
		err := CObjListReqValidationError{
			field:  "CRDName",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := CObjListReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CObjListReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := CObjListReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CObjListReq_Format_InLookup[m.GetFormat()]; !ok {
		err := CObjListReqValidationError{
			field:  "Format",
			reason: "value must be in list [ manifest selectItems]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScene()) > 32 {
		err := CObjListReqValidationError{
			field:  "Scene",
			reason: "value length must be at most 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CObjListReqMultiError(errors)
	}

	return nil
}

// CObjListReqMultiError is an error wrapping multiple validation errors
// returned by CObjListReq.ValidateAll() if the designated constraints aren't met.
type CObjListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CObjListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CObjListReqMultiError) AllErrors() []error { return m }

// CObjListReqValidationError is the validation error returned by
// CObjListReq.Validate if the designated constraints aren't met.
type CObjListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CObjListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CObjListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CObjListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CObjListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CObjListReqValidationError) ErrorName() string { return "CObjListReqValidationError" }

// Error satisfies the builtin error interface
func (e CObjListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCObjListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CObjListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CObjListReqValidationError{}

var _CObjListReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _CObjListReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]*$")

var _CObjListReq_Format_InLookup = map[string]struct{}{
	"":            {},
	"manifest":    {},
	"selectItems": {},
}

// Validate checks the field values on CObjGetReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CObjGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CObjGetReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CObjGetReqMultiError, or
// nil if none found.
func (m *CObjGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CObjGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CObjGetReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := CObjGetReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := CObjGetReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCRDName()) > 256 {
		err := CObjGetReqValidationError{
			field:  "CRDName",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCobjName()) > 256 {
		err := CObjGetReqValidationError{
			field:  "CobjName",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := CObjGetReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CObjGetReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := CObjGetReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CObjGetReq_Format_InLookup[m.GetFormat()]; !ok {
		err := CObjGetReqValidationError{
			field:  "Format",
			reason: "value must be in list [ manifest formData]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CObjGetReqMultiError(errors)
	}

	return nil
}

// CObjGetReqMultiError is an error wrapping multiple validation errors
// returned by CObjGetReq.ValidateAll() if the designated constraints aren't met.
type CObjGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CObjGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CObjGetReqMultiError) AllErrors() []error { return m }

// CObjGetReqValidationError is the validation error returned by
// CObjGetReq.Validate if the designated constraints aren't met.
type CObjGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CObjGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CObjGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CObjGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CObjGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CObjGetReqValidationError) ErrorName() string { return "CObjGetReqValidationError" }

// Error satisfies the builtin error interface
func (e CObjGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCObjGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CObjGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CObjGetReqValidationError{}

var _CObjGetReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _CObjGetReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]*$")

var _CObjGetReq_Format_InLookup = map[string]struct{}{
	"":         {},
	"manifest": {},
	"formData": {},
}

// Validate checks the field values on CObjHistoryReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CObjHistoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CObjHistoryReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CObjHistoryReqMultiError,
// or nil if none found.
func (m *CObjHistoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CObjHistoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CObjHistoryReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := CObjHistoryReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := CObjHistoryReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCRDName()) > 256 {
		err := CObjHistoryReqValidationError{
			field:  "CRDName",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCobjName()) > 256 {
		err := CObjHistoryReqValidationError{
			field:  "CobjName",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := CObjHistoryReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CObjHistoryReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := CObjHistoryReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CObjHistoryReqMultiError(errors)
	}

	return nil
}

// CObjHistoryReqMultiError is an error wrapping multiple validation errors
// returned by CObjHistoryReq.ValidateAll() if the designated constraints
// aren't met.
type CObjHistoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CObjHistoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CObjHistoryReqMultiError) AllErrors() []error { return m }

// CObjHistoryReqValidationError is the validation error returned by
// CObjHistoryReq.Validate if the designated constraints aren't met.
type CObjHistoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CObjHistoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CObjHistoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CObjHistoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CObjHistoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CObjHistoryReqValidationError) ErrorName() string { return "CObjHistoryReqValidationError" }

// Error satisfies the builtin error interface
func (e CObjHistoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCObjHistoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CObjHistoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CObjHistoryReqValidationError{}

var _CObjHistoryReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _CObjHistoryReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]*$")

// Validate checks the field values on CObjRestartReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CObjRestartReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CObjRestartReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CObjRestartReqMultiError,
// or nil if none found.
func (m *CObjRestartReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CObjRestartReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CObjRestartReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := CObjRestartReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := CObjRestartReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCRDName()) > 256 {
		err := CObjRestartReqValidationError{
			field:  "CRDName",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCobjName()) > 256 {
		err := CObjRestartReqValidationError{
			field:  "CobjName",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := CObjRestartReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CObjRestartReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := CObjRestartReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CObjRestartReqMultiError(errors)
	}

	return nil
}

// CObjRestartReqMultiError is an error wrapping multiple validation errors
// returned by CObjRestartReq.ValidateAll() if the designated constraints
// aren't met.
type CObjRestartReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CObjRestartReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CObjRestartReqMultiError) AllErrors() []error { return m }

// CObjRestartReqValidationError is the validation error returned by
// CObjRestartReq.Validate if the designated constraints aren't met.
type CObjRestartReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CObjRestartReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CObjRestartReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CObjRestartReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CObjRestartReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CObjRestartReqValidationError) ErrorName() string { return "CObjRestartReqValidationError" }

// Error satisfies the builtin error interface
func (e CObjRestartReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCObjRestartReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CObjRestartReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CObjRestartReqValidationError{}

var _CObjRestartReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _CObjRestartReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]*$")

// Validate checks the field values on CObjRolloutReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CObjRolloutReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CObjRolloutReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CObjRolloutReqMultiError,
// or nil if none found.
func (m *CObjRolloutReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CObjRolloutReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CObjRolloutReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := CObjRolloutReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := CObjRolloutReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCRDName()) > 256 {
		err := CObjRolloutReqValidationError{
			field:  "CRDName",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCobjName()) > 256 {
		err := CObjRolloutReqValidationError{
			field:  "CobjName",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := CObjRolloutReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CObjRolloutReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := CObjRolloutReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRevision() < 0 {
		err := CObjRolloutReqValidationError{
			field:  "Revision",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CObjRolloutReqMultiError(errors)
	}

	return nil
}

// CObjRolloutReqMultiError is an error wrapping multiple validation errors
// returned by CObjRolloutReq.ValidateAll() if the designated constraints
// aren't met.
type CObjRolloutReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CObjRolloutReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CObjRolloutReqMultiError) AllErrors() []error { return m }

// CObjRolloutReqValidationError is the validation error returned by
// CObjRolloutReq.Validate if the designated constraints aren't met.
type CObjRolloutReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CObjRolloutReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CObjRolloutReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CObjRolloutReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CObjRolloutReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CObjRolloutReqValidationError) ErrorName() string { return "CObjRolloutReqValidationError" }

// Error satisfies the builtin error interface
func (e CObjRolloutReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCObjRolloutReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CObjRolloutReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CObjRolloutReqValidationError{}

var _CObjRolloutReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _CObjRolloutReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]*$")

// Validate checks the field values on CObjCreateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CObjCreateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CObjCreateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CObjCreateReqMultiError, or
// nil if none found.
func (m *CObjCreateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CObjCreateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CObjCreateReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := CObjCreateReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := CObjCreateReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCRDName()) > 256 {
		err := CObjCreateReqValidationError{
			field:  "CRDName",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRawData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CObjCreateReqValidationError{
					field:  "RawData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CObjCreateReqValidationError{
					field:  "RawData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRawData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CObjCreateReqValidationError{
				field:  "RawData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _CObjCreateReq_Format_InLookup[m.GetFormat()]; !ok {
		err := CObjCreateReqValidationError{
			field:  "Format",
			reason: "value must be in list [ manifest formData]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CObjCreateReqMultiError(errors)
	}

	return nil
}

// CObjCreateReqMultiError is an error wrapping multiple validation errors
// returned by CObjCreateReq.ValidateAll() if the designated constraints
// aren't met.
type CObjCreateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CObjCreateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CObjCreateReqMultiError) AllErrors() []error { return m }

// CObjCreateReqValidationError is the validation error returned by
// CObjCreateReq.Validate if the designated constraints aren't met.
type CObjCreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CObjCreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CObjCreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CObjCreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CObjCreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CObjCreateReqValidationError) ErrorName() string { return "CObjCreateReqValidationError" }

// Error satisfies the builtin error interface
func (e CObjCreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCObjCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CObjCreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CObjCreateReqValidationError{}

var _CObjCreateReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _CObjCreateReq_Format_InLookup = map[string]struct{}{
	"":         {},
	"manifest": {},
	"formData": {},
}

// Validate checks the field values on CObjUpdateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CObjUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CObjUpdateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CObjUpdateReqMultiError, or
// nil if none found.
func (m *CObjUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CObjUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CObjUpdateReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := CObjUpdateReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := CObjUpdateReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCRDName()) > 256 {
		err := CObjUpdateReqValidationError{
			field:  "CRDName",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCobjName()) > 256 {
		err := CObjUpdateReqValidationError{
			field:  "CobjName",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := CObjUpdateReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CObjUpdateReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := CObjUpdateReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRawData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CObjUpdateReqValidationError{
					field:  "RawData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CObjUpdateReqValidationError{
					field:  "RawData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRawData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CObjUpdateReqValidationError{
				field:  "RawData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _CObjUpdateReq_Format_InLookup[m.GetFormat()]; !ok {
		err := CObjUpdateReqValidationError{
			field:  "Format",
			reason: "value must be in list [ manifest formData]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CObjUpdateReqMultiError(errors)
	}

	return nil
}

// CObjUpdateReqMultiError is an error wrapping multiple validation errors
// returned by CObjUpdateReq.ValidateAll() if the designated constraints
// aren't met.
type CObjUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CObjUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CObjUpdateReqMultiError) AllErrors() []error { return m }

// CObjUpdateReqValidationError is the validation error returned by
// CObjUpdateReq.Validate if the designated constraints aren't met.
type CObjUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CObjUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CObjUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CObjUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CObjUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CObjUpdateReqValidationError) ErrorName() string { return "CObjUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e CObjUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCObjUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CObjUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CObjUpdateReqValidationError{}

var _CObjUpdateReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _CObjUpdateReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]*$")

var _CObjUpdateReq_Format_InLookup = map[string]struct{}{
	"":         {},
	"manifest": {},
	"formData": {},
}

// Validate checks the field values on CObjScaleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CObjScaleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CObjScaleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CObjScaleReqMultiError, or
// nil if none found.
func (m *CObjScaleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CObjScaleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CObjScaleReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := CObjScaleReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := CObjScaleReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := CObjScaleReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CObjScaleReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := CObjScaleReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCRDName()) > 256 {
		err := CObjScaleReqValidationError{
			field:  "CRDName",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCobjName()) > 256 {
		err := CObjScaleReqValidationError{
			field:  "CobjName",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetReplicas(); val < 0 || val > 8192 {
		err := CObjScaleReqValidationError{
			field:  "Replicas",
			reason: "value must be inside range [0, 8192]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CObjScaleReqMultiError(errors)
	}

	return nil
}

// CObjScaleReqMultiError is an error wrapping multiple validation errors
// returned by CObjScaleReq.ValidateAll() if the designated constraints aren't met.
type CObjScaleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CObjScaleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CObjScaleReqMultiError) AllErrors() []error { return m }

// CObjScaleReqValidationError is the validation error returned by
// CObjScaleReq.Validate if the designated constraints aren't met.
type CObjScaleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CObjScaleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CObjScaleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CObjScaleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CObjScaleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CObjScaleReqValidationError) ErrorName() string { return "CObjScaleReqValidationError" }

// Error satisfies the builtin error interface
func (e CObjScaleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCObjScaleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CObjScaleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CObjScaleReqValidationError{}

var _CObjScaleReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _CObjScaleReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]*$")

// Validate checks the field values on CObjDeleteReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CObjDeleteReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CObjDeleteReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CObjDeleteReqMultiError, or
// nil if none found.
func (m *CObjDeleteReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CObjDeleteReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CObjDeleteReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := CObjDeleteReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := CObjDeleteReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCRDName()) > 256 {
		err := CObjDeleteReqValidationError{
			field:  "CRDName",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCobjName()) > 256 {
		err := CObjDeleteReqValidationError{
			field:  "CobjName",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := CObjDeleteReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CObjDeleteReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := CObjDeleteReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CObjDeleteReqMultiError(errors)
	}

	return nil
}

// CObjDeleteReqMultiError is an error wrapping multiple validation errors
// returned by CObjDeleteReq.ValidateAll() if the designated constraints
// aren't met.
type CObjDeleteReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CObjDeleteReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CObjDeleteReqMultiError) AllErrors() []error { return m }

// CObjDeleteReqValidationError is the validation error returned by
// CObjDeleteReq.Validate if the designated constraints aren't met.
type CObjDeleteReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CObjDeleteReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CObjDeleteReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CObjDeleteReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CObjDeleteReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CObjDeleteReqValidationError) ErrorName() string { return "CObjDeleteReqValidationError" }

// Error satisfies the builtin error interface
func (e CObjDeleteReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCObjDeleteReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CObjDeleteReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CObjDeleteReqValidationError{}

var _CObjDeleteReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _CObjDeleteReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]*$")

// Validate checks the field values on CObjBatchRescheduleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CObjBatchRescheduleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CObjBatchRescheduleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CObjBatchRescheduleReqMultiError, or nil if none found.
func (m *CObjBatchRescheduleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CObjBatchRescheduleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CObjBatchRescheduleReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := CObjBatchRescheduleReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := CObjBatchRescheduleReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 63 {
		err := CObjBatchRescheduleReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CObjBatchRescheduleReq_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := CObjBatchRescheduleReqValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCRDName()) > 256 {
		err := CObjBatchRescheduleReqValidationError{
			field:  "CRDName",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCobjName()) > 256 {
		err := CObjBatchRescheduleReqValidationError{
			field:  "CobjName",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLabelSelector()) > 2048 {
		err := CObjBatchRescheduleReqValidationError{
			field:  "LabelSelector",
			reason: "value length must be at most 2048 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPodNames()) < 1 {
		err := CObjBatchRescheduleReqValidationError{
			field:  "PodNames",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_CObjBatchRescheduleReq_PodNames_Unique := make(map[string]struct{}, len(m.GetPodNames()))

	for idx, item := range m.GetPodNames() {
		_, _ = idx, item

		if _, exists := _CObjBatchRescheduleReq_PodNames_Unique[item]; exists {
			err := CObjBatchRescheduleReqValidationError{
				field:  fmt.Sprintf("PodNames[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CObjBatchRescheduleReq_PodNames_Unique[item] = struct{}{}
		}

		if utf8.RuneCountInString(item) > 253 {
			err := CObjBatchRescheduleReqValidationError{
				field:  fmt.Sprintf("PodNames[%v]", idx),
				reason: "value length must be at most 253 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_CObjBatchRescheduleReq_PodNames_Pattern.MatchString(item) {
			err := CObjBatchRescheduleReqValidationError{
				field:  fmt.Sprintf("PodNames[%v]", idx),
				reason: "value does not match regex pattern \"[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CObjBatchRescheduleReqMultiError(errors)
	}

	return nil
}

// CObjBatchRescheduleReqMultiError is an error wrapping multiple validation
// errors returned by CObjBatchRescheduleReq.ValidateAll() if the designated
// constraints aren't met.
type CObjBatchRescheduleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CObjBatchRescheduleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CObjBatchRescheduleReqMultiError) AllErrors() []error { return m }

// CObjBatchRescheduleReqValidationError is the validation error returned by
// CObjBatchRescheduleReq.Validate if the designated constraints aren't met.
type CObjBatchRescheduleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CObjBatchRescheduleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CObjBatchRescheduleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CObjBatchRescheduleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CObjBatchRescheduleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CObjBatchRescheduleReqValidationError) ErrorName() string {
	return "CObjBatchRescheduleReqValidationError"
}

// Error satisfies the builtin error interface
func (e CObjBatchRescheduleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCObjBatchRescheduleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CObjBatchRescheduleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CObjBatchRescheduleReqValidationError{}

var _CObjBatchRescheduleReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _CObjBatchRescheduleReq_Namespace_Pattern = regexp.MustCompile("^[0-9a-zA-Z-]*$")

var _CObjBatchRescheduleReq_PodNames_Pattern = regexp.MustCompile("[a-z0-9]([-a-z0-9]*[a-z0-9])?(.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*")

// Validate checks the field values on CommonResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommonResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommonRespMultiError, or
// nil if none found.
func (m *CommonResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for RequestID

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommonRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommonRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommonRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWebAnnotations()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommonRespValidationError{
					field:  "WebAnnotations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommonRespValidationError{
					field:  "WebAnnotations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommonRespValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommonRespMultiError(errors)
	}

	return nil
}

// CommonRespMultiError is an error wrapping multiple validation errors
// returned by CommonResp.ValidateAll() if the designated constraints aren't met.
type CommonRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonRespMultiError) AllErrors() []error { return m }

// CommonRespValidationError is the validation error returned by
// CommonResp.Validate if the designated constraints aren't met.
type CommonRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonRespValidationError) ErrorName() string { return "CommonRespValidationError" }

// Error satisfies the builtin error interface
func (e CommonRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonRespValidationError{}

// Validate checks the field values on CommonListResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommonListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonListResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommonListRespMultiError,
// or nil if none found.
func (m *CommonListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for RequestID

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommonListRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommonListRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommonListRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWebAnnotations()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommonListRespValidationError{
					field:  "WebAnnotations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommonListRespValidationError{
					field:  "WebAnnotations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWebAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommonListRespValidationError{
				field:  "WebAnnotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommonListRespMultiError(errors)
	}

	return nil
}

// CommonListRespMultiError is an error wrapping multiple validation errors
// returned by CommonListResp.ValidateAll() if the designated constraints
// aren't met.
type CommonListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonListRespMultiError) AllErrors() []error { return m }

// CommonListRespValidationError is the validation error returned by
// CommonListResp.Validate if the designated constraints aren't met.
type CommonListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonListRespValidationError) ErrorName() string { return "CommonListRespValidationError" }

// Error satisfies the builtin error interface
func (e CommonListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonListRespValidationError{}

// Validate checks the field values on SubscribeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubscribeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubscribeReqMultiError, or
// nil if none found.
func (m *SubscribeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_SubscribeReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := SubscribeReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := SubscribeReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetResourceVersion()) > 32 {
		err := SubscribeReqValidationError{
			field:  "ResourceVersion",
			reason: "value length must be at most 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKind()) > 128 {
		err := SubscribeReqValidationError{
			field:  "Kind",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCRDName()) > 128 {
		err := SubscribeReqValidationError{
			field:  "CRDName",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApiVersion()) > 128 {
		err := SubscribeReqValidationError{
			field:  "ApiVersion",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 64 {
		err := SubscribeReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SubscribeReqMultiError(errors)
	}

	return nil
}

// SubscribeReqMultiError is an error wrapping multiple validation errors
// returned by SubscribeReq.ValidateAll() if the designated constraints aren't met.
type SubscribeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeReqMultiError) AllErrors() []error { return m }

// SubscribeReqValidationError is the validation error returned by
// SubscribeReq.Validate if the designated constraints aren't met.
type SubscribeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeReqValidationError) ErrorName() string { return "SubscribeReqValidationError" }

// Error satisfies the builtin error interface
func (e SubscribeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeReqValidationError{}

var _SubscribeReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

// Validate checks the field values on SubscribeResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubscribeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubscribeRespMultiError, or
// nil if none found.
func (m *SubscribeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Kind

	// no validation rules for Type

	// no validation rules for Uid

	if all {
		switch v := interface{}(m.GetManifest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscribeRespValidationError{
					field:  "Manifest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscribeRespValidationError{
					field:  "Manifest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetManifest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscribeRespValidationError{
				field:  "Manifest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetManifestExt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscribeRespValidationError{
					field:  "ManifestExt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscribeRespValidationError{
					field:  "ManifestExt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetManifestExt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscribeRespValidationError{
				field:  "ManifestExt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubscribeRespMultiError(errors)
	}

	return nil
}

// SubscribeRespMultiError is an error wrapping multiple validation errors
// returned by SubscribeResp.ValidateAll() if the designated constraints
// aren't met.
type SubscribeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeRespMultiError) AllErrors() []error { return m }

// SubscribeRespValidationError is the validation error returned by
// SubscribeResp.Validate if the designated constraints aren't met.
type SubscribeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeRespValidationError) ErrorName() string { return "SubscribeRespValidationError" }

// Error satisfies the builtin error interface
func (e SubscribeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeRespValidationError{}

// Validate checks the field values on InvalidateDiscoveryCacheReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvalidateDiscoveryCacheReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidateDiscoveryCacheReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvalidateDiscoveryCacheReqMultiError, or nil if none found.
func (m *InvalidateDiscoveryCacheReq) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidateDiscoveryCacheReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_InvalidateDiscoveryCacheReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := InvalidateDiscoveryCacheReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := InvalidateDiscoveryCacheReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AuthToken

	if len(errors) > 0 {
		return InvalidateDiscoveryCacheReqMultiError(errors)
	}

	return nil
}

// InvalidateDiscoveryCacheReqMultiError is an error wrapping multiple
// validation errors returned by InvalidateDiscoveryCacheReq.ValidateAll() if
// the designated constraints aren't met.
type InvalidateDiscoveryCacheReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidateDiscoveryCacheReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidateDiscoveryCacheReqMultiError) AllErrors() []error { return m }

// InvalidateDiscoveryCacheReqValidationError is the validation error returned
// by InvalidateDiscoveryCacheReq.Validate if the designated constraints
// aren't met.
type InvalidateDiscoveryCacheReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidateDiscoveryCacheReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidateDiscoveryCacheReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidateDiscoveryCacheReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidateDiscoveryCacheReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidateDiscoveryCacheReqValidationError) ErrorName() string {
	return "InvalidateDiscoveryCacheReqValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidateDiscoveryCacheReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidateDiscoveryCacheReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidateDiscoveryCacheReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidateDiscoveryCacheReqValidationError{}

var _InvalidateDiscoveryCacheReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

// Validate checks the field values on FormRenderPreviewReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FormRenderPreviewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FormRenderPreviewReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FormRenderPreviewReqMultiError, or nil if none found.
func (m *FormRenderPreviewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *FormRenderPreviewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_FormRenderPreviewReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := FormRenderPreviewReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := FormRenderPreviewReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKind()) > 128 {
		err := FormRenderPreviewReqValidationError{
			field:  "Kind",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFormData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FormRenderPreviewReqValidationError{
					field:  "FormData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FormRenderPreviewReqValidationError{
					field:  "FormData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFormData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FormRenderPreviewReqValidationError{
				field:  "FormData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FormRenderPreviewReqMultiError(errors)
	}

	return nil
}

// FormRenderPreviewReqMultiError is an error wrapping multiple validation
// errors returned by FormRenderPreviewReq.ValidateAll() if the designated
// constraints aren't met.
type FormRenderPreviewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FormRenderPreviewReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FormRenderPreviewReqMultiError) AllErrors() []error { return m }

// FormRenderPreviewReqValidationError is the validation error returned by
// FormRenderPreviewReq.Validate if the designated constraints aren't met.
type FormRenderPreviewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FormRenderPreviewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FormRenderPreviewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FormRenderPreviewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FormRenderPreviewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FormRenderPreviewReqValidationError) ErrorName() string {
	return "FormRenderPreviewReqValidationError"
}

// Error satisfies the builtin error interface
func (e FormRenderPreviewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFormRenderPreviewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FormRenderPreviewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FormRenderPreviewReqValidationError{}

var _FormRenderPreviewReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

// Validate checks the field values on FormData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FormData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FormData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FormDataMultiError, or nil
// if none found.
func (m *FormData) ValidateAll() error {
	return m.validate(true)
}

func (m *FormData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApiVersion()) > 128 {
		err := FormDataValidationError{
			field:  "ApiVersion",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKind()) > 128 {
		err := FormDataValidationError{
			field:  "Kind",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFormData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FormDataValidationError{
					field:  "FormData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FormDataValidationError{
					field:  "FormData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFormData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FormDataValidationError{
				field:  "FormData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FormDataMultiError(errors)
	}

	return nil
}

// FormDataMultiError is an error wrapping multiple validation errors returned
// by FormData.ValidateAll() if the designated constraints aren't met.
type FormDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FormDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FormDataMultiError) AllErrors() []error { return m }

// FormDataValidationError is the validation error returned by
// FormData.Validate if the designated constraints aren't met.
type FormDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FormDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FormDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FormDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FormDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FormDataValidationError) ErrorName() string { return "FormDataValidationError" }

// Error satisfies the builtin error interface
func (e FormDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFormData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FormDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FormDataValidationError{}

// Validate checks the field values on FormToYAMLReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FormToYAMLReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FormToYAMLReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FormToYAMLReqMultiError, or
// nil if none found.
func (m *FormToYAMLReq) ValidateAll() error {
	return m.validate(true)
}

func (m *FormToYAMLReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 64 {
		err := FormToYAMLReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FormToYAMLReqValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FormToYAMLReqValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FormToYAMLReqValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FormToYAMLReqMultiError(errors)
	}

	return nil
}

// FormToYAMLReqMultiError is an error wrapping multiple validation errors
// returned by FormToYAMLReq.ValidateAll() if the designated constraints
// aren't met.
type FormToYAMLReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FormToYAMLReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FormToYAMLReqMultiError) AllErrors() []error { return m }

// FormToYAMLReqValidationError is the validation error returned by
// FormToYAMLReq.Validate if the designated constraints aren't met.
type FormToYAMLReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FormToYAMLReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FormToYAMLReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FormToYAMLReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FormToYAMLReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FormToYAMLReqValidationError) ErrorName() string { return "FormToYAMLReqValidationError" }

// Error satisfies the builtin error interface
func (e FormToYAMLReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFormToYAMLReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FormToYAMLReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FormToYAMLReqValidationError{}

// Validate checks the field values on YAMLToFormReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *YAMLToFormReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on YAMLToFormReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in YAMLToFormReqMultiError, or
// nil if none found.
func (m *YAMLToFormReq) ValidateAll() error {
	return m.validate(true)
}

func (m *YAMLToFormReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 64 {
		err := YAMLToFormReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Yaml

	if len(errors) > 0 {
		return YAMLToFormReqMultiError(errors)
	}

	return nil
}

// YAMLToFormReqMultiError is an error wrapping multiple validation errors
// returned by YAMLToFormReq.ValidateAll() if the designated constraints
// aren't met.
type YAMLToFormReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m YAMLToFormReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m YAMLToFormReqMultiError) AllErrors() []error { return m }

// YAMLToFormReqValidationError is the validation error returned by
// YAMLToFormReq.Validate if the designated constraints aren't met.
type YAMLToFormReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e YAMLToFormReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e YAMLToFormReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e YAMLToFormReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e YAMLToFormReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e YAMLToFormReqValidationError) ErrorName() string { return "YAMLToFormReqValidationError" }

// Error satisfies the builtin error interface
func (e YAMLToFormReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sYAMLToFormReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = YAMLToFormReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = YAMLToFormReqValidationError{}

// Validate checks the field values on FormResourceType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FormResourceType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FormResourceType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FormResourceTypeMultiError, or nil if none found.
func (m *FormResourceType) ValidateAll() error {
	return m.validate(true)
}

func (m *FormResourceType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApiVersion()) > 128 {
		err := FormResourceTypeValidationError{
			field:  "ApiVersion",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKind()) > 128 {
		err := FormResourceTypeValidationError{
			field:  "Kind",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FormResourceTypeMultiError(errors)
	}

	return nil
}

// FormResourceTypeMultiError is an error wrapping multiple validation errors
// returned by FormResourceType.ValidateAll() if the designated constraints
// aren't met.
type FormResourceTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FormResourceTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FormResourceTypeMultiError) AllErrors() []error { return m }

// FormResourceTypeValidationError is the validation error returned by
// FormResourceType.Validate if the designated constraints aren't met.
type FormResourceTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FormResourceTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FormResourceTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FormResourceTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FormResourceTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FormResourceTypeValidationError) ErrorName() string { return "FormResourceTypeValidationError" }

// Error satisfies the builtin error interface
func (e FormResourceTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFormResourceType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FormResourceTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FormResourceTypeValidationError{}

// Validate checks the field values on GetMultiResFormSchemaReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMultiResFormSchemaReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMultiResFormSchemaReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMultiResFormSchemaReqMultiError, or nil if none found.
func (m *GetMultiResFormSchemaReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMultiResFormSchemaReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 64 {
		err := GetMultiResFormSchemaReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetResourceTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMultiResFormSchemaReqValidationError{
						field:  fmt.Sprintf("ResourceTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMultiResFormSchemaReqValidationError{
						field:  fmt.Sprintf("ResourceTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMultiResFormSchemaReqValidationError{
					field:  fmt.Sprintf("ResourceTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMultiResFormSchemaReqMultiError(errors)
	}

	return nil
}

// GetMultiResFormSchemaReqMultiError is an error wrapping multiple validation
// errors returned by GetMultiResFormSchemaReq.ValidateAll() if the designated
// constraints aren't met.
type GetMultiResFormSchemaReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMultiResFormSchemaReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMultiResFormSchemaReqMultiError) AllErrors() []error { return m }

// GetMultiResFormSchemaReqValidationError is the validation error returned by
// GetMultiResFormSchemaReq.Validate if the designated constraints aren't met.
type GetMultiResFormSchemaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMultiResFormSchemaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMultiResFormSchemaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMultiResFormSchemaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMultiResFormSchemaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMultiResFormSchemaReqValidationError) ErrorName() string {
	return "GetMultiResFormSchemaReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetMultiResFormSchemaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMultiResFormSchemaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMultiResFormSchemaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMultiResFormSchemaReqValidationError{}

// Validate checks the field values on GetResFormSchemaReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResFormSchemaReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResFormSchemaReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResFormSchemaReqMultiError, or nil if none found.
func (m *GetResFormSchemaReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResFormSchemaReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetResFormSchemaReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := GetResFormSchemaReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := GetResFormSchemaReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKind()) > 128 {
		err := GetResFormSchemaReqValidationError{
			field:  "Kind",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) > 64 {
		err := GetResFormSchemaReqValidationError{
			field:  "Namespace",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GetResFormSchemaReq_Action_InLookup[m.GetAction()]; !ok {
		err := GetResFormSchemaReqValidationError{
			field:  "Action",
			reason: "value must be in list [ create update]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetResFormSchemaReqMultiError(errors)
	}

	return nil
}

// GetResFormSchemaReqMultiError is an error wrapping multiple validation
// errors returned by GetResFormSchemaReq.ValidateAll() if the designated
// constraints aren't met.
type GetResFormSchemaReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResFormSchemaReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResFormSchemaReqMultiError) AllErrors() []error { return m }

// GetResFormSchemaReqValidationError is the validation error returned by
// GetResFormSchemaReq.Validate if the designated constraints aren't met.
type GetResFormSchemaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResFormSchemaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResFormSchemaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResFormSchemaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResFormSchemaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResFormSchemaReqValidationError) ErrorName() string {
	return "GetResFormSchemaReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetResFormSchemaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResFormSchemaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResFormSchemaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResFormSchemaReqValidationError{}

var _GetResFormSchemaReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

var _GetResFormSchemaReq_Action_InLookup = map[string]struct{}{
	"":       {},
	"create": {},
	"update": {},
}

// Validate checks the field values on GetFormSupportedApiVersionsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFormSupportedApiVersionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFormSupportedApiVersionsReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetFormSupportedApiVersionsReqMultiError, or nil if none found.
func (m *GetFormSupportedApiVersionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFormSupportedApiVersionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectID()); l < 1 || l > 64 {
		err := GetFormSupportedApiVersionsReqValidationError{
			field:  "ProjectID",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ClusterID

	if utf8.RuneCountInString(m.GetKind()) > 128 {
		err := GetFormSupportedApiVersionsReqValidationError{
			field:  "Kind",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFormSupportedApiVersionsReqMultiError(errors)
	}

	return nil
}

// GetFormSupportedApiVersionsReqMultiError is an error wrapping multiple
// validation errors returned by GetFormSupportedApiVersionsReq.ValidateAll()
// if the designated constraints aren't met.
type GetFormSupportedApiVersionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFormSupportedApiVersionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFormSupportedApiVersionsReqMultiError) AllErrors() []error { return m }

// GetFormSupportedApiVersionsReqValidationError is the validation error
// returned by GetFormSupportedApiVersionsReq.Validate if the designated
// constraints aren't met.
type GetFormSupportedApiVersionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFormSupportedApiVersionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFormSupportedApiVersionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFormSupportedApiVersionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFormSupportedApiVersionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFormSupportedApiVersionsReqValidationError) ErrorName() string {
	return "GetFormSupportedApiVersionsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetFormSupportedApiVersionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFormSupportedApiVersionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFormSupportedApiVersionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFormSupportedApiVersionsReqValidationError{}

// Validate checks the field values on GetResSelectItemsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResSelectItemsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResSelectItemsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResSelectItemsReqMultiError, or nil if none found.
func (m *GetResSelectItemsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResSelectItemsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetResSelectItemsReq_ProjectID_Pattern.MatchString(m.GetProjectID()) {
		err := GetResSelectItemsReqValidationError{
			field:  "ProjectID",
			reason: "value does not match regex pattern \"^[0-9a-f]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := GetResSelectItemsReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKind()) > 128 {
		err := GetResSelectItemsReqValidationError{
			field:  "Kind",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNamespace()); l < 1 || l > 128 {
		err := GetResSelectItemsReqValidationError{
			field:  "Namespace",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScene()) > 32 {
		err := GetResSelectItemsReqValidationError{
			field:  "Scene",
			reason: "value length must be at most 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetResSelectItemsReqMultiError(errors)
	}

	return nil
}

// GetResSelectItemsReqMultiError is an error wrapping multiple validation
// errors returned by GetResSelectItemsReq.ValidateAll() if the designated
// constraints aren't met.
type GetResSelectItemsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResSelectItemsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResSelectItemsReqMultiError) AllErrors() []error { return m }

// GetResSelectItemsReqValidationError is the validation error returned by
// GetResSelectItemsReq.Validate if the designated constraints aren't met.
type GetResSelectItemsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResSelectItemsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResSelectItemsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResSelectItemsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResSelectItemsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResSelectItemsReqValidationError) ErrorName() string {
	return "GetResSelectItemsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetResSelectItemsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResSelectItemsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResSelectItemsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResSelectItemsReqValidationError{}

var _GetResSelectItemsReq_ProjectID_Pattern = regexp.MustCompile("^[0-9a-f]{32}$")

// Validate checks the field values on ListViewConfigsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListViewConfigsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListViewConfigsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListViewConfigsReqMultiError, or nil if none found.
func (m *ListViewConfigsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListViewConfigsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 64 {
		err := ListViewConfigsReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListViewConfigsReqMultiError(errors)
	}

	return nil
}

// ListViewConfigsReqMultiError is an error wrapping multiple validation errors
// returned by ListViewConfigsReq.ValidateAll() if the designated constraints
// aren't met.
type ListViewConfigsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListViewConfigsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListViewConfigsReqMultiError) AllErrors() []error { return m }

// ListViewConfigsReqValidationError is the validation error returned by
// ListViewConfigsReq.Validate if the designated constraints aren't met.
type ListViewConfigsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListViewConfigsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListViewConfigsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListViewConfigsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListViewConfigsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListViewConfigsReqValidationError) ErrorName() string {
	return "ListViewConfigsReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListViewConfigsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListViewConfigsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListViewConfigsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListViewConfigsReqValidationError{}

// Validate checks the field values on GetViewConfigReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetViewConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetViewConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetViewConfigReqMultiError, or nil if none found.
func (m *GetViewConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetViewConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 24 {
		err := GetViewConfigReqValidationError{
			field:  "Id",
			reason: "value length must be 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 64 {
		err := GetViewConfigReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetViewConfigReqMultiError(errors)
	}

	return nil
}

// GetViewConfigReqMultiError is an error wrapping multiple validation errors
// returned by GetViewConfigReq.ValidateAll() if the designated constraints
// aren't met.
type GetViewConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetViewConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetViewConfigReqMultiError) AllErrors() []error { return m }

// GetViewConfigReqValidationError is the validation error returned by
// GetViewConfigReq.Validate if the designated constraints aren't met.
type GetViewConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetViewConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetViewConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetViewConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetViewConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetViewConfigReqValidationError) ErrorName() string { return "GetViewConfigReqValidationError" }

// Error satisfies the builtin error interface
func (e GetViewConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetViewConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetViewConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetViewConfigReqValidationError{}

// Validate checks the field values on ViewFilter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ViewFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ViewFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ViewFilterMultiError, or
// nil if none found.
func (m *ViewFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *ViewFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetLabelSelector() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ViewFilterValidationError{
						field:  fmt.Sprintf("LabelSelector[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ViewFilterValidationError{
						field:  fmt.Sprintf("LabelSelector[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ViewFilterValidationError{
					field:  fmt.Sprintf("LabelSelector[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ViewFilterMultiError(errors)
	}

	return nil
}

// ViewFilterMultiError is an error wrapping multiple validation errors
// returned by ViewFilter.ValidateAll() if the designated constraints aren't met.
type ViewFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewFilterMultiError) AllErrors() []error { return m }

// ViewFilterValidationError is the validation error returned by
// ViewFilter.Validate if the designated constraints aren't met.
type ViewFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewFilterValidationError) ErrorName() string { return "ViewFilterValidationError" }

// Error satisfies the builtin error interface
func (e ViewFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewFilterValidationError{}

// Validate checks the field values on CreateViewConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateViewConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateViewConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateViewConfigReqMultiError, or nil if none found.
func (m *CreateViewConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateViewConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 64 {
		err := CreateViewConfigReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetClusterNamespaces()) < 1 {
		err := CreateViewConfigReqValidationError{
			field:  "ClusterNamespaces",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetClusterNamespaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateViewConfigReqValidationError{
						field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateViewConfigReqValidationError{
						field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateViewConfigReqValidationError{
					field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := CreateViewConfigReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateViewConfigReqValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateViewConfigReqValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateViewConfigReqValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SaveAs

	if len(errors) > 0 {
		return CreateViewConfigReqMultiError(errors)
	}

	return nil
}

// CreateViewConfigReqMultiError is an error wrapping multiple validation
// errors returned by CreateViewConfigReq.ValidateAll() if the designated
// constraints aren't met.
type CreateViewConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateViewConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateViewConfigReqMultiError) AllErrors() []error { return m }

// CreateViewConfigReqValidationError is the validation error returned by
// CreateViewConfigReq.Validate if the designated constraints aren't met.
type CreateViewConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateViewConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateViewConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateViewConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateViewConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateViewConfigReqValidationError) ErrorName() string {
	return "CreateViewConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateViewConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateViewConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateViewConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateViewConfigReqValidationError{}

// Validate checks the field values on UpdateViewConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateViewConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateViewConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateViewConfigReqMultiError, or nil if none found.
func (m *UpdateViewConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateViewConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 24 {
		err := UpdateViewConfigReqValidationError{
			field:  "Id",
			reason: "value length must be 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 64 {
		err := UpdateViewConfigReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetClusterNamespaces()) < 1 {
		err := UpdateViewConfigReqValidationError{
			field:  "ClusterNamespaces",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetClusterNamespaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateViewConfigReqValidationError{
						field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateViewConfigReqValidationError{
						field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateViewConfigReqValidationError{
					field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := UpdateViewConfigReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateViewConfigReqValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateViewConfigReqValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateViewConfigReqValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateViewConfigReqMultiError(errors)
	}

	return nil
}

// UpdateViewConfigReqMultiError is an error wrapping multiple validation
// errors returned by UpdateViewConfigReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateViewConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateViewConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateViewConfigReqMultiError) AllErrors() []error { return m }

// UpdateViewConfigReqValidationError is the validation error returned by
// UpdateViewConfigReq.Validate if the designated constraints aren't met.
type UpdateViewConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateViewConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateViewConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateViewConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateViewConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateViewConfigReqValidationError) ErrorName() string {
	return "UpdateViewConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateViewConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateViewConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateViewConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateViewConfigReqValidationError{}

// Validate checks the field values on RenameViewConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenameViewConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameViewConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenameViewConfigReqMultiError, or nil if none found.
func (m *RenameViewConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameViewConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 24 {
		err := RenameViewConfigReqValidationError{
			field:  "Id",
			reason: "value length must be 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 64 {
		err := RenameViewConfigReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := RenameViewConfigReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RenameViewConfigReqMultiError(errors)
	}

	return nil
}

// RenameViewConfigReqMultiError is an error wrapping multiple validation
// errors returned by RenameViewConfigReq.ValidateAll() if the designated
// constraints aren't met.
type RenameViewConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameViewConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameViewConfigReqMultiError) AllErrors() []error { return m }

// RenameViewConfigReqValidationError is the validation error returned by
// RenameViewConfigReq.Validate if the designated constraints aren't met.
type RenameViewConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameViewConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameViewConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameViewConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameViewConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameViewConfigReqValidationError) ErrorName() string {
	return "RenameViewConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e RenameViewConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameViewConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameViewConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameViewConfigReqValidationError{}

// Validate checks the field values on DeleteViewConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteViewConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteViewConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteViewConfigReqMultiError, or nil if none found.
func (m *DeleteViewConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteViewConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 24 {
		err := DeleteViewConfigReqValidationError{
			field:  "Id",
			reason: "value length must be 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 64 {
		err := DeleteViewConfigReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteViewConfigReqMultiError(errors)
	}

	return nil
}

// DeleteViewConfigReqMultiError is an error wrapping multiple validation
// errors returned by DeleteViewConfigReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteViewConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteViewConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteViewConfigReqMultiError) AllErrors() []error { return m }

// DeleteViewConfigReqValidationError is the validation error returned by
// DeleteViewConfigReq.Validate if the designated constraints aren't met.
type DeleteViewConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteViewConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteViewConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteViewConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteViewConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteViewConfigReqValidationError) ErrorName() string {
	return "DeleteViewConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteViewConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteViewConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteViewConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteViewConfigReqValidationError{}

// Validate checks the field values on ViewSuggestReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ViewSuggestReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ViewSuggestReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ViewSuggestReqMultiError,
// or nil if none found.
func (m *ViewSuggestReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ViewSuggestReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 64 {
		err := ViewSuggestReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetClusterNamespaces()) < 1 {
		err := ViewSuggestReqValidationError{
			field:  "ClusterNamespaces",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetClusterNamespaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ViewSuggestReqValidationError{
						field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ViewSuggestReqValidationError{
						field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ViewSuggestReqValidationError{
					field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Label

	if len(errors) > 0 {
		return ViewSuggestReqMultiError(errors)
	}

	return nil
}

// ViewSuggestReqMultiError is an error wrapping multiple validation errors
// returned by ViewSuggestReq.ValidateAll() if the designated constraints
// aren't met.
type ViewSuggestReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewSuggestReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewSuggestReqMultiError) AllErrors() []error { return m }

// ViewSuggestReqValidationError is the validation error returned by
// ViewSuggestReq.Validate if the designated constraints aren't met.
type ViewSuggestReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewSuggestReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewSuggestReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewSuggestReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewSuggestReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewSuggestReqValidationError) ErrorName() string { return "ViewSuggestReqValidationError" }

// Error satisfies the builtin error interface
func (e ViewSuggestReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewSuggestReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewSuggestReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewSuggestReqValidationError{}

// Validate checks the field values on ClusterNamespaces with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ClusterNamespaces) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterNamespaces with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterNamespacesMultiError, or nil if none found.
func (m *ClusterNamespaces) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterNamespaces) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := ClusterNamespacesValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ClusterNamespacesMultiError(errors)
	}

	return nil
}

// ClusterNamespacesMultiError is an error wrapping multiple validation errors
// returned by ClusterNamespaces.ValidateAll() if the designated constraints
// aren't met.
type ClusterNamespacesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterNamespacesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterNamespacesMultiError) AllErrors() []error { return m }

// ClusterNamespacesValidationError is the validation error returned by
// ClusterNamespaces.Validate if the designated constraints aren't met.
type ClusterNamespacesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterNamespacesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterNamespacesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterNamespacesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterNamespacesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterNamespacesValidationError) ErrorName() string {
	return "ClusterNamespacesValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterNamespacesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterNamespaces.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterNamespacesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterNamespacesValidationError{}

// Validate checks the field values on LabelSelector with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LabelSelector) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LabelSelector with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LabelSelectorMultiError, or
// nil if none found.
func (m *LabelSelector) ValidateAll() error {
	return m.validate(true)
}

func (m *LabelSelector) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 64 {
		err := LabelSelectorValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _LabelSelector_Op_InLookup[m.GetOp()]; !ok {
		err := LabelSelectorValidationError{
			field:  "Op",
			reason: "value must be in list [= != In NotIn Exists DoesNotExist]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LabelSelectorMultiError(errors)
	}

	return nil
}

// LabelSelectorMultiError is an error wrapping multiple validation errors
// returned by LabelSelector.ValidateAll() if the designated constraints
// aren't met.
type LabelSelectorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LabelSelectorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LabelSelectorMultiError) AllErrors() []error { return m }

// LabelSelectorValidationError is the validation error returned by
// LabelSelector.Validate if the designated constraints aren't met.
type LabelSelectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabelSelectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabelSelectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabelSelectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabelSelectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabelSelectorValidationError) ErrorName() string { return "LabelSelectorValidationError" }

// Error satisfies the builtin error interface
func (e LabelSelectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabelSelector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabelSelectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabelSelectorValidationError{}

var _LabelSelector_Op_InLookup = map[string]struct{}{
	"=":            {},
	"!=":           {},
	"In":           {},
	"NotIn":        {},
	"Exists":       {},
	"DoesNotExist": {},
}

// Validate checks the field values on GetTemplateSpaceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateSpaceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateSpaceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateSpaceReqMultiError, or nil if none found.
func (m *GetTemplateSpaceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateSpaceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 24 {
		err := GetTemplateSpaceReqValidationError{
			field:  "Id",
			reason: "value length must be 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := GetTemplateSpaceReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTemplateSpaceReqMultiError(errors)
	}

	return nil
}

// GetTemplateSpaceReqMultiError is an error wrapping multiple validation
// errors returned by GetTemplateSpaceReq.ValidateAll() if the designated
// constraints aren't met.
type GetTemplateSpaceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateSpaceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateSpaceReqMultiError) AllErrors() []error { return m }

// GetTemplateSpaceReqValidationError is the validation error returned by
// GetTemplateSpaceReq.Validate if the designated constraints aren't met.
type GetTemplateSpaceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateSpaceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateSpaceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateSpaceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateSpaceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateSpaceReqValidationError) ErrorName() string {
	return "GetTemplateSpaceReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateSpaceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateSpaceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateSpaceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateSpaceReqValidationError{}

// Validate checks the field values on ListTemplateSpaceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplateSpaceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplateSpaceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplateSpaceReqMultiError, or nil if none found.
func (m *ListTemplateSpaceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplateSpaceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := ListTemplateSpaceReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListTemplateSpaceReqMultiError(errors)
	}

	return nil
}

// ListTemplateSpaceReqMultiError is an error wrapping multiple validation
// errors returned by ListTemplateSpaceReq.ValidateAll() if the designated
// constraints aren't met.
type ListTemplateSpaceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplateSpaceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplateSpaceReqMultiError) AllErrors() []error { return m }

// ListTemplateSpaceReqValidationError is the validation error returned by
// ListTemplateSpaceReq.Validate if the designated constraints aren't met.
type ListTemplateSpaceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplateSpaceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplateSpaceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplateSpaceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplateSpaceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplateSpaceReqValidationError) ErrorName() string {
	return "ListTemplateSpaceReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplateSpaceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplateSpaceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplateSpaceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplateSpaceReqValidationError{}

// Validate checks the field values on CreateTemplateSpaceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTemplateSpaceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTemplateSpaceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTemplateSpaceReqMultiError, or nil if none found.
func (m *CreateTemplateSpaceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTemplateSpaceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := CreateTemplateSpaceReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := CreateTemplateSpaceReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return CreateTemplateSpaceReqMultiError(errors)
	}

	return nil
}

// CreateTemplateSpaceReqMultiError is an error wrapping multiple validation
// errors returned by CreateTemplateSpaceReq.ValidateAll() if the designated
// constraints aren't met.
type CreateTemplateSpaceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTemplateSpaceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTemplateSpaceReqMultiError) AllErrors() []error { return m }

// CreateTemplateSpaceReqValidationError is the validation error returned by
// CreateTemplateSpaceReq.Validate if the designated constraints aren't met.
type CreateTemplateSpaceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTemplateSpaceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTemplateSpaceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTemplateSpaceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTemplateSpaceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTemplateSpaceReqValidationError) ErrorName() string {
	return "CreateTemplateSpaceReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTemplateSpaceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTemplateSpaceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTemplateSpaceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTemplateSpaceReqValidationError{}

// Validate checks the field values on UpdateTemplateSpaceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTemplateSpaceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTemplateSpaceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTemplateSpaceReqMultiError, or nil if none found.
func (m *UpdateTemplateSpaceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTemplateSpaceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 24 {
		err := UpdateTemplateSpaceReqValidationError{
			field:  "Id",
			reason: "value length must be 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := UpdateTemplateSpaceReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := UpdateTemplateSpaceReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return UpdateTemplateSpaceReqMultiError(errors)
	}

	return nil
}

// UpdateTemplateSpaceReqMultiError is an error wrapping multiple validation
// errors returned by UpdateTemplateSpaceReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateTemplateSpaceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTemplateSpaceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTemplateSpaceReqMultiError) AllErrors() []error { return m }

// UpdateTemplateSpaceReqValidationError is the validation error returned by
// UpdateTemplateSpaceReq.Validate if the designated constraints aren't met.
type UpdateTemplateSpaceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTemplateSpaceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTemplateSpaceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTemplateSpaceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTemplateSpaceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTemplateSpaceReqValidationError) ErrorName() string {
	return "UpdateTemplateSpaceReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTemplateSpaceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTemplateSpaceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTemplateSpaceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTemplateSpaceReqValidationError{}

// Validate checks the field values on DeleteTemplateSpaceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTemplateSpaceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTemplateSpaceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTemplateSpaceReqMultiError, or nil if none found.
func (m *DeleteTemplateSpaceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTemplateSpaceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 24 {
		err := DeleteTemplateSpaceReqValidationError{
			field:  "Id",
			reason: "value length must be 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := DeleteTemplateSpaceReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteTemplateSpaceReqMultiError(errors)
	}

	return nil
}

// DeleteTemplateSpaceReqMultiError is an error wrapping multiple validation
// errors returned by DeleteTemplateSpaceReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteTemplateSpaceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTemplateSpaceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTemplateSpaceReqMultiError) AllErrors() []error { return m }

// DeleteTemplateSpaceReqValidationError is the validation error returned by
// DeleteTemplateSpaceReq.Validate if the designated constraints aren't met.
type DeleteTemplateSpaceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateSpaceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateSpaceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateSpaceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateSpaceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateSpaceReqValidationError) ErrorName() string {
	return "DeleteTemplateSpaceReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateSpaceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateSpaceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateSpaceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateSpaceReqValidationError{}

// Validate checks the field values on GetTemplateMetadataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateMetadataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateMetadataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateMetadataReqMultiError, or nil if none found.
func (m *GetTemplateMetadataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateMetadataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 24 {
		err := GetTemplateMetadataReqValidationError{
			field:  "Id",
			reason: "value length must be 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := GetTemplateMetadataReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTemplateMetadataReqMultiError(errors)
	}

	return nil
}

// GetTemplateMetadataReqMultiError is an error wrapping multiple validation
// errors returned by GetTemplateMetadataReq.ValidateAll() if the designated
// constraints aren't met.
type GetTemplateMetadataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateMetadataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateMetadataReqMultiError) AllErrors() []error { return m }

// GetTemplateMetadataReqValidationError is the validation error returned by
// GetTemplateMetadataReq.Validate if the designated constraints aren't met.
type GetTemplateMetadataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateMetadataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateMetadataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateMetadataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateMetadataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateMetadataReqValidationError) ErrorName() string {
	return "GetTemplateMetadataReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateMetadataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateMetadataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateMetadataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateMetadataReqValidationError{}

// Validate checks the field values on ListTemplateMetadataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplateMetadataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplateMetadataReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplateMetadataReqMultiError, or nil if none found.
func (m *ListTemplateMetadataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplateMetadataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := ListTemplateMetadataReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTemplateSpaceID()); l < 1 || l > 64 {
		err := ListTemplateMetadataReqValidationError{
			field:  "TemplateSpaceID",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListTemplateMetadataReqMultiError(errors)
	}

	return nil
}

// ListTemplateMetadataReqMultiError is an error wrapping multiple validation
// errors returned by ListTemplateMetadataReq.ValidateAll() if the designated
// constraints aren't met.
type ListTemplateMetadataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplateMetadataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplateMetadataReqMultiError) AllErrors() []error { return m }

// ListTemplateMetadataReqValidationError is the validation error returned by
// ListTemplateMetadataReq.Validate if the designated constraints aren't met.
type ListTemplateMetadataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplateMetadataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplateMetadataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplateMetadataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplateMetadataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplateMetadataReqValidationError) ErrorName() string {
	return "ListTemplateMetadataReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplateMetadataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplateMetadataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplateMetadataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplateMetadataReqValidationError{}

// Validate checks the field values on CreateTemplateMetadataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTemplateMetadataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTemplateMetadataReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTemplateMetadataReqMultiError, or nil if none found.
func (m *CreateTemplateMetadataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTemplateMetadataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := CreateTemplateMetadataReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := CreateTemplateMetadataReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if l := utf8.RuneCountInString(m.GetTemplateSpaceID()); l < 1 || l > 64 {
		err := CreateTemplateMetadataReqValidationError{
			field:  "TemplateSpaceID",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for VersionDescription

	if l := utf8.RuneCountInString(m.GetVersion()); l < 1 || l > 64 {
		err := CreateTemplateMetadataReqValidationError{
			field:  "Version",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Content

	if len(errors) > 0 {
		return CreateTemplateMetadataReqMultiError(errors)
	}

	return nil
}

// CreateTemplateMetadataReqMultiError is an error wrapping multiple validation
// errors returned by CreateTemplateMetadataReq.ValidateAll() if the
// designated constraints aren't met.
type CreateTemplateMetadataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTemplateMetadataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTemplateMetadataReqMultiError) AllErrors() []error { return m }

// CreateTemplateMetadataReqValidationError is the validation error returned by
// CreateTemplateMetadataReq.Validate if the designated constraints aren't met.
type CreateTemplateMetadataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTemplateMetadataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTemplateMetadataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTemplateMetadataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTemplateMetadataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTemplateMetadataReqValidationError) ErrorName() string {
	return "CreateTemplateMetadataReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTemplateMetadataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTemplateMetadataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTemplateMetadataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTemplateMetadataReqValidationError{}

// Validate checks the field values on UpdateTemplateMetadataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTemplateMetadataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTemplateMetadataReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTemplateMetadataReqMultiError, or nil if none found.
func (m *UpdateTemplateMetadataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTemplateMetadataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 24 {
		err := UpdateTemplateMetadataReqValidationError{
			field:  "Id",
			reason: "value length must be 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := UpdateTemplateMetadataReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := UpdateTemplateMetadataReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	// no validation rules for Version

	// no validation rules for VersionMode

	if len(errors) > 0 {
		return UpdateTemplateMetadataReqMultiError(errors)
	}

	return nil
}

// UpdateTemplateMetadataReqMultiError is an error wrapping multiple validation
// errors returned by UpdateTemplateMetadataReq.ValidateAll() if the
// designated constraints aren't met.
type UpdateTemplateMetadataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTemplateMetadataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTemplateMetadataReqMultiError) AllErrors() []error { return m }

// UpdateTemplateMetadataReqValidationError is the validation error returned by
// UpdateTemplateMetadataReq.Validate if the designated constraints aren't met.
type UpdateTemplateMetadataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTemplateMetadataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTemplateMetadataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTemplateMetadataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTemplateMetadataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTemplateMetadataReqValidationError) ErrorName() string {
	return "UpdateTemplateMetadataReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTemplateMetadataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTemplateMetadataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTemplateMetadataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTemplateMetadataReqValidationError{}

// Validate checks the field values on DeleteTemplateMetadataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTemplateMetadataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTemplateMetadataReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTemplateMetadataReqMultiError, or nil if none found.
func (m *DeleteTemplateMetadataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTemplateMetadataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 24 {
		err := DeleteTemplateMetadataReqValidationError{
			field:  "Id",
			reason: "value length must be 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := DeleteTemplateMetadataReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteTemplateMetadataReqMultiError(errors)
	}

	return nil
}

// DeleteTemplateMetadataReqMultiError is an error wrapping multiple validation
// errors returned by DeleteTemplateMetadataReq.ValidateAll() if the
// designated constraints aren't met.
type DeleteTemplateMetadataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTemplateMetadataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTemplateMetadataReqMultiError) AllErrors() []error { return m }

// DeleteTemplateMetadataReqValidationError is the validation error returned by
// DeleteTemplateMetadataReq.Validate if the designated constraints aren't met.
type DeleteTemplateMetadataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateMetadataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateMetadataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateMetadataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateMetadataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateMetadataReqValidationError) ErrorName() string {
	return "DeleteTemplateMetadataReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateMetadataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateMetadataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateMetadataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateMetadataReqValidationError{}

// Validate checks the field values on GetTemplateVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateVersionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateVersionReqMultiError, or nil if none found.
func (m *GetTemplateVersionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateVersionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 24 {
		err := GetTemplateVersionReqValidationError{
			field:  "Id",
			reason: "value length must be 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := GetTemplateVersionReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTemplateVersionReqMultiError(errors)
	}

	return nil
}

// GetTemplateVersionReqMultiError is an error wrapping multiple validation
// errors returned by GetTemplateVersionReq.ValidateAll() if the designated
// constraints aren't met.
type GetTemplateVersionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateVersionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateVersionReqMultiError) AllErrors() []error { return m }

// GetTemplateVersionReqValidationError is the validation error returned by
// GetTemplateVersionReq.Validate if the designated constraints aren't met.
type GetTemplateVersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateVersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateVersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateVersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateVersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateVersionReqValidationError) ErrorName() string {
	return "GetTemplateVersionReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateVersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateVersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateVersionReqValidationError{}

// Validate checks the field values on GetTemplateContentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateContentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateContentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateContentReqMultiError, or nil if none found.
func (m *GetTemplateContentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateContentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 64 {
		err := GetTemplateContentReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTemplateSpace()); l < 1 || l > 64 {
		err := GetTemplateContentReqValidationError{
			field:  "TemplateSpace",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTemplateName()); l < 1 || l > 64 {
		err := GetTemplateContentReqValidationError{
			field:  "TemplateName",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetVersion()); l < 1 || l > 64 {
		err := GetTemplateContentReqValidationError{
			field:  "Version",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTemplateContentReqMultiError(errors)
	}

	return nil
}

// GetTemplateContentReqMultiError is an error wrapping multiple validation
// errors returned by GetTemplateContentReq.ValidateAll() if the designated
// constraints aren't met.
type GetTemplateContentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateContentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateContentReqMultiError) AllErrors() []error { return m }

// GetTemplateContentReqValidationError is the validation error returned by
// GetTemplateContentReq.Validate if the designated constraints aren't met.
type GetTemplateContentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateContentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateContentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateContentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateContentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateContentReqValidationError) ErrorName() string {
	return "GetTemplateContentReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateContentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateContentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateContentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateContentReqValidationError{}

// Validate checks the field values on ListTemplateVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplateVersionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplateVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplateVersionReqMultiError, or nil if none found.
func (m *ListTemplateVersionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplateVersionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := ListTemplateVersionReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTemplateID()); l < 1 || l > 64 {
		err := ListTemplateVersionReqValidationError{
			field:  "TemplateID",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListTemplateVersionReqMultiError(errors)
	}

	return nil
}

// ListTemplateVersionReqMultiError is an error wrapping multiple validation
// errors returned by ListTemplateVersionReq.ValidateAll() if the designated
// constraints aren't met.
type ListTemplateVersionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplateVersionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplateVersionReqMultiError) AllErrors() []error { return m }

// ListTemplateVersionReqValidationError is the validation error returned by
// ListTemplateVersionReq.Validate if the designated constraints aren't met.
type ListTemplateVersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplateVersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplateVersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplateVersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplateVersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplateVersionReqValidationError) ErrorName() string {
	return "ListTemplateVersionReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplateVersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplateVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplateVersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplateVersionReqValidationError{}

// Validate checks the field values on CreateTemplateVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTemplateVersionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTemplateVersionReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTemplateVersionReqMultiError, or nil if none found.
func (m *CreateTemplateVersionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTemplateVersionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := CreateTemplateVersionReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if l := utf8.RuneCountInString(m.GetVersion()); l < 1 || l > 64 {
		err := CreateTemplateVersionReqValidationError{
			field:  "Version",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for EditFormat

	// no validation rules for Content

	if l := utf8.RuneCountInString(m.GetTemplateID()); l < 1 || l > 64 {
		err := CreateTemplateVersionReqValidationError{
			field:  "TemplateID",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Force

	if len(errors) > 0 {
		return CreateTemplateVersionReqMultiError(errors)
	}

	return nil
}

// CreateTemplateVersionReqMultiError is an error wrapping multiple validation
// errors returned by CreateTemplateVersionReq.ValidateAll() if the designated
// constraints aren't met.
type CreateTemplateVersionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTemplateVersionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTemplateVersionReqMultiError) AllErrors() []error { return m }

// CreateTemplateVersionReqValidationError is the validation error returned by
// CreateTemplateVersionReq.Validate if the designated constraints aren't met.
type CreateTemplateVersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTemplateVersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTemplateVersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTemplateVersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTemplateVersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTemplateVersionReqValidationError) ErrorName() string {
	return "CreateTemplateVersionReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTemplateVersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTemplateVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTemplateVersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTemplateVersionReqValidationError{}

// Validate checks the field values on DeleteTemplateVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTemplateVersionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTemplateVersionReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTemplateVersionReqMultiError, or nil if none found.
func (m *DeleteTemplateVersionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTemplateVersionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 24 {
		err := DeleteTemplateVersionReqValidationError{
			field:  "Id",
			reason: "value length must be 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := DeleteTemplateVersionReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteTemplateVersionReqMultiError(errors)
	}

	return nil
}

// DeleteTemplateVersionReqMultiError is an error wrapping multiple validation
// errors returned by DeleteTemplateVersionReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteTemplateVersionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTemplateVersionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTemplateVersionReqMultiError) AllErrors() []error { return m }

// DeleteTemplateVersionReqValidationError is the validation error returned by
// DeleteTemplateVersionReq.Validate if the designated constraints aren't met.
type DeleteTemplateVersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateVersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateVersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateVersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateVersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateVersionReqValidationError) ErrorName() string {
	return "DeleteTemplateVersionReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateVersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateVersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateVersionReqValidationError{}

// Validate checks the field values on CreateTemplateSetReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTemplateSetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTemplateSetReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTemplateSetReqMultiError, or nil if none found.
func (m *CreateTemplateSetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTemplateSetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := CreateTemplateSetReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := CreateTemplateSetReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetVersion()); l < 1 || l > 64 {
		err := CreateTemplateSetReqValidationError{
			field:  "Version",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCategory()); l < 1 || l > 64 {
		err := CreateTemplateSetReqValidationError{
			field:  "Category",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Readme

	for idx, item := range m.GetTemplates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateTemplateSetReqValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateTemplateSetReqValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateTemplateSetReqValidationError{
					field:  fmt.Sprintf("Templates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Values

	// no validation rules for Force

	if len(errors) > 0 {
		return CreateTemplateSetReqMultiError(errors)
	}

	return nil
}

// CreateTemplateSetReqMultiError is an error wrapping multiple validation
// errors returned by CreateTemplateSetReq.ValidateAll() if the designated
// constraints aren't met.
type CreateTemplateSetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTemplateSetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTemplateSetReqMultiError) AllErrors() []error { return m }

// CreateTemplateSetReqValidationError is the validation error returned by
// CreateTemplateSetReq.Validate if the designated constraints aren't met.
type CreateTemplateSetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTemplateSetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTemplateSetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTemplateSetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTemplateSetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTemplateSetReqValidationError) ErrorName() string {
	return "CreateTemplateSetReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTemplateSetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTemplateSetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTemplateSetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTemplateSetReqValidationError{}

// Validate checks the field values on TemplateID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TemplateID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TemplateID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TemplateIDMultiError, or
// nil if none found.
func (m *TemplateID) ValidateAll() error {
	return m.validate(true)
}

func (m *TemplateID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTemplateSpace()); l < 1 || l > 64 {
		err := TemplateIDValidationError{
			field:  "TemplateSpace",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTemplateName()); l < 1 || l > 64 {
		err := TemplateIDValidationError{
			field:  "TemplateName",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetVersion()); l < 1 || l > 64 {
		err := TemplateIDValidationError{
			field:  "Version",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TemplateIDMultiError(errors)
	}

	return nil
}

// TemplateIDMultiError is an error wrapping multiple validation errors
// returned by TemplateID.ValidateAll() if the designated constraints aren't met.
type TemplateIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TemplateIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TemplateIDMultiError) AllErrors() []error { return m }

// TemplateIDValidationError is the validation error returned by
// TemplateID.Validate if the designated constraints aren't met.
type TemplateIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateIDValidationError) ErrorName() string { return "TemplateIDValidationError" }

// Error satisfies the builtin error interface
func (e TemplateIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateIDValidationError{}

// Validate checks the field values on ListTemplateFileVariablesReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplateFileVariablesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplateFileVariablesReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplateFileVariablesReqMultiError, or nil if none found.
func (m *ListTemplateFileVariablesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplateFileVariablesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := ListTemplateFileVariablesReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := ListTemplateFileVariablesReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNamespace()); l < 1 || l > 64 {
		err := ListTemplateFileVariablesReqValidationError{
			field:  "Namespace",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListTemplateFileVariablesReqMultiError(errors)
	}

	return nil
}

// ListTemplateFileVariablesReqMultiError is an error wrapping multiple
// validation errors returned by ListTemplateFileVariablesReq.ValidateAll() if
// the designated constraints aren't met.
type ListTemplateFileVariablesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplateFileVariablesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplateFileVariablesReqMultiError) AllErrors() []error { return m }

// ListTemplateFileVariablesReqValidationError is the validation error returned
// by ListTemplateFileVariablesReq.Validate if the designated constraints
// aren't met.
type ListTemplateFileVariablesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplateFileVariablesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplateFileVariablesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplateFileVariablesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplateFileVariablesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplateFileVariablesReqValidationError) ErrorName() string {
	return "ListTemplateFileVariablesReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplateFileVariablesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplateFileVariablesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplateFileVariablesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplateFileVariablesReqValidationError{}

// Validate checks the field values on DeployTemplateFileReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeployTemplateFileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeployTemplateFileReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeployTemplateFileReqMultiError, or nil if none found.
func (m *DeployTemplateFileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeployTemplateFileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := DeployTemplateFileReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Variables

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 13 || l > 14 {
		err := DeployTemplateFileReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 13 and 14 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNamespace()); l < 1 || l > 64 {
		err := DeployTemplateFileReqValidationError{
			field:  "Namespace",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeployTemplateFileReqMultiError(errors)
	}

	return nil
}

// DeployTemplateFileReqMultiError is an error wrapping multiple validation
// errors returned by DeployTemplateFileReq.ValidateAll() if the designated
// constraints aren't met.
type DeployTemplateFileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeployTemplateFileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeployTemplateFileReqMultiError) AllErrors() []error { return m }

// DeployTemplateFileReqValidationError is the validation error returned by
// DeployTemplateFileReq.Validate if the designated constraints aren't met.
type DeployTemplateFileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployTemplateFileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployTemplateFileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployTemplateFileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployTemplateFileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployTemplateFileReqValidationError) ErrorName() string {
	return "DeployTemplateFileReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeployTemplateFileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployTemplateFileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployTemplateFileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployTemplateFileReqValidationError{}

// Validate checks the field values on GetEnvManageReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetEnvManageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEnvManageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEnvManageReqMultiError, or nil if none found.
func (m *GetEnvManageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEnvManageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 24 {
		err := GetEnvManageReqValidationError{
			field:  "Id",
			reason: "value length must be 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := GetEnvManageReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetEnvManageReqMultiError(errors)
	}

	return nil
}

// GetEnvManageReqMultiError is an error wrapping multiple validation errors
// returned by GetEnvManageReq.ValidateAll() if the designated constraints
// aren't met.
type GetEnvManageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEnvManageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEnvManageReqMultiError) AllErrors() []error { return m }

// GetEnvManageReqValidationError is the validation error returned by
// GetEnvManageReq.Validate if the designated constraints aren't met.
type GetEnvManageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEnvManageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEnvManageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEnvManageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEnvManageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEnvManageReqValidationError) ErrorName() string { return "GetEnvManageReqValidationError" }

// Error satisfies the builtin error interface
func (e GetEnvManageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEnvManageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEnvManageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEnvManageReqValidationError{}

// Validate checks the field values on ListEnvManagesReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListEnvManagesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEnvManagesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEnvManagesReqMultiError, or nil if none found.
func (m *ListEnvManagesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEnvManagesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := ListEnvManagesReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListEnvManagesReqMultiError(errors)
	}

	return nil
}

// ListEnvManagesReqMultiError is an error wrapping multiple validation errors
// returned by ListEnvManagesReq.ValidateAll() if the designated constraints
// aren't met.
type ListEnvManagesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEnvManagesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEnvManagesReqMultiError) AllErrors() []error { return m }

// ListEnvManagesReqValidationError is the validation error returned by
// ListEnvManagesReq.Validate if the designated constraints aren't met.
type ListEnvManagesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEnvManagesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEnvManagesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEnvManagesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEnvManagesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEnvManagesReqValidationError) ErrorName() string {
	return "ListEnvManagesReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListEnvManagesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEnvManagesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEnvManagesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEnvManagesReqValidationError{}

// Validate checks the field values on CreateEnvManageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEnvManageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEnvManageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEnvManageReqMultiError, or nil if none found.
func (m *CreateEnvManageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEnvManageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := CreateEnvManageReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetEnv()); l < 1 || l > 64 {
		err := CreateEnvManageReqValidationError{
			field:  "Env",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetClusterNamespaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateEnvManageReqValidationError{
						field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateEnvManageReqValidationError{
						field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateEnvManageReqValidationError{
					field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateEnvManageReqMultiError(errors)
	}

	return nil
}

// CreateEnvManageReqMultiError is an error wrapping multiple validation errors
// returned by CreateEnvManageReq.ValidateAll() if the designated constraints
// aren't met.
type CreateEnvManageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEnvManageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEnvManageReqMultiError) AllErrors() []error { return m }

// CreateEnvManageReqValidationError is the validation error returned by
// CreateEnvManageReq.Validate if the designated constraints aren't met.
type CreateEnvManageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEnvManageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEnvManageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEnvManageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEnvManageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEnvManageReqValidationError) ErrorName() string {
	return "CreateEnvManageReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEnvManageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEnvManageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEnvManageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEnvManageReqValidationError{}

// Validate checks the field values on UpdateEnvManageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEnvManageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEnvManageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEnvManageReqMultiError, or nil if none found.
func (m *UpdateEnvManageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEnvManageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 24 {
		err := UpdateEnvManageReqValidationError{
			field:  "Id",
			reason: "value length must be 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := UpdateEnvManageReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetClusterNamespaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateEnvManageReqValidationError{
						field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateEnvManageReqValidationError{
						field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateEnvManageReqValidationError{
					field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if l := utf8.RuneCountInString(m.GetEnv()); l < 1 || l > 64 {
		err := UpdateEnvManageReqValidationError{
			field:  "Env",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateEnvManageReqMultiError(errors)
	}

	return nil
}

// UpdateEnvManageReqMultiError is an error wrapping multiple validation errors
// returned by UpdateEnvManageReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateEnvManageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEnvManageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEnvManageReqMultiError) AllErrors() []error { return m }

// UpdateEnvManageReqValidationError is the validation error returned by
// UpdateEnvManageReq.Validate if the designated constraints aren't met.
type UpdateEnvManageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEnvManageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEnvManageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEnvManageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEnvManageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEnvManageReqValidationError) ErrorName() string {
	return "UpdateEnvManageReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEnvManageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEnvManageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEnvManageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEnvManageReqValidationError{}

// Validate checks the field values on RenameEnvManageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenameEnvManageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameEnvManageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenameEnvManageReqMultiError, or nil if none found.
func (m *RenameEnvManageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameEnvManageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 24 {
		err := RenameEnvManageReqValidationError{
			field:  "Id",
			reason: "value length must be 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := RenameEnvManageReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetEnv()); l < 1 || l > 64 {
		err := RenameEnvManageReqValidationError{
			field:  "Env",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RenameEnvManageReqMultiError(errors)
	}

	return nil
}

// RenameEnvManageReqMultiError is an error wrapping multiple validation errors
// returned by RenameEnvManageReq.ValidateAll() if the designated constraints
// aren't met.
type RenameEnvManageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameEnvManageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameEnvManageReqMultiError) AllErrors() []error { return m }

// RenameEnvManageReqValidationError is the validation error returned by
// RenameEnvManageReq.Validate if the designated constraints aren't met.
type RenameEnvManageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameEnvManageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameEnvManageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameEnvManageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameEnvManageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameEnvManageReqValidationError) ErrorName() string {
	return "RenameEnvManageReqValidationError"
}

// Error satisfies the builtin error interface
func (e RenameEnvManageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameEnvManageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameEnvManageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameEnvManageReqValidationError{}

// Validate checks the field values on DeleteEnvManageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEnvManageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEnvManageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEnvManageReqMultiError, or nil if none found.
func (m *DeleteEnvManageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEnvManageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 24 {
		err := DeleteEnvManageReqValidationError{
			field:  "Id",
			reason: "value length must be 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 32 {
		err := DeleteEnvManageReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteEnvManageReqMultiError(errors)
	}

	return nil
}

// DeleteEnvManageReqMultiError is an error wrapping multiple validation errors
// returned by DeleteEnvManageReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteEnvManageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEnvManageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEnvManageReqMultiError) AllErrors() []error { return m }

// DeleteEnvManageReqValidationError is the validation error returned by
// DeleteEnvManageReq.Validate if the designated constraints aren't met.
type DeleteEnvManageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEnvManageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEnvManageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEnvManageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEnvManageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEnvManageReqValidationError) ErrorName() string {
	return "DeleteEnvManageReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEnvManageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEnvManageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEnvManageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEnvManageReqValidationError{}

// Validate checks the field values on FetchMultiClusterResourceReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchMultiClusterResourceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchMultiClusterResourceReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchMultiClusterResourceReqMultiError, or nil if none found.
func (m *FetchMultiClusterResourceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchMultiClusterResourceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 64 {
		err := FetchMultiClusterResourceReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetClusterNamespaces()) < 1 {
		err := FetchMultiClusterResourceReqValidationError{
			field:  "ClusterNamespaces",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetClusterNamespaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FetchMultiClusterResourceReqValidationError{
						field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FetchMultiClusterResourceReqValidationError{
						field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FetchMultiClusterResourceReqValidationError{
					field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if utf8.RuneCountInString(m.GetKind()) < 1 {
		err := FetchMultiClusterResourceReqValidationError{
			field:  "Kind",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ViewID

	for idx, item := range m.GetLabelSelector() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FetchMultiClusterResourceReqValidationError{
						field:  fmt.Sprintf("LabelSelector[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FetchMultiClusterResourceReqValidationError{
						field:  fmt.Sprintf("LabelSelector[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FetchMultiClusterResourceReqValidationError{
					field:  fmt.Sprintf("LabelSelector[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Name

	// no validation rules for Ip

	if _, ok := _FetchMultiClusterResourceReq_SortBy_InLookup[m.GetSortBy()]; !ok {
		err := FetchMultiClusterResourceReqValidationError{
			field:  "SortBy",
			reason: "value must be in list [ name namespace age]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _FetchMultiClusterResourceReq_Order_InLookup[m.GetOrder()]; !ok {
		err := FetchMultiClusterResourceReqValidationError{
			field:  "Order",
			reason: "value must be in list [ asc desc]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val < 1 || val > 1000 {
		err := FetchMultiClusterResourceReqValidationError{
			field:  "Limit",
			reason: "value must be inside range [1, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := FetchMultiClusterResourceReqValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FetchMultiClusterResourceReqMultiError(errors)
	}

	return nil
}

// FetchMultiClusterResourceReqMultiError is an error wrapping multiple
// validation errors returned by FetchMultiClusterResourceReq.ValidateAll() if
// the designated constraints aren't met.
type FetchMultiClusterResourceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchMultiClusterResourceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchMultiClusterResourceReqMultiError) AllErrors() []error { return m }

// FetchMultiClusterResourceReqValidationError is the validation error returned
// by FetchMultiClusterResourceReq.Validate if the designated constraints
// aren't met.
type FetchMultiClusterResourceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchMultiClusterResourceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchMultiClusterResourceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchMultiClusterResourceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchMultiClusterResourceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchMultiClusterResourceReqValidationError) ErrorName() string {
	return "FetchMultiClusterResourceReqValidationError"
}

// Error satisfies the builtin error interface
func (e FetchMultiClusterResourceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchMultiClusterResourceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchMultiClusterResourceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchMultiClusterResourceReqValidationError{}

var _FetchMultiClusterResourceReq_SortBy_InLookup = map[string]struct{}{
	"":          {},
	"name":      {},
	"namespace": {},
	"age":       {},
}

var _FetchMultiClusterResourceReq_Order_InLookup = map[string]struct{}{
	"":     {},
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on FetchMultiClusterCustomResourceReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FetchMultiClusterCustomResourceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchMultiClusterCustomResourceReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FetchMultiClusterCustomResourceReqMultiError, or nil if none found.
func (m *FetchMultiClusterCustomResourceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchMultiClusterCustomResourceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 64 {
		err := FetchMultiClusterCustomResourceReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetClusterNamespaces()) < 1 {
		err := FetchMultiClusterCustomResourceReqValidationError{
			field:  "ClusterNamespaces",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetClusterNamespaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FetchMultiClusterCustomResourceReqValidationError{
						field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FetchMultiClusterCustomResourceReqValidationError{
						field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FetchMultiClusterCustomResourceReqValidationError{
					field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if utf8.RuneCountInString(m.GetCrd()) < 1 {
		err := FetchMultiClusterCustomResourceReqValidationError{
			field:  "Crd",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ViewID

	for idx, item := range m.GetLabelSelector() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FetchMultiClusterCustomResourceReqValidationError{
						field:  fmt.Sprintf("LabelSelector[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FetchMultiClusterCustomResourceReqValidationError{
						field:  fmt.Sprintf("LabelSelector[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FetchMultiClusterCustomResourceReqValidationError{
					field:  fmt.Sprintf("LabelSelector[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Name

	// no validation rules for Ip

	if _, ok := _FetchMultiClusterCustomResourceReq_SortBy_InLookup[m.GetSortBy()]; !ok {
		err := FetchMultiClusterCustomResourceReqValidationError{
			field:  "SortBy",
			reason: "value must be in list [ name namespace age]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _FetchMultiClusterCustomResourceReq_Order_InLookup[m.GetOrder()]; !ok {
		err := FetchMultiClusterCustomResourceReqValidationError{
			field:  "Order",
			reason: "value must be in list [ asc desc]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val < 1 || val > 1000 {
		err := FetchMultiClusterCustomResourceReqValidationError{
			field:  "Limit",
			reason: "value must be inside range [1, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := FetchMultiClusterCustomResourceReqValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FetchMultiClusterCustomResourceReqMultiError(errors)
	}

	return nil
}

// FetchMultiClusterCustomResourceReqMultiError is an error wrapping multiple
// validation errors returned by
// FetchMultiClusterCustomResourceReq.ValidateAll() if the designated
// constraints aren't met.
type FetchMultiClusterCustomResourceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchMultiClusterCustomResourceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchMultiClusterCustomResourceReqMultiError) AllErrors() []error { return m }

// FetchMultiClusterCustomResourceReqValidationError is the validation error
// returned by FetchMultiClusterCustomResourceReq.Validate if the designated
// constraints aren't met.
type FetchMultiClusterCustomResourceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchMultiClusterCustomResourceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchMultiClusterCustomResourceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchMultiClusterCustomResourceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchMultiClusterCustomResourceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchMultiClusterCustomResourceReqValidationError) ErrorName() string {
	return "FetchMultiClusterCustomResourceReqValidationError"
}

// Error satisfies the builtin error interface
func (e FetchMultiClusterCustomResourceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchMultiClusterCustomResourceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchMultiClusterCustomResourceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchMultiClusterCustomResourceReqValidationError{}

var _FetchMultiClusterCustomResourceReq_SortBy_InLookup = map[string]struct{}{
	"":          {},
	"name":      {},
	"namespace": {},
	"age":       {},
}

var _FetchMultiClusterCustomResourceReq_Order_InLookup = map[string]struct{}{
	"":     {},
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on MultiClusterResourceCountReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MultiClusterResourceCountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultiClusterResourceCountReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MultiClusterResourceCountReqMultiError, or nil if none found.
func (m *MultiClusterResourceCountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MultiClusterResourceCountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 1 || l > 64 {
		err := MultiClusterResourceCountReqValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetClusterNamespaces()) < 1 {
		err := MultiClusterResourceCountReqValidationError{
			field:  "ClusterNamespaces",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetClusterNamespaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MultiClusterResourceCountReqValidationError{
						field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MultiClusterResourceCountReqValidationError{
						field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiClusterResourceCountReqValidationError{
					field:  fmt.Sprintf("ClusterNamespaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ViewID

	for idx, item := range m.GetLabelSelector() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MultiClusterResourceCountReqValidationError{
						field:  fmt.Sprintf("LabelSelector[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MultiClusterResourceCountReqValidationError{
						field:  fmt.Sprintf("LabelSelector[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiClusterResourceCountReqValidationError{
					field:  fmt.Sprintf("LabelSelector[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Name

	if len(errors) > 0 {
		return MultiClusterResourceCountReqMultiError(errors)
	}

	return nil
}

// MultiClusterResourceCountReqMultiError is an error wrapping multiple
// validation errors returned by MultiClusterResourceCountReq.ValidateAll() if
// the designated constraints aren't met.
type MultiClusterResourceCountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultiClusterResourceCountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultiClusterResourceCountReqMultiError) AllErrors() []error { return m }

// MultiClusterResourceCountReqValidationError is the validation error returned
// by MultiClusterResourceCountReq.Validate if the designated constraints
// aren't met.
type MultiClusterResourceCountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiClusterResourceCountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiClusterResourceCountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiClusterResourceCountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiClusterResourceCountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiClusterResourceCountReqValidationError) ErrorName() string {
	return "MultiClusterResourceCountReqValidationError"
}

// Error satisfies the builtin error interface
func (e MultiClusterResourceCountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiClusterResourceCountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiClusterResourceCountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiClusterResourceCountReqValidationError{}
