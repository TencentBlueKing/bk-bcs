// Tencent is pleased to support the open source community by making Blueking Container Service available.
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
// Licensed under the MIT License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// http://opensource.org/licenses/MIT
//
// Unless required by applicable law or agreed to in writing, software distributed under,
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
// either express or implied. See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.3
// source: proto/cluster-resources/cluster-resources.proto

package cluster_resources

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 基础类请求/响应体
type EchoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str string `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
}

func (x *EchoReq) Reset() {
	*x = EchoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoReq) ProtoMessage() {}

func (x *EchoReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoReq.ProtoReflect.Descriptor instead.
func (*EchoReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{0}
}

func (x *EchoReq) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

type EchoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret string `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *EchoResp) Reset() {
	*x = EchoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoResp) ProtoMessage() {}

func (x *EchoResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoResp.ProtoReflect.Descriptor instead.
func (*EchoResp) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{1}
}

func (x *EchoResp) GetRet() string {
	if x != nil {
		return x.Ret
	}
	return ""
}

type PingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingReq) Reset() {
	*x = PingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingReq) ProtoMessage() {}

func (x *PingReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingReq.ProtoReflect.Descriptor instead.
func (*PingReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{2}
}

type PingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret string `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *PingResp) Reset() {
	*x = PingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResp) ProtoMessage() {}

func (x *PingResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResp.ProtoReflect.Descriptor instead.
func (*PingResp) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{3}
}

func (x *PingResp) GetRet() string {
	if x != nil {
		return x.Ret
	}
	return ""
}

type HealthzReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaiseErr bool   `protobuf:"varint,1,opt,name=raiseErr,proto3" json:"raiseErr,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *HealthzReq) Reset() {
	*x = HealthzReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthzReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthzReq) ProtoMessage() {}

func (x *HealthzReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthzReq.ProtoReflect.Descriptor instead.
func (*HealthzReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{4}
}

func (x *HealthzReq) GetRaiseErr() bool {
	if x != nil {
		return x.RaiseErr
	}
	return false
}

func (x *HealthzReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type HealthzResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallTime string `protobuf:"bytes,1,opt,name=callTime,proto3" json:"callTime,omitempty"`
	Status   string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Redis    string `protobuf:"bytes,3,opt,name=redis,proto3" json:"redis,omitempty"`
}

func (x *HealthzResp) Reset() {
	*x = HealthzResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthzResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthzResp) ProtoMessage() {}

func (x *HealthzResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthzResp.ProtoReflect.Descriptor instead.
func (*HealthzResp) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{5}
}

func (x *HealthzResp) GetCallTime() string {
	if x != nil {
		return x.CallTime
	}
	return ""
}

func (x *HealthzResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HealthzResp) GetRedis() string {
	if x != nil {
		return x.Redis
	}
	return ""
}

type VersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VersionReq) Reset() {
	*x = VersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionReq) ProtoMessage() {}

func (x *VersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionReq.ProtoReflect.Descriptor instead.
func (*VersionReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{6}
}

type VersionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	GitCommit string `protobuf:"bytes,2,opt,name=gitCommit,proto3" json:"gitCommit,omitempty"`
	BuildTime string `protobuf:"bytes,3,opt,name=buildTime,proto3" json:"buildTime,omitempty"`
	GoVersion string `protobuf:"bytes,4,opt,name=goVersion,proto3" json:"goVersion,omitempty"`
	RunMode   string `protobuf:"bytes,5,opt,name=runMode,proto3" json:"runMode,omitempty"`
	CallTime  string `protobuf:"bytes,6,opt,name=callTime,proto3" json:"callTime,omitempty"`
}

func (x *VersionResp) Reset() {
	*x = VersionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResp) ProtoMessage() {}

func (x *VersionResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResp.ProtoReflect.Descriptor instead.
func (*VersionResp) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{7}
}

func (x *VersionResp) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VersionResp) GetGitCommit() string {
	if x != nil {
		return x.GitCommit
	}
	return ""
}

func (x *VersionResp) GetBuildTime() string {
	if x != nil {
		return x.BuildTime
	}
	return ""
}

func (x *VersionResp) GetGoVersion() string {
	if x != nil {
		return x.GoVersion
	}
	return ""
}

func (x *VersionResp) GetRunMode() string {
	if x != nil {
		return x.RunMode
	}
	return ""
}

func (x *VersionResp) GetCallTime() string {
	if x != nil {
		return x.CallTime
	}
	return ""
}

// 业务类请求/响应体
type ResListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID     string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID     string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace     string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	LabelSelector string `protobuf:"bytes,4,opt,name=labelSelector,proto3" json:"labelSelector,omitempty"`
	ApiVersion    string `protobuf:"bytes,5,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Format        string `protobuf:"bytes,6,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *ResListReq) Reset() {
	*x = ResListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResListReq) ProtoMessage() {}

func (x *ResListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResListReq.ProtoReflect.Descriptor instead.
func (*ResListReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{8}
}

func (x *ResListReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ResListReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ResListReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ResListReq) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

func (x *ResListReq) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ResListReq) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type ResGetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID  string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID  string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace  string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	ApiVersion string `protobuf:"bytes,5,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Format     string `protobuf:"bytes,6,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *ResGetReq) Reset() {
	*x = ResGetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetReq) ProtoMessage() {}

func (x *ResGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetReq.ProtoReflect.Descriptor instead.
func (*ResGetReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{9}
}

func (x *ResGetReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ResGetReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ResGetReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ResGetReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResGetReq) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ResGetReq) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type ResCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string          `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID string          `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	RawData   *_struct.Struct `protobuf:"bytes,3,opt,name=rawData,proto3" json:"rawData,omitempty"`
	Format    string          `protobuf:"bytes,4,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *ResCreateReq) Reset() {
	*x = ResCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResCreateReq) ProtoMessage() {}

func (x *ResCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResCreateReq.ProtoReflect.Descriptor instead.
func (*ResCreateReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{10}
}

func (x *ResCreateReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ResCreateReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ResCreateReq) GetRawData() *_struct.Struct {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *ResCreateReq) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type ResUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string          `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID string          `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace string          `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	RawData   *_struct.Struct `protobuf:"bytes,5,opt,name=rawData,proto3" json:"rawData,omitempty"`
	Format    string          `protobuf:"bytes,6,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *ResUpdateReq) Reset() {
	*x = ResUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResUpdateReq) ProtoMessage() {}

func (x *ResUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResUpdateReq.ProtoReflect.Descriptor instead.
func (*ResUpdateReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{11}
}

func (x *ResUpdateReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ResUpdateReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ResUpdateReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ResUpdateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResUpdateReq) GetRawData() *_struct.Struct {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *ResUpdateReq) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type ResScaleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Replicas  int64  `protobuf:"varint,5,opt,name=replicas,proto3" json:"replicas,omitempty"`
}

func (x *ResScaleReq) Reset() {
	*x = ResScaleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResScaleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResScaleReq) ProtoMessage() {}

func (x *ResScaleReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResScaleReq.ProtoReflect.Descriptor instead.
func (*ResScaleReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{12}
}

func (x *ResScaleReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ResScaleReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ResScaleReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ResScaleReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResScaleReq) GetReplicas() int64 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

type ResDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ResDeleteReq) Reset() {
	*x = ResDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDeleteReq) ProtoMessage() {}

func (x *ResDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDeleteReq.ProtoReflect.Descriptor instead.
func (*ResDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{13}
}

func (x *ResDeleteReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ResDeleteReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ResDeleteReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ResDeleteReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ResBatchRescheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID     string   `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID     string   `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace     string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name          string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	LabelSelector string   `protobuf:"bytes,5,opt,name=labelSelector,proto3" json:"labelSelector,omitempty"`
	PodNames      []string `protobuf:"bytes,6,rep,name=podNames,proto3" json:"podNames,omitempty"`
}

func (x *ResBatchRescheduleReq) Reset() {
	*x = ResBatchRescheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResBatchRescheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResBatchRescheduleReq) ProtoMessage() {}

func (x *ResBatchRescheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResBatchRescheduleReq.ProtoReflect.Descriptor instead.
func (*ResBatchRescheduleReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{14}
}

func (x *ResBatchRescheduleReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ResBatchRescheduleReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ResBatchRescheduleReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ResBatchRescheduleReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResBatchRescheduleReq) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

func (x *ResBatchRescheduleReq) GetPodNames() []string {
	if x != nil {
		return x.PodNames
	}
	return nil
}

type PodResListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID     string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID     string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace     string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	LabelSelector string `protobuf:"bytes,4,opt,name=labelSelector,proto3" json:"labelSelector,omitempty"`
	OwnerName     string `protobuf:"bytes,5,opt,name=ownerName,proto3" json:"ownerName,omitempty"`
	OwnerKind     string `protobuf:"bytes,6,opt,name=ownerKind,proto3" json:"ownerKind,omitempty"`
	Format        string `protobuf:"bytes,7,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *PodResListReq) Reset() {
	*x = PodResListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodResListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodResListReq) ProtoMessage() {}

func (x *PodResListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodResListReq.ProtoReflect.Descriptor instead.
func (*PodResListReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{15}
}

func (x *PodResListReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *PodResListReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *PodResListReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PodResListReq) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

func (x *PodResListReq) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *PodResListReq) GetOwnerKind() string {
	if x != nil {
		return x.OwnerKind
	}
	return ""
}

func (x *PodResListReq) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type ListPoByNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	NodeName  string `protobuf:"bytes,3,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
}

func (x *ListPoByNodeReq) Reset() {
	*x = ListPoByNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPoByNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoByNodeReq) ProtoMessage() {}

func (x *ListPoByNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoByNodeReq.ProtoReflect.Descriptor instead.
func (*ListPoByNodeReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{16}
}

func (x *ListPoByNodeReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ListPoByNodeReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ListPoByNodeReq) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

type ContainerListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PodName   string `protobuf:"bytes,4,opt,name=podName,proto3" json:"podName,omitempty"`
}

func (x *ContainerListReq) Reset() {
	*x = ContainerListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerListReq) ProtoMessage() {}

func (x *ContainerListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerListReq.ProtoReflect.Descriptor instead.
func (*ContainerListReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{17}
}

func (x *ContainerListReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ContainerListReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ContainerListReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ContainerListReq) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

type ContainerGetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID     string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID     string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace     string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PodName       string `protobuf:"bytes,4,opt,name=podName,proto3" json:"podName,omitempty"`
	ContainerName string `protobuf:"bytes,5,opt,name=containerName,proto3" json:"containerName,omitempty"`
}

func (x *ContainerGetReq) Reset() {
	*x = ContainerGetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerGetReq) ProtoMessage() {}

func (x *ContainerGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerGetReq.ProtoReflect.Descriptor instead.
func (*ContainerGetReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{18}
}

func (x *ContainerGetReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ContainerGetReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ContainerGetReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ContainerGetReq) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *ContainerGetReq) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

type GetK8SResTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Kind      string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *GetK8SResTemplateReq) Reset() {
	*x = GetK8SResTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK8SResTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK8SResTemplateReq) ProtoMessage() {}

func (x *GetK8SResTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK8SResTemplateReq.ProtoReflect.Descriptor instead.
func (*GetK8SResTemplateReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{19}
}

func (x *GetK8SResTemplateReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetK8SResTemplateReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *GetK8SResTemplateReq) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *GetK8SResTemplateReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type CObjListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	CRDName   string `protobuf:"bytes,3,opt,name=CRDName,proto3" json:"CRDName,omitempty"`
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Format    string `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *CObjListReq) Reset() {
	*x = CObjListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CObjListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CObjListReq) ProtoMessage() {}

func (x *CObjListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CObjListReq.ProtoReflect.Descriptor instead.
func (*CObjListReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{20}
}

func (x *CObjListReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CObjListReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *CObjListReq) GetCRDName() string {
	if x != nil {
		return x.CRDName
	}
	return ""
}

func (x *CObjListReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CObjListReq) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type CObjGetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	CRDName   string `protobuf:"bytes,3,opt,name=CRDName,proto3" json:"CRDName,omitempty"`
	CobjName  string `protobuf:"bytes,4,opt,name=cobjName,proto3" json:"cobjName,omitempty"`
	Namespace string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Format    string `protobuf:"bytes,6,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *CObjGetReq) Reset() {
	*x = CObjGetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CObjGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CObjGetReq) ProtoMessage() {}

func (x *CObjGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CObjGetReq.ProtoReflect.Descriptor instead.
func (*CObjGetReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{21}
}

func (x *CObjGetReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CObjGetReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *CObjGetReq) GetCRDName() string {
	if x != nil {
		return x.CRDName
	}
	return ""
}

func (x *CObjGetReq) GetCobjName() string {
	if x != nil {
		return x.CobjName
	}
	return ""
}

func (x *CObjGetReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CObjGetReq) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type CObjCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string          `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID string          `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	CRDName   string          `protobuf:"bytes,3,opt,name=CRDName,proto3" json:"CRDName,omitempty"`
	RawData   *_struct.Struct `protobuf:"bytes,4,opt,name=rawData,proto3" json:"rawData,omitempty"`
	Format    string          `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *CObjCreateReq) Reset() {
	*x = CObjCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CObjCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CObjCreateReq) ProtoMessage() {}

func (x *CObjCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CObjCreateReq.ProtoReflect.Descriptor instead.
func (*CObjCreateReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{22}
}

func (x *CObjCreateReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CObjCreateReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *CObjCreateReq) GetCRDName() string {
	if x != nil {
		return x.CRDName
	}
	return ""
}

func (x *CObjCreateReq) GetRawData() *_struct.Struct {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *CObjCreateReq) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type CObjUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string          `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID string          `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	CRDName   string          `protobuf:"bytes,3,opt,name=CRDName,proto3" json:"CRDName,omitempty"`
	CobjName  string          `protobuf:"bytes,4,opt,name=cobjName,proto3" json:"cobjName,omitempty"`
	Namespace string          `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	RawData   *_struct.Struct `protobuf:"bytes,6,opt,name=rawData,proto3" json:"rawData,omitempty"`
	Format    string          `protobuf:"bytes,7,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *CObjUpdateReq) Reset() {
	*x = CObjUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CObjUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CObjUpdateReq) ProtoMessage() {}

func (x *CObjUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CObjUpdateReq.ProtoReflect.Descriptor instead.
func (*CObjUpdateReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{23}
}

func (x *CObjUpdateReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CObjUpdateReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *CObjUpdateReq) GetCRDName() string {
	if x != nil {
		return x.CRDName
	}
	return ""
}

func (x *CObjUpdateReq) GetCobjName() string {
	if x != nil {
		return x.CobjName
	}
	return ""
}

func (x *CObjUpdateReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CObjUpdateReq) GetRawData() *_struct.Struct {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *CObjUpdateReq) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type CObjDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	CRDName   string `protobuf:"bytes,3,opt,name=CRDName,proto3" json:"CRDName,omitempty"`
	CobjName  string `protobuf:"bytes,4,opt,name=cobjName,proto3" json:"cobjName,omitempty"`
	Namespace string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *CObjDeleteReq) Reset() {
	*x = CObjDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CObjDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CObjDeleteReq) ProtoMessage() {}

func (x *CObjDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CObjDeleteReq.ProtoReflect.Descriptor instead.
func (*CObjDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{24}
}

func (x *CObjDeleteReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CObjDeleteReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *CObjDeleteReq) GetCRDName() string {
	if x != nil {
		return x.CRDName
	}
	return ""
}

func (x *CObjDeleteReq) GetCobjName() string {
	if x != nil {
		return x.CobjName
	}
	return ""
}

func (x *CObjDeleteReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type CommonResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID      string          `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Data           *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *_struct.Struct `protobuf:"bytes,5,opt,name=webAnnotations,proto3" json:"webAnnotations,omitempty"`
}

func (x *CommonResp) Reset() {
	*x = CommonResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResp) ProtoMessage() {}

func (x *CommonResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResp.ProtoReflect.Descriptor instead.
func (*CommonResp) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{25}
}

func (x *CommonResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CommonResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommonResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *CommonResp) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CommonResp) GetWebAnnotations() *_struct.Struct {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type CommonListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           int32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID      string             `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Data           *_struct.ListValue `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *_struct.Struct    `protobuf:"bytes,5,opt,name=webAnnotations,proto3" json:"webAnnotations,omitempty"`
}

func (x *CommonListResp) Reset() {
	*x = CommonListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonListResp) ProtoMessage() {}

func (x *CommonListResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonListResp.ProtoReflect.Descriptor instead.
func (*CommonListResp) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{26}
}

func (x *CommonListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CommonListResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommonListResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *CommonListResp) GetData() *_struct.ListValue {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CommonListResp) GetWebAnnotations() *_struct.Struct {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type SubscribeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID       string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID       string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ResourceVersion string `protobuf:"bytes,3,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	Kind            string `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	CRDName         string `protobuf:"bytes,5,opt,name=CRDName,proto3" json:"CRDName,omitempty"`
	ApiVersion      string `protobuf:"bytes,6,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Namespace       string `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *SubscribeReq) Reset() {
	*x = SubscribeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeReq) ProtoMessage() {}

func (x *SubscribeReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeReq.ProtoReflect.Descriptor instead.
func (*SubscribeReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{27}
}

func (x *SubscribeReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *SubscribeReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *SubscribeReq) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *SubscribeReq) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *SubscribeReq) GetCRDName() string {
	if x != nil {
		return x.CRDName
	}
	return ""
}

func (x *SubscribeReq) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *SubscribeReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type SubscribeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message     string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Kind        string          `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	Type        string          `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Uid         string          `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`
	Manifest    *_struct.Struct `protobuf:"bytes,6,opt,name=manifest,proto3" json:"manifest,omitempty"`
	ManifestExt *_struct.Struct `protobuf:"bytes,7,opt,name=manifestExt,proto3" json:"manifestExt,omitempty"`
}

func (x *SubscribeResp) Reset() {
	*x = SubscribeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResp) ProtoMessage() {}

func (x *SubscribeResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResp.ProtoReflect.Descriptor instead.
func (*SubscribeResp) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{28}
}

func (x *SubscribeResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SubscribeResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SubscribeResp) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *SubscribeResp) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SubscribeResp) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *SubscribeResp) GetManifest() *_struct.Struct {
	if x != nil {
		return x.Manifest
	}
	return nil
}

func (x *SubscribeResp) GetManifestExt() *_struct.Struct {
	if x != nil {
		return x.ManifestExt
	}
	return nil
}

type InvalidateDiscoveryCacheReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	AuthToken string `protobuf:"bytes,3,opt,name=authToken,proto3" json:"authToken,omitempty"`
}

func (x *InvalidateDiscoveryCacheReq) Reset() {
	*x = InvalidateDiscoveryCacheReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidateDiscoveryCacheReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateDiscoveryCacheReq) ProtoMessage() {}

func (x *InvalidateDiscoveryCacheReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateDiscoveryCacheReq.ProtoReflect.Descriptor instead.
func (*InvalidateDiscoveryCacheReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{29}
}

func (x *InvalidateDiscoveryCacheReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *InvalidateDiscoveryCacheReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *InvalidateDiscoveryCacheReq) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

type FormRenderPreviewReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string          `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID string          `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Kind      string          `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	FormData  *_struct.Struct `protobuf:"bytes,4,opt,name=formData,proto3" json:"formData,omitempty"`
}

func (x *FormRenderPreviewReq) Reset() {
	*x = FormRenderPreviewReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormRenderPreviewReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormRenderPreviewReq) ProtoMessage() {}

func (x *FormRenderPreviewReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormRenderPreviewReq.ProtoReflect.Descriptor instead.
func (*FormRenderPreviewReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{30}
}

func (x *FormRenderPreviewReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *FormRenderPreviewReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *FormRenderPreviewReq) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *FormRenderPreviewReq) GetFormData() *_struct.Struct {
	if x != nil {
		return x.FormData
	}
	return nil
}

type GetResFormSchemaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Kind      string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Action    string `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *GetResFormSchemaReq) Reset() {
	*x = GetResFormSchemaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResFormSchemaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResFormSchemaReq) ProtoMessage() {}

func (x *GetResFormSchemaReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResFormSchemaReq.ProtoReflect.Descriptor instead.
func (*GetResFormSchemaReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{31}
}

func (x *GetResFormSchemaReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetResFormSchemaReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *GetResFormSchemaReq) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *GetResFormSchemaReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetResFormSchemaReq) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type GetFormSupportedApiVersionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Kind      string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *GetFormSupportedApiVersionsReq) Reset() {
	*x = GetFormSupportedApiVersionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFormSupportedApiVersionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFormSupportedApiVersionsReq) ProtoMessage() {}

func (x *GetFormSupportedApiVersionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFormSupportedApiVersionsReq.ProtoReflect.Descriptor instead.
func (*GetFormSupportedApiVersionsReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{32}
}

func (x *GetFormSupportedApiVersionsReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetFormSupportedApiVersionsReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *GetFormSupportedApiVersionsReq) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type GetResSelectItemsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Kind      string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	// NOTE 目前使用该 API 的请求资源都有命名空间，因此先加上 min_len == 1 的限制
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *GetResSelectItemsReq) Reset() {
	*x = GetResSelectItemsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResSelectItemsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResSelectItemsReq) ProtoMessage() {}

func (x *GetResSelectItemsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cluster_resources_cluster_resources_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResSelectItemsReq.ProtoReflect.Descriptor instead.
func (*GetResSelectItemsReq) Descriptor() ([]byte, []int) {
	return file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP(), []int{33}
}

func (x *GetResSelectItemsReq) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetResSelectItemsReq) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *GetResSelectItemsReq) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *GetResSelectItemsReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

var File_proto_cluster_resources_cluster_resources_proto protoreflect.FileDescriptor

var file_proto_cluster_resources_cluster_resources_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67,
	0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x01, 0x0a, 0x07, 0x45, 0x63, 0x68, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x84, 0x01, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x72, 0x92, 0x41, 0x55, 0x2a, 0x03, 0x53, 0x74, 0x72, 0x32, 0x4e, 0xe5, 0xbe, 0x85, 0xe5,
	0x9b, 0x9e, 0xe6, 0x98, 0xbe, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xef, 0xbc,
	0x8c, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe5, 0x9c, 0xa8, 0x20, 0x32, 0x2d, 0x33, 0x30, 0x20,
	0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4, 0xef, 0xbc, 0x8c, 0xe4, 0xbb, 0x85, 0xe5, 0x8c, 0x85, 0xe5,
	0x90, 0xab, 0xe5, 0xa4, 0xa7, 0xe5, 0xb0, 0x8f, 0xe5, 0x86, 0x99, 0xe5, 0xad, 0x97, 0xe6, 0xaf,
	0x8d, 0xe5, 0x8f, 0x8a, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10,
	0x02, 0x18, 0x1e, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x03, 0x73, 0x74, 0x72, 0x3a, 0x1f, 0x92, 0x41, 0x1c, 0x0a, 0x1a,
	0x2a, 0x07, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x32, 0x0f, 0x45, 0x63, 0x68, 0x6f, 0x20,
	0x41, 0x50, 0x49, 0x20, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0x59, 0x0a, 0x08, 0x45, 0x63,
	0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x03, 0x52, 0x65, 0x74, 0x32, 0x0f, 0xe5,
	0x9b, 0x9e, 0xe6, 0x98, 0xbe, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x3a, 0x20, 0x92, 0x41, 0x1d, 0x0a, 0x1b, 0x2a, 0x08, 0x45, 0x63, 0x68, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x32, 0x0f, 0x45, 0x63, 0x68, 0x6f, 0x20, 0x41, 0x50, 0x49, 0x20, 0xe5,
	0x93, 0x8d, 0xe5, 0xba, 0x94, 0x22, 0x3c, 0x0a, 0x07, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x3a, 0x31, 0x92, 0x41, 0x2e, 0x0a, 0x2c, 0x2a, 0x07, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x32, 0x21, 0x50, 0x69, 0x6e, 0x67, 0x20, 0x41, 0x50, 0x49, 0x20, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0xef, 0xbc, 0x88, 0xe6, 0x97, 0xa0, 0xe9, 0x9c, 0x80, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xef, 0xbc, 0x89, 0x22, 0x4e, 0x0a, 0x08, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x20, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41,
	0x0b, 0x2a, 0x03, 0x52, 0x65, 0x74, 0x32, 0x04, 0x50, 0x6f, 0x6e, 0x67, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x3a, 0x20, 0x92, 0x41, 0x1d, 0x0a, 0x1b, 0x2a, 0x08, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x32, 0x0f, 0x50, 0x69, 0x6e, 0x67, 0x20, 0x41, 0x50, 0x49, 0x20, 0xe5, 0x93, 0x8d,
	0xe5, 0xba, 0x94, 0x22, 0x82, 0x02, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x52,
	0x65, 0x71, 0x12, 0x85, 0x01, 0x0a, 0x08, 0x72, 0x61, 0x69, 0x73, 0x65, 0x45, 0x72, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x69, 0x92, 0x41, 0x66, 0x2a, 0x08, 0x72, 0x61, 0x69, 0x73,
	0x65, 0x45, 0x72, 0x72, 0x32, 0x5a, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0xe4, 0xbe, 0x9d, 0xe8,
	0xb5, 0x96, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0xbc, 0x82, 0xe5, 0xb8, 0xb8, 0xe7, 0x9a,
	0x84, 0xe6, 0x83, 0x85, 0xe5, 0x86, 0xb5, 0xef, 0xbc, 0x8c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xef, 0xbc, 0x88, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x8f, 0xaa, 0xe5, 0x9c, 0xa8, 0xe5, 0x93, 0x8d, 0xe5, 0xba,
	0x94, 0xe4, 0xbd, 0x93, 0xe4, 0xb8, 0xad, 0xe6, 0xa0, 0x87, 0xe8, 0xae, 0xb0, 0xef, 0xbc, 0x89,
	0x52, 0x08, 0x72, 0x61, 0x69, 0x73, 0x65, 0x45, 0x72, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x20, 0x41,
	0x50, 0x49, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a,
	0x37, 0x92, 0x41, 0x34, 0x0a, 0x32, 0x2a, 0x0a, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x52,
	0x65, 0x71, 0x32, 0x24, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x20, 0x41, 0x50, 0x49, 0x20,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xef, 0xbc, 0x88, 0xe6, 0x97, 0xa0, 0xe9, 0x9c, 0x80, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x89, 0x22, 0xd5, 0x01, 0x0a, 0x0b, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a,
	0x08, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x10, 0x41, 0x50, 0x49, 0x20, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x32, 0x0c, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x32, 0x0c, 0x52, 0x65, 0x64, 0x69, 0x73, 0x20, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x3a, 0x26, 0x92, 0x41, 0x23, 0x0a, 0x21, 0x2a,
	0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x32, 0x12, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x7a, 0x20, 0x41, 0x50, 0x49, 0x20, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94,
	0x22, 0x45, 0x0a, 0x0a, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x3a, 0x37,
	0x92, 0x41, 0x34, 0x0a, 0x32, 0x2a, 0x0a, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x32, 0x24, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x50, 0x49, 0x20, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xef, 0xbc, 0x88, 0xe6, 0x97, 0xa0, 0xe9, 0x9c, 0x80, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x89, 0x22, 0x93, 0x03, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0c, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7, 0x89,
	0x88, 0xe6, 0x9c, 0xac, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a,
	0x09, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x09, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x32, 0x10, 0xe6, 0x9c, 0x80, 0xe6, 0x96, 0xb0, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x20,
	0x49, 0x44, 0x52, 0x09, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x3a, 0x0a,
	0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x32, 0x0c, 0xe6, 0x9e, 0x84, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x67, 0x6f, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x09, 0x47, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x09, 0x47, 0x6f,
	0x20, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x09, 0x67, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x32, 0x0c, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x52,
	0x07, 0x72, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a,
	0x08, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x10, 0x41, 0x50, 0x49, 0x20, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x26, 0x92, 0x41, 0x23, 0x0a, 0x21, 0x2a, 0x0b, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x32, 0x12, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x20, 0x41, 0x50, 0x49, 0x20, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0x22, 0xe8, 0x03,
	0x0a, 0x0a, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x23, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x20, 0x49, 0x44, 0xfa,
	0x42, 0x12, 0x72, 0x10, 0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x32, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x35, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x20,
	0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x0d, 0x18, 0x0e, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x47, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x0e, 0x2a, 0x0c,
	0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x15, 0x72,
	0x13, 0x18, 0x3f, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x2d, 0x5d, 0x2a, 0x24, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x42, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x11, 0x2a, 0x0f, 0xe6, 0xa0, 0x87,
	0xe7, 0xad, 0xbe, 0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe5, 0x99, 0xa8, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0x80, 0x10, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x0c, 0x2a, 0x0a, 0x61, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x3f, 0x52,
	0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0x92, 0x41, 0x2e,
	0x2a, 0x2c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe6, 0xa0,
	0xbc, 0xe5, 0xbc, 0x8f, 0xef, 0xbc, 0x88, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0xef, 0xbc, 0x89, 0xfa, 0x42,
	0x1b, 0x72, 0x19, 0x52, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52,
	0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x3a, 0x32, 0x92, 0x41, 0x2f, 0x0a, 0x2d, 0x2a, 0x0a, 0x52, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x32, 0x1f, 0x6b, 0x38, 0x73, 0x20, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xbd, 0x93, 0x22, 0x8c, 0x04, 0x0a, 0x09, 0x52, 0x65, 0x73,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x0b, 0x2a, 0x09,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x12, 0x72, 0x10, 0x32, 0x0e,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x32, 0x7d, 0x24, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41,
	0x0b, 0x2a, 0x09, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x0d, 0x18, 0x0e, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x47, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d,
	0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x18, 0x3f, 0x32, 0x0f, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2a, 0x24, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x45, 0x72, 0x43, 0x18,
	0xfd, 0x01, 0x32, 0x3e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x2d, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29,
	0x3f, 0x28, 0x2e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x2d, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f,
	0x29, 0x2a, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41,
	0x0c, 0x2a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x18, 0x3f, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x61, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x49, 0x92, 0x41, 0x2b, 0x2a, 0x29, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x85, 0x8d,
	0xe7, 0xbd, 0xae, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xef, 0xbc, 0x88, 0x6d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0xef, 0xbc, 0x89,
	0xfa, 0x42, 0x18, 0x72, 0x16, 0x52, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x3a, 0x32, 0x92, 0x41, 0x2f, 0x0a, 0x2d, 0x2a, 0x09, 0x52, 0x65, 0x73, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x32, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x8d, 0x95,
	0xe4, 0xb8, 0xaa, 0x20, 0x6b, 0x38, 0x73, 0x20, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xbd, 0x93, 0x22, 0xee, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x0b,
	0x2a, 0x09, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x12, 0x72, 0x10,
	0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x32, 0x7d, 0x24,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x20, 0x49, 0x44, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x0d, 0x18, 0x0e, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x4a, 0x0a, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x2a, 0x12, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x61,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49,
	0x92, 0x41, 0x2b, 0x2a, 0x29, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x85, 0x8d, 0xe7, 0xbd,
	0xae, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xef, 0xbc, 0x88, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0xef, 0xbc, 0x89, 0xfa, 0x42,
	0x18, 0x72, 0x16, 0x52, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52,
	0x08, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x3a, 0x35, 0x92, 0x41, 0x32, 0x0a, 0x30, 0x2a, 0x0c, 0x52, 0x65, 0x73, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x32, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x8d,
	0x95, 0xe4, 0xb8, 0xaa, 0x20, 0x6b, 0x38, 0x73, 0x20, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xbd, 0x93, 0x22, 0xa6, 0x04, 0x0a, 0x0c, 0x52, 0x65, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41,
	0x0b, 0x2a, 0x09, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x12, 0x72,
	0x10, 0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x32, 0x7d,
	0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x20, 0x49, 0x44, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x0d, 0x18, 0x0e, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x47, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe5, 0x91, 0xbd,
	0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x18, 0x3f,
	0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2a,
	0x24, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x0e, 0x2a,
	0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x45,
	0x72, 0x43, 0x18, 0xfd, 0x01, 0x32, 0x3e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x28,
	0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x29, 0x3f, 0x28, 0x2e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b,
	0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x29, 0x3f, 0x29, 0x2a, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x72,
	0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x12, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x61, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49, 0x92, 0x41, 0x2b, 0x2a, 0x29, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f,
	0xef, 0xbc, 0x88, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2f, 0x66, 0x6f, 0x72, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0xef, 0xbc, 0x89, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x52, 0x00, 0x52, 0x08,
	0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x35, 0x92, 0x41, 0x32, 0x0a,
	0x30, 0x2a, 0x0c, 0x52, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x32,
	0x20, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xaa, 0x20, 0x6b, 0x38,
	0x73, 0x20, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xbd,
	0x93, 0x22, 0xbd, 0x03, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b,
	0xae, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x12, 0x72, 0x10, 0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x32, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x0d, 0x18, 0x0e,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x47, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29,
	0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97,
	0xb4, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x18, 0x3f, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2a, 0x24, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x45, 0x72, 0x43, 0x18, 0xfd, 0x01, 0x32, 0x3e, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x28, 0x2e, 0x5b, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x29, 0x2a, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x27, 0x92, 0x41, 0x1a, 0x2a, 0x18, 0xe5, 0x89, 0xaf, 0xe6,
	0x9c, 0xac, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xef, 0xbc, 0x88, 0x30, 0x2d, 0x38, 0x31, 0x39,
	0x32, 0xef, 0xbc, 0x89, 0xfa, 0x42, 0x07, 0x22, 0x05, 0x18, 0x80, 0x40, 0x28, 0x00, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x3a, 0x37, 0x92, 0x41, 0x34, 0x0a, 0x32, 0x2a,
	0x0b, 0x52, 0x65, 0x73, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x32, 0x23, 0xe5, 0x8d,
	0x95, 0xe4, 0xb8, 0xaa, 0x20, 0x6b, 0x38, 0x73, 0x20, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6,
	0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xbd,
	0x93, 0x22, 0xf7, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x12, 0x72, 0x10, 0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x32, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x0d, 0x18,
	0x0e, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x47, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x29, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9,
	0x97, 0xb4, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x18, 0x3f, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2a, 0x24, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x45, 0x72, 0x43, 0x18, 0xfd, 0x01, 0x32, 0x3e,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x28, 0x2e, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x29, 0x2a, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x35, 0x92, 0x41, 0x32, 0x0a, 0x30, 0x2a, 0x0c, 0x52, 0x65, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x32, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99,
	0xa4, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xaa, 0x20, 0x6b, 0x38, 0x73, 0x20, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xbd, 0x93, 0x22, 0xd9, 0x04, 0x0a, 0x15,
	0x52, 0x65, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9,
	0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x12, 0x72, 0x10, 0x32, 0x0e, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x32, 0x7d, 0x24, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x0b,
	0x2a, 0x09, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x0d, 0x18, 0x0e, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x47, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7,
	0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x18, 0x3f, 0x32, 0x0f, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2a, 0x24, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x45, 0x72, 0x43, 0x18, 0xfd,
	0x01, 0x32, 0x3e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x2d, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f,
	0x28, 0x2e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x2d, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x29,
	0x2a, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0x92, 0x41, 0x11, 0x2a, 0x0f, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe9, 0x80, 0x89, 0xe6, 0x8b,
	0xa9, 0xe5, 0x99, 0xa8, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x10, 0x52, 0x0d, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x92, 0x01, 0x0a, 0x08,
	0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x76,
	0x92, 0x41, 0x22, 0x2a, 0x20, 0xe5, 0xbe, 0x85, 0xe9, 0x87, 0x8d, 0xe6, 0x96, 0xb0, 0xe8, 0xb0,
	0x83, 0xe5, 0xba, 0xa6, 0x20, 0x50, 0x6f, 0x64, 0x20, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xfa, 0x42, 0x4e, 0x92, 0x01, 0x4b, 0x08, 0x01, 0x18, 0x01, 0x22,
	0x45, 0x72, 0x43, 0x18, 0xfd, 0x01, 0x32, 0x3e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x28, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x28, 0x2e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x28,
	0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x29, 0x3f, 0x29, 0x2a, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x3a, 0x35, 0x92, 0x41, 0x32, 0x0a, 0x30, 0x2a, 0x0c, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x32, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0x8d, 0x95,
	0xe4, 0xb8, 0xaa, 0x20, 0x6b, 0x38, 0x73, 0x20, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xbd, 0x93, 0x22, 0xb3, 0x04, 0x0a, 0x0d, 0x50, 0x6f, 0x64, 0x52,
	0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41,
	0x0b, 0x2a, 0x09, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x12, 0x72,
	0x10, 0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x32, 0x7d,
	0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x20, 0x49, 0x44, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x0d, 0x18, 0x0e, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x47, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe5, 0x91, 0xbd,
	0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x18, 0x3f,
	0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b,
	0x24, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0d,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x11, 0x2a, 0x0f, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe,
	0xe9, 0x80, 0x89, 0xe6, 0x8b, 0xa9, 0xe5, 0x99, 0xa8, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80,
	0x10, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x3d, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x14, 0x2a, 0x12, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0x80, 0x02, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3c, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x14, 0x2a, 0x12, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x40, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x67, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0x92,
	0x41, 0x2e, 0x2a, 0x2c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
	0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xef, 0xbc, 0x88, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0xef, 0xbc, 0x89,
	0xfa, 0x42, 0x1b, 0x72, 0x19, 0x52, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x35, 0x92, 0x41, 0x32, 0x0a, 0x30, 0x2a, 0x0d, 0x50,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x32, 0x1f, 0x50, 0x6f,
	0x64, 0x20, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xbd, 0x93, 0x22, 0xf9, 0x01,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b,
	0xae, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x12, 0x72, 0x10, 0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x32, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x0d, 0x18, 0x0e,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92,
	0x41, 0x0e, 0x2a, 0x0c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x02, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x3a, 0x35, 0x92, 0x41, 0x32, 0x0a, 0x30, 0x2a, 0x0d, 0x50, 0x6f, 0x64, 0x52, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x32, 0x1f, 0x50, 0x6f, 0x64, 0x20, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xbd, 0x93, 0x22, 0x89, 0x03, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x41,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x20, 0x49,
	0x44, 0xfa, 0x42, 0x12, 0x72, 0x10, 0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x33, 0x32, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x0d, 0x18, 0x0e, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x47, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x0e,
	0x2a, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa, 0x42,
	0x15, 0x72, 0x13, 0x18, 0x3f, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x71, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x57, 0x92, 0x41, 0x0c, 0x2a, 0x0a, 0x50, 0x6f, 0x64, 0x20, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x45, 0x72, 0x43, 0x18, 0xfd, 0x01, 0x32, 0x3e, 0x5b, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2a,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x28, 0x2e, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x29, 0x2a, 0x52, 0x07, 0x70, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x3f, 0x92, 0x41, 0x3c, 0x0a, 0x3a, 0x2a, 0x10, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x32, 0x26, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xaa, 0x20, 0x50, 0x6f, 0x64, 0x20,
	0xe5, 0xae, 0xb9, 0xe5, 0x99, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0xe4, 0xbd, 0x93, 0x22, 0xe6, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41,
	0x0b, 0x2a, 0x09, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x12, 0x72,
	0x10, 0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x32, 0x7d,
	0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x20, 0x49, 0x44, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x0d, 0x18, 0x0e, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x47, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe5, 0x91, 0xbd,
	0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x18, 0x3f,
	0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b,
	0x24, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x71, 0x0a, 0x07,
	0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x57, 0x92,
	0x41, 0x0c, 0x2a, 0x0a, 0x50, 0x6f, 0x64, 0x20, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42,
	0x45, 0x72, 0x43, 0x18, 0xfd, 0x01, 0x32, 0x3e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x28, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x28, 0x2e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x28,
	0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x29, 0x3f, 0x29, 0x2a, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x5d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe5, 0xae, 0xb9,
	0xe5, 0x99, 0xa8, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x23, 0x72, 0x21, 0x18, 0x3f,
	0x32, 0x1d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x2d, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x3e,
	0x92, 0x41, 0x3b, 0x0a, 0x39, 0x2a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x32, 0x26, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x20, 0x50,
	0x6f, 0x64, 0x20, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe5, 0xae, 0xb9, 0xe5, 0x99, 0xa8, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xbd, 0x93, 0x22, 0xc5,
	0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x0b, 0x2a,
	0x09, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x12, 0x72, 0x10, 0x32,
	0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x32, 0x7d, 0x24, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92,
	0x41, 0x0b, 0x2a, 0x09, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x0d, 0x18, 0x0e, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x2e, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x40, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x47, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90,
	0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x18, 0x3f, 0x32, 0x0f,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2a, 0x24, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x3a, 0x3a, 0x92, 0x41, 0x37, 0x0a,
	0x35, 0x2a, 0x14, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x32, 0x1d, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20,
	0x4b, 0x38, 0x53, 0x20, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xa8, 0xa1, 0xe7, 0x89, 0x88,
	0xe7, 0xa4, 0xba, 0xe4, 0xbe, 0x8b, 0x22, 0xa6, 0x03, 0x0a, 0x0b, 0x43, 0x4f, 0x62, 0x6a, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x0b, 0x2a, 0x09,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x12, 0x72, 0x10, 0x32, 0x0e,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x32, 0x7d, 0x24, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41,
	0x0b, 0x2a, 0x09, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x0d, 0x18, 0x0e, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x31, 0x0a, 0x07, 0x43, 0x52, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x17, 0x92, 0x41, 0x0c, 0x2a, 0x0a, 0x43, 0x52, 0x44, 0x20, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x02, 0x52, 0x07, 0x43, 0x52, 0x44, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe5, 0x91, 0xbd,
	0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x18, 0x3f,
	0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2a,
	0x24, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0x92, 0x41,
	0x2e, 0x2a, 0x2c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe6,
	0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xef, 0xbc, 0x88, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0xef, 0xbc, 0x89, 0xfa,
	0x42, 0x1b, 0x72, 0x19, 0x52, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x38, 0x92, 0x41, 0x35, 0x0a, 0x33, 0x2a, 0x0b, 0x43, 0x4f,
	0x62, 0x6a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x32, 0x24, 0xe8, 0x87, 0xaa, 0xe5, 0xae,
	0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xbd, 0x93, 0x22,
	0xde, 0x03, 0x0a, 0x0a, 0x43, 0x4f, 0x62, 0x6a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x41,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x20, 0x49,
	0x44, 0xfa, 0x42, 0x12, 0x72, 0x10, 0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x33, 0x32, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x0d, 0x18, 0x0e, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x07, 0x43, 0x52, 0x44, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x0c, 0x2a, 0x0a,
	0x43, 0x52, 0x44, 0x20, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18,
	0x80, 0x02, 0x52, 0x07, 0x43, 0x52, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x63,
	0x6f, 0x62, 0x6a, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92,
	0x41, 0x17, 0x2a, 0x15, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80,
	0x02, 0x52, 0x08, 0x63, 0x6f, 0x62, 0x6a, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29,
	0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97,
	0xb4, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x18, 0x3f, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2a, 0x24, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x49, 0x92, 0x41, 0x2b, 0x2a, 0x29, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xef, 0xbc, 0x88,
	0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0xef, 0xbc, 0x89, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x52, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x37, 0x92, 0x41, 0x34, 0x0a, 0x32, 0x2a, 0x0a,
	0x43, 0x4f, 0x62, 0x6a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x32, 0x24, 0xe8, 0x87, 0xaa, 0xe5,
	0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xbd, 0x93,
	0x22, 0xa7, 0x03, 0x0a, 0x0d, 0x43, 0x4f, 0x62, 0x6a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x12, 0x72, 0x10, 0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x32, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x0d, 0x18,
	0x0e, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x07,
	0x43, 0x52, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92,
	0x41, 0x0c, 0x2a, 0x0a, 0x43, 0x52, 0x44, 0x20, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0x80, 0x02, 0x52, 0x07, 0x43, 0x52, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x4a, 0x0a, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x12,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x61, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49, 0x92, 0x41, 0x2b,
	0x2a, 0x29, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe6, 0xa0,
	0xbc, 0xe5, 0xbc, 0x8f, 0xef, 0xbc, 0x88, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2f,
	0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0xef, 0xbc, 0x89, 0xfa, 0x42, 0x18, 0x72, 0x16,
	0x52, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x08, 0x66, 0x6f,
	0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x3a,
	0x92, 0x41, 0x37, 0x0a, 0x35, 0x2a, 0x0d, 0x43, 0x4f, 0x62, 0x6a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x32, 0x24, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x8d, 0x95, 0xe4,
	0xb8, 0xaa, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xbd, 0x93, 0x22, 0xb0, 0x04, 0x0a, 0x0d, 0x43,
	0x4f, 0x62, 0x6a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x23, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x20, 0x49, 0x44, 0xfa,
	0x42, 0x12, 0x72, 0x10, 0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x32, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x35, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x20,
	0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x0d, 0x18, 0x0e, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x07, 0x43, 0x52, 0x44, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x0c, 0x2a, 0x0a, 0x43, 0x52,
	0x44, 0x20, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x02,
	0x52, 0x07, 0x43, 0x52, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x6f, 0x62,
	0x6a, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x17,
	0x2a, 0x15, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x02, 0x52,
	0x08, 0x63, 0x6f, 0x62, 0x6a, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41,
	0x0e, 0x2a, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa,
	0x42, 0x15, 0x72, 0x13, 0x18, 0x3f, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2a, 0x24, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x2a, 0x12, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x61,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49,
	0x92, 0x41, 0x2b, 0x2a, 0x29, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x85, 0x8d, 0xe7, 0xbd,
	0xae, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0xef, 0xbc, 0x88, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0xef, 0xbc, 0x89, 0xfa, 0x42,
	0x18, 0x72, 0x16, 0x52, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52,
	0x08, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x3a, 0x3a, 0x92, 0x41, 0x37, 0x0a, 0x35, 0x2a, 0x0d, 0x43, 0x4f, 0x62, 0x6a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x32, 0x24, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5,
	0x8d, 0x95, 0xe4, 0xb8, 0xaa, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xbd, 0x93, 0x22, 0x81, 0x03,
	0x0a, 0x0d, 0x43, 0x4f, 0x62, 0x6a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x20,
	0x49, 0x44, 0xfa, 0x42, 0x12, 0x72, 0x10, 0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x32, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x0d, 0x18, 0x0e, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x07, 0x43, 0x52, 0x44,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x0c, 0x2a,
	0x0a, 0x43, 0x52, 0x44, 0x20, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0x80, 0x02, 0x52, 0x07, 0x43, 0x52, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x08,
	0x63, 0x6f, 0x62, 0x6a, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22,
	0x92, 0x41, 0x17, 0x2a, 0x15, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18,
	0x80, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x62, 0x6a, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x29, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9,
	0x97, 0xb4, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x18, 0x3f, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2a, 0x24, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x3a, 0x3a, 0x92, 0x41, 0x37, 0x0a, 0x35, 0x2a, 0x0d, 0x43, 0x4f,
	0x62, 0x6a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x32, 0x24, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xaa, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4,
	0xb9, 0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xbd,
	0x93, 0x22, 0xe2, 0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64,
	0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x17, 0x92,
	0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x60, 0x0a, 0x0e,
	0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x1f, 0x92,
	0x41, 0x1c, 0x2a, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x32, 0x0a, 0x77, 0x65, 0x62, 0x20, 0xe6, 0xb3, 0xa8, 0xe8, 0xa7, 0xa3, 0x52, 0x0e,
	0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x85,
	0x01, 0x92, 0x41, 0x81, 0x01, 0x0a, 0x7f, 0x2a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x32, 0x71, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0xe5, 0x93, 0x8d, 0xe5, 0xba,
	0x94, 0xe4, 0xbd, 0x93, 0xef, 0xbc, 0x8c, 0xe9, 0x80, 0x82, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x9e, 0x8b, 0x20, 0x41, 0x50, 0x49, 0x20, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82,
	0xe9, 0x9c, 0x80, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe7,
	0x9a, 0x84, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x84, 0xe5, 0x88,
	0x99, 0xe4, 0xb8, 0x8d, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe8, 0xaf, 0xa5, 0xe5, 0x93, 0x8d,
	0xe5, 0xba, 0x94, 0xe4, 0xbd, 0x93, 0x22, 0xee, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x47, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x60, 0x0a, 0x0e, 0x77, 0x65, 0x62, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0e,
	0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0a,
	0x77, 0x65, 0x62, 0x20, 0xe6, 0xb3, 0xa8, 0xe8, 0xa7, 0xa3, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x8a, 0x01, 0x92, 0x41, 0x86,
	0x01, 0x0a, 0x83, 0x01, 0x2a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x32, 0x71, 0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0xe5, 0x93, 0x8d, 0xe5,
	0xba, 0x94, 0xe4, 0xbd, 0x93, 0xef, 0xbc, 0x8c, 0xe9, 0x80, 0x82, 0xe7, 0x94, 0xa8, 0xe4, 0xba,
	0x8e, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x9e, 0x8b, 0x20, 0x41, 0x50, 0x49, 0x20, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xef, 0xbc, 0x8c, 0xe5, 0xa6,
	0x82, 0xe9, 0x9c, 0x80, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86,
	0xe7, 0x9a, 0x84, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x84, 0xe5,
	0x88, 0x99, 0xe4, 0xb8, 0x8d, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe8, 0xaf, 0xa5, 0xe5, 0x93,
	0x8d, 0xe5, 0xba, 0x94, 0xe4, 0xbd, 0x93, 0x22, 0xce, 0x03, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x0b,
	0x2a, 0x09, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x12, 0x72, 0x10,
	0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x32, 0x7d, 0x24,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x20, 0x49, 0x44, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x0d, 0x18, 0x0e, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x45, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x11,
	0x2a, 0x0f, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe5, 0x8f,
	0xb7, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18,
	0x80, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x43, 0x52, 0x44, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x0c, 0x2a, 0x0a,
	0x43, 0x52, 0x44, 0x20, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18,
	0x80, 0x01, 0x52, 0x07, 0x43, 0x52, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x61,
	0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0x92, 0x41, 0x0c, 0x2a, 0x0a, 0x41, 0x50, 0x49, 0x20, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x01, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe5, 0x91,
	0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x40, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x3a, 0x2a, 0x92, 0x41,
	0x27, 0x0a, 0x25, 0x2a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65,
	0x71, 0x32, 0x15, 0xe8, 0xae, 0xa2, 0xe9, 0x98, 0x85, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xbd, 0x93, 0x22, 0xbb, 0x03, 0x0a, 0x0d, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x32,
	0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x32,
	0x0c, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x03, 0x75, 0x69, 0x64, 0x32, 0x0c, 0xe5, 0x94, 0xaf, 0xe4,
	0xb8, 0x80, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x56, 0x0a,
	0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x08, 0x6d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x32, 0x12, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9,
	0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x08, 0x6d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x45, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0b, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x45, 0x78, 0x74, 0x32, 0x12, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0x89, 0xa9,
	0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x22, 0x91, 0x02, 0x0a, 0x1b, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x0b, 0x2a, 0x09,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x12, 0x72, 0x10, 0x32, 0x0e,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x32, 0x7d, 0x24, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41,
	0x0b, 0x2a, 0x09, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x0d, 0x18, 0x0e, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x2c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x4a,
	0x92, 0x41, 0x47, 0x0a, 0x45, 0x2a, 0x1b, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x65, 0x71, 0x32, 0x26, 0xe4, 0xb8, 0xbb, 0xe5, 0x8a, 0xa8, 0xe4, 0xbd, 0xbf, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x20, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x20, 0xe7, 0xbc,
	0x93, 0xe5, 0xad, 0x98, 0xe5, 0xa4, 0xb1, 0xe6, 0x95, 0x88, 0x22, 0xce, 0x02, 0x0a, 0x14, 0x46,
	0x6f, 0x72, 0x6d, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x12, 0x72, 0x10, 0x32, 0x0e, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x32, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x0b, 0x2a, 0x09,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x0d,
	0x18, 0x0e, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2d, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x0e,
	0x2a, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0x80, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x49, 0x0a, 0x08,
	0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x0f, 0xe8, 0xa1,
	0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0x8c, 0x96, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x08, 0x66,
	0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x42, 0x92, 0x41, 0x3f, 0x0a, 0x3d, 0x2a, 0x14,
	0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x71, 0x32, 0x25, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0xe6, 0xb8, 0xb2, 0xe6, 0x9f, 0x93, 0xe4, 0xb8, 0xba, 0x20, 0x4d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x20, 0xe9, 0xa2, 0x84, 0xe8, 0xa7, 0x88, 0x22, 0xa9, 0x03, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x12, 0x72, 0x10, 0x32, 0x0e, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x32, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x0b, 0x2a, 0x09,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x0d,
	0x18, 0x0e, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2d, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x0e,
	0x2a, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0x80, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9,
	0x97, 0xb4, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x40, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x55, 0x92, 0x41, 0x3b, 0x2a, 0x39, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d,
	0xbf, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0xef, 0xbc, 0x88,
	0xe5, 0xa6, 0x82, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xef,
	0xbc, 0x8c, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0xad,
	0x89, 0xef, 0xbc, 0x89, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52, 0x00, 0x52, 0x06, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x42, 0x92, 0x41, 0x3f, 0x0a, 0x3d, 0x2a, 0x13, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x32,
	0x26, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xa1, 0xa8,
	0xe5, 0x8d, 0x95, 0xe5, 0x8c, 0x96, 0x20, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xbd, 0x93, 0x22, 0xa5, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x70, 0x69, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92,
	0x41, 0x0b, 0x2a, 0x09, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x12,
	0x72, 0x10, 0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x32,
	0x7d, 0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x35, 0x0a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x17, 0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x20, 0x49, 0x44,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x0d, 0x18, 0x0e, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x01, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x3a, 0x5a, 0x92, 0x41, 0x57, 0x0a, 0x55, 0x2a, 0x1e, 0x47, 0x65, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x70, 0x69, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x32, 0x33, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x8f,
	0xaf, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0x8c, 0x96,
	0xe7, 0x9a, 0x84, 0x20, 0x41, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xd6, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x0b,
	0x2a, 0x09, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x12, 0x72, 0x10,
	0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x32, 0x7d, 0x24,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0x92, 0x41, 0x0b, 0x2a, 0x09, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x20, 0x49, 0x44, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x0d, 0x18, 0x0e, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x19, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x39, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x0e, 0x2a, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90,
	0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80,
	0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x3a, 0x5a, 0x92, 0x41,
	0x57, 0x0a, 0x55, 0x2a, 0x1e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x32, 0x33, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8c, 0x87, 0xe5, 0xae,
	0x9a, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e,
	0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0x8c, 0x96, 0xe7, 0x9a, 0x84, 0x20, 0x41, 0x70, 0x69,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x9a, 0x05, 0x0a, 0x05, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x12, 0x92, 0x01, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x19, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x45,
	0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x63, 0x68, 0x6f, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x2c, 0x12, 0x08, 0x45, 0x63, 0x68,
	0x6f, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x20, 0x45, 0x63, 0x68, 0x6f, 0x20, 0xe6, 0x8e, 0xa5, 0xe5,
	0x8f, 0xa3, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0xbc, 0x80, 0xe5, 0x8f,
	0x91, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0x12, 0x9b, 0x01, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67,
	0x12, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12,
	0x19, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x92, 0x41, 0x38, 0x12, 0x08, 0x50,
	0x69, 0x6e, 0x67, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x2c, 0x50, 0x69, 0x6e, 0x67, 0x20, 0xe6, 0x8e,
	0xa5, 0xe5, 0x8f, 0xa3, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe6, 0xa3, 0x80,
	0xe6, 0x9f, 0xa5, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5,
	0xad, 0x98, 0xe6, 0xb4, 0xbb, 0x12, 0xad, 0x01, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x7a, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x52, 0x65, 0x71, 0x1a,
	0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x22, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x7a, 0x92, 0x41, 0x3e, 0x12, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a,
	0x20, 0x41, 0x50, 0x49, 0x1a, 0x2f, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x20, 0xe6, 0x8e,
	0xa5, 0xe5, 0x8f, 0xa3, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe6, 0xa3, 0x80,
	0xe6, 0x9f, 0xa5, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x81, 0xa5, 0xe5, 0xba, 0xb7, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x12, 0xad, 0x01, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x92, 0x41, 0x3e, 0x12, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x41, 0x50, 0x49, 0x1a, 0x2f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0xe6, 0x8e,
	0xa5, 0xe5, 0x8f, 0xa3, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x32, 0xc2, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0xb9,
	0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x71, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x12,
	0x44, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x92, 0x41, 0x22, 0x12, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x32, 0xce, 0x01, 0x0a, 0x09, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x06, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x53, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x7a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x12, 0x49, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x92, 0x41, 0x26, 0x12, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x20, 0x41, 0x50,
	0x49, 0x1a, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7,
	0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x32, 0x83, 0x4e, 0x0a, 0x08,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0xeb, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x22, 0xa0, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6d, 0x12, 0x6b, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x92, 0x41, 0x2a, 0x12, 0x0e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x18, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xe8, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x9f, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x74, 0x12, 0x72, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x22, 0x12,
	0x0d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x11,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0xd6, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x87, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x59, 0x22, 0x54, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x25, 0x12, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x11, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xf4, 0x01, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x1e, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa5, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x77, 0x1a, 0x72, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x25, 0x12, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x11,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x20, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0xfa, 0x01, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xad,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7d, 0x1a, 0x78, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x27, 0x12, 0x0f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x14, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x20, 0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0x12, 0xa9,
	0x02, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x50, 0x6f, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xcb, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x82, 0x01, 0x1a, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x3f, 0x12, 0x16, 0x52, 0x65, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50, 0x6f, 0x20,
	0x41, 0x50, 0x49, 0x1a, 0x25, 0xe9, 0x87, 0x8d, 0xe6, 0x96, 0xb0, 0xe8, 0xb0, 0x83, 0xe5, 0xba,
	0xa6, 0x20, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0xe6, 0x89, 0x80,
	0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x20, 0x50, 0x6f, 0x64, 0x12, 0xf1, 0x01, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x1e, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa2, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x74, 0x2a, 0x72, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x25, 0x12, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x11, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0x20, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xe1,
	0x01, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x53, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x9a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6c, 0x12, 0x6a,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x73, 0x92, 0x41, 0x25, 0x12, 0x0a, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x53, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x17, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0x20, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x20, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x12, 0xde, 0x01, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x44, 0x53, 0x12, 0x1b, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x99, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x73,
	0x12, 0x71, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x92, 0x41, 0x1d, 0x12, 0x09, 0x47, 0x65, 0x74, 0x44, 0x53, 0x20, 0x41, 0x50,
	0x49, 0x1a, 0x10, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x12, 0xcc, 0x01, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x53,
	0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x81,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x58, 0x22, 0x53, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x20, 0x12, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x53, 0x20, 0x41, 0x50, 0x49,
	0x1a, 0x10, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x12, 0xea, 0x01, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x53, 0x12,
	0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x9f, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x76, 0x1a, 0x71, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x20, 0x12,
	0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x53, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x10, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x20, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12,
	0xe7, 0x01, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x53, 0x12, 0x1e, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x9c, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x73, 0x2a, 0x71, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x20, 0x12, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x53, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x10, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20,
	0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0xe7, 0x01, 0x0a, 0x07, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x54, 0x53, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x9f, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6e, 0x12, 0x6c, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x66, 0x75, 0x6c, 0x73, 0x65, 0x74, 0x73, 0x92, 0x41, 0x28, 0x12, 0x0b, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x54, 0x53, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x19, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x74, 0x20, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x12, 0xe4, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x53, 0x54, 0x53, 0x12, 0x1b,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x9e, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x75, 0x12, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x20, 0x12, 0x0a, 0x47, 0x65, 0x74, 0x53,
	0x54, 0x53, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x74, 0x12, 0xd2, 0x01, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x54, 0x53, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x86, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x22,
	0x55, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66,
	0x75, 0x6c, 0x73, 0x65, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x23, 0x12, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x54, 0x53, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x12, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x74, 0x12,
	0xf0, 0x01, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x54, 0x53, 0x12, 0x1e, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa4, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x78, 0x1a, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x23, 0x12,
	0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x54, 0x53, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x12,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53,
	0x65, 0x74, 0x12, 0xf6, 0x01, 0x0a, 0x08, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x54, 0x53, 0x12,
	0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xac, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x7e, 0x1a, 0x79, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x25, 0x12, 0x0c, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x54, 0x53,
	0x20, 0x41, 0x50, 0x49, 0x1a, 0x15, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65,
	0x74, 0x20, 0xe6, 0x89, 0xa9, 0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0x12, 0xa6, 0x02, 0x0a, 0x0f,
	0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x54, 0x53, 0x50, 0x6f, 0x12,
	0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xcb, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x83, 0x01,
	0x1a, 0x7e, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x3e, 0x12, 0x13, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x53, 0x54, 0x53, 0x50, 0x6f, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x27, 0xe9, 0x87, 0x8d,
	0xe6, 0x96, 0xb0, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66,
	0x75, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x20, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84,
	0x20, 0x50, 0x6f, 0x64, 0x12, 0xed, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x54, 0x53, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0xa1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x75, 0x2a, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x66, 0x75, 0x6c, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41,
	0x23, 0x12, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x54, 0x53, 0x20, 0x41, 0x50, 0x49,
	0x1a, 0x12, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75,
	0x6c, 0x53, 0x65, 0x74, 0x12, 0xdd, 0x01, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x4a, 0x12,
	0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x96, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x6a, 0x12, 0x68, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x73, 0x92, 0x41,
	0x23, 0x12, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x4a, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x15, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x20, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xda, 0x01, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x43, 0x4a, 0x12, 0x1b,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x95, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x71, 0x12, 0x6f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x92, 0x41, 0x1b, 0x12, 0x09, 0x47, 0x65, 0x74, 0x43, 0x4a, 0x20, 0x41, 0x50,
	0x49, 0x1a, 0x0e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f,
	0x62, 0x12, 0xc7, 0x01, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x4a, 0x12, 0x1e,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x56, 0x22, 0x51, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x63,
	0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x1e, 0x12, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x4a, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x0e, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0x20, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0xe6, 0x01, 0x0a, 0x08,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x4a, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x9b, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x74, 0x1a,
	0x6f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x1e, 0x12, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x4a,
	0x20, 0x41, 0x50, 0x49, 0x1a, 0x0e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x20, 0x43, 0x72, 0x6f,
	0x6e, 0x4a, 0x6f, 0x62, 0x12, 0xe3, 0x01, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x4a, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x98, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x71, 0x2a, 0x6f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f,
	0x62, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x1e, 0x12, 0x0c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x4a, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x0e, 0xe5, 0x88, 0xa0, 0xe9,
	0x99, 0xa4, 0x20, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0xd7, 0x01, 0x0a, 0x07, 0x4c,
	0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x8f, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x66, 0x12, 0x64, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x6a, 0x6f, 0x62,
	0x73, 0x92, 0x41, 0x20, 0x12, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x20, 0x41, 0x50,
	0x49, 0x1a, 0x11, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x4a, 0x6f, 0x62, 0x20, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xd4, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x12,
	0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x8e, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x6d, 0x12, 0x6b, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x92, 0x41, 0x18, 0x12, 0x0a, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x20, 0x41, 0x50, 0x49, 0x1a,
	0x0a, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x4a, 0x6f, 0x62, 0x12, 0xc1, 0x01, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x76, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x22,
	0x4d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x3a, 0x01,
	0x2a, 0x92, 0x41, 0x1b, 0x12, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x20,
	0x41, 0x50, 0x49, 0x1a, 0x0a, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20, 0x4a, 0x6f, 0x62, 0x12,
	0xe0, 0x01, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x1e, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x94, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x70, 0x1a, 0x6b, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x1b, 0x12, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a,
	0x6f, 0x62, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x0a, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x20, 0x4a,
	0x6f, 0x62, 0x12, 0xdd, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x91,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6d, 0x2a, 0x6b, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x1b, 0x12, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a,
	0x6f, 0x62, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x0a, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x4a,
	0x6f, 0x62, 0x12, 0xd8, 0x01, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x12, 0x1f, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x8e, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x66, 0x12, 0x64, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x70, 0x6f, 0x64, 0x73, 0x92, 0x41, 0x1f, 0x12, 0x0a,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x11, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0x20, 0x50, 0x6f, 0x64, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xf6, 0x01,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x21,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x22, 0xa0, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x60, 0x12, 0x5e, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x70, 0x6f, 0x64, 0x73, 0x92, 0x41, 0x37, 0x12,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x20, 0x41, 0x50,
	0x49, 0x1a, 0x23, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x50, 0x6f, 0x64, 0x20,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xd2, 0x01, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x8d, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x6d, 0x12, 0x6b, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x70, 0x6f, 0x64, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x92, 0x41, 0x17, 0x12, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x20, 0x41, 0x50, 0x49, 0x1a,
	0x0a, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x50, 0x6f, 0x64, 0x12, 0xbf, 0x01, 0x0a, 0x08,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x75, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x22, 0x4d,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x70, 0x6f, 0x64, 0x73, 0x3a, 0x01, 0x2a,
	0x92, 0x41, 0x1a, 0x12, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x20, 0x41, 0x50,
	0x49, 0x1a, 0x0a, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20, 0x50, 0x6f, 0x64, 0x12, 0xde, 0x01,
	0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x93, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x70, 0x1a, 0x6b, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x2f, 0x70, 0x6f, 0x64, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01,
	0x2a, 0x92, 0x41, 0x1a, 0x12, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x20, 0x41,
	0x50, 0x49, 0x1a, 0x0a, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x20, 0x50, 0x6f, 0x64, 0x12, 0xdb,
	0x01, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x12, 0x1e, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x90, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x6d, 0x2a, 0x6b, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x2f, 0x70, 0x6f, 0x64, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92,
	0x41, 0x1a, 0x12, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x20, 0x41, 0x50, 0x49,
	0x1a, 0x0a, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x50, 0x6f, 0x64, 0x12, 0xed, 0x01, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x50, 0x56, 0x43, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa4, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x72, 0x12, 0x70,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f,
	0x70, 0x6f, 0x64, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x70, 0x76, 0x63, 0x73,
	0x92, 0x41, 0x29, 0x12, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x50, 0x56, 0x43, 0x20, 0x41,
	0x50, 0x49, 0x1a, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x50, 0x6f, 0x64, 0x20, 0xe5,
	0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0x20, 0x50, 0x56, 0x43, 0x12, 0xf7, 0x01, 0x0a,
	0x08, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x43, 0x4d, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0xaf, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x78, 0x12, 0x76, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x70,
	0x6f, 0x64, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x6d, 0x61, 0x70, 0x73, 0x92, 0x41, 0x2e, 0x12, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f,
	0x43, 0x4d, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x50,
	0x6f, 0x64, 0x20, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0x20, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x12, 0xf9, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6f, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x22, 0xad, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x75, 0x12, 0x73, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x70, 0x6f, 0x64,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x92, 0x41, 0x2f, 0x12, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x1b, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x50, 0x6f,
	0x64, 0x20, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0x20, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0xf7, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x50, 0x6f, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x22, 0xa8, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7b, 0x1a, 0x76, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x70, 0x6f, 0x64, 0x73,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x24, 0x12, 0x10, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x10, 0xe9, 0x87, 0x8d, 0xe6,
	0x96, 0xb0, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0x20, 0x50, 0x6f, 0x64, 0x12, 0x91, 0x02, 0x0a,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x22,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x22, 0xb9, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7b, 0x12, 0x79, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x70,
	0x6f, 0x64, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x92, 0x41, 0x35, 0x12, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x20,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x50, 0x6f, 0x64, 0x20, 0xe5, 0x8c, 0x85, 0xe5, 0x90,
	0xab, 0xe7, 0x9a, 0x84, 0xe5, 0xae, 0xb9, 0xe5, 0x99, 0xa8, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x12, 0xa2, 0x02, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x22, 0xd0, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x8c, 0x01, 0x12, 0x89, 0x01, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x70,
	0x6f, 0x64, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x3a, 0x12, 0x10, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x26, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x20, 0x50, 0x6f, 0x64, 0x20,
	0xe4, 0xb8, 0x8b, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xaa, 0xe5, 0xae, 0xb9, 0xe5, 0x99, 0xa8, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0xc9, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0xec, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x95, 0x01, 0x12, 0x92, 0x01, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2f, 0x70,
	0x6f, 0x64, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x65, 0x6e, 0x76, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x92, 0x41, 0x4d, 0x12, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x45, 0x6e, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x32, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x20, 0x50, 0x6f, 0x64, 0x20,
	0xe4, 0xb8, 0x8b, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xaa, 0xe5, 0xae, 0xb9, 0xe5, 0x99, 0xa8, 0xe7,
	0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x32, 0xa4, 0x1a, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0xdf, 0x01,
	0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x67, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x97, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6a, 0x12, 0x68,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x92, 0x41, 0x24, 0x12, 0x0b, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x67, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x15, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0x20, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12,
	0xdc, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x67, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x96, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x71, 0x12, 0x6f,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92,
	0x41, 0x1c, 0x12, 0x0a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x67, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x0e,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0xc9,
	0x01, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x12, 0x1e, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x56, 0x22, 0x51, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x7d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x1f, 0x12, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x0e, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0x20, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0xe8, 0x01, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x9c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x74, 0x1a,
	0x6f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x1f, 0x12, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x67, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x0e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x20, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0xe5, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x6e, 0x67, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x99, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x71, 0x2a, 0x6f, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x7d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x1f, 0x12, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x0e, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0xde, 0x01,
	0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x56, 0x43, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x96, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x69, 0x12, 0x67,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x92, 0x41, 0x24, 0x12, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x56, 0x43, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x15, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xdb,
	0x01, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x53, 0x56, 0x43, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x95, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x70, 0x12, 0x6e, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x7d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x1c,
	0x12, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x56, 0x43, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x0e, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xc8, 0x01, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x56, 0x43, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x55,
	0x22, 0x50, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x1f, 0x12, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x56, 0x43, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x0e, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xe7, 0x01, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x56, 0x43, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x9b, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x73, 0x1a, 0x6e, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x7d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x1f, 0x12, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x56, 0x43, 0x20, 0x41, 0x50,
	0x49, 0x1a, 0x0e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xe4, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x56, 0x43, 0x12,
	0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x98, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x70, 0x2a, 0x6e, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x1f, 0x12, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x56, 0x43, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x0e, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xdf, 0x01, 0x0a, 0x06, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x50, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x98, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6a, 0x12, 0x68, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x92, 0x41, 0x25, 0x12, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x50, 0x20, 0x41, 0x50,
	0x49, 0x1a, 0x17, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xdc, 0x01, 0x0a, 0x05, 0x47,
	0x65, 0x74, 0x45, 0x50, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x97, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x71, 0x12, 0x6f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x1d, 0x12, 0x09, 0x47, 0x65,
	0x74, 0x45, 0x50, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x10, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0xc9, 0x01, 0x0a, 0x08, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x50, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x7f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x56, 0x22, 0x51, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x20, 0x12, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x50, 0x20,
	0x41, 0x50, 0x49, 0x1a, 0x10, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0xe8, 0x01, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x50, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x9d, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x74, 0x1a, 0x6f, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x20,
	0x12, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x50, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x10,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x20, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0xe5, 0x01, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x50, 0x12, 0x1e, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x9a, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x71, 0x2a, 0x6f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x20, 0x12, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x50, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x10, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x32, 0xd2, 0x11, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xdf, 0x01, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x4d, 0x12, 0x1c,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x98, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x6a, 0x12, 0x68, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x73, 0x92, 0x41, 0x25,
	0x12, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x4d, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x17, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x20, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xdc, 0x01, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x43, 0x4d, 0x12,
	0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x97, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x71, 0x12, 0x6f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x1d, 0x12, 0x09, 0x47, 0x65, 0x74, 0x43, 0x4d, 0x20, 0x41,
	0x50, 0x49, 0x1a, 0x10, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4d, 0x61, 0x70, 0x12, 0xc9, 0x01, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x4d, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x7f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x56, 0x22, 0x51, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x20,
	0x12, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x4d, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x10,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70,
	0x12, 0xe8, 0x01, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x4d, 0x12, 0x1e, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x9d, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x74, 0x1a, 0x6f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x20, 0x12, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x4d, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x10, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x12, 0xe5, 0x01, 0x0a, 0x08,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x4d, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x9a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x71, 0x2a,
	0x6f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x92, 0x41, 0x20, 0x12, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x4d, 0x20, 0x41, 0x50,
	0x49, 0x1a, 0x10, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4d, 0x61, 0x70, 0x12, 0xe1, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x96,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x67, 0x12, 0x65, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x92, 0x41,
	0x26, 0x12, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x41, 0x50,
	0x49, 0x1a, 0x14, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xde, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x95, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6e, 0x12, 0x6c, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x1e, 0x12, 0x0d, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x0d, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0x20, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0xcb, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x53, 0x22,
	0x4e, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x21, 0x12, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x0d, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0xea, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x9b, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x71, 0x1a, 0x6c,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x21, 0x12, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x20, 0x41, 0x50, 0x49, 0x1a, 0x0d, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x20, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0xe7, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x98, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6e, 0x2a, 0x6c, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x21, 0x12, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x0d,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x32, 0x85, 0x1b,
	0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0xd8, 0x01, 0x0a, 0x06, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x56, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x91, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5c, 0x12, 0x5a, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x92, 0x41, 0x2c, 0x12, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x56,
	0x20, 0x41, 0x50, 0x49, 0x1a, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x50, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xd5, 0x01, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x50, 0x56, 0x12, 0x1b,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x90, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x63, 0x12, 0x61, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x7d, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x24, 0x12, 0x09, 0x47, 0x65, 0x74, 0x50, 0x56, 0x20,
	0x41, 0x50, 0x49, 0x1a, 0x17, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x50, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0xda, 0x01, 0x0a,
	0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x56, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x8f, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5f,
	0x22, 0x5a, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x27, 0x12, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x56, 0x20, 0x41, 0x50, 0x49,
	0x1a, 0x17, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0xe1, 0x01, 0x0a, 0x08, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x56, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x96, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x66, 0x1a, 0x61, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x27, 0x12, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x56,
	0x20, 0x41, 0x50, 0x49, 0x1a, 0x17, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x20, 0x50, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0xde, 0x01,
	0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x56, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x93, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x63, 0x2a, 0x61, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x7d, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x27, 0x12, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x56, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x17, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0xfc,
	0x01, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x56, 0x43, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xb4, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x79, 0x12,
	0x77, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x2f,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x92, 0x41, 0x32, 0x12, 0x0b, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x56, 0x43, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x23, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0x20, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xfa, 0x01,
	0x0a, 0x06, 0x47, 0x65, 0x74, 0x50, 0x56, 0x43, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x22, 0xb4, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x80, 0x01, 0x12, 0x7e, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x7d, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x2a,
	0x12, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x56, 0x43, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x1c, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0xe7, 0x01, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x56, 0x43, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x9b, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x65, 0x22,
	0x60, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x2d, 0x12, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x56, 0x43, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x1c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20, 0x50,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x12, 0x86, 0x02, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x56, 0x43, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0xba, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x83, 0x01, 0x1a, 0x7e, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x7d, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x2d,
	0x12, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x56, 0x43, 0x20, 0x41, 0x50, 0x49, 0x1a,
	0x1c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x20, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x83, 0x02,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x56, 0x43, 0x12, 0x1e, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xb7, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x80, 0x01, 0x2a, 0x7e, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x92, 0x41, 0x2d, 0x12, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x56,
	0x43, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x1c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x12, 0xd1, 0x01, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x43, 0x12, 0x1c,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x8a, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x59, 0x12, 0x57, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x7d, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x92, 0x41, 0x28, 0x12,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x43, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x1a, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0x20, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xce, 0x01, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x53,
	0x43, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x89, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x60, 0x12, 0x5e, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x20, 0x12, 0x09, 0x47, 0x65, 0x74, 0x53, 0x43, 0x20,
	0x41, 0x50, 0x49, 0x1a, 0x13, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0xd3, 0x01, 0x0a, 0x08, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x43, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x88, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5c, 0x22, 0x57, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x23, 0x12, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x43, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x13, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0x20, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0xda,
	0x01, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x43, 0x12, 0x1e, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x8f, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x63, 0x1a, 0x5e, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x7d, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x23, 0x12, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x43, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x13, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x20, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0xd7, 0x01, 0x0a, 0x08,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x43, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x8c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x60, 0x2a,
	0x5e, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92,
	0x41, 0x23, 0x12, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x43, 0x20, 0x41, 0x50, 0x49,
	0x1a, 0x13, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x32, 0x8f, 0x09, 0x0a, 0x04, 0x52, 0x42, 0x41, 0x43, 0x12, 0xe7,
	0x01, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x41, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa0, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6d, 0x12, 0x6b,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x92, 0x41, 0x2a, 0x12, 0x0a,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x41, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x1c, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xe4, 0x01, 0x0a, 0x05, 0x47, 0x65, 0x74,
	0x53, 0x41, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x9f, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x74, 0x12, 0x72, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x72, 0x62,
	0x61, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x22, 0x12, 0x09, 0x47,
	0x65, 0x74, 0x53, 0x41, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x15, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0xd2, 0x01, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x41, 0x12, 0x1e, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x87, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x59, 0x22, 0x54, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x7d, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x25, 0x12,
	0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x41, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x15, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0xf0, 0x01, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x41, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0xa5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x77, 0x1a, 0x72, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f,
	0x72, 0x62, 0x61, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x25, 0x12, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x41, 0x20, 0x41, 0x50, 0x49,
	0x1a, 0x15, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xed, 0x01, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x41, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x22, 0xa2, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x74, 0x2a, 0x72, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x7d, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92,
	0x41, 0x25, 0x12, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x41, 0x20, 0x41, 0x50, 0x49,
	0x1a, 0x15, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x86, 0x08, 0x0a, 0x03, 0x48, 0x50, 0x41, 0x12,
	0xcc, 0x01, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x50, 0x41, 0x12, 0x1c, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x84, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5b,
	0x12, 0x59, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x68, 0x70, 0x61, 0x92, 0x41, 0x20, 0x12, 0x0b,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x50, 0x41, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x11, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0x20, 0x48, 0x50, 0x41, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xc9,
	0x01, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x48, 0x50, 0x41, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x83, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x62, 0x12, 0x60, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x7d, 0x2f, 0x68, 0x70, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92,
	0x41, 0x18, 0x12, 0x0a, 0x47, 0x65, 0x74, 0x48, 0x50, 0x41, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x0a,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x48, 0x50, 0x41, 0x12, 0xb6, 0x01, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x50, 0x41, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x22, 0x42,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x68,
	0x70, 0x61, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x1b, 0x12, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x48, 0x50, 0x41, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x0a, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20,
	0x48, 0x50, 0x41, 0x12, 0xd5, 0x01, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x50,
	0x41, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x89, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x65, 0x1a, 0x60, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f,
	0x68, 0x70, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x1b,
	0x12, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x50, 0x41, 0x20, 0x41, 0x50, 0x49, 0x1a,
	0x0a, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x20, 0x48, 0x50, 0x41, 0x12, 0xd2, 0x01, 0x0a, 0x09,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x50, 0x41, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x86, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x62,
	0x2a, 0x60, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x68, 0x70, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x92, 0x41, 0x1b, 0x12, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x50, 0x41,
	0x20, 0x41, 0x50, 0x49, 0x1a, 0x0a, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x48, 0x50, 0x41,
	0x32, 0xf7, 0x0b, 0x0a, 0x09, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x12, 0xb5,
	0x01, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x52, 0x44, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x12, 0x43,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x63,
	0x72, 0x64, 0x73, 0x92, 0x41, 0x20, 0x12, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x52, 0x44, 0x20,
	0x41, 0x50, 0x49, 0x1a, 0x11, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x43, 0x52, 0x44, 0x20,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xb2, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x43, 0x52,
	0x44, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x6d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4c, 0x12, 0x4a, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x92, 0x41, 0x18, 0x12, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x52, 0x44, 0x20, 0x41, 0x50, 0x49, 0x1a,
	0x0a, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x43, 0x52, 0x44, 0x12, 0xde, 0x01, 0x0a, 0x08,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x4f, 0x62, 0x6a, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x4f, 0x62, 0x6a,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x94, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x12, 0x5c,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x63,
	0x72, 0x64, 0x73, 0x2f, 0x7b, 0x43, 0x52, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x92, 0x41, 0x2d, 0x12,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x4f, 0x62, 0x6a, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x1d, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xdf, 0x01, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x43, 0x4f, 0x62, 0x6a, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x4f, 0x62, 0x6a,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x97, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x69, 0x12, 0x67, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x72,
	0x64, 0x73, 0x2f, 0x7b, 0x43, 0x52, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x62,
	0x6a, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x25, 0x12, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x4f,
	0x62, 0x6a, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x16, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0xe8,
	0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x12, 0xe0,
	0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x4f, 0x62, 0x6a, 0x12, 0x1f, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x43, 0x4f, 0x62, 0x6a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x92, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x61, 0x22, 0x5c, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x43, 0x52, 0x44, 0x4e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x28, 0x12, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x4f, 0x62, 0x6a, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x16, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0x20, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0x12, 0xeb, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x4f, 0x62, 0x6a,
	0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x43, 0x4f, 0x62, 0x6a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x9d, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6c, 0x1a, 0x67, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x43,
	0x52, 0x44, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x62, 0x6a, 0x4e, 0x61, 0x6d, 0x65,
	0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x28, 0x12, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x4f, 0x62, 0x6a, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x16, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x20,
	0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x12,
	0xe8, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x4f, 0x62, 0x6a, 0x12, 0x1f,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x43, 0x4f, 0x62, 0x6a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x9a, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x69, 0x2a, 0x67, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x43, 0x52, 0x44,
	0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x62, 0x6a, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x92,
	0x41, 0x28, 0x12, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x4f, 0x62, 0x6a, 0x20, 0x41,
	0x50, 0x49, 0x1a, 0x16, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0xe8, 0x87, 0xaa, 0xe5, 0xae,
	0x9a, 0xe4, 0xb9, 0x89, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x32, 0xef, 0x0d, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xe8, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4b,
	0x38, 0x53, 0x52, 0x65, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x8c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x53, 0x12, 0x51, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x92,
	0x41, 0x30, 0x12, 0x15, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x17, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0x20, 0x4b, 0x38, 0x53, 0x20, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xa8, 0xa1, 0xe7,
	0x89, 0x88, 0x12, 0xc0, 0x01, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x12, 0x48, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x92, 0x41, 0x1d, 0x12, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xae, 0xa2,
	0xe9, 0x98, 0x85, 0x30, 0x01, 0x12, 0xe8, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x2d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x7f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x42, 0x12, 0x1e,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x20, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x20, 0x43, 0x61, 0x63, 0x68, 0x65, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x20,
	0xe4, 0xb8, 0xbb, 0xe5, 0x8a, 0xa8, 0xe4, 0xbd, 0xbf, 0x20, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x20, 0xe7, 0xbc, 0x93, 0xe5, 0xad, 0x98, 0xe5, 0xa4, 0xb1, 0xe6, 0x95, 0x88,
	0x12, 0xff, 0x01, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x9f, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5b, 0x22, 0x56, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x3b, 0x12, 0x1c, 0x46, 0x6f, 0x72, 0x6d, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x1b, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5, 0x8c, 0x96,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe6, 0xb8, 0xb2, 0xe6, 0x9f, 0x93, 0xe9, 0xa2, 0x84, 0xe8,
	0xa7, 0x88, 0x12, 0xf0, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x96, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x12, 0x4a, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x92, 0x41, 0x41, 0x12, 0x1e, 0x47, 0x65, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x27, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x20, 0x41, 0x50, 0x49, 0x1a, 0x1f, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8c, 0x87, 0xe5,
	0xae, 0x9a, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0x20, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0xb8, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xc8, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5c, 0x12, 0x5a,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x70,
	0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x92, 0x41, 0x63, 0x12, 0x2d, 0x47,
	0x65, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x27, 0x73, 0x20, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x32, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0xa1, 0xa8, 0xe5, 0x8d, 0x95, 0xe5,
	0x8c, 0x96, 0xe7, 0x9a, 0x84, 0x20, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x99, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xbd, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x51, 0x12, 0x4f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x92, 0x41, 0x63, 0x12, 0x24, 0x47, 0x65, 0x74, 0x20, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x27, 0x73, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x1a,
	0x3b, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe4, 0xb8, 0x8b,
	0xe6, 0x8b, 0x89, 0xe6, 0xa1, 0x86, 0xe9, 0x80, 0x89, 0xe9, 0xa1, 0xb9, 0xe7, 0x9a, 0x84, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xef, 0xbc, 0x88, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0xef, 0xbc, 0x89, 0x42, 0x47, 0x5a, 0x17,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x92, 0x41, 0x2b, 0x12, 0x26, 0x0a, 0x18, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x20,
	0x41, 0x70, 0x69, 0x44, 0x6f, 0x63, 0x2a, 0x05, 0x0a, 0x03, 0x4d, 0x49, 0x54, 0x32, 0x03, 0x31,
	0x2e, 0x30, 0x2a, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_cluster_resources_cluster_resources_proto_rawDescOnce sync.Once
	file_proto_cluster_resources_cluster_resources_proto_rawDescData = file_proto_cluster_resources_cluster_resources_proto_rawDesc
)

func file_proto_cluster_resources_cluster_resources_proto_rawDescGZIP() []byte {
	file_proto_cluster_resources_cluster_resources_proto_rawDescOnce.Do(func() {
		file_proto_cluster_resources_cluster_resources_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_cluster_resources_cluster_resources_proto_rawDescData)
	})
	return file_proto_cluster_resources_cluster_resources_proto_rawDescData
}

var file_proto_cluster_resources_cluster_resources_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_proto_cluster_resources_cluster_resources_proto_goTypes = []interface{}{
	(*EchoReq)(nil),                        // 0: clusterresources.EchoReq
	(*EchoResp)(nil),                       // 1: clusterresources.EchoResp
	(*PingReq)(nil),                        // 2: clusterresources.PingReq
	(*PingResp)(nil),                       // 3: clusterresources.PingResp
	(*HealthzReq)(nil),                     // 4: clusterresources.HealthzReq
	(*HealthzResp)(nil),                    // 5: clusterresources.HealthzResp
	(*VersionReq)(nil),                     // 6: clusterresources.VersionReq
	(*VersionResp)(nil),                    // 7: clusterresources.VersionResp
	(*ResListReq)(nil),                     // 8: clusterresources.ResListReq
	(*ResGetReq)(nil),                      // 9: clusterresources.ResGetReq
	(*ResCreateReq)(nil),                   // 10: clusterresources.ResCreateReq
	(*ResUpdateReq)(nil),                   // 11: clusterresources.ResUpdateReq
	(*ResScaleReq)(nil),                    // 12: clusterresources.ResScaleReq
	(*ResDeleteReq)(nil),                   // 13: clusterresources.ResDeleteReq
	(*ResBatchRescheduleReq)(nil),          // 14: clusterresources.ResBatchRescheduleReq
	(*PodResListReq)(nil),                  // 15: clusterresources.PodResListReq
	(*ListPoByNodeReq)(nil),                // 16: clusterresources.ListPoByNodeReq
	(*ContainerListReq)(nil),               // 17: clusterresources.ContainerListReq
	(*ContainerGetReq)(nil),                // 18: clusterresources.ContainerGetReq
	(*GetK8SResTemplateReq)(nil),           // 19: clusterresources.GetK8SResTemplateReq
	(*CObjListReq)(nil),                    // 20: clusterresources.CObjListReq
	(*CObjGetReq)(nil),                     // 21: clusterresources.CObjGetReq
	(*CObjCreateReq)(nil),                  // 22: clusterresources.CObjCreateReq
	(*CObjUpdateReq)(nil),                  // 23: clusterresources.CObjUpdateReq
	(*CObjDeleteReq)(nil),                  // 24: clusterresources.CObjDeleteReq
	(*CommonResp)(nil),                     // 25: clusterresources.CommonResp
	(*CommonListResp)(nil),                 // 26: clusterresources.CommonListResp
	(*SubscribeReq)(nil),                   // 27: clusterresources.SubscribeReq
	(*SubscribeResp)(nil),                  // 28: clusterresources.SubscribeResp
	(*InvalidateDiscoveryCacheReq)(nil),    // 29: clusterresources.InvalidateDiscoveryCacheReq
	(*FormRenderPreviewReq)(nil),           // 30: clusterresources.FormRenderPreviewReq
	(*GetResFormSchemaReq)(nil),            // 31: clusterresources.GetResFormSchemaReq
	(*GetFormSupportedApiVersionsReq)(nil), // 32: clusterresources.GetFormSupportedApiVersionsReq
	(*GetResSelectItemsReq)(nil),           // 33: clusterresources.GetResSelectItemsReq
	(*_struct.Struct)(nil),                 // 34: google.protobuf.Struct
	(*_struct.ListValue)(nil),              // 35: google.protobuf.ListValue
}
var file_proto_cluster_resources_cluster_resources_proto_depIdxs = []int32{
	34,  // 0: clusterresources.ResCreateReq.rawData:type_name -> google.protobuf.Struct
	34,  // 1: clusterresources.ResUpdateReq.rawData:type_name -> google.protobuf.Struct
	34,  // 2: clusterresources.CObjCreateReq.rawData:type_name -> google.protobuf.Struct
	34,  // 3: clusterresources.CObjUpdateReq.rawData:type_name -> google.protobuf.Struct
	34,  // 4: clusterresources.CommonResp.data:type_name -> google.protobuf.Struct
	34,  // 5: clusterresources.CommonResp.webAnnotations:type_name -> google.protobuf.Struct
	35,  // 6: clusterresources.CommonListResp.data:type_name -> google.protobuf.ListValue
	34,  // 7: clusterresources.CommonListResp.webAnnotations:type_name -> google.protobuf.Struct
	34,  // 8: clusterresources.SubscribeResp.manifest:type_name -> google.protobuf.Struct
	34,  // 9: clusterresources.SubscribeResp.manifestExt:type_name -> google.protobuf.Struct
	34,  // 10: clusterresources.FormRenderPreviewReq.formData:type_name -> google.protobuf.Struct
	0,   // 11: clusterresources.Basic.Echo:input_type -> clusterresources.EchoReq
	2,   // 12: clusterresources.Basic.Ping:input_type -> clusterresources.PingReq
	4,   // 13: clusterresources.Basic.Healthz:input_type -> clusterresources.HealthzReq
	6,   // 14: clusterresources.Basic.Version:input_type -> clusterresources.VersionReq
	8,   // 15: clusterresources.Node.ListNode:input_type -> clusterresources.ResListReq
	8,   // 16: clusterresources.Namespace.ListNS:input_type -> clusterresources.ResListReq
	8,   // 17: clusterresources.Workload.ListDeploy:input_type -> clusterresources.ResListReq
	9,   // 18: clusterresources.Workload.GetDeploy:input_type -> clusterresources.ResGetReq
	10,  // 19: clusterresources.Workload.CreateDeploy:input_type -> clusterresources.ResCreateReq
	11,  // 20: clusterresources.Workload.UpdateDeploy:input_type -> clusterresources.ResUpdateReq
	12,  // 21: clusterresources.Workload.ScaleDeploy:input_type -> clusterresources.ResScaleReq
	14,  // 22: clusterresources.Workload.RescheduleDeployPo:input_type -> clusterresources.ResBatchRescheduleReq
	13,  // 23: clusterresources.Workload.DeleteDeploy:input_type -> clusterresources.ResDeleteReq
	8,   // 24: clusterresources.Workload.ListDS:input_type -> clusterresources.ResListReq
	9,   // 25: clusterresources.Workload.GetDS:input_type -> clusterresources.ResGetReq
	10,  // 26: clusterresources.Workload.CreateDS:input_type -> clusterresources.ResCreateReq
	11,  // 27: clusterresources.Workload.UpdateDS:input_type -> clusterresources.ResUpdateReq
	13,  // 28: clusterresources.Workload.DeleteDS:input_type -> clusterresources.ResDeleteReq
	8,   // 29: clusterresources.Workload.ListSTS:input_type -> clusterresources.ResListReq
	9,   // 30: clusterresources.Workload.GetSTS:input_type -> clusterresources.ResGetReq
	10,  // 31: clusterresources.Workload.CreateSTS:input_type -> clusterresources.ResCreateReq
	11,  // 32: clusterresources.Workload.UpdateSTS:input_type -> clusterresources.ResUpdateReq
	12,  // 33: clusterresources.Workload.ScaleSTS:input_type -> clusterresources.ResScaleReq
	14,  // 34: clusterresources.Workload.RescheduleSTSPo:input_type -> clusterresources.ResBatchRescheduleReq
	13,  // 35: clusterresources.Workload.DeleteSTS:input_type -> clusterresources.ResDeleteReq
	8,   // 36: clusterresources.Workload.ListCJ:input_type -> clusterresources.ResListReq
	9,   // 37: clusterresources.Workload.GetCJ:input_type -> clusterresources.ResGetReq
	10,  // 38: clusterresources.Workload.CreateCJ:input_type -> clusterresources.ResCreateReq
	11,  // 39: clusterresources.Workload.UpdateCJ:input_type -> clusterresources.ResUpdateReq
	13,  // 40: clusterresources.Workload.DeleteCJ:input_type -> clusterresources.ResDeleteReq
	8,   // 41: clusterresources.Workload.ListJob:input_type -> clusterresources.ResListReq
	9,   // 42: clusterresources.Workload.GetJob:input_type -> clusterresources.ResGetReq
	10,  // 43: clusterresources.Workload.CreateJob:input_type -> clusterresources.ResCreateReq
	11,  // 44: clusterresources.Workload.UpdateJob:input_type -> clusterresources.ResUpdateReq
	13,  // 45: clusterresources.Workload.DeleteJob:input_type -> clusterresources.ResDeleteReq
	15,  // 46: clusterresources.Workload.ListPo:input_type -> clusterresources.PodResListReq
	16,  // 47: clusterresources.Workload.ListPoByNode:input_type -> clusterresources.ListPoByNodeReq
	9,   // 48: clusterresources.Workload.GetPo:input_type -> clusterresources.ResGetReq
	10,  // 49: clusterresources.Workload.CreatePo:input_type -> clusterresources.ResCreateReq
	11,  // 50: clusterresources.Workload.UpdatePo:input_type -> clusterresources.ResUpdateReq
	13,  // 51: clusterresources.Workload.DeletePo:input_type -> clusterresources.ResDeleteReq
	9,   // 52: clusterresources.Workload.ListPoPVC:input_type -> clusterresources.ResGetReq
	9,   // 53: clusterresources.Workload.ListPoCM:input_type -> clusterresources.ResGetReq
	9,   // 54: clusterresources.Workload.ListPoSecret:input_type -> clusterresources.ResGetReq
	11,  // 55: clusterresources.Workload.ReschedulePo:input_type -> clusterresources.ResUpdateReq
	17,  // 56: clusterresources.Workload.ListContainer:input_type -> clusterresources.ContainerListReq
	18,  // 57: clusterresources.Workload.GetContainer:input_type -> clusterresources.ContainerGetReq
	18,  // 58: clusterresources.Workload.GetContainerEnvInfo:input_type -> clusterresources.ContainerGetReq
	8,   // 59: clusterresources.Network.ListIng:input_type -> clusterresources.ResListReq
	9,   // 60: clusterresources.Network.GetIng:input_type -> clusterresources.ResGetReq
	10,  // 61: clusterresources.Network.CreateIng:input_type -> clusterresources.ResCreateReq
	11,  // 62: clusterresources.Network.UpdateIng:input_type -> clusterresources.ResUpdateReq
	13,  // 63: clusterresources.Network.DeleteIng:input_type -> clusterresources.ResDeleteReq
	8,   // 64: clusterresources.Network.ListSVC:input_type -> clusterresources.ResListReq
	9,   // 65: clusterresources.Network.GetSVC:input_type -> clusterresources.ResGetReq
	10,  // 66: clusterresources.Network.CreateSVC:input_type -> clusterresources.ResCreateReq
	11,  // 67: clusterresources.Network.UpdateSVC:input_type -> clusterresources.ResUpdateReq
	13,  // 68: clusterresources.Network.DeleteSVC:input_type -> clusterresources.ResDeleteReq
	8,   // 69: clusterresources.Network.ListEP:input_type -> clusterresources.ResListReq
	9,   // 70: clusterresources.Network.GetEP:input_type -> clusterresources.ResGetReq
	10,  // 71: clusterresources.Network.CreateEP:input_type -> clusterresources.ResCreateReq
	11,  // 72: clusterresources.Network.UpdateEP:input_type -> clusterresources.ResUpdateReq
	13,  // 73: clusterresources.Network.DeleteEP:input_type -> clusterresources.ResDeleteReq
	8,   // 74: clusterresources.Config.ListCM:input_type -> clusterresources.ResListReq
	9,   // 75: clusterresources.Config.GetCM:input_type -> clusterresources.ResGetReq
	10,  // 76: clusterresources.Config.CreateCM:input_type -> clusterresources.ResCreateReq
	11,  // 77: clusterresources.Config.UpdateCM:input_type -> clusterresources.ResUpdateReq
	13,  // 78: clusterresources.Config.DeleteCM:input_type -> clusterresources.ResDeleteReq
	8,   // 79: clusterresources.Config.ListSecret:input_type -> clusterresources.ResListReq
	9,   // 80: clusterresources.Config.GetSecret:input_type -> clusterresources.ResGetReq
	10,  // 81: clusterresources.Config.CreateSecret:input_type -> clusterresources.ResCreateReq
	11,  // 82: clusterresources.Config.UpdateSecret:input_type -> clusterresources.ResUpdateReq
	13,  // 83: clusterresources.Config.DeleteSecret:input_type -> clusterresources.ResDeleteReq
	8,   // 84: clusterresources.Storage.ListPV:input_type -> clusterresources.ResListReq
	9,   // 85: clusterresources.Storage.GetPV:input_type -> clusterresources.ResGetReq
	10,  // 86: clusterresources.Storage.CreatePV:input_type -> clusterresources.ResCreateReq
	11,  // 87: clusterresources.Storage.UpdatePV:input_type -> clusterresources.ResUpdateReq
	13,  // 88: clusterresources.Storage.DeletePV:input_type -> clusterresources.ResDeleteReq
	8,   // 89: clusterresources.Storage.ListPVC:input_type -> clusterresources.ResListReq
	9,   // 90: clusterresources.Storage.GetPVC:input_type -> clusterresources.ResGetReq
	10,  // 91: clusterresources.Storage.CreatePVC:input_type -> clusterresources.ResCreateReq
	11,  // 92: clusterresources.Storage.UpdatePVC:input_type -> clusterresources.ResUpdateReq
	13,  // 93: clusterresources.Storage.DeletePVC:input_type -> clusterresources.ResDeleteReq
	8,   // 94: clusterresources.Storage.ListSC:input_type -> clusterresources.ResListReq
	9,   // 95: clusterresources.Storage.GetSC:input_type -> clusterresources.ResGetReq
	10,  // 96: clusterresources.Storage.CreateSC:input_type -> clusterresources.ResCreateReq
	11,  // 97: clusterresources.Storage.UpdateSC:input_type -> clusterresources.ResUpdateReq
	13,  // 98: clusterresources.Storage.DeleteSC:input_type -> clusterresources.ResDeleteReq
	8,   // 99: clusterresources.RBAC.ListSA:input_type -> clusterresources.ResListReq
	9,   // 100: clusterresources.RBAC.GetSA:input_type -> clusterresources.ResGetReq
	10,  // 101: clusterresources.RBAC.CreateSA:input_type -> clusterresources.ResCreateReq
	11,  // 102: clusterresources.RBAC.UpdateSA:input_type -> clusterresources.ResUpdateReq
	13,  // 103: clusterresources.RBAC.DeleteSA:input_type -> clusterresources.ResDeleteReq
	8,   // 104: clusterresources.HPA.ListHPA:input_type -> clusterresources.ResListReq
	9,   // 105: clusterresources.HPA.GetHPA:input_type -> clusterresources.ResGetReq
	10,  // 106: clusterresources.HPA.CreateHPA:input_type -> clusterresources.ResCreateReq
	11,  // 107: clusterresources.HPA.UpdateHPA:input_type -> clusterresources.ResUpdateReq
	13,  // 108: clusterresources.HPA.DeleteHPA:input_type -> clusterresources.ResDeleteReq
	8,   // 109: clusterresources.CustomRes.ListCRD:input_type -> clusterresources.ResListReq
	9,   // 110: clusterresources.CustomRes.GetCRD:input_type -> clusterresources.ResGetReq
	20,  // 111: clusterresources.CustomRes.ListCObj:input_type -> clusterresources.CObjListReq
	21,  // 112: clusterresources.CustomRes.GetCObj:input_type -> clusterresources.CObjGetReq
	22,  // 113: clusterresources.CustomRes.CreateCObj:input_type -> clusterresources.CObjCreateReq
	23,  // 114: clusterresources.CustomRes.UpdateCObj:input_type -> clusterresources.CObjUpdateReq
	24,  // 115: clusterresources.CustomRes.DeleteCObj:input_type -> clusterresources.CObjDeleteReq
	19,  // 116: clusterresources.Resource.GetK8SResTemplate:input_type -> clusterresources.GetK8SResTemplateReq
	27,  // 117: clusterresources.Resource.Subscribe:input_type -> clusterresources.SubscribeReq
	29,  // 118: clusterresources.Resource.InvalidateDiscoveryCache:input_type -> clusterresources.InvalidateDiscoveryCacheReq
	30,  // 119: clusterresources.Resource.FormDataRenderPreview:input_type -> clusterresources.FormRenderPreviewReq
	31,  // 120: clusterresources.Resource.GetResFormSchema:input_type -> clusterresources.GetResFormSchemaReq
	32,  // 121: clusterresources.Resource.GetFormSupportedAPIVersions:input_type -> clusterresources.GetFormSupportedApiVersionsReq
	33,  // 122: clusterresources.Resource.GetResSelectItems:input_type -> clusterresources.GetResSelectItemsReq
	1,   // 123: clusterresources.Basic.Echo:output_type -> clusterresources.EchoResp
	3,   // 124: clusterresources.Basic.Ping:output_type -> clusterresources.PingResp
	5,   // 125: clusterresources.Basic.Healthz:output_type -> clusterresources.HealthzResp
	7,   // 126: clusterresources.Basic.Version:output_type -> clusterresources.VersionResp
	25,  // 127: clusterresources.Node.ListNode:output_type -> clusterresources.CommonResp
	25,  // 128: clusterresources.Namespace.ListNS:output_type -> clusterresources.CommonResp
	25,  // 129: clusterresources.Workload.ListDeploy:output_type -> clusterresources.CommonResp
	25,  // 130: clusterresources.Workload.GetDeploy:output_type -> clusterresources.CommonResp
	25,  // 131: clusterresources.Workload.CreateDeploy:output_type -> clusterresources.CommonResp
	25,  // 132: clusterresources.Workload.UpdateDeploy:output_type -> clusterresources.CommonResp
	25,  // 133: clusterresources.Workload.ScaleDeploy:output_type -> clusterresources.CommonResp
	25,  // 134: clusterresources.Workload.RescheduleDeployPo:output_type -> clusterresources.CommonResp
	25,  // 135: clusterresources.Workload.DeleteDeploy:output_type -> clusterresources.CommonResp
	25,  // 136: clusterresources.Workload.ListDS:output_type -> clusterresources.CommonResp
	25,  // 137: clusterresources.Workload.GetDS:output_type -> clusterresources.CommonResp
	25,  // 138: clusterresources.Workload.CreateDS:output_type -> clusterresources.CommonResp
	25,  // 139: clusterresources.Workload.UpdateDS:output_type -> clusterresources.CommonResp
	25,  // 140: clusterresources.Workload.DeleteDS:output_type -> clusterresources.CommonResp
	25,  // 141: clusterresources.Workload.ListSTS:output_type -> clusterresources.CommonResp
	25,  // 142: clusterresources.Workload.GetSTS:output_type -> clusterresources.CommonResp
	25,  // 143: clusterresources.Workload.CreateSTS:output_type -> clusterresources.CommonResp
	25,  // 144: clusterresources.Workload.UpdateSTS:output_type -> clusterresources.CommonResp
	25,  // 145: clusterresources.Workload.ScaleSTS:output_type -> clusterresources.CommonResp
	25,  // 146: clusterresources.Workload.RescheduleSTSPo:output_type -> clusterresources.CommonResp
	25,  // 147: clusterresources.Workload.DeleteSTS:output_type -> clusterresources.CommonResp
	25,  // 148: clusterresources.Workload.ListCJ:output_type -> clusterresources.CommonResp
	25,  // 149: clusterresources.Workload.GetCJ:output_type -> clusterresources.CommonResp
	25,  // 150: clusterresources.Workload.CreateCJ:output_type -> clusterresources.CommonResp
	25,  // 151: clusterresources.Workload.UpdateCJ:output_type -> clusterresources.CommonResp
	25,  // 152: clusterresources.Workload.DeleteCJ:output_type -> clusterresources.CommonResp
	25,  // 153: clusterresources.Workload.ListJob:output_type -> clusterresources.CommonResp
	25,  // 154: clusterresources.Workload.GetJob:output_type -> clusterresources.CommonResp
	25,  // 155: clusterresources.Workload.CreateJob:output_type -> clusterresources.CommonResp
	25,  // 156: clusterresources.Workload.UpdateJob:output_type -> clusterresources.CommonResp
	25,  // 157: clusterresources.Workload.DeleteJob:output_type -> clusterresources.CommonResp
	25,  // 158: clusterresources.Workload.ListPo:output_type -> clusterresources.CommonResp
	26,  // 159: clusterresources.Workload.ListPoByNode:output_type -> clusterresources.CommonListResp
	25,  // 160: clusterresources.Workload.GetPo:output_type -> clusterresources.CommonResp
	25,  // 161: clusterresources.Workload.CreatePo:output_type -> clusterresources.CommonResp
	25,  // 162: clusterresources.Workload.UpdatePo:output_type -> clusterresources.CommonResp
	25,  // 163: clusterresources.Workload.DeletePo:output_type -> clusterresources.CommonResp
	25,  // 164: clusterresources.Workload.ListPoPVC:output_type -> clusterresources.CommonResp
	25,  // 165: clusterresources.Workload.ListPoCM:output_type -> clusterresources.CommonResp
	25,  // 166: clusterresources.Workload.ListPoSecret:output_type -> clusterresources.CommonResp
	25,  // 167: clusterresources.Workload.ReschedulePo:output_type -> clusterresources.CommonResp
	26,  // 168: clusterresources.Workload.ListContainer:output_type -> clusterresources.CommonListResp
	25,  // 169: clusterresources.Workload.GetContainer:output_type -> clusterresources.CommonResp
	26,  // 170: clusterresources.Workload.GetContainerEnvInfo:output_type -> clusterresources.CommonListResp
	25,  // 171: clusterresources.Network.ListIng:output_type -> clusterresources.CommonResp
	25,  // 172: clusterresources.Network.GetIng:output_type -> clusterresources.CommonResp
	25,  // 173: clusterresources.Network.CreateIng:output_type -> clusterresources.CommonResp
	25,  // 174: clusterresources.Network.UpdateIng:output_type -> clusterresources.CommonResp
	25,  // 175: clusterresources.Network.DeleteIng:output_type -> clusterresources.CommonResp
	25,  // 176: clusterresources.Network.ListSVC:output_type -> clusterresources.CommonResp
	25,  // 177: clusterresources.Network.GetSVC:output_type -> clusterresources.CommonResp
	25,  // 178: clusterresources.Network.CreateSVC:output_type -> clusterresources.CommonResp
	25,  // 179: clusterresources.Network.UpdateSVC:output_type -> clusterresources.CommonResp
	25,  // 180: clusterresources.Network.DeleteSVC:output_type -> clusterresources.CommonResp
	25,  // 181: clusterresources.Network.ListEP:output_type -> clusterresources.CommonResp
	25,  // 182: clusterresources.Network.GetEP:output_type -> clusterresources.CommonResp
	25,  // 183: clusterresources.Network.CreateEP:output_type -> clusterresources.CommonResp
	25,  // 184: clusterresources.Network.UpdateEP:output_type -> clusterresources.CommonResp
	25,  // 185: clusterresources.Network.DeleteEP:output_type -> clusterresources.CommonResp
	25,  // 186: clusterresources.Config.ListCM:output_type -> clusterresources.CommonResp
	25,  // 187: clusterresources.Config.GetCM:output_type -> clusterresources.CommonResp
	25,  // 188: clusterresources.Config.CreateCM:output_type -> clusterresources.CommonResp
	25,  // 189: clusterresources.Config.UpdateCM:output_type -> clusterresources.CommonResp
	25,  // 190: clusterresources.Config.DeleteCM:output_type -> clusterresources.CommonResp
	25,  // 191: clusterresources.Config.ListSecret:output_type -> clusterresources.CommonResp
	25,  // 192: clusterresources.Config.GetSecret:output_type -> clusterresources.CommonResp
	25,  // 193: clusterresources.Config.CreateSecret:output_type -> clusterresources.CommonResp
	25,  // 194: clusterresources.Config.UpdateSecret:output_type -> clusterresources.CommonResp
	25,  // 195: clusterresources.Config.DeleteSecret:output_type -> clusterresources.CommonResp
	25,  // 196: clusterresources.Storage.ListPV:output_type -> clusterresources.CommonResp
	25,  // 197: clusterresources.Storage.GetPV:output_type -> clusterresources.CommonResp
	25,  // 198: clusterresources.Storage.CreatePV:output_type -> clusterresources.CommonResp
	25,  // 199: clusterresources.Storage.UpdatePV:output_type -> clusterresources.CommonResp
	25,  // 200: clusterresources.Storage.DeletePV:output_type -> clusterresources.CommonResp
	25,  // 201: clusterresources.Storage.ListPVC:output_type -> clusterresources.CommonResp
	25,  // 202: clusterresources.Storage.GetPVC:output_type -> clusterresources.CommonResp
	25,  // 203: clusterresources.Storage.CreatePVC:output_type -> clusterresources.CommonResp
	25,  // 204: clusterresources.Storage.UpdatePVC:output_type -> clusterresources.CommonResp
	25,  // 205: clusterresources.Storage.DeletePVC:output_type -> clusterresources.CommonResp
	25,  // 206: clusterresources.Storage.ListSC:output_type -> clusterresources.CommonResp
	25,  // 207: clusterresources.Storage.GetSC:output_type -> clusterresources.CommonResp
	25,  // 208: clusterresources.Storage.CreateSC:output_type -> clusterresources.CommonResp
	25,  // 209: clusterresources.Storage.UpdateSC:output_type -> clusterresources.CommonResp
	25,  // 210: clusterresources.Storage.DeleteSC:output_type -> clusterresources.CommonResp
	25,  // 211: clusterresources.RBAC.ListSA:output_type -> clusterresources.CommonResp
	25,  // 212: clusterresources.RBAC.GetSA:output_type -> clusterresources.CommonResp
	25,  // 213: clusterresources.RBAC.CreateSA:output_type -> clusterresources.CommonResp
	25,  // 214: clusterresources.RBAC.UpdateSA:output_type -> clusterresources.CommonResp
	25,  // 215: clusterresources.RBAC.DeleteSA:output_type -> clusterresources.CommonResp
	25,  // 216: clusterresources.HPA.ListHPA:output_type -> clusterresources.CommonResp
	25,  // 217: clusterresources.HPA.GetHPA:output_type -> clusterresources.CommonResp
	25,  // 218: clusterresources.HPA.CreateHPA:output_type -> clusterresources.CommonResp
	25,  // 219: clusterresources.HPA.UpdateHPA:output_type -> clusterresources.CommonResp
	25,  // 220: clusterresources.HPA.DeleteHPA:output_type -> clusterresources.CommonResp
	25,  // 221: clusterresources.CustomRes.ListCRD:output_type -> clusterresources.CommonResp
	25,  // 222: clusterresources.CustomRes.GetCRD:output_type -> clusterresources.CommonResp
	25,  // 223: clusterresources.CustomRes.ListCObj:output_type -> clusterresources.CommonResp
	25,  // 224: clusterresources.CustomRes.GetCObj:output_type -> clusterresources.CommonResp
	25,  // 225: clusterresources.CustomRes.CreateCObj:output_type -> clusterresources.CommonResp
	25,  // 226: clusterresources.CustomRes.UpdateCObj:output_type -> clusterresources.CommonResp
	25,  // 227: clusterresources.CustomRes.DeleteCObj:output_type -> clusterresources.CommonResp
	25,  // 228: clusterresources.Resource.GetK8SResTemplate:output_type -> clusterresources.CommonResp
	28,  // 229: clusterresources.Resource.Subscribe:output_type -> clusterresources.SubscribeResp
	25,  // 230: clusterresources.Resource.InvalidateDiscoveryCache:output_type -> clusterresources.CommonResp
	25,  // 231: clusterresources.Resource.FormDataRenderPreview:output_type -> clusterresources.CommonResp
	25,  // 232: clusterresources.Resource.GetResFormSchema:output_type -> clusterresources.CommonResp
	25,  // 233: clusterresources.Resource.GetFormSupportedAPIVersions:output_type -> clusterresources.CommonResp
	25,  // 234: clusterresources.Resource.GetResSelectItems:output_type -> clusterresources.CommonResp
	123, // [123:235] is the sub-list for method output_type
	11,  // [11:123] is the sub-list for method input_type
	11,  // [11:11] is the sub-list for extension type_name
	11,  // [11:11] is the sub-list for extension extendee
	0,   // [0:11] is the sub-list for field type_name
}

func init() { file_proto_cluster_resources_cluster_resources_proto_init() }
func file_proto_cluster_resources_cluster_resources_proto_init() {
	if File_proto_cluster_resources_cluster_resources_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthzReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthzResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResScaleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResBatchRescheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodResListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPoByNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerGetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK8SResTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CObjListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CObjGetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CObjCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CObjUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CObjDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidateDiscoveryCacheReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormRenderPreviewReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResFormSchemaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFormSupportedApiVersionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cluster_resources_cluster_resources_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResSelectItemsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_cluster_resources_cluster_resources_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   11,
		},
		GoTypes:           file_proto_cluster_resources_cluster_resources_proto_goTypes,
		DependencyIndexes: file_proto_cluster_resources_cluster_resources_proto_depIdxs,
		MessageInfos:      file_proto_cluster_resources_cluster_resources_proto_msgTypes,
	}.Build()
	File_proto_cluster_resources_cluster_resources_proto = out.File
	file_proto_cluster_resources_cluster_resources_proto_rawDesc = nil
	file_proto_cluster_resources_cluster_resources_proto_goTypes = nil
	file_proto_cluster_resources_cluster_resources_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BasicClient is the client API for Basic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BasicClient interface {
	Echo(ctx context.Context, in *EchoReq, opts ...grpc.CallOption) (*EchoResp, error)
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
	Healthz(ctx context.Context, in *HealthzReq, opts ...grpc.CallOption) (*HealthzResp, error)
	Version(ctx context.Context, in *VersionReq, opts ...grpc.CallOption) (*VersionResp, error)
}

type basicClient struct {
	cc grpc.ClientConnInterface
}

func NewBasicClient(cc grpc.ClientConnInterface) BasicClient {
	return &basicClient{cc}
}

func (c *basicClient) Echo(ctx context.Context, in *EchoReq, opts ...grpc.CallOption) (*EchoResp, error) {
	out := new(EchoResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Basic/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Basic/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) Healthz(ctx context.Context, in *HealthzReq, opts ...grpc.CallOption) (*HealthzResp, error) {
	out := new(HealthzResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Basic/Healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) Version(ctx context.Context, in *VersionReq, opts ...grpc.CallOption) (*VersionResp, error) {
	out := new(VersionResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Basic/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasicServer is the server API for Basic service.
type BasicServer interface {
	Echo(context.Context, *EchoReq) (*EchoResp, error)
	Ping(context.Context, *PingReq) (*PingResp, error)
	Healthz(context.Context, *HealthzReq) (*HealthzResp, error)
	Version(context.Context, *VersionReq) (*VersionResp, error)
}

// UnimplementedBasicServer can be embedded to have forward compatible implementations.
type UnimplementedBasicServer struct {
}

func (*UnimplementedBasicServer) Echo(context.Context, *EchoReq) (*EchoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedBasicServer) Ping(context.Context, *PingReq) (*PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedBasicServer) Healthz(context.Context, *HealthzReq) (*HealthzResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (*UnimplementedBasicServer) Version(context.Context, *VersionReq) (*VersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}

func RegisterBasicServer(s *grpc.Server, srv BasicServer) {
	s.RegisterService(&_Basic_serviceDesc, srv)
}

func _Basic_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Basic/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).Echo(ctx, req.(*EchoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Basic/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Basic/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).Healthz(ctx, req.(*HealthzReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Basic/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).Version(ctx, req.(*VersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Basic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Basic",
	HandlerType: (*BasicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Basic_Echo_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Basic_Ping_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _Basic_Healthz_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Basic_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster-resources/cluster-resources.proto",
}

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	ListNode(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) ListNode(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Node/ListNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
type NodeServer interface {
	ListNode(context.Context, *ResListReq) (*CommonResp, error)
}

// UnimplementedNodeServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (*UnimplementedNodeServer) ListNode(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNode not implemented")
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_ListNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Node/ListNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListNode(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNode",
			Handler:    _Node_ListNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster-resources/cluster-resources.proto",
}

// NamespaceClient is the client API for Namespace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NamespaceClient interface {
	ListNS(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type namespaceClient struct {
	cc grpc.ClientConnInterface
}

func NewNamespaceClient(cc grpc.ClientConnInterface) NamespaceClient {
	return &namespaceClient{cc}
}

func (c *namespaceClient) ListNS(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Namespace/ListNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamespaceServer is the server API for Namespace service.
type NamespaceServer interface {
	ListNS(context.Context, *ResListReq) (*CommonResp, error)
}

// UnimplementedNamespaceServer can be embedded to have forward compatible implementations.
type UnimplementedNamespaceServer struct {
}

func (*UnimplementedNamespaceServer) ListNS(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNS not implemented")
}

func RegisterNamespaceServer(s *grpc.Server, srv NamespaceServer) {
	s.RegisterService(&_Namespace_serviceDesc, srv)
}

func _Namespace_ListNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).ListNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Namespace/ListNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).ListNS(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Namespace_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Namespace",
	HandlerType: (*NamespaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNS",
			Handler:    _Namespace_ListNS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster-resources/cluster-resources.proto",
}

// WorkloadClient is the client API for Workload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkloadClient interface {
	ListDeploy(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetDeploy(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateDeploy(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateDeploy(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	ScaleDeploy(ctx context.Context, in *ResScaleReq, opts ...grpc.CallOption) (*CommonResp, error)
	RescheduleDeployPo(ctx context.Context, in *ResBatchRescheduleReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteDeploy(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListDS(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetDS(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateDS(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateDS(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteDS(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListSTS(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetSTS(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateSTS(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateSTS(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	ScaleSTS(ctx context.Context, in *ResScaleReq, opts ...grpc.CallOption) (*CommonResp, error)
	RescheduleSTSPo(ctx context.Context, in *ResBatchRescheduleReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteSTS(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListCJ(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetCJ(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateCJ(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateCJ(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteCJ(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListJob(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetJob(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateJob(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateJob(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteJob(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListPo(ctx context.Context, in *PodResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListPoByNode(ctx context.Context, in *ListPoByNodeReq, opts ...grpc.CallOption) (*CommonListResp, error)
	GetPo(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreatePo(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdatePo(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeletePo(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListPoPVC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListPoCM(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListPoSecret(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	ReschedulePo(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListContainer(ctx context.Context, in *ContainerListReq, opts ...grpc.CallOption) (*CommonListResp, error)
	GetContainer(ctx context.Context, in *ContainerGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetContainerEnvInfo(ctx context.Context, in *ContainerGetReq, opts ...grpc.CallOption) (*CommonListResp, error)
}

type workloadClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkloadClient(cc grpc.ClientConnInterface) WorkloadClient {
	return &workloadClient{cc}
}

func (c *workloadClient) ListDeploy(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetDeploy(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) CreateDeploy(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/CreateDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) UpdateDeploy(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/UpdateDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ScaleDeploy(ctx context.Context, in *ResScaleReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ScaleDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) RescheduleDeployPo(ctx context.Context, in *ResBatchRescheduleReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/RescheduleDeployPo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) DeleteDeploy(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/DeleteDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListDS(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetDS(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) CreateDS(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/CreateDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) UpdateDS(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/UpdateDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) DeleteDS(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/DeleteDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListSTS(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListSTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetSTS(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetSTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) CreateSTS(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/CreateSTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) UpdateSTS(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/UpdateSTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ScaleSTS(ctx context.Context, in *ResScaleReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ScaleSTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) RescheduleSTSPo(ctx context.Context, in *ResBatchRescheduleReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/RescheduleSTSPo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) DeleteSTS(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/DeleteSTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListCJ(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListCJ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetCJ(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetCJ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) CreateCJ(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/CreateCJ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) UpdateCJ(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/UpdateCJ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) DeleteCJ(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/DeleteCJ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListJob(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetJob(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) CreateJob(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/CreateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) UpdateJob(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/UpdateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) DeleteJob(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/DeleteJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListPo(ctx context.Context, in *PodResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListPo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListPoByNode(ctx context.Context, in *ListPoByNodeReq, opts ...grpc.CallOption) (*CommonListResp, error) {
	out := new(CommonListResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListPoByNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetPo(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetPo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) CreatePo(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/CreatePo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) UpdatePo(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/UpdatePo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) DeletePo(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/DeletePo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListPoPVC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListPoPVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListPoCM(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListPoCM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListPoSecret(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListPoSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ReschedulePo(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ReschedulePo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListContainer(ctx context.Context, in *ContainerListReq, opts ...grpc.CallOption) (*CommonListResp, error) {
	out := new(CommonListResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetContainer(ctx context.Context, in *ContainerGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetContainerEnvInfo(ctx context.Context, in *ContainerGetReq, opts ...grpc.CallOption) (*CommonListResp, error) {
	out := new(CommonListResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetContainerEnvInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkloadServer is the server API for Workload service.
type WorkloadServer interface {
	ListDeploy(context.Context, *ResListReq) (*CommonResp, error)
	GetDeploy(context.Context, *ResGetReq) (*CommonResp, error)
	CreateDeploy(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateDeploy(context.Context, *ResUpdateReq) (*CommonResp, error)
	ScaleDeploy(context.Context, *ResScaleReq) (*CommonResp, error)
	RescheduleDeployPo(context.Context, *ResBatchRescheduleReq) (*CommonResp, error)
	DeleteDeploy(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListDS(context.Context, *ResListReq) (*CommonResp, error)
	GetDS(context.Context, *ResGetReq) (*CommonResp, error)
	CreateDS(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateDS(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteDS(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListSTS(context.Context, *ResListReq) (*CommonResp, error)
	GetSTS(context.Context, *ResGetReq) (*CommonResp, error)
	CreateSTS(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateSTS(context.Context, *ResUpdateReq) (*CommonResp, error)
	ScaleSTS(context.Context, *ResScaleReq) (*CommonResp, error)
	RescheduleSTSPo(context.Context, *ResBatchRescheduleReq) (*CommonResp, error)
	DeleteSTS(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListCJ(context.Context, *ResListReq) (*CommonResp, error)
	GetCJ(context.Context, *ResGetReq) (*CommonResp, error)
	CreateCJ(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateCJ(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteCJ(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListJob(context.Context, *ResListReq) (*CommonResp, error)
	GetJob(context.Context, *ResGetReq) (*CommonResp, error)
	CreateJob(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateJob(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteJob(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListPo(context.Context, *PodResListReq) (*CommonResp, error)
	ListPoByNode(context.Context, *ListPoByNodeReq) (*CommonListResp, error)
	GetPo(context.Context, *ResGetReq) (*CommonResp, error)
	CreatePo(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdatePo(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeletePo(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListPoPVC(context.Context, *ResGetReq) (*CommonResp, error)
	ListPoCM(context.Context, *ResGetReq) (*CommonResp, error)
	ListPoSecret(context.Context, *ResGetReq) (*CommonResp, error)
	ReschedulePo(context.Context, *ResUpdateReq) (*CommonResp, error)
	ListContainer(context.Context, *ContainerListReq) (*CommonListResp, error)
	GetContainer(context.Context, *ContainerGetReq) (*CommonResp, error)
	GetContainerEnvInfo(context.Context, *ContainerGetReq) (*CommonListResp, error)
}

// UnimplementedWorkloadServer can be embedded to have forward compatible implementations.
type UnimplementedWorkloadServer struct {
}

func (*UnimplementedWorkloadServer) ListDeploy(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeploy not implemented")
}
func (*UnimplementedWorkloadServer) GetDeploy(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploy not implemented")
}
func (*UnimplementedWorkloadServer) CreateDeploy(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeploy not implemented")
}
func (*UnimplementedWorkloadServer) UpdateDeploy(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeploy not implemented")
}
func (*UnimplementedWorkloadServer) ScaleDeploy(context.Context, *ResScaleReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleDeploy not implemented")
}
func (*UnimplementedWorkloadServer) RescheduleDeployPo(context.Context, *ResBatchRescheduleReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RescheduleDeployPo not implemented")
}
func (*UnimplementedWorkloadServer) DeleteDeploy(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeploy not implemented")
}
func (*UnimplementedWorkloadServer) ListDS(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDS not implemented")
}
func (*UnimplementedWorkloadServer) GetDS(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDS not implemented")
}
func (*UnimplementedWorkloadServer) CreateDS(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDS not implemented")
}
func (*UnimplementedWorkloadServer) UpdateDS(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDS not implemented")
}
func (*UnimplementedWorkloadServer) DeleteDS(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDS not implemented")
}
func (*UnimplementedWorkloadServer) ListSTS(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSTS not implemented")
}
func (*UnimplementedWorkloadServer) GetSTS(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSTS not implemented")
}
func (*UnimplementedWorkloadServer) CreateSTS(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSTS not implemented")
}
func (*UnimplementedWorkloadServer) UpdateSTS(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSTS not implemented")
}
func (*UnimplementedWorkloadServer) ScaleSTS(context.Context, *ResScaleReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleSTS not implemented")
}
func (*UnimplementedWorkloadServer) RescheduleSTSPo(context.Context, *ResBatchRescheduleReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RescheduleSTSPo not implemented")
}
func (*UnimplementedWorkloadServer) DeleteSTS(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSTS not implemented")
}
func (*UnimplementedWorkloadServer) ListCJ(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCJ not implemented")
}
func (*UnimplementedWorkloadServer) GetCJ(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCJ not implemented")
}
func (*UnimplementedWorkloadServer) CreateCJ(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCJ not implemented")
}
func (*UnimplementedWorkloadServer) UpdateCJ(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCJ not implemented")
}
func (*UnimplementedWorkloadServer) DeleteCJ(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCJ not implemented")
}
func (*UnimplementedWorkloadServer) ListJob(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJob not implemented")
}
func (*UnimplementedWorkloadServer) GetJob(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (*UnimplementedWorkloadServer) CreateJob(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (*UnimplementedWorkloadServer) UpdateJob(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJob not implemented")
}
func (*UnimplementedWorkloadServer) DeleteJob(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (*UnimplementedWorkloadServer) ListPo(context.Context, *PodResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPo not implemented")
}
func (*UnimplementedWorkloadServer) ListPoByNode(context.Context, *ListPoByNodeReq) (*CommonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPoByNode not implemented")
}
func (*UnimplementedWorkloadServer) GetPo(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPo not implemented")
}
func (*UnimplementedWorkloadServer) CreatePo(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePo not implemented")
}
func (*UnimplementedWorkloadServer) UpdatePo(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePo not implemented")
}
func (*UnimplementedWorkloadServer) DeletePo(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePo not implemented")
}
func (*UnimplementedWorkloadServer) ListPoPVC(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPoPVC not implemented")
}
func (*UnimplementedWorkloadServer) ListPoCM(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPoCM not implemented")
}
func (*UnimplementedWorkloadServer) ListPoSecret(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPoSecret not implemented")
}
func (*UnimplementedWorkloadServer) ReschedulePo(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReschedulePo not implemented")
}
func (*UnimplementedWorkloadServer) ListContainer(context.Context, *ContainerListReq) (*CommonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContainer not implemented")
}
func (*UnimplementedWorkloadServer) GetContainer(context.Context, *ContainerGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainer not implemented")
}
func (*UnimplementedWorkloadServer) GetContainerEnvInfo(context.Context, *ContainerGetReq) (*CommonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerEnvInfo not implemented")
}

func RegisterWorkloadServer(s *grpc.Server, srv WorkloadServer) {
	s.RegisterService(&_Workload_serviceDesc, srv)
}

func _Workload_ListDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListDeploy(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetDeploy(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_CreateDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).CreateDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/CreateDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).CreateDeploy(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_UpdateDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).UpdateDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/UpdateDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).UpdateDeploy(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ScaleDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResScaleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ScaleDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ScaleDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ScaleDeploy(ctx, req.(*ResScaleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_RescheduleDeployPo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResBatchRescheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).RescheduleDeployPo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/RescheduleDeployPo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).RescheduleDeployPo(ctx, req.(*ResBatchRescheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_DeleteDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).DeleteDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/DeleteDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).DeleteDeploy(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListDS(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetDS(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_CreateDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).CreateDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/CreateDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).CreateDS(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_UpdateDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).UpdateDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/UpdateDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).UpdateDS(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_DeleteDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).DeleteDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/DeleteDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).DeleteDS(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListSTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListSTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListSTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListSTS(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetSTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetSTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetSTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetSTS(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_CreateSTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).CreateSTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/CreateSTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).CreateSTS(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_UpdateSTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).UpdateSTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/UpdateSTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).UpdateSTS(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ScaleSTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResScaleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ScaleSTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ScaleSTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ScaleSTS(ctx, req.(*ResScaleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_RescheduleSTSPo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResBatchRescheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).RescheduleSTSPo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/RescheduleSTSPo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).RescheduleSTSPo(ctx, req.(*ResBatchRescheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_DeleteSTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).DeleteSTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/DeleteSTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).DeleteSTS(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListCJ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListCJ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListCJ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListCJ(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetCJ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetCJ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetCJ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetCJ(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_CreateCJ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).CreateCJ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/CreateCJ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).CreateCJ(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_UpdateCJ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).UpdateCJ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/UpdateCJ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).UpdateCJ(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_DeleteCJ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).DeleteCJ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/DeleteCJ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).DeleteCJ(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListJob(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetJob(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).CreateJob(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/UpdateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).UpdateJob(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/DeleteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).DeleteJob(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListPo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListPo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListPo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListPo(ctx, req.(*PodResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListPoByNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoByNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListPoByNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListPoByNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListPoByNode(ctx, req.(*ListPoByNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetPo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetPo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetPo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetPo(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_CreatePo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).CreatePo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/CreatePo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).CreatePo(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_UpdatePo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).UpdatePo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/UpdatePo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).UpdatePo(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_DeletePo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).DeletePo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/DeletePo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).DeletePo(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListPoPVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListPoPVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListPoPVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListPoPVC(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListPoCM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListPoCM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListPoCM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListPoCM(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListPoSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListPoSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListPoSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListPoSecret(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ReschedulePo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ReschedulePo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ReschedulePo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ReschedulePo(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListContainer(ctx, req.(*ContainerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetContainer(ctx, req.(*ContainerGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetContainerEnvInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetContainerEnvInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetContainerEnvInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetContainerEnvInfo(ctx, req.(*ContainerGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Workload_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Workload",
	HandlerType: (*WorkloadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDeploy",
			Handler:    _Workload_ListDeploy_Handler,
		},
		{
			MethodName: "GetDeploy",
			Handler:    _Workload_GetDeploy_Handler,
		},
		{
			MethodName: "CreateDeploy",
			Handler:    _Workload_CreateDeploy_Handler,
		},
		{
			MethodName: "UpdateDeploy",
			Handler:    _Workload_UpdateDeploy_Handler,
		},
		{
			MethodName: "ScaleDeploy",
			Handler:    _Workload_ScaleDeploy_Handler,
		},
		{
			MethodName: "RescheduleDeployPo",
			Handler:    _Workload_RescheduleDeployPo_Handler,
		},
		{
			MethodName: "DeleteDeploy",
			Handler:    _Workload_DeleteDeploy_Handler,
		},
		{
			MethodName: "ListDS",
			Handler:    _Workload_ListDS_Handler,
		},
		{
			MethodName: "GetDS",
			Handler:    _Workload_GetDS_Handler,
		},
		{
			MethodName: "CreateDS",
			Handler:    _Workload_CreateDS_Handler,
		},
		{
			MethodName: "UpdateDS",
			Handler:    _Workload_UpdateDS_Handler,
		},
		{
			MethodName: "DeleteDS",
			Handler:    _Workload_DeleteDS_Handler,
		},
		{
			MethodName: "ListSTS",
			Handler:    _Workload_ListSTS_Handler,
		},
		{
			MethodName: "GetSTS",
			Handler:    _Workload_GetSTS_Handler,
		},
		{
			MethodName: "CreateSTS",
			Handler:    _Workload_CreateSTS_Handler,
		},
		{
			MethodName: "UpdateSTS",
			Handler:    _Workload_UpdateSTS_Handler,
		},
		{
			MethodName: "ScaleSTS",
			Handler:    _Workload_ScaleSTS_Handler,
		},
		{
			MethodName: "RescheduleSTSPo",
			Handler:    _Workload_RescheduleSTSPo_Handler,
		},
		{
			MethodName: "DeleteSTS",
			Handler:    _Workload_DeleteSTS_Handler,
		},
		{
			MethodName: "ListCJ",
			Handler:    _Workload_ListCJ_Handler,
		},
		{
			MethodName: "GetCJ",
			Handler:    _Workload_GetCJ_Handler,
		},
		{
			MethodName: "CreateCJ",
			Handler:    _Workload_CreateCJ_Handler,
		},
		{
			MethodName: "UpdateCJ",
			Handler:    _Workload_UpdateCJ_Handler,
		},
		{
			MethodName: "DeleteCJ",
			Handler:    _Workload_DeleteCJ_Handler,
		},
		{
			MethodName: "ListJob",
			Handler:    _Workload_ListJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _Workload_GetJob_Handler,
		},
		{
			MethodName: "CreateJob",
			Handler:    _Workload_CreateJob_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _Workload_UpdateJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _Workload_DeleteJob_Handler,
		},
		{
			MethodName: "ListPo",
			Handler:    _Workload_ListPo_Handler,
		},
		{
			MethodName: "ListPoByNode",
			Handler:    _Workload_ListPoByNode_Handler,
		},
		{
			MethodName: "GetPo",
			Handler:    _Workload_GetPo_Handler,
		},
		{
			MethodName: "CreatePo",
			Handler:    _Workload_CreatePo_Handler,
		},
		{
			MethodName: "UpdatePo",
			Handler:    _Workload_UpdatePo_Handler,
		},
		{
			MethodName: "DeletePo",
			Handler:    _Workload_DeletePo_Handler,
		},
		{
			MethodName: "ListPoPVC",
			Handler:    _Workload_ListPoPVC_Handler,
		},
		{
			MethodName: "ListPoCM",
			Handler:    _Workload_ListPoCM_Handler,
		},
		{
			MethodName: "ListPoSecret",
			Handler:    _Workload_ListPoSecret_Handler,
		},
		{
			MethodName: "ReschedulePo",
			Handler:    _Workload_ReschedulePo_Handler,
		},
		{
			MethodName: "ListContainer",
			Handler:    _Workload_ListContainer_Handler,
		},
		{
			MethodName: "GetContainer",
			Handler:    _Workload_GetContainer_Handler,
		},
		{
			MethodName: "GetContainerEnvInfo",
			Handler:    _Workload_GetContainerEnvInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster-resources/cluster-resources.proto",
}

// NetworkClient is the client API for Network service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkClient interface {
	ListIng(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetIng(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateIng(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateIng(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteIng(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListSVC(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetSVC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateSVC(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateSVC(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteSVC(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListEP(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetEP(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateEP(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateEP(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteEP(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type networkClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkClient(cc grpc.ClientConnInterface) NetworkClient {
	return &networkClient{cc}
}

func (c *networkClient) ListIng(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/ListIng", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetIng(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/GetIng", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) CreateIng(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/CreateIng", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) UpdateIng(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/UpdateIng", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) DeleteIng(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/DeleteIng", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) ListSVC(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/ListSVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetSVC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/GetSVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) CreateSVC(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/CreateSVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) UpdateSVC(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/UpdateSVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) DeleteSVC(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/DeleteSVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) ListEP(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/ListEP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetEP(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/GetEP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) CreateEP(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/CreateEP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) UpdateEP(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/UpdateEP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) DeleteEP(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/DeleteEP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServer is the server API for Network service.
type NetworkServer interface {
	ListIng(context.Context, *ResListReq) (*CommonResp, error)
	GetIng(context.Context, *ResGetReq) (*CommonResp, error)
	CreateIng(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateIng(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteIng(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListSVC(context.Context, *ResListReq) (*CommonResp, error)
	GetSVC(context.Context, *ResGetReq) (*CommonResp, error)
	CreateSVC(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateSVC(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteSVC(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListEP(context.Context, *ResListReq) (*CommonResp, error)
	GetEP(context.Context, *ResGetReq) (*CommonResp, error)
	CreateEP(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateEP(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteEP(context.Context, *ResDeleteReq) (*CommonResp, error)
}

// UnimplementedNetworkServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkServer struct {
}

func (*UnimplementedNetworkServer) ListIng(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIng not implemented")
}
func (*UnimplementedNetworkServer) GetIng(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIng not implemented")
}
func (*UnimplementedNetworkServer) CreateIng(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIng not implemented")
}
func (*UnimplementedNetworkServer) UpdateIng(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIng not implemented")
}
func (*UnimplementedNetworkServer) DeleteIng(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIng not implemented")
}
func (*UnimplementedNetworkServer) ListSVC(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSVC not implemented")
}
func (*UnimplementedNetworkServer) GetSVC(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSVC not implemented")
}
func (*UnimplementedNetworkServer) CreateSVC(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSVC not implemented")
}
func (*UnimplementedNetworkServer) UpdateSVC(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSVC not implemented")
}
func (*UnimplementedNetworkServer) DeleteSVC(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSVC not implemented")
}
func (*UnimplementedNetworkServer) ListEP(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEP not implemented")
}
func (*UnimplementedNetworkServer) GetEP(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEP not implemented")
}
func (*UnimplementedNetworkServer) CreateEP(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEP not implemented")
}
func (*UnimplementedNetworkServer) UpdateEP(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEP not implemented")
}
func (*UnimplementedNetworkServer) DeleteEP(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEP not implemented")
}

func RegisterNetworkServer(s *grpc.Server, srv NetworkServer) {
	s.RegisterService(&_Network_serviceDesc, srv)
}

func _Network_ListIng_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).ListIng(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/ListIng",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).ListIng(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetIng_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetIng(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/GetIng",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetIng(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_CreateIng_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).CreateIng(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/CreateIng",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).CreateIng(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_UpdateIng_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).UpdateIng(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/UpdateIng",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).UpdateIng(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_DeleteIng_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).DeleteIng(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/DeleteIng",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).DeleteIng(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_ListSVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).ListSVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/ListSVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).ListSVC(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetSVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetSVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/GetSVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetSVC(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_CreateSVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).CreateSVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/CreateSVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).CreateSVC(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_UpdateSVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).UpdateSVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/UpdateSVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).UpdateSVC(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_DeleteSVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).DeleteSVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/DeleteSVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).DeleteSVC(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_ListEP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).ListEP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/ListEP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).ListEP(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetEP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetEP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/GetEP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetEP(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_CreateEP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).CreateEP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/CreateEP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).CreateEP(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_UpdateEP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).UpdateEP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/UpdateEP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).UpdateEP(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_DeleteEP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).DeleteEP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/DeleteEP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).DeleteEP(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Network_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Network",
	HandlerType: (*NetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIng",
			Handler:    _Network_ListIng_Handler,
		},
		{
			MethodName: "GetIng",
			Handler:    _Network_GetIng_Handler,
		},
		{
			MethodName: "CreateIng",
			Handler:    _Network_CreateIng_Handler,
		},
		{
			MethodName: "UpdateIng",
			Handler:    _Network_UpdateIng_Handler,
		},
		{
			MethodName: "DeleteIng",
			Handler:    _Network_DeleteIng_Handler,
		},
		{
			MethodName: "ListSVC",
			Handler:    _Network_ListSVC_Handler,
		},
		{
			MethodName: "GetSVC",
			Handler:    _Network_GetSVC_Handler,
		},
		{
			MethodName: "CreateSVC",
			Handler:    _Network_CreateSVC_Handler,
		},
		{
			MethodName: "UpdateSVC",
			Handler:    _Network_UpdateSVC_Handler,
		},
		{
			MethodName: "DeleteSVC",
			Handler:    _Network_DeleteSVC_Handler,
		},
		{
			MethodName: "ListEP",
			Handler:    _Network_ListEP_Handler,
		},
		{
			MethodName: "GetEP",
			Handler:    _Network_GetEP_Handler,
		},
		{
			MethodName: "CreateEP",
			Handler:    _Network_CreateEP_Handler,
		},
		{
			MethodName: "UpdateEP",
			Handler:    _Network_UpdateEP_Handler,
		},
		{
			MethodName: "DeleteEP",
			Handler:    _Network_DeleteEP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster-resources/cluster-resources.proto",
}

// ConfigClient is the client API for Config service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigClient interface {
	ListCM(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetCM(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateCM(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateCM(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteCM(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListSecret(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetSecret(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateSecret(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateSecret(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteSecret(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type configClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigClient(cc grpc.ClientConnInterface) ConfigClient {
	return &configClient{cc}
}

func (c *configClient) ListCM(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/ListCM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetCM(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/GetCM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateCM(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/CreateCM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateCM(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/UpdateCM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteCM(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/DeleteCM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListSecret(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/ListSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetSecret(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/GetSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateSecret(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/CreateSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateSecret(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/UpdateSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteSecret(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/DeleteSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServer is the server API for Config service.
type ConfigServer interface {
	ListCM(context.Context, *ResListReq) (*CommonResp, error)
	GetCM(context.Context, *ResGetReq) (*CommonResp, error)
	CreateCM(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateCM(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteCM(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListSecret(context.Context, *ResListReq) (*CommonResp, error)
	GetSecret(context.Context, *ResGetReq) (*CommonResp, error)
	CreateSecret(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateSecret(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteSecret(context.Context, *ResDeleteReq) (*CommonResp, error)
}

// UnimplementedConfigServer can be embedded to have forward compatible implementations.
type UnimplementedConfigServer struct {
}

func (*UnimplementedConfigServer) ListCM(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCM not implemented")
}
func (*UnimplementedConfigServer) GetCM(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCM not implemented")
}
func (*UnimplementedConfigServer) CreateCM(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCM not implemented")
}
func (*UnimplementedConfigServer) UpdateCM(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCM not implemented")
}
func (*UnimplementedConfigServer) DeleteCM(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCM not implemented")
}
func (*UnimplementedConfigServer) ListSecret(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecret not implemented")
}
func (*UnimplementedConfigServer) GetSecret(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (*UnimplementedConfigServer) CreateSecret(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecret not implemented")
}
func (*UnimplementedConfigServer) UpdateSecret(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecret not implemented")
}
func (*UnimplementedConfigServer) DeleteSecret(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}

func RegisterConfigServer(s *grpc.Server, srv ConfigServer) {
	s.RegisterService(&_Config_serviceDesc, srv)
}

func _Config_ListCM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListCM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/ListCM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListCM(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetCM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetCM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/GetCM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetCM(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateCM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateCM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/CreateCM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateCM(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateCM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateCM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/UpdateCM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateCM(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteCM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteCM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/DeleteCM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteCM(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/ListSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListSecret(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/GetSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetSecret(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/CreateSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateSecret(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/UpdateSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateSecret(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/DeleteSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteSecret(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Config_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Config",
	HandlerType: (*ConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCM",
			Handler:    _Config_ListCM_Handler,
		},
		{
			MethodName: "GetCM",
			Handler:    _Config_GetCM_Handler,
		},
		{
			MethodName: "CreateCM",
			Handler:    _Config_CreateCM_Handler,
		},
		{
			MethodName: "UpdateCM",
			Handler:    _Config_UpdateCM_Handler,
		},
		{
			MethodName: "DeleteCM",
			Handler:    _Config_DeleteCM_Handler,
		},
		{
			MethodName: "ListSecret",
			Handler:    _Config_ListSecret_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _Config_GetSecret_Handler,
		},
		{
			MethodName: "CreateSecret",
			Handler:    _Config_CreateSecret_Handler,
		},
		{
			MethodName: "UpdateSecret",
			Handler:    _Config_UpdateSecret_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _Config_DeleteSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster-resources/cluster-resources.proto",
}

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StorageClient interface {
	ListPV(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetPV(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreatePV(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdatePV(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeletePV(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListPVC(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetPVC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreatePVC(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdatePVC(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeletePVC(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListSC(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetSC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateSC(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateSC(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteSC(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type storageClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageClient(cc grpc.ClientConnInterface) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) ListPV(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/ListPV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetPV(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/GetPV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) CreatePV(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/CreatePV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) UpdatePV(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/UpdatePV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeletePV(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/DeletePV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ListPVC(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/ListPVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetPVC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/GetPVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) CreatePVC(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/CreatePVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) UpdatePVC(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/UpdatePVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeletePVC(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/DeletePVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ListSC(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/ListSC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetSC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/GetSC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) CreateSC(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/CreateSC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) UpdateSC(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/UpdateSC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteSC(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/DeleteSC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
type StorageServer interface {
	ListPV(context.Context, *ResListReq) (*CommonResp, error)
	GetPV(context.Context, *ResGetReq) (*CommonResp, error)
	CreatePV(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdatePV(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeletePV(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListPVC(context.Context, *ResListReq) (*CommonResp, error)
	GetPVC(context.Context, *ResGetReq) (*CommonResp, error)
	CreatePVC(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdatePVC(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeletePVC(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListSC(context.Context, *ResListReq) (*CommonResp, error)
	GetSC(context.Context, *ResGetReq) (*CommonResp, error)
	CreateSC(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateSC(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteSC(context.Context, *ResDeleteReq) (*CommonResp, error)
}

// UnimplementedStorageServer can be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (*UnimplementedStorageServer) ListPV(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPV not implemented")
}
func (*UnimplementedStorageServer) GetPV(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPV not implemented")
}
func (*UnimplementedStorageServer) CreatePV(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePV not implemented")
}
func (*UnimplementedStorageServer) UpdatePV(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePV not implemented")
}
func (*UnimplementedStorageServer) DeletePV(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePV not implemented")
}
func (*UnimplementedStorageServer) ListPVC(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPVC not implemented")
}
func (*UnimplementedStorageServer) GetPVC(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPVC not implemented")
}
func (*UnimplementedStorageServer) CreatePVC(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePVC not implemented")
}
func (*UnimplementedStorageServer) UpdatePVC(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePVC not implemented")
}
func (*UnimplementedStorageServer) DeletePVC(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePVC not implemented")
}
func (*UnimplementedStorageServer) ListSC(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSC not implemented")
}
func (*UnimplementedStorageServer) GetSC(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSC not implemented")
}
func (*UnimplementedStorageServer) CreateSC(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSC not implemented")
}
func (*UnimplementedStorageServer) UpdateSC(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSC not implemented")
}
func (*UnimplementedStorageServer) DeleteSC(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSC not implemented")
}

func RegisterStorageServer(s *grpc.Server, srv StorageServer) {
	s.RegisterService(&_Storage_serviceDesc, srv)
}

func _Storage_ListPV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ListPV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/ListPV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ListPV(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetPV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetPV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/GetPV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetPV(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_CreatePV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).CreatePV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/CreatePV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).CreatePV(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_UpdatePV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).UpdatePV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/UpdatePV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).UpdatePV(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeletePV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeletePV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/DeletePV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeletePV(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ListPVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ListPVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/ListPVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ListPVC(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetPVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetPVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/GetPVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetPVC(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_CreatePVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).CreatePVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/CreatePVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).CreatePVC(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_UpdatePVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).UpdatePVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/UpdatePVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).UpdatePVC(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeletePVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeletePVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/DeletePVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeletePVC(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ListSC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ListSC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/ListSC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ListSC(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetSC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetSC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/GetSC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetSC(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_CreateSC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).CreateSC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/CreateSC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).CreateSC(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_UpdateSC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).UpdateSC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/UpdateSC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).UpdateSC(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteSC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteSC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/DeleteSC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteSC(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Storage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPV",
			Handler:    _Storage_ListPV_Handler,
		},
		{
			MethodName: "GetPV",
			Handler:    _Storage_GetPV_Handler,
		},
		{
			MethodName: "CreatePV",
			Handler:    _Storage_CreatePV_Handler,
		},
		{
			MethodName: "UpdatePV",
			Handler:    _Storage_UpdatePV_Handler,
		},
		{
			MethodName: "DeletePV",
			Handler:    _Storage_DeletePV_Handler,
		},
		{
			MethodName: "ListPVC",
			Handler:    _Storage_ListPVC_Handler,
		},
		{
			MethodName: "GetPVC",
			Handler:    _Storage_GetPVC_Handler,
		},
		{
			MethodName: "CreatePVC",
			Handler:    _Storage_CreatePVC_Handler,
		},
		{
			MethodName: "UpdatePVC",
			Handler:    _Storage_UpdatePVC_Handler,
		},
		{
			MethodName: "DeletePVC",
			Handler:    _Storage_DeletePVC_Handler,
		},
		{
			MethodName: "ListSC",
			Handler:    _Storage_ListSC_Handler,
		},
		{
			MethodName: "GetSC",
			Handler:    _Storage_GetSC_Handler,
		},
		{
			MethodName: "CreateSC",
			Handler:    _Storage_CreateSC_Handler,
		},
		{
			MethodName: "UpdateSC",
			Handler:    _Storage_UpdateSC_Handler,
		},
		{
			MethodName: "DeleteSC",
			Handler:    _Storage_DeleteSC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster-resources/cluster-resources.proto",
}

// RBACClient is the client API for RBAC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RBACClient interface {
	ListSA(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetSA(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateSA(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateSA(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteSA(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type rBACClient struct {
	cc grpc.ClientConnInterface
}

func NewRBACClient(cc grpc.ClientConnInterface) RBACClient {
	return &rBACClient{cc}
}

func (c *rBACClient) ListSA(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.RBAC/ListSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) GetSA(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.RBAC/GetSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) CreateSA(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.RBAC/CreateSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) UpdateSA(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.RBAC/UpdateSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) DeleteSA(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.RBAC/DeleteSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RBACServer is the server API for RBAC service.
type RBACServer interface {
	ListSA(context.Context, *ResListReq) (*CommonResp, error)
	GetSA(context.Context, *ResGetReq) (*CommonResp, error)
	CreateSA(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateSA(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteSA(context.Context, *ResDeleteReq) (*CommonResp, error)
}

// UnimplementedRBACServer can be embedded to have forward compatible implementations.
type UnimplementedRBACServer struct {
}

func (*UnimplementedRBACServer) ListSA(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSA not implemented")
}
func (*UnimplementedRBACServer) GetSA(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSA not implemented")
}
func (*UnimplementedRBACServer) CreateSA(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSA not implemented")
}
func (*UnimplementedRBACServer) UpdateSA(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSA not implemented")
}
func (*UnimplementedRBACServer) DeleteSA(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSA not implemented")
}

func RegisterRBACServer(s *grpc.Server, srv RBACServer) {
	s.RegisterService(&_RBAC_serviceDesc, srv)
}

func _RBAC_ListSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).ListSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.RBAC/ListSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).ListSA(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_GetSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).GetSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.RBAC/GetSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).GetSA(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_CreateSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).CreateSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.RBAC/CreateSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).CreateSA(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_UpdateSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).UpdateSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.RBAC/UpdateSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).UpdateSA(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_DeleteSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).DeleteSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.RBAC/DeleteSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).DeleteSA(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RBAC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.RBAC",
	HandlerType: (*RBACServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSA",
			Handler:    _RBAC_ListSA_Handler,
		},
		{
			MethodName: "GetSA",
			Handler:    _RBAC_GetSA_Handler,
		},
		{
			MethodName: "CreateSA",
			Handler:    _RBAC_CreateSA_Handler,
		},
		{
			MethodName: "UpdateSA",
			Handler:    _RBAC_UpdateSA_Handler,
		},
		{
			MethodName: "DeleteSA",
			Handler:    _RBAC_DeleteSA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster-resources/cluster-resources.proto",
}

// HPAClient is the client API for HPA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HPAClient interface {
	ListHPA(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetHPA(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateHPA(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateHPA(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteHPA(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type hPAClient struct {
	cc grpc.ClientConnInterface
}

func NewHPAClient(cc grpc.ClientConnInterface) HPAClient {
	return &hPAClient{cc}
}

func (c *hPAClient) ListHPA(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.HPA/ListHPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPAClient) GetHPA(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.HPA/GetHPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPAClient) CreateHPA(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.HPA/CreateHPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPAClient) UpdateHPA(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.HPA/UpdateHPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPAClient) DeleteHPA(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.HPA/DeleteHPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HPAServer is the server API for HPA service.
type HPAServer interface {
	ListHPA(context.Context, *ResListReq) (*CommonResp, error)
	GetHPA(context.Context, *ResGetReq) (*CommonResp, error)
	CreateHPA(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateHPA(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteHPA(context.Context, *ResDeleteReq) (*CommonResp, error)
}

// UnimplementedHPAServer can be embedded to have forward compatible implementations.
type UnimplementedHPAServer struct {
}

func (*UnimplementedHPAServer) ListHPA(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHPA not implemented")
}
func (*UnimplementedHPAServer) GetHPA(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHPA not implemented")
}
func (*UnimplementedHPAServer) CreateHPA(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHPA not implemented")
}
func (*UnimplementedHPAServer) UpdateHPA(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHPA not implemented")
}
func (*UnimplementedHPAServer) DeleteHPA(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHPA not implemented")
}

func RegisterHPAServer(s *grpc.Server, srv HPAServer) {
	s.RegisterService(&_HPA_serviceDesc, srv)
}

func _HPA_ListHPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPAServer).ListHPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.HPA/ListHPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPAServer).ListHPA(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPA_GetHPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPAServer).GetHPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.HPA/GetHPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPAServer).GetHPA(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPA_CreateHPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPAServer).CreateHPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.HPA/CreateHPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPAServer).CreateHPA(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPA_UpdateHPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPAServer).UpdateHPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.HPA/UpdateHPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPAServer).UpdateHPA(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPA_DeleteHPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPAServer).DeleteHPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.HPA/DeleteHPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPAServer).DeleteHPA(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _HPA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.HPA",
	HandlerType: (*HPAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHPA",
			Handler:    _HPA_ListHPA_Handler,
		},
		{
			MethodName: "GetHPA",
			Handler:    _HPA_GetHPA_Handler,
		},
		{
			MethodName: "CreateHPA",
			Handler:    _HPA_CreateHPA_Handler,
		},
		{
			MethodName: "UpdateHPA",
			Handler:    _HPA_UpdateHPA_Handler,
		},
		{
			MethodName: "DeleteHPA",
			Handler:    _HPA_DeleteHPA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster-resources/cluster-resources.proto",
}

// CustomResClient is the client API for CustomRes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomResClient interface {
	ListCRD(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetCRD(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListCObj(ctx context.Context, in *CObjListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetCObj(ctx context.Context, in *CObjGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateCObj(ctx context.Context, in *CObjCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateCObj(ctx context.Context, in *CObjUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteCObj(ctx context.Context, in *CObjDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type customResClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomResClient(cc grpc.ClientConnInterface) CustomResClient {
	return &customResClient{cc}
}

func (c *customResClient) ListCRD(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/ListCRD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) GetCRD(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/GetCRD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) ListCObj(ctx context.Context, in *CObjListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/ListCObj", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) GetCObj(ctx context.Context, in *CObjGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/GetCObj", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) CreateCObj(ctx context.Context, in *CObjCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/CreateCObj", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) UpdateCObj(ctx context.Context, in *CObjUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/UpdateCObj", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) DeleteCObj(ctx context.Context, in *CObjDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/DeleteCObj", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomResServer is the server API for CustomRes service.
type CustomResServer interface {
	ListCRD(context.Context, *ResListReq) (*CommonResp, error)
	GetCRD(context.Context, *ResGetReq) (*CommonResp, error)
	ListCObj(context.Context, *CObjListReq) (*CommonResp, error)
	GetCObj(context.Context, *CObjGetReq) (*CommonResp, error)
	CreateCObj(context.Context, *CObjCreateReq) (*CommonResp, error)
	UpdateCObj(context.Context, *CObjUpdateReq) (*CommonResp, error)
	DeleteCObj(context.Context, *CObjDeleteReq) (*CommonResp, error)
}

// UnimplementedCustomResServer can be embedded to have forward compatible implementations.
type UnimplementedCustomResServer struct {
}

func (*UnimplementedCustomResServer) ListCRD(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCRD not implemented")
}
func (*UnimplementedCustomResServer) GetCRD(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCRD not implemented")
}
func (*UnimplementedCustomResServer) ListCObj(context.Context, *CObjListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCObj not implemented")
}
func (*UnimplementedCustomResServer) GetCObj(context.Context, *CObjGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCObj not implemented")
}
func (*UnimplementedCustomResServer) CreateCObj(context.Context, *CObjCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCObj not implemented")
}
func (*UnimplementedCustomResServer) UpdateCObj(context.Context, *CObjUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCObj not implemented")
}
func (*UnimplementedCustomResServer) DeleteCObj(context.Context, *CObjDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCObj not implemented")
}

func RegisterCustomResServer(s *grpc.Server, srv CustomResServer) {
	s.RegisterService(&_CustomRes_serviceDesc, srv)
}

func _CustomRes_ListCRD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).ListCRD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/ListCRD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).ListCRD(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_GetCRD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).GetCRD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/GetCRD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).GetCRD(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_ListCObj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CObjListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).ListCObj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/ListCObj",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).ListCObj(ctx, req.(*CObjListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_GetCObj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CObjGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).GetCObj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/GetCObj",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).GetCObj(ctx, req.(*CObjGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_CreateCObj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CObjCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).CreateCObj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/CreateCObj",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).CreateCObj(ctx, req.(*CObjCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_UpdateCObj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CObjUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).UpdateCObj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/UpdateCObj",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).UpdateCObj(ctx, req.(*CObjUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_DeleteCObj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CObjDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).DeleteCObj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/DeleteCObj",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).DeleteCObj(ctx, req.(*CObjDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomRes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.CustomRes",
	HandlerType: (*CustomResServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCRD",
			Handler:    _CustomRes_ListCRD_Handler,
		},
		{
			MethodName: "GetCRD",
			Handler:    _CustomRes_GetCRD_Handler,
		},
		{
			MethodName: "ListCObj",
			Handler:    _CustomRes_ListCObj_Handler,
		},
		{
			MethodName: "GetCObj",
			Handler:    _CustomRes_GetCObj_Handler,
		},
		{
			MethodName: "CreateCObj",
			Handler:    _CustomRes_CreateCObj_Handler,
		},
		{
			MethodName: "UpdateCObj",
			Handler:    _CustomRes_UpdateCObj_Handler,
		},
		{
			MethodName: "DeleteCObj",
			Handler:    _CustomRes_DeleteCObj_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster-resources/cluster-resources.proto",
}

// ResourceClient is the client API for Resource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResourceClient interface {
	// 示例模板接口
	GetK8SResTemplate(ctx context.Context, in *GetK8SResTemplateReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 订阅接口
	Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (Resource_SubscribeClient, error)
	// 主动使 Discover 缓存失效
	InvalidateDiscoveryCache(ctx context.Context, in *InvalidateDiscoveryCacheReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 表单化数据渲染预览
	FormDataRenderPreview(ctx context.Context, in *FormRenderPreviewReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 获取指定资源表单 Schema
	GetResFormSchema(ctx context.Context, in *GetResFormSchemaReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetFormSupportedAPIVersions(ctx context.Context, in *GetFormSupportedApiVersionsReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 获取用于下拉框选项的资源数据
	GetResSelectItems(ctx context.Context, in *GetResSelectItemsReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type resourceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceClient(cc grpc.ClientConnInterface) ResourceClient {
	return &resourceClient{cc}
}

func (c *resourceClient) GetK8SResTemplate(ctx context.Context, in *GetK8SResTemplateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Resource/GetK8SResTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (Resource_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Resource_serviceDesc.Streams[0], "/clusterresources.Resource/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Resource_SubscribeClient interface {
	Recv() (*SubscribeResp, error)
	grpc.ClientStream
}

type resourceSubscribeClient struct {
	grpc.ClientStream
}

func (x *resourceSubscribeClient) Recv() (*SubscribeResp, error) {
	m := new(SubscribeResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourceClient) InvalidateDiscoveryCache(ctx context.Context, in *InvalidateDiscoveryCacheReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Resource/InvalidateDiscoveryCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) FormDataRenderPreview(ctx context.Context, in *FormRenderPreviewReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Resource/FormDataRenderPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetResFormSchema(ctx context.Context, in *GetResFormSchemaReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Resource/GetResFormSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetFormSupportedAPIVersions(ctx context.Context, in *GetFormSupportedApiVersionsReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Resource/GetFormSupportedAPIVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetResSelectItems(ctx context.Context, in *GetResSelectItemsReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Resource/GetResSelectItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceServer is the server API for Resource service.
type ResourceServer interface {
	// 示例模板接口
	GetK8SResTemplate(context.Context, *GetK8SResTemplateReq) (*CommonResp, error)
	// 订阅接口
	Subscribe(*SubscribeReq, Resource_SubscribeServer) error
	// 主动使 Discover 缓存失效
	InvalidateDiscoveryCache(context.Context, *InvalidateDiscoveryCacheReq) (*CommonResp, error)
	// 表单化数据渲染预览
	FormDataRenderPreview(context.Context, *FormRenderPreviewReq) (*CommonResp, error)
	// 获取指定资源表单 Schema
	GetResFormSchema(context.Context, *GetResFormSchemaReq) (*CommonResp, error)
	GetFormSupportedAPIVersions(context.Context, *GetFormSupportedApiVersionsReq) (*CommonResp, error)
	// 获取用于下拉框选项的资源数据
	GetResSelectItems(context.Context, *GetResSelectItemsReq) (*CommonResp, error)
}

// UnimplementedResourceServer can be embedded to have forward compatible implementations.
type UnimplementedResourceServer struct {
}

func (*UnimplementedResourceServer) GetK8SResTemplate(context.Context, *GetK8SResTemplateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SResTemplate not implemented")
}
func (*UnimplementedResourceServer) Subscribe(*SubscribeReq, Resource_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedResourceServer) InvalidateDiscoveryCache(context.Context, *InvalidateDiscoveryCacheReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateDiscoveryCache not implemented")
}
func (*UnimplementedResourceServer) FormDataRenderPreview(context.Context, *FormRenderPreviewReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormDataRenderPreview not implemented")
}
func (*UnimplementedResourceServer) GetResFormSchema(context.Context, *GetResFormSchemaReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResFormSchema not implemented")
}
func (*UnimplementedResourceServer) GetFormSupportedAPIVersions(context.Context, *GetFormSupportedApiVersionsReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFormSupportedAPIVersions not implemented")
}
func (*UnimplementedResourceServer) GetResSelectItems(context.Context, *GetResSelectItemsReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResSelectItems not implemented")
}

func RegisterResourceServer(s *grpc.Server, srv ResourceServer) {
	s.RegisterService(&_Resource_serviceDesc, srv)
}

func _Resource_GetK8SResTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetK8SResTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetK8SResTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Resource/GetK8SResTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetK8SResTemplate(ctx, req.(*GetK8SResTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServer).Subscribe(m, &resourceSubscribeServer{stream})
}

type Resource_SubscribeServer interface {
	Send(*SubscribeResp) error
	grpc.ServerStream
}

type resourceSubscribeServer struct {
	grpc.ServerStream
}

func (x *resourceSubscribeServer) Send(m *SubscribeResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Resource_InvalidateDiscoveryCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateDiscoveryCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).InvalidateDiscoveryCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Resource/InvalidateDiscoveryCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).InvalidateDiscoveryCache(ctx, req.(*InvalidateDiscoveryCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_FormDataRenderPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormRenderPreviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).FormDataRenderPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Resource/FormDataRenderPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).FormDataRenderPreview(ctx, req.(*FormRenderPreviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetResFormSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResFormSchemaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetResFormSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Resource/GetResFormSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetResFormSchema(ctx, req.(*GetResFormSchemaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetFormSupportedAPIVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFormSupportedApiVersionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetFormSupportedAPIVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Resource/GetFormSupportedAPIVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetFormSupportedAPIVersions(ctx, req.(*GetFormSupportedApiVersionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetResSelectItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResSelectItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetResSelectItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Resource/GetResSelectItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetResSelectItems(ctx, req.(*GetResSelectItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Resource_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Resource",
	HandlerType: (*ResourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetK8SResTemplate",
			Handler:    _Resource_GetK8SResTemplate_Handler,
		},
		{
			MethodName: "InvalidateDiscoveryCache",
			Handler:    _Resource_InvalidateDiscoveryCache_Handler,
		},
		{
			MethodName: "FormDataRenderPreview",
			Handler:    _Resource_FormDataRenderPreview_Handler,
		},
		{
			MethodName: "GetResFormSchema",
			Handler:    _Resource_GetResFormSchema_Handler,
		},
		{
			MethodName: "GetFormSupportedAPIVersions",
			Handler:    _Resource_GetFormSupportedAPIVersions_Handler,
		},
		{
			MethodName: "GetResSelectItems",
			Handler:    _Resource_GetResSelectItems_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Resource_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/cluster-resources/cluster-resources.proto",
}
