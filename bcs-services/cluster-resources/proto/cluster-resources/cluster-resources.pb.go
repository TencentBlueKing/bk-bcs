// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/cluster-resources/cluster-resources.proto

package cluster_resources

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 基础类请求/响应体
type EchoReq struct {
	Str                  string   `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoReq) Reset()         { *m = EchoReq{} }
func (m *EchoReq) String() string { return proto.CompactTextString(m) }
func (*EchoReq) ProtoMessage()    {}
func (*EchoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{0}
}

func (m *EchoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoReq.Unmarshal(m, b)
}
func (m *EchoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoReq.Marshal(b, m, deterministic)
}
func (m *EchoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoReq.Merge(m, src)
}
func (m *EchoReq) XXX_Size() int {
	return xxx_messageInfo_EchoReq.Size(m)
}
func (m *EchoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoReq.DiscardUnknown(m)
}

var xxx_messageInfo_EchoReq proto.InternalMessageInfo

func (m *EchoReq) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

type EchoResp struct {
	Ret                  string   `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoResp) Reset()         { *m = EchoResp{} }
func (m *EchoResp) String() string { return proto.CompactTextString(m) }
func (*EchoResp) ProtoMessage()    {}
func (*EchoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{1}
}

func (m *EchoResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoResp.Unmarshal(m, b)
}
func (m *EchoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoResp.Marshal(b, m, deterministic)
}
func (m *EchoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoResp.Merge(m, src)
}
func (m *EchoResp) XXX_Size() int {
	return xxx_messageInfo_EchoResp.Size(m)
}
func (m *EchoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoResp.DiscardUnknown(m)
}

var xxx_messageInfo_EchoResp proto.InternalMessageInfo

func (m *EchoResp) GetRet() string {
	if m != nil {
		return m.Ret
	}
	return ""
}

type PingReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingReq) Reset()         { *m = PingReq{} }
func (m *PingReq) String() string { return proto.CompactTextString(m) }
func (*PingReq) ProtoMessage()    {}
func (*PingReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{2}
}

func (m *PingReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingReq.Unmarshal(m, b)
}
func (m *PingReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingReq.Marshal(b, m, deterministic)
}
func (m *PingReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingReq.Merge(m, src)
}
func (m *PingReq) XXX_Size() int {
	return xxx_messageInfo_PingReq.Size(m)
}
func (m *PingReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PingReq.DiscardUnknown(m)
}

var xxx_messageInfo_PingReq proto.InternalMessageInfo

type PingResp struct {
	Ret                  string   `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResp) Reset()         { *m = PingResp{} }
func (m *PingResp) String() string { return proto.CompactTextString(m) }
func (*PingResp) ProtoMessage()    {}
func (*PingResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{3}
}

func (m *PingResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingResp.Unmarshal(m, b)
}
func (m *PingResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingResp.Marshal(b, m, deterministic)
}
func (m *PingResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResp.Merge(m, src)
}
func (m *PingResp) XXX_Size() int {
	return xxx_messageInfo_PingResp.Size(m)
}
func (m *PingResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResp.DiscardUnknown(m)
}

var xxx_messageInfo_PingResp proto.InternalMessageInfo

func (m *PingResp) GetRet() string {
	if m != nil {
		return m.Ret
	}
	return ""
}

type HealthzReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthzReq) Reset()         { *m = HealthzReq{} }
func (m *HealthzReq) String() string { return proto.CompactTextString(m) }
func (*HealthzReq) ProtoMessage()    {}
func (*HealthzReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{4}
}

func (m *HealthzReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthzReq.Unmarshal(m, b)
}
func (m *HealthzReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthzReq.Marshal(b, m, deterministic)
}
func (m *HealthzReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthzReq.Merge(m, src)
}
func (m *HealthzReq) XXX_Size() int {
	return xxx_messageInfo_HealthzReq.Size(m)
}
func (m *HealthzReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthzReq.DiscardUnknown(m)
}

var xxx_messageInfo_HealthzReq proto.InternalMessageInfo

type HealthzResp struct {
	CallTime             string   `protobuf:"bytes,1,opt,name=callTime,proto3" json:"callTime,omitempty"`
	Status               string   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Redis                string   `protobuf:"bytes,3,opt,name=redis,proto3" json:"redis,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthzResp) Reset()         { *m = HealthzResp{} }
func (m *HealthzResp) String() string { return proto.CompactTextString(m) }
func (*HealthzResp) ProtoMessage()    {}
func (*HealthzResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{5}
}

func (m *HealthzResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthzResp.Unmarshal(m, b)
}
func (m *HealthzResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthzResp.Marshal(b, m, deterministic)
}
func (m *HealthzResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthzResp.Merge(m, src)
}
func (m *HealthzResp) XXX_Size() int {
	return xxx_messageInfo_HealthzResp.Size(m)
}
func (m *HealthzResp) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthzResp.DiscardUnknown(m)
}

var xxx_messageInfo_HealthzResp proto.InternalMessageInfo

func (m *HealthzResp) GetCallTime() string {
	if m != nil {
		return m.CallTime
	}
	return ""
}

func (m *HealthzResp) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *HealthzResp) GetRedis() string {
	if m != nil {
		return m.Redis
	}
	return ""
}

type VersionReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionReq) Reset()         { *m = VersionReq{} }
func (m *VersionReq) String() string { return proto.CompactTextString(m) }
func (*VersionReq) ProtoMessage()    {}
func (*VersionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{6}
}

func (m *VersionReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionReq.Unmarshal(m, b)
}
func (m *VersionReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionReq.Marshal(b, m, deterministic)
}
func (m *VersionReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionReq.Merge(m, src)
}
func (m *VersionReq) XXX_Size() int {
	return xxx_messageInfo_VersionReq.Size(m)
}
func (m *VersionReq) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionReq.DiscardUnknown(m)
}

var xxx_messageInfo_VersionReq proto.InternalMessageInfo

type VersionResp struct {
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	GitCommit            string   `protobuf:"bytes,2,opt,name=gitCommit,proto3" json:"gitCommit,omitempty"`
	BuildTime            string   `protobuf:"bytes,3,opt,name=buildTime,proto3" json:"buildTime,omitempty"`
	GoVersion            string   `protobuf:"bytes,4,opt,name=goVersion,proto3" json:"goVersion,omitempty"`
	RunMode              string   `protobuf:"bytes,5,opt,name=runMode,proto3" json:"runMode,omitempty"`
	CallTime             string   `protobuf:"bytes,6,opt,name=callTime,proto3" json:"callTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionResp) Reset()         { *m = VersionResp{} }
func (m *VersionResp) String() string { return proto.CompactTextString(m) }
func (*VersionResp) ProtoMessage()    {}
func (*VersionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{7}
}

func (m *VersionResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionResp.Unmarshal(m, b)
}
func (m *VersionResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionResp.Marshal(b, m, deterministic)
}
func (m *VersionResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionResp.Merge(m, src)
}
func (m *VersionResp) XXX_Size() int {
	return xxx_messageInfo_VersionResp.Size(m)
}
func (m *VersionResp) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionResp.DiscardUnknown(m)
}

var xxx_messageInfo_VersionResp proto.InternalMessageInfo

func (m *VersionResp) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *VersionResp) GetGitCommit() string {
	if m != nil {
		return m.GitCommit
	}
	return ""
}

func (m *VersionResp) GetBuildTime() string {
	if m != nil {
		return m.BuildTime
	}
	return ""
}

func (m *VersionResp) GetGoVersion() string {
	if m != nil {
		return m.GoVersion
	}
	return ""
}

func (m *VersionResp) GetRunMode() string {
	if m != nil {
		return m.RunMode
	}
	return ""
}

func (m *VersionResp) GetCallTime() string {
	if m != nil {
		return m.CallTime
	}
	return ""
}

// 业务类请求/响应体
type ResListReq struct {
	ProjectID            string   `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID            string   `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace            string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	LabelSelector        string   `protobuf:"bytes,4,opt,name=labelSelector,proto3" json:"labelSelector,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResListReq) Reset()         { *m = ResListReq{} }
func (m *ResListReq) String() string { return proto.CompactTextString(m) }
func (*ResListReq) ProtoMessage()    {}
func (*ResListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{8}
}

func (m *ResListReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResListReq.Unmarshal(m, b)
}
func (m *ResListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResListReq.Marshal(b, m, deterministic)
}
func (m *ResListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResListReq.Merge(m, src)
}
func (m *ResListReq) XXX_Size() int {
	return xxx_messageInfo_ResListReq.Size(m)
}
func (m *ResListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ResListReq.DiscardUnknown(m)
}

var xxx_messageInfo_ResListReq proto.InternalMessageInfo

func (m *ResListReq) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

func (m *ResListReq) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *ResListReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ResListReq) GetLabelSelector() string {
	if m != nil {
		return m.LabelSelector
	}
	return ""
}

type ResGetReq struct {
	ProjectID            string   `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID            string   `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace            string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	AsFormData           bool     `protobuf:"varint,5,opt,name=asFormData,proto3" json:"asFormData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResGetReq) Reset()         { *m = ResGetReq{} }
func (m *ResGetReq) String() string { return proto.CompactTextString(m) }
func (*ResGetReq) ProtoMessage()    {}
func (*ResGetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{9}
}

func (m *ResGetReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResGetReq.Unmarshal(m, b)
}
func (m *ResGetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResGetReq.Marshal(b, m, deterministic)
}
func (m *ResGetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResGetReq.Merge(m, src)
}
func (m *ResGetReq) XXX_Size() int {
	return xxx_messageInfo_ResGetReq.Size(m)
}
func (m *ResGetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ResGetReq.DiscardUnknown(m)
}

var xxx_messageInfo_ResGetReq proto.InternalMessageInfo

func (m *ResGetReq) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

func (m *ResGetReq) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *ResGetReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ResGetReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResGetReq) GetAsFormData() bool {
	if m != nil {
		return m.AsFormData
	}
	return false
}

type ResCreateReq struct {
	ProjectID            string          `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID            string          `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Manifest             *_struct.Struct `protobuf:"bytes,3,opt,name=manifest,proto3" json:"manifest,omitempty"`
	FormData             *_struct.Struct `protobuf:"bytes,4,opt,name=formData,proto3" json:"formData,omitempty"`
	UseFormData          bool            `protobuf:"varint,5,opt,name=useFormData,proto3" json:"useFormData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResCreateReq) Reset()         { *m = ResCreateReq{} }
func (m *ResCreateReq) String() string { return proto.CompactTextString(m) }
func (*ResCreateReq) ProtoMessage()    {}
func (*ResCreateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{10}
}

func (m *ResCreateReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCreateReq.Unmarshal(m, b)
}
func (m *ResCreateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCreateReq.Marshal(b, m, deterministic)
}
func (m *ResCreateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCreateReq.Merge(m, src)
}
func (m *ResCreateReq) XXX_Size() int {
	return xxx_messageInfo_ResCreateReq.Size(m)
}
func (m *ResCreateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCreateReq.DiscardUnknown(m)
}

var xxx_messageInfo_ResCreateReq proto.InternalMessageInfo

func (m *ResCreateReq) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

func (m *ResCreateReq) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *ResCreateReq) GetManifest() *_struct.Struct {
	if m != nil {
		return m.Manifest
	}
	return nil
}

func (m *ResCreateReq) GetFormData() *_struct.Struct {
	if m != nil {
		return m.FormData
	}
	return nil
}

func (m *ResCreateReq) GetUseFormData() bool {
	if m != nil {
		return m.UseFormData
	}
	return false
}

type ResUpdateReq struct {
	ProjectID            string          `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID            string          `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace            string          `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Manifest             *_struct.Struct `protobuf:"bytes,5,opt,name=manifest,proto3" json:"manifest,omitempty"`
	FormData             *_struct.Struct `protobuf:"bytes,6,opt,name=formData,proto3" json:"formData,omitempty"`
	UseFormData          bool            `protobuf:"varint,7,opt,name=useFormData,proto3" json:"useFormData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResUpdateReq) Reset()         { *m = ResUpdateReq{} }
func (m *ResUpdateReq) String() string { return proto.CompactTextString(m) }
func (*ResUpdateReq) ProtoMessage()    {}
func (*ResUpdateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{11}
}

func (m *ResUpdateReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResUpdateReq.Unmarshal(m, b)
}
func (m *ResUpdateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResUpdateReq.Marshal(b, m, deterministic)
}
func (m *ResUpdateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResUpdateReq.Merge(m, src)
}
func (m *ResUpdateReq) XXX_Size() int {
	return xxx_messageInfo_ResUpdateReq.Size(m)
}
func (m *ResUpdateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ResUpdateReq.DiscardUnknown(m)
}

var xxx_messageInfo_ResUpdateReq proto.InternalMessageInfo

func (m *ResUpdateReq) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

func (m *ResUpdateReq) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *ResUpdateReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ResUpdateReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResUpdateReq) GetManifest() *_struct.Struct {
	if m != nil {
		return m.Manifest
	}
	return nil
}

func (m *ResUpdateReq) GetFormData() *_struct.Struct {
	if m != nil {
		return m.FormData
	}
	return nil
}

func (m *ResUpdateReq) GetUseFormData() bool {
	if m != nil {
		return m.UseFormData
	}
	return false
}

type ResDeleteReq struct {
	ProjectID            string   `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID            string   `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace            string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResDeleteReq) Reset()         { *m = ResDeleteReq{} }
func (m *ResDeleteReq) String() string { return proto.CompactTextString(m) }
func (*ResDeleteReq) ProtoMessage()    {}
func (*ResDeleteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{12}
}

func (m *ResDeleteReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResDeleteReq.Unmarshal(m, b)
}
func (m *ResDeleteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResDeleteReq.Marshal(b, m, deterministic)
}
func (m *ResDeleteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResDeleteReq.Merge(m, src)
}
func (m *ResDeleteReq) XXX_Size() int {
	return xxx_messageInfo_ResDeleteReq.Size(m)
}
func (m *ResDeleteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ResDeleteReq.DiscardUnknown(m)
}

var xxx_messageInfo_ResDeleteReq proto.InternalMessageInfo

func (m *ResDeleteReq) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

func (m *ResDeleteReq) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *ResDeleteReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ResDeleteReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PodResListReq struct {
	ProjectID            string   `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID            string   `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace            string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	LabelSelector        string   `protobuf:"bytes,4,opt,name=labelSelector,proto3" json:"labelSelector,omitempty"`
	OwnerName            string   `protobuf:"bytes,5,opt,name=ownerName,proto3" json:"ownerName,omitempty"`
	OwnerKind            string   `protobuf:"bytes,6,opt,name=ownerKind,proto3" json:"ownerKind,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodResListReq) Reset()         { *m = PodResListReq{} }
func (m *PodResListReq) String() string { return proto.CompactTextString(m) }
func (*PodResListReq) ProtoMessage()    {}
func (*PodResListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{13}
}

func (m *PodResListReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodResListReq.Unmarshal(m, b)
}
func (m *PodResListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodResListReq.Marshal(b, m, deterministic)
}
func (m *PodResListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodResListReq.Merge(m, src)
}
func (m *PodResListReq) XXX_Size() int {
	return xxx_messageInfo_PodResListReq.Size(m)
}
func (m *PodResListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PodResListReq.DiscardUnknown(m)
}

var xxx_messageInfo_PodResListReq proto.InternalMessageInfo

func (m *PodResListReq) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

func (m *PodResListReq) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *PodResListReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PodResListReq) GetLabelSelector() string {
	if m != nil {
		return m.LabelSelector
	}
	return ""
}

func (m *PodResListReq) GetOwnerName() string {
	if m != nil {
		return m.OwnerName
	}
	return ""
}

func (m *PodResListReq) GetOwnerKind() string {
	if m != nil {
		return m.OwnerKind
	}
	return ""
}

type ContainerListReq struct {
	ProjectID            string   `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID            string   `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace            string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PodName              string   `protobuf:"bytes,4,opt,name=podName,proto3" json:"podName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerListReq) Reset()         { *m = ContainerListReq{} }
func (m *ContainerListReq) String() string { return proto.CompactTextString(m) }
func (*ContainerListReq) ProtoMessage()    {}
func (*ContainerListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{14}
}

func (m *ContainerListReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContainerListReq.Unmarshal(m, b)
}
func (m *ContainerListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContainerListReq.Marshal(b, m, deterministic)
}
func (m *ContainerListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerListReq.Merge(m, src)
}
func (m *ContainerListReq) XXX_Size() int {
	return xxx_messageInfo_ContainerListReq.Size(m)
}
func (m *ContainerListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerListReq.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerListReq proto.InternalMessageInfo

func (m *ContainerListReq) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

func (m *ContainerListReq) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *ContainerListReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ContainerListReq) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

type ContainerGetReq struct {
	ProjectID            string   `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID            string   `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace            string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PodName              string   `protobuf:"bytes,4,opt,name=podName,proto3" json:"podName,omitempty"`
	ContainerName        string   `protobuf:"bytes,5,opt,name=containerName,proto3" json:"containerName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerGetReq) Reset()         { *m = ContainerGetReq{} }
func (m *ContainerGetReq) String() string { return proto.CompactTextString(m) }
func (*ContainerGetReq) ProtoMessage()    {}
func (*ContainerGetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{15}
}

func (m *ContainerGetReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContainerGetReq.Unmarshal(m, b)
}
func (m *ContainerGetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContainerGetReq.Marshal(b, m, deterministic)
}
func (m *ContainerGetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerGetReq.Merge(m, src)
}
func (m *ContainerGetReq) XXX_Size() int {
	return xxx_messageInfo_ContainerGetReq.Size(m)
}
func (m *ContainerGetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerGetReq.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerGetReq proto.InternalMessageInfo

func (m *ContainerGetReq) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

func (m *ContainerGetReq) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *ContainerGetReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ContainerGetReq) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *ContainerGetReq) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

type GetK8SResTemplateReq struct {
	ProjectID            string   `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID            string   `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Kind                 string   `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetK8SResTemplateReq) Reset()         { *m = GetK8SResTemplateReq{} }
func (m *GetK8SResTemplateReq) String() string { return proto.CompactTextString(m) }
func (*GetK8SResTemplateReq) ProtoMessage()    {}
func (*GetK8SResTemplateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{16}
}

func (m *GetK8SResTemplateReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetK8SResTemplateReq.Unmarshal(m, b)
}
func (m *GetK8SResTemplateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetK8SResTemplateReq.Marshal(b, m, deterministic)
}
func (m *GetK8SResTemplateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetK8SResTemplateReq.Merge(m, src)
}
func (m *GetK8SResTemplateReq) XXX_Size() int {
	return xxx_messageInfo_GetK8SResTemplateReq.Size(m)
}
func (m *GetK8SResTemplateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetK8SResTemplateReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetK8SResTemplateReq proto.InternalMessageInfo

func (m *GetK8SResTemplateReq) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

func (m *GetK8SResTemplateReq) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *GetK8SResTemplateReq) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

type CObjListReq struct {
	ProjectID            string   `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID            string   `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	CRDName              string   `protobuf:"bytes,3,opt,name=CRDName,proto3" json:"CRDName,omitempty"`
	Namespace            string   `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CObjListReq) Reset()         { *m = CObjListReq{} }
func (m *CObjListReq) String() string { return proto.CompactTextString(m) }
func (*CObjListReq) ProtoMessage()    {}
func (*CObjListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{17}
}

func (m *CObjListReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CObjListReq.Unmarshal(m, b)
}
func (m *CObjListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CObjListReq.Marshal(b, m, deterministic)
}
func (m *CObjListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CObjListReq.Merge(m, src)
}
func (m *CObjListReq) XXX_Size() int {
	return xxx_messageInfo_CObjListReq.Size(m)
}
func (m *CObjListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CObjListReq.DiscardUnknown(m)
}

var xxx_messageInfo_CObjListReq proto.InternalMessageInfo

func (m *CObjListReq) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

func (m *CObjListReq) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *CObjListReq) GetCRDName() string {
	if m != nil {
		return m.CRDName
	}
	return ""
}

func (m *CObjListReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type CObjGetReq struct {
	ProjectID            string   `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID            string   `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	CRDName              string   `protobuf:"bytes,3,opt,name=CRDName,proto3" json:"CRDName,omitempty"`
	CobjName             string   `protobuf:"bytes,4,opt,name=cobjName,proto3" json:"cobjName,omitempty"`
	Namespace            string   `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	AsFormData           bool     `protobuf:"varint,6,opt,name=asFormData,proto3" json:"asFormData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CObjGetReq) Reset()         { *m = CObjGetReq{} }
func (m *CObjGetReq) String() string { return proto.CompactTextString(m) }
func (*CObjGetReq) ProtoMessage()    {}
func (*CObjGetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{18}
}

func (m *CObjGetReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CObjGetReq.Unmarshal(m, b)
}
func (m *CObjGetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CObjGetReq.Marshal(b, m, deterministic)
}
func (m *CObjGetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CObjGetReq.Merge(m, src)
}
func (m *CObjGetReq) XXX_Size() int {
	return xxx_messageInfo_CObjGetReq.Size(m)
}
func (m *CObjGetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CObjGetReq.DiscardUnknown(m)
}

var xxx_messageInfo_CObjGetReq proto.InternalMessageInfo

func (m *CObjGetReq) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

func (m *CObjGetReq) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *CObjGetReq) GetCRDName() string {
	if m != nil {
		return m.CRDName
	}
	return ""
}

func (m *CObjGetReq) GetCobjName() string {
	if m != nil {
		return m.CobjName
	}
	return ""
}

func (m *CObjGetReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CObjGetReq) GetAsFormData() bool {
	if m != nil {
		return m.AsFormData
	}
	return false
}

type CObjCreateReq struct {
	ProjectID            string          `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID            string          `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	CRDName              string          `protobuf:"bytes,3,opt,name=CRDName,proto3" json:"CRDName,omitempty"`
	Manifest             *_struct.Struct `protobuf:"bytes,4,opt,name=manifest,proto3" json:"manifest,omitempty"`
	FormData             *_struct.Struct `protobuf:"bytes,5,opt,name=formData,proto3" json:"formData,omitempty"`
	UseFormData          bool            `protobuf:"varint,6,opt,name=useFormData,proto3" json:"useFormData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CObjCreateReq) Reset()         { *m = CObjCreateReq{} }
func (m *CObjCreateReq) String() string { return proto.CompactTextString(m) }
func (*CObjCreateReq) ProtoMessage()    {}
func (*CObjCreateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{19}
}

func (m *CObjCreateReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CObjCreateReq.Unmarshal(m, b)
}
func (m *CObjCreateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CObjCreateReq.Marshal(b, m, deterministic)
}
func (m *CObjCreateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CObjCreateReq.Merge(m, src)
}
func (m *CObjCreateReq) XXX_Size() int {
	return xxx_messageInfo_CObjCreateReq.Size(m)
}
func (m *CObjCreateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CObjCreateReq.DiscardUnknown(m)
}

var xxx_messageInfo_CObjCreateReq proto.InternalMessageInfo

func (m *CObjCreateReq) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

func (m *CObjCreateReq) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *CObjCreateReq) GetCRDName() string {
	if m != nil {
		return m.CRDName
	}
	return ""
}

func (m *CObjCreateReq) GetManifest() *_struct.Struct {
	if m != nil {
		return m.Manifest
	}
	return nil
}

func (m *CObjCreateReq) GetFormData() *_struct.Struct {
	if m != nil {
		return m.FormData
	}
	return nil
}

func (m *CObjCreateReq) GetUseFormData() bool {
	if m != nil {
		return m.UseFormData
	}
	return false
}

type CObjUpdateReq struct {
	ProjectID            string          `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID            string          `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	CRDName              string          `protobuf:"bytes,3,opt,name=CRDName,proto3" json:"CRDName,omitempty"`
	CobjName             string          `protobuf:"bytes,4,opt,name=cobjName,proto3" json:"cobjName,omitempty"`
	Namespace            string          `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Manifest             *_struct.Struct `protobuf:"bytes,6,opt,name=manifest,proto3" json:"manifest,omitempty"`
	FormData             *_struct.Struct `protobuf:"bytes,7,opt,name=formData,proto3" json:"formData,omitempty"`
	UseFormData          bool            `protobuf:"varint,8,opt,name=useFormData,proto3" json:"useFormData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CObjUpdateReq) Reset()         { *m = CObjUpdateReq{} }
func (m *CObjUpdateReq) String() string { return proto.CompactTextString(m) }
func (*CObjUpdateReq) ProtoMessage()    {}
func (*CObjUpdateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{20}
}

func (m *CObjUpdateReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CObjUpdateReq.Unmarshal(m, b)
}
func (m *CObjUpdateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CObjUpdateReq.Marshal(b, m, deterministic)
}
func (m *CObjUpdateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CObjUpdateReq.Merge(m, src)
}
func (m *CObjUpdateReq) XXX_Size() int {
	return xxx_messageInfo_CObjUpdateReq.Size(m)
}
func (m *CObjUpdateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CObjUpdateReq.DiscardUnknown(m)
}

var xxx_messageInfo_CObjUpdateReq proto.InternalMessageInfo

func (m *CObjUpdateReq) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

func (m *CObjUpdateReq) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *CObjUpdateReq) GetCRDName() string {
	if m != nil {
		return m.CRDName
	}
	return ""
}

func (m *CObjUpdateReq) GetCobjName() string {
	if m != nil {
		return m.CobjName
	}
	return ""
}

func (m *CObjUpdateReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CObjUpdateReq) GetManifest() *_struct.Struct {
	if m != nil {
		return m.Manifest
	}
	return nil
}

func (m *CObjUpdateReq) GetFormData() *_struct.Struct {
	if m != nil {
		return m.FormData
	}
	return nil
}

func (m *CObjUpdateReq) GetUseFormData() bool {
	if m != nil {
		return m.UseFormData
	}
	return false
}

type CObjDeleteReq struct {
	ProjectID            string   `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID            string   `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	CRDName              string   `protobuf:"bytes,3,opt,name=CRDName,proto3" json:"CRDName,omitempty"`
	CobjName             string   `protobuf:"bytes,4,opt,name=cobjName,proto3" json:"cobjName,omitempty"`
	Namespace            string   `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CObjDeleteReq) Reset()         { *m = CObjDeleteReq{} }
func (m *CObjDeleteReq) String() string { return proto.CompactTextString(m) }
func (*CObjDeleteReq) ProtoMessage()    {}
func (*CObjDeleteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{21}
}

func (m *CObjDeleteReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CObjDeleteReq.Unmarshal(m, b)
}
func (m *CObjDeleteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CObjDeleteReq.Marshal(b, m, deterministic)
}
func (m *CObjDeleteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CObjDeleteReq.Merge(m, src)
}
func (m *CObjDeleteReq) XXX_Size() int {
	return xxx_messageInfo_CObjDeleteReq.Size(m)
}
func (m *CObjDeleteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CObjDeleteReq.DiscardUnknown(m)
}

var xxx_messageInfo_CObjDeleteReq proto.InternalMessageInfo

func (m *CObjDeleteReq) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

func (m *CObjDeleteReq) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *CObjDeleteReq) GetCRDName() string {
	if m != nil {
		return m.CRDName
	}
	return ""
}

func (m *CObjDeleteReq) GetCobjName() string {
	if m != nil {
		return m.CobjName
	}
	return ""
}

func (m *CObjDeleteReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type CommonResp struct {
	Code                 int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID            string          `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Data                 *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CommonResp) Reset()         { *m = CommonResp{} }
func (m *CommonResp) String() string { return proto.CompactTextString(m) }
func (*CommonResp) ProtoMessage()    {}
func (*CommonResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{22}
}

func (m *CommonResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonResp.Unmarshal(m, b)
}
func (m *CommonResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonResp.Marshal(b, m, deterministic)
}
func (m *CommonResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonResp.Merge(m, src)
}
func (m *CommonResp) XXX_Size() int {
	return xxx_messageInfo_CommonResp.Size(m)
}
func (m *CommonResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonResp.DiscardUnknown(m)
}

var xxx_messageInfo_CommonResp proto.InternalMessageInfo

func (m *CommonResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CommonResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CommonResp) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *CommonResp) GetData() *_struct.Struct {
	if m != nil {
		return m.Data
	}
	return nil
}

type CommonListResp struct {
	Code                 int32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID            string             `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Data                 *_struct.ListValue `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CommonListResp) Reset()         { *m = CommonListResp{} }
func (m *CommonListResp) String() string { return proto.CompactTextString(m) }
func (*CommonListResp) ProtoMessage()    {}
func (*CommonListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{23}
}

func (m *CommonListResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonListResp.Unmarshal(m, b)
}
func (m *CommonListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonListResp.Marshal(b, m, deterministic)
}
func (m *CommonListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonListResp.Merge(m, src)
}
func (m *CommonListResp) XXX_Size() int {
	return xxx_messageInfo_CommonListResp.Size(m)
}
func (m *CommonListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonListResp.DiscardUnknown(m)
}

var xxx_messageInfo_CommonListResp proto.InternalMessageInfo

func (m *CommonListResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CommonListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CommonListResp) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *CommonListResp) GetData() *_struct.ListValue {
	if m != nil {
		return m.Data
	}
	return nil
}

type SubscribeReq struct {
	ProjectID            string   `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID            string   `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ResourceVersion      string   `protobuf:"bytes,3,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	Kind                 string   `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	CRDName              string   `protobuf:"bytes,5,opt,name=CRDName,proto3" json:"CRDName,omitempty"`
	ApiVersion           string   `protobuf:"bytes,6,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Namespace            string   `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeReq) Reset()         { *m = SubscribeReq{} }
func (m *SubscribeReq) String() string { return proto.CompactTextString(m) }
func (*SubscribeReq) ProtoMessage()    {}
func (*SubscribeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{24}
}

func (m *SubscribeReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeReq.Unmarshal(m, b)
}
func (m *SubscribeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeReq.Marshal(b, m, deterministic)
}
func (m *SubscribeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeReq.Merge(m, src)
}
func (m *SubscribeReq) XXX_Size() int {
	return xxx_messageInfo_SubscribeReq.Size(m)
}
func (m *SubscribeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeReq.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeReq proto.InternalMessageInfo

func (m *SubscribeReq) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

func (m *SubscribeReq) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *SubscribeReq) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *SubscribeReq) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *SubscribeReq) GetCRDName() string {
	if m != nil {
		return m.CRDName
	}
	return ""
}

func (m *SubscribeReq) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func (m *SubscribeReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type SubscribeResp struct {
	Code                 int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Kind                 string          `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	Type                 string          `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Uid                  string          `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`
	Manifest             *_struct.Struct `protobuf:"bytes,6,opt,name=manifest,proto3" json:"manifest,omitempty"`
	ManifestExt          *_struct.Struct `protobuf:"bytes,7,opt,name=manifestExt,proto3" json:"manifestExt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SubscribeResp) Reset()         { *m = SubscribeResp{} }
func (m *SubscribeResp) String() string { return proto.CompactTextString(m) }
func (*SubscribeResp) ProtoMessage()    {}
func (*SubscribeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{25}
}

func (m *SubscribeResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeResp.Unmarshal(m, b)
}
func (m *SubscribeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeResp.Marshal(b, m, deterministic)
}
func (m *SubscribeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResp.Merge(m, src)
}
func (m *SubscribeResp) XXX_Size() int {
	return xxx_messageInfo_SubscribeResp.Size(m)
}
func (m *SubscribeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResp.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResp proto.InternalMessageInfo

func (m *SubscribeResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SubscribeResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SubscribeResp) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *SubscribeResp) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SubscribeResp) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *SubscribeResp) GetManifest() *_struct.Struct {
	if m != nil {
		return m.Manifest
	}
	return nil
}

func (m *SubscribeResp) GetManifestExt() *_struct.Struct {
	if m != nil {
		return m.ManifestExt
	}
	return nil
}

type InvalidateDiscoveryCacheReq struct {
	ProjectID            string   `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID            string   `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InvalidateDiscoveryCacheReq) Reset()         { *m = InvalidateDiscoveryCacheReq{} }
func (m *InvalidateDiscoveryCacheReq) String() string { return proto.CompactTextString(m) }
func (*InvalidateDiscoveryCacheReq) ProtoMessage()    {}
func (*InvalidateDiscoveryCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{26}
}

func (m *InvalidateDiscoveryCacheReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvalidateDiscoveryCacheReq.Unmarshal(m, b)
}
func (m *InvalidateDiscoveryCacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvalidateDiscoveryCacheReq.Marshal(b, m, deterministic)
}
func (m *InvalidateDiscoveryCacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidateDiscoveryCacheReq.Merge(m, src)
}
func (m *InvalidateDiscoveryCacheReq) XXX_Size() int {
	return xxx_messageInfo_InvalidateDiscoveryCacheReq.Size(m)
}
func (m *InvalidateDiscoveryCacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidateDiscoveryCacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidateDiscoveryCacheReq proto.InternalMessageInfo

func (m *InvalidateDiscoveryCacheReq) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

func (m *InvalidateDiscoveryCacheReq) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

type FormRenderPreviewReq struct {
	ProjectID            string          `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ClusterID            string          `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Kind                 string          `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	FormData             *_struct.Struct `protobuf:"bytes,4,opt,name=formData,proto3" json:"formData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *FormRenderPreviewReq) Reset()         { *m = FormRenderPreviewReq{} }
func (m *FormRenderPreviewReq) String() string { return proto.CompactTextString(m) }
func (*FormRenderPreviewReq) ProtoMessage()    {}
func (*FormRenderPreviewReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddb4355b8eb2198, []int{27}
}

func (m *FormRenderPreviewReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FormRenderPreviewReq.Unmarshal(m, b)
}
func (m *FormRenderPreviewReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FormRenderPreviewReq.Marshal(b, m, deterministic)
}
func (m *FormRenderPreviewReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FormRenderPreviewReq.Merge(m, src)
}
func (m *FormRenderPreviewReq) XXX_Size() int {
	return xxx_messageInfo_FormRenderPreviewReq.Size(m)
}
func (m *FormRenderPreviewReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FormRenderPreviewReq.DiscardUnknown(m)
}

var xxx_messageInfo_FormRenderPreviewReq proto.InternalMessageInfo

func (m *FormRenderPreviewReq) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

func (m *FormRenderPreviewReq) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *FormRenderPreviewReq) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *FormRenderPreviewReq) GetFormData() *_struct.Struct {
	if m != nil {
		return m.FormData
	}
	return nil
}

func init() {
	proto.RegisterType((*EchoReq)(nil), "clusterresources.EchoReq")
	proto.RegisterType((*EchoResp)(nil), "clusterresources.EchoResp")
	proto.RegisterType((*PingReq)(nil), "clusterresources.PingReq")
	proto.RegisterType((*PingResp)(nil), "clusterresources.PingResp")
	proto.RegisterType((*HealthzReq)(nil), "clusterresources.HealthzReq")
	proto.RegisterType((*HealthzResp)(nil), "clusterresources.HealthzResp")
	proto.RegisterType((*VersionReq)(nil), "clusterresources.VersionReq")
	proto.RegisterType((*VersionResp)(nil), "clusterresources.VersionResp")
	proto.RegisterType((*ResListReq)(nil), "clusterresources.ResListReq")
	proto.RegisterType((*ResGetReq)(nil), "clusterresources.ResGetReq")
	proto.RegisterType((*ResCreateReq)(nil), "clusterresources.ResCreateReq")
	proto.RegisterType((*ResUpdateReq)(nil), "clusterresources.ResUpdateReq")
	proto.RegisterType((*ResDeleteReq)(nil), "clusterresources.ResDeleteReq")
	proto.RegisterType((*PodResListReq)(nil), "clusterresources.PodResListReq")
	proto.RegisterType((*ContainerListReq)(nil), "clusterresources.ContainerListReq")
	proto.RegisterType((*ContainerGetReq)(nil), "clusterresources.ContainerGetReq")
	proto.RegisterType((*GetK8SResTemplateReq)(nil), "clusterresources.GetK8SResTemplateReq")
	proto.RegisterType((*CObjListReq)(nil), "clusterresources.CObjListReq")
	proto.RegisterType((*CObjGetReq)(nil), "clusterresources.CObjGetReq")
	proto.RegisterType((*CObjCreateReq)(nil), "clusterresources.CObjCreateReq")
	proto.RegisterType((*CObjUpdateReq)(nil), "clusterresources.CObjUpdateReq")
	proto.RegisterType((*CObjDeleteReq)(nil), "clusterresources.CObjDeleteReq")
	proto.RegisterType((*CommonResp)(nil), "clusterresources.CommonResp")
	proto.RegisterType((*CommonListResp)(nil), "clusterresources.CommonListResp")
	proto.RegisterType((*SubscribeReq)(nil), "clusterresources.SubscribeReq")
	proto.RegisterType((*SubscribeResp)(nil), "clusterresources.SubscribeResp")
	proto.RegisterType((*InvalidateDiscoveryCacheReq)(nil), "clusterresources.InvalidateDiscoveryCacheReq")
	proto.RegisterType((*FormRenderPreviewReq)(nil), "clusterresources.FormRenderPreviewReq")
}

func init() {
	proto.RegisterFile("proto/cluster-resources/cluster-resources.proto", fileDescriptor_6ddb4355b8eb2198)
}

var fileDescriptor_6ddb4355b8eb2198 = []byte{
	// 6067 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x9d, 0x7b, 0x70, 0x1b, 0xc7,
	0x7d, 0xc7, 0xe7, 0x08, 0xbe, 0xb0, 0x24, 0x25, 0x7a, 0x6d, 0x45, 0x34, 0xf4, 0x82, 0x60, 0x59,
	0x91, 0xcf, 0x26, 0x21, 0x9f, 0xe3, 0xda, 0x61, 0x12, 0x3b, 0x47, 0x90, 0xa5, 0x25, 0x47, 0x0a,
	0x0b, 0xd8, 0x4c, 0xfc, 0x8a, 0x02, 0x82, 0x27, 0x0a, 0x32, 0x88, 0x83, 0x70, 0x20, 0x1d, 0x5b,
	0xa3, 0x84, 0xb2, 0xf5, 0xb4, 0x48, 0x53, 0x3e, 0x8a, 0x7a, 0x57, 0x96, 0x14, 0xc9, 0xa1, 0xd3,
	0x48, 0x94, 0x53, 0x25, 0x96, 0x29, 0xca, 0x4a, 0xff, 0x4a, 0xd3, 0x66, 0x3c, 0x69, 0xd2, 0x34,
	0x9d, 0xb4, 0x71, 0xe2, 0x09, 0x0f, 0x20, 0x93, 0x76, 0xd4, 0xce, 0x74, 0x26, 0x53, 0x4d, 0x3a,
	0xed, 0xdc, 0xbe, 0xee, 0x0e, 0x04, 0x20, 0xc8, 0x07, 0x80, 0x56, 0xa6, 0x7f, 0x11, 0x38, 0xdc,
	0xfe, 0x6e, 0x3f, 0xfb, 0xdb, 0xfd, 0xde, 0x6f, 0x9f, 0x04, 0xde, 0x58, 0x5c, 0x4e, 0xc8, 0xde,
	0x50, 0xa4, 0x4f, 0x49, 0x48, 0xf1, 0xc6, 0xb8, 0xa4, 0xc8, 0x7d, 0xf1, 0x90, 0xa4, 0xcc, 0xbe,
	0xd2, 0x84, 0xee, 0x84, 0xf5, 0xe4, 0x07, 0x76, 0xdd, 0xb5, 0xb8, 0x47, 0x96, 0x7b, 0x22, 0x92,
	0x37, 0x18, 0x0b, 0x7b, 0x83, 0xd1, 0xa8, 0x9c, 0x08, 0x26, 0xc2, 0x72, 0x94, 0xdc, 0xcf, 0x7e,
	0x45, 0xdf, 0xba, 0xfa, 0x36, 0x7a, 0x95, 0x44, 0xbc, 0x2f, 0x94, 0x20, 0xbf, 0xde, 0x87, 0xfe,
	0x84, 0x1a, 0x7b, 0xa4, 0x68, 0xa3, 0xf2, 0x42, 0xb0, 0xa7, 0x47, 0x8a, 0x7b, 0xe5, 0x18, 0x4a,
	0x9f, 0xc1, 0xd6, 0xc2, 0xfe, 0x60, 0x24, 0xdc, 0x1d, 0x4c, 0x48, 0x5e, 0xfa, 0x01, 0xff, 0xe0,
	0x79, 0x9b, 0x03, 0x55, 0x6d, 0xa1, 0x4d, 0xb2, 0x5f, 0xda, 0x02, 0x77, 0x70, 0xc0, 0xa1, 0x24,
	0xe2, 0x0d, 0x9c, 0x9b, 0x5b, 0xe5, 0x6c, 0x89, 0xab, 0xe2, 0x93, 0xbc, 0x23, 0x90, 0x88, 0x0b,
	0xeb, 0xb5, 0xf7, 0x76, 0x6a, 0xc7, 0x4e, 0x24, 0x0f, 0xbf, 0xa7, 0x9d, 0x3b, 0x94, 0xfa, 0xce,
	0x9b, 0x53, 0x97, 0xbe, 0x7b, 0x6d, 0x72, 0x70, 0x66, 0xf4, 0xaa, 0x36, 0xf1, 0xa6, 0x76, 0x7c,
	0xcc, 0x2d, 0x34, 0x3e, 0xb0, 0xda, 0x3d, 0xf5, 0xee, 0xbe, 0x99, 0x43, 0x17, 0xaf, 0x4d, 0x0e,
	0x4e, 0x5d, 0xde, 0xa9, 0x0d, 0xee, 0xd4, 0xf6, 0xff, 0x95, 0x76, 0xe6, 0x5b, 0xda, 0x85, 0x61,
	0x6d, 0xd7, 0x11, 0xed, 0xdc, 0xa1, 0xe4, 0xf8, 0x90, 0x36, 0xfc, 0x6a, 0x72, 0xf4, 0x82, 0x76,
	0xee, 0xd0, 0xf5, 0x96, 0x85, 0xf1, 0x05, 0xf5, 0x65, 0x0d, 0x4b, 0x85, 0xf9, 0x5f, 0x79, 0x66,
	0x75, 0xe3, 0xa7, 0x83, 0x8d, 0x2f, 0x89, 0x8d, 0x4f, 0x37, 0x3e, 0x77, 0xef, 0x0a, 0xbf, 0xfe,
	0xf8, 0xe6, 0x65, 0xaa, 0xb8, 0x18, 0xb8, 0x78, 0x9a, 0x2d, 0x61, 0xbe, 0xfe, 0xc1, 0x2d, 0x76,
	0xac, 0x71, 0x4f, 0x8f, 0xbf, 0x93, 0x7c, 0xfb, 0x65, 0xcf, 0x53, 0xa0, 0x1a, 0xff, 0xa6, 0xc4,
	0xe0, 0xbd, 0xc0, 0x11, 0x97, 0x12, 0x24, 0xcb, 0x77, 0xaa, 0xe2, 0x27, 0x78, 0x87, 0x5f, 0x4a,
	0x08, 0xf3, 0xd3, 0xf2, 0xeb, 0xd7, 0xef, 0x6a, 0x76, 0xab, 0xe2, 0x12, 0xb0, 0x88, 0x67, 0xa9,
	0x4d, 0xa6, 0xb5, 0x91, 0x21, 0x6d, 0xe2, 0x80, 0xe7, 0xb3, 0xa0, 0xaa, 0x23, 0x1c, 0xed, 0xf1,
	0x4b, 0x5b, 0x9a, 0xef, 0x57, 0xc5, 0x26, 0x70, 0x1f, 0x4f, 0xbf, 0x0b, 0xcb, 0xf5, 0x0f, 0xa6,
	0x6c, 0x5c, 0x9b, 0xdc, 0x93, 0x3c, 0x74, 0x72, 0xe6, 0xf8, 0x80, 0x36, 0xfc, 0x72, 0x72, 0xf4,
	0xc2, 0xb5, 0xc9, 0xbd, 0x9e, 0xf5, 0xa0, 0x1a, 0xdf, 0xad, 0xc4, 0xa0, 0xdb, 0x9c, 0xb1, 0x79,
	0xaa, 0x58, 0x83, 0x33, 0x56, 0xde, 0x21, 0x47, 0x7b, 0xac, 0xb9, 0xa1, 0x49, 0x84, 0xf9, 0xec,
	0x09, 0x24, 0x37, 0x6d, 0x00, 0x3c, 0x26, 0x05, 0x23, 0x89, 0x4d, 0x2f, 0xe9, 0x19, 0x7a, 0x48,
	0x15, 0x3f, 0x05, 0x04, 0xde, 0x74, 0x49, 0x58, 0x41, 0x3e, 0xe7, 0xce, 0xd6, 0xcf, 0x39, 0x50,
	0xc3, 0x12, 0x29, 0x31, 0xf8, 0x19, 0x50, 0x1d, 0x0a, 0x46, 0x22, 0x4f, 0x84, 0x7b, 0x25, 0x92,
	0x3f, 0xbd, 0xc8, 0xf9, 0x6a, 0x1f, 0xb9, 0x28, 0xd4, 0x1b, 0xe6, 0x92, 0x87, 0xbe, 0x3f, 0x73,
	0xe8, 0xa2, 0x9f, 0x25, 0x80, 0xf7, 0x83, 0x4a, 0x25, 0x11, 0x4c, 0xf4, 0x29, 0x0d, 0x65, 0x46,
	0x99, 0x57, 0x06, 0xd0, 0x25, 0xa1, 0x36, 0x79, 0x7c, 0x48, 0x7b, 0xf5, 0x54, 0xea, 0xd5, 0xef,
	0x27, 0x07, 0xb6, 0xfb, 0xc9, 0x8d, 0xb0, 0x09, 0x54, 0xc4, 0xa5, 0xee, 0xb0, 0xd2, 0xe0, 0x40,
	0x29, 0x1a, 0x54, 0x71, 0x01, 0x8f, 0xaf, 0x08, 0xb5, 0x7e, 0xfd, 0x8f, 0x9b, 0x24, 0xc0, 0x17,
	0x9b, 0x57, 0xaa, 0xe2, 0x5d, 0x60, 0x39, 0x6f, 0xce, 0xb3, 0x00, 0xcd, 0xa4, 0x46, 0xf1, 0x74,
	0x4a, 0x71, 0x25, 0x2c, 0x47, 0xcd, 0xc5, 0x63, 0x5c, 0x12, 0x56, 0x90, 0xcf, 0xb9, 0x8b, 0x67,
	0xc4, 0x01, 0x6a, 0x58, 0x22, 0x25, 0x06, 0x3f, 0x05, 0xaa, 0xfa, 0xf1, 0x57, 0x52, 0x3a, 0x2e,
	0x55, 0x5c, 0xc8, 0x57, 0x91, 0x5b, 0x18, 0xe3, 0xde, 0x3d, 0xc9, 0xe3, 0xdf, 0xf1, 0xd3, 0x5b,
	0xe1, 0x23, 0xc0, 0xd9, 0x13, 0x4e, 0xf8, 0xe4, 0xde, 0xde, 0x70, 0x82, 0x14, 0x8d, 0xee, 0x60,
	0xde, 0xd9, 0x4e, 0xaf, 0x0a, 0xf5, 0xc9, 0xe3, 0x03, 0xc9, 0x83, 0x17, 0xdc, 0xf8, 0xab, 0x7b,
	0x4d, 0xab, 0xdf, 0x48, 0x02, 0x9b, 0x81, 0xb3, 0xab, 0x2f, 0x1c, 0xe9, 0x46, 0x5e, 0xc1, 0x05,
	0xb5, 0x58, 0x15, 0xef, 0xe4, 0x9d, 0x2d, 0xf4, 0xaa, 0x50, 0x9b, 0x3c, 0xb1, 0x43, 0xbb, 0x3c,
	0x41, 0x5c, 0x62, 0xdc, 0x0e, 0x1f, 0x02, 0xce, 0x1e, 0x99, 0xe4, 0xaf, 0xa1, 0xdc, 0x70, 0x8b,
	0xb3, 0x9d, 0x5e, 0x15, 0x9c, 0xed, 0xb2, 0x9b, 0x64, 0xd9, 0xb8, 0x57, 0x47, 0x8d, 0xf7, 0x45,
	0xd7, 0xc9, 0xdd, 0x52, 0x43, 0x85, 0x09, 0xd5, 0x8f, 0xaf, 0x09, 0xb5, 0xd3, 0x57, 0xf7, 0x4f,
	0x9f, 0x1a, 0x4c, 0x8e, 0x9d, 0xd2, 0x26, 0x87, 0xfd, 0xf4, 0x56, 0x4b, 0xfd, 0xa9, 0xbc, 0xc9,
	0xfa, 0xc3, 0x9c, 0x6b, 0x2a, 0x71, 0x01, 0x9a, 0xfd, 0x44, 0x9c, 0xfb, 0xc3, 0x32, 0x00, 0xfc,
	0x92, 0xf2, 0x85, 0xb0, 0x92, 0xd0, 0xb5, 0x49, 0x04, 0xce, 0x58, 0x5c, 0xde, 0x2c, 0x85, 0x12,
	0x6b, 0x5a, 0x89, 0x5b, 0xee, 0xd2, 0x1b, 0x95, 0x73, 0xe6, 0xd4, 0xbb, 0xa9, 0x63, 0xe7, 0xdd,
	0x6b, 0x5a, 0xaf, 0xb7, 0xc0, 0x78, 0xbd, 0x30, 0x8f, 0x48, 0xca, 0xc6, 0xe7, 0xb6, 0x3e, 0x20,
	0x6c, 0x5b, 0xe1, 0x37, 0x52, 0xc1, 0x07, 0x81, 0x93, 0x28, 0xf0, 0x9a, 0x56, 0xe2, 0xa1, 0x85,
	0xd8, 0xc4, 0xb1, 0x5d, 0xa9, 0xf7, 0xce, 0x20, 0x13, 0x95, 0xf1, 0xf2, 0xfa, 0xba, 0x86, 0x79,
	0x7e, 0xe3, 0x4e, 0xd8, 0x0e, 0x9c, 0xd1, 0x60, 0xaf, 0xa4, 0xc4, 0x82, 0x21, 0xea, 0x98, 0x7b,
	0x54, 0x71, 0x1e, 0x5f, 0xab, 0xbd, 0x7e, 0x45, 0xdb, 0x3f, 0x94, 0x7a, 0x6b, 0x62, 0xe6, 0xd0,
	0xc5, 0xeb, 0x2d, 0x0b, 0xe2, 0xb7, 0x37, 0x3c, 0x9a, 0xa6, 0x68, 0xfc, 0x0a, 0xbf, 0x91, 0x16,
	0xb6, 0x80, 0xba, 0x48, 0xb0, 0x4b, 0x8a, 0x04, 0xa4, 0x88, 0x14, 0x4a, 0xc8, 0x71, 0xe2, 0xa9,
	0xc5, 0xaa, 0x78, 0x1b, 0x3f, 0x3f, 0x79, 0x72, 0x77, 0xea, 0xdc, 0x7b, 0x33, 0x03, 0x7b, 0x93,
	0xfb, 0xde, 0xd2, 0x8e, 0x8c, 0x5d, 0x6f, 0xa9, 0x88, 0x3b, 0x1a, 0x06, 0x38, 0xbf, 0x35, 0x49,
	0xb3, 0xa0, 0x8a, 0x5e, 0xd0, 0xc8, 0x9b, 0x4a, 0x46, 0x58, 0xf6, 0xfc, 0xc3, 0x8a, 0x7b, 0xfa,
	0x7b, 0x3b, 0x92, 0x13, 0xfb, 0xb5, 0x3d, 0x87, 0xa6, 0x4f, 0x8d, 0x25, 0xdf, 0x38, 0x3b, 0x3d,
	0x7e, 0x1a, 0x17, 0xff, 0xd4, 0x95, 0x11, 0xcf, 0x39, 0x07, 0x70, 0xfa, 0x25, 0xa5, 0x5d, 0xfa,
	0x53, 0x29, 0xc8, 0x5e, 0x50, 0xae, 0x7f, 0x21, 0xe5, 0xf7, 0x14, 0xb2, 0x41, 0x0a, 0x60, 0xff,
	0x50, 0xea, 0x5b, 0x17, 0xae, 0xb7, 0xb4, 0xc5, 0x7d, 0x0d, 0xff, 0xc3, 0x09, 0x8f, 0x3c, 0x13,
	0x6c, 0x7c, 0x69, 0x75, 0xe3, 0xa7, 0x9f, 0x5b, 0xf5, 0x4c, 0x23, 0xf9, 0xc4, 0xd3, 0x4b, 0xf7,
	0x3c, 0xba, 0xaa, 0x29, 0xe7, 0xcf, 0xf7, 0xf0, 0x7e, 0xf4, 0x18, 0xd8, 0x0c, 0x40, 0x50, 0xf9,
	0x73, 0x39, 0xde, 0xdb, 0x1a, 0x4c, 0x04, 0x51, 0x3b, 0xa9, 0xc6, 0xed, 0x64, 0xc1, 0xd4, 0xe5,
	0xb3, 0xd3, 0xa7, 0xc6, 0xb4, 0xa1, 0x51, 0xed, 0xca, 0x69, 0x6d, 0x72, 0x78, 0xfa, 0xea, 0x01,
	0xed, 0xd8, 0x09, 0xbf, 0xe9, 0x6e, 0xea, 0x2f, 0xa3, 0xfc, 0x05, 0x37, 0x76, 0x8f, 0x36, 0x34,
	0x3a, 0x75, 0xe9, 0xdb, 0x6e, 0xc3, 0x77, 0x86, 0xbf, 0xc6, 0x1c, 0xa0, 0xd6, 0x2f, 0x29, 0xbe,
	0xb8, 0x14, 0x4c, 0x48, 0x73, 0xeb, 0xb2, 0x2f, 0x80, 0xea, 0xde, 0x60, 0x34, 0xbc, 0x51, 0x52,
	0x12, 0xc8, 0x63, 0x35, 0xc2, 0xc2, 0x26, 0x1c, 0x95, 0x34, 0xd1, 0xa8, 0xa4, 0x29, 0x80, 0xa2,
	0x12, 0xdd, 0xdc, 0x1d, 0x3c, 0xc4, 0x2c, 0x33, 0x3b, 0x87, 0x52, 0x57, 0xce, 0x4f, 0x5d, 0x3d,
	0x95, 0xdc, 0x3e, 0xee, 0x67, 0x16, 0xe0, 0x97, 0x41, 0xf5, 0x46, 0x5a, 0x8c, 0xe5, 0xb9, 0xad,
	0xdd, 0xa5, 0x8a, 0x6e, 0x7e, 0xe9, 0x6c, 0x6b, 0xd7, 0x26, 0xf7, 0xe0, 0x12, 0xbf, 0x36, 0xb9,
	0xd7, 0xcf, 0xac, 0xc1, 0x47, 0x41, 0x4d, 0x9f, 0x22, 0xa5, 0xf9, 0x68, 0x89, 0x2a, 0xba, 0xf8,
	0x86, 0xe4, 0xe1, 0x71, 0x6d, 0xff, 0x9b, 0x53, 0x57, 0xae, 0xa6, 0x0e, 0x8c, 0xe1, 0xa4, 0xc9,
	0xd1, 0x0b, 0xc9, 0xa1, 0xf3, 0x7e, 0x73, 0x8a, 0xe6, 0x07, 0x55, 0x51, 0x00, 0xab, 0x79, 0x4b,
	0xb9, 0x0b, 0x6e, 0x6d, 0xcf, 0x31, 0xed, 0xf2, 0x44, 0x0e, 0x57, 0xfd, 0xa6, 0x1c, 0xb9, 0xea,
	0xc9, 0x58, 0xf7, 0x9c, 0xbb, 0xea, 0x56, 0x6d, 0x5d, 0xe6, 0x2a, 0x56, 0x51, 0xd0, 0x2a, 0x56,
	0x59, 0xcc, 0x2a, 0x56, 0x65, 0xa7, 0x8a, 0xb1, 0xfa, 0x22, 0xb8, 0x93, 0xc7, 0x2e, 0x26, 0x0f,
	0x5e, 0xc8, 0x51, 0xc5, 0xfe, 0x50, 0x86, 0xaa, 0x58, 0xab, 0x14, 0x91, 0xfe, 0xbf, 0x8a, 0x7d,
	0xa4, 0x2a, 0x66, 0x2e, 0x79, 0x56, 0x8c, 0x7a, 0xe3, 0x3e, 0x39, 0x73, 0xe4, 0x4c, 0x8e, 0x92,
	0xff, 0x3b, 0x07, 0xa8, 0xeb, 0x90, 0xbb, 0x6f, 0xf5, 0x20, 0xe4, 0xde, 0x42, 0x07, 0x21, 0xf0,
	0x73, 0xc0, 0x29, 0xbf, 0x10, 0x95, 0xe2, 0xeb, 0x75, 0x1f, 0x56, 0xd0, 0x00, 0xf0, 0x0e, 0x1e,
	0x26, 0xf7, 0x0e, 0x68, 0x6f, 0x9f, 0xb0, 0x7a, 0x12, 0x99, 0x28, 0xf3, 0x1b, 0x29, 0xe0, 0x67,
	0x49, 0xf2, 0xc7, 0xc3, 0xd1, 0x6e, 0x12, 0x3f, 0x2e, 0x9d, 0x95, 0x3c, 0xf5, 0xf6, 0x65, 0xed,
	0xc4, 0xbe, 0xeb, 0x2d, 0xe5, 0xf1, 0xb2, 0x86, 0xcf, 0xfb, 0x8d, 0x04, 0xd4, 0x99, 0x56, 0xcf,
	0x08, 0xcb, 0x3a, 0xe4, 0xee, 0x9c, 0x41, 0xd0, 0x5e, 0x07, 0xa8, 0xf7, 0xc9, 0xd1, 0x44, 0x30,
	0x1c, 0x95, 0xe2, 0x7f, 0x42, 0xfe, 0xdc, 0x02, 0xaa, 0x62, 0x72, 0xf7, 0x7a, 0xa3, 0x35, 0x7d,
	0x49, 0x15, 0x6b, 0x79, 0xa0, 0x17, 0x47, 0x81, 0xdb, 0x12, 0x7d, 0x4e, 0xf3, 0xa3, 0xaa, 0xf8,
	0x59, 0xd0, 0xcc, 0xcf, 0x2a, 0x4e, 0x61, 0xa5, 0x25, 0xb4, 0x41, 0x59, 0x38, 0xff, 0xae, 0x76,
	0x64, 0x0c, 0xeb, 0xaa, 0xe1, 0x8b, 0xa4, 0x03, 0xcc, 0x67, 0x89, 0x6f, 0xe5, 0xb0, 0x74, 0xae,
	0x5d, 0x01, 0x9f, 0x03, 0x75, 0x21, 0x5a, 0x90, 0xa6, 0xd6, 0xf8, 0x10, 0xce, 0x3f, 0x2a, 0x7c,
	0xfa, 0xe8, 0xbb, 0xe2, 0xcb, 0x1b, 0x1e, 0x15, 0x96, 0xe4, 0x34, 0xed, 0xb7, 0x5a, 0x6b, 0x7e,
	0x44, 0x15, 0x3f, 0x03, 0x3e, 0xcd, 0xa7, 0x3b, 0x8b, 0x3a, 0x1a, 0xb9, 0x38, 0x39, 0xb8, 0x5b,
	0x3b, 0x7f, 0x34, 0xb3, 0xa3, 0xff, 0xc8, 0x81, 0x3b, 0xda, 0xa5, 0xc4, 0xe3, 0x0f, 0x07, 0xfc,
	0x92, 0xf2, 0x84, 0xd4, 0x1b, 0x8b, 0xcc, 0x79, 0x98, 0xd4, 0x04, 0xca, 0x9f, 0xd7, 0x75, 0xc7,
	0x41, 0xbb, 0xbb, 0xec, 0xd5, 0x43, 0x15, 0x47, 0x4f, 0xe4, 0x68, 0xf8, 0xbc, 0x1f, 0xdd, 0xd7,
	0xdc, 0xac, 0x8a, 0x0f, 0x81, 0x07, 0xf9, 0x8c, 0x18, 0xc2, 0x92, 0xe9, 0xd7, 0xde, 0xd1, 0x86,
	0x0f, 0xba, 0x1f, 0x7f, 0x38, 0x40, 0xc4, 0x27, 0x39, 0x76, 0x2a, 0xb5, 0x77, 0x4f, 0xea, 0xcc,
	0xc4, 0xd4, 0x7b, 0xfb, 0x3c, 0x57, 0xca, 0x40, 0x8d, 0xef, 0x8b, 0x5d, 0x9b, 0xe7, 0x5e, 0x6e,
	0xee, 0x07, 0x55, 0x3e, 0x7f, 0x2b, 0xaa, 0x21, 0x0e, 0x9a, 0xa8, 0x96, 0x07, 0x3e, 0x7f, 0xab,
	0x3b, 0x4d, 0xa7, 0xe9, 0x7d, 0xd6, 0x66, 0x51, 0xfe, 0xd1, 0x5f, 0xf6, 0xcd, 0x0f, 0xab, 0xe2,
	0x83, 0xe0, 0x01, 0xde, 0x5c, 0x12, 0xc2, 0x8a, 0xe9, 0xdd, 0xdf, 0xd6, 0xce, 0x1f, 0x9d, 0x7a,
	0x77, 0x6f, 0x2e, 0xcd, 0x7e, 0xc7, 0x01, 0x80, 0x9e, 0x6a, 0xce, 0x25, 0xe2, 0x23, 0x14, 0xdf,
	0x23, 0xa0, 0x3a, 0x24, 0x77, 0x6d, 0x36, 0xa9, 0x81, 0x07, 0x75, 0x19, 0xd3, 0xc1, 0xad, 0xc9,
	0x59, 0x1a, 0x6b, 0xf1, 0x57, 0xd8, 0x88, 0xb5, 0xac, 0xbd, 0xd7, 0xca, 0x9b, 0xea, 0xbd, 0xd2,
	0x21, 0x35, 0xc3, 0x09, 0x79, 0x7a, 0xee, 0x43, 0x07, 0xa8, 0xd3, 0x13, 0x7d, 0x1c, 0xfa, 0xb0,
	0x1f, 0xc1, 0x79, 0xe6, 0x3e, 0x49, 0x79, 0x41, 0xfb, 0x24, 0x15, 0xc5, 0xec, 0x93, 0x54, 0xde,
	0x74, 0x9f, 0x84, 0xa8, 0x9b, 0xd5, 0x57, 0xc2, 0x0a, 0x73, 0xbf, 0x37, 0xcd, 0xdf, 0x86, 0x8f,
	0x7f, 0x57, 0x8e, 0x7d, 0xfc, 0x71, 0xe8, 0xfc, 0xde, 0xca, 0x0d, 0xd4, 0x5c, 0xd9, 0x2a, 0x0b,
	0x5a, 0xd9, 0xaa, 0x8a, 0x59, 0xd9, 0xaa, 0x6d, 0x55, 0x36, 0xa3, 0x07, 0xbc, 0xc2, 0xdc, 0x03,
	0xce, 0x5a, 0xd9, 0xb6, 0x13, 0x41, 0xf9, 0x38, 0x74, 0x83, 0x6f, 0xe1, 0xca, 0x66, 0xf1, 0x81,
	0xd1, 0x17, 0x5e, 0x61, 0xee, 0x0b, 0x67, 0xf5, 0xc1, 0x80, 0xfe, 0x3a, 0x96, 0x7b, 0x7b, 0xc9,
	0x34, 0x49, 0x13, 0x28, 0x0f, 0xc9, 0xdd, 0x78, 0x06, 0xa9, 0x02, 0xbf, 0x52, 0xd0, 0x05, 0x61,
	0x3e, 0x7e, 0x93, 0xcc, 0x1c, 0x38, 0x32, 0x3d, 0x3e, 0x9e, 0x3a, 0xb9, 0xdd, 0x8f, 0x2e, 0xc3,
	0x66, 0x50, 0xd5, 0x2b, 0x29, 0x4a, 0xb0, 0x47, 0x32, 0x4f, 0x8f, 0xd0, 0x6b, 0x02, 0x34, 0xa7,
	0x22, 0xd5, 0x9a, 0xfe, 0x08, 0x1f, 0x06, 0xce, 0xb8, 0xb4, 0xa5, 0x4f, 0x52, 0x74, 0x67, 0x3b,
	0x8c, 0x99, 0x0a, 0x40, 0xae, 0xba, 0xc3, 0xdd, 0x82, 0x13, 0xe7, 0x14, 0x4d, 0xab, 0xb0, 0x9b,
	0x61, 0x2b, 0x28, 0xef, 0xce, 0x63, 0xbc, 0x11, 0xb5, 0x2c, 0x74, 0xa7, 0x40, 0xc2, 0x41, 0x92,
	0x05, 0x74, 0xad, 0x79, 0x27, 0xa7, 0x8a, 0xdb, 0x39, 0xf0, 0x0d, 0xde, 0x54, 0x00, 0xc2, 0x96,
	0x99, 0x81, 0xa3, 0xa9, 0x03, 0x63, 0x78, 0xbe, 0x62, 0xea, 0xca, 0xc8, 0xb5, 0xc9, 0xc1, 0x99,
	0x81, 0x97, 0x53, 0x07, 0xc6, 0xa6, 0x26, 0x5e, 0x23, 0xfe, 0x3c, 0xb1, 0xcf, 0x34, 0xf5, 0x84,
	0x01, 0xaf, 0x4d, 0x0e, 0x6a, 0x6f, 0xbe, 0x3c, 0x73, 0x7c, 0x80, 0x14, 0xf2, 0xf8, 0x9b, 0xa9,
	0xcb, 0xbb, 0x52, 0x47, 0x77, 0xb8, 0xf5, 0x07, 0xb9, 0x53, 0x97, 0x47, 0x92, 0x27, 0x76, 0x68,
	0x7b, 0x8e, 0x4c, 0x5d, 0x1a, 0x22, 0xed, 0x69, 0xfc, 0x2c, 0x7b, 0x82, 0x67, 0xd0, 0x01, 0xe6,
	0xe1, 0x1c, 0xe0, 0x48, 0xea, 0x96, 0x71, 0x43, 0xbb, 0xc5, 0x0d, 0xae, 0x59, 0x6e, 0xd0, 0x71,
	0x3a, 0x83, 0x91, 0x3e, 0xe9, 0x46, 0x9e, 0x78, 0x95, 0x53, 0xc5, 0x5d, 0x1c, 0x78, 0x85, 0xe3,
	0xd3, 0x0a, 0x62, 0x2e, 0xdc, 0xf1, 0xbe, 0x03, 0xd4, 0x06, 0xfa, 0xba, 0x94, 0x50, 0x3c, 0xdc,
	0x35, 0xc7, 0xa2, 0xd4, 0x06, 0xe6, 0xd3, 0x75, 0x05, 0x74, 0x22, 0x10, 0x3b, 0x68, 0x11, 0x1a,
	0xd9, 0x21, 0x5d, 0x1c, 0x34, 0x01, 0xa8, 0x0d, 0xbf, 0x83, 0xc7, 0x55, 0xdc, 0xfe, 0xf4, 0x34,
	0xb0, 0x91, 0x74, 0x8f, 0xd8, 0x24, 0xe2, 0xac, 0xee, 0x11, 0x19, 0x12, 0x42, 0xb7, 0x99, 0xa5,
	0xb0, 0x22, 0x97, 0x14, 0x72, 0x86, 0x14, 0x3e, 0x04, 0x40, 0x30, 0x16, 0xa6, 0x79, 0xac, 0x34,
	0xa5, 0xd2, 0x5d, 0x83, 0x73, 0xc8, 0x52, 0x99, 0x6e, 0x85, 0x7f, 0x66, 0xd6, 0xc0, 0x2a, 0x3a,
	0x93, 0x3c, 0x4b, 0x03, 0xc9, 0x80, 0x91, 0x21, 0x79, 0xbc, 0x2a, 0x7e, 0x12, 0xdc, 0xcd, 0x5b,
	0x1c, 0x25, 0x2c, 0x98, 0x3e, 0x7f, 0x7a, 0xe6, 0xf0, 0xce, 0x74, 0x89, 0xbb, 0xec, 0x00, 0x75,
	0xa6, 0xfb, 0x4a, 0xdc, 0xbc, 0xee, 0xb5, 0xf4, 0x4d, 0x71, 0x43, 0xd0, 0x2f, 0x08, 0x16, 0x17,
	0x90, 0xa2, 0x6f, 0x02, 0xe5, 0x89, 0x17, 0x63, 0xf4, 0x75, 0x82, 0xe7, 0x6d, 0xe5, 0x98, 0x14,
	0x0f, 0x26, 0x24, 0xa1, 0x36, 0x39, 0x32, 0x34, 0x75, 0xe5, 0x38, 0xbd, 0x5f, 0xbf, 0x0f, 0xae,
	0x02, 0x8e, 0xbe, 0x70, 0x37, 0x71, 0xd3, 0x27, 0x54, 0xf1, 0x76, 0x5e, 0xff, 0x2e, 0xd4, 0x6a,
	0x07, 0xc6, 0xa7, 0x2e, 0x0d, 0x24, 0x4f, 0xee, 0x9e, 0x1e, 0xdf, 0xe5, 0xd7, 0x2f, 0xc1, 0xce,
	0xfc, 0x03, 0x92, 0xe5, 0xaa, 0xb8, 0x94, 0x67, 0x77, 0x0b, 0xb9, 0x43, 0x93, 0x0d, 0xa0, 0x86,
	0x7e, 0x6e, 0xfb, 0x5a, 0xe2, 0x46, 0xd1, 0xc9, 0x0a, 0x55, 0x5c, 0xce, 0x9b, 0x13, 0x50, 0xeb,
	0xc9, 0xbd, 0x6f, 0x69, 0x6f, 0x8f, 0x12, 0xeb, 0xe6, 0x1b, 0x3c, 0xbf, 0xe5, 0xc0, 0xa2, 0x35,
	0x51, 0xba, 0xc0, 0xa5, 0x35, 0xac, 0x84, 0xe4, 0x7e, 0x29, 0xfe, 0xa2, 0x2f, 0x18, 0xda, 0x34,
	0xb7, 0xad, 0xb3, 0x79, 0xad, 0x2a, 0xb6, 0x83, 0x36, 0x3e, 0x57, 0xee, 0x84, 0x95, 0x53, 0x97,
	0x2e, 0x6b, 0xaf, 0x8e, 0x4d, 0x5d, 0xb9, 0x4a, 0x6c, 0xb1, 0x5b, 0xdc, 0xa9, 0xc9, 0x11, 0xed,
	0xdc, 0x61, 0xed, 0xcc, 0xdb, 0xc9, 0xd1, 0x3d, 0x9e, 0xf7, 0xcb, 0xc0, 0x1d, 0x7a, 0x4c, 0xe5,
	0x97, 0xa2, 0xdd, 0x52, 0xbc, 0x23, 0x2e, 0xf5, 0x87, 0xa5, 0x17, 0xe6, 0x56, 0x7c, 0x1a, 0x2d,
	0x15, 0xf7, 0x86, 0xaa, 0xb1, 0x26, 0xff, 0x79, 0xc0, 0x3b, 0xb0, 0x7a, 0xe1, 0x6e, 0xea, 0xe0,
	0x41, 0x12, 0x56, 0xb2, 0xe4, 0xcd, 0x2d, 0xaa, 0xf8, 0x28, 0xf8, 0x1c, 0x9f, 0xb1, 0x40, 0x84,
	0xbb, 0xcd, 0xb1, 0x68, 0xf2, 0xd2, 0x77, 0x93, 0x6f, 0x8c, 0x4c, 0x5d, 0x9a, 0x70, 0xaf, 0x23,
	0x55, 0xc6, 0x3d, 0x73, 0x7a, 0xc7, 0xf4, 0xb7, 0xf6, 0x08, 0x47, 0x2b, 0x40, 0x45, 0x4b, 0x50,
	0x09, 0x87, 0xa0, 0xca, 0x81, 0xf2, 0xb6, 0xd0, 0x26, 0x19, 0xde, 0xd9, 0x94, 0xbe, 0x56, 0xab,
	0x89, 0xac, 0x46, 0x72, 0xb9, 0xb2, 0xfd, 0xa4, 0xc4, 0x3c, 0x01, 0x55, 0xbc, 0x0f, 0x56, 0xd3,
	0x35, 0x45, 0x2e, 0x37, 0xfa, 0x94, 0x7c, 0xed, 0xac, 0x36, 0xfc, 0xcd, 0x6b, 0x93, 0x83, 0xf8,
	0x55, 0xa4, 0x4d, 0x0e, 0x68, 0xc3, 0xaf, 0x27, 0xbf, 0xb7, 0x6f, 0x7a, 0x7c, 0xf4, 0xe5, 0x9f,
	0x4d, 0x8d, 0x94, 0x2d, 0xf5, 0xdc, 0xe9, 0x4d, 0x37, 0xe9, 0xed, 0xbf, 0xdf, 0x2b, 0x85, 0x36,
	0xc9, 0xcd, 0x1c, 0x0f, 0x8f, 0x71, 0xa0, 0xbc, 0x23, 0x1c, 0xed, 0xc9, 0x94, 0x29, 0xb2, 0x36,
	0x29, 0x53, 0xa6, 0xe8, 0xaa, 0x22, 0xcf, 0xb3, 0xaa, 0xf8, 0x30, 0xac, 0xa6, 0x4b, 0x8b, 0x5c,
	0xf7, 0xa1, 0x4f, 0x69, 0x99, 0x4a, 0x7e, 0x73, 0x20, 0xf9, 0xc6, 0x59, 0xbc, 0xb0, 0x05, 0x07,
	0xf3, 0xda, 0xb9, 0xc3, 0xc9, 0x8b, 0x97, 0x51, 0x06, 0x17, 0xc1, 0xcc, 0x19, 0x8c, 0xe9, 0x99,
	0x3a, 0xc7, 0x81, 0x2a, 0xb2, 0x34, 0x07, 0x2e, 0x9e, 0x9d, 0x0b, 0x63, 0xad, 0x92, 0x6b, 0x49,
	0x8e, 0x5f, 0x95, 0x98, 0x47, 0x52, 0xc5, 0x47, 0x60, 0x8d, 0x69, 0x95, 0x8f, 0xcb, 0x4b, 0xbf,
	0xe4, 0xc8, 0xac, 0xb6, 0xfd, 0xac, 0x36, 0xf1, 0x0e, 0x5e, 0x3e, 0x84, 0x4b, 0x13, 0x2e, 0xce,
	0x98, 0xd9, 0x4d, 0x24, 0x8f, 0x7a, 0x7e, 0xe9, 0x1b, 0x25, 0x43, 0x7e, 0x8d, 0xc5, 0x43, 0x99,
	0xf2, 0x6b, 0x5a, 0xb3, 0x42, 0xf2, 0x6b, 0x5a, 0xb8, 0xe2, 0xf2, 0xd2, 0x2f, 0x69, 0xf9, 0xc5,
	0x83, 0x84, 0xe6, 0x55, 0x43, 0x58, 0xbc, 0x72, 0xe6, 0x97, 0x2c, 0x2b, 0x12, 0xde, 0xe7, 0x80,
	0x73, 0x3d, 0xeb, 0x2b, 0xfe, 0x80, 0x03, 0x95, 0x7a, 0xc0, 0xb3, 0x3e, 0x90, 0x29, 0xf3, 0xc6,
	0x7c, 0x88, 0x2b, 0xc3, 0xaf, 0x46, 0xe4, 0xea, 0x79, 0x49, 0x15, 0x57, 0x42, 0x80, 0x0d, 0xa1,
	0xac, 0x37, 0xe0, 0x3c, 0x9a, 0xdf, 0xa4, 0x78, 0x60, 0x07, 0xe5, 0xf1, 0x71, 0xb8, 0x26, 0x73,
	0x05, 0xc0, 0xba, 0xa1, 0x78, 0xb7, 0x32, 0x05, 0xd9, 0x46, 0x6f, 0x54, 0xbc, 0x5b, 0x99, 0x3e,
	0x6c, 0xf3, 0xb2, 0xb7, 0xb1, 0x22, 0x5c, 0xf5, 0x81, 0xea, 0x2f, 0xc9, 0xf1, 0xe7, 0x23, 0x72,
	0xb0, 0x1b, 0xfe, 0x9e, 0x03, 0x28, 0x1b, 0xad, 0x52, 0x2c, 0x22, 0xbf, 0x68, 0x8b, 0xe9, 0x24,
	0xa7, 0x8a, 0x3c, 0x9c, 0x67, 0x58, 0x33, 0x83, 0xb9, 0xf1, 0xa5, 0x5e, 0x29, 0x9a, 0x70, 0x9b,
	0xc0, 0x7a, 0xe1, 0xf3, 0x05, 0x03, 0xf3, 0x6e, 0x65, 0x9f, 0xb7, 0x79, 0x5f, 0x20, 0x80, 0x8a,
	0xb7, 0x9b, 0x3d, 0x58, 0x81, 0xd3, 0x1c, 0x70, 0xb6, 0x4b, 0x14, 0x76, 0x51, 0x46, 0x58, 0x3c,
	0xcc, 0x76, 0x03, 0xd6, 0x37, 0x38, 0x55, 0xf4, 0xc0, 0x3a, 0x66, 0x0b, 0xa1, 0xde, 0x36, 0x0b,
	0x15, 0x31, 0x26, 0x60, 0xbc, 0x84, 0x8c, 0xf8, 0x8e, 0x6d, 0xf0, 0x9f, 0x38, 0x50, 0x8b, 0x07,
	0x94, 0x08, 0xed, 0xd2, 0x8c, 0xb4, 0x6c, 0xcc, 0xe9, 0x06, 0xc0, 0xbb, 0x39, 0x55, 0xbc, 0x1b,
	0xd6, 0x9b, 0x2d, 0x62, 0x66, 0x3c, 0x52, 0x95, 0xce, 0xfc, 0x94, 0xe7, 0x09, 0x9b, 0xcc, 0x19,
	0xe1, 0x74, 0x35, 0xfe, 0x2f, 0x0e, 0xd4, 0xe2, 0xc1, 0x8b, 0x9c, 0x60, 0x6c, 0x7c, 0xe3, 0x06,
	0x60, 0x67, 0x31, 0x98, 0xd9, 0x22, 0x06, 0xc3, 0xa3, 0x22, 0xe9, 0x60, 0x2f, 0xb8, 0xe6, 0xc0,
	0x99, 0x3a, 0xf6, 0x7f, 0x72, 0xa0, 0x16, 0x8f, 0x17, 0xe4, 0xc4, 0x66, 0x43, 0x0a, 0x37, 0xc0,
	0x3e, 0x8d, 0xb1, 0xcd, 0x16, 0xa9, 0x3f, 0x4f, 0xce, 0x1c, 0x39, 0x33, 0xab, 0x0e, 0xf3, 0x73,
	0x51, 0x87, 0x3f, 0x24, 0x62, 0xdb, 0x6a, 0x4f, 0x6c, 0x8f, 0x22, 0x56, 0x2c, 0x73, 0x58, 0x6d,
	0x17, 0xd2, 0x96, 0x1a, 0x94, 0x7a, 0xe5, 0x68, 0x40, 0xb2, 0x68, 0x52, 0x04, 0x6e, 0x2e, 0x3a,
	0x2b, 0x7a, 0xae, 0x22, 0x25, 0x14, 0xf8, 0x01, 0x07, 0x2a, 0x74, 0x19, 0x09, 0xd8, 0x91, 0xa3,
	0x23, 0x9c, 0x2a, 0x2e, 0x81, 0x48, 0xda, 0x30, 0x60, 0x7d, 0x3a, 0x20, 0x22, 0x53, 0xe0, 0x96,
	0xd2, 0x91, 0x51, 0x27, 0xfe, 0x98, 0x03, 0xd5, 0x44, 0x36, 0x02, 0x36, 0x45, 0x68, 0x3b, 0xa7,
	0x8a, 0x6e, 0x48, 0x65, 0x8d, 0x90, 0x52, 0x01, 0xb2, 0x90, 0x7e, 0xd9, 0x13, 0x28, 0x9c, 0xfe,
	0x30, 0x24, 0xbd, 0x1d, 0xfe, 0x8e, 0x03, 0xd5, 0x44, 0x2c, 0x02, 0x36, 0xa5, 0xe7, 0x0d, 0x8c,
	0x43, 0xad, 0x61, 0x1c, 0x2a, 0x3b, 0x16, 0x9c, 0x7e, 0x57, 0xe9, 0x1d, 0xa7, 0xc3, 0xa6, 0x38,
	0x50, 0x4d, 0x24, 0x22, 0x60, 0x53, 0x70, 0x8e, 0x63, 0x58, 0x6a, 0x8d, 0xfa, 0x0e, 0x8b, 0x8d,
	0xb5, 0x96, 0xf2, 0x73, 0x50, 0x4b, 0x53, 0x1c, 0xa8, 0xd2, 0x05, 0x22, 0xf0, 0x84, 0x3d, 0xad,
	0xd1, 0x7d, 0xba, 0x0a, 0xd6, 0x10, 0x53, 0x88, 0xf2, 0x4e, 0xd2, 0x16, 0x03, 0x89, 0x60, 0x42,
	0xda, 0xd8, 0x17, 0x49, 0x93, 0x9b, 0x28, 0x8c, 0x14, 0x1b, 0x57, 0x21, 0x4f, 0x46, 0x82, 0x33,
	0xc5, 0x81, 0xca, 0x76, 0x09, 0x81, 0xda, 0x50, 0x9c, 0x13, 0xc8, 0x9d, 0x00, 0x1b, 0x42, 0x98,
	0x70, 0x36, 0x26, 0xe2, 0xeb, 0x83, 0x4a, 0x29, 0xf9, 0xa8, 0x43, 0x7f, 0xca, 0x01, 0x27, 0x16,
	0x0a, 0x9d, 0xd4, 0x9e, 0xee, 0xec, 0xe2, 0x54, 0xf1, 0x2e, 0x58, 0xc7, 0xcc, 0x61, 0x5e, 0x22,
	0x3c, 0xe9, 0xbc, 0x4f, 0x7b, 0x9e, 0x2c, 0x98, 0xf4, 0x98, 0xc1, 0xf4, 0xf6, 0xf8, 0x1f, 0x1c,
	0x70, 0x62, 0xb9, 0xc8, 0x0e, 0x95, 0xaf, 0xfa, 0x9c, 0xc1, 0x50, 0xcc, 0x1c, 0x86, 0x22, 0xf2,
	0x93, 0x0e, 0xf5, 0x35, 0xd7, 0x5c, 0x38, 0x51, 0x47, 0xfe, 0x77, 0x0e, 0x38, 0xb1, 0x68, 0x64,
	0x47, 0xce, 0x57, 0x83, 0x4e, 0x61, 0x64, 0x66, 0x8e, 0xfa, 0x11, 0x89, 0xd0, 0xac, 0x7a, 0xcb,
	0xcf, 0x49, 0xbd, 0xfd, 0x15, 0x89, 0x79, 0x7c, 0x6b, 0x6d, 0xe9, 0xd0, 0x41, 0x84, 0x0a, 0xb0,
	0x25, 0xc4, 0xb9, 0x80, 0xb4, 0x4f, 0x5f, 0x5c, 0x8e, 0xae, 0x95, 0xbb, 0xcc, 0x12, 0xb4, 0x19,
	0x6e, 0x2a, 0x36, 0x6a, 0x28, 0x2e, 0x47, 0x37, 0xcb, 0x5d, 0x0a, 0xfc, 0x25, 0x8e, 0x77, 0x7c,
	0x6b, 0xed, 0xa8, 0xcf, 0x28, 0xa7, 0x8a, 0x8b, 0x50, 0xbc, 0x43, 0xe0, 0xe6, 0x59, 0xe1, 0x10,
	0xd5, 0x16, 0x28, 0x97, 0x8a, 0x8a, 0x3a, 0xef, 0x87, 0x2c, 0xd6, 0xf1, 0xad, 0xb5, 0xa9, 0x39,
	0xdb, 0x54, 0x71, 0x29, 0x0d, 0x75, 0x28, 0x24, 0x51, 0x1c, 0x33, 0x64, 0xa7, 0xe7, 0x2f, 0x0a,
	0xa6, 0x36, 0x94, 0x46, 0x6f, 0x76, 0x49, 0x16, 0xe6, 0x64, 0x25, 0xc9, 0x57, 0x68, 0x8e, 0x71,
	0x08, 0x85, 0x5a, 0xc3, 0x28, 0x44, 0x67, 0xcc, 0x28, 0x09, 0x57, 0xa9, 0xfd, 0xa5, 0x83, 0xfe,
	0x96, 0x85, 0x38, 0x59, 0x41, 0xf3, 0x95, 0x97, 0xc3, 0x18, 0x94, 0x5a, 0xa3, 0x3e, 0x43, 0xea,
	0x62, 0xa9, 0x98, 0x7c, 0xc9, 0x2b, 0xe6, 0x2f, 0x48, 0x78, 0xb3, 0x56, 0xee, 0xb2, 0x25, 0x2b,
	0xc3, 0xe8, 0xb5, 0x5f, 0x43, 0x4c, 0x59, 0x46, 0x3d, 0xd2, 0x34, 0x65, 0x23, 0xec, 0x2e, 0x36,
	0x24, 0xd2, 0x93, 0x7f, 0xc4, 0xe1, 0x8c, 0x0e, 0x66, 0x43, 0x50, 0x5e, 0xe3, 0x54, 0xb1, 0x01,
	0x85, 0x33, 0x14, 0x0b, 0x18, 0x58, 0xa5, 0x1a, 0xa9, 0x32, 0x3b, 0xec, 0x6f, 0x58, 0xf8, 0xa2,
	0x93, 0xd9, 0x93, 0x92, 0x7e, 0x5d, 0x2c, 0xeb, 0x98, 0x35, 0x8c, 0x47, 0xb4, 0x84, 0xe2, 0xf9,
	0x3d, 0xeb, 0x0a, 0xa6, 0x23, 0x54, 0x43, 0x7e, 0xc3, 0xa2, 0x95, 0xec, 0x0c, 0xf9, 0x8a, 0xc8,
	0x01, 0xa4, 0xf8, 0x75, 0xcc, 0x1c, 0x86, 0x20, 0x2a, 0x42, 0x21, 0x62, 0xae, 0x52, 0xfa, 0x48,
	0x47, 0xfc, 0x15, 0x8b, 0x4e, 0xb2, 0x23, 0xe6, 0x2b, 0x1f, 0xaf, 0x63, 0x44, 0x66, 0x8e, 0xfa,
	0x09, 0xe9, 0x07, 0xab, 0x86, 0x7c, 0x49, 0xab, 0xe1, 0x3f, 0x93, 0x68, 0xa4, 0x43, 0x86, 0xcb,
	0x32, 0xcc, 0x70, 0x98, 0x77, 0x00, 0xe4, 0xd1, 0xc2, 0x96, 0xe1, 0x80, 0xa4, 0x43, 0xb6, 0x08,
	0x07, 0x5a, 0x9e, 0x5d, 0x52, 0xe1, 0x88, 0xc9, 0xdd, 0x8a, 0xde, 0x41, 0xd0, 0x03, 0x91, 0x0e,
	0xd9, 0x8e, 0x6e, 0x0c, 0x71, 0xaa, 0xb8, 0x10, 0x05, 0x22, 0x04, 0x0a, 0x18, 0x50, 0xa5, 0x92,
	0x0d, 0x9d, 0x86, 0xfa, 0xeb, 0x2a, 0x0b, 0x40, 0x3a, 0x64, 0x9b, 0xaa, 0xd1, 0xa7, 0x8a, 0x2e,
	0x1a, 0x80, 0x50, 0x38, 0x22, 0x1a, 0x14, 0xae, 0x90, 0xa2, 0xa1, 0x53, 0xe8, 0x2d, 0xea, 0x03,
	0x16, 0x78, 0x64, 0x25, 0xc8, 0x57, 0x33, 0x46, 0x38, 0x84, 0x40, 0xad, 0x59, 0x24, 0x83, 0x22,
	0x94, 0x40, 0x32, 0x4c, 0xfe, 0xd1, 0x01, 0xff, 0x85, 0x05, 0x1c, 0x59, 0x01, 0xf3, 0x55, 0x8c,
	0xfd, 0x18, 0x90, 0x5a, 0xb3, 0x08, 0x06, 0xab, 0x80, 0x7c, 0x49, 0x2b, 0xa0, 0xde, 0x5d, 0xc3,
	0x6d, 0xbc, 0xa3, 0xd3, 0x67, 0xa7, 0x65, 0xe9, 0xdd, 0xd3, 0x7b, 0x60, 0x1d, 0xb3, 0x65, 0x99,
	0x4c, 0x42, 0x92, 0xb1, 0xf3, 0xaf, 0xa7, 0xb7, 0x1f, 0x48, 0x1d, 0xdd, 0xe1, 0xee, 0xe8, 0xf4,
	0x21, 0xd4, 0x38, 0x8c, 0x95, 0x10, 0xd5, 0x1b, 0xeb, 0x0f, 0x29, 0xf0, 0x0f, 0x1c, 0xa8, 0xc6,
	0x79, 0xf4, 0xad, 0xb3, 0x83, 0x3b, 0xce, 0xa9, 0x62, 0x13, 0xac, 0xa5, 0xa6, 0x10, 0xed, 0xd2,
	0x8c, 0xb4, 0x3e, 0x39, 0xba, 0x31, 0xdc, 0xb3, 0x2e, 0x18, 0xc3, 0x1d, 0x73, 0xd8, 0x5f, 0x4a,
	0xe6, 0x10, 0x7a, 0x78, 0x6f, 0x30, 0xa6, 0xc0, 0xff, 0xe6, 0x00, 0xc9, 0x6e, 0x40, 0x0a, 0xc5,
	0xa5, 0x84, 0x1d, 0xfa, 0x73, 0x9c, 0x2a, 0x7a, 0x61, 0xbd, 0xd9, 0x1c, 0x2a, 0x81, 0x45, 0x19,
	0x4b, 0x00, 0xdf, 0x50, 0xaa, 0xc1, 0x25, 0x33, 0xbe, 0x82, 0x9e, 0x8c, 0xbc, 0x5e, 0xeb, 0x97,
	0x94, 0xd0, 0x26, 0xa9, 0xbb, 0x2f, 0x62, 0x5f, 0xa8, 0xc6, 0x38, 0x55, 0x5c, 0x01, 0xeb, 0xcd,
	0x16, 0xf1, 0xf8, 0xe8, 0xcc, 0xee, 0xa1, 0xe4, 0xc1, 0x0b, 0xd3, 0x17, 0x5e, 0xd1, 0x26, 0xde,
	0x64, 0x2d, 0x7a, 0xab, 0xab, 0xa4, 0x2e, 0x8f, 0xb3, 0x5c, 0xe9, 0xea, 0xf5, 0x7a, 0x19, 0x40,
	0x6d, 0x92, 0x6d, 0x48, 0x82, 0x9e, 0x4c, 0x68, 0xd6, 0x7d, 0x69, 0x2e, 0x77, 0x36, 0x7c, 0xba,
	0x76, 0xd0, 0xf3, 0x2e, 0xa7, 0x8a, 0x0f, 0xc2, 0xdb, 0x2c, 0xa6, 0xf1, 0x12, 0x0e, 0x73, 0x15,
	0x40, 0xa7, 0xda, 0xa4, 0x8e, 0xee, 0x20, 0x1b, 0xab, 0x8c, 0xa0, 0x61, 0x2b, 0x7c, 0xb1, 0x34,
	0x65, 0x42, 0xf6, 0x7d, 0xa1, 0x96, 0x80, 0x73, 0xa9, 0xc0, 0xd3, 0x65, 0xa0, 0xb6, 0x5d, 0x32,
	0x15, 0xc9, 0xf2, 0x1c, 0x45, 0x92, 0x57, 0x7b, 0xf8, 0x09, 0xa7, 0x8a, 0xcd, 0xb0, 0xde, 0x6c,
	0x14, 0x15, 0xc6, 0x4a, 0xb2, 0x92, 0x01, 0xed, 0xf8, 0x42, 0x45, 0x32, 0x75, 0x69, 0x1f, 0x5e,
	0x34, 0x6c, 0xde, 0xff, 0x85, 0x8a, 0x64, 0x90, 0x83, 0x7b, 0xb9, 0x39, 0x2b, 0x14, 0xef, 0x56,
	0xcb, 0x46, 0xb6, 0x6d, 0xf0, 0x47, 0x65, 0xe0, 0x76, 0x33, 0x4f, 0x5b, 0xb4, 0x7f, 0x4d, 0x74,
	0xa3, 0x9c, 0x4f, 0x59, 0xdd, 0xb8, 0xf6, 0xfc, 0x1b, 0xa7, 0x8a, 0xeb, 0xe0, 0xc2, 0x0c, 0xf6,
	0x51, 0xb1, 0x09, 0x37, 0x2a, 0xb6, 0xd4, 0x6b, 0xe3, 0xda, 0xe9, 0x57, 0xb4, 0xe1, 0xc3, 0x33,
	0xbb, 0x87, 0x4d, 0x45, 0x38, 0xca, 0x41, 0xf5, 0xe3, 0x53, 0x84, 0x5e, 0x29, 0xda, 0xbf, 0x21,
	0x1c, 0xdd, 0x28, 0x0b, 0x67, 0x5c, 0xa0, 0x6a, 0xbd, 0x94, 0xd0, 0x6d, 0xc0, 0x5f, 0x93, 0x9e,
	0xfd, 0x9a, 0x68, 0x8f, 0xad, 0x9e, 0xfd, 0x21, 0xa4, 0x41, 0x35, 0xc4, 0x94, 0x65, 0xc4, 0x70,
	0x4d, 0xb4, 0x27, 0x2e, 0x29, 0x4a, 0x49, 0x46, 0x0c, 0xa3, 0x18, 0x4b, 0xf1, 0x86, 0xf1, 0x43,
	0x25, 0x05, 0xfe, 0x2b, 0xee, 0xe1, 0xeb, 0x80, 0x36, 0x5e, 0x31, 0x07, 0x39, 0x55, 0x5c, 0x8c,
	0x7a, 0xf8, 0x14, 0x6f, 0x9e, 0x15, 0xaf, 0xb8, 0x63, 0x86, 0xb3, 0xb9, 0x68, 0xc4, 0xf4, 0x23,
	0xd6, 0xd3, 0xd7, 0x09, 0xed, 0xc5, 0xec, 0x5f, 0xd7, 0xfb, 0x58, 0x75, 0xcc, 0x9a, 0x65, 0xd4,
	0xd0, 0x8c, 0x69, 0x7f, 0xd4, 0x70, 0x36, 0x8f, 0xfe, 0x76, 0x98, 0x66, 0x3d, 0xfe, 0xec, 0x2c,
	0xf9, 0xbe, 0x14, 0x8f, 0xa3, 0x0e, 0x63, 0x1d, 0x33, 0x67, 0x19, 0x37, 0x34, 0xc3, 0x14, 0x6d,
	0xdc, 0x30, 0xab, 0xcf, 0x74, 0x54, 0x8d, 0xf5, 0xfc, 0xb3, 0xa3, 0xe6, 0x1b, 0xc7, 0x1f, 0xc1,
	0xa8, 0xcc, 0x9c, 0x65, 0xe4, 0xd0, 0x52, 0x3d, 0xf9, 0x92, 0x57, 0xcf, 0x0f, 0xe8, 0xc4, 0x68,
	0xa7, 0xcf, 0xf6, 0x84, 0x04, 0xd1, 0x97, 0x00, 0x89, 0xe6, 0xa9, 0xbe, 0x04, 0xa4, 0x78, 0x7f,
	0x38, 0x24, 0x99, 0xf5, 0x25, 0x0c, 0x7b, 0x8a, 0x0c, 0xaa, 0xe0, 0x87, 0x2a, 0x7a, 0x7f, 0x0c,
	0xcd, 0x87, 0xda, 0xeb, 0xae, 0x8c, 0x32, 0x79, 0xa1, 0x74, 0xf3, 0xac, 0x74, 0xb8, 0xb7, 0x09,
	0xa3, 0x25, 0xc2, 0xa2, 0xee, 0xfb, 0x5b, 0x63, 0x1a, 0xb4, 0xd3, 0x67, 0x7f, 0x4a, 0x82, 0xa9,
	0x0b, 0xa3, 0xa4, 0xb3, 0xa0, 0x26, 0xca, 0x27, 0x3d, 0x1d, 0x85, 0x52, 0x17, 0x8a, 0x43, 0x16,
	0x23, 0xd0, 0xc9, 0xcf, 0xac, 0x28, 0x37, 0x33, 0x27, 0xc1, 0xc4, 0x85, 0xb1, 0xd0, 0xc9, 0x4f,
	0x13, 0x8b, 0xe2, 0x2a, 0xb1, 0xc7, 0x74, 0xd2, 0x29, 0x63, 0xce, 0x33, 0x2b, 0xe9, 0xcd, 0x4c,
	0x4a, 0x30, 0x6d, 0x31, 0x79, 0x0d, 0xcf, 0x79, 0x9a, 0xeb, 0x26, 0x5f, 0xea, 0xba, 0xf9, 0x6b,
	0x32, 0xb8, 0xd8, 0xd6, 0x61, 0x4b, 0x59, 0x0e, 0x1b, 0xcb, 0xbb, 0xda, 0x3a, 0x2c, 0xcb, 0xbb,
	0xda, 0xa2, 0xdd, 0x31, 0x39, 0x1c, 0x4d, 0x94, 0x38, 0x74, 0x91, 0xe8, 0x63, 0xf5, 0xd0, 0xa5,
	0xa2, 0x5d, 0xd2, 0x01, 0x6d, 0x48, 0xcb, 0x21, 0xb6, 0xb8, 0x8b, 0xe0, 0xd5, 0xa7, 0xe3, 0x95,
	0x28, 0x74, 0x61, 0x5c, 0xa6, 0xd0, 0x85, 0x8c, 0x36, 0xb6, 0x75, 0xd8, 0xd4, 0x96, 0x6f, 0x98,
	0x56, 0x76, 0x51, 0x4c, 0x22, 0x2d, 0x56, 0xcc, 0x02, 0x86, 0x2e, 0x8c, 0x87, 0x84, 0x2e, 0x64,
	0xdc, 0x31, 0x2b, 0x4b, 0xbe, 0xe2, 0xf2, 0x97, 0xe6, 0x75, 0x5d, 0x14, 0x86, 0x68, 0x8b, 0x15,
	0xa6, 0xf8, 0xa1, 0x4b, 0xba, 0xcf, 0x48, 0xe8, 0x42, 0x46, 0x20, 0xb3, 0xa2, 0xe6, 0xab, 0x2e,
	0x47, 0xcd, 0xab, 0xba, 0x0c, 0xbf, 0x21, 0x71, 0x49, 0xab, 0x9e, 0x7c, 0xa9, 0x51, 0x85, 0x9f,
	0xde, 0x06, 0x2a, 0xf1, 0x68, 0x19, 0x93, 0x1a, 0xdf, 0xba, 0x42, 0x49, 0x0d, 0x19, 0xa3, 0xa3,
	0x52, 0xc3, 0x46, 0xe5, 0x4a, 0x22, 0x35, 0x78, 0x18, 0x4e, 0x31, 0x0f, 0xc7, 0x11, 0xa9, 0xb1,
	0x37, 0x0a, 0x69, 0x48, 0x0d, 0xc1, 0xab, 0x4f, 0xc7, 0x2b, 0xae, 0xd4, 0xcc, 0xe6, 0x9a, 0x2d,
	0x35, 0xbe, 0x75, 0x05, 0x94, 0x1a, 0x8a, 0x49, 0x57, 0x56, 0x58, 0x30, 0xed, 0x4b, 0xcd, 0x6c,
	0x1e, 0xab, 0xd4, 0x64, 0x65, 0xf9, 0x48, 0x52, 0x43, 0x61, 0xe8, 0xda, 0x0a, 0x0b, 0x4c, 0xd1,
	0xa4, 0x26, 0xab, 0xcf, 0xac, 0x52, 0x93, 0x15, 0xf5, 0x23, 0x49, 0x8d, 0xe1, 0x37, 0xbc, 0xba,
	0xc2, 0x5a, 0x3d, 0xf9, 0x92, 0x57, 0xcf, 0x0f, 0xc9, 0x36, 0x1a, 0x32, 0x14, 0x6e, 0xb7, 0xa3,
	0xb4, 0x12, 0x6f, 0xa3, 0x31, 0x8d, 0x84, 0xdf, 0xc1, 0x7a, 0x13, 0xe8, 0x92, 0x49, 0x64, 0x7a,
	0xa0, 0x54, 0x5c, 0x5a, 0x3a, 0xe8, 0xfd, 0x01, 0xde, 0x3c, 0x63, 0x7f, 0xb4, 0x7f, 0x14, 0xad,
	0x93, 0xa9, 0x63, 0xb6, 0x10, 0x60, 0x9d, 0x05, 0xb0, 0xb8, 0x2b, 0x63, 0xd3, 0xc8, 0xa8, 0x13,
	0xff, 0x9e, 0x6d, 0x99, 0x21, 0x8c, 0xb6, 0xbb, 0x4b, 0xcb, 0xe9, 0x8e, 0x19, 0x33, 0x28, 0xeb,
	0x31, 0x31, 0xd0, 0x80, 0x67, 0x7d, 0x81, 0x84, 0x86, 0x10, 0x91, 0x85, 0xea, 0x44, 0x17, 0x72,
	0xd2, 0xdc, 0x4c, 0x8f, 0x69, 0x39, 0xdd, 0x27, 0x63, 0xc6, 0x61, 0x9d, 0x26, 0x86, 0xb3, 0xc5,
	0x55, 0x52, 0xbf, 0x91, 0xbe, 0x21, 0x51, 0x86, 0x9c, 0xb0, 0x37, 0xd3, 0x69, 0x5a, 0x4e, 0x77,
	0xc7, 0x58, 0x7d, 0x47, 0xfa, 0x4d, 0x46, 0x25, 0xe5, 0x4b, 0x0a, 0x2b, 0xec, 0x5c, 0x04, 0xaa,
	0x02, 0x09, 0x39, 0x1e, 0xec, 0x91, 0x8c, 0xd5, 0x19, 0x9d, 0xb6, 0x14, 0xe7, 0x75, 0x4e, 0x15,
	0xef, 0x23, 0x4b, 0x33, 0x3a, 0xad, 0x33, 0x8f, 0x52, 0x5c, 0x09, 0x2b, 0x09, 0x29, 0x9a, 0xe8,
	0x94, 0x23, 0x7d, 0xbd, 0x96, 0x21, 0x9a, 0x67, 0xe1, 0xd3, 0x36, 0xc1, 0x15, 0x8c, 0xa1, 0x78,
	0x63, 0xec, 0x31, 0x1b, 0xfa, 0xd1, 0x73, 0x14, 0xf8, 0x73, 0xb2, 0x3a, 0xa3, 0xd3, 0x8e, 0xd0,
	0xec, 0x47, 0x63, 0x4e, 0x68, 0x75, 0x46, 0xa7, 0x25, 0x5a, 0x4b, 0xe7, 0x42, 0x40, 0x21, 0x18,
	0x2c, 0x1e, 0x10, 0xd5, 0x98, 0x5f, 0x1a, 0x0b, 0x34, 0x3a, 0x6d, 0xea, 0xcb, 0x30, 0xa7, 0x8a,
	0x9f, 0x64, 0x2b, 0x34, 0x08, 0x20, 0x5d, 0xa1, 0x91, 0x09, 0x70, 0x83, 0xa7, 0x88, 0x1e, 0xd3,
	0x5b, 0xe1, 0x87, 0xc6, 0xda, 0x8d, 0x4e, 0x9b, 0x72, 0x73, 0x10, 0xc3, 0x51, 0x6b, 0x18, 0x8e,
	0xae, 0xdd, 0xc8, 0x04, 0xb7, 0xd1, 0x55, 0x7c, 0xef, 0xd1, 0xf5, 0x29, 0x64, 0xc1, 0x45, 0xa7,
	0x4d, 0x95, 0x19, 0xc1, 0x8c, 0xd4, 0x1a, 0x75, 0x20, 0x5e, 0xbe, 0x91, 0xb1, 0x86, 0xf2, 0x25,
	0xa8, 0xa1, 0x7f, 0x24, 0x03, 0xbe, 0x1d, 0x36, 0x07, 0x7c, 0x2f, 0x72, 0xaa, 0x28, 0xe0, 0x01,
	0x5f, 0xba, 0x7c, 0xe3, 0xae, 0x2c, 0xcd, 0xcf, 0x17, 0x09, 0x86, 0x7b, 0xcd, 0xda, 0xf2, 0x22,
	0x7c, 0xa1, 0x38, 0xa2, 0x9a, 0x9d, 0x7f, 0x43, 0x48, 0xcf, 0x84, 0x02, 0xaf, 0xe3, 0xe1, 0x60,
	0x9b, 0xab, 0x57, 0x2e, 0xa2, 0xbd, 0xd0, 0x00, 0x1b, 0x42, 0xec, 0x8b, 0x73, 0xb1, 0x23, 0xe8,
	0x01, 0x0e, 0x7e, 0x7d, 0x8e, 0xa8, 0x4d, 0xbb, 0xa0, 0x9c, 0x54, 0x4f, 0xec, 0x8e, 0x16, 0xeb,
	0x01, 0x43, 0x23, 0x1d, 0x2e, 0x66, 0xa5, 0x90, 0x45, 0x9f, 0x8c, 0x52, 0x90, 0x3c, 0x5f, 0x2d,
	0x5a, 0x1d, 0x27, 0xb4, 0x7a, 0x33, 0xde, 0x55, 0x46, 0x07, 0x93, 0x3b, 0x6c, 0x0f, 0x26, 0x4f,
	0x60, 0x52, 0x66, 0x0e, 0x93, 0x66, 0x11, 0x2b, 0x83, 0xf4, 0x15, 0xce, 0x35, 0xc7, 0xfe, 0xd6,
	0x0b, 0xe2, 0x95, 0x32, 0x3a, 0xd6, 0xdc, 0x61, 0x7b, 0xac, 0xf9, 0x1d, 0x5c, 0x10, 0xcc, 0x1c,
	0x75, 0x79, 0x46, 0x45, 0x33, 0x57, 0x7c, 0x7e, 0xae, 0x2b, 0xfe, 0x3f, 0x90, 0x48, 0x2a, 0x60,
	0x4f, 0xf3, 0x5e, 0x45, 0xbb, 0xff, 0x70, 0x4f, 0x10, 0xd3, 0xbb, 0xd8, 0xae, 0x38, 0x94, 0x13,
	0x5f, 0x24, 0x68, 0x9d, 0x48, 0x7f, 0x0a, 0x7e, 0xa9, 0x50, 0xd5, 0x9d, 0x7c, 0xd0, 0xc9, 0xd0,
	0xbc, 0xf9, 0xfb, 0x38, 0x84, 0x0a, 0xd8, 0x12, 0xb2, 0xbd, 0xa8, 0xd7, 0x8d, 0xfa, 0x7d, 0x18,
	0xe8, 0xf6, 0x0c, 0x40, 0x88, 0xe4, 0xab, 0xf0, 0x2b, 0x45, 0x22, 0xa1, 0x4e, 0xfa, 0x19, 0x8b,
	0x9d, 0x02, 0x76, 0xc5, 0x69, 0x0f, 0xda, 0x1e, 0x45, 0x7b, 0x7b, 0x84, 0x8c, 0x6d, 0xe8, 0x4b,
	0x23, 0x7b, 0xd6, 0x53, 0x2c, 0x1f, 0xe9, 0x0d, 0xf0, 0x97, 0x2c, 0x68, 0x0a, 0xd8, 0x15, 0xa2,
	0x61, 0x4c, 0x45, 0xad, 0x61, 0x2a, 0xb6, 0xa3, 0x2f, 0x8d, 0x2a, 0xe4, 0x2a, 0xb2, 0xbf, 0x74,
	0xb8, 0x5f, 0xb0, 0x68, 0x29, 0x60, 0x57, 0x5c, 0x06, 0x31, 0x1c, 0xb5, 0x46, 0x5d, 0x46, 0xf6,
	0xee, 0xa5, 0x57, 0x46, 0xbe, 0xc8, 0x70, 0xc2, 0xb0, 0x13, 0x94, 0xfb, 0x5b, 0x44, 0x9f, 0xfe,
	0xce, 0xc4, 0xd2, 0x21, 0x16, 0xe0, 0xf4, 0x14, 0x2c, 0x1d, 0xa2, 0x25, 0x62, 0x20, 0x93, 0x74,
	0x62, 0x28, 0x24, 0xf7, 0x95, 0xe8, 0xf4, 0x94, 0x78, 0x57, 0x30, 0x44, 0xa7, 0xeb, 0x36, 0x04,
	0xf1, 0x83, 0xd1, 0xce, 0x61, 0x24, 0x28, 0xa2, 0xfd, 0x93, 0x53, 0x90, 0xa0, 0x88, 0x99, 0x56,
	0x01, 0x10, 0xcc, 0xe2, 0x9e, 0x9c, 0x92, 0x91, 0xcf, 0xb4, 0x73, 0x98, 0xca, 0x8c, 0x58, 0x90,
	0x53, 0x53, 0xa8, 0xcc, 0x10, 0x5e, 0xeb, 0x8c, 0xb9, 0x99, 0xd7, 0xfe, 0xa9, 0x29, 0x19, 0xc1,
	0xc8, 0xce, 0x61, 0xaa, 0x32, 0x62, 0x41, 0x4e, 0x4c, 0xa1, 0x2a, 0x43, 0xa0, 0xac, 0x53, 0xe7,
	0x66, 0xa8, 0xa2, 0x9d, 0x98, 0x92, 0xcb, 0x89, 0x64, 0xe7, 0x30, 0xd5, 0x1e, 0xb1, 0x20, 0xa7,
	0xa5, 0x50, 0xed, 0x61, 0x7e, 0x34, 0xcf, 0xa1, 0x5b, 0xea, 0x2d, 0x3f, 0x07, 0xc8, 0xc2, 0xae,
	0x6a, 0xe0, 0x78, 0xac, 0x43, 0x84, 0x3f, 0x26, 0x1d, 0x38, 0xfd, 0xb3, 0x1d, 0x45, 0xda, 0x61,
	0xec, 0xf5, 0x7b, 0xac, 0x43, 0xb4, 0x6c, 0xd9, 0xd1, 0xbf, 0x9b, 0x74, 0xe8, 0x19, 0xf8, 0x54,
	0x71, 0x78, 0x37, 0xc5, 0x82, 0xf0, 0x47, 0xb8, 0x43, 0xa6, 0xd3, 0xd8, 0x90, 0x9d, 0x57, 0xd8,
	0x06, 0x3f, 0xca, 0x02, 0x0c, 0x16, 0x04, 0xd1, 0x05, 0xbf, 0x5a, 0x34, 0x08, 0x2a, 0x2d, 0xdf,
	0x67, 0xfd, 0x2b, 0x1d, 0xc7, 0x9e, 0xb6, 0x3c, 0x6f, 0xda, 0xd5, 0xc7, 0x98, 0x88, 0xb6, 0x50,
	0xa6, 0x76, 0x4f, 0x8b, 0x4d, 0xa6, 0x4d, 0xb1, 0xa0, 0xde, 0x96, 0x7e, 0xce, 0xd6, 0xde, 0x64,
	0xcf, 0x78, 0xbe, 0xfa, 0xb1, 0xd7, 0xbc, 0x95, 0x8f, 0xe5, 0x9c, 0x08, 0x08, 0xcd, 0xb9, 0xe4,
	0x2a, 0xba, 0x37, 0x74, 0xae, 0x9f, 0xb2, 0x95, 0x36, 0xd9, 0xb9, 0xf2, 0x15, 0x89, 0x5d, 0xe6,
	0xfd, 0x7b, 0x26, 0x8f, 0x20, 0x95, 0x60, 0xb5, 0x8c, 0x2f, 0x3a, 0x97, 0xf0, 0x87, 0x1a, 0xe0,
	0xf4, 0xf5, 0x29, 0x09, 0xb9, 0xd7, 0x2f, 0x29, 0xf0, 0x7b, 0x44, 0x0e, 0x7c, 0xfe, 0x56, 0x5b,
	0x72, 0x10, 0x65, 0x6a, 0xe0, 0xf3, 0xb7, 0x5a, 0xd4, 0x00, 0x1d, 0x36, 0x6b, 0xa8, 0x41, 0x1b,
	0xf4, 0xd9, 0x9d, 0xcd, 0x88, 0x77, 0x2b, 0xf0, 0xbb, 0xb8, 0xdd, 0xeb, 0xd9, 0xb6, 0xd1, 0xee,
	0x7b, 0x69, 0xb3, 0xa7, 0x99, 0x06, 0x46, 0xa6, 0x51, 0x6e, 0xbf, 0x00, 0xd7, 0x16, 0x20, 0xb7,
	0xa6, 0xd5, 0x92, 0x68, 0x3b, 0x90, 0xef, 0x8b, 0x5d, 0x9b, 0x61, 0x86, 0xf3, 0x0b, 0x4d, 0xff,
	0x82, 0x23, 0x8f, 0x0d, 0xaf, 0x8d, 0x78, 0x43, 0x90, 0x9e, 0x08, 0xe5, 0x9d, 0xfe, 0xb7, 0x93,
	0xb4, 0x03, 0xc2, 0xcd, 0x85, 0xff, 0x15, 0xf8, 0x6c, 0x41, 0x70, 0xc8, 0x61, 0xc1, 0xdb, 0xbc,
	0x21, 0x54, 0x91, 0x36, 0xc8, 0x5d, 0x28, 0x39, 0x5a, 0x6e, 0xae, 0x97, 0xa6, 0xce, 0xb7, 0x38,
	0x33, 0x5f, 0xde, 0x2b, 0x0d, 0xee, 0x86, 0x35, 0xc4, 0x14, 0xa2, 0xfb, 0x44, 0x66, 0xba, 0x02,
	0xad, 0x07, 0xcd, 0x89, 0xe5, 0xdd, 0x4a, 0x0f, 0x7a, 0xdf, 0x06, 0x7f, 0xc3, 0x01, 0x40, 0x16,
	0x07, 0xe8, 0x90, 0xcb, 0x32, 0x43, 0xe6, 0xab, 0xd2, 0x2a, 0x1a, 0x11, 0x98, 0x67, 0x18, 0xc4,
	0xa8, 0x44, 0xa7, 0x33, 0xa1, 0x06, 0x3d, 0x45, 0xf5, 0xa0, 0xae, 0x7a, 0xbf, 0xe7, 0x00, 0x20,
	0x4b, 0x06, 0x72, 0x20, 0xde, 0xcc, 0x1a, 0x84, 0x55, 0x70, 0x9e, 0x61, 0x10, 0x23, 0x12, 0x41,
	0xcf, 0x84, 0x18, 0x71, 0x95, 0xca, 0x9b, 0x64, 0xb9, 0x05, 0x20, 0xab, 0x06, 0x72, 0xd0, 0xde,
	0xcc, 0x32, 0x84, 0x55, 0x70, 0x9e, 0x61, 0x90, 0x3a, 0x14, 0xc9, 0x7c, 0xc6, 0xba, 0xcb, 0x97,
	0x8a, 0x56, 0xf8, 0x49, 0x15, 0xa8, 0xf6, 0x93, 0x67, 0xe8, 0xdc, 0xb7, 0xcd, 0xfa, 0xa7, 0x49,
	0x70, 0xe5, 0x6c, 0xba, 0x4c, 0xff, 0x59, 0x29, 0x8f, 0xce, 0xf8, 0x6a, 0xb8, 0x60, 0x56, 0x4a,
	0xcb, 0x2c, 0x5b, 0xfa, 0x3f, 0x65, 0xc2, 0x73, 0xdd, 0xd0, 0xee, 0xa2, 0x1a, 0xe9, 0x6b, 0xc1,
	0xde, 0x58, 0x44, 0x52, 0xbc, 0xf4, 0xe4, 0x69, 0x05, 0xfe, 0x80, 0x03, 0x4e, 0x76, 0x6a, 0x78,
	0xa6, 0xd7, 0xb8, 0xf9, 0xe8, 0x71, 0xd7, 0xb2, 0x9c, 0xbf, 0x2b, 0x31, 0x4f, 0x4c, 0x15, 0x97,
	0x40, 0xe3, 0x18, 0x72, 0x04, 0x45, 0x8e, 0x53, 0xc6, 0xa7, 0x96, 0x23, 0x92, 0xb5, 0xf0, 0x31,
	0xbb, 0x63, 0x0c, 0xf4, 0x09, 0xab, 0x39, 0x38, 0x52, 0x06, 0x1a, 0xb2, 0x1d, 0x4e, 0x0d, 0x1b,
	0x67, 0xe7, 0x38, 0xc7, 0x41, 0xd6, 0x37, 0xf0, 0xdd, 0x5b, 0x9c, 0x2a, 0xb6, 0xc0, 0xa5, 0x86,
	0x01, 0xd3, 0x39, 0xd7, 0xc8, 0x04, 0xde, 0x77, 0xc7, 0x0e, 0xc3, 0xce, 0x72, 0x0c, 0x36, 0x7e,
	0xdd, 0x78, 0xec, 0x46, 0xfe, 0x61, 0x96, 0x8d, 0x0d, 0xdd, 0xf4, 0x39, 0x1b, 0x42, 0x7a, 0x36,
	0xf4, 0xb6, 0xfb, 0xbf, 0x1c, 0x58, 0x40, 0xff, 0x7d, 0x89, 0xe5, 0x74, 0xe9, 0x4c, 0xf5, 0x38,
	0xd3, 0x11, 0xd4, 0x79, 0x8c, 0x46, 0x7c, 0x06, 0x2e, 0xd6, 0x53, 0xba, 0xf5, 0x67, 0xb8, 0x71,
	0x7a, 0x37, 0x31, 0x40, 0x36, 0xa1, 0x5a, 0x0f, 0xbf, 0xc6, 0xe7, 0x58, 0xe3, 0xa3, 0xab, 0x71,
	0xf7, 0xc7, 0xd3, 0x69, 0xb7, 0xdb, 0x8e, 0x9e, 0xba, 0x81, 0x56, 0xe8, 0x0d, 0x31, 0xfc, 0xf8,
	0x66, 0x8e, 0x6f, 0x69, 0x57, 0xc5, 0x7b, 0xe1, 0x4a, 0xd0, 0xe0, 0xc3, 0x77, 0xbb, 0x69, 0xf3,
	0x56, 0xdc, 0x62, 0x2c, 0xdc, 0x2a, 0x87, 0xf8, 0x0a, 0xe0, 0x58, 0xb7, 0xe6, 0x09, 0xc1, 0x71,
	0x7f, 0xd3, 0x6a, 0x9e, 0xe3, 0x9e, 0x5e, 0x88, 0x0e, 0xf0, 0xa6, 0x8f, 0x69, 0x64, 0x19, 0xea,
	0xaa, 0x44, 0x3f, 0x3c, 0xf0, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x1c, 0xb2, 0x3b, 0x36,
	0x81, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BasicClient is the client API for Basic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BasicClient interface {
	Echo(ctx context.Context, in *EchoReq, opts ...grpc.CallOption) (*EchoResp, error)
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
	Healthz(ctx context.Context, in *HealthzReq, opts ...grpc.CallOption) (*HealthzResp, error)
	Version(ctx context.Context, in *VersionReq, opts ...grpc.CallOption) (*VersionResp, error)
}

type basicClient struct {
	cc *grpc.ClientConn
}

func NewBasicClient(cc *grpc.ClientConn) BasicClient {
	return &basicClient{cc}
}

func (c *basicClient) Echo(ctx context.Context, in *EchoReq, opts ...grpc.CallOption) (*EchoResp, error) {
	out := new(EchoResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Basic/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Basic/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) Healthz(ctx context.Context, in *HealthzReq, opts ...grpc.CallOption) (*HealthzResp, error) {
	out := new(HealthzResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Basic/Healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) Version(ctx context.Context, in *VersionReq, opts ...grpc.CallOption) (*VersionResp, error) {
	out := new(VersionResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Basic/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasicServer is the server API for Basic service.
type BasicServer interface {
	Echo(context.Context, *EchoReq) (*EchoResp, error)
	Ping(context.Context, *PingReq) (*PingResp, error)
	Healthz(context.Context, *HealthzReq) (*HealthzResp, error)
	Version(context.Context, *VersionReq) (*VersionResp, error)
}

// UnimplementedBasicServer can be embedded to have forward compatible implementations.
type UnimplementedBasicServer struct {
}

func (*UnimplementedBasicServer) Echo(ctx context.Context, req *EchoReq) (*EchoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedBasicServer) Ping(ctx context.Context, req *PingReq) (*PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedBasicServer) Healthz(ctx context.Context, req *HealthzReq) (*HealthzResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (*UnimplementedBasicServer) Version(ctx context.Context, req *VersionReq) (*VersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}

func RegisterBasicServer(s *grpc.Server, srv BasicServer) {
	s.RegisterService(&_Basic_serviceDesc, srv)
}

func _Basic_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Basic/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).Echo(ctx, req.(*EchoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Basic/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Basic/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).Healthz(ctx, req.(*HealthzReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Basic/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).Version(ctx, req.(*VersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Basic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Basic",
	HandlerType: (*BasicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Basic_Echo_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Basic_Ping_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _Basic_Healthz_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Basic_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster-resources/cluster-resources.proto",
}

// NamespaceClient is the client API for Namespace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NamespaceClient interface {
	ListNS(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type namespaceClient struct {
	cc *grpc.ClientConn
}

func NewNamespaceClient(cc *grpc.ClientConn) NamespaceClient {
	return &namespaceClient{cc}
}

func (c *namespaceClient) ListNS(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Namespace/ListNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamespaceServer is the server API for Namespace service.
type NamespaceServer interface {
	ListNS(context.Context, *ResListReq) (*CommonResp, error)
}

// UnimplementedNamespaceServer can be embedded to have forward compatible implementations.
type UnimplementedNamespaceServer struct {
}

func (*UnimplementedNamespaceServer) ListNS(ctx context.Context, req *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNS not implemented")
}

func RegisterNamespaceServer(s *grpc.Server, srv NamespaceServer) {
	s.RegisterService(&_Namespace_serviceDesc, srv)
}

func _Namespace_ListNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).ListNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Namespace/ListNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).ListNS(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Namespace_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Namespace",
	HandlerType: (*NamespaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNS",
			Handler:    _Namespace_ListNS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster-resources/cluster-resources.proto",
}

// WorkloadClient is the client API for Workload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkloadClient interface {
	ListDeploy(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetDeploy(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateDeploy(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateDeploy(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteDeploy(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListDS(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetDS(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateDS(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateDS(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteDS(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListSTS(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetSTS(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateSTS(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateSTS(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteSTS(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListCJ(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetCJ(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateCJ(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateCJ(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteCJ(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListJob(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetJob(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateJob(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateJob(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteJob(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListPo(ctx context.Context, in *PodResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetPo(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreatePo(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdatePo(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeletePo(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListPoPVC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListPoCM(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListPoSecret(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	ReschedulePo(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListContainer(ctx context.Context, in *ContainerListReq, opts ...grpc.CallOption) (*CommonListResp, error)
	GetContainer(ctx context.Context, in *ContainerGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetContainerEnvInfo(ctx context.Context, in *ContainerGetReq, opts ...grpc.CallOption) (*CommonListResp, error)
}

type workloadClient struct {
	cc *grpc.ClientConn
}

func NewWorkloadClient(cc *grpc.ClientConn) WorkloadClient {
	return &workloadClient{cc}
}

func (c *workloadClient) ListDeploy(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetDeploy(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) CreateDeploy(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/CreateDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) UpdateDeploy(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/UpdateDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) DeleteDeploy(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/DeleteDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListDS(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetDS(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) CreateDS(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/CreateDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) UpdateDS(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/UpdateDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) DeleteDS(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/DeleteDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListSTS(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListSTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetSTS(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetSTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) CreateSTS(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/CreateSTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) UpdateSTS(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/UpdateSTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) DeleteSTS(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/DeleteSTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListCJ(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListCJ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetCJ(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetCJ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) CreateCJ(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/CreateCJ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) UpdateCJ(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/UpdateCJ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) DeleteCJ(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/DeleteCJ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListJob(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetJob(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) CreateJob(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/CreateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) UpdateJob(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/UpdateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) DeleteJob(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/DeleteJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListPo(ctx context.Context, in *PodResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListPo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetPo(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetPo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) CreatePo(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/CreatePo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) UpdatePo(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/UpdatePo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) DeletePo(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/DeletePo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListPoPVC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListPoPVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListPoCM(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListPoCM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListPoSecret(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListPoSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ReschedulePo(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ReschedulePo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListContainer(ctx context.Context, in *ContainerListReq, opts ...grpc.CallOption) (*CommonListResp, error) {
	out := new(CommonListResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetContainer(ctx context.Context, in *ContainerGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetContainerEnvInfo(ctx context.Context, in *ContainerGetReq, opts ...grpc.CallOption) (*CommonListResp, error) {
	out := new(CommonListResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetContainerEnvInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkloadServer is the server API for Workload service.
type WorkloadServer interface {
	ListDeploy(context.Context, *ResListReq) (*CommonResp, error)
	GetDeploy(context.Context, *ResGetReq) (*CommonResp, error)
	CreateDeploy(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateDeploy(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteDeploy(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListDS(context.Context, *ResListReq) (*CommonResp, error)
	GetDS(context.Context, *ResGetReq) (*CommonResp, error)
	CreateDS(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateDS(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteDS(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListSTS(context.Context, *ResListReq) (*CommonResp, error)
	GetSTS(context.Context, *ResGetReq) (*CommonResp, error)
	CreateSTS(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateSTS(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteSTS(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListCJ(context.Context, *ResListReq) (*CommonResp, error)
	GetCJ(context.Context, *ResGetReq) (*CommonResp, error)
	CreateCJ(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateCJ(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteCJ(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListJob(context.Context, *ResListReq) (*CommonResp, error)
	GetJob(context.Context, *ResGetReq) (*CommonResp, error)
	CreateJob(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateJob(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteJob(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListPo(context.Context, *PodResListReq) (*CommonResp, error)
	GetPo(context.Context, *ResGetReq) (*CommonResp, error)
	CreatePo(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdatePo(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeletePo(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListPoPVC(context.Context, *ResGetReq) (*CommonResp, error)
	ListPoCM(context.Context, *ResGetReq) (*CommonResp, error)
	ListPoSecret(context.Context, *ResGetReq) (*CommonResp, error)
	ReschedulePo(context.Context, *ResUpdateReq) (*CommonResp, error)
	ListContainer(context.Context, *ContainerListReq) (*CommonListResp, error)
	GetContainer(context.Context, *ContainerGetReq) (*CommonResp, error)
	GetContainerEnvInfo(context.Context, *ContainerGetReq) (*CommonListResp, error)
}

// UnimplementedWorkloadServer can be embedded to have forward compatible implementations.
type UnimplementedWorkloadServer struct {
}

func (*UnimplementedWorkloadServer) ListDeploy(ctx context.Context, req *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeploy not implemented")
}
func (*UnimplementedWorkloadServer) GetDeploy(ctx context.Context, req *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploy not implemented")
}
func (*UnimplementedWorkloadServer) CreateDeploy(ctx context.Context, req *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeploy not implemented")
}
func (*UnimplementedWorkloadServer) UpdateDeploy(ctx context.Context, req *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeploy not implemented")
}
func (*UnimplementedWorkloadServer) DeleteDeploy(ctx context.Context, req *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeploy not implemented")
}
func (*UnimplementedWorkloadServer) ListDS(ctx context.Context, req *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDS not implemented")
}
func (*UnimplementedWorkloadServer) GetDS(ctx context.Context, req *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDS not implemented")
}
func (*UnimplementedWorkloadServer) CreateDS(ctx context.Context, req *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDS not implemented")
}
func (*UnimplementedWorkloadServer) UpdateDS(ctx context.Context, req *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDS not implemented")
}
func (*UnimplementedWorkloadServer) DeleteDS(ctx context.Context, req *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDS not implemented")
}
func (*UnimplementedWorkloadServer) ListSTS(ctx context.Context, req *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSTS not implemented")
}
func (*UnimplementedWorkloadServer) GetSTS(ctx context.Context, req *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSTS not implemented")
}
func (*UnimplementedWorkloadServer) CreateSTS(ctx context.Context, req *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSTS not implemented")
}
func (*UnimplementedWorkloadServer) UpdateSTS(ctx context.Context, req *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSTS not implemented")
}
func (*UnimplementedWorkloadServer) DeleteSTS(ctx context.Context, req *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSTS not implemented")
}
func (*UnimplementedWorkloadServer) ListCJ(ctx context.Context, req *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCJ not implemented")
}
func (*UnimplementedWorkloadServer) GetCJ(ctx context.Context, req *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCJ not implemented")
}
func (*UnimplementedWorkloadServer) CreateCJ(ctx context.Context, req *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCJ not implemented")
}
func (*UnimplementedWorkloadServer) UpdateCJ(ctx context.Context, req *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCJ not implemented")
}
func (*UnimplementedWorkloadServer) DeleteCJ(ctx context.Context, req *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCJ not implemented")
}
func (*UnimplementedWorkloadServer) ListJob(ctx context.Context, req *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJob not implemented")
}
func (*UnimplementedWorkloadServer) GetJob(ctx context.Context, req *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (*UnimplementedWorkloadServer) CreateJob(ctx context.Context, req *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (*UnimplementedWorkloadServer) UpdateJob(ctx context.Context, req *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJob not implemented")
}
func (*UnimplementedWorkloadServer) DeleteJob(ctx context.Context, req *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (*UnimplementedWorkloadServer) ListPo(ctx context.Context, req *PodResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPo not implemented")
}
func (*UnimplementedWorkloadServer) GetPo(ctx context.Context, req *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPo not implemented")
}
func (*UnimplementedWorkloadServer) CreatePo(ctx context.Context, req *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePo not implemented")
}
func (*UnimplementedWorkloadServer) UpdatePo(ctx context.Context, req *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePo not implemented")
}
func (*UnimplementedWorkloadServer) DeletePo(ctx context.Context, req *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePo not implemented")
}
func (*UnimplementedWorkloadServer) ListPoPVC(ctx context.Context, req *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPoPVC not implemented")
}
func (*UnimplementedWorkloadServer) ListPoCM(ctx context.Context, req *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPoCM not implemented")
}
func (*UnimplementedWorkloadServer) ListPoSecret(ctx context.Context, req *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPoSecret not implemented")
}
func (*UnimplementedWorkloadServer) ReschedulePo(ctx context.Context, req *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReschedulePo not implemented")
}
func (*UnimplementedWorkloadServer) ListContainer(ctx context.Context, req *ContainerListReq) (*CommonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContainer not implemented")
}
func (*UnimplementedWorkloadServer) GetContainer(ctx context.Context, req *ContainerGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainer not implemented")
}
func (*UnimplementedWorkloadServer) GetContainerEnvInfo(ctx context.Context, req *ContainerGetReq) (*CommonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerEnvInfo not implemented")
}

func RegisterWorkloadServer(s *grpc.Server, srv WorkloadServer) {
	s.RegisterService(&_Workload_serviceDesc, srv)
}

func _Workload_ListDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListDeploy(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetDeploy(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_CreateDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).CreateDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/CreateDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).CreateDeploy(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_UpdateDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).UpdateDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/UpdateDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).UpdateDeploy(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_DeleteDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).DeleteDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/DeleteDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).DeleteDeploy(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListDS(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetDS(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_CreateDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).CreateDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/CreateDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).CreateDS(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_UpdateDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).UpdateDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/UpdateDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).UpdateDS(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_DeleteDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).DeleteDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/DeleteDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).DeleteDS(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListSTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListSTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListSTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListSTS(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetSTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetSTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetSTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetSTS(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_CreateSTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).CreateSTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/CreateSTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).CreateSTS(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_UpdateSTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).UpdateSTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/UpdateSTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).UpdateSTS(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_DeleteSTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).DeleteSTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/DeleteSTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).DeleteSTS(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListCJ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListCJ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListCJ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListCJ(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetCJ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetCJ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetCJ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetCJ(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_CreateCJ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).CreateCJ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/CreateCJ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).CreateCJ(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_UpdateCJ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).UpdateCJ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/UpdateCJ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).UpdateCJ(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_DeleteCJ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).DeleteCJ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/DeleteCJ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).DeleteCJ(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListJob(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetJob(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).CreateJob(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/UpdateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).UpdateJob(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/DeleteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).DeleteJob(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListPo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListPo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListPo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListPo(ctx, req.(*PodResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetPo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetPo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetPo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetPo(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_CreatePo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).CreatePo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/CreatePo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).CreatePo(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_UpdatePo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).UpdatePo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/UpdatePo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).UpdatePo(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_DeletePo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).DeletePo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/DeletePo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).DeletePo(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListPoPVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListPoPVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListPoPVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListPoPVC(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListPoCM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListPoCM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListPoCM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListPoCM(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListPoSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListPoSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListPoSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListPoSecret(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ReschedulePo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ReschedulePo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ReschedulePo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ReschedulePo(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListContainer(ctx, req.(*ContainerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetContainer(ctx, req.(*ContainerGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetContainerEnvInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetContainerEnvInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetContainerEnvInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetContainerEnvInfo(ctx, req.(*ContainerGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Workload_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Workload",
	HandlerType: (*WorkloadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDeploy",
			Handler:    _Workload_ListDeploy_Handler,
		},
		{
			MethodName: "GetDeploy",
			Handler:    _Workload_GetDeploy_Handler,
		},
		{
			MethodName: "CreateDeploy",
			Handler:    _Workload_CreateDeploy_Handler,
		},
		{
			MethodName: "UpdateDeploy",
			Handler:    _Workload_UpdateDeploy_Handler,
		},
		{
			MethodName: "DeleteDeploy",
			Handler:    _Workload_DeleteDeploy_Handler,
		},
		{
			MethodName: "ListDS",
			Handler:    _Workload_ListDS_Handler,
		},
		{
			MethodName: "GetDS",
			Handler:    _Workload_GetDS_Handler,
		},
		{
			MethodName: "CreateDS",
			Handler:    _Workload_CreateDS_Handler,
		},
		{
			MethodName: "UpdateDS",
			Handler:    _Workload_UpdateDS_Handler,
		},
		{
			MethodName: "DeleteDS",
			Handler:    _Workload_DeleteDS_Handler,
		},
		{
			MethodName: "ListSTS",
			Handler:    _Workload_ListSTS_Handler,
		},
		{
			MethodName: "GetSTS",
			Handler:    _Workload_GetSTS_Handler,
		},
		{
			MethodName: "CreateSTS",
			Handler:    _Workload_CreateSTS_Handler,
		},
		{
			MethodName: "UpdateSTS",
			Handler:    _Workload_UpdateSTS_Handler,
		},
		{
			MethodName: "DeleteSTS",
			Handler:    _Workload_DeleteSTS_Handler,
		},
		{
			MethodName: "ListCJ",
			Handler:    _Workload_ListCJ_Handler,
		},
		{
			MethodName: "GetCJ",
			Handler:    _Workload_GetCJ_Handler,
		},
		{
			MethodName: "CreateCJ",
			Handler:    _Workload_CreateCJ_Handler,
		},
		{
			MethodName: "UpdateCJ",
			Handler:    _Workload_UpdateCJ_Handler,
		},
		{
			MethodName: "DeleteCJ",
			Handler:    _Workload_DeleteCJ_Handler,
		},
		{
			MethodName: "ListJob",
			Handler:    _Workload_ListJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _Workload_GetJob_Handler,
		},
		{
			MethodName: "CreateJob",
			Handler:    _Workload_CreateJob_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _Workload_UpdateJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _Workload_DeleteJob_Handler,
		},
		{
			MethodName: "ListPo",
			Handler:    _Workload_ListPo_Handler,
		},
		{
			MethodName: "GetPo",
			Handler:    _Workload_GetPo_Handler,
		},
		{
			MethodName: "CreatePo",
			Handler:    _Workload_CreatePo_Handler,
		},
		{
			MethodName: "UpdatePo",
			Handler:    _Workload_UpdatePo_Handler,
		},
		{
			MethodName: "DeletePo",
			Handler:    _Workload_DeletePo_Handler,
		},
		{
			MethodName: "ListPoPVC",
			Handler:    _Workload_ListPoPVC_Handler,
		},
		{
			MethodName: "ListPoCM",
			Handler:    _Workload_ListPoCM_Handler,
		},
		{
			MethodName: "ListPoSecret",
			Handler:    _Workload_ListPoSecret_Handler,
		},
		{
			MethodName: "ReschedulePo",
			Handler:    _Workload_ReschedulePo_Handler,
		},
		{
			MethodName: "ListContainer",
			Handler:    _Workload_ListContainer_Handler,
		},
		{
			MethodName: "GetContainer",
			Handler:    _Workload_GetContainer_Handler,
		},
		{
			MethodName: "GetContainerEnvInfo",
			Handler:    _Workload_GetContainerEnvInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster-resources/cluster-resources.proto",
}

// NetworkClient is the client API for Network service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkClient interface {
	ListIng(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetIng(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateIng(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateIng(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteIng(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListSVC(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetSVC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateSVC(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateSVC(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteSVC(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListEP(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetEP(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateEP(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateEP(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteEP(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type networkClient struct {
	cc *grpc.ClientConn
}

func NewNetworkClient(cc *grpc.ClientConn) NetworkClient {
	return &networkClient{cc}
}

func (c *networkClient) ListIng(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/ListIng", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetIng(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/GetIng", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) CreateIng(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/CreateIng", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) UpdateIng(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/UpdateIng", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) DeleteIng(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/DeleteIng", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) ListSVC(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/ListSVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetSVC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/GetSVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) CreateSVC(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/CreateSVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) UpdateSVC(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/UpdateSVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) DeleteSVC(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/DeleteSVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) ListEP(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/ListEP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetEP(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/GetEP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) CreateEP(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/CreateEP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) UpdateEP(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/UpdateEP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) DeleteEP(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/DeleteEP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServer is the server API for Network service.
type NetworkServer interface {
	ListIng(context.Context, *ResListReq) (*CommonResp, error)
	GetIng(context.Context, *ResGetReq) (*CommonResp, error)
	CreateIng(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateIng(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteIng(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListSVC(context.Context, *ResListReq) (*CommonResp, error)
	GetSVC(context.Context, *ResGetReq) (*CommonResp, error)
	CreateSVC(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateSVC(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteSVC(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListEP(context.Context, *ResListReq) (*CommonResp, error)
	GetEP(context.Context, *ResGetReq) (*CommonResp, error)
	CreateEP(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateEP(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteEP(context.Context, *ResDeleteReq) (*CommonResp, error)
}

// UnimplementedNetworkServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkServer struct {
}

func (*UnimplementedNetworkServer) ListIng(ctx context.Context, req *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIng not implemented")
}
func (*UnimplementedNetworkServer) GetIng(ctx context.Context, req *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIng not implemented")
}
func (*UnimplementedNetworkServer) CreateIng(ctx context.Context, req *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIng not implemented")
}
func (*UnimplementedNetworkServer) UpdateIng(ctx context.Context, req *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIng not implemented")
}
func (*UnimplementedNetworkServer) DeleteIng(ctx context.Context, req *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIng not implemented")
}
func (*UnimplementedNetworkServer) ListSVC(ctx context.Context, req *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSVC not implemented")
}
func (*UnimplementedNetworkServer) GetSVC(ctx context.Context, req *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSVC not implemented")
}
func (*UnimplementedNetworkServer) CreateSVC(ctx context.Context, req *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSVC not implemented")
}
func (*UnimplementedNetworkServer) UpdateSVC(ctx context.Context, req *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSVC not implemented")
}
func (*UnimplementedNetworkServer) DeleteSVC(ctx context.Context, req *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSVC not implemented")
}
func (*UnimplementedNetworkServer) ListEP(ctx context.Context, req *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEP not implemented")
}
func (*UnimplementedNetworkServer) GetEP(ctx context.Context, req *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEP not implemented")
}
func (*UnimplementedNetworkServer) CreateEP(ctx context.Context, req *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEP not implemented")
}
func (*UnimplementedNetworkServer) UpdateEP(ctx context.Context, req *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEP not implemented")
}
func (*UnimplementedNetworkServer) DeleteEP(ctx context.Context, req *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEP not implemented")
}

func RegisterNetworkServer(s *grpc.Server, srv NetworkServer) {
	s.RegisterService(&_Network_serviceDesc, srv)
}

func _Network_ListIng_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).ListIng(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/ListIng",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).ListIng(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetIng_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetIng(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/GetIng",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetIng(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_CreateIng_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).CreateIng(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/CreateIng",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).CreateIng(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_UpdateIng_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).UpdateIng(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/UpdateIng",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).UpdateIng(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_DeleteIng_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).DeleteIng(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/DeleteIng",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).DeleteIng(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_ListSVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).ListSVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/ListSVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).ListSVC(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetSVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetSVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/GetSVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetSVC(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_CreateSVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).CreateSVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/CreateSVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).CreateSVC(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_UpdateSVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).UpdateSVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/UpdateSVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).UpdateSVC(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_DeleteSVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).DeleteSVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/DeleteSVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).DeleteSVC(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_ListEP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).ListEP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/ListEP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).ListEP(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetEP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetEP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/GetEP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetEP(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_CreateEP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).CreateEP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/CreateEP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).CreateEP(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_UpdateEP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).UpdateEP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/UpdateEP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).UpdateEP(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_DeleteEP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).DeleteEP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/DeleteEP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).DeleteEP(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Network_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Network",
	HandlerType: (*NetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIng",
			Handler:    _Network_ListIng_Handler,
		},
		{
			MethodName: "GetIng",
			Handler:    _Network_GetIng_Handler,
		},
		{
			MethodName: "CreateIng",
			Handler:    _Network_CreateIng_Handler,
		},
		{
			MethodName: "UpdateIng",
			Handler:    _Network_UpdateIng_Handler,
		},
		{
			MethodName: "DeleteIng",
			Handler:    _Network_DeleteIng_Handler,
		},
		{
			MethodName: "ListSVC",
			Handler:    _Network_ListSVC_Handler,
		},
		{
			MethodName: "GetSVC",
			Handler:    _Network_GetSVC_Handler,
		},
		{
			MethodName: "CreateSVC",
			Handler:    _Network_CreateSVC_Handler,
		},
		{
			MethodName: "UpdateSVC",
			Handler:    _Network_UpdateSVC_Handler,
		},
		{
			MethodName: "DeleteSVC",
			Handler:    _Network_DeleteSVC_Handler,
		},
		{
			MethodName: "ListEP",
			Handler:    _Network_ListEP_Handler,
		},
		{
			MethodName: "GetEP",
			Handler:    _Network_GetEP_Handler,
		},
		{
			MethodName: "CreateEP",
			Handler:    _Network_CreateEP_Handler,
		},
		{
			MethodName: "UpdateEP",
			Handler:    _Network_UpdateEP_Handler,
		},
		{
			MethodName: "DeleteEP",
			Handler:    _Network_DeleteEP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster-resources/cluster-resources.proto",
}

// ConfigClient is the client API for Config service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigClient interface {
	ListCM(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetCM(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateCM(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateCM(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteCM(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListSecret(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetSecret(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateSecret(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateSecret(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteSecret(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type configClient struct {
	cc *grpc.ClientConn
}

func NewConfigClient(cc *grpc.ClientConn) ConfigClient {
	return &configClient{cc}
}

func (c *configClient) ListCM(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/ListCM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetCM(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/GetCM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateCM(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/CreateCM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateCM(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/UpdateCM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteCM(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/DeleteCM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListSecret(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/ListSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetSecret(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/GetSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateSecret(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/CreateSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateSecret(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/UpdateSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteSecret(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/DeleteSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServer is the server API for Config service.
type ConfigServer interface {
	ListCM(context.Context, *ResListReq) (*CommonResp, error)
	GetCM(context.Context, *ResGetReq) (*CommonResp, error)
	CreateCM(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateCM(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteCM(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListSecret(context.Context, *ResListReq) (*CommonResp, error)
	GetSecret(context.Context, *ResGetReq) (*CommonResp, error)
	CreateSecret(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateSecret(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteSecret(context.Context, *ResDeleteReq) (*CommonResp, error)
}

// UnimplementedConfigServer can be embedded to have forward compatible implementations.
type UnimplementedConfigServer struct {
}

func (*UnimplementedConfigServer) ListCM(ctx context.Context, req *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCM not implemented")
}
func (*UnimplementedConfigServer) GetCM(ctx context.Context, req *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCM not implemented")
}
func (*UnimplementedConfigServer) CreateCM(ctx context.Context, req *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCM not implemented")
}
func (*UnimplementedConfigServer) UpdateCM(ctx context.Context, req *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCM not implemented")
}
func (*UnimplementedConfigServer) DeleteCM(ctx context.Context, req *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCM not implemented")
}
func (*UnimplementedConfigServer) ListSecret(ctx context.Context, req *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecret not implemented")
}
func (*UnimplementedConfigServer) GetSecret(ctx context.Context, req *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (*UnimplementedConfigServer) CreateSecret(ctx context.Context, req *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecret not implemented")
}
func (*UnimplementedConfigServer) UpdateSecret(ctx context.Context, req *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecret not implemented")
}
func (*UnimplementedConfigServer) DeleteSecret(ctx context.Context, req *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}

func RegisterConfigServer(s *grpc.Server, srv ConfigServer) {
	s.RegisterService(&_Config_serviceDesc, srv)
}

func _Config_ListCM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListCM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/ListCM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListCM(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetCM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetCM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/GetCM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetCM(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateCM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateCM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/CreateCM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateCM(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateCM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateCM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/UpdateCM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateCM(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteCM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteCM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/DeleteCM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteCM(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/ListSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListSecret(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/GetSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetSecret(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/CreateSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateSecret(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/UpdateSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateSecret(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/DeleteSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteSecret(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Config_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Config",
	HandlerType: (*ConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCM",
			Handler:    _Config_ListCM_Handler,
		},
		{
			MethodName: "GetCM",
			Handler:    _Config_GetCM_Handler,
		},
		{
			MethodName: "CreateCM",
			Handler:    _Config_CreateCM_Handler,
		},
		{
			MethodName: "UpdateCM",
			Handler:    _Config_UpdateCM_Handler,
		},
		{
			MethodName: "DeleteCM",
			Handler:    _Config_DeleteCM_Handler,
		},
		{
			MethodName: "ListSecret",
			Handler:    _Config_ListSecret_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _Config_GetSecret_Handler,
		},
		{
			MethodName: "CreateSecret",
			Handler:    _Config_CreateSecret_Handler,
		},
		{
			MethodName: "UpdateSecret",
			Handler:    _Config_UpdateSecret_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _Config_DeleteSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster-resources/cluster-resources.proto",
}

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StorageClient interface {
	ListPV(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetPV(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreatePV(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdatePV(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeletePV(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListPVC(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetPVC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreatePVC(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdatePVC(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeletePVC(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListSC(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetSC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateSC(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateSC(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteSC(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type storageClient struct {
	cc *grpc.ClientConn
}

func NewStorageClient(cc *grpc.ClientConn) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) ListPV(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/ListPV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetPV(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/GetPV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) CreatePV(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/CreatePV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) UpdatePV(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/UpdatePV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeletePV(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/DeletePV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ListPVC(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/ListPVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetPVC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/GetPVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) CreatePVC(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/CreatePVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) UpdatePVC(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/UpdatePVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeletePVC(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/DeletePVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ListSC(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/ListSC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetSC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/GetSC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) CreateSC(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/CreateSC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) UpdateSC(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/UpdateSC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteSC(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/DeleteSC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
type StorageServer interface {
	ListPV(context.Context, *ResListReq) (*CommonResp, error)
	GetPV(context.Context, *ResGetReq) (*CommonResp, error)
	CreatePV(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdatePV(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeletePV(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListPVC(context.Context, *ResListReq) (*CommonResp, error)
	GetPVC(context.Context, *ResGetReq) (*CommonResp, error)
	CreatePVC(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdatePVC(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeletePVC(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListSC(context.Context, *ResListReq) (*CommonResp, error)
	GetSC(context.Context, *ResGetReq) (*CommonResp, error)
	CreateSC(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateSC(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteSC(context.Context, *ResDeleteReq) (*CommonResp, error)
}

// UnimplementedStorageServer can be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (*UnimplementedStorageServer) ListPV(ctx context.Context, req *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPV not implemented")
}
func (*UnimplementedStorageServer) GetPV(ctx context.Context, req *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPV not implemented")
}
func (*UnimplementedStorageServer) CreatePV(ctx context.Context, req *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePV not implemented")
}
func (*UnimplementedStorageServer) UpdatePV(ctx context.Context, req *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePV not implemented")
}
func (*UnimplementedStorageServer) DeletePV(ctx context.Context, req *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePV not implemented")
}
func (*UnimplementedStorageServer) ListPVC(ctx context.Context, req *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPVC not implemented")
}
func (*UnimplementedStorageServer) GetPVC(ctx context.Context, req *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPVC not implemented")
}
func (*UnimplementedStorageServer) CreatePVC(ctx context.Context, req *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePVC not implemented")
}
func (*UnimplementedStorageServer) UpdatePVC(ctx context.Context, req *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePVC not implemented")
}
func (*UnimplementedStorageServer) DeletePVC(ctx context.Context, req *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePVC not implemented")
}
func (*UnimplementedStorageServer) ListSC(ctx context.Context, req *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSC not implemented")
}
func (*UnimplementedStorageServer) GetSC(ctx context.Context, req *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSC not implemented")
}
func (*UnimplementedStorageServer) CreateSC(ctx context.Context, req *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSC not implemented")
}
func (*UnimplementedStorageServer) UpdateSC(ctx context.Context, req *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSC not implemented")
}
func (*UnimplementedStorageServer) DeleteSC(ctx context.Context, req *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSC not implemented")
}

func RegisterStorageServer(s *grpc.Server, srv StorageServer) {
	s.RegisterService(&_Storage_serviceDesc, srv)
}

func _Storage_ListPV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ListPV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/ListPV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ListPV(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetPV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetPV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/GetPV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetPV(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_CreatePV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).CreatePV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/CreatePV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).CreatePV(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_UpdatePV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).UpdatePV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/UpdatePV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).UpdatePV(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeletePV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeletePV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/DeletePV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeletePV(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ListPVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ListPVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/ListPVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ListPVC(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetPVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetPVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/GetPVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetPVC(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_CreatePVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).CreatePVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/CreatePVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).CreatePVC(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_UpdatePVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).UpdatePVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/UpdatePVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).UpdatePVC(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeletePVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeletePVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/DeletePVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeletePVC(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ListSC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ListSC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/ListSC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ListSC(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetSC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetSC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/GetSC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetSC(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_CreateSC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).CreateSC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/CreateSC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).CreateSC(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_UpdateSC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).UpdateSC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/UpdateSC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).UpdateSC(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteSC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteSC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/DeleteSC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteSC(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Storage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPV",
			Handler:    _Storage_ListPV_Handler,
		},
		{
			MethodName: "GetPV",
			Handler:    _Storage_GetPV_Handler,
		},
		{
			MethodName: "CreatePV",
			Handler:    _Storage_CreatePV_Handler,
		},
		{
			MethodName: "UpdatePV",
			Handler:    _Storage_UpdatePV_Handler,
		},
		{
			MethodName: "DeletePV",
			Handler:    _Storage_DeletePV_Handler,
		},
		{
			MethodName: "ListPVC",
			Handler:    _Storage_ListPVC_Handler,
		},
		{
			MethodName: "GetPVC",
			Handler:    _Storage_GetPVC_Handler,
		},
		{
			MethodName: "CreatePVC",
			Handler:    _Storage_CreatePVC_Handler,
		},
		{
			MethodName: "UpdatePVC",
			Handler:    _Storage_UpdatePVC_Handler,
		},
		{
			MethodName: "DeletePVC",
			Handler:    _Storage_DeletePVC_Handler,
		},
		{
			MethodName: "ListSC",
			Handler:    _Storage_ListSC_Handler,
		},
		{
			MethodName: "GetSC",
			Handler:    _Storage_GetSC_Handler,
		},
		{
			MethodName: "CreateSC",
			Handler:    _Storage_CreateSC_Handler,
		},
		{
			MethodName: "UpdateSC",
			Handler:    _Storage_UpdateSC_Handler,
		},
		{
			MethodName: "DeleteSC",
			Handler:    _Storage_DeleteSC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster-resources/cluster-resources.proto",
}

// RBACClient is the client API for RBAC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RBACClient interface {
	ListSA(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetSA(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateSA(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateSA(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteSA(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type rBACClient struct {
	cc *grpc.ClientConn
}

func NewRBACClient(cc *grpc.ClientConn) RBACClient {
	return &rBACClient{cc}
}

func (c *rBACClient) ListSA(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.RBAC/ListSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) GetSA(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.RBAC/GetSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) CreateSA(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.RBAC/CreateSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) UpdateSA(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.RBAC/UpdateSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) DeleteSA(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.RBAC/DeleteSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RBACServer is the server API for RBAC service.
type RBACServer interface {
	ListSA(context.Context, *ResListReq) (*CommonResp, error)
	GetSA(context.Context, *ResGetReq) (*CommonResp, error)
	CreateSA(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateSA(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteSA(context.Context, *ResDeleteReq) (*CommonResp, error)
}

// UnimplementedRBACServer can be embedded to have forward compatible implementations.
type UnimplementedRBACServer struct {
}

func (*UnimplementedRBACServer) ListSA(ctx context.Context, req *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSA not implemented")
}
func (*UnimplementedRBACServer) GetSA(ctx context.Context, req *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSA not implemented")
}
func (*UnimplementedRBACServer) CreateSA(ctx context.Context, req *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSA not implemented")
}
func (*UnimplementedRBACServer) UpdateSA(ctx context.Context, req *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSA not implemented")
}
func (*UnimplementedRBACServer) DeleteSA(ctx context.Context, req *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSA not implemented")
}

func RegisterRBACServer(s *grpc.Server, srv RBACServer) {
	s.RegisterService(&_RBAC_serviceDesc, srv)
}

func _RBAC_ListSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).ListSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.RBAC/ListSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).ListSA(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_GetSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).GetSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.RBAC/GetSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).GetSA(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_CreateSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).CreateSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.RBAC/CreateSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).CreateSA(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_UpdateSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).UpdateSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.RBAC/UpdateSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).UpdateSA(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_DeleteSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).DeleteSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.RBAC/DeleteSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).DeleteSA(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RBAC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.RBAC",
	HandlerType: (*RBACServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSA",
			Handler:    _RBAC_ListSA_Handler,
		},
		{
			MethodName: "GetSA",
			Handler:    _RBAC_GetSA_Handler,
		},
		{
			MethodName: "CreateSA",
			Handler:    _RBAC_CreateSA_Handler,
		},
		{
			MethodName: "UpdateSA",
			Handler:    _RBAC_UpdateSA_Handler,
		},
		{
			MethodName: "DeleteSA",
			Handler:    _RBAC_DeleteSA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster-resources/cluster-resources.proto",
}

// HPAClient is the client API for HPA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HPAClient interface {
	ListHPA(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetHPA(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateHPA(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateHPA(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteHPA(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type hPAClient struct {
	cc *grpc.ClientConn
}

func NewHPAClient(cc *grpc.ClientConn) HPAClient {
	return &hPAClient{cc}
}

func (c *hPAClient) ListHPA(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.HPA/ListHPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPAClient) GetHPA(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.HPA/GetHPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPAClient) CreateHPA(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.HPA/CreateHPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPAClient) UpdateHPA(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.HPA/UpdateHPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPAClient) DeleteHPA(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.HPA/DeleteHPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HPAServer is the server API for HPA service.
type HPAServer interface {
	ListHPA(context.Context, *ResListReq) (*CommonResp, error)
	GetHPA(context.Context, *ResGetReq) (*CommonResp, error)
	CreateHPA(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateHPA(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteHPA(context.Context, *ResDeleteReq) (*CommonResp, error)
}

// UnimplementedHPAServer can be embedded to have forward compatible implementations.
type UnimplementedHPAServer struct {
}

func (*UnimplementedHPAServer) ListHPA(ctx context.Context, req *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHPA not implemented")
}
func (*UnimplementedHPAServer) GetHPA(ctx context.Context, req *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHPA not implemented")
}
func (*UnimplementedHPAServer) CreateHPA(ctx context.Context, req *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHPA not implemented")
}
func (*UnimplementedHPAServer) UpdateHPA(ctx context.Context, req *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHPA not implemented")
}
func (*UnimplementedHPAServer) DeleteHPA(ctx context.Context, req *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHPA not implemented")
}

func RegisterHPAServer(s *grpc.Server, srv HPAServer) {
	s.RegisterService(&_HPA_serviceDesc, srv)
}

func _HPA_ListHPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPAServer).ListHPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.HPA/ListHPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPAServer).ListHPA(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPA_GetHPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPAServer).GetHPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.HPA/GetHPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPAServer).GetHPA(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPA_CreateHPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPAServer).CreateHPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.HPA/CreateHPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPAServer).CreateHPA(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPA_UpdateHPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPAServer).UpdateHPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.HPA/UpdateHPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPAServer).UpdateHPA(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPA_DeleteHPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPAServer).DeleteHPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.HPA/DeleteHPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPAServer).DeleteHPA(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _HPA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.HPA",
	HandlerType: (*HPAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHPA",
			Handler:    _HPA_ListHPA_Handler,
		},
		{
			MethodName: "GetHPA",
			Handler:    _HPA_GetHPA_Handler,
		},
		{
			MethodName: "CreateHPA",
			Handler:    _HPA_CreateHPA_Handler,
		},
		{
			MethodName: "UpdateHPA",
			Handler:    _HPA_UpdateHPA_Handler,
		},
		{
			MethodName: "DeleteHPA",
			Handler:    _HPA_DeleteHPA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster-resources/cluster-resources.proto",
}

// CustomResClient is the client API for CustomRes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomResClient interface {
	ListCRD(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetCRD(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListCObj(ctx context.Context, in *CObjListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetCObj(ctx context.Context, in *CObjGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateCObj(ctx context.Context, in *CObjCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateCObj(ctx context.Context, in *CObjUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteCObj(ctx context.Context, in *CObjDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type customResClient struct {
	cc *grpc.ClientConn
}

func NewCustomResClient(cc *grpc.ClientConn) CustomResClient {
	return &customResClient{cc}
}

func (c *customResClient) ListCRD(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/ListCRD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) GetCRD(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/GetCRD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) ListCObj(ctx context.Context, in *CObjListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/ListCObj", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) GetCObj(ctx context.Context, in *CObjGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/GetCObj", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) CreateCObj(ctx context.Context, in *CObjCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/CreateCObj", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) UpdateCObj(ctx context.Context, in *CObjUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/UpdateCObj", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) DeleteCObj(ctx context.Context, in *CObjDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/DeleteCObj", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomResServer is the server API for CustomRes service.
type CustomResServer interface {
	ListCRD(context.Context, *ResListReq) (*CommonResp, error)
	GetCRD(context.Context, *ResGetReq) (*CommonResp, error)
	ListCObj(context.Context, *CObjListReq) (*CommonResp, error)
	GetCObj(context.Context, *CObjGetReq) (*CommonResp, error)
	CreateCObj(context.Context, *CObjCreateReq) (*CommonResp, error)
	UpdateCObj(context.Context, *CObjUpdateReq) (*CommonResp, error)
	DeleteCObj(context.Context, *CObjDeleteReq) (*CommonResp, error)
}

// UnimplementedCustomResServer can be embedded to have forward compatible implementations.
type UnimplementedCustomResServer struct {
}

func (*UnimplementedCustomResServer) ListCRD(ctx context.Context, req *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCRD not implemented")
}
func (*UnimplementedCustomResServer) GetCRD(ctx context.Context, req *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCRD not implemented")
}
func (*UnimplementedCustomResServer) ListCObj(ctx context.Context, req *CObjListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCObj not implemented")
}
func (*UnimplementedCustomResServer) GetCObj(ctx context.Context, req *CObjGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCObj not implemented")
}
func (*UnimplementedCustomResServer) CreateCObj(ctx context.Context, req *CObjCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCObj not implemented")
}
func (*UnimplementedCustomResServer) UpdateCObj(ctx context.Context, req *CObjUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCObj not implemented")
}
func (*UnimplementedCustomResServer) DeleteCObj(ctx context.Context, req *CObjDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCObj not implemented")
}

func RegisterCustomResServer(s *grpc.Server, srv CustomResServer) {
	s.RegisterService(&_CustomRes_serviceDesc, srv)
}

func _CustomRes_ListCRD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).ListCRD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/ListCRD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).ListCRD(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_GetCRD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).GetCRD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/GetCRD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).GetCRD(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_ListCObj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CObjListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).ListCObj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/ListCObj",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).ListCObj(ctx, req.(*CObjListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_GetCObj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CObjGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).GetCObj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/GetCObj",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).GetCObj(ctx, req.(*CObjGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_CreateCObj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CObjCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).CreateCObj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/CreateCObj",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).CreateCObj(ctx, req.(*CObjCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_UpdateCObj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CObjUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).UpdateCObj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/UpdateCObj",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).UpdateCObj(ctx, req.(*CObjUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_DeleteCObj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CObjDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).DeleteCObj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/DeleteCObj",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).DeleteCObj(ctx, req.(*CObjDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomRes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.CustomRes",
	HandlerType: (*CustomResServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCRD",
			Handler:    _CustomRes_ListCRD_Handler,
		},
		{
			MethodName: "GetCRD",
			Handler:    _CustomRes_GetCRD_Handler,
		},
		{
			MethodName: "ListCObj",
			Handler:    _CustomRes_ListCObj_Handler,
		},
		{
			MethodName: "GetCObj",
			Handler:    _CustomRes_GetCObj_Handler,
		},
		{
			MethodName: "CreateCObj",
			Handler:    _CustomRes_CreateCObj_Handler,
		},
		{
			MethodName: "UpdateCObj",
			Handler:    _CustomRes_UpdateCObj_Handler,
		},
		{
			MethodName: "DeleteCObj",
			Handler:    _CustomRes_DeleteCObj_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster-resources/cluster-resources.proto",
}

// ResourceClient is the client API for Resource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResourceClient interface {
	// 示例模板接口
	GetK8SResTemplate(ctx context.Context, in *GetK8SResTemplateReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 订阅接口
	Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (Resource_SubscribeClient, error)
	// 主动使 Discover 缓存失效
	InvalidateDiscoveryCache(ctx context.Context, in *InvalidateDiscoveryCacheReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 表单化数据渲染预览
	FormDataRenderPreview(ctx context.Context, in *FormRenderPreviewReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type resourceClient struct {
	cc *grpc.ClientConn
}

func NewResourceClient(cc *grpc.ClientConn) ResourceClient {
	return &resourceClient{cc}
}

func (c *resourceClient) GetK8SResTemplate(ctx context.Context, in *GetK8SResTemplateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Resource/GetK8SResTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (Resource_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Resource_serviceDesc.Streams[0], "/clusterresources.Resource/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Resource_SubscribeClient interface {
	Recv() (*SubscribeResp, error)
	grpc.ClientStream
}

type resourceSubscribeClient struct {
	grpc.ClientStream
}

func (x *resourceSubscribeClient) Recv() (*SubscribeResp, error) {
	m := new(SubscribeResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourceClient) InvalidateDiscoveryCache(ctx context.Context, in *InvalidateDiscoveryCacheReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Resource/InvalidateDiscoveryCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) FormDataRenderPreview(ctx context.Context, in *FormRenderPreviewReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Resource/FormDataRenderPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceServer is the server API for Resource service.
type ResourceServer interface {
	// 示例模板接口
	GetK8SResTemplate(context.Context, *GetK8SResTemplateReq) (*CommonResp, error)
	// 订阅接口
	Subscribe(*SubscribeReq, Resource_SubscribeServer) error
	// 主动使 Discover 缓存失效
	InvalidateDiscoveryCache(context.Context, *InvalidateDiscoveryCacheReq) (*CommonResp, error)
	// 表单化数据渲染预览
	FormDataRenderPreview(context.Context, *FormRenderPreviewReq) (*CommonResp, error)
}

// UnimplementedResourceServer can be embedded to have forward compatible implementations.
type UnimplementedResourceServer struct {
}

func (*UnimplementedResourceServer) GetK8SResTemplate(ctx context.Context, req *GetK8SResTemplateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SResTemplate not implemented")
}
func (*UnimplementedResourceServer) Subscribe(req *SubscribeReq, srv Resource_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedResourceServer) InvalidateDiscoveryCache(ctx context.Context, req *InvalidateDiscoveryCacheReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateDiscoveryCache not implemented")
}
func (*UnimplementedResourceServer) FormDataRenderPreview(ctx context.Context, req *FormRenderPreviewReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormDataRenderPreview not implemented")
}

func RegisterResourceServer(s *grpc.Server, srv ResourceServer) {
	s.RegisterService(&_Resource_serviceDesc, srv)
}

func _Resource_GetK8SResTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetK8SResTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetK8SResTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Resource/GetK8SResTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetK8SResTemplate(ctx, req.(*GetK8SResTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServer).Subscribe(m, &resourceSubscribeServer{stream})
}

type Resource_SubscribeServer interface {
	Send(*SubscribeResp) error
	grpc.ServerStream
}

type resourceSubscribeServer struct {
	grpc.ServerStream
}

func (x *resourceSubscribeServer) Send(m *SubscribeResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Resource_InvalidateDiscoveryCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateDiscoveryCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).InvalidateDiscoveryCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Resource/InvalidateDiscoveryCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).InvalidateDiscoveryCache(ctx, req.(*InvalidateDiscoveryCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_FormDataRenderPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormRenderPreviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).FormDataRenderPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Resource/FormDataRenderPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).FormDataRenderPreview(ctx, req.(*FormRenderPreviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Resource_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Resource",
	HandlerType: (*ResourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetK8SResTemplate",
			Handler:    _Resource_GetK8SResTemplate_Handler,
		},
		{
			MethodName: "InvalidateDiscoveryCache",
			Handler:    _Resource_InvalidateDiscoveryCache_Handler,
		},
		{
			MethodName: "FormDataRenderPreview",
			Handler:    _Resource_FormDataRenderPreview_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Resource_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/cluster-resources/cluster-resources.proto",
}
