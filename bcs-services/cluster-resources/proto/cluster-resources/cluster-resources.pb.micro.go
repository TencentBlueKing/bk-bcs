// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/cluster-resources/cluster-resources.proto

package cluster_resources

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ClusterResources service

func NewClusterResourcesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "ClusterResources.Echo",
			Path:    []string{"/clusterresources/v1/echo"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.Ping",
			Path:    []string{"/clusterresources/v1/ping"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.Healthz",
			Path:    []string{"/clusterresources/v1/healthz"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.Version",
			Path:    []string{"/clusterresources/v1/version"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListNS",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListDeploy",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/deployments"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.GetDeploy",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/deployments/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.CreateDeploy",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/workloads/deployments"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.UpdateDeploy",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/deployments/{name}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.DeleteDeploy",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/deployments/{name}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListDS",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/daemonsets"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.GetDS",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/daemonsets/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.CreateDS",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/workloads/daemonsets"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.UpdateDS",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/daemonsets/{name}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.DeleteDS",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/daemonsets/{name}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListSTS",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/statefulsets"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.GetSTS",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/statefulsets/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.CreateSTS",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/workloads/statefulsets"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.UpdateSTS",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/statefulsets/{name}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.DeleteSTS",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/statefulsets/{name}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListCJ",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/cronjobs"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.GetCJ",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/cronjobs/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.CreateCJ",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/workloads/cronjobs"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.UpdateCJ",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/cronjobs/{name}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.DeleteCJ",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/cronjobs/{name}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListJob",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/jobs"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.GetJob",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/jobs/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.CreateJob",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/workloads/jobs"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.UpdateJob",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/jobs/{name}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.DeleteJob",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/jobs/{name}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListPo",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/pods"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.GetPo",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/pods/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.CreatePo",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/workloads/pods"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.UpdatePo",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/pods/{name}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.DeletePo",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/pods/{name}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListPoPVC",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/pods/{name}/pvcs"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListPoCM",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/pods/{name}/configmaps"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListPoSecret",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/pods/{name}/secrets"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ReschedulePo",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/pods/{name}/reschedule"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListContainer",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/pods/{podName}/containers"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.GetContainer",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/pods/{podName}/containers/{containerName}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.GetContainerEnvInfo",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/pods/{podName}/containers/{containerName}/env_info"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListIng",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/ingresses"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.GetIng",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/ingresses/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.CreateIng",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/networks/ingresses"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.UpdateIng",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/ingresses/{name}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.DeleteIng",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/ingresses/{name}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListSVC",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/services"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.GetSVC",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/services/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.CreateSVC",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/networks/services"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.UpdateSVC",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/services/{name}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.DeleteSVC",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/services/{name}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListEP",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/endpoints"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.GetEP",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/endpoints/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.CreateEP",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/networks/endpoints"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.UpdateEP",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/endpoints/{name}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.DeleteEP",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/endpoints/{name}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListCM",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/configs/configmaps"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.GetCM",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/configs/configmaps/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.CreateCM",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/configs/configmaps"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.UpdateCM",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/configs/configmaps/{name}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.DeleteCM",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/configs/configmaps/{name}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListSecret",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/configs/secrets"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.GetSecret",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/configs/secrets/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.CreateSecret",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/configs/secrets"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.UpdateSecret",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/configs/secrets/{name}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.DeleteSecret",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/configs/secrets/{name}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListPV",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/storages/persistent_volumes"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.GetPV",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/storages/persistent_volumes/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.CreatePV",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/storages/persistent_volumes"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.UpdatePV",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/storages/persistent_volumes/{name}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.DeletePV",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/storages/persistent_volumes/{name}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListPVC",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/storages/persistent_volume_claims"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.GetPVC",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/storages/persistent_volume_claims/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.CreatePVC",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/storages/persistent_volume_claims"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.UpdatePVC",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/storages/persistent_volume_claims/{name}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.DeletePVC",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/storages/persistent_volume_claims/{name}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListSC",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/storages/storage_classes"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.GetSC",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/storages/storage_classes/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.CreateSC",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/storages/storage_classes"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.UpdateSC",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/storages/storage_classes/{name}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.DeleteSC",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/storages/storage_classes/{name}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListSA",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/rbac/service_accounts"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.GetSA",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/rbac/service_accounts/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.CreateSA",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/rbac/service_accounts"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.UpdateSA",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/rbac/service_accounts/{name}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.DeleteSA",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/rbac/service_accounts/{name}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListHPA",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/hpa"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.GetHPA",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/hpa/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.CreateHPA",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/hpa"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.UpdateHPA",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/hpa/{name}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.DeleteHPA",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/hpa/{name}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.GetK8SResTemplate",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/examples/manifests"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListCRD",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/crds"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.GetCRD",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/crds/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.ListCObj",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/crds/{CRDName}/custom_objects"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.GetCObj",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/crds/{CRDName}/custom_objects/{cobjName}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.CreateCObj",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/crds/{CRDName}/custom_objects"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.UpdateCObj",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/crds/{CRDName}/custom_objects/{cobjName}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.DeleteCObj",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/crds/{CRDName}/custom_objects/{cobjName}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.Subscribe",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/subscribe"},
			Method:  []string{"GET"},
			Stream:  true,
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterResources.InvalidateDiscoveryCache",
			Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/invalidate_discovery_cache"},
			Method:  []string{"POST"},
			Body:    "",
			Handler: "rpc",
		},
	}
}

// Client API for ClusterResources service

type ClusterResourcesService interface {
	// 基础类接口
	Echo(ctx context.Context, in *EchoReq, opts ...client.CallOption) (*EchoResp, error)
	Ping(ctx context.Context, in *PingReq, opts ...client.CallOption) (*PingResp, error)
	Healthz(ctx context.Context, in *HealthzReq, opts ...client.CallOption) (*HealthzResp, error)
	Version(ctx context.Context, in *VersionReq, opts ...client.CallOption) (*VersionResp, error)
	// 命名空间接口
	ListNS(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error)
	// 工作负载类接口
	ListDeploy(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error)
	GetDeploy(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error)
	CreateDeploy(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error)
	UpdateDeploy(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error)
	DeleteDeploy(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error)
	ListDS(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error)
	GetDS(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error)
	CreateDS(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error)
	UpdateDS(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error)
	DeleteDS(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error)
	ListSTS(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error)
	GetSTS(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error)
	CreateSTS(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error)
	UpdateSTS(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error)
	DeleteSTS(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error)
	ListCJ(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error)
	GetCJ(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error)
	CreateCJ(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error)
	UpdateCJ(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error)
	DeleteCJ(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error)
	ListJob(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error)
	GetJob(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error)
	CreateJob(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error)
	UpdateJob(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error)
	DeleteJob(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error)
	ListPo(ctx context.Context, in *PodResListReq, opts ...client.CallOption) (*CommonResp, error)
	GetPo(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error)
	CreatePo(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error)
	UpdatePo(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error)
	DeletePo(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error)
	ListPoPVC(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error)
	ListPoCM(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error)
	ListPoSecret(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error)
	ReschedulePo(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error)
	ListContainer(ctx context.Context, in *ContainerListReq, opts ...client.CallOption) (*CommonListResp, error)
	GetContainer(ctx context.Context, in *ContainerGetReq, opts ...client.CallOption) (*CommonResp, error)
	GetContainerEnvInfo(ctx context.Context, in *ContainerGetReq, opts ...client.CallOption) (*CommonListResp, error)
	// 网络类接口
	ListIng(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error)
	GetIng(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error)
	CreateIng(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error)
	UpdateIng(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error)
	DeleteIng(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error)
	ListSVC(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error)
	GetSVC(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error)
	CreateSVC(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error)
	UpdateSVC(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error)
	DeleteSVC(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error)
	ListEP(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error)
	GetEP(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error)
	CreateEP(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error)
	UpdateEP(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error)
	DeleteEP(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error)
	// 配置类接口
	ListCM(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error)
	GetCM(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error)
	CreateCM(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error)
	UpdateCM(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error)
	DeleteCM(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error)
	ListSecret(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error)
	GetSecret(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error)
	CreateSecret(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error)
	UpdateSecret(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error)
	DeleteSecret(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error)
	// 存储类接口
	ListPV(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error)
	GetPV(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error)
	CreatePV(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error)
	UpdatePV(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error)
	DeletePV(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error)
	ListPVC(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error)
	GetPVC(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error)
	CreatePVC(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error)
	UpdatePVC(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error)
	DeletePVC(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error)
	ListSC(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error)
	GetSC(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error)
	CreateSC(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error)
	UpdateSC(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error)
	DeleteSC(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error)
	// RBAC 类接口
	ListSA(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error)
	GetSA(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error)
	CreateSA(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error)
	UpdateSA(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error)
	DeleteSA(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error)
	// HPA 接口
	ListHPA(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error)
	GetHPA(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error)
	CreateHPA(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error)
	UpdateHPA(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error)
	DeleteHPA(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error)
	// 示例模板接口
	GetK8SResTemplate(ctx context.Context, in *GetK8SResTemplateReq, opts ...client.CallOption) (*CommonResp, error)
	// 自定义资源类接口
	ListCRD(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error)
	GetCRD(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error)
	ListCObj(ctx context.Context, in *CObjListReq, opts ...client.CallOption) (*CommonResp, error)
	GetCObj(ctx context.Context, in *CObjGetReq, opts ...client.CallOption) (*CommonResp, error)
	CreateCObj(ctx context.Context, in *CObjCreateReq, opts ...client.CallOption) (*CommonResp, error)
	UpdateCObj(ctx context.Context, in *CObjUpdateReq, opts ...client.CallOption) (*CommonResp, error)
	DeleteCObj(ctx context.Context, in *CObjDeleteReq, opts ...client.CallOption) (*CommonResp, error)
	// 订阅接口
	Subscribe(ctx context.Context, in *SubscribeReq, opts ...client.CallOption) (ClusterResources_SubscribeService, error)
	// 主动使 Discover 缓存失效
	InvalidateDiscoveryCache(ctx context.Context, in *InvalidateDiscoveryCacheReq, opts ...client.CallOption) (*CommonResp, error)
}

type clusterResourcesService struct {
	c    client.Client
	name string
}

func NewClusterResourcesService(name string, c client.Client) ClusterResourcesService {
	return &clusterResourcesService{
		c:    c,
		name: name,
	}
}

func (c *clusterResourcesService) Echo(ctx context.Context, in *EchoReq, opts ...client.CallOption) (*EchoResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.Echo", in)
	out := new(EchoResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) Ping(ctx context.Context, in *PingReq, opts ...client.CallOption) (*PingResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.Ping", in)
	out := new(PingResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) Healthz(ctx context.Context, in *HealthzReq, opts ...client.CallOption) (*HealthzResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.Healthz", in)
	out := new(HealthzResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) Version(ctx context.Context, in *VersionReq, opts ...client.CallOption) (*VersionResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.Version", in)
	out := new(VersionResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListNS(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListNS", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListDeploy(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListDeploy", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) GetDeploy(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.GetDeploy", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) CreateDeploy(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.CreateDeploy", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) UpdateDeploy(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.UpdateDeploy", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) DeleteDeploy(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.DeleteDeploy", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListDS(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListDS", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) GetDS(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.GetDS", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) CreateDS(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.CreateDS", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) UpdateDS(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.UpdateDS", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) DeleteDS(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.DeleteDS", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListSTS(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListSTS", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) GetSTS(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.GetSTS", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) CreateSTS(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.CreateSTS", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) UpdateSTS(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.UpdateSTS", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) DeleteSTS(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.DeleteSTS", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListCJ(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListCJ", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) GetCJ(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.GetCJ", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) CreateCJ(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.CreateCJ", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) UpdateCJ(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.UpdateCJ", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) DeleteCJ(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.DeleteCJ", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListJob(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListJob", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) GetJob(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.GetJob", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) CreateJob(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.CreateJob", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) UpdateJob(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.UpdateJob", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) DeleteJob(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.DeleteJob", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListPo(ctx context.Context, in *PodResListReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListPo", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) GetPo(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.GetPo", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) CreatePo(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.CreatePo", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) UpdatePo(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.UpdatePo", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) DeletePo(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.DeletePo", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListPoPVC(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListPoPVC", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListPoCM(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListPoCM", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListPoSecret(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListPoSecret", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ReschedulePo(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ReschedulePo", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListContainer(ctx context.Context, in *ContainerListReq, opts ...client.CallOption) (*CommonListResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListContainer", in)
	out := new(CommonListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) GetContainer(ctx context.Context, in *ContainerGetReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.GetContainer", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) GetContainerEnvInfo(ctx context.Context, in *ContainerGetReq, opts ...client.CallOption) (*CommonListResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.GetContainerEnvInfo", in)
	out := new(CommonListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListIng(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListIng", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) GetIng(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.GetIng", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) CreateIng(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.CreateIng", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) UpdateIng(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.UpdateIng", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) DeleteIng(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.DeleteIng", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListSVC(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListSVC", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) GetSVC(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.GetSVC", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) CreateSVC(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.CreateSVC", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) UpdateSVC(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.UpdateSVC", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) DeleteSVC(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.DeleteSVC", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListEP(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListEP", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) GetEP(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.GetEP", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) CreateEP(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.CreateEP", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) UpdateEP(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.UpdateEP", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) DeleteEP(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.DeleteEP", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListCM(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListCM", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) GetCM(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.GetCM", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) CreateCM(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.CreateCM", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) UpdateCM(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.UpdateCM", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) DeleteCM(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.DeleteCM", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListSecret(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListSecret", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) GetSecret(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.GetSecret", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) CreateSecret(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.CreateSecret", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) UpdateSecret(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.UpdateSecret", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) DeleteSecret(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.DeleteSecret", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListPV(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListPV", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) GetPV(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.GetPV", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) CreatePV(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.CreatePV", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) UpdatePV(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.UpdatePV", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) DeletePV(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.DeletePV", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListPVC(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListPVC", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) GetPVC(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.GetPVC", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) CreatePVC(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.CreatePVC", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) UpdatePVC(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.UpdatePVC", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) DeletePVC(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.DeletePVC", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListSC(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListSC", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) GetSC(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.GetSC", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) CreateSC(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.CreateSC", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) UpdateSC(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.UpdateSC", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) DeleteSC(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.DeleteSC", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListSA(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListSA", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) GetSA(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.GetSA", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) CreateSA(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.CreateSA", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) UpdateSA(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.UpdateSA", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) DeleteSA(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.DeleteSA", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListHPA(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListHPA", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) GetHPA(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.GetHPA", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) CreateHPA(ctx context.Context, in *ResCreateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.CreateHPA", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) UpdateHPA(ctx context.Context, in *ResUpdateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.UpdateHPA", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) DeleteHPA(ctx context.Context, in *ResDeleteReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.DeleteHPA", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) GetK8SResTemplate(ctx context.Context, in *GetK8SResTemplateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.GetK8SResTemplate", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListCRD(ctx context.Context, in *ResListReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListCRD", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) GetCRD(ctx context.Context, in *ResGetReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.GetCRD", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) ListCObj(ctx context.Context, in *CObjListReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.ListCObj", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) GetCObj(ctx context.Context, in *CObjGetReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.GetCObj", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) CreateCObj(ctx context.Context, in *CObjCreateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.CreateCObj", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) UpdateCObj(ctx context.Context, in *CObjUpdateReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.UpdateCObj", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) DeleteCObj(ctx context.Context, in *CObjDeleteReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.DeleteCObj", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterResourcesService) Subscribe(ctx context.Context, in *SubscribeReq, opts ...client.CallOption) (ClusterResources_SubscribeService, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.Subscribe", &SubscribeReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &clusterResourcesServiceSubscribe{stream}, nil
}

type ClusterResources_SubscribeService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*SubscribeResp, error)
}

type clusterResourcesServiceSubscribe struct {
	stream client.Stream
}

func (x *clusterResourcesServiceSubscribe) Close() error {
	return x.stream.Close()
}

func (x *clusterResourcesServiceSubscribe) Context() context.Context {
	return x.stream.Context()
}

func (x *clusterResourcesServiceSubscribe) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *clusterResourcesServiceSubscribe) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *clusterResourcesServiceSubscribe) Recv() (*SubscribeResp, error) {
	m := new(SubscribeResp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterResourcesService) InvalidateDiscoveryCache(ctx context.Context, in *InvalidateDiscoveryCacheReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "ClusterResources.InvalidateDiscoveryCache", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClusterResources service

type ClusterResourcesHandler interface {
	// 基础类接口
	Echo(context.Context, *EchoReq, *EchoResp) error
	Ping(context.Context, *PingReq, *PingResp) error
	Healthz(context.Context, *HealthzReq, *HealthzResp) error
	Version(context.Context, *VersionReq, *VersionResp) error
	// 命名空间接口
	ListNS(context.Context, *ResListReq, *CommonResp) error
	// 工作负载类接口
	ListDeploy(context.Context, *ResListReq, *CommonResp) error
	GetDeploy(context.Context, *ResGetReq, *CommonResp) error
	CreateDeploy(context.Context, *ResCreateReq, *CommonResp) error
	UpdateDeploy(context.Context, *ResUpdateReq, *CommonResp) error
	DeleteDeploy(context.Context, *ResDeleteReq, *CommonResp) error
	ListDS(context.Context, *ResListReq, *CommonResp) error
	GetDS(context.Context, *ResGetReq, *CommonResp) error
	CreateDS(context.Context, *ResCreateReq, *CommonResp) error
	UpdateDS(context.Context, *ResUpdateReq, *CommonResp) error
	DeleteDS(context.Context, *ResDeleteReq, *CommonResp) error
	ListSTS(context.Context, *ResListReq, *CommonResp) error
	GetSTS(context.Context, *ResGetReq, *CommonResp) error
	CreateSTS(context.Context, *ResCreateReq, *CommonResp) error
	UpdateSTS(context.Context, *ResUpdateReq, *CommonResp) error
	DeleteSTS(context.Context, *ResDeleteReq, *CommonResp) error
	ListCJ(context.Context, *ResListReq, *CommonResp) error
	GetCJ(context.Context, *ResGetReq, *CommonResp) error
	CreateCJ(context.Context, *ResCreateReq, *CommonResp) error
	UpdateCJ(context.Context, *ResUpdateReq, *CommonResp) error
	DeleteCJ(context.Context, *ResDeleteReq, *CommonResp) error
	ListJob(context.Context, *ResListReq, *CommonResp) error
	GetJob(context.Context, *ResGetReq, *CommonResp) error
	CreateJob(context.Context, *ResCreateReq, *CommonResp) error
	UpdateJob(context.Context, *ResUpdateReq, *CommonResp) error
	DeleteJob(context.Context, *ResDeleteReq, *CommonResp) error
	ListPo(context.Context, *PodResListReq, *CommonResp) error
	GetPo(context.Context, *ResGetReq, *CommonResp) error
	CreatePo(context.Context, *ResCreateReq, *CommonResp) error
	UpdatePo(context.Context, *ResUpdateReq, *CommonResp) error
	DeletePo(context.Context, *ResDeleteReq, *CommonResp) error
	ListPoPVC(context.Context, *ResGetReq, *CommonResp) error
	ListPoCM(context.Context, *ResGetReq, *CommonResp) error
	ListPoSecret(context.Context, *ResGetReq, *CommonResp) error
	ReschedulePo(context.Context, *ResUpdateReq, *CommonResp) error
	ListContainer(context.Context, *ContainerListReq, *CommonListResp) error
	GetContainer(context.Context, *ContainerGetReq, *CommonResp) error
	GetContainerEnvInfo(context.Context, *ContainerGetReq, *CommonListResp) error
	// 网络类接口
	ListIng(context.Context, *ResListReq, *CommonResp) error
	GetIng(context.Context, *ResGetReq, *CommonResp) error
	CreateIng(context.Context, *ResCreateReq, *CommonResp) error
	UpdateIng(context.Context, *ResUpdateReq, *CommonResp) error
	DeleteIng(context.Context, *ResDeleteReq, *CommonResp) error
	ListSVC(context.Context, *ResListReq, *CommonResp) error
	GetSVC(context.Context, *ResGetReq, *CommonResp) error
	CreateSVC(context.Context, *ResCreateReq, *CommonResp) error
	UpdateSVC(context.Context, *ResUpdateReq, *CommonResp) error
	DeleteSVC(context.Context, *ResDeleteReq, *CommonResp) error
	ListEP(context.Context, *ResListReq, *CommonResp) error
	GetEP(context.Context, *ResGetReq, *CommonResp) error
	CreateEP(context.Context, *ResCreateReq, *CommonResp) error
	UpdateEP(context.Context, *ResUpdateReq, *CommonResp) error
	DeleteEP(context.Context, *ResDeleteReq, *CommonResp) error
	// 配置类接口
	ListCM(context.Context, *ResListReq, *CommonResp) error
	GetCM(context.Context, *ResGetReq, *CommonResp) error
	CreateCM(context.Context, *ResCreateReq, *CommonResp) error
	UpdateCM(context.Context, *ResUpdateReq, *CommonResp) error
	DeleteCM(context.Context, *ResDeleteReq, *CommonResp) error
	ListSecret(context.Context, *ResListReq, *CommonResp) error
	GetSecret(context.Context, *ResGetReq, *CommonResp) error
	CreateSecret(context.Context, *ResCreateReq, *CommonResp) error
	UpdateSecret(context.Context, *ResUpdateReq, *CommonResp) error
	DeleteSecret(context.Context, *ResDeleteReq, *CommonResp) error
	// 存储类接口
	ListPV(context.Context, *ResListReq, *CommonResp) error
	GetPV(context.Context, *ResGetReq, *CommonResp) error
	CreatePV(context.Context, *ResCreateReq, *CommonResp) error
	UpdatePV(context.Context, *ResUpdateReq, *CommonResp) error
	DeletePV(context.Context, *ResDeleteReq, *CommonResp) error
	ListPVC(context.Context, *ResListReq, *CommonResp) error
	GetPVC(context.Context, *ResGetReq, *CommonResp) error
	CreatePVC(context.Context, *ResCreateReq, *CommonResp) error
	UpdatePVC(context.Context, *ResUpdateReq, *CommonResp) error
	DeletePVC(context.Context, *ResDeleteReq, *CommonResp) error
	ListSC(context.Context, *ResListReq, *CommonResp) error
	GetSC(context.Context, *ResGetReq, *CommonResp) error
	CreateSC(context.Context, *ResCreateReq, *CommonResp) error
	UpdateSC(context.Context, *ResUpdateReq, *CommonResp) error
	DeleteSC(context.Context, *ResDeleteReq, *CommonResp) error
	// RBAC 类接口
	ListSA(context.Context, *ResListReq, *CommonResp) error
	GetSA(context.Context, *ResGetReq, *CommonResp) error
	CreateSA(context.Context, *ResCreateReq, *CommonResp) error
	UpdateSA(context.Context, *ResUpdateReq, *CommonResp) error
	DeleteSA(context.Context, *ResDeleteReq, *CommonResp) error
	// HPA 接口
	ListHPA(context.Context, *ResListReq, *CommonResp) error
	GetHPA(context.Context, *ResGetReq, *CommonResp) error
	CreateHPA(context.Context, *ResCreateReq, *CommonResp) error
	UpdateHPA(context.Context, *ResUpdateReq, *CommonResp) error
	DeleteHPA(context.Context, *ResDeleteReq, *CommonResp) error
	// 示例模板接口
	GetK8SResTemplate(context.Context, *GetK8SResTemplateReq, *CommonResp) error
	// 自定义资源类接口
	ListCRD(context.Context, *ResListReq, *CommonResp) error
	GetCRD(context.Context, *ResGetReq, *CommonResp) error
	ListCObj(context.Context, *CObjListReq, *CommonResp) error
	GetCObj(context.Context, *CObjGetReq, *CommonResp) error
	CreateCObj(context.Context, *CObjCreateReq, *CommonResp) error
	UpdateCObj(context.Context, *CObjUpdateReq, *CommonResp) error
	DeleteCObj(context.Context, *CObjDeleteReq, *CommonResp) error
	// 订阅接口
	Subscribe(context.Context, *SubscribeReq, ClusterResources_SubscribeStream) error
	// 主动使 Discover 缓存失效
	InvalidateDiscoveryCache(context.Context, *InvalidateDiscoveryCacheReq, *CommonResp) error
}

func RegisterClusterResourcesHandler(s server.Server, hdlr ClusterResourcesHandler, opts ...server.HandlerOption) error {
	type clusterResources interface {
		Echo(ctx context.Context, in *EchoReq, out *EchoResp) error
		Ping(ctx context.Context, in *PingReq, out *PingResp) error
		Healthz(ctx context.Context, in *HealthzReq, out *HealthzResp) error
		Version(ctx context.Context, in *VersionReq, out *VersionResp) error
		ListNS(ctx context.Context, in *ResListReq, out *CommonResp) error
		ListDeploy(ctx context.Context, in *ResListReq, out *CommonResp) error
		GetDeploy(ctx context.Context, in *ResGetReq, out *CommonResp) error
		CreateDeploy(ctx context.Context, in *ResCreateReq, out *CommonResp) error
		UpdateDeploy(ctx context.Context, in *ResUpdateReq, out *CommonResp) error
		DeleteDeploy(ctx context.Context, in *ResDeleteReq, out *CommonResp) error
		ListDS(ctx context.Context, in *ResListReq, out *CommonResp) error
		GetDS(ctx context.Context, in *ResGetReq, out *CommonResp) error
		CreateDS(ctx context.Context, in *ResCreateReq, out *CommonResp) error
		UpdateDS(ctx context.Context, in *ResUpdateReq, out *CommonResp) error
		DeleteDS(ctx context.Context, in *ResDeleteReq, out *CommonResp) error
		ListSTS(ctx context.Context, in *ResListReq, out *CommonResp) error
		GetSTS(ctx context.Context, in *ResGetReq, out *CommonResp) error
		CreateSTS(ctx context.Context, in *ResCreateReq, out *CommonResp) error
		UpdateSTS(ctx context.Context, in *ResUpdateReq, out *CommonResp) error
		DeleteSTS(ctx context.Context, in *ResDeleteReq, out *CommonResp) error
		ListCJ(ctx context.Context, in *ResListReq, out *CommonResp) error
		GetCJ(ctx context.Context, in *ResGetReq, out *CommonResp) error
		CreateCJ(ctx context.Context, in *ResCreateReq, out *CommonResp) error
		UpdateCJ(ctx context.Context, in *ResUpdateReq, out *CommonResp) error
		DeleteCJ(ctx context.Context, in *ResDeleteReq, out *CommonResp) error
		ListJob(ctx context.Context, in *ResListReq, out *CommonResp) error
		GetJob(ctx context.Context, in *ResGetReq, out *CommonResp) error
		CreateJob(ctx context.Context, in *ResCreateReq, out *CommonResp) error
		UpdateJob(ctx context.Context, in *ResUpdateReq, out *CommonResp) error
		DeleteJob(ctx context.Context, in *ResDeleteReq, out *CommonResp) error
		ListPo(ctx context.Context, in *PodResListReq, out *CommonResp) error
		GetPo(ctx context.Context, in *ResGetReq, out *CommonResp) error
		CreatePo(ctx context.Context, in *ResCreateReq, out *CommonResp) error
		UpdatePo(ctx context.Context, in *ResUpdateReq, out *CommonResp) error
		DeletePo(ctx context.Context, in *ResDeleteReq, out *CommonResp) error
		ListPoPVC(ctx context.Context, in *ResGetReq, out *CommonResp) error
		ListPoCM(ctx context.Context, in *ResGetReq, out *CommonResp) error
		ListPoSecret(ctx context.Context, in *ResGetReq, out *CommonResp) error
		ReschedulePo(ctx context.Context, in *ResUpdateReq, out *CommonResp) error
		ListContainer(ctx context.Context, in *ContainerListReq, out *CommonListResp) error
		GetContainer(ctx context.Context, in *ContainerGetReq, out *CommonResp) error
		GetContainerEnvInfo(ctx context.Context, in *ContainerGetReq, out *CommonListResp) error
		ListIng(ctx context.Context, in *ResListReq, out *CommonResp) error
		GetIng(ctx context.Context, in *ResGetReq, out *CommonResp) error
		CreateIng(ctx context.Context, in *ResCreateReq, out *CommonResp) error
		UpdateIng(ctx context.Context, in *ResUpdateReq, out *CommonResp) error
		DeleteIng(ctx context.Context, in *ResDeleteReq, out *CommonResp) error
		ListSVC(ctx context.Context, in *ResListReq, out *CommonResp) error
		GetSVC(ctx context.Context, in *ResGetReq, out *CommonResp) error
		CreateSVC(ctx context.Context, in *ResCreateReq, out *CommonResp) error
		UpdateSVC(ctx context.Context, in *ResUpdateReq, out *CommonResp) error
		DeleteSVC(ctx context.Context, in *ResDeleteReq, out *CommonResp) error
		ListEP(ctx context.Context, in *ResListReq, out *CommonResp) error
		GetEP(ctx context.Context, in *ResGetReq, out *CommonResp) error
		CreateEP(ctx context.Context, in *ResCreateReq, out *CommonResp) error
		UpdateEP(ctx context.Context, in *ResUpdateReq, out *CommonResp) error
		DeleteEP(ctx context.Context, in *ResDeleteReq, out *CommonResp) error
		ListCM(ctx context.Context, in *ResListReq, out *CommonResp) error
		GetCM(ctx context.Context, in *ResGetReq, out *CommonResp) error
		CreateCM(ctx context.Context, in *ResCreateReq, out *CommonResp) error
		UpdateCM(ctx context.Context, in *ResUpdateReq, out *CommonResp) error
		DeleteCM(ctx context.Context, in *ResDeleteReq, out *CommonResp) error
		ListSecret(ctx context.Context, in *ResListReq, out *CommonResp) error
		GetSecret(ctx context.Context, in *ResGetReq, out *CommonResp) error
		CreateSecret(ctx context.Context, in *ResCreateReq, out *CommonResp) error
		UpdateSecret(ctx context.Context, in *ResUpdateReq, out *CommonResp) error
		DeleteSecret(ctx context.Context, in *ResDeleteReq, out *CommonResp) error
		ListPV(ctx context.Context, in *ResListReq, out *CommonResp) error
		GetPV(ctx context.Context, in *ResGetReq, out *CommonResp) error
		CreatePV(ctx context.Context, in *ResCreateReq, out *CommonResp) error
		UpdatePV(ctx context.Context, in *ResUpdateReq, out *CommonResp) error
		DeletePV(ctx context.Context, in *ResDeleteReq, out *CommonResp) error
		ListPVC(ctx context.Context, in *ResListReq, out *CommonResp) error
		GetPVC(ctx context.Context, in *ResGetReq, out *CommonResp) error
		CreatePVC(ctx context.Context, in *ResCreateReq, out *CommonResp) error
		UpdatePVC(ctx context.Context, in *ResUpdateReq, out *CommonResp) error
		DeletePVC(ctx context.Context, in *ResDeleteReq, out *CommonResp) error
		ListSC(ctx context.Context, in *ResListReq, out *CommonResp) error
		GetSC(ctx context.Context, in *ResGetReq, out *CommonResp) error
		CreateSC(ctx context.Context, in *ResCreateReq, out *CommonResp) error
		UpdateSC(ctx context.Context, in *ResUpdateReq, out *CommonResp) error
		DeleteSC(ctx context.Context, in *ResDeleteReq, out *CommonResp) error
		ListSA(ctx context.Context, in *ResListReq, out *CommonResp) error
		GetSA(ctx context.Context, in *ResGetReq, out *CommonResp) error
		CreateSA(ctx context.Context, in *ResCreateReq, out *CommonResp) error
		UpdateSA(ctx context.Context, in *ResUpdateReq, out *CommonResp) error
		DeleteSA(ctx context.Context, in *ResDeleteReq, out *CommonResp) error
		ListHPA(ctx context.Context, in *ResListReq, out *CommonResp) error
		GetHPA(ctx context.Context, in *ResGetReq, out *CommonResp) error
		CreateHPA(ctx context.Context, in *ResCreateReq, out *CommonResp) error
		UpdateHPA(ctx context.Context, in *ResUpdateReq, out *CommonResp) error
		DeleteHPA(ctx context.Context, in *ResDeleteReq, out *CommonResp) error
		GetK8SResTemplate(ctx context.Context, in *GetK8SResTemplateReq, out *CommonResp) error
		ListCRD(ctx context.Context, in *ResListReq, out *CommonResp) error
		GetCRD(ctx context.Context, in *ResGetReq, out *CommonResp) error
		ListCObj(ctx context.Context, in *CObjListReq, out *CommonResp) error
		GetCObj(ctx context.Context, in *CObjGetReq, out *CommonResp) error
		CreateCObj(ctx context.Context, in *CObjCreateReq, out *CommonResp) error
		UpdateCObj(ctx context.Context, in *CObjUpdateReq, out *CommonResp) error
		DeleteCObj(ctx context.Context, in *CObjDeleteReq, out *CommonResp) error
		Subscribe(ctx context.Context, stream server.Stream) error
		InvalidateDiscoveryCache(ctx context.Context, in *InvalidateDiscoveryCacheReq, out *CommonResp) error
	}
	type ClusterResources struct {
		clusterResources
	}
	h := &clusterResourcesHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.Echo",
		Path:    []string{"/clusterresources/v1/echo"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.Ping",
		Path:    []string{"/clusterresources/v1/ping"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.Healthz",
		Path:    []string{"/clusterresources/v1/healthz"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.Version",
		Path:    []string{"/clusterresources/v1/version"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListNS",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListDeploy",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/deployments"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.GetDeploy",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/deployments/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.CreateDeploy",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/workloads/deployments"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.UpdateDeploy",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/deployments/{name}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.DeleteDeploy",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/deployments/{name}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListDS",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/daemonsets"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.GetDS",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/daemonsets/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.CreateDS",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/workloads/daemonsets"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.UpdateDS",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/daemonsets/{name}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.DeleteDS",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/daemonsets/{name}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListSTS",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/statefulsets"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.GetSTS",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/statefulsets/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.CreateSTS",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/workloads/statefulsets"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.UpdateSTS",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/statefulsets/{name}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.DeleteSTS",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/statefulsets/{name}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListCJ",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/cronjobs"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.GetCJ",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/cronjobs/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.CreateCJ",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/workloads/cronjobs"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.UpdateCJ",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/cronjobs/{name}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.DeleteCJ",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/cronjobs/{name}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListJob",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/jobs"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.GetJob",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/jobs/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.CreateJob",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/workloads/jobs"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.UpdateJob",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/jobs/{name}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.DeleteJob",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/jobs/{name}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListPo",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/pods"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.GetPo",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/pods/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.CreatePo",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/workloads/pods"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.UpdatePo",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/pods/{name}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.DeletePo",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/pods/{name}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListPoPVC",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/pods/{name}/pvcs"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListPoCM",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/pods/{name}/configmaps"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListPoSecret",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/pods/{name}/secrets"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ReschedulePo",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/pods/{name}/reschedule"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListContainer",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/pods/{podName}/containers"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.GetContainer",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/pods/{podName}/containers/{containerName}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.GetContainerEnvInfo",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/workloads/pods/{podName}/containers/{containerName}/env_info"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListIng",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/ingresses"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.GetIng",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/ingresses/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.CreateIng",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/networks/ingresses"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.UpdateIng",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/ingresses/{name}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.DeleteIng",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/ingresses/{name}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListSVC",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/services"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.GetSVC",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/services/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.CreateSVC",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/networks/services"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.UpdateSVC",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/services/{name}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.DeleteSVC",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/services/{name}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListEP",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/endpoints"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.GetEP",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/endpoints/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.CreateEP",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/networks/endpoints"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.UpdateEP",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/endpoints/{name}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.DeleteEP",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/networks/endpoints/{name}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListCM",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/configs/configmaps"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.GetCM",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/configs/configmaps/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.CreateCM",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/configs/configmaps"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.UpdateCM",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/configs/configmaps/{name}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.DeleteCM",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/configs/configmaps/{name}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListSecret",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/configs/secrets"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.GetSecret",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/configs/secrets/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.CreateSecret",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/configs/secrets"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.UpdateSecret",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/configs/secrets/{name}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.DeleteSecret",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/configs/secrets/{name}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListPV",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/storages/persistent_volumes"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.GetPV",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/storages/persistent_volumes/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.CreatePV",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/storages/persistent_volumes"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.UpdatePV",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/storages/persistent_volumes/{name}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.DeletePV",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/storages/persistent_volumes/{name}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListPVC",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/storages/persistent_volume_claims"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.GetPVC",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/storages/persistent_volume_claims/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.CreatePVC",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/storages/persistent_volume_claims"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.UpdatePVC",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/storages/persistent_volume_claims/{name}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.DeletePVC",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/storages/persistent_volume_claims/{name}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListSC",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/storages/storage_classes"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.GetSC",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/storages/storage_classes/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.CreateSC",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/storages/storage_classes"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.UpdateSC",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/storages/storage_classes/{name}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.DeleteSC",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/storages/storage_classes/{name}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListSA",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/rbac/service_accounts"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.GetSA",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/rbac/service_accounts/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.CreateSA",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/rbac/service_accounts"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.UpdateSA",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/rbac/service_accounts/{name}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.DeleteSA",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/rbac/service_accounts/{name}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListHPA",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/hpa"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.GetHPA",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/hpa/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.CreateHPA",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/hpa"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.UpdateHPA",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/hpa/{name}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.DeleteHPA",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/namespaces/{namespace}/hpa/{name}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.GetK8SResTemplate",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/examples/manifests"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListCRD",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/crds"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.GetCRD",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/crds/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.ListCObj",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/crds/{CRDName}/custom_objects"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.GetCObj",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/crds/{CRDName}/custom_objects/{cobjName}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.CreateCObj",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/crds/{CRDName}/custom_objects"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.UpdateCObj",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/crds/{CRDName}/custom_objects/{cobjName}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.DeleteCObj",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/crds/{CRDName}/custom_objects/{cobjName}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.Subscribe",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/subscribe"},
		Method:  []string{"GET"},
		Stream:  true,
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterResources.InvalidateDiscoveryCache",
		Path:    []string{"/clusterresources/v1/projects/{projectID}/clusters/{clusterID}/invalidate_discovery_cache"},
		Method:  []string{"POST"},
		Body:    "",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&ClusterResources{h}, opts...))
}

type clusterResourcesHandler struct {
	ClusterResourcesHandler
}

func (h *clusterResourcesHandler) Echo(ctx context.Context, in *EchoReq, out *EchoResp) error {
	return h.ClusterResourcesHandler.Echo(ctx, in, out)
}

func (h *clusterResourcesHandler) Ping(ctx context.Context, in *PingReq, out *PingResp) error {
	return h.ClusterResourcesHandler.Ping(ctx, in, out)
}

func (h *clusterResourcesHandler) Healthz(ctx context.Context, in *HealthzReq, out *HealthzResp) error {
	return h.ClusterResourcesHandler.Healthz(ctx, in, out)
}

func (h *clusterResourcesHandler) Version(ctx context.Context, in *VersionReq, out *VersionResp) error {
	return h.ClusterResourcesHandler.Version(ctx, in, out)
}

func (h *clusterResourcesHandler) ListNS(ctx context.Context, in *ResListReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ListNS(ctx, in, out)
}

func (h *clusterResourcesHandler) ListDeploy(ctx context.Context, in *ResListReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ListDeploy(ctx, in, out)
}

func (h *clusterResourcesHandler) GetDeploy(ctx context.Context, in *ResGetReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.GetDeploy(ctx, in, out)
}

func (h *clusterResourcesHandler) CreateDeploy(ctx context.Context, in *ResCreateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.CreateDeploy(ctx, in, out)
}

func (h *clusterResourcesHandler) UpdateDeploy(ctx context.Context, in *ResUpdateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.UpdateDeploy(ctx, in, out)
}

func (h *clusterResourcesHandler) DeleteDeploy(ctx context.Context, in *ResDeleteReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.DeleteDeploy(ctx, in, out)
}

func (h *clusterResourcesHandler) ListDS(ctx context.Context, in *ResListReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ListDS(ctx, in, out)
}

func (h *clusterResourcesHandler) GetDS(ctx context.Context, in *ResGetReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.GetDS(ctx, in, out)
}

func (h *clusterResourcesHandler) CreateDS(ctx context.Context, in *ResCreateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.CreateDS(ctx, in, out)
}

func (h *clusterResourcesHandler) UpdateDS(ctx context.Context, in *ResUpdateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.UpdateDS(ctx, in, out)
}

func (h *clusterResourcesHandler) DeleteDS(ctx context.Context, in *ResDeleteReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.DeleteDS(ctx, in, out)
}

func (h *clusterResourcesHandler) ListSTS(ctx context.Context, in *ResListReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ListSTS(ctx, in, out)
}

func (h *clusterResourcesHandler) GetSTS(ctx context.Context, in *ResGetReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.GetSTS(ctx, in, out)
}

func (h *clusterResourcesHandler) CreateSTS(ctx context.Context, in *ResCreateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.CreateSTS(ctx, in, out)
}

func (h *clusterResourcesHandler) UpdateSTS(ctx context.Context, in *ResUpdateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.UpdateSTS(ctx, in, out)
}

func (h *clusterResourcesHandler) DeleteSTS(ctx context.Context, in *ResDeleteReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.DeleteSTS(ctx, in, out)
}

func (h *clusterResourcesHandler) ListCJ(ctx context.Context, in *ResListReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ListCJ(ctx, in, out)
}

func (h *clusterResourcesHandler) GetCJ(ctx context.Context, in *ResGetReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.GetCJ(ctx, in, out)
}

func (h *clusterResourcesHandler) CreateCJ(ctx context.Context, in *ResCreateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.CreateCJ(ctx, in, out)
}

func (h *clusterResourcesHandler) UpdateCJ(ctx context.Context, in *ResUpdateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.UpdateCJ(ctx, in, out)
}

func (h *clusterResourcesHandler) DeleteCJ(ctx context.Context, in *ResDeleteReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.DeleteCJ(ctx, in, out)
}

func (h *clusterResourcesHandler) ListJob(ctx context.Context, in *ResListReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ListJob(ctx, in, out)
}

func (h *clusterResourcesHandler) GetJob(ctx context.Context, in *ResGetReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.GetJob(ctx, in, out)
}

func (h *clusterResourcesHandler) CreateJob(ctx context.Context, in *ResCreateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.CreateJob(ctx, in, out)
}

func (h *clusterResourcesHandler) UpdateJob(ctx context.Context, in *ResUpdateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.UpdateJob(ctx, in, out)
}

func (h *clusterResourcesHandler) DeleteJob(ctx context.Context, in *ResDeleteReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.DeleteJob(ctx, in, out)
}

func (h *clusterResourcesHandler) ListPo(ctx context.Context, in *PodResListReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ListPo(ctx, in, out)
}

func (h *clusterResourcesHandler) GetPo(ctx context.Context, in *ResGetReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.GetPo(ctx, in, out)
}

func (h *clusterResourcesHandler) CreatePo(ctx context.Context, in *ResCreateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.CreatePo(ctx, in, out)
}

func (h *clusterResourcesHandler) UpdatePo(ctx context.Context, in *ResUpdateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.UpdatePo(ctx, in, out)
}

func (h *clusterResourcesHandler) DeletePo(ctx context.Context, in *ResDeleteReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.DeletePo(ctx, in, out)
}

func (h *clusterResourcesHandler) ListPoPVC(ctx context.Context, in *ResGetReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ListPoPVC(ctx, in, out)
}

func (h *clusterResourcesHandler) ListPoCM(ctx context.Context, in *ResGetReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ListPoCM(ctx, in, out)
}

func (h *clusterResourcesHandler) ListPoSecret(ctx context.Context, in *ResGetReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ListPoSecret(ctx, in, out)
}

func (h *clusterResourcesHandler) ReschedulePo(ctx context.Context, in *ResUpdateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ReschedulePo(ctx, in, out)
}

func (h *clusterResourcesHandler) ListContainer(ctx context.Context, in *ContainerListReq, out *CommonListResp) error {
	return h.ClusterResourcesHandler.ListContainer(ctx, in, out)
}

func (h *clusterResourcesHandler) GetContainer(ctx context.Context, in *ContainerGetReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.GetContainer(ctx, in, out)
}

func (h *clusterResourcesHandler) GetContainerEnvInfo(ctx context.Context, in *ContainerGetReq, out *CommonListResp) error {
	return h.ClusterResourcesHandler.GetContainerEnvInfo(ctx, in, out)
}

func (h *clusterResourcesHandler) ListIng(ctx context.Context, in *ResListReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ListIng(ctx, in, out)
}

func (h *clusterResourcesHandler) GetIng(ctx context.Context, in *ResGetReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.GetIng(ctx, in, out)
}

func (h *clusterResourcesHandler) CreateIng(ctx context.Context, in *ResCreateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.CreateIng(ctx, in, out)
}

func (h *clusterResourcesHandler) UpdateIng(ctx context.Context, in *ResUpdateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.UpdateIng(ctx, in, out)
}

func (h *clusterResourcesHandler) DeleteIng(ctx context.Context, in *ResDeleteReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.DeleteIng(ctx, in, out)
}

func (h *clusterResourcesHandler) ListSVC(ctx context.Context, in *ResListReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ListSVC(ctx, in, out)
}

func (h *clusterResourcesHandler) GetSVC(ctx context.Context, in *ResGetReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.GetSVC(ctx, in, out)
}

func (h *clusterResourcesHandler) CreateSVC(ctx context.Context, in *ResCreateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.CreateSVC(ctx, in, out)
}

func (h *clusterResourcesHandler) UpdateSVC(ctx context.Context, in *ResUpdateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.UpdateSVC(ctx, in, out)
}

func (h *clusterResourcesHandler) DeleteSVC(ctx context.Context, in *ResDeleteReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.DeleteSVC(ctx, in, out)
}

func (h *clusterResourcesHandler) ListEP(ctx context.Context, in *ResListReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ListEP(ctx, in, out)
}

func (h *clusterResourcesHandler) GetEP(ctx context.Context, in *ResGetReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.GetEP(ctx, in, out)
}

func (h *clusterResourcesHandler) CreateEP(ctx context.Context, in *ResCreateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.CreateEP(ctx, in, out)
}

func (h *clusterResourcesHandler) UpdateEP(ctx context.Context, in *ResUpdateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.UpdateEP(ctx, in, out)
}

func (h *clusterResourcesHandler) DeleteEP(ctx context.Context, in *ResDeleteReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.DeleteEP(ctx, in, out)
}

func (h *clusterResourcesHandler) ListCM(ctx context.Context, in *ResListReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ListCM(ctx, in, out)
}

func (h *clusterResourcesHandler) GetCM(ctx context.Context, in *ResGetReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.GetCM(ctx, in, out)
}

func (h *clusterResourcesHandler) CreateCM(ctx context.Context, in *ResCreateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.CreateCM(ctx, in, out)
}

func (h *clusterResourcesHandler) UpdateCM(ctx context.Context, in *ResUpdateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.UpdateCM(ctx, in, out)
}

func (h *clusterResourcesHandler) DeleteCM(ctx context.Context, in *ResDeleteReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.DeleteCM(ctx, in, out)
}

func (h *clusterResourcesHandler) ListSecret(ctx context.Context, in *ResListReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ListSecret(ctx, in, out)
}

func (h *clusterResourcesHandler) GetSecret(ctx context.Context, in *ResGetReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.GetSecret(ctx, in, out)
}

func (h *clusterResourcesHandler) CreateSecret(ctx context.Context, in *ResCreateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.CreateSecret(ctx, in, out)
}

func (h *clusterResourcesHandler) UpdateSecret(ctx context.Context, in *ResUpdateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.UpdateSecret(ctx, in, out)
}

func (h *clusterResourcesHandler) DeleteSecret(ctx context.Context, in *ResDeleteReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.DeleteSecret(ctx, in, out)
}

func (h *clusterResourcesHandler) ListPV(ctx context.Context, in *ResListReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ListPV(ctx, in, out)
}

func (h *clusterResourcesHandler) GetPV(ctx context.Context, in *ResGetReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.GetPV(ctx, in, out)
}

func (h *clusterResourcesHandler) CreatePV(ctx context.Context, in *ResCreateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.CreatePV(ctx, in, out)
}

func (h *clusterResourcesHandler) UpdatePV(ctx context.Context, in *ResUpdateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.UpdatePV(ctx, in, out)
}

func (h *clusterResourcesHandler) DeletePV(ctx context.Context, in *ResDeleteReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.DeletePV(ctx, in, out)
}

func (h *clusterResourcesHandler) ListPVC(ctx context.Context, in *ResListReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ListPVC(ctx, in, out)
}

func (h *clusterResourcesHandler) GetPVC(ctx context.Context, in *ResGetReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.GetPVC(ctx, in, out)
}

func (h *clusterResourcesHandler) CreatePVC(ctx context.Context, in *ResCreateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.CreatePVC(ctx, in, out)
}

func (h *clusterResourcesHandler) UpdatePVC(ctx context.Context, in *ResUpdateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.UpdatePVC(ctx, in, out)
}

func (h *clusterResourcesHandler) DeletePVC(ctx context.Context, in *ResDeleteReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.DeletePVC(ctx, in, out)
}

func (h *clusterResourcesHandler) ListSC(ctx context.Context, in *ResListReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ListSC(ctx, in, out)
}

func (h *clusterResourcesHandler) GetSC(ctx context.Context, in *ResGetReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.GetSC(ctx, in, out)
}

func (h *clusterResourcesHandler) CreateSC(ctx context.Context, in *ResCreateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.CreateSC(ctx, in, out)
}

func (h *clusterResourcesHandler) UpdateSC(ctx context.Context, in *ResUpdateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.UpdateSC(ctx, in, out)
}

func (h *clusterResourcesHandler) DeleteSC(ctx context.Context, in *ResDeleteReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.DeleteSC(ctx, in, out)
}

func (h *clusterResourcesHandler) ListSA(ctx context.Context, in *ResListReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ListSA(ctx, in, out)
}

func (h *clusterResourcesHandler) GetSA(ctx context.Context, in *ResGetReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.GetSA(ctx, in, out)
}

func (h *clusterResourcesHandler) CreateSA(ctx context.Context, in *ResCreateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.CreateSA(ctx, in, out)
}

func (h *clusterResourcesHandler) UpdateSA(ctx context.Context, in *ResUpdateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.UpdateSA(ctx, in, out)
}

func (h *clusterResourcesHandler) DeleteSA(ctx context.Context, in *ResDeleteReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.DeleteSA(ctx, in, out)
}

func (h *clusterResourcesHandler) ListHPA(ctx context.Context, in *ResListReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ListHPA(ctx, in, out)
}

func (h *clusterResourcesHandler) GetHPA(ctx context.Context, in *ResGetReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.GetHPA(ctx, in, out)
}

func (h *clusterResourcesHandler) CreateHPA(ctx context.Context, in *ResCreateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.CreateHPA(ctx, in, out)
}

func (h *clusterResourcesHandler) UpdateHPA(ctx context.Context, in *ResUpdateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.UpdateHPA(ctx, in, out)
}

func (h *clusterResourcesHandler) DeleteHPA(ctx context.Context, in *ResDeleteReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.DeleteHPA(ctx, in, out)
}

func (h *clusterResourcesHandler) GetK8SResTemplate(ctx context.Context, in *GetK8SResTemplateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.GetK8SResTemplate(ctx, in, out)
}

func (h *clusterResourcesHandler) ListCRD(ctx context.Context, in *ResListReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ListCRD(ctx, in, out)
}

func (h *clusterResourcesHandler) GetCRD(ctx context.Context, in *ResGetReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.GetCRD(ctx, in, out)
}

func (h *clusterResourcesHandler) ListCObj(ctx context.Context, in *CObjListReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.ListCObj(ctx, in, out)
}

func (h *clusterResourcesHandler) GetCObj(ctx context.Context, in *CObjGetReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.GetCObj(ctx, in, out)
}

func (h *clusterResourcesHandler) CreateCObj(ctx context.Context, in *CObjCreateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.CreateCObj(ctx, in, out)
}

func (h *clusterResourcesHandler) UpdateCObj(ctx context.Context, in *CObjUpdateReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.UpdateCObj(ctx, in, out)
}

func (h *clusterResourcesHandler) DeleteCObj(ctx context.Context, in *CObjDeleteReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.DeleteCObj(ctx, in, out)
}

func (h *clusterResourcesHandler) Subscribe(ctx context.Context, stream server.Stream) error {
	m := new(SubscribeReq)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ClusterResourcesHandler.Subscribe(ctx, m, &clusterResourcesSubscribeStream{stream})
}

type ClusterResources_SubscribeStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SubscribeResp) error
}

type clusterResourcesSubscribeStream struct {
	stream server.Stream
}

func (x *clusterResourcesSubscribeStream) Close() error {
	return x.stream.Close()
}

func (x *clusterResourcesSubscribeStream) Context() context.Context {
	return x.stream.Context()
}

func (x *clusterResourcesSubscribeStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *clusterResourcesSubscribeStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *clusterResourcesSubscribeStream) Send(m *SubscribeResp) error {
	return x.stream.Send(m)
}

func (h *clusterResourcesHandler) InvalidateDiscoveryCache(ctx context.Context, in *InvalidateDiscoveryCacheReq, out *CommonResp) error {
	return h.ClusterResourcesHandler.InvalidateDiscoveryCache(ctx, in, out)
}
