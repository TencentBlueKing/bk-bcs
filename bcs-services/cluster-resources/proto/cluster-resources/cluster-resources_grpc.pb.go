// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: cluster-resources.proto

package clusterresources

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BasicClient is the client API for Basic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasicClient interface {
	Echo(ctx context.Context, in *EchoReq, opts ...grpc.CallOption) (*EchoResp, error)
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
	Healthz(ctx context.Context, in *HealthzReq, opts ...grpc.CallOption) (*HealthzResp, error)
	Version(ctx context.Context, in *VersionReq, opts ...grpc.CallOption) (*VersionResp, error)
}

type basicClient struct {
	cc grpc.ClientConnInterface
}

func NewBasicClient(cc grpc.ClientConnInterface) BasicClient {
	return &basicClient{cc}
}

func (c *basicClient) Echo(ctx context.Context, in *EchoReq, opts ...grpc.CallOption) (*EchoResp, error) {
	out := new(EchoResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Basic/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Basic/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) Healthz(ctx context.Context, in *HealthzReq, opts ...grpc.CallOption) (*HealthzResp, error) {
	out := new(HealthzResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Basic/Healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicClient) Version(ctx context.Context, in *VersionReq, opts ...grpc.CallOption) (*VersionResp, error) {
	out := new(VersionResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Basic/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasicServer is the server API for Basic service.
// All implementations must embed UnimplementedBasicServer
// for forward compatibility
type BasicServer interface {
	Echo(context.Context, *EchoReq) (*EchoResp, error)
	Ping(context.Context, *PingReq) (*PingResp, error)
	Healthz(context.Context, *HealthzReq) (*HealthzResp, error)
	Version(context.Context, *VersionReq) (*VersionResp, error)
	mustEmbedUnimplementedBasicServer()
}

// UnimplementedBasicServer must be embedded to have forward compatible implementations.
type UnimplementedBasicServer struct {
}

func (UnimplementedBasicServer) Echo(context.Context, *EchoReq) (*EchoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedBasicServer) Ping(context.Context, *PingReq) (*PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBasicServer) Healthz(context.Context, *HealthzReq) (*HealthzResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedBasicServer) Version(context.Context, *VersionReq) (*VersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedBasicServer) mustEmbedUnimplementedBasicServer() {}

// UnsafeBasicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasicServer will
// result in compilation errors.
type UnsafeBasicServer interface {
	mustEmbedUnimplementedBasicServer()
}

func RegisterBasicServer(s grpc.ServiceRegistrar, srv BasicServer) {
	s.RegisterService(&Basic_ServiceDesc, srv)
}

func _Basic_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Basic/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).Echo(ctx, req.(*EchoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Basic/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Basic/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).Healthz(ctx, req.(*HealthzReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basic_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Basic/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServer).Version(ctx, req.(*VersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Basic_ServiceDesc is the grpc.ServiceDesc for Basic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Basic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Basic",
	HandlerType: (*BasicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Basic_Echo_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Basic_Ping_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _Basic_Healthz_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Basic_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster-resources.proto",
}

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeClient interface {
	ListNode(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) ListNode(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Node/ListNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
// All implementations must embed UnimplementedNodeServer
// for forward compatibility
type NodeServer interface {
	ListNode(context.Context, *ResListReq) (*CommonResp, error)
	mustEmbedUnimplementedNodeServer()
}

// UnimplementedNodeServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (UnimplementedNodeServer) ListNode(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNode not implemented")
}
func (UnimplementedNodeServer) mustEmbedUnimplementedNodeServer() {}

// UnsafeNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServer will
// result in compilation errors.
type UnsafeNodeServer interface {
	mustEmbedUnimplementedNodeServer()
}

func RegisterNodeServer(s grpc.ServiceRegistrar, srv NodeServer) {
	s.RegisterService(&Node_ServiceDesc, srv)
}

func _Node_ListNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Node/ListNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListNode(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Node_ServiceDesc is the grpc.ServiceDesc for Node service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Node_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNode",
			Handler:    _Node_ListNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster-resources.proto",
}

// NamespaceClient is the client API for Namespace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamespaceClient interface {
	ListNS(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type namespaceClient struct {
	cc grpc.ClientConnInterface
}

func NewNamespaceClient(cc grpc.ClientConnInterface) NamespaceClient {
	return &namespaceClient{cc}
}

func (c *namespaceClient) ListNS(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Namespace/ListNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamespaceServer is the server API for Namespace service.
// All implementations must embed UnimplementedNamespaceServer
// for forward compatibility
type NamespaceServer interface {
	ListNS(context.Context, *ResListReq) (*CommonResp, error)
	mustEmbedUnimplementedNamespaceServer()
}

// UnimplementedNamespaceServer must be embedded to have forward compatible implementations.
type UnimplementedNamespaceServer struct {
}

func (UnimplementedNamespaceServer) ListNS(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNS not implemented")
}
func (UnimplementedNamespaceServer) mustEmbedUnimplementedNamespaceServer() {}

// UnsafeNamespaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamespaceServer will
// result in compilation errors.
type UnsafeNamespaceServer interface {
	mustEmbedUnimplementedNamespaceServer()
}

func RegisterNamespaceServer(s grpc.ServiceRegistrar, srv NamespaceServer) {
	s.RegisterService(&Namespace_ServiceDesc, srv)
}

func _Namespace_ListNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).ListNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Namespace/ListNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).ListNS(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Namespace_ServiceDesc is the grpc.ServiceDesc for Namespace service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Namespace_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Namespace",
	HandlerType: (*NamespaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNS",
			Handler:    _Namespace_ListNS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster-resources.proto",
}

// WorkloadClient is the client API for Workload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkloadClient interface {
	ListDeploy(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetDeploy(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateDeploy(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateDeploy(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	RestartDeploy(ctx context.Context, in *ResRestartReq, opts ...grpc.CallOption) (*CommonResp, error)
	PauseOrResumeDeploy(ctx context.Context, in *ResPauseOrResumeReq, opts ...grpc.CallOption) (*CommonResp, error)
	ScaleDeploy(ctx context.Context, in *ResScaleReq, opts ...grpc.CallOption) (*CommonResp, error)
	RescheduleDeployPo(ctx context.Context, in *ResBatchRescheduleReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteDeploy(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetDeployHistoryRevision(ctx context.Context, in *GetResHistoryReq, opts ...grpc.CallOption) (*CommonListResp, error)
	GetDeployRevisionDiff(ctx context.Context, in *RolloutRevisionReq, opts ...grpc.CallOption) (*CommonResp, error)
	RolloutDeployRevision(ctx context.Context, in *RolloutRevisionReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListRS(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListDS(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetDS(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateDS(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateDS(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	RestartDS(ctx context.Context, in *ResRestartReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetDSHistoryRevision(ctx context.Context, in *GetResHistoryReq, opts ...grpc.CallOption) (*CommonListResp, error)
	GetDSRevisionDiff(ctx context.Context, in *RolloutRevisionReq, opts ...grpc.CallOption) (*CommonResp, error)
	RolloutDSRevision(ctx context.Context, in *RolloutRevisionReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteDS(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListSTS(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetSTS(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateSTS(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateSTS(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	RestartSTS(ctx context.Context, in *ResRestartReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetSTSHistoryRevision(ctx context.Context, in *GetResHistoryReq, opts ...grpc.CallOption) (*CommonListResp, error)
	GetSTSRevisionDiff(ctx context.Context, in *RolloutRevisionReq, opts ...grpc.CallOption) (*CommonResp, error)
	RolloutSTSRevision(ctx context.Context, in *RolloutRevisionReq, opts ...grpc.CallOption) (*CommonResp, error)
	ScaleSTS(ctx context.Context, in *ResScaleReq, opts ...grpc.CallOption) (*CommonResp, error)
	RescheduleSTSPo(ctx context.Context, in *ResBatchRescheduleReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteSTS(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListCJ(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetCJ(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateCJ(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateCJ(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteCJ(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListJob(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetJob(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateJob(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateJob(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteJob(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListPo(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListPoByNode(ctx context.Context, in *ListPoByNodeReq, opts ...grpc.CallOption) (*CommonListResp, error)
	GetPo(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreatePo(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdatePo(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeletePo(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListPoPVC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListPoCM(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListPoSecret(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	ReschedulePo(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListContainer(ctx context.Context, in *ContainerListReq, opts ...grpc.CallOption) (*CommonListResp, error)
	GetContainer(ctx context.Context, in *ContainerGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetContainerEnvInfo(ctx context.Context, in *ContainerGetReq, opts ...grpc.CallOption) (*CommonListResp, error)
}

type workloadClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkloadClient(cc grpc.ClientConnInterface) WorkloadClient {
	return &workloadClient{cc}
}

func (c *workloadClient) ListDeploy(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetDeploy(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) CreateDeploy(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/CreateDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) UpdateDeploy(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/UpdateDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) RestartDeploy(ctx context.Context, in *ResRestartReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/RestartDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) PauseOrResumeDeploy(ctx context.Context, in *ResPauseOrResumeReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/PauseOrResumeDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ScaleDeploy(ctx context.Context, in *ResScaleReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ScaleDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) RescheduleDeployPo(ctx context.Context, in *ResBatchRescheduleReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/RescheduleDeployPo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) DeleteDeploy(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/DeleteDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetDeployHistoryRevision(ctx context.Context, in *GetResHistoryReq, opts ...grpc.CallOption) (*CommonListResp, error) {
	out := new(CommonListResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetDeployHistoryRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetDeployRevisionDiff(ctx context.Context, in *RolloutRevisionReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetDeployRevisionDiff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) RolloutDeployRevision(ctx context.Context, in *RolloutRevisionReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/RolloutDeployRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListRS(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListRS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListDS(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetDS(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) CreateDS(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/CreateDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) UpdateDS(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/UpdateDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) RestartDS(ctx context.Context, in *ResRestartReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/RestartDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetDSHistoryRevision(ctx context.Context, in *GetResHistoryReq, opts ...grpc.CallOption) (*CommonListResp, error) {
	out := new(CommonListResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetDSHistoryRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetDSRevisionDiff(ctx context.Context, in *RolloutRevisionReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetDSRevisionDiff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) RolloutDSRevision(ctx context.Context, in *RolloutRevisionReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/RolloutDSRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) DeleteDS(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/DeleteDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListSTS(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListSTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetSTS(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetSTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) CreateSTS(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/CreateSTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) UpdateSTS(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/UpdateSTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) RestartSTS(ctx context.Context, in *ResRestartReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/RestartSTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetSTSHistoryRevision(ctx context.Context, in *GetResHistoryReq, opts ...grpc.CallOption) (*CommonListResp, error) {
	out := new(CommonListResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetSTSHistoryRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetSTSRevisionDiff(ctx context.Context, in *RolloutRevisionReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetSTSRevisionDiff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) RolloutSTSRevision(ctx context.Context, in *RolloutRevisionReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/RolloutSTSRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ScaleSTS(ctx context.Context, in *ResScaleReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ScaleSTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) RescheduleSTSPo(ctx context.Context, in *ResBatchRescheduleReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/RescheduleSTSPo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) DeleteSTS(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/DeleteSTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListCJ(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListCJ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetCJ(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetCJ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) CreateCJ(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/CreateCJ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) UpdateCJ(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/UpdateCJ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) DeleteCJ(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/DeleteCJ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListJob(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetJob(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) CreateJob(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/CreateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) UpdateJob(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/UpdateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) DeleteJob(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/DeleteJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListPo(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListPo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListPoByNode(ctx context.Context, in *ListPoByNodeReq, opts ...grpc.CallOption) (*CommonListResp, error) {
	out := new(CommonListResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListPoByNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetPo(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetPo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) CreatePo(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/CreatePo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) UpdatePo(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/UpdatePo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) DeletePo(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/DeletePo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListPoPVC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListPoPVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListPoCM(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListPoCM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListPoSecret(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListPoSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ReschedulePo(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ReschedulePo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) ListContainer(ctx context.Context, in *ContainerListReq, opts ...grpc.CallOption) (*CommonListResp, error) {
	out := new(CommonListResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/ListContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetContainer(ctx context.Context, in *ContainerGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) GetContainerEnvInfo(ctx context.Context, in *ContainerGetReq, opts ...grpc.CallOption) (*CommonListResp, error) {
	out := new(CommonListResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Workload/GetContainerEnvInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkloadServer is the server API for Workload service.
// All implementations must embed UnimplementedWorkloadServer
// for forward compatibility
type WorkloadServer interface {
	ListDeploy(context.Context, *ResListReq) (*CommonResp, error)
	GetDeploy(context.Context, *ResGetReq) (*CommonResp, error)
	CreateDeploy(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateDeploy(context.Context, *ResUpdateReq) (*CommonResp, error)
	RestartDeploy(context.Context, *ResRestartReq) (*CommonResp, error)
	PauseOrResumeDeploy(context.Context, *ResPauseOrResumeReq) (*CommonResp, error)
	ScaleDeploy(context.Context, *ResScaleReq) (*CommonResp, error)
	RescheduleDeployPo(context.Context, *ResBatchRescheduleReq) (*CommonResp, error)
	DeleteDeploy(context.Context, *ResDeleteReq) (*CommonResp, error)
	GetDeployHistoryRevision(context.Context, *GetResHistoryReq) (*CommonListResp, error)
	GetDeployRevisionDiff(context.Context, *RolloutRevisionReq) (*CommonResp, error)
	RolloutDeployRevision(context.Context, *RolloutRevisionReq) (*CommonResp, error)
	ListRS(context.Context, *ResListReq) (*CommonResp, error)
	ListDS(context.Context, *ResListReq) (*CommonResp, error)
	GetDS(context.Context, *ResGetReq) (*CommonResp, error)
	CreateDS(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateDS(context.Context, *ResUpdateReq) (*CommonResp, error)
	RestartDS(context.Context, *ResRestartReq) (*CommonResp, error)
	GetDSHistoryRevision(context.Context, *GetResHistoryReq) (*CommonListResp, error)
	GetDSRevisionDiff(context.Context, *RolloutRevisionReq) (*CommonResp, error)
	RolloutDSRevision(context.Context, *RolloutRevisionReq) (*CommonResp, error)
	DeleteDS(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListSTS(context.Context, *ResListReq) (*CommonResp, error)
	GetSTS(context.Context, *ResGetReq) (*CommonResp, error)
	CreateSTS(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateSTS(context.Context, *ResUpdateReq) (*CommonResp, error)
	RestartSTS(context.Context, *ResRestartReq) (*CommonResp, error)
	GetSTSHistoryRevision(context.Context, *GetResHistoryReq) (*CommonListResp, error)
	GetSTSRevisionDiff(context.Context, *RolloutRevisionReq) (*CommonResp, error)
	RolloutSTSRevision(context.Context, *RolloutRevisionReq) (*CommonResp, error)
	ScaleSTS(context.Context, *ResScaleReq) (*CommonResp, error)
	RescheduleSTSPo(context.Context, *ResBatchRescheduleReq) (*CommonResp, error)
	DeleteSTS(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListCJ(context.Context, *ResListReq) (*CommonResp, error)
	GetCJ(context.Context, *ResGetReq) (*CommonResp, error)
	CreateCJ(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateCJ(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteCJ(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListJob(context.Context, *ResListReq) (*CommonResp, error)
	GetJob(context.Context, *ResGetReq) (*CommonResp, error)
	CreateJob(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateJob(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteJob(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListPo(context.Context, *ResListReq) (*CommonResp, error)
	ListPoByNode(context.Context, *ListPoByNodeReq) (*CommonListResp, error)
	GetPo(context.Context, *ResGetReq) (*CommonResp, error)
	CreatePo(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdatePo(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeletePo(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListPoPVC(context.Context, *ResGetReq) (*CommonResp, error)
	ListPoCM(context.Context, *ResGetReq) (*CommonResp, error)
	ListPoSecret(context.Context, *ResGetReq) (*CommonResp, error)
	ReschedulePo(context.Context, *ResUpdateReq) (*CommonResp, error)
	ListContainer(context.Context, *ContainerListReq) (*CommonListResp, error)
	GetContainer(context.Context, *ContainerGetReq) (*CommonResp, error)
	GetContainerEnvInfo(context.Context, *ContainerGetReq) (*CommonListResp, error)
	mustEmbedUnimplementedWorkloadServer()
}

// UnimplementedWorkloadServer must be embedded to have forward compatible implementations.
type UnimplementedWorkloadServer struct {
}

func (UnimplementedWorkloadServer) ListDeploy(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeploy not implemented")
}
func (UnimplementedWorkloadServer) GetDeploy(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploy not implemented")
}
func (UnimplementedWorkloadServer) CreateDeploy(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeploy not implemented")
}
func (UnimplementedWorkloadServer) UpdateDeploy(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeploy not implemented")
}
func (UnimplementedWorkloadServer) RestartDeploy(context.Context, *ResRestartReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartDeploy not implemented")
}
func (UnimplementedWorkloadServer) PauseOrResumeDeploy(context.Context, *ResPauseOrResumeReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseOrResumeDeploy not implemented")
}
func (UnimplementedWorkloadServer) ScaleDeploy(context.Context, *ResScaleReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleDeploy not implemented")
}
func (UnimplementedWorkloadServer) RescheduleDeployPo(context.Context, *ResBatchRescheduleReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RescheduleDeployPo not implemented")
}
func (UnimplementedWorkloadServer) DeleteDeploy(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeploy not implemented")
}
func (UnimplementedWorkloadServer) GetDeployHistoryRevision(context.Context, *GetResHistoryReq) (*CommonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployHistoryRevision not implemented")
}
func (UnimplementedWorkloadServer) GetDeployRevisionDiff(context.Context, *RolloutRevisionReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployRevisionDiff not implemented")
}
func (UnimplementedWorkloadServer) RolloutDeployRevision(context.Context, *RolloutRevisionReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RolloutDeployRevision not implemented")
}
func (UnimplementedWorkloadServer) ListRS(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRS not implemented")
}
func (UnimplementedWorkloadServer) ListDS(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDS not implemented")
}
func (UnimplementedWorkloadServer) GetDS(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDS not implemented")
}
func (UnimplementedWorkloadServer) CreateDS(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDS not implemented")
}
func (UnimplementedWorkloadServer) UpdateDS(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDS not implemented")
}
func (UnimplementedWorkloadServer) RestartDS(context.Context, *ResRestartReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartDS not implemented")
}
func (UnimplementedWorkloadServer) GetDSHistoryRevision(context.Context, *GetResHistoryReq) (*CommonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDSHistoryRevision not implemented")
}
func (UnimplementedWorkloadServer) GetDSRevisionDiff(context.Context, *RolloutRevisionReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDSRevisionDiff not implemented")
}
func (UnimplementedWorkloadServer) RolloutDSRevision(context.Context, *RolloutRevisionReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RolloutDSRevision not implemented")
}
func (UnimplementedWorkloadServer) DeleteDS(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDS not implemented")
}
func (UnimplementedWorkloadServer) ListSTS(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSTS not implemented")
}
func (UnimplementedWorkloadServer) GetSTS(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSTS not implemented")
}
func (UnimplementedWorkloadServer) CreateSTS(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSTS not implemented")
}
func (UnimplementedWorkloadServer) UpdateSTS(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSTS not implemented")
}
func (UnimplementedWorkloadServer) RestartSTS(context.Context, *ResRestartReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartSTS not implemented")
}
func (UnimplementedWorkloadServer) GetSTSHistoryRevision(context.Context, *GetResHistoryReq) (*CommonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSTSHistoryRevision not implemented")
}
func (UnimplementedWorkloadServer) GetSTSRevisionDiff(context.Context, *RolloutRevisionReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSTSRevisionDiff not implemented")
}
func (UnimplementedWorkloadServer) RolloutSTSRevision(context.Context, *RolloutRevisionReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RolloutSTSRevision not implemented")
}
func (UnimplementedWorkloadServer) ScaleSTS(context.Context, *ResScaleReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleSTS not implemented")
}
func (UnimplementedWorkloadServer) RescheduleSTSPo(context.Context, *ResBatchRescheduleReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RescheduleSTSPo not implemented")
}
func (UnimplementedWorkloadServer) DeleteSTS(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSTS not implemented")
}
func (UnimplementedWorkloadServer) ListCJ(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCJ not implemented")
}
func (UnimplementedWorkloadServer) GetCJ(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCJ not implemented")
}
func (UnimplementedWorkloadServer) CreateCJ(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCJ not implemented")
}
func (UnimplementedWorkloadServer) UpdateCJ(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCJ not implemented")
}
func (UnimplementedWorkloadServer) DeleteCJ(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCJ not implemented")
}
func (UnimplementedWorkloadServer) ListJob(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJob not implemented")
}
func (UnimplementedWorkloadServer) GetJob(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedWorkloadServer) CreateJob(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedWorkloadServer) UpdateJob(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJob not implemented")
}
func (UnimplementedWorkloadServer) DeleteJob(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (UnimplementedWorkloadServer) ListPo(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPo not implemented")
}
func (UnimplementedWorkloadServer) ListPoByNode(context.Context, *ListPoByNodeReq) (*CommonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPoByNode not implemented")
}
func (UnimplementedWorkloadServer) GetPo(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPo not implemented")
}
func (UnimplementedWorkloadServer) CreatePo(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePo not implemented")
}
func (UnimplementedWorkloadServer) UpdatePo(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePo not implemented")
}
func (UnimplementedWorkloadServer) DeletePo(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePo not implemented")
}
func (UnimplementedWorkloadServer) ListPoPVC(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPoPVC not implemented")
}
func (UnimplementedWorkloadServer) ListPoCM(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPoCM not implemented")
}
func (UnimplementedWorkloadServer) ListPoSecret(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPoSecret not implemented")
}
func (UnimplementedWorkloadServer) ReschedulePo(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReschedulePo not implemented")
}
func (UnimplementedWorkloadServer) ListContainer(context.Context, *ContainerListReq) (*CommonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContainer not implemented")
}
func (UnimplementedWorkloadServer) GetContainer(context.Context, *ContainerGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainer not implemented")
}
func (UnimplementedWorkloadServer) GetContainerEnvInfo(context.Context, *ContainerGetReq) (*CommonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerEnvInfo not implemented")
}
func (UnimplementedWorkloadServer) mustEmbedUnimplementedWorkloadServer() {}

// UnsafeWorkloadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkloadServer will
// result in compilation errors.
type UnsafeWorkloadServer interface {
	mustEmbedUnimplementedWorkloadServer()
}

func RegisterWorkloadServer(s grpc.ServiceRegistrar, srv WorkloadServer) {
	s.RegisterService(&Workload_ServiceDesc, srv)
}

func _Workload_ListDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListDeploy(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetDeploy(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_CreateDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).CreateDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/CreateDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).CreateDeploy(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_UpdateDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).UpdateDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/UpdateDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).UpdateDeploy(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_RestartDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResRestartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).RestartDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/RestartDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).RestartDeploy(ctx, req.(*ResRestartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_PauseOrResumeDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResPauseOrResumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).PauseOrResumeDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/PauseOrResumeDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).PauseOrResumeDeploy(ctx, req.(*ResPauseOrResumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ScaleDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResScaleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ScaleDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ScaleDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ScaleDeploy(ctx, req.(*ResScaleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_RescheduleDeployPo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResBatchRescheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).RescheduleDeployPo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/RescheduleDeployPo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).RescheduleDeployPo(ctx, req.(*ResBatchRescheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_DeleteDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).DeleteDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/DeleteDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).DeleteDeploy(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetDeployHistoryRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetDeployHistoryRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetDeployHistoryRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetDeployHistoryRevision(ctx, req.(*GetResHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetDeployRevisionDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetDeployRevisionDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetDeployRevisionDiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetDeployRevisionDiff(ctx, req.(*RolloutRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_RolloutDeployRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).RolloutDeployRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/RolloutDeployRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).RolloutDeployRevision(ctx, req.(*RolloutRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListRS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListRS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListRS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListRS(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListDS(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetDS(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_CreateDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).CreateDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/CreateDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).CreateDS(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_UpdateDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).UpdateDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/UpdateDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).UpdateDS(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_RestartDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResRestartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).RestartDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/RestartDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).RestartDS(ctx, req.(*ResRestartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetDSHistoryRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetDSHistoryRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetDSHistoryRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetDSHistoryRevision(ctx, req.(*GetResHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetDSRevisionDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetDSRevisionDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetDSRevisionDiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetDSRevisionDiff(ctx, req.(*RolloutRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_RolloutDSRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).RolloutDSRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/RolloutDSRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).RolloutDSRevision(ctx, req.(*RolloutRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_DeleteDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).DeleteDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/DeleteDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).DeleteDS(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListSTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListSTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListSTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListSTS(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetSTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetSTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetSTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetSTS(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_CreateSTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).CreateSTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/CreateSTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).CreateSTS(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_UpdateSTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).UpdateSTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/UpdateSTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).UpdateSTS(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_RestartSTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResRestartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).RestartSTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/RestartSTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).RestartSTS(ctx, req.(*ResRestartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetSTSHistoryRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetSTSHistoryRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetSTSHistoryRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetSTSHistoryRevision(ctx, req.(*GetResHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetSTSRevisionDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetSTSRevisionDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetSTSRevisionDiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetSTSRevisionDiff(ctx, req.(*RolloutRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_RolloutSTSRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).RolloutSTSRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/RolloutSTSRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).RolloutSTSRevision(ctx, req.(*RolloutRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ScaleSTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResScaleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ScaleSTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ScaleSTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ScaleSTS(ctx, req.(*ResScaleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_RescheduleSTSPo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResBatchRescheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).RescheduleSTSPo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/RescheduleSTSPo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).RescheduleSTSPo(ctx, req.(*ResBatchRescheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_DeleteSTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).DeleteSTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/DeleteSTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).DeleteSTS(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListCJ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListCJ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListCJ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListCJ(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetCJ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetCJ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetCJ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetCJ(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_CreateCJ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).CreateCJ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/CreateCJ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).CreateCJ(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_UpdateCJ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).UpdateCJ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/UpdateCJ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).UpdateCJ(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_DeleteCJ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).DeleteCJ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/DeleteCJ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).DeleteCJ(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListJob(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetJob(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).CreateJob(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/UpdateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).UpdateJob(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/DeleteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).DeleteJob(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListPo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListPo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListPo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListPo(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListPoByNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoByNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListPoByNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListPoByNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListPoByNode(ctx, req.(*ListPoByNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetPo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetPo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetPo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetPo(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_CreatePo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).CreatePo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/CreatePo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).CreatePo(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_UpdatePo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).UpdatePo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/UpdatePo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).UpdatePo(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_DeletePo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).DeletePo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/DeletePo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).DeletePo(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListPoPVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListPoPVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListPoPVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListPoPVC(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListPoCM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListPoCM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListPoCM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListPoCM(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListPoSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListPoSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListPoSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListPoSecret(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ReschedulePo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ReschedulePo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ReschedulePo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ReschedulePo(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_ListContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).ListContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/ListContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).ListContainer(ctx, req.(*ContainerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetContainer(ctx, req.(*ContainerGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_GetContainerEnvInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).GetContainerEnvInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Workload/GetContainerEnvInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).GetContainerEnvInfo(ctx, req.(*ContainerGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Workload_ServiceDesc is the grpc.ServiceDesc for Workload service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Workload_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Workload",
	HandlerType: (*WorkloadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDeploy",
			Handler:    _Workload_ListDeploy_Handler,
		},
		{
			MethodName: "GetDeploy",
			Handler:    _Workload_GetDeploy_Handler,
		},
		{
			MethodName: "CreateDeploy",
			Handler:    _Workload_CreateDeploy_Handler,
		},
		{
			MethodName: "UpdateDeploy",
			Handler:    _Workload_UpdateDeploy_Handler,
		},
		{
			MethodName: "RestartDeploy",
			Handler:    _Workload_RestartDeploy_Handler,
		},
		{
			MethodName: "PauseOrResumeDeploy",
			Handler:    _Workload_PauseOrResumeDeploy_Handler,
		},
		{
			MethodName: "ScaleDeploy",
			Handler:    _Workload_ScaleDeploy_Handler,
		},
		{
			MethodName: "RescheduleDeployPo",
			Handler:    _Workload_RescheduleDeployPo_Handler,
		},
		{
			MethodName: "DeleteDeploy",
			Handler:    _Workload_DeleteDeploy_Handler,
		},
		{
			MethodName: "GetDeployHistoryRevision",
			Handler:    _Workload_GetDeployHistoryRevision_Handler,
		},
		{
			MethodName: "GetDeployRevisionDiff",
			Handler:    _Workload_GetDeployRevisionDiff_Handler,
		},
		{
			MethodName: "RolloutDeployRevision",
			Handler:    _Workload_RolloutDeployRevision_Handler,
		},
		{
			MethodName: "ListRS",
			Handler:    _Workload_ListRS_Handler,
		},
		{
			MethodName: "ListDS",
			Handler:    _Workload_ListDS_Handler,
		},
		{
			MethodName: "GetDS",
			Handler:    _Workload_GetDS_Handler,
		},
		{
			MethodName: "CreateDS",
			Handler:    _Workload_CreateDS_Handler,
		},
		{
			MethodName: "UpdateDS",
			Handler:    _Workload_UpdateDS_Handler,
		},
		{
			MethodName: "RestartDS",
			Handler:    _Workload_RestartDS_Handler,
		},
		{
			MethodName: "GetDSHistoryRevision",
			Handler:    _Workload_GetDSHistoryRevision_Handler,
		},
		{
			MethodName: "GetDSRevisionDiff",
			Handler:    _Workload_GetDSRevisionDiff_Handler,
		},
		{
			MethodName: "RolloutDSRevision",
			Handler:    _Workload_RolloutDSRevision_Handler,
		},
		{
			MethodName: "DeleteDS",
			Handler:    _Workload_DeleteDS_Handler,
		},
		{
			MethodName: "ListSTS",
			Handler:    _Workload_ListSTS_Handler,
		},
		{
			MethodName: "GetSTS",
			Handler:    _Workload_GetSTS_Handler,
		},
		{
			MethodName: "CreateSTS",
			Handler:    _Workload_CreateSTS_Handler,
		},
		{
			MethodName: "UpdateSTS",
			Handler:    _Workload_UpdateSTS_Handler,
		},
		{
			MethodName: "RestartSTS",
			Handler:    _Workload_RestartSTS_Handler,
		},
		{
			MethodName: "GetSTSHistoryRevision",
			Handler:    _Workload_GetSTSHistoryRevision_Handler,
		},
		{
			MethodName: "GetSTSRevisionDiff",
			Handler:    _Workload_GetSTSRevisionDiff_Handler,
		},
		{
			MethodName: "RolloutSTSRevision",
			Handler:    _Workload_RolloutSTSRevision_Handler,
		},
		{
			MethodName: "ScaleSTS",
			Handler:    _Workload_ScaleSTS_Handler,
		},
		{
			MethodName: "RescheduleSTSPo",
			Handler:    _Workload_RescheduleSTSPo_Handler,
		},
		{
			MethodName: "DeleteSTS",
			Handler:    _Workload_DeleteSTS_Handler,
		},
		{
			MethodName: "ListCJ",
			Handler:    _Workload_ListCJ_Handler,
		},
		{
			MethodName: "GetCJ",
			Handler:    _Workload_GetCJ_Handler,
		},
		{
			MethodName: "CreateCJ",
			Handler:    _Workload_CreateCJ_Handler,
		},
		{
			MethodName: "UpdateCJ",
			Handler:    _Workload_UpdateCJ_Handler,
		},
		{
			MethodName: "DeleteCJ",
			Handler:    _Workload_DeleteCJ_Handler,
		},
		{
			MethodName: "ListJob",
			Handler:    _Workload_ListJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _Workload_GetJob_Handler,
		},
		{
			MethodName: "CreateJob",
			Handler:    _Workload_CreateJob_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _Workload_UpdateJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _Workload_DeleteJob_Handler,
		},
		{
			MethodName: "ListPo",
			Handler:    _Workload_ListPo_Handler,
		},
		{
			MethodName: "ListPoByNode",
			Handler:    _Workload_ListPoByNode_Handler,
		},
		{
			MethodName: "GetPo",
			Handler:    _Workload_GetPo_Handler,
		},
		{
			MethodName: "CreatePo",
			Handler:    _Workload_CreatePo_Handler,
		},
		{
			MethodName: "UpdatePo",
			Handler:    _Workload_UpdatePo_Handler,
		},
		{
			MethodName: "DeletePo",
			Handler:    _Workload_DeletePo_Handler,
		},
		{
			MethodName: "ListPoPVC",
			Handler:    _Workload_ListPoPVC_Handler,
		},
		{
			MethodName: "ListPoCM",
			Handler:    _Workload_ListPoCM_Handler,
		},
		{
			MethodName: "ListPoSecret",
			Handler:    _Workload_ListPoSecret_Handler,
		},
		{
			MethodName: "ReschedulePo",
			Handler:    _Workload_ReschedulePo_Handler,
		},
		{
			MethodName: "ListContainer",
			Handler:    _Workload_ListContainer_Handler,
		},
		{
			MethodName: "GetContainer",
			Handler:    _Workload_GetContainer_Handler,
		},
		{
			MethodName: "GetContainerEnvInfo",
			Handler:    _Workload_GetContainerEnvInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster-resources.proto",
}

// NetworkClient is the client API for Network service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkClient interface {
	ListIng(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetIng(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateIng(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateIng(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteIng(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListSVC(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetSVC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateSVC(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateSVC(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteSVC(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListEP(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetEP(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetEPStatus(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateEP(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateEP(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteEP(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type networkClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkClient(cc grpc.ClientConnInterface) NetworkClient {
	return &networkClient{cc}
}

func (c *networkClient) ListIng(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/ListIng", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetIng(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/GetIng", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) CreateIng(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/CreateIng", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) UpdateIng(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/UpdateIng", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) DeleteIng(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/DeleteIng", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) ListSVC(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/ListSVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetSVC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/GetSVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) CreateSVC(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/CreateSVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) UpdateSVC(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/UpdateSVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) DeleteSVC(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/DeleteSVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) ListEP(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/ListEP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetEP(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/GetEP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetEPStatus(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/GetEPStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) CreateEP(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/CreateEP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) UpdateEP(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/UpdateEP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) DeleteEP(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Network/DeleteEP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServer is the server API for Network service.
// All implementations must embed UnimplementedNetworkServer
// for forward compatibility
type NetworkServer interface {
	ListIng(context.Context, *ResListReq) (*CommonResp, error)
	GetIng(context.Context, *ResGetReq) (*CommonResp, error)
	CreateIng(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateIng(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteIng(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListSVC(context.Context, *ResListReq) (*CommonResp, error)
	GetSVC(context.Context, *ResGetReq) (*CommonResp, error)
	CreateSVC(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateSVC(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteSVC(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListEP(context.Context, *ResListReq) (*CommonResp, error)
	GetEP(context.Context, *ResGetReq) (*CommonResp, error)
	GetEPStatus(context.Context, *ResGetReq) (*CommonResp, error)
	CreateEP(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateEP(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteEP(context.Context, *ResDeleteReq) (*CommonResp, error)
	mustEmbedUnimplementedNetworkServer()
}

// UnimplementedNetworkServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkServer struct {
}

func (UnimplementedNetworkServer) ListIng(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIng not implemented")
}
func (UnimplementedNetworkServer) GetIng(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIng not implemented")
}
func (UnimplementedNetworkServer) CreateIng(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIng not implemented")
}
func (UnimplementedNetworkServer) UpdateIng(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIng not implemented")
}
func (UnimplementedNetworkServer) DeleteIng(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIng not implemented")
}
func (UnimplementedNetworkServer) ListSVC(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSVC not implemented")
}
func (UnimplementedNetworkServer) GetSVC(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSVC not implemented")
}
func (UnimplementedNetworkServer) CreateSVC(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSVC not implemented")
}
func (UnimplementedNetworkServer) UpdateSVC(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSVC not implemented")
}
func (UnimplementedNetworkServer) DeleteSVC(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSVC not implemented")
}
func (UnimplementedNetworkServer) ListEP(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEP not implemented")
}
func (UnimplementedNetworkServer) GetEP(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEP not implemented")
}
func (UnimplementedNetworkServer) GetEPStatus(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEPStatus not implemented")
}
func (UnimplementedNetworkServer) CreateEP(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEP not implemented")
}
func (UnimplementedNetworkServer) UpdateEP(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEP not implemented")
}
func (UnimplementedNetworkServer) DeleteEP(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEP not implemented")
}
func (UnimplementedNetworkServer) mustEmbedUnimplementedNetworkServer() {}

// UnsafeNetworkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkServer will
// result in compilation errors.
type UnsafeNetworkServer interface {
	mustEmbedUnimplementedNetworkServer()
}

func RegisterNetworkServer(s grpc.ServiceRegistrar, srv NetworkServer) {
	s.RegisterService(&Network_ServiceDesc, srv)
}

func _Network_ListIng_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).ListIng(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/ListIng",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).ListIng(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetIng_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetIng(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/GetIng",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetIng(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_CreateIng_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).CreateIng(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/CreateIng",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).CreateIng(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_UpdateIng_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).UpdateIng(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/UpdateIng",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).UpdateIng(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_DeleteIng_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).DeleteIng(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/DeleteIng",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).DeleteIng(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_ListSVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).ListSVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/ListSVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).ListSVC(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetSVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetSVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/GetSVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetSVC(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_CreateSVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).CreateSVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/CreateSVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).CreateSVC(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_UpdateSVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).UpdateSVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/UpdateSVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).UpdateSVC(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_DeleteSVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).DeleteSVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/DeleteSVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).DeleteSVC(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_ListEP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).ListEP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/ListEP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).ListEP(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetEP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetEP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/GetEP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetEP(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetEPStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetEPStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/GetEPStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetEPStatus(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_CreateEP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).CreateEP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/CreateEP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).CreateEP(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_UpdateEP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).UpdateEP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/UpdateEP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).UpdateEP(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_DeleteEP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).DeleteEP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Network/DeleteEP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).DeleteEP(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Network_ServiceDesc is the grpc.ServiceDesc for Network service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Network_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Network",
	HandlerType: (*NetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIng",
			Handler:    _Network_ListIng_Handler,
		},
		{
			MethodName: "GetIng",
			Handler:    _Network_GetIng_Handler,
		},
		{
			MethodName: "CreateIng",
			Handler:    _Network_CreateIng_Handler,
		},
		{
			MethodName: "UpdateIng",
			Handler:    _Network_UpdateIng_Handler,
		},
		{
			MethodName: "DeleteIng",
			Handler:    _Network_DeleteIng_Handler,
		},
		{
			MethodName: "ListSVC",
			Handler:    _Network_ListSVC_Handler,
		},
		{
			MethodName: "GetSVC",
			Handler:    _Network_GetSVC_Handler,
		},
		{
			MethodName: "CreateSVC",
			Handler:    _Network_CreateSVC_Handler,
		},
		{
			MethodName: "UpdateSVC",
			Handler:    _Network_UpdateSVC_Handler,
		},
		{
			MethodName: "DeleteSVC",
			Handler:    _Network_DeleteSVC_Handler,
		},
		{
			MethodName: "ListEP",
			Handler:    _Network_ListEP_Handler,
		},
		{
			MethodName: "GetEP",
			Handler:    _Network_GetEP_Handler,
		},
		{
			MethodName: "GetEPStatus",
			Handler:    _Network_GetEPStatus_Handler,
		},
		{
			MethodName: "CreateEP",
			Handler:    _Network_CreateEP_Handler,
		},
		{
			MethodName: "UpdateEP",
			Handler:    _Network_UpdateEP_Handler,
		},
		{
			MethodName: "DeleteEP",
			Handler:    _Network_DeleteEP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster-resources.proto",
}

// ConfigClient is the client API for Config service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigClient interface {
	ListCM(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetCM(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateCM(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateCM(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteCM(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListSecret(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetSecret(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateSecret(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateSecret(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteSecret(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type configClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigClient(cc grpc.ClientConnInterface) ConfigClient {
	return &configClient{cc}
}

func (c *configClient) ListCM(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/ListCM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetCM(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/GetCM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateCM(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/CreateCM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateCM(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/UpdateCM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteCM(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/DeleteCM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListSecret(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/ListSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetSecret(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/GetSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateSecret(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/CreateSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateSecret(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/UpdateSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteSecret(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Config/DeleteSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServer is the server API for Config service.
// All implementations must embed UnimplementedConfigServer
// for forward compatibility
type ConfigServer interface {
	ListCM(context.Context, *ResListReq) (*CommonResp, error)
	GetCM(context.Context, *ResGetReq) (*CommonResp, error)
	CreateCM(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateCM(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteCM(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListSecret(context.Context, *ResListReq) (*CommonResp, error)
	GetSecret(context.Context, *ResGetReq) (*CommonResp, error)
	CreateSecret(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateSecret(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteSecret(context.Context, *ResDeleteReq) (*CommonResp, error)
	mustEmbedUnimplementedConfigServer()
}

// UnimplementedConfigServer must be embedded to have forward compatible implementations.
type UnimplementedConfigServer struct {
}

func (UnimplementedConfigServer) ListCM(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCM not implemented")
}
func (UnimplementedConfigServer) GetCM(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCM not implemented")
}
func (UnimplementedConfigServer) CreateCM(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCM not implemented")
}
func (UnimplementedConfigServer) UpdateCM(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCM not implemented")
}
func (UnimplementedConfigServer) DeleteCM(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCM not implemented")
}
func (UnimplementedConfigServer) ListSecret(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecret not implemented")
}
func (UnimplementedConfigServer) GetSecret(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedConfigServer) CreateSecret(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecret not implemented")
}
func (UnimplementedConfigServer) UpdateSecret(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecret not implemented")
}
func (UnimplementedConfigServer) DeleteSecret(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedConfigServer) mustEmbedUnimplementedConfigServer() {}

// UnsafeConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServer will
// result in compilation errors.
type UnsafeConfigServer interface {
	mustEmbedUnimplementedConfigServer()
}

func RegisterConfigServer(s grpc.ServiceRegistrar, srv ConfigServer) {
	s.RegisterService(&Config_ServiceDesc, srv)
}

func _Config_ListCM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListCM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/ListCM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListCM(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetCM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetCM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/GetCM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetCM(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateCM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateCM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/CreateCM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateCM(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateCM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateCM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/UpdateCM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateCM(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteCM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteCM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/DeleteCM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteCM(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/ListSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListSecret(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/GetSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetSecret(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/CreateSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateSecret(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/UpdateSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateSecret(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Config/DeleteSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteSecret(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Config_ServiceDesc is the grpc.ServiceDesc for Config service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Config_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Config",
	HandlerType: (*ConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCM",
			Handler:    _Config_ListCM_Handler,
		},
		{
			MethodName: "GetCM",
			Handler:    _Config_GetCM_Handler,
		},
		{
			MethodName: "CreateCM",
			Handler:    _Config_CreateCM_Handler,
		},
		{
			MethodName: "UpdateCM",
			Handler:    _Config_UpdateCM_Handler,
		},
		{
			MethodName: "DeleteCM",
			Handler:    _Config_DeleteCM_Handler,
		},
		{
			MethodName: "ListSecret",
			Handler:    _Config_ListSecret_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _Config_GetSecret_Handler,
		},
		{
			MethodName: "CreateSecret",
			Handler:    _Config_CreateSecret_Handler,
		},
		{
			MethodName: "UpdateSecret",
			Handler:    _Config_UpdateSecret_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _Config_DeleteSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster-resources.proto",
}

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageClient interface {
	ListPV(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetPV(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreatePV(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdatePV(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeletePV(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListPVC(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetPVC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetPVCMountInfo(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreatePVC(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdatePVC(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeletePVC(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListSC(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetSC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateSC(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateSC(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteSC(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type storageClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageClient(cc grpc.ClientConnInterface) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) ListPV(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/ListPV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetPV(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/GetPV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) CreatePV(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/CreatePV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) UpdatePV(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/UpdatePV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeletePV(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/DeletePV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ListPVC(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/ListPVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetPVC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/GetPVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetPVCMountInfo(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/GetPVCMountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) CreatePVC(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/CreatePVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) UpdatePVC(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/UpdatePVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeletePVC(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/DeletePVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ListSC(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/ListSC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetSC(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/GetSC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) CreateSC(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/CreateSC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) UpdateSC(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/UpdateSC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteSC(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Storage/DeleteSC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
// All implementations must embed UnimplementedStorageServer
// for forward compatibility
type StorageServer interface {
	ListPV(context.Context, *ResListReq) (*CommonResp, error)
	GetPV(context.Context, *ResGetReq) (*CommonResp, error)
	CreatePV(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdatePV(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeletePV(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListPVC(context.Context, *ResListReq) (*CommonResp, error)
	GetPVC(context.Context, *ResGetReq) (*CommonResp, error)
	GetPVCMountInfo(context.Context, *ResGetReq) (*CommonResp, error)
	CreatePVC(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdatePVC(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeletePVC(context.Context, *ResDeleteReq) (*CommonResp, error)
	ListSC(context.Context, *ResListReq) (*CommonResp, error)
	GetSC(context.Context, *ResGetReq) (*CommonResp, error)
	CreateSC(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateSC(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteSC(context.Context, *ResDeleteReq) (*CommonResp, error)
	mustEmbedUnimplementedStorageServer()
}

// UnimplementedStorageServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (UnimplementedStorageServer) ListPV(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPV not implemented")
}
func (UnimplementedStorageServer) GetPV(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPV not implemented")
}
func (UnimplementedStorageServer) CreatePV(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePV not implemented")
}
func (UnimplementedStorageServer) UpdatePV(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePV not implemented")
}
func (UnimplementedStorageServer) DeletePV(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePV not implemented")
}
func (UnimplementedStorageServer) ListPVC(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPVC not implemented")
}
func (UnimplementedStorageServer) GetPVC(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPVC not implemented")
}
func (UnimplementedStorageServer) GetPVCMountInfo(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPVCMountInfo not implemented")
}
func (UnimplementedStorageServer) CreatePVC(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePVC not implemented")
}
func (UnimplementedStorageServer) UpdatePVC(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePVC not implemented")
}
func (UnimplementedStorageServer) DeletePVC(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePVC not implemented")
}
func (UnimplementedStorageServer) ListSC(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSC not implemented")
}
func (UnimplementedStorageServer) GetSC(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSC not implemented")
}
func (UnimplementedStorageServer) CreateSC(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSC not implemented")
}
func (UnimplementedStorageServer) UpdateSC(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSC not implemented")
}
func (UnimplementedStorageServer) DeleteSC(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSC not implemented")
}
func (UnimplementedStorageServer) mustEmbedUnimplementedStorageServer() {}

// UnsafeStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServer will
// result in compilation errors.
type UnsafeStorageServer interface {
	mustEmbedUnimplementedStorageServer()
}

func RegisterStorageServer(s grpc.ServiceRegistrar, srv StorageServer) {
	s.RegisterService(&Storage_ServiceDesc, srv)
}

func _Storage_ListPV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ListPV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/ListPV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ListPV(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetPV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetPV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/GetPV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetPV(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_CreatePV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).CreatePV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/CreatePV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).CreatePV(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_UpdatePV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).UpdatePV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/UpdatePV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).UpdatePV(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeletePV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeletePV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/DeletePV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeletePV(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ListPVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ListPVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/ListPVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ListPVC(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetPVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetPVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/GetPVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetPVC(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetPVCMountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetPVCMountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/GetPVCMountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetPVCMountInfo(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_CreatePVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).CreatePVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/CreatePVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).CreatePVC(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_UpdatePVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).UpdatePVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/UpdatePVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).UpdatePVC(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeletePVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeletePVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/DeletePVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeletePVC(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ListSC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ListSC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/ListSC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ListSC(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetSC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetSC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/GetSC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetSC(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_CreateSC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).CreateSC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/CreateSC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).CreateSC(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_UpdateSC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).UpdateSC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/UpdateSC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).UpdateSC(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteSC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteSC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Storage/DeleteSC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteSC(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Storage_ServiceDesc is the grpc.ServiceDesc for Storage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Storage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPV",
			Handler:    _Storage_ListPV_Handler,
		},
		{
			MethodName: "GetPV",
			Handler:    _Storage_GetPV_Handler,
		},
		{
			MethodName: "CreatePV",
			Handler:    _Storage_CreatePV_Handler,
		},
		{
			MethodName: "UpdatePV",
			Handler:    _Storage_UpdatePV_Handler,
		},
		{
			MethodName: "DeletePV",
			Handler:    _Storage_DeletePV_Handler,
		},
		{
			MethodName: "ListPVC",
			Handler:    _Storage_ListPVC_Handler,
		},
		{
			MethodName: "GetPVC",
			Handler:    _Storage_GetPVC_Handler,
		},
		{
			MethodName: "GetPVCMountInfo",
			Handler:    _Storage_GetPVCMountInfo_Handler,
		},
		{
			MethodName: "CreatePVC",
			Handler:    _Storage_CreatePVC_Handler,
		},
		{
			MethodName: "UpdatePVC",
			Handler:    _Storage_UpdatePVC_Handler,
		},
		{
			MethodName: "DeletePVC",
			Handler:    _Storage_DeletePVC_Handler,
		},
		{
			MethodName: "ListSC",
			Handler:    _Storage_ListSC_Handler,
		},
		{
			MethodName: "GetSC",
			Handler:    _Storage_GetSC_Handler,
		},
		{
			MethodName: "CreateSC",
			Handler:    _Storage_CreateSC_Handler,
		},
		{
			MethodName: "UpdateSC",
			Handler:    _Storage_UpdateSC_Handler,
		},
		{
			MethodName: "DeleteSC",
			Handler:    _Storage_DeleteSC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster-resources.proto",
}

// RBACClient is the client API for RBAC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RBACClient interface {
	ListSA(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetSA(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateSA(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateSA(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteSA(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type rBACClient struct {
	cc grpc.ClientConnInterface
}

func NewRBACClient(cc grpc.ClientConnInterface) RBACClient {
	return &rBACClient{cc}
}

func (c *rBACClient) ListSA(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.RBAC/ListSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) GetSA(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.RBAC/GetSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) CreateSA(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.RBAC/CreateSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) UpdateSA(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.RBAC/UpdateSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) DeleteSA(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.RBAC/DeleteSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RBACServer is the server API for RBAC service.
// All implementations must embed UnimplementedRBACServer
// for forward compatibility
type RBACServer interface {
	ListSA(context.Context, *ResListReq) (*CommonResp, error)
	GetSA(context.Context, *ResGetReq) (*CommonResp, error)
	CreateSA(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateSA(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteSA(context.Context, *ResDeleteReq) (*CommonResp, error)
	mustEmbedUnimplementedRBACServer()
}

// UnimplementedRBACServer must be embedded to have forward compatible implementations.
type UnimplementedRBACServer struct {
}

func (UnimplementedRBACServer) ListSA(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSA not implemented")
}
func (UnimplementedRBACServer) GetSA(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSA not implemented")
}
func (UnimplementedRBACServer) CreateSA(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSA not implemented")
}
func (UnimplementedRBACServer) UpdateSA(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSA not implemented")
}
func (UnimplementedRBACServer) DeleteSA(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSA not implemented")
}
func (UnimplementedRBACServer) mustEmbedUnimplementedRBACServer() {}

// UnsafeRBACServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RBACServer will
// result in compilation errors.
type UnsafeRBACServer interface {
	mustEmbedUnimplementedRBACServer()
}

func RegisterRBACServer(s grpc.ServiceRegistrar, srv RBACServer) {
	s.RegisterService(&RBAC_ServiceDesc, srv)
}

func _RBAC_ListSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).ListSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.RBAC/ListSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).ListSA(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_GetSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).GetSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.RBAC/GetSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).GetSA(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_CreateSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).CreateSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.RBAC/CreateSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).CreateSA(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_UpdateSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).UpdateSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.RBAC/UpdateSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).UpdateSA(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_DeleteSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).DeleteSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.RBAC/DeleteSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).DeleteSA(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RBAC_ServiceDesc is the grpc.ServiceDesc for RBAC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RBAC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.RBAC",
	HandlerType: (*RBACServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSA",
			Handler:    _RBAC_ListSA_Handler,
		},
		{
			MethodName: "GetSA",
			Handler:    _RBAC_GetSA_Handler,
		},
		{
			MethodName: "CreateSA",
			Handler:    _RBAC_CreateSA_Handler,
		},
		{
			MethodName: "UpdateSA",
			Handler:    _RBAC_UpdateSA_Handler,
		},
		{
			MethodName: "DeleteSA",
			Handler:    _RBAC_DeleteSA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster-resources.proto",
}

// HPAClient is the client API for HPA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HPAClient interface {
	ListHPA(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetHPA(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateHPA(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateHPA(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteHPA(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type hPAClient struct {
	cc grpc.ClientConnInterface
}

func NewHPAClient(cc grpc.ClientConnInterface) HPAClient {
	return &hPAClient{cc}
}

func (c *hPAClient) ListHPA(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.HPA/ListHPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPAClient) GetHPA(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.HPA/GetHPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPAClient) CreateHPA(ctx context.Context, in *ResCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.HPA/CreateHPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPAClient) UpdateHPA(ctx context.Context, in *ResUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.HPA/UpdateHPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPAClient) DeleteHPA(ctx context.Context, in *ResDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.HPA/DeleteHPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HPAServer is the server API for HPA service.
// All implementations must embed UnimplementedHPAServer
// for forward compatibility
type HPAServer interface {
	ListHPA(context.Context, *ResListReq) (*CommonResp, error)
	GetHPA(context.Context, *ResGetReq) (*CommonResp, error)
	CreateHPA(context.Context, *ResCreateReq) (*CommonResp, error)
	UpdateHPA(context.Context, *ResUpdateReq) (*CommonResp, error)
	DeleteHPA(context.Context, *ResDeleteReq) (*CommonResp, error)
	mustEmbedUnimplementedHPAServer()
}

// UnimplementedHPAServer must be embedded to have forward compatible implementations.
type UnimplementedHPAServer struct {
}

func (UnimplementedHPAServer) ListHPA(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHPA not implemented")
}
func (UnimplementedHPAServer) GetHPA(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHPA not implemented")
}
func (UnimplementedHPAServer) CreateHPA(context.Context, *ResCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHPA not implemented")
}
func (UnimplementedHPAServer) UpdateHPA(context.Context, *ResUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHPA not implemented")
}
func (UnimplementedHPAServer) DeleteHPA(context.Context, *ResDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHPA not implemented")
}
func (UnimplementedHPAServer) mustEmbedUnimplementedHPAServer() {}

// UnsafeHPAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HPAServer will
// result in compilation errors.
type UnsafeHPAServer interface {
	mustEmbedUnimplementedHPAServer()
}

func RegisterHPAServer(s grpc.ServiceRegistrar, srv HPAServer) {
	s.RegisterService(&HPA_ServiceDesc, srv)
}

func _HPA_ListHPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPAServer).ListHPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.HPA/ListHPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPAServer).ListHPA(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPA_GetHPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPAServer).GetHPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.HPA/GetHPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPAServer).GetHPA(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPA_CreateHPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPAServer).CreateHPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.HPA/CreateHPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPAServer).CreateHPA(ctx, req.(*ResCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPA_UpdateHPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPAServer).UpdateHPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.HPA/UpdateHPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPAServer).UpdateHPA(ctx, req.(*ResUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPA_DeleteHPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPAServer).DeleteHPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.HPA/DeleteHPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPAServer).DeleteHPA(ctx, req.(*ResDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HPA_ServiceDesc is the grpc.ServiceDesc for HPA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HPA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.HPA",
	HandlerType: (*HPAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHPA",
			Handler:    _HPA_ListHPA_Handler,
		},
		{
			MethodName: "GetHPA",
			Handler:    _HPA_GetHPA_Handler,
		},
		{
			MethodName: "CreateHPA",
			Handler:    _HPA_CreateHPA_Handler,
		},
		{
			MethodName: "UpdateHPA",
			Handler:    _HPA_UpdateHPA_Handler,
		},
		{
			MethodName: "DeleteHPA",
			Handler:    _HPA_DeleteHPA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster-resources.proto",
}

// CustomResClient is the client API for CustomRes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomResClient interface {
	ListCRD(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetCRD(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	ListCObj(ctx context.Context, in *CObjListReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetCObj(ctx context.Context, in *CObjGetReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetCObjHistoryRevision(ctx context.Context, in *CObjHistoryReq, opts ...grpc.CallOption) (*CommonListResp, error)
	RestartCObj(ctx context.Context, in *CObjRestartReq, opts ...grpc.CallOption) (*CommonResp, error)
	RolloutCObj(ctx context.Context, in *CObjRolloutReq, opts ...grpc.CallOption) (*CommonResp, error)
	CreateCObj(ctx context.Context, in *CObjCreateReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateCObj(ctx context.Context, in *CObjUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	ScaleCObj(ctx context.Context, in *CObjScaleReq, opts ...grpc.CallOption) (*CommonResp, error)
	DeleteCObj(ctx context.Context, in *CObjDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	RescheduleCObjPo(ctx context.Context, in *CObjBatchRescheduleReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type customResClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomResClient(cc grpc.ClientConnInterface) CustomResClient {
	return &customResClient{cc}
}

func (c *customResClient) ListCRD(ctx context.Context, in *ResListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/ListCRD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) GetCRD(ctx context.Context, in *ResGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/GetCRD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) ListCObj(ctx context.Context, in *CObjListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/ListCObj", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) GetCObj(ctx context.Context, in *CObjGetReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/GetCObj", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) GetCObjHistoryRevision(ctx context.Context, in *CObjHistoryReq, opts ...grpc.CallOption) (*CommonListResp, error) {
	out := new(CommonListResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/GetCObjHistoryRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) RestartCObj(ctx context.Context, in *CObjRestartReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/RestartCObj", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) RolloutCObj(ctx context.Context, in *CObjRolloutReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/RolloutCObj", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) CreateCObj(ctx context.Context, in *CObjCreateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/CreateCObj", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) UpdateCObj(ctx context.Context, in *CObjUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/UpdateCObj", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) ScaleCObj(ctx context.Context, in *CObjScaleReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/ScaleCObj", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) DeleteCObj(ctx context.Context, in *CObjDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/DeleteCObj", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customResClient) RescheduleCObjPo(ctx context.Context, in *CObjBatchRescheduleReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.CustomRes/RescheduleCObjPo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomResServer is the server API for CustomRes service.
// All implementations must embed UnimplementedCustomResServer
// for forward compatibility
type CustomResServer interface {
	ListCRD(context.Context, *ResListReq) (*CommonResp, error)
	GetCRD(context.Context, *ResGetReq) (*CommonResp, error)
	ListCObj(context.Context, *CObjListReq) (*CommonResp, error)
	GetCObj(context.Context, *CObjGetReq) (*CommonResp, error)
	GetCObjHistoryRevision(context.Context, *CObjHistoryReq) (*CommonListResp, error)
	RestartCObj(context.Context, *CObjRestartReq) (*CommonResp, error)
	RolloutCObj(context.Context, *CObjRolloutReq) (*CommonResp, error)
	CreateCObj(context.Context, *CObjCreateReq) (*CommonResp, error)
	UpdateCObj(context.Context, *CObjUpdateReq) (*CommonResp, error)
	ScaleCObj(context.Context, *CObjScaleReq) (*CommonResp, error)
	DeleteCObj(context.Context, *CObjDeleteReq) (*CommonResp, error)
	RescheduleCObjPo(context.Context, *CObjBatchRescheduleReq) (*CommonResp, error)
	mustEmbedUnimplementedCustomResServer()
}

// UnimplementedCustomResServer must be embedded to have forward compatible implementations.
type UnimplementedCustomResServer struct {
}

func (UnimplementedCustomResServer) ListCRD(context.Context, *ResListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCRD not implemented")
}
func (UnimplementedCustomResServer) GetCRD(context.Context, *ResGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCRD not implemented")
}
func (UnimplementedCustomResServer) ListCObj(context.Context, *CObjListReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCObj not implemented")
}
func (UnimplementedCustomResServer) GetCObj(context.Context, *CObjGetReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCObj not implemented")
}
func (UnimplementedCustomResServer) GetCObjHistoryRevision(context.Context, *CObjHistoryReq) (*CommonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCObjHistoryRevision not implemented")
}
func (UnimplementedCustomResServer) RestartCObj(context.Context, *CObjRestartReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartCObj not implemented")
}
func (UnimplementedCustomResServer) RolloutCObj(context.Context, *CObjRolloutReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RolloutCObj not implemented")
}
func (UnimplementedCustomResServer) CreateCObj(context.Context, *CObjCreateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCObj not implemented")
}
func (UnimplementedCustomResServer) UpdateCObj(context.Context, *CObjUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCObj not implemented")
}
func (UnimplementedCustomResServer) ScaleCObj(context.Context, *CObjScaleReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleCObj not implemented")
}
func (UnimplementedCustomResServer) DeleteCObj(context.Context, *CObjDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCObj not implemented")
}
func (UnimplementedCustomResServer) RescheduleCObjPo(context.Context, *CObjBatchRescheduleReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RescheduleCObjPo not implemented")
}
func (UnimplementedCustomResServer) mustEmbedUnimplementedCustomResServer() {}

// UnsafeCustomResServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomResServer will
// result in compilation errors.
type UnsafeCustomResServer interface {
	mustEmbedUnimplementedCustomResServer()
}

func RegisterCustomResServer(s grpc.ServiceRegistrar, srv CustomResServer) {
	s.RegisterService(&CustomRes_ServiceDesc, srv)
}

func _CustomRes_ListCRD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).ListCRD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/ListCRD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).ListCRD(ctx, req.(*ResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_GetCRD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).GetCRD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/GetCRD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).GetCRD(ctx, req.(*ResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_ListCObj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CObjListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).ListCObj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/ListCObj",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).ListCObj(ctx, req.(*CObjListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_GetCObj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CObjGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).GetCObj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/GetCObj",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).GetCObj(ctx, req.(*CObjGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_GetCObjHistoryRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CObjHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).GetCObjHistoryRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/GetCObjHistoryRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).GetCObjHistoryRevision(ctx, req.(*CObjHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_RestartCObj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CObjRestartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).RestartCObj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/RestartCObj",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).RestartCObj(ctx, req.(*CObjRestartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_RolloutCObj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CObjRolloutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).RolloutCObj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/RolloutCObj",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).RolloutCObj(ctx, req.(*CObjRolloutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_CreateCObj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CObjCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).CreateCObj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/CreateCObj",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).CreateCObj(ctx, req.(*CObjCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_UpdateCObj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CObjUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).UpdateCObj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/UpdateCObj",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).UpdateCObj(ctx, req.(*CObjUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_ScaleCObj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CObjScaleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).ScaleCObj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/ScaleCObj",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).ScaleCObj(ctx, req.(*CObjScaleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_DeleteCObj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CObjDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).DeleteCObj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/DeleteCObj",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).DeleteCObj(ctx, req.(*CObjDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRes_RescheduleCObjPo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CObjBatchRescheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomResServer).RescheduleCObjPo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.CustomRes/RescheduleCObjPo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomResServer).RescheduleCObjPo(ctx, req.(*CObjBatchRescheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomRes_ServiceDesc is the grpc.ServiceDesc for CustomRes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomRes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.CustomRes",
	HandlerType: (*CustomResServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCRD",
			Handler:    _CustomRes_ListCRD_Handler,
		},
		{
			MethodName: "GetCRD",
			Handler:    _CustomRes_GetCRD_Handler,
		},
		{
			MethodName: "ListCObj",
			Handler:    _CustomRes_ListCObj_Handler,
		},
		{
			MethodName: "GetCObj",
			Handler:    _CustomRes_GetCObj_Handler,
		},
		{
			MethodName: "GetCObjHistoryRevision",
			Handler:    _CustomRes_GetCObjHistoryRevision_Handler,
		},
		{
			MethodName: "RestartCObj",
			Handler:    _CustomRes_RestartCObj_Handler,
		},
		{
			MethodName: "RolloutCObj",
			Handler:    _CustomRes_RolloutCObj_Handler,
		},
		{
			MethodName: "CreateCObj",
			Handler:    _CustomRes_CreateCObj_Handler,
		},
		{
			MethodName: "UpdateCObj",
			Handler:    _CustomRes_UpdateCObj_Handler,
		},
		{
			MethodName: "ScaleCObj",
			Handler:    _CustomRes_ScaleCObj_Handler,
		},
		{
			MethodName: "DeleteCObj",
			Handler:    _CustomRes_DeleteCObj_Handler,
		},
		{
			MethodName: "RescheduleCObjPo",
			Handler:    _CustomRes_RescheduleCObjPo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster-resources.proto",
}

// ResourceClient is the client API for Resource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceClient interface {
	// 示例模板接口
	GetK8SResTemplate(ctx context.Context, in *GetK8SResTemplateReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 订阅接口
	Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (Resource_SubscribeClient, error)
	// 主动使 Discover 缓存失效
	InvalidateDiscoveryCache(ctx context.Context, in *InvalidateDiscoveryCacheReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 表单化数据渲染预览
	FormDataRenderPreview(ctx context.Context, in *FormRenderPreviewReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 获取指定资源表单 Schema
	GetResFormSchema(ctx context.Context, in *GetResFormSchemaReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetFormSupportedAPIVersions(ctx context.Context, in *GetFormSupportedApiVersionsReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 获取用于下拉框选项的资源数据
	GetResSelectItems(ctx context.Context, in *GetResSelectItemsReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type resourceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceClient(cc grpc.ClientConnInterface) ResourceClient {
	return &resourceClient{cc}
}

func (c *resourceClient) GetK8SResTemplate(ctx context.Context, in *GetK8SResTemplateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Resource/GetK8SResTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) Subscribe(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (Resource_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Resource_ServiceDesc.Streams[0], "/clusterresources.Resource/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Resource_SubscribeClient interface {
	Recv() (*SubscribeResp, error)
	grpc.ClientStream
}

type resourceSubscribeClient struct {
	grpc.ClientStream
}

func (x *resourceSubscribeClient) Recv() (*SubscribeResp, error) {
	m := new(SubscribeResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourceClient) InvalidateDiscoveryCache(ctx context.Context, in *InvalidateDiscoveryCacheReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Resource/InvalidateDiscoveryCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) FormDataRenderPreview(ctx context.Context, in *FormRenderPreviewReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Resource/FormDataRenderPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetResFormSchema(ctx context.Context, in *GetResFormSchemaReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Resource/GetResFormSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetFormSupportedAPIVersions(ctx context.Context, in *GetFormSupportedApiVersionsReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Resource/GetFormSupportedAPIVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetResSelectItems(ctx context.Context, in *GetResSelectItemsReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.Resource/GetResSelectItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceServer is the server API for Resource service.
// All implementations must embed UnimplementedResourceServer
// for forward compatibility
type ResourceServer interface {
	// 示例模板接口
	GetK8SResTemplate(context.Context, *GetK8SResTemplateReq) (*CommonResp, error)
	// 订阅接口
	Subscribe(*SubscribeReq, Resource_SubscribeServer) error
	// 主动使 Discover 缓存失效
	InvalidateDiscoveryCache(context.Context, *InvalidateDiscoveryCacheReq) (*CommonResp, error)
	// 表单化数据渲染预览
	FormDataRenderPreview(context.Context, *FormRenderPreviewReq) (*CommonResp, error)
	// 获取指定资源表单 Schema
	GetResFormSchema(context.Context, *GetResFormSchemaReq) (*CommonResp, error)
	GetFormSupportedAPIVersions(context.Context, *GetFormSupportedApiVersionsReq) (*CommonResp, error)
	// 获取用于下拉框选项的资源数据
	GetResSelectItems(context.Context, *GetResSelectItemsReq) (*CommonResp, error)
	mustEmbedUnimplementedResourceServer()
}

// UnimplementedResourceServer must be embedded to have forward compatible implementations.
type UnimplementedResourceServer struct {
}

func (UnimplementedResourceServer) GetK8SResTemplate(context.Context, *GetK8SResTemplateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SResTemplate not implemented")
}
func (UnimplementedResourceServer) Subscribe(*SubscribeReq, Resource_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedResourceServer) InvalidateDiscoveryCache(context.Context, *InvalidateDiscoveryCacheReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateDiscoveryCache not implemented")
}
func (UnimplementedResourceServer) FormDataRenderPreview(context.Context, *FormRenderPreviewReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormDataRenderPreview not implemented")
}
func (UnimplementedResourceServer) GetResFormSchema(context.Context, *GetResFormSchemaReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResFormSchema not implemented")
}
func (UnimplementedResourceServer) GetFormSupportedAPIVersions(context.Context, *GetFormSupportedApiVersionsReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFormSupportedAPIVersions not implemented")
}
func (UnimplementedResourceServer) GetResSelectItems(context.Context, *GetResSelectItemsReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResSelectItems not implemented")
}
func (UnimplementedResourceServer) mustEmbedUnimplementedResourceServer() {}

// UnsafeResourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceServer will
// result in compilation errors.
type UnsafeResourceServer interface {
	mustEmbedUnimplementedResourceServer()
}

func RegisterResourceServer(s grpc.ServiceRegistrar, srv ResourceServer) {
	s.RegisterService(&Resource_ServiceDesc, srv)
}

func _Resource_GetK8SResTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetK8SResTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetK8SResTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Resource/GetK8SResTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetK8SResTemplate(ctx, req.(*GetK8SResTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServer).Subscribe(m, &resourceSubscribeServer{stream})
}

type Resource_SubscribeServer interface {
	Send(*SubscribeResp) error
	grpc.ServerStream
}

type resourceSubscribeServer struct {
	grpc.ServerStream
}

func (x *resourceSubscribeServer) Send(m *SubscribeResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Resource_InvalidateDiscoveryCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateDiscoveryCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).InvalidateDiscoveryCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Resource/InvalidateDiscoveryCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).InvalidateDiscoveryCache(ctx, req.(*InvalidateDiscoveryCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_FormDataRenderPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormRenderPreviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).FormDataRenderPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Resource/FormDataRenderPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).FormDataRenderPreview(ctx, req.(*FormRenderPreviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetResFormSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResFormSchemaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetResFormSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Resource/GetResFormSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetResFormSchema(ctx, req.(*GetResFormSchemaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetFormSupportedAPIVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFormSupportedApiVersionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetFormSupportedAPIVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Resource/GetFormSupportedAPIVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetFormSupportedAPIVersions(ctx, req.(*GetFormSupportedApiVersionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetResSelectItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResSelectItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetResSelectItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.Resource/GetResSelectItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetResSelectItems(ctx, req.(*GetResSelectItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Resource_ServiceDesc is the grpc.ServiceDesc for Resource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Resource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.Resource",
	HandlerType: (*ResourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetK8SResTemplate",
			Handler:    _Resource_GetK8SResTemplate_Handler,
		},
		{
			MethodName: "InvalidateDiscoveryCache",
			Handler:    _Resource_InvalidateDiscoveryCache_Handler,
		},
		{
			MethodName: "FormDataRenderPreview",
			Handler:    _Resource_FormDataRenderPreview_Handler,
		},
		{
			MethodName: "GetResFormSchema",
			Handler:    _Resource_GetResFormSchema_Handler,
		},
		{
			MethodName: "GetFormSupportedAPIVersions",
			Handler:    _Resource_GetFormSupportedAPIVersions_Handler,
		},
		{
			MethodName: "GetResSelectItems",
			Handler:    _Resource_GetResSelectItems_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Resource_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cluster-resources.proto",
}

// ViewConfigClient is the client API for ViewConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ViewConfigClient interface {
	// 获取视图配置列表
	ListViewConfigs(ctx context.Context, in *ListViewConfigsReq, opts ...grpc.CallOption) (*CommonListResp, error)
	// 获取视图配置详情
	GetViewConfig(ctx context.Context, in *GetViewConfigReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 创建视图配置
	CreateViewConfig(ctx context.Context, in *CreateViewConfigReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 更新视图配置
	UpdateViewConfig(ctx context.Context, in *UpdateViewConfigReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 视图重命名
	RenameViewConfig(ctx context.Context, in *RenameViewConfigReq, opts ...grpc.CallOption) (*CommonResp, error)
	// 删除视图配置
	DeleteViewConfig(ctx context.Context, in *DeleteViewConfigReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type viewConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewViewConfigClient(cc grpc.ClientConnInterface) ViewConfigClient {
	return &viewConfigClient{cc}
}

func (c *viewConfigClient) ListViewConfigs(ctx context.Context, in *ListViewConfigsReq, opts ...grpc.CallOption) (*CommonListResp, error) {
	out := new(CommonListResp)
	err := c.cc.Invoke(ctx, "/clusterresources.ViewConfig/ListViewConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewConfigClient) GetViewConfig(ctx context.Context, in *GetViewConfigReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.ViewConfig/GetViewConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewConfigClient) CreateViewConfig(ctx context.Context, in *CreateViewConfigReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.ViewConfig/CreateViewConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewConfigClient) UpdateViewConfig(ctx context.Context, in *UpdateViewConfigReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.ViewConfig/UpdateViewConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewConfigClient) RenameViewConfig(ctx context.Context, in *RenameViewConfigReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.ViewConfig/RenameViewConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewConfigClient) DeleteViewConfig(ctx context.Context, in *DeleteViewConfigReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.ViewConfig/DeleteViewConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ViewConfigServer is the server API for ViewConfig service.
// All implementations must embed UnimplementedViewConfigServer
// for forward compatibility
type ViewConfigServer interface {
	// 获取视图配置列表
	ListViewConfigs(context.Context, *ListViewConfigsReq) (*CommonListResp, error)
	// 获取视图配置详情
	GetViewConfig(context.Context, *GetViewConfigReq) (*CommonResp, error)
	// 创建视图配置
	CreateViewConfig(context.Context, *CreateViewConfigReq) (*CommonResp, error)
	// 更新视图配置
	UpdateViewConfig(context.Context, *UpdateViewConfigReq) (*CommonResp, error)
	// 视图重命名
	RenameViewConfig(context.Context, *RenameViewConfigReq) (*CommonResp, error)
	// 删除视图配置
	DeleteViewConfig(context.Context, *DeleteViewConfigReq) (*CommonResp, error)
	mustEmbedUnimplementedViewConfigServer()
}

// UnimplementedViewConfigServer must be embedded to have forward compatible implementations.
type UnimplementedViewConfigServer struct {
}

func (UnimplementedViewConfigServer) ListViewConfigs(context.Context, *ListViewConfigsReq) (*CommonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListViewConfigs not implemented")
}
func (UnimplementedViewConfigServer) GetViewConfig(context.Context, *GetViewConfigReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetViewConfig not implemented")
}
func (UnimplementedViewConfigServer) CreateViewConfig(context.Context, *CreateViewConfigReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateViewConfig not implemented")
}
func (UnimplementedViewConfigServer) UpdateViewConfig(context.Context, *UpdateViewConfigReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateViewConfig not implemented")
}
func (UnimplementedViewConfigServer) RenameViewConfig(context.Context, *RenameViewConfigReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameViewConfig not implemented")
}
func (UnimplementedViewConfigServer) DeleteViewConfig(context.Context, *DeleteViewConfigReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteViewConfig not implemented")
}
func (UnimplementedViewConfigServer) mustEmbedUnimplementedViewConfigServer() {}

// UnsafeViewConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ViewConfigServer will
// result in compilation errors.
type UnsafeViewConfigServer interface {
	mustEmbedUnimplementedViewConfigServer()
}

func RegisterViewConfigServer(s grpc.ServiceRegistrar, srv ViewConfigServer) {
	s.RegisterService(&ViewConfig_ServiceDesc, srv)
}

func _ViewConfig_ListViewConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListViewConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewConfigServer).ListViewConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.ViewConfig/ListViewConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewConfigServer).ListViewConfigs(ctx, req.(*ListViewConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewConfig_GetViewConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetViewConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewConfigServer).GetViewConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.ViewConfig/GetViewConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewConfigServer).GetViewConfig(ctx, req.(*GetViewConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewConfig_CreateViewConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateViewConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewConfigServer).CreateViewConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.ViewConfig/CreateViewConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewConfigServer).CreateViewConfig(ctx, req.(*CreateViewConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewConfig_UpdateViewConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateViewConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewConfigServer).UpdateViewConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.ViewConfig/UpdateViewConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewConfigServer).UpdateViewConfig(ctx, req.(*UpdateViewConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewConfig_RenameViewConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameViewConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewConfigServer).RenameViewConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.ViewConfig/RenameViewConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewConfigServer).RenameViewConfig(ctx, req.(*RenameViewConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewConfig_DeleteViewConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteViewConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewConfigServer).DeleteViewConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.ViewConfig/DeleteViewConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewConfigServer).DeleteViewConfig(ctx, req.(*DeleteViewConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ViewConfig_ServiceDesc is the grpc.ServiceDesc for ViewConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ViewConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.ViewConfig",
	HandlerType: (*ViewConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListViewConfigs",
			Handler:    _ViewConfig_ListViewConfigs_Handler,
		},
		{
			MethodName: "GetViewConfig",
			Handler:    _ViewConfig_GetViewConfig_Handler,
		},
		{
			MethodName: "CreateViewConfig",
			Handler:    _ViewConfig_CreateViewConfig_Handler,
		},
		{
			MethodName: "UpdateViewConfig",
			Handler:    _ViewConfig_UpdateViewConfig_Handler,
		},
		{
			MethodName: "RenameViewConfig",
			Handler:    _ViewConfig_RenameViewConfig_Handler,
		},
		{
			MethodName: "DeleteViewConfig",
			Handler:    _ViewConfig_DeleteViewConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster-resources.proto",
}

// MultiClusterClient is the client API for MultiCluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultiClusterClient interface {
	FetchMultiClusterResource(ctx context.Context, in *FetchMultiClusterResourceReq, opts ...grpc.CallOption) (*CommonResp, error)
	FetchMultiClusterCustomResource(ctx context.Context, in *FetchMultiClusterCustomResourceReq, opts ...grpc.CallOption) (*CommonResp, error)
	MultiClusterResourceCount(ctx context.Context, in *MultiClusterResourceCountReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type multiClusterClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiClusterClient(cc grpc.ClientConnInterface) MultiClusterClient {
	return &multiClusterClient{cc}
}

func (c *multiClusterClient) FetchMultiClusterResource(ctx context.Context, in *FetchMultiClusterResourceReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.MultiCluster/FetchMultiClusterResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiClusterClient) FetchMultiClusterCustomResource(ctx context.Context, in *FetchMultiClusterCustomResourceReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.MultiCluster/FetchMultiClusterCustomResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiClusterClient) MultiClusterResourceCount(ctx context.Context, in *MultiClusterResourceCountReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clusterresources.MultiCluster/MultiClusterResourceCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultiClusterServer is the server API for MultiCluster service.
// All implementations must embed UnimplementedMultiClusterServer
// for forward compatibility
type MultiClusterServer interface {
	FetchMultiClusterResource(context.Context, *FetchMultiClusterResourceReq) (*CommonResp, error)
	FetchMultiClusterCustomResource(context.Context, *FetchMultiClusterCustomResourceReq) (*CommonResp, error)
	MultiClusterResourceCount(context.Context, *MultiClusterResourceCountReq) (*CommonResp, error)
	mustEmbedUnimplementedMultiClusterServer()
}

// UnimplementedMultiClusterServer must be embedded to have forward compatible implementations.
type UnimplementedMultiClusterServer struct {
}

func (UnimplementedMultiClusterServer) FetchMultiClusterResource(context.Context, *FetchMultiClusterResourceReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMultiClusterResource not implemented")
}
func (UnimplementedMultiClusterServer) FetchMultiClusterCustomResource(context.Context, *FetchMultiClusterCustomResourceReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMultiClusterCustomResource not implemented")
}
func (UnimplementedMultiClusterServer) MultiClusterResourceCount(context.Context, *MultiClusterResourceCountReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiClusterResourceCount not implemented")
}
func (UnimplementedMultiClusterServer) mustEmbedUnimplementedMultiClusterServer() {}

// UnsafeMultiClusterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiClusterServer will
// result in compilation errors.
type UnsafeMultiClusterServer interface {
	mustEmbedUnimplementedMultiClusterServer()
}

func RegisterMultiClusterServer(s grpc.ServiceRegistrar, srv MultiClusterServer) {
	s.RegisterService(&MultiCluster_ServiceDesc, srv)
}

func _MultiCluster_FetchMultiClusterResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchMultiClusterResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiClusterServer).FetchMultiClusterResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.MultiCluster/FetchMultiClusterResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiClusterServer).FetchMultiClusterResource(ctx, req.(*FetchMultiClusterResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiCluster_FetchMultiClusterCustomResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchMultiClusterCustomResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiClusterServer).FetchMultiClusterCustomResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.MultiCluster/FetchMultiClusterCustomResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiClusterServer).FetchMultiClusterCustomResource(ctx, req.(*FetchMultiClusterCustomResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiCluster_MultiClusterResourceCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiClusterResourceCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiClusterServer).MultiClusterResourceCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterresources.MultiCluster/MultiClusterResourceCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiClusterServer).MultiClusterResourceCount(ctx, req.(*MultiClusterResourceCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MultiCluster_ServiceDesc is the grpc.ServiceDesc for MultiCluster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultiCluster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clusterresources.MultiCluster",
	HandlerType: (*MultiClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchMultiClusterResource",
			Handler:    _MultiCluster_FetchMultiClusterResource_Handler,
		},
		{
			MethodName: "FetchMultiClusterCustomResource",
			Handler:    _MultiCluster_FetchMultiClusterCustomResource_Handler,
		},
		{
			MethodName: "MultiClusterResourceCount",
			Handler:    _MultiCluster_MultiClusterResourceCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster-resources.proto",
}
