// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/sdk/plugin/plugin.proto

package plugin

import (
	context "context"
	fmt "fmt"
	v1alpha1 "github.com/Tencent/bk-bcs/bcs-services/bcs-argocd-manager/pkg/apis/tkex/v1alpha1"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// CRUD for Argocd Plugin
type CreateArgocdPluginRequest struct {
	Plugin               *v1alpha1.ArgocdPlugin `protobuf:"bytes,1,req,name=plugin" json:"plugin,omitempty"`
	Upsert               *bool                  `protobuf:"varint,2,opt,name=upsert" json:"upsert,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CreateArgocdPluginRequest) Reset()         { *m = CreateArgocdPluginRequest{} }
func (m *CreateArgocdPluginRequest) String() string { return proto.CompactTextString(m) }
func (*CreateArgocdPluginRequest) ProtoMessage()    {}
func (*CreateArgocdPluginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8fcbf9d1f7441a, []int{0}
}

func (m *CreateArgocdPluginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateArgocdPluginRequest.Unmarshal(m, b)
}
func (m *CreateArgocdPluginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateArgocdPluginRequest.Marshal(b, m, deterministic)
}
func (m *CreateArgocdPluginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateArgocdPluginRequest.Merge(m, src)
}
func (m *CreateArgocdPluginRequest) XXX_Size() int {
	return xxx_messageInfo_CreateArgocdPluginRequest.Size(m)
}
func (m *CreateArgocdPluginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateArgocdPluginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateArgocdPluginRequest proto.InternalMessageInfo

func (m *CreateArgocdPluginRequest) GetPlugin() *v1alpha1.ArgocdPlugin {
	if m != nil {
		return m.Plugin
	}
	return nil
}

func (m *CreateArgocdPluginRequest) GetUpsert() bool {
	if m != nil && m.Upsert != nil {
		return *m.Upsert
	}
	return false
}

type CreateArgocdPluginResponse struct {
	Code                 *uint32                `protobuf:"varint,1,req,name=code" json:"code,omitempty"`
	Message              *string                `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`
	Plugin               *v1alpha1.ArgocdPlugin `protobuf:"bytes,3,opt,name=plugin" json:"plugin,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CreateArgocdPluginResponse) Reset()         { *m = CreateArgocdPluginResponse{} }
func (m *CreateArgocdPluginResponse) String() string { return proto.CompactTextString(m) }
func (*CreateArgocdPluginResponse) ProtoMessage()    {}
func (*CreateArgocdPluginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8fcbf9d1f7441a, []int{1}
}

func (m *CreateArgocdPluginResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateArgocdPluginResponse.Unmarshal(m, b)
}
func (m *CreateArgocdPluginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateArgocdPluginResponse.Marshal(b, m, deterministic)
}
func (m *CreateArgocdPluginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateArgocdPluginResponse.Merge(m, src)
}
func (m *CreateArgocdPluginResponse) XXX_Size() int {
	return xxx_messageInfo_CreateArgocdPluginResponse.Size(m)
}
func (m *CreateArgocdPluginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateArgocdPluginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateArgocdPluginResponse proto.InternalMessageInfo

func (m *CreateArgocdPluginResponse) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *CreateArgocdPluginResponse) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *CreateArgocdPluginResponse) GetPlugin() *v1alpha1.ArgocdPlugin {
	if m != nil {
		return m.Plugin
	}
	return nil
}

type UpdateArgocdPluginRequest struct {
	Plugin               *v1alpha1.ArgocdPlugin `protobuf:"bytes,1,opt,name=plugin" json:"plugin,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UpdateArgocdPluginRequest) Reset()         { *m = UpdateArgocdPluginRequest{} }
func (m *UpdateArgocdPluginRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateArgocdPluginRequest) ProtoMessage()    {}
func (*UpdateArgocdPluginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8fcbf9d1f7441a, []int{2}
}

func (m *UpdateArgocdPluginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateArgocdPluginRequest.Unmarshal(m, b)
}
func (m *UpdateArgocdPluginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateArgocdPluginRequest.Marshal(b, m, deterministic)
}
func (m *UpdateArgocdPluginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateArgocdPluginRequest.Merge(m, src)
}
func (m *UpdateArgocdPluginRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateArgocdPluginRequest.Size(m)
}
func (m *UpdateArgocdPluginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateArgocdPluginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateArgocdPluginRequest proto.InternalMessageInfo

func (m *UpdateArgocdPluginRequest) GetPlugin() *v1alpha1.ArgocdPlugin {
	if m != nil {
		return m.Plugin
	}
	return nil
}

type UpdateArgocdPluginResponse struct {
	Code                 *uint32                `protobuf:"varint,1,req,name=code" json:"code,omitempty"`
	Message              *string                `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`
	Plugin               *v1alpha1.ArgocdPlugin `protobuf:"bytes,3,opt,name=plugin" json:"plugin,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UpdateArgocdPluginResponse) Reset()         { *m = UpdateArgocdPluginResponse{} }
func (m *UpdateArgocdPluginResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateArgocdPluginResponse) ProtoMessage()    {}
func (*UpdateArgocdPluginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8fcbf9d1f7441a, []int{3}
}

func (m *UpdateArgocdPluginResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateArgocdPluginResponse.Unmarshal(m, b)
}
func (m *UpdateArgocdPluginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateArgocdPluginResponse.Marshal(b, m, deterministic)
}
func (m *UpdateArgocdPluginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateArgocdPluginResponse.Merge(m, src)
}
func (m *UpdateArgocdPluginResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateArgocdPluginResponse.Size(m)
}
func (m *UpdateArgocdPluginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateArgocdPluginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateArgocdPluginResponse proto.InternalMessageInfo

func (m *UpdateArgocdPluginResponse) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *UpdateArgocdPluginResponse) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *UpdateArgocdPluginResponse) GetPlugin() *v1alpha1.ArgocdPlugin {
	if m != nil {
		return m.Plugin
	}
	return nil
}

type DeleteArgocdPluginRequest struct {
	Name                 *string  `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteArgocdPluginRequest) Reset()         { *m = DeleteArgocdPluginRequest{} }
func (m *DeleteArgocdPluginRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteArgocdPluginRequest) ProtoMessage()    {}
func (*DeleteArgocdPluginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8fcbf9d1f7441a, []int{4}
}

func (m *DeleteArgocdPluginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteArgocdPluginRequest.Unmarshal(m, b)
}
func (m *DeleteArgocdPluginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteArgocdPluginRequest.Marshal(b, m, deterministic)
}
func (m *DeleteArgocdPluginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteArgocdPluginRequest.Merge(m, src)
}
func (m *DeleteArgocdPluginRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteArgocdPluginRequest.Size(m)
}
func (m *DeleteArgocdPluginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteArgocdPluginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteArgocdPluginRequest proto.InternalMessageInfo

func (m *DeleteArgocdPluginRequest) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type DeleteArgocdPluginResponse struct {
	Code                 *uint32  `protobuf:"varint,1,req,name=code" json:"code,omitempty"`
	Message              *string  `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteArgocdPluginResponse) Reset()         { *m = DeleteArgocdPluginResponse{} }
func (m *DeleteArgocdPluginResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteArgocdPluginResponse) ProtoMessage()    {}
func (*DeleteArgocdPluginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8fcbf9d1f7441a, []int{5}
}

func (m *DeleteArgocdPluginResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteArgocdPluginResponse.Unmarshal(m, b)
}
func (m *DeleteArgocdPluginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteArgocdPluginResponse.Marshal(b, m, deterministic)
}
func (m *DeleteArgocdPluginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteArgocdPluginResponse.Merge(m, src)
}
func (m *DeleteArgocdPluginResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteArgocdPluginResponse.Size(m)
}
func (m *DeleteArgocdPluginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteArgocdPluginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteArgocdPluginResponse proto.InternalMessageInfo

func (m *DeleteArgocdPluginResponse) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *DeleteArgocdPluginResponse) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type GetArgocdPluginRequest struct {
	Name                 *string  `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetArgocdPluginRequest) Reset()         { *m = GetArgocdPluginRequest{} }
func (m *GetArgocdPluginRequest) String() string { return proto.CompactTextString(m) }
func (*GetArgocdPluginRequest) ProtoMessage()    {}
func (*GetArgocdPluginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8fcbf9d1f7441a, []int{6}
}

func (m *GetArgocdPluginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetArgocdPluginRequest.Unmarshal(m, b)
}
func (m *GetArgocdPluginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetArgocdPluginRequest.Marshal(b, m, deterministic)
}
func (m *GetArgocdPluginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetArgocdPluginRequest.Merge(m, src)
}
func (m *GetArgocdPluginRequest) XXX_Size() int {
	return xxx_messageInfo_GetArgocdPluginRequest.Size(m)
}
func (m *GetArgocdPluginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetArgocdPluginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetArgocdPluginRequest proto.InternalMessageInfo

func (m *GetArgocdPluginRequest) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type GetArgocdPluginResponse struct {
	Code                 *uint32                `protobuf:"varint,1,req,name=code" json:"code,omitempty"`
	Message              *string                `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`
	Plugin               *v1alpha1.ArgocdPlugin `protobuf:"bytes,3,opt,name=plugin" json:"plugin,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetArgocdPluginResponse) Reset()         { *m = GetArgocdPluginResponse{} }
func (m *GetArgocdPluginResponse) String() string { return proto.CompactTextString(m) }
func (*GetArgocdPluginResponse) ProtoMessage()    {}
func (*GetArgocdPluginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8fcbf9d1f7441a, []int{7}
}

func (m *GetArgocdPluginResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetArgocdPluginResponse.Unmarshal(m, b)
}
func (m *GetArgocdPluginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetArgocdPluginResponse.Marshal(b, m, deterministic)
}
func (m *GetArgocdPluginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetArgocdPluginResponse.Merge(m, src)
}
func (m *GetArgocdPluginResponse) XXX_Size() int {
	return xxx_messageInfo_GetArgocdPluginResponse.Size(m)
}
func (m *GetArgocdPluginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetArgocdPluginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetArgocdPluginResponse proto.InternalMessageInfo

func (m *GetArgocdPluginResponse) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *GetArgocdPluginResponse) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *GetArgocdPluginResponse) GetPlugin() *v1alpha1.ArgocdPlugin {
	if m != nil {
		return m.Plugin
	}
	return nil
}

type ListArgocdPluginsRequest struct {
	Project              *string  `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	NickName             *string  `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListArgocdPluginsRequest) Reset()         { *m = ListArgocdPluginsRequest{} }
func (m *ListArgocdPluginsRequest) String() string { return proto.CompactTextString(m) }
func (*ListArgocdPluginsRequest) ProtoMessage()    {}
func (*ListArgocdPluginsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8fcbf9d1f7441a, []int{8}
}

func (m *ListArgocdPluginsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListArgocdPluginsRequest.Unmarshal(m, b)
}
func (m *ListArgocdPluginsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListArgocdPluginsRequest.Marshal(b, m, deterministic)
}
func (m *ListArgocdPluginsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListArgocdPluginsRequest.Merge(m, src)
}
func (m *ListArgocdPluginsRequest) XXX_Size() int {
	return xxx_messageInfo_ListArgocdPluginsRequest.Size(m)
}
func (m *ListArgocdPluginsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListArgocdPluginsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListArgocdPluginsRequest proto.InternalMessageInfo

func (m *ListArgocdPluginsRequest) GetProject() string {
	if m != nil && m.Project != nil {
		return *m.Project
	}
	return ""
}

func (m *ListArgocdPluginsRequest) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

type ListArgocdPluginsResponse struct {
	Code                 *uint32                    `protobuf:"varint,1,req,name=code" json:"code,omitempty"`
	Message              *string                    `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`
	Plugins              *v1alpha1.ArgocdPluginList `protobuf:"bytes,3,opt,name=plugins" json:"plugins,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ListArgocdPluginsResponse) Reset()         { *m = ListArgocdPluginsResponse{} }
func (m *ListArgocdPluginsResponse) String() string { return proto.CompactTextString(m) }
func (*ListArgocdPluginsResponse) ProtoMessage()    {}
func (*ListArgocdPluginsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f8fcbf9d1f7441a, []int{9}
}

func (m *ListArgocdPluginsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListArgocdPluginsResponse.Unmarshal(m, b)
}
func (m *ListArgocdPluginsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListArgocdPluginsResponse.Marshal(b, m, deterministic)
}
func (m *ListArgocdPluginsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListArgocdPluginsResponse.Merge(m, src)
}
func (m *ListArgocdPluginsResponse) XXX_Size() int {
	return xxx_messageInfo_ListArgocdPluginsResponse.Size(m)
}
func (m *ListArgocdPluginsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListArgocdPluginsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListArgocdPluginsResponse proto.InternalMessageInfo

func (m *ListArgocdPluginsResponse) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *ListArgocdPluginsResponse) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *ListArgocdPluginsResponse) GetPlugins() *v1alpha1.ArgocdPluginList {
	if m != nil {
		return m.Plugins
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateArgocdPluginRequest)(nil), "plugin.CreateArgocdPluginRequest")
	proto.RegisterType((*CreateArgocdPluginResponse)(nil), "plugin.CreateArgocdPluginResponse")
	proto.RegisterType((*UpdateArgocdPluginRequest)(nil), "plugin.UpdateArgocdPluginRequest")
	proto.RegisterType((*UpdateArgocdPluginResponse)(nil), "plugin.UpdateArgocdPluginResponse")
	proto.RegisterType((*DeleteArgocdPluginRequest)(nil), "plugin.DeleteArgocdPluginRequest")
	proto.RegisterType((*DeleteArgocdPluginResponse)(nil), "plugin.DeleteArgocdPluginResponse")
	proto.RegisterType((*GetArgocdPluginRequest)(nil), "plugin.GetArgocdPluginRequest")
	proto.RegisterType((*GetArgocdPluginResponse)(nil), "plugin.GetArgocdPluginResponse")
	proto.RegisterType((*ListArgocdPluginsRequest)(nil), "plugin.ListArgocdPluginsRequest")
	proto.RegisterType((*ListArgocdPluginsResponse)(nil), "plugin.ListArgocdPluginsResponse")
}

func init() { proto.RegisterFile("pkg/sdk/plugin/plugin.proto", fileDescriptor_5f8fcbf9d1f7441a) }

var fileDescriptor_5f8fcbf9d1f7441a = []byte{
	// 1076 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xdf, 0x6f, 0xdb, 0x44,
	0x1c, 0x97, 0xcd, 0x68, 0xd7, 0x63, 0xa8, 0x70, 0x52, 0x58, 0xe3, 0xb6, 0xcc, 0x09, 0x48, 0x04,
	0x8b, 0xd8, 0xcd, 0xd1, 0x69, 0x25, 0xc0, 0x83, 0xcd, 0x04, 0x42, 0x1a, 0x68, 0x0a, 0xf0, 0xc2,
	0x03, 0xc5, 0x71, 0x0e, 0x2f, 0x4b, 0x6a, 0x9b, 0x9c, 0x5b, 0x90, 0x10, 0x12, 0x9b, 0x78, 0xc8,
	0x03, 0x85, 0xca, 0x54, 0xfb, 0x55, 0x89, 0xad, 0x30, 0x06, 0x12, 0x62, 0x29, 0x12, 0x82, 0xb2,
	0x22, 0x4d, 0xf0, 0x2f, 0xec, 0x89, 0xf7, 0x38, 0x4d, 0xe1, 0x81, 0x7f, 0x01, 0xc5, 0x67, 0xe7,
	0x97, 0x73, 0x85, 0x07, 0x60, 0x7b, 0xd8, 0x53, 0x7a, 0xdf, 0xbb, 0xef, 0x7d, 0x3f, 0x9f, 0xcf,
	0x7d, 0xfc, 0xbd, 0x2b, 0x98, 0x76, 0x2a, 0xa6, 0x42, 0x4a, 0x15, 0xc5, 0xa9, 0x2e, 0x9b, 0x65,
	0x2b, 0xfc, 0x91, 0x9d, 0x9a, 0xed, 0xda, 0x70, 0x8c, 0x8e, 0x84, 0x37, 0xcd, 0xb2, 0x7b, 0x6a,
	0xb9, 0x28, 0x1b, 0xf6, 0x92, 0xf2, 0x2a, 0xb6, 0x0c, 0x6c, 0xb9, 0x4a, 0xb1, 0x92, 0x2d, 0x1a,
	0x44, 0x29, 0x1a, 0x24, 0x4b, 0x70, 0x6d, 0xa5, 0x6c, 0x60, 0x3a, 0xd0, 0x6b, 0xa6, 0x6d, 0x94,
	0xb2, 0x4b, 0xba, 0xa5, 0x9b, 0xb8, 0xa6, 0x74, 0xb6, 0xd7, 0x9d, 0x32, 0x51, 0xdc, 0x0a, 0x7e,
	0x57, 0x59, 0xc9, 0xe9, 0x55, 0xe7, 0x94, 0x9e, 0x53, 0x4c, 0x6c, 0xe1, 0x9a, 0xee, 0xe2, 0x12,
	0xad, 0x24, 0x3c, 0x11, 0xfc, 0x18, 0x59, 0x13, 0x5b, 0x59, 0xf2, 0x8e, 0x6e, 0x76, 0x52, 0x6d,
	0xc7, 0x2d, 0xdb, 0x16, 0x51, 0x74, 0xcb, 0xb2, 0x5d, 0x3d, 0xf8, 0x3b, 0x5c, 0x3d, 0x63, 0xda,
	0xb6, 0x59, 0xc5, 0x9d, 0x8d, 0xe3, 0xb3, 0xe9, 0x06, 0x0f, 0x92, 0xcf, 0xd5, 0xb0, 0xee, 0x62,
	0x35, 0xc0, 0x72, 0x32, 0x20, 0x51, 0xc0, 0x6f, 0x2f, 0x63, 0xe2, 0xc2, 0x75, 0x0e, 0x84, 0xb4,
	0xa6, 0x38, 0x91, 0xcf, 0xdc, 0x87, 0xde, 0x90, 0x7b, 0xec, 0xe4, 0x90, 0x9d, 0x5c, 0xac, 0x2c,
	0x16, 0x0d, 0x22, 0x17, 0x0d, 0xb2, 0x18, 0xb1, 0x0b, 0x06, 0x94, 0xdd, 0x62, 0xc8, 0x4e, 0x76,
	0x2a, 0xa6, 0xdc, 0x61, 0x27, 0x77, 0xd8, 0xc9, 0x11, 0x3b, 0xb9, 0xbf, 0xae, 0x36, 0xe3, 0xa9,
	0x49, 0x29, 0x2c, 0x89, 0x26, 0x5b, 0x9f, 0x78, 0xcd, 0x9d, 0x1f, 0x76, 0x2f, 0x7d, 0xd8, 0xbc,
	0xb9, 0xd9, 0x3a, 0xd3, 0x28, 0x84, 0x13, 0x50, 0x03, 0x63, 0xcb, 0x0e, 0xc1, 0x35, 0x77, 0x8a,
	0x17, 0xb9, 0xcc, 0x41, 0x4d, 0xf2, 0xd4, 0xc7, 0xa4, 0x30, 0x84, 0x66, 0x5b, 0x17, 0x1a, 0xfe,
	0xda, 0xb5, 0xd6, 0xc6, 0xf7, 0xad, 0x73, 0x5b, 0x7f, 0xfe, 0xfc, 0xd1, 0xde, 0xce, 0x85, 0xf6,
	0xf5, 0xab, 0xcd, 0xed, 0x1b, 0x6f, 0xe9, 0x55, 0x82, 0x0b, 0xe1, 0xb2, 0xfc, 0x31, 0x4f, 0x9d,
	0x07, 0x48, 0x62, 0x93, 0x47, 0x89, 0xd6, 0xb9, 0x2d, 0x7f, 0xe7, 0x46, 0x17, 0x44, 0xbb, 0xf1,
	0x63, 0xeb, 0xbb, 0xb3, 0xe9, 0xdf, 0x78, 0x20, 0x8c, 0x4a, 0x22, 0x8e, 0x6d, 0x11, 0x0c, 0x65,
	0x70, 0xc0, 0xb0, 0x4b, 0x38, 0xd0, 0xeb, 0x7e, 0x4d, 0xf0, 0xd4, 0xc3, 0x52, 0x10, 0x40, 0x93,
	0xed, 0x9b, 0xeb, 0xfe, 0xc6, 0x67, 0x7b, 0xeb, 0x17, 0xdb, 0x8d, 0xc6, 0xee, 0x95, 0x33, 0x85,
	0x20, 0x0c, 0xf3, 0x60, 0x7c, 0x09, 0x13, 0xa2, 0x9b, 0x78, 0x8a, 0x17, 0xf9, 0xcc, 0x84, 0x26,
	0x7a, 0xea, 0xac, 0x14, 0xc5, 0x10, 0xec, 0xcf, 0x0a, 0x65, 0x88, 0x26, 0xfb, 0x8f, 0xe7, 0x1e,
	0x91, 0xbb, 0x53, 0x8e, 0x27, 0xbf, 0xe0, 0xa9, 0x47, 0xc1, 0x93, 0xd2, 0x3e, 0x2a, 0xc5, 0xb5,
	0x0d, 0x58, 0xa6, 0xff, 0xe0, 0x40, 0xf2, 0x35, 0xa7, 0xf4, 0x4f, 0xdc, 0x78, 0xe7, 0xd0, 0x8d,
	0x9c, 0xc4, 0x04, 0x8e, 0x12, 0xd4, 0x8c, 0xa3, 0x9c, 0x34, 0x2a, 0xe9, 0xae, 0x93, 0x86, 0x9d,
	0xc4, 0x56, 0x29, 0xae, 0x2d, 0x75, 0xd2, 0xc7, 0x1c, 0x48, 0x1e, 0xc7, 0x55, 0x3c, 0xda, 0x49,
	0x0b, 0xe0, 0x80, 0xa5, 0x2f, 0x51, 0x69, 0x27, 0xb4, 0x47, 0x3d, 0x35, 0x25, 0x05, 0x01, 0x94,
	0xec, 0xee, 0xe3, 0xaf, 0xad, 0xfa, 0xdf, 0x9e, 0xcf, 0xf8, 0xeb, 0x8d, 0xe6, 0xf6, 0x07, 0xe5,
	0xd2, 0xe3, 0x85, 0x60, 0x41, 0xf7, 0xb0, 0x99, 0x7b, 0xa3, 0x84, 0x5f, 0xbf, 0xb2, 0x77, 0xf1,
	0xea, 0xf0, 0x61, 0xff, 0xca, 0x01, 0x61, 0x54, 0xd2, 0xff, 0x7f, 0xd8, 0x5d, 0x55, 0xd9, 0x70,
	0xe2, 0x24, 0xa8, 0xaa, 0x75, 0x0e, 0x3c, 0xf4, 0x02, 0x76, 0xff, 0x5d, 0x49, 0xe7, 0x3d, 0x35,
	0x07, 0x14, 0x89, 0xb1, 0x31, 0x4a, 0xb4, 0x2e, 0x7f, 0xd9, 0x6e, 0x7c, 0x3e, 0xac, 0xe7, 0x2d,
	0x1e, 0x1c, 0x8e, 0x65, 0xdc, 0xfd, 0x72, 0xa2, 0x2f, 0xe7, 0xa8, 0xa7, 0x22, 0x30, 0x27, 0xb1,
	0x24, 0x8a, 0xab, 0x4a, 0x0f, 0xf8, 0x17, 0x0e, 0x4c, 0x9d, 0x28, 0x93, 0x81, 0x1c, 0x12, 0x1d,
	0xf1, 0x3c, 0x18, 0x77, 0x6a, 0xf6, 0x69, 0x6c, 0xb8, 0x41, 0xff, 0x9d, 0xa0, 0xca, 0x46, 0x31,
	0x74, 0x68, 0x6f, 0xf3, 0xa7, 0xdd, 0x8d, 0xeb, 0xfe, 0xda, 0xea, 0xee, 0x57, 0x5b, 0x85, 0x28,
	0x0c, 0x73, 0xe0, 0xa0, 0x55, 0x36, 0x2a, 0x2f, 0x77, 0xcc, 0xc1, 0x07, 0x69, 0x09, 0x4f, 0x85,
	0x52, 0x37, 0x88, 0xc6, 0xfc, 0xfa, 0x37, 0xfe, 0xda, 0x6a, 0xa1, 0x1b, 0xc9, 0x3f, 0xe3, 0xa9,
	0x4f, 0x81, 0x63, 0x12, 0x13, 0x09, 0x9a, 0xee, 0x47, 0xef, 0xd7, 0xcf, 0xb7, 0x37, 0xbf, 0xee,
	0x39, 0xe3, 0x77, 0x1e, 0x24, 0x47, 0x64, 0xde, 0x06, 0x6f, 0x6c, 0x72, 0x60, 0x9c, 0x9e, 0x07,
	0x09, 0xcd, 0x51, 0xfc, 0x6f, 0xcd, 0xd1, 0xa1, 0xad, 0x3d, 0xe2, 0xa9, 0xa2, 0x14, 0xd5, 0x45,
	0x89, 0x21, 0x91, 0x22, 0x8c, 0xe1, 0x7c, 0xfe, 0x59, 0x4f, 0xcd, 0x83, 0x05, 0x89, 0xad, 0x18,
	0x4b, 0xec, 0x80, 0x37, 0xda, 0x1e, 0x03, 0x63, 0x34, 0x01, 0x5e, 0xe6, 0x00, 0x8c, 0x5f, 0xf9,
	0x30, 0x25, 0x87, 0xcf, 0x64, 0xe6, 0x4b, 0x4b, 0x48, 0xef, 0xb7, 0x84, 0xa2, 0x48, 0x6b, 0x9e,
	0x3a, 0x03, 0x0f, 0xf9, 0xf5, 0x8d, 0xee, 0xb3, 0x41, 0x18, 0x18, 0x9d, 0xbd, 0xd5, 0xfc, 0x94,
	0x9f, 0x4d, 0x4f, 0x29, 0x54, 0xb5, 0xe8, 0x49, 0xbd, 0x92, 0x0b, 0x5f, 0xe9, 0x79, 0x4e, 0x0a,
	0x10, 0xc6, 0xaf, 0x92, 0x1e, 0x42, 0xe6, 0x0d, 0xde, 0x43, 0xc8, 0xbe, 0x89, 0x42, 0x84, 0xfd,
	0xd7, 0x91, 0x30, 0x30, 0xa2, 0x08, 0x85, 0x7d, 0x11, 0x7e, 0xc1, 0x01, 0x18, 0x6f, 0xcb, 0x3d,
	0x84, 0xcc, 0x6b, 0xa7, 0x87, 0x90, 0xdd, 0xd5, 0xd3, 0xcf, 0x87, 0x1a, 0xf6, 0x5a, 0xbb, 0x30,
	0x30, 0x0a, 0x10, 0xa6, 0xa4, 0x23, 0x2c, 0x84, 0xca, 0x7b, 0x9d, 0x86, 0xfd, 0x3e, 0xbc, 0xc4,
	0x81, 0xc9, 0xa1, 0xc6, 0x02, 0x1f, 0x8e, 0xea, 0x8f, 0x6e, 0xe3, 0xc2, 0x11, 0xe6, 0xfc, 0x00,
	0xb8, 0x7e, 0xaf, 0x09, 0x03, 0x23, 0x0a, 0x0e, 0xfe, 0x2d, 0xb8, 0x6b, 0x1c, 0x78, 0x30, 0x66,
	0x66, 0x28, 0x46, 0xe5, 0x59, 0x3d, 0x45, 0x48, 0xed, 0xb3, 0x22, 0x84, 0x78, 0xc2, 0x53, 0x33,
	0x10, 0xc6, 0x3f, 0x07, 0x61, 0x44, 0x2c, 0x80, 0x3b, 0x0d, 0x93, 0x2c, 0xb8, 0x44, 0xd3, 0x3d,
	0xf5, 0x15, 0x28, 0x81, 0x94, 0x66, 0x10, 0x91, 0xd6, 0x13, 0x5f, 0xa2, 0xab, 0x44, 0x5a, 0x58,
	0x54, 0x4f, 0xbe, 0x28, 0x1e, 0xb7, 0x0d, 0x74, 0xef, 0x9c, 0x9c, 0x93, 0xe7, 0x24, 0x8e, 0x43,
	0x0f, 0xe8, 0x8e, 0x53, 0x2d, 0x1b, 0xc1, 0xbf, 0x70, 0xca, 0x69, 0x62, 0x5b, 0xf9, 0x58, 0xe4,
	0xf5, 0x09, 0x59, 0x79, 0x9a, 0xd6, 0xf8, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x54, 0xa3, 0x92,
	0xb1, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PluginClient is the client API for Plugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PluginClient interface {
	CreateArgocdPlugin(ctx context.Context, in *CreateArgocdPluginRequest, opts ...grpc.CallOption) (*CreateArgocdPluginResponse, error)
	UpdateArgocdPlugin(ctx context.Context, in *UpdateArgocdPluginRequest, opts ...grpc.CallOption) (*UpdateArgocdPluginResponse, error)
	DeleteArgocdPlugin(ctx context.Context, in *DeleteArgocdPluginRequest, opts ...grpc.CallOption) (*DeleteArgocdPluginResponse, error)
	GetArgocdPlugin(ctx context.Context, in *GetArgocdPluginRequest, opts ...grpc.CallOption) (*GetArgocdPluginResponse, error)
	ListArgocdPlugins(ctx context.Context, in *ListArgocdPluginsRequest, opts ...grpc.CallOption) (*ListArgocdPluginsResponse, error)
}

type pluginClient struct {
	cc *grpc.ClientConn
}

func NewPluginClient(cc *grpc.ClientConn) PluginClient {
	return &pluginClient{cc}
}

func (c *pluginClient) CreateArgocdPlugin(ctx context.Context, in *CreateArgocdPluginRequest, opts ...grpc.CallOption) (*CreateArgocdPluginResponse, error) {
	out := new(CreateArgocdPluginResponse)
	err := c.cc.Invoke(ctx, "/plugin.Plugin/CreateArgocdPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) UpdateArgocdPlugin(ctx context.Context, in *UpdateArgocdPluginRequest, opts ...grpc.CallOption) (*UpdateArgocdPluginResponse, error) {
	out := new(UpdateArgocdPluginResponse)
	err := c.cc.Invoke(ctx, "/plugin.Plugin/UpdateArgocdPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) DeleteArgocdPlugin(ctx context.Context, in *DeleteArgocdPluginRequest, opts ...grpc.CallOption) (*DeleteArgocdPluginResponse, error) {
	out := new(DeleteArgocdPluginResponse)
	err := c.cc.Invoke(ctx, "/plugin.Plugin/DeleteArgocdPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) GetArgocdPlugin(ctx context.Context, in *GetArgocdPluginRequest, opts ...grpc.CallOption) (*GetArgocdPluginResponse, error) {
	out := new(GetArgocdPluginResponse)
	err := c.cc.Invoke(ctx, "/plugin.Plugin/GetArgocdPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) ListArgocdPlugins(ctx context.Context, in *ListArgocdPluginsRequest, opts ...grpc.CallOption) (*ListArgocdPluginsResponse, error) {
	out := new(ListArgocdPluginsResponse)
	err := c.cc.Invoke(ctx, "/plugin.Plugin/ListArgocdPlugins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServer is the server API for Plugin service.
type PluginServer interface {
	CreateArgocdPlugin(context.Context, *CreateArgocdPluginRequest) (*CreateArgocdPluginResponse, error)
	UpdateArgocdPlugin(context.Context, *UpdateArgocdPluginRequest) (*UpdateArgocdPluginResponse, error)
	DeleteArgocdPlugin(context.Context, *DeleteArgocdPluginRequest) (*DeleteArgocdPluginResponse, error)
	GetArgocdPlugin(context.Context, *GetArgocdPluginRequest) (*GetArgocdPluginResponse, error)
	ListArgocdPlugins(context.Context, *ListArgocdPluginsRequest) (*ListArgocdPluginsResponse, error)
}

// UnimplementedPluginServer can be embedded to have forward compatible implementations.
type UnimplementedPluginServer struct {
}

func (*UnimplementedPluginServer) CreateArgocdPlugin(ctx context.Context, req *CreateArgocdPluginRequest) (*CreateArgocdPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArgocdPlugin not implemented")
}
func (*UnimplementedPluginServer) UpdateArgocdPlugin(ctx context.Context, req *UpdateArgocdPluginRequest) (*UpdateArgocdPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArgocdPlugin not implemented")
}
func (*UnimplementedPluginServer) DeleteArgocdPlugin(ctx context.Context, req *DeleteArgocdPluginRequest) (*DeleteArgocdPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArgocdPlugin not implemented")
}
func (*UnimplementedPluginServer) GetArgocdPlugin(ctx context.Context, req *GetArgocdPluginRequest) (*GetArgocdPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArgocdPlugin not implemented")
}
func (*UnimplementedPluginServer) ListArgocdPlugins(ctx context.Context, req *ListArgocdPluginsRequest) (*ListArgocdPluginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArgocdPlugins not implemented")
}

func RegisterPluginServer(s *grpc.Server, srv PluginServer) {
	s.RegisterService(&_Plugin_serviceDesc, srv)
}

func _Plugin_CreateArgocdPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArgocdPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).CreateArgocdPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.Plugin/CreateArgocdPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).CreateArgocdPlugin(ctx, req.(*CreateArgocdPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_UpdateArgocdPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArgocdPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).UpdateArgocdPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.Plugin/UpdateArgocdPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).UpdateArgocdPlugin(ctx, req.(*UpdateArgocdPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_DeleteArgocdPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArgocdPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).DeleteArgocdPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.Plugin/DeleteArgocdPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).DeleteArgocdPlugin(ctx, req.(*DeleteArgocdPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_GetArgocdPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArgocdPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).GetArgocdPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.Plugin/GetArgocdPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).GetArgocdPlugin(ctx, req.(*GetArgocdPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_ListArgocdPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArgocdPluginsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).ListArgocdPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.Plugin/ListArgocdPlugins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).ListArgocdPlugins(ctx, req.(*ListArgocdPluginsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Plugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plugin.Plugin",
	HandlerType: (*PluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArgocdPlugin",
			Handler:    _Plugin_CreateArgocdPlugin_Handler,
		},
		{
			MethodName: "UpdateArgocdPlugin",
			Handler:    _Plugin_UpdateArgocdPlugin_Handler,
		},
		{
			MethodName: "DeleteArgocdPlugin",
			Handler:    _Plugin_DeleteArgocdPlugin_Handler,
		},
		{
			MethodName: "GetArgocdPlugin",
			Handler:    _Plugin_GetArgocdPlugin_Handler,
		},
		{
			MethodName: "ListArgocdPlugins",
			Handler:    _Plugin_ListArgocdPlugins_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/sdk/plugin/plugin.proto",
}
