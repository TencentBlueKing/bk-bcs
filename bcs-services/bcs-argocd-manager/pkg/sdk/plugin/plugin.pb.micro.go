// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pkg/sdk/plugin/plugin.proto

package plugin

import (
	fmt "fmt"
	_ "github.com/Tencent/bk-bcs/bcs-services/bcs-argocd-manager/pkg/apis/tkex/v1alpha1"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Plugin service

func NewPluginEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "Plugin.CreateArgocdPlugin",
			Path:    []string{"/argocdmanager/v1/plugin"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "Plugin.UpdateArgocdPlugin",
			Path:    []string{"/argocdmanager/v1/plugin"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "Plugin.DeleteArgocdPlugin",
			Path:    []string{"/argocdmanager/v1/plugin/{name}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		{
			Name:    "Plugin.GetArgocdPlugin",
			Path:    []string{"/argocdmanager/v1/plugin/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Plugin.ListArgocdPlugins",
			Path:    []string{"/argocdmanager/v1/plugins"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for Plugin service

type PluginService interface {
	CreateArgocdPlugin(ctx context.Context, in *CreateArgocdPluginRequest, opts ...client.CallOption) (*CreateArgocdPluginResponse, error)
	UpdateArgocdPlugin(ctx context.Context, in *UpdateArgocdPluginRequest, opts ...client.CallOption) (*UpdateArgocdPluginResponse, error)
	DeleteArgocdPlugin(ctx context.Context, in *DeleteArgocdPluginRequest, opts ...client.CallOption) (*DeleteArgocdPluginResponse, error)
	GetArgocdPlugin(ctx context.Context, in *GetArgocdPluginRequest, opts ...client.CallOption) (*GetArgocdPluginResponse, error)
	ListArgocdPlugins(ctx context.Context, in *ListArgocdPluginsRequest, opts ...client.CallOption) (*ListArgocdPluginsResponse, error)
}

type pluginService struct {
	c    client.Client
	name string
}

func NewPluginService(name string, c client.Client) PluginService {
	return &pluginService{
		c:    c,
		name: name,
	}
}

func (c *pluginService) CreateArgocdPlugin(ctx context.Context, in *CreateArgocdPluginRequest, opts ...client.CallOption) (*CreateArgocdPluginResponse, error) {
	req := c.c.NewRequest(c.name, "Plugin.CreateArgocdPlugin", in)
	out := new(CreateArgocdPluginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginService) UpdateArgocdPlugin(ctx context.Context, in *UpdateArgocdPluginRequest, opts ...client.CallOption) (*UpdateArgocdPluginResponse, error) {
	req := c.c.NewRequest(c.name, "Plugin.UpdateArgocdPlugin", in)
	out := new(UpdateArgocdPluginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginService) DeleteArgocdPlugin(ctx context.Context, in *DeleteArgocdPluginRequest, opts ...client.CallOption) (*DeleteArgocdPluginResponse, error) {
	req := c.c.NewRequest(c.name, "Plugin.DeleteArgocdPlugin", in)
	out := new(DeleteArgocdPluginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginService) GetArgocdPlugin(ctx context.Context, in *GetArgocdPluginRequest, opts ...client.CallOption) (*GetArgocdPluginResponse, error) {
	req := c.c.NewRequest(c.name, "Plugin.GetArgocdPlugin", in)
	out := new(GetArgocdPluginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginService) ListArgocdPlugins(ctx context.Context, in *ListArgocdPluginsRequest, opts ...client.CallOption) (*ListArgocdPluginsResponse, error) {
	req := c.c.NewRequest(c.name, "Plugin.ListArgocdPlugins", in)
	out := new(ListArgocdPluginsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Plugin service

type PluginHandler interface {
	CreateArgocdPlugin(context.Context, *CreateArgocdPluginRequest, *CreateArgocdPluginResponse) error
	UpdateArgocdPlugin(context.Context, *UpdateArgocdPluginRequest, *UpdateArgocdPluginResponse) error
	DeleteArgocdPlugin(context.Context, *DeleteArgocdPluginRequest, *DeleteArgocdPluginResponse) error
	GetArgocdPlugin(context.Context, *GetArgocdPluginRequest, *GetArgocdPluginResponse) error
	ListArgocdPlugins(context.Context, *ListArgocdPluginsRequest, *ListArgocdPluginsResponse) error
}

func RegisterPluginHandler(s server.Server, hdlr PluginHandler, opts ...server.HandlerOption) error {
	type plugin interface {
		CreateArgocdPlugin(ctx context.Context, in *CreateArgocdPluginRequest, out *CreateArgocdPluginResponse) error
		UpdateArgocdPlugin(ctx context.Context, in *UpdateArgocdPluginRequest, out *UpdateArgocdPluginResponse) error
		DeleteArgocdPlugin(ctx context.Context, in *DeleteArgocdPluginRequest, out *DeleteArgocdPluginResponse) error
		GetArgocdPlugin(ctx context.Context, in *GetArgocdPluginRequest, out *GetArgocdPluginResponse) error
		ListArgocdPlugins(ctx context.Context, in *ListArgocdPluginsRequest, out *ListArgocdPluginsResponse) error
	}
	type Plugin struct {
		plugin
	}
	h := &pluginHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Plugin.CreateArgocdPlugin",
		Path:    []string{"/argocdmanager/v1/plugin"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Plugin.UpdateArgocdPlugin",
		Path:    []string{"/argocdmanager/v1/plugin"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Plugin.DeleteArgocdPlugin",
		Path:    []string{"/argocdmanager/v1/plugin/{name}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Plugin.GetArgocdPlugin",
		Path:    []string{"/argocdmanager/v1/plugin/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Plugin.ListArgocdPlugins",
		Path:    []string{"/argocdmanager/v1/plugins"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&Plugin{h}, opts...))
}

type pluginHandler struct {
	PluginHandler
}

func (h *pluginHandler) CreateArgocdPlugin(ctx context.Context, in *CreateArgocdPluginRequest, out *CreateArgocdPluginResponse) error {
	return h.PluginHandler.CreateArgocdPlugin(ctx, in, out)
}

func (h *pluginHandler) UpdateArgocdPlugin(ctx context.Context, in *UpdateArgocdPluginRequest, out *UpdateArgocdPluginResponse) error {
	return h.PluginHandler.UpdateArgocdPlugin(ctx, in, out)
}

func (h *pluginHandler) DeleteArgocdPlugin(ctx context.Context, in *DeleteArgocdPluginRequest, out *DeleteArgocdPluginResponse) error {
	return h.PluginHandler.DeleteArgocdPlugin(ctx, in, out)
}

func (h *pluginHandler) GetArgocdPlugin(ctx context.Context, in *GetArgocdPluginRequest, out *GetArgocdPluginResponse) error {
	return h.PluginHandler.GetArgocdPlugin(ctx, in, out)
}

func (h *pluginHandler) ListArgocdPlugins(ctx context.Context, in *ListArgocdPluginsRequest, out *ListArgocdPluginsResponse) error {
	return h.PluginHandler.ListArgocdPlugins(ctx, in, out)
}
