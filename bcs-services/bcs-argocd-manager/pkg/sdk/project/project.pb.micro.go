// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pkg/sdk/project/project.proto

package project

import (
	fmt "fmt"
	_ "github.com/Tencent/bk-bcs/bcs-services/bcs-argocd-manager/pkg/apis/tkex/v1alpha1"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Project service

func NewProjectEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "Project.CreateArgocdProject",
			Path:    []string{"/argocdmanager/v1/project"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "Project.UpdateArgocdProject",
			Path:    []string{"/argocdmanager/v1/project"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "Project.DeleteArgocdProject",
			Path:    []string{"/argocdmanager/v1/project/{name}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		{
			Name:    "Project.GetArgocdProject",
			Path:    []string{"/argocdmanager/v1/project/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "Project.ListArgocdProjects",
			Path:    []string{"/argocdmanager/v1/projects"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for Project service

type ProjectService interface {
	CreateArgocdProject(ctx context.Context, in *CreateArgocdProjectRequest, opts ...client.CallOption) (*CreateArgocdProjectResponse, error)
	UpdateArgocdProject(ctx context.Context, in *UpdateArgocdProjectRequest, opts ...client.CallOption) (*UpdateArgocdProjectResponse, error)
	DeleteArgocdProject(ctx context.Context, in *DeleteArgocdProjectRequest, opts ...client.CallOption) (*DeleteArgocdProjectResponse, error)
	GetArgocdProject(ctx context.Context, in *GetArgocdProjectRequest, opts ...client.CallOption) (*GetArgocdProjectResponse, error)
	ListArgocdProjects(ctx context.Context, in *ListArgocdProjectsRequest, opts ...client.CallOption) (*ListArgocdProjectsResponse, error)
}

type projectService struct {
	c    client.Client
	name string
}

func NewProjectService(name string, c client.Client) ProjectService {
	return &projectService{
		c:    c,
		name: name,
	}
}

func (c *projectService) CreateArgocdProject(ctx context.Context, in *CreateArgocdProjectRequest, opts ...client.CallOption) (*CreateArgocdProjectResponse, error) {
	req := c.c.NewRequest(c.name, "Project.CreateArgocdProject", in)
	out := new(CreateArgocdProjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) UpdateArgocdProject(ctx context.Context, in *UpdateArgocdProjectRequest, opts ...client.CallOption) (*UpdateArgocdProjectResponse, error) {
	req := c.c.NewRequest(c.name, "Project.UpdateArgocdProject", in)
	out := new(UpdateArgocdProjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) DeleteArgocdProject(ctx context.Context, in *DeleteArgocdProjectRequest, opts ...client.CallOption) (*DeleteArgocdProjectResponse, error) {
	req := c.c.NewRequest(c.name, "Project.DeleteArgocdProject", in)
	out := new(DeleteArgocdProjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) GetArgocdProject(ctx context.Context, in *GetArgocdProjectRequest, opts ...client.CallOption) (*GetArgocdProjectResponse, error) {
	req := c.c.NewRequest(c.name, "Project.GetArgocdProject", in)
	out := new(GetArgocdProjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) ListArgocdProjects(ctx context.Context, in *ListArgocdProjectsRequest, opts ...client.CallOption) (*ListArgocdProjectsResponse, error) {
	req := c.c.NewRequest(c.name, "Project.ListArgocdProjects", in)
	out := new(ListArgocdProjectsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Project service

type ProjectHandler interface {
	CreateArgocdProject(context.Context, *CreateArgocdProjectRequest, *CreateArgocdProjectResponse) error
	UpdateArgocdProject(context.Context, *UpdateArgocdProjectRequest, *UpdateArgocdProjectResponse) error
	DeleteArgocdProject(context.Context, *DeleteArgocdProjectRequest, *DeleteArgocdProjectResponse) error
	GetArgocdProject(context.Context, *GetArgocdProjectRequest, *GetArgocdProjectResponse) error
	ListArgocdProjects(context.Context, *ListArgocdProjectsRequest, *ListArgocdProjectsResponse) error
}

func RegisterProjectHandler(s server.Server, hdlr ProjectHandler, opts ...server.HandlerOption) error {
	type project interface {
		CreateArgocdProject(ctx context.Context, in *CreateArgocdProjectRequest, out *CreateArgocdProjectResponse) error
		UpdateArgocdProject(ctx context.Context, in *UpdateArgocdProjectRequest, out *UpdateArgocdProjectResponse) error
		DeleteArgocdProject(ctx context.Context, in *DeleteArgocdProjectRequest, out *DeleteArgocdProjectResponse) error
		GetArgocdProject(ctx context.Context, in *GetArgocdProjectRequest, out *GetArgocdProjectResponse) error
		ListArgocdProjects(ctx context.Context, in *ListArgocdProjectsRequest, out *ListArgocdProjectsResponse) error
	}
	type Project struct {
		project
	}
	h := &projectHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Project.CreateArgocdProject",
		Path:    []string{"/argocdmanager/v1/project"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Project.UpdateArgocdProject",
		Path:    []string{"/argocdmanager/v1/project"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Project.DeleteArgocdProject",
		Path:    []string{"/argocdmanager/v1/project/{name}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Project.GetArgocdProject",
		Path:    []string{"/argocdmanager/v1/project/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Project.ListArgocdProjects",
		Path:    []string{"/argocdmanager/v1/projects"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&Project{h}, opts...))
}

type projectHandler struct {
	ProjectHandler
}

func (h *projectHandler) CreateArgocdProject(ctx context.Context, in *CreateArgocdProjectRequest, out *CreateArgocdProjectResponse) error {
	return h.ProjectHandler.CreateArgocdProject(ctx, in, out)
}

func (h *projectHandler) UpdateArgocdProject(ctx context.Context, in *UpdateArgocdProjectRequest, out *UpdateArgocdProjectResponse) error {
	return h.ProjectHandler.UpdateArgocdProject(ctx, in, out)
}

func (h *projectHandler) DeleteArgocdProject(ctx context.Context, in *DeleteArgocdProjectRequest, out *DeleteArgocdProjectResponse) error {
	return h.ProjectHandler.DeleteArgocdProject(ctx, in, out)
}

func (h *projectHandler) GetArgocdProject(ctx context.Context, in *GetArgocdProjectRequest, out *GetArgocdProjectResponse) error {
	return h.ProjectHandler.GetArgocdProject(ctx, in, out)
}

func (h *projectHandler) ListArgocdProjects(ctx context.Context, in *ListArgocdProjectsRequest, out *ListArgocdProjectsResponse) error {
	return h.ProjectHandler.ListArgocdProjects(ctx, in, out)
}
