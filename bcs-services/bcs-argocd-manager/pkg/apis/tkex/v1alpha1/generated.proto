/*
 * Tencent is pleased to support the open source community by making Blueking Container Service available.
 * Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://opensource.org/licenses/MIT
 * Unless required by applicable law or agreed to in writing, software distributed under,
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.Tencent.bk_bcs.bcs_services.bcs_argocd_manager.pkg.apis.tkex.v1alpha1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// ArgocdInstance is the Schema for the argocdinstances API
message ArgocdInstance {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ArgocdInstanceSpec spec = 2;

  optional ArgocdInstanceStatus status = 3;
}

// ArgocdInstanceList contains a list of ArgocdInstance
message ArgocdInstanceList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ArgocdInstance items = 2;
}

// ArgocdInstanceSpec defines the desired state of ArgocdInstance
message ArgocdInstanceSpec {
  // Project which project belongs to
  optional string project = 1;
}

// ArgocdInstanceStatus defines the observed state of ArgocdInstance
message ArgocdInstanceStatus {
  // ServerHost is the argocd-server host for this instance
  optional string serverHost = 1;
}

// ArgocdPlugin is the Schema for the argocdplugins API
message ArgocdPlugin {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ArgocdPluginSpec spec = 2;

  optional ArgocdPluginStatus status = 3;
}

// ArgocdPluginList contains a list of ArgocdPlugin
message ArgocdPluginList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ArgocdPlugin items = 2;
}

// ArgocdPluginService defines the service information of the plugins when type is "service"
message ArgocdPluginService {
  optional string protocol = 1;

  optional string address = 2;

  map<string, string> headers = 3;
}

// ArgocdPluginSpec defines the desired state of ArgocdPlugin
message ArgocdPluginSpec {
  optional string nickName = 1;

  optional string project = 2;

  optional string type = 3;

  optional ArgocdPluginService service = 4;

  optional string image = 5;
}

// ArgocdPluginStatus defines the observed state of ArgocdPlugin
message ArgocdPluginStatus {
}

// ArgocdProject is the Schema for the argocdprojects API
message ArgocdProject {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ArgocdProjectSpec spec = 2;

  optional ArgocdProjectStatus status = 3;
}

// ArgocdProjectList contains a list of ArgocdProject
message ArgocdProjectList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ArgocdProject items = 2;
}

// ArgocdProjectSpec defines the desired state of ArgocdProjectSpec
message ArgocdProjectSpec {
  // Foo is an example field of ArgocdProject. Edit argocdproject_types.go to remove/update
  optional string foo = 1;
}

// ArgocdProjectStatus defines the observed state of ArgocdProject
message ArgocdProjectStatus {
}

