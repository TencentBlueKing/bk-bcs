// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: bcs-mesh-manager.proto

package meshmanager

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type WebAnnotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Perms *_struct.Struct `protobuf:"bytes,1,opt,name=perms,proto3" json:"perms,omitempty"`
}

func (x *WebAnnotations) Reset() {
	*x = WebAnnotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebAnnotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebAnnotations) ProtoMessage() {}

func (x *WebAnnotations) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebAnnotations.ProtoReflect.Descriptor instead.
func (*WebAnnotations) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{0}
}

func (x *WebAnnotations) GetPerms() *_struct.Struct {
	if x != nil {
		return x.Perms
	}
	return nil
}

// 获取当前开放的istio版本请求
type ListIstioVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListIstioVersionRequest) Reset() {
	*x = ListIstioVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIstioVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIstioVersionRequest) ProtoMessage() {}

func (x *ListIstioVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIstioVersionRequest.ProtoReflect.Descriptor instead.
func (*ListIstioVersionRequest) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{1}
}

// 获取当前开放的istio版本响应
type ListIstioVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32                   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string                   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID      string                   `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations          `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
	Data           *IstioVersionAndFeatures `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListIstioVersionResponse) Reset() {
	*x = ListIstioVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIstioVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIstioVersionResponse) ProtoMessage() {}

func (x *ListIstioVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIstioVersionResponse.ProtoReflect.Descriptor instead.
func (*ListIstioVersionResponse) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{2}
}

func (x *ListIstioVersionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListIstioVersionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListIstioVersionResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ListIstioVersionResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

func (x *ListIstioVersionResponse) GetData() *IstioVersionAndFeatures {
	if x != nil {
		return x.Data
	}
	return nil
}

// 获取istio版本列表响应
type IstioVersionAndFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IstioVersions  []*IstioVersion  `protobuf:"bytes,1,rep,name=istioVersions,proto3" json:"istioVersions,omitempty"`
	FeatureConfigs []*FeatureConfig `protobuf:"bytes,2,rep,name=featureConfigs,proto3" json:"featureConfigs,omitempty"`
}

func (x *IstioVersionAndFeatures) Reset() {
	*x = IstioVersionAndFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IstioVersionAndFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IstioVersionAndFeatures) ProtoMessage() {}

func (x *IstioVersionAndFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IstioVersionAndFeatures.ProtoReflect.Descriptor instead.
func (*IstioVersionAndFeatures) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{3}
}

func (x *IstioVersionAndFeatures) GetIstioVersions() []*IstioVersion {
	if x != nil {
		return x.IstioVersions
	}
	return nil
}

func (x *IstioVersionAndFeatures) GetFeatureConfigs() []*FeatureConfig {
	if x != nil {
		return x.FeatureConfigs
	}
	return nil
}

// 获取istio版本列表响应
type IstioVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version      string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	ChartVersion string `protobuf:"bytes,3,opt,name=chartVersion,proto3" json:"chartVersion,omitempty"`
	KubeVersion  string `protobuf:"bytes,4,opt,name=kubeVersion,proto3" json:"kubeVersion,omitempty"`
}

func (x *IstioVersion) Reset() {
	*x = IstioVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IstioVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IstioVersion) ProtoMessage() {}

func (x *IstioVersion) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IstioVersion.ProtoReflect.Descriptor instead.
func (*IstioVersion) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{4}
}

func (x *IstioVersion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IstioVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *IstioVersion) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *IstioVersion) GetKubeVersion() string {
	if x != nil {
		return x.KubeVersion
	}
	return ""
}

// 功能列表
type FeatureConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description     string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	DefaultValue    string   `protobuf:"bytes,3,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
	AvailableValues []string `protobuf:"bytes,4,rep,name=availableValues,proto3" json:"availableValues,omitempty"`
	SupportVersions []string `protobuf:"bytes,5,rep,name=supportVersions,proto3" json:"supportVersions,omitempty"`
}

func (x *FeatureConfig) Reset() {
	*x = FeatureConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureConfig) ProtoMessage() {}

func (x *FeatureConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureConfig.ProtoReflect.Descriptor instead.
func (*FeatureConfig) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{5}
}

func (x *FeatureConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FeatureConfig) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *FeatureConfig) GetAvailableValues() []string {
	if x != nil {
		return x.AvailableValues
	}
	return nil
}

func (x *FeatureConfig) GetSupportVersions() []string {
	if x != nil {
		return x.SupportVersions
	}
	return nil
}

var File_bcs_mesh_manager_proto protoreflect.FileDescriptor

var file_bcs_mesh_manager_proto_rawDesc = []byte{
	0x0a, 0x16, 0x62, 0x63, 0x73, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x59, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x65,
	0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x32, 0x0c,
	0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x05, 0x70, 0x65,
	0x72, 0x6d, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf3,
	0x03, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x68, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6,
	0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65, 0x62,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe5, 0x93, 0x8d, 0xe5,
	0xba, 0x94, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x74,
	0x92, 0x41, 0x71, 0x0a, 0x6f, 0x2a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x1d, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x69, 0x73, 0x74, 0x69, 0x6f, 0xe7, 0x89, 0x88, 0xe6,
	0x9c, 0xac, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2,
	0x01, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xd2, 0x01, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xf6, 0x01, 0x0a, 0x17, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x66, 0x0a, 0x0d, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x0d, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x11, 0x69, 0x73, 0x74, 0x69, 0x6f, 0xe7, 0x89, 0x88,
	0xe6, 0x9c, 0xac, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x0d, 0x69, 0x73, 0x74, 0x69, 0x6f,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x73, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2f, 0x92, 0x41,
	0x2c, 0x2a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x32, 0x1a, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x28,
	0xe6, 0xb3, 0xa8, 0xe6, 0x84, 0x8f, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x29, 0x52, 0x0e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x82, 0x01,
	0x0a, 0x0c, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xbd, 0x01, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x32, 0x8e, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x12, 0x7f, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x59, 0x5a, 0x0e, 0x2e, 0x2f, 0x3b, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x92, 0x41, 0x46, 0x12, 0x1d, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x68,
	0x20, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x20, 0x44, 0x6f, 0x63,
	0x32, 0x05, 0x30, 0x2e, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bcs_mesh_manager_proto_rawDescOnce sync.Once
	file_bcs_mesh_manager_proto_rawDescData = file_bcs_mesh_manager_proto_rawDesc
)

func file_bcs_mesh_manager_proto_rawDescGZIP() []byte {
	file_bcs_mesh_manager_proto_rawDescOnce.Do(func() {
		file_bcs_mesh_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_bcs_mesh_manager_proto_rawDescData)
	})
	return file_bcs_mesh_manager_proto_rawDescData
}

var file_bcs_mesh_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_bcs_mesh_manager_proto_goTypes = []interface{}{
	(*WebAnnotations)(nil),           // 0: meshmanager.WebAnnotations
	(*ListIstioVersionRequest)(nil),  // 1: meshmanager.ListIstioVersionRequest
	(*ListIstioVersionResponse)(nil), // 2: meshmanager.ListIstioVersionResponse
	(*IstioVersionAndFeatures)(nil),  // 3: meshmanager.IstioVersionAndFeatures
	(*IstioVersion)(nil),             // 4: meshmanager.IstioVersion
	(*FeatureConfig)(nil),            // 5: meshmanager.FeatureConfig
	(*_struct.Struct)(nil),           // 6: google.protobuf.Struct
}
var file_bcs_mesh_manager_proto_depIdxs = []int32{
	6, // 0: meshmanager.WebAnnotations.perms:type_name -> google.protobuf.Struct
	0, // 1: meshmanager.ListIstioVersionResponse.web_annotations:type_name -> meshmanager.WebAnnotations
	3, // 2: meshmanager.ListIstioVersionResponse.data:type_name -> meshmanager.IstioVersionAndFeatures
	4, // 3: meshmanager.IstioVersionAndFeatures.istioVersions:type_name -> meshmanager.IstioVersion
	5, // 4: meshmanager.IstioVersionAndFeatures.featureConfigs:type_name -> meshmanager.FeatureConfig
	1, // 5: meshmanager.MeshManager.ListIstioVersion:input_type -> meshmanager.ListIstioVersionRequest
	2, // 6: meshmanager.MeshManager.ListIstioVersion:output_type -> meshmanager.ListIstioVersionResponse
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_bcs_mesh_manager_proto_init() }
func file_bcs_mesh_manager_proto_init() {
	if File_bcs_mesh_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bcs_mesh_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebAnnotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIstioVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIstioVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IstioVersionAndFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IstioVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bcs_mesh_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bcs_mesh_manager_proto_goTypes,
		DependencyIndexes: file_bcs_mesh_manager_proto_depIdxs,
		MessageInfos:      file_bcs_mesh_manager_proto_msgTypes,
	}.Build()
	File_bcs_mesh_manager_proto = out.File
	file_bcs_mesh_manager_proto_rawDesc = nil
	file_bcs_mesh_manager_proto_goTypes = nil
	file_bcs_mesh_manager_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MeshManagerClient is the client API for MeshManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MeshManagerClient interface {
	// 获取当前开放的istio版本
	ListIstioVersion(ctx context.Context, in *ListIstioVersionRequest, opts ...grpc.CallOption) (*ListIstioVersionResponse, error)
}

type meshManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewMeshManagerClient(cc grpc.ClientConnInterface) MeshManagerClient {
	return &meshManagerClient{cc}
}

func (c *meshManagerClient) ListIstioVersion(ctx context.Context, in *ListIstioVersionRequest, opts ...grpc.CallOption) (*ListIstioVersionResponse, error) {
	out := new(ListIstioVersionResponse)
	err := c.cc.Invoke(ctx, "/meshmanager.MeshManager/ListIstioVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeshManagerServer is the server API for MeshManager service.
type MeshManagerServer interface {
	// 获取当前开放的istio版本
	ListIstioVersion(context.Context, *ListIstioVersionRequest) (*ListIstioVersionResponse, error)
}

// UnimplementedMeshManagerServer can be embedded to have forward compatible implementations.
type UnimplementedMeshManagerServer struct {
}

func (*UnimplementedMeshManagerServer) ListIstioVersion(context.Context, *ListIstioVersionRequest) (*ListIstioVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIstioVersion not implemented")
}

func RegisterMeshManagerServer(s *grpc.Server, srv MeshManagerServer) {
	s.RegisterService(&_MeshManager_serviceDesc, srv)
}

func _MeshManager_ListIstioVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIstioVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshManagerServer).ListIstioVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshmanager.MeshManager/ListIstioVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshManagerServer).ListIstioVersion(ctx, req.(*ListIstioVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MeshManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "meshmanager.MeshManager",
	HandlerType: (*MeshManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIstioVersion",
			Handler:    _MeshManager_ListIstioVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bcs-mesh-manager.proto",
}
