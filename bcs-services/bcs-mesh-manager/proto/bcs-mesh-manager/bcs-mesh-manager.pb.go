// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: bcs-mesh-manager.proto

package meshmanager

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// WebAnnotations 权限信息
type WebAnnotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Perms *_struct.Struct `protobuf:"bytes,1,opt,name=perms,proto3" json:"perms,omitempty"`
}

func (x *WebAnnotations) Reset() {
	*x = WebAnnotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebAnnotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebAnnotations) ProtoMessage() {}

func (x *WebAnnotations) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebAnnotations.ProtoReflect.Descriptor instead.
func (*WebAnnotations) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{0}
}

func (x *WebAnnotations) GetPerms() *_struct.Struct {
	if x != nil {
		return x.Perms
	}
	return nil
}

// ===== 版本管理相关消息 =====
// 获取当前开放的istio版本请求
type ListIstioVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListIstioVersionRequest) Reset() {
	*x = ListIstioVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIstioVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIstioVersionRequest) ProtoMessage() {}

func (x *ListIstioVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIstioVersionRequest.ProtoReflect.Descriptor instead.
func (*ListIstioVersionRequest) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{1}
}

// 获取当前开放的istio版本响应
type ListIstioVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32                   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string                   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID      string                   `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations          `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
	Data           *IstioVersionAndFeatures `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListIstioVersionResponse) Reset() {
	*x = ListIstioVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIstioVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIstioVersionResponse) ProtoMessage() {}

func (x *ListIstioVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIstioVersionResponse.ProtoReflect.Descriptor instead.
func (*ListIstioVersionResponse) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{2}
}

func (x *ListIstioVersionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListIstioVersionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListIstioVersionResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ListIstioVersionResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

func (x *ListIstioVersionResponse) GetData() *IstioVersionAndFeatures {
	if x != nil {
		return x.Data
	}
	return nil
}

// 获取istio版本列表响应
type IstioVersionAndFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IstioVersions  []*IstioVersion           `protobuf:"bytes,1,rep,name=istioVersions,proto3" json:"istioVersions,omitempty"`
	FeatureConfigs map[string]*FeatureConfig `protobuf:"bytes,2,rep,name=featureConfigs,proto3" json:"featureConfigs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IstioVersionAndFeatures) Reset() {
	*x = IstioVersionAndFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IstioVersionAndFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IstioVersionAndFeatures) ProtoMessage() {}

func (x *IstioVersionAndFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IstioVersionAndFeatures.ProtoReflect.Descriptor instead.
func (*IstioVersionAndFeatures) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{3}
}

func (x *IstioVersionAndFeatures) GetIstioVersions() []*IstioVersion {
	if x != nil {
		return x.IstioVersions
	}
	return nil
}

func (x *IstioVersionAndFeatures) GetFeatureConfigs() map[string]*FeatureConfig {
	if x != nil {
		return x.FeatureConfigs
	}
	return nil
}

// istio版本信息
type IstioVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                 // 版本名称
	Version      string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`           // 版本号
	ChartVersion string `protobuf:"bytes,3,opt,name=chartVersion,proto3" json:"chartVersion,omitempty"` // chart 版本
	KubeVersion  string `protobuf:"bytes,4,opt,name=kubeVersion,proto3" json:"kubeVersion,omitempty"`   // 支持的 kube 版本
}

func (x *IstioVersion) Reset() {
	*x = IstioVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IstioVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IstioVersion) ProtoMessage() {}

func (x *IstioVersion) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IstioVersion.ProtoReflect.Descriptor instead.
func (*IstioVersion) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{4}
}

func (x *IstioVersion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IstioVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *IstioVersion) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *IstioVersion) GetKubeVersion() string {
	if x != nil {
		return x.KubeVersion
	}
	return ""
}

// 功能特性配置
type FeatureConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                       // 特性名称
	Description     string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`         // 特性描述
	Value           string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`                     // 特性值
	DefaultValue    string   `protobuf:"bytes,4,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`       // 默认值
	AvailableValues []string `protobuf:"bytes,5,rep,name=availableValues,proto3" json:"availableValues,omitempty"` // 可选值
	SupportVersions []string `protobuf:"bytes,6,rep,name=supportVersions,proto3" json:"supportVersions,omitempty"` // 支持的版本
}

func (x *FeatureConfig) Reset() {
	*x = FeatureConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureConfig) ProtoMessage() {}

func (x *FeatureConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureConfig.ProtoReflect.Descriptor instead.
func (*FeatureConfig) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{5}
}

func (x *FeatureConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FeatureConfig) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *FeatureConfig) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *FeatureConfig) GetAvailableValues() []string {
	if x != nil {
		return x.AvailableValues
	}
	return nil
}

func (x *FeatureConfig) GetSupportVersions() []string {
	if x != nil {
		return x.SupportVersions
	}
	return nil
}

// ===== Mesh 管理相关消息 =====
// istio配置信息
type IstioRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeshID                *wrappers.StringValue `protobuf:"bytes,1,opt,name=meshID,proto3" json:"meshID,omitempty"`
	ProjectID             *wrappers.StringValue `protobuf:"bytes,2,opt,name=projectID,proto3" json:"projectID,omitempty"`                          // 项目ID
	ProjectCode           *wrappers.StringValue `protobuf:"bytes,3,opt,name=projectCode,proto3" json:"projectCode,omitempty"`                      // 项目编码
	Name                  *wrappers.StringValue `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                    // 网格名称
	Version               *wrappers.StringValue `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`                              // 使用的版本
	ControlPlaneMode      *wrappers.StringValue `protobuf:"bytes,6,opt,name=controlPlaneMode,proto3" json:"controlPlaneMode,omitempty"`            // 安装模式
	ClusterMode           *wrappers.StringValue `protobuf:"bytes,7,opt,name=clusterMode,proto3" json:"clusterMode,omitempty"`                      // 多集群集群模式
	Description           *wrappers.StringValue `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`                      // 描述
	PrimaryClusters       []string              `protobuf:"bytes,9,rep,name=primaryClusters,proto3" json:"primaryClusters,omitempty"`              // 主集群列表
	RemoteClusters        []string              `protobuf:"bytes,10,rep,name=remoteClusters,proto3" json:"remoteClusters,omitempty"`               // 远程集群列表
	DifferentNetwork      *wrappers.BoolValue   `protobuf:"bytes,11,opt,name=differentNetwork,proto3" json:"differentNetwork,omitempty"`           // 网络是否一致：关乎是否默认安装egress gateway
	SidecarResourceConfig *ResourceConfig       `protobuf:"bytes,12,opt,name=sidecarResourceConfig,proto3" json:"sidecarResourceConfig,omitempty"` // sidecar资源配置
	HighAvailability      *HighAvailability     `protobuf:"bytes,13,opt,name=highAvailability,proto3" json:"highAvailability,omitempty"`           // 高可用配置
	// 可观测性配置
	ObservabilityConfig *ObservabilityConfig      `protobuf:"bytes,14,opt,name=observabilityConfig,proto3" json:"observabilityConfig,omitempty"`
	FeatureConfigs      map[string]*FeatureConfig `protobuf:"bytes,15,rep,name=featureConfigs,proto3" json:"featureConfigs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 功能特性[跟随版本关联的特性]
}

func (x *IstioRequest) Reset() {
	*x = IstioRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IstioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IstioRequest) ProtoMessage() {}

func (x *IstioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IstioRequest.ProtoReflect.Descriptor instead.
func (*IstioRequest) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{6}
}

func (x *IstioRequest) GetMeshID() *wrappers.StringValue {
	if x != nil {
		return x.MeshID
	}
	return nil
}

func (x *IstioRequest) GetProjectID() *wrappers.StringValue {
	if x != nil {
		return x.ProjectID
	}
	return nil
}

func (x *IstioRequest) GetProjectCode() *wrappers.StringValue {
	if x != nil {
		return x.ProjectCode
	}
	return nil
}

func (x *IstioRequest) GetName() *wrappers.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *IstioRequest) GetVersion() *wrappers.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *IstioRequest) GetControlPlaneMode() *wrappers.StringValue {
	if x != nil {
		return x.ControlPlaneMode
	}
	return nil
}

func (x *IstioRequest) GetClusterMode() *wrappers.StringValue {
	if x != nil {
		return x.ClusterMode
	}
	return nil
}

func (x *IstioRequest) GetDescription() *wrappers.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *IstioRequest) GetPrimaryClusters() []string {
	if x != nil {
		return x.PrimaryClusters
	}
	return nil
}

func (x *IstioRequest) GetRemoteClusters() []string {
	if x != nil {
		return x.RemoteClusters
	}
	return nil
}

func (x *IstioRequest) GetDifferentNetwork() *wrappers.BoolValue {
	if x != nil {
		return x.DifferentNetwork
	}
	return nil
}

func (x *IstioRequest) GetSidecarResourceConfig() *ResourceConfig {
	if x != nil {
		return x.SidecarResourceConfig
	}
	return nil
}

func (x *IstioRequest) GetHighAvailability() *HighAvailability {
	if x != nil {
		return x.HighAvailability
	}
	return nil
}

func (x *IstioRequest) GetObservabilityConfig() *ObservabilityConfig {
	if x != nil {
		return x.ObservabilityConfig
	}
	return nil
}

func (x *IstioRequest) GetFeatureConfigs() map[string]*FeatureConfig {
	if x != nil {
		return x.FeatureConfigs
	}
	return nil
}

// 可观测性配置
type ObservabilityConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricsConfig      *MetricsConfig      `protobuf:"bytes,1,opt,name=metricsConfig,proto3" json:"metricsConfig,omitempty"`           // 指标采集配置
	LogCollectorConfig *LogCollectorConfig `protobuf:"bytes,2,opt,name=logCollectorConfig,proto3" json:"logCollectorConfig,omitempty"` // 日志采集配置
	TracingConfig      *TracingConfig      `protobuf:"bytes,3,opt,name=tracingConfig,proto3" json:"tracingConfig,omitempty"`           // 全量路追踪配置
}

func (x *ObservabilityConfig) Reset() {
	*x = ObservabilityConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservabilityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservabilityConfig) ProtoMessage() {}

func (x *ObservabilityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservabilityConfig.ProtoReflect.Descriptor instead.
func (*ObservabilityConfig) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{7}
}

func (x *ObservabilityConfig) GetMetricsConfig() *MetricsConfig {
	if x != nil {
		return x.MetricsConfig
	}
	return nil
}

func (x *ObservabilityConfig) GetLogCollectorConfig() *LogCollectorConfig {
	if x != nil {
		return x.LogCollectorConfig
	}
	return nil
}

func (x *ObservabilityConfig) GetTracingConfig() *TracingConfig {
	if x != nil {
		return x.TracingConfig
	}
	return nil
}

// 高可用配置，hpa，副本数设置等
type HighAvailability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoscaleEnabled                   *wrappers.BoolValue  `protobuf:"bytes,1,opt,name=autoscaleEnabled,proto3" json:"autoscaleEnabled,omitempty"`                                     // 是否开启hpa
	AutoscaleMin                       *wrappers.Int32Value `protobuf:"bytes,2,opt,name=autoscaleMin,proto3" json:"autoscaleMin,omitempty"`                                             // hpa最小副本数
	AutoscaleMax                       *wrappers.Int32Value `protobuf:"bytes,3,opt,name=autoscaleMax,proto3" json:"autoscaleMax,omitempty"`                                             // hpa最大副本数
	ReplicaCount                       *wrappers.Int32Value `protobuf:"bytes,4,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`                                             // 副本数
	TargetCPUAverageUtilizationPercent *wrappers.Int32Value `protobuf:"bytes,5,opt,name=targetCPUAverageUtilizationPercent,proto3" json:"targetCPUAverageUtilizationPercent,omitempty"` // 目标cpu平均使用率 0-100
	ResourceConfig                     *ResourceConfig      `protobuf:"bytes,6,opt,name=resourceConfig,proto3" json:"resourceConfig,omitempty"`                                         // resource配置
	DedicatedNode                      *DedicatedNode       `protobuf:"bytes,7,opt,name=dedicatedNode,proto3" json:"dedicatedNode,omitempty"`                                           // 专属节点（专用节点标签），默认会加上容忍
}

func (x *HighAvailability) Reset() {
	*x = HighAvailability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighAvailability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighAvailability) ProtoMessage() {}

func (x *HighAvailability) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighAvailability.ProtoReflect.Descriptor instead.
func (*HighAvailability) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{8}
}

func (x *HighAvailability) GetAutoscaleEnabled() *wrappers.BoolValue {
	if x != nil {
		return x.AutoscaleEnabled
	}
	return nil
}

func (x *HighAvailability) GetAutoscaleMin() *wrappers.Int32Value {
	if x != nil {
		return x.AutoscaleMin
	}
	return nil
}

func (x *HighAvailability) GetAutoscaleMax() *wrappers.Int32Value {
	if x != nil {
		return x.AutoscaleMax
	}
	return nil
}

func (x *HighAvailability) GetReplicaCount() *wrappers.Int32Value {
	if x != nil {
		return x.ReplicaCount
	}
	return nil
}

func (x *HighAvailability) GetTargetCPUAverageUtilizationPercent() *wrappers.Int32Value {
	if x != nil {
		return x.TargetCPUAverageUtilizationPercent
	}
	return nil
}

func (x *HighAvailability) GetResourceConfig() *ResourceConfig {
	if x != nil {
		return x.ResourceConfig
	}
	return nil
}

func (x *HighAvailability) GetDedicatedNode() *DedicatedNode {
	if x != nil {
		return x.DedicatedNode
	}
	return nil
}

// 专属调度标签
type DedicatedNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled    *wrappers.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`                                                                                               // 是否启用
	NodeLabels map[string]string   `protobuf:"bytes,2,rep,name=nodeLabels,proto3" json:"nodeLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 节点标签
}

func (x *DedicatedNode) Reset() {
	*x = DedicatedNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DedicatedNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DedicatedNode) ProtoMessage() {}

func (x *DedicatedNode) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DedicatedNode.ProtoReflect.Descriptor instead.
func (*DedicatedNode) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{9}
}

func (x *DedicatedNode) GetEnabled() *wrappers.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *DedicatedNode) GetNodeLabels() map[string]string {
	if x != nil {
		return x.NodeLabels
	}
	return nil
}

// resource配置
type ResourceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuRequest    *wrappers.StringValue `protobuf:"bytes,1,opt,name=cpuRequest,proto3" json:"cpuRequest,omitempty"`       // CPU请求
	CpuLimit      *wrappers.StringValue `protobuf:"bytes,2,opt,name=cpuLimit,proto3" json:"cpuLimit,omitempty"`           // CPU限制
	MemoryRequest *wrappers.StringValue `protobuf:"bytes,3,opt,name=memoryRequest,proto3" json:"memoryRequest,omitempty"` // 内存请求
	MemoryLimit   *wrappers.StringValue `protobuf:"bytes,4,opt,name=memoryLimit,proto3" json:"memoryLimit,omitempty"`     // 内存限制
}

func (x *ResourceConfig) Reset() {
	*x = ResourceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceConfig) ProtoMessage() {}

func (x *ResourceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceConfig.ProtoReflect.Descriptor instead.
func (*ResourceConfig) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{10}
}

func (x *ResourceConfig) GetCpuRequest() *wrappers.StringValue {
	if x != nil {
		return x.CpuRequest
	}
	return nil
}

func (x *ResourceConfig) GetCpuLimit() *wrappers.StringValue {
	if x != nil {
		return x.CpuLimit
	}
	return nil
}

func (x *ResourceConfig) GetMemoryRequest() *wrappers.StringValue {
	if x != nil {
		return x.MemoryRequest
	}
	return nil
}

func (x *ResourceConfig) GetMemoryLimit() *wrappers.StringValue {
	if x != nil {
		return x.MemoryLimit
	}
	return nil
}

// 日志采集配置
type LogCollectorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled           *wrappers.BoolValue   `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`                     // 是否启用
	AccessLogEncoding *wrappers.StringValue `protobuf:"bytes,2,opt,name=accessLogEncoding,proto3" json:"accessLogEncoding,omitempty"` // 日志编码 [text, json]
	AccessLogFormat   *wrappers.StringValue `protobuf:"bytes,3,opt,name=accessLogFormat,proto3" json:"accessLogFormat,omitempty"`     // 日志格式
}

func (x *LogCollectorConfig) Reset() {
	*x = LogCollectorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogCollectorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogCollectorConfig) ProtoMessage() {}

func (x *LogCollectorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogCollectorConfig.ProtoReflect.Descriptor instead.
func (*LogCollectorConfig) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{11}
}

func (x *LogCollectorConfig) GetEnabled() *wrappers.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *LogCollectorConfig) GetAccessLogEncoding() *wrappers.StringValue {
	if x != nil {
		return x.AccessLogEncoding
	}
	return nil
}

func (x *LogCollectorConfig) GetAccessLogFormat() *wrappers.StringValue {
	if x != nil {
		return x.AccessLogFormat
	}
	return nil
}

// tracing配置
type TracingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled              *wrappers.BoolValue   `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`                           // 是否启用
	TraceSamplingPercent *wrappers.Int32Value  `protobuf:"bytes,2,opt,name=traceSamplingPercent,proto3" json:"traceSamplingPercent,omitempty"` // 采样率,百分比
	Endpoint             *wrappers.StringValue `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`                         // 上报地址
	BkToken              *wrappers.StringValue `protobuf:"bytes,4,opt,name=bkToken,proto3" json:"bkToken,omitempty"`                           // 蓝鲸token
}

func (x *TracingConfig) Reset() {
	*x = TracingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingConfig) ProtoMessage() {}

func (x *TracingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingConfig.ProtoReflect.Descriptor instead.
func (*TracingConfig) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{12}
}

func (x *TracingConfig) GetEnabled() *wrappers.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *TracingConfig) GetTraceSamplingPercent() *wrappers.Int32Value {
	if x != nil {
		return x.TraceSamplingPercent
	}
	return nil
}

func (x *TracingConfig) GetEndpoint() *wrappers.StringValue {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *TracingConfig) GetBkToken() *wrappers.StringValue {
	if x != nil {
		return x.BkToken
	}
	return nil
}

// 指标采集配置
type MetricsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 控制面指标
	ControlPlaneMetricsEnabled *wrappers.BoolValue `protobuf:"bytes,1,opt,name=controlPlaneMetricsEnabled,proto3" json:"controlPlaneMetricsEnabled,omitempty"`
	// 数据面指标
	DataPlaneMetricsEnabled *wrappers.BoolValue `protobuf:"bytes,2,opt,name=dataPlaneMetricsEnabled,proto3" json:"dataPlaneMetricsEnabled,omitempty"`
}

func (x *MetricsConfig) Reset() {
	*x = MetricsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsConfig) ProtoMessage() {}

func (x *MetricsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsConfig.ProtoReflect.Descriptor instead.
func (*MetricsConfig) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{13}
}

func (x *MetricsConfig) GetControlPlaneMetricsEnabled() *wrappers.BoolValue {
	if x != nil {
		return x.ControlPlaneMetricsEnabled
	}
	return nil
}

func (x *MetricsConfig) GetDataPlaneMetricsEnabled() *wrappers.BoolValue {
	if x != nil {
		return x.DataPlaneMetricsEnabled
	}
	return nil
}

// 安装istio响应
type InstallIstioResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID      string          `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
	MeshID         string          `protobuf:"bytes,5,opt,name=meshID,proto3" json:"meshID,omitempty"`
}

func (x *InstallIstioResponse) Reset() {
	*x = InstallIstioResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallIstioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallIstioResponse) ProtoMessage() {}

func (x *InstallIstioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallIstioResponse.ProtoReflect.Descriptor instead.
func (*InstallIstioResponse) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{14}
}

func (x *InstallIstioResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *InstallIstioResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InstallIstioResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *InstallIstioResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

func (x *InstallIstioResponse) GetMeshID() string {
	if x != nil {
		return x.MeshID
	}
	return ""
}

// 获取istio列表请求
type ListIstioRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	MeshID      string `protobuf:"bytes,2,opt,name=meshID,proto3" json:"meshID,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status      string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Page        int32  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	PageSize    int32  `protobuf:"varint,6,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ListIstioRequest) Reset() {
	*x = ListIstioRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIstioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIstioRequest) ProtoMessage() {}

func (x *ListIstioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIstioRequest.ProtoReflect.Descriptor instead.
func (*ListIstioRequest) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{15}
}

func (x *ListIstioRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *ListIstioRequest) GetMeshID() string {
	if x != nil {
		return x.MeshID
	}
	return ""
}

func (x *ListIstioRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListIstioRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListIstioRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListIstioRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 获取istio列表响应
type ListIstioResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID      string          `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
	Data           *ListIstioData  `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListIstioResponse) Reset() {
	*x = ListIstioResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIstioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIstioResponse) ProtoMessage() {}

func (x *ListIstioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIstioResponse.ProtoReflect.Descriptor instead.
func (*ListIstioResponse) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{16}
}

func (x *ListIstioResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListIstioResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListIstioResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ListIstioResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

func (x *ListIstioResponse) GetData() *ListIstioData {
	if x != nil {
		return x.Data
	}
	return nil
}

// istio列表响应
type ListIstioData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*IstioListItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListIstioData) Reset() {
	*x = ListIstioData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIstioData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIstioData) ProtoMessage() {}

func (x *ListIstioData) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIstioData.ProtoReflect.Descriptor instead.
func (*ListIstioData) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{17}
}

func (x *ListIstioData) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListIstioData) GetItems() []*IstioListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// istio列表项
type IstioListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeshID        string `protobuf:"bytes,1,opt,name=meshID,proto3" json:"meshID,omitempty"`               // meshID
	Status        string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`               // 状态
	StatusMessage string `protobuf:"bytes,3,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"` // 状态消息
	NetworkID     string `protobuf:"bytes,4,opt,name=networkID,proto3" json:"networkID,omitempty"`         // 网络ID
	ChartVersion  string `protobuf:"bytes,5,opt,name=chartVersion,proto3" json:"chartVersion,omitempty"`   // chart版本
	CreateTime    int64  `protobuf:"varint,6,opt,name=createTime,proto3" json:"createTime,omitempty"`      // 创建时间
	UpdateTime    int64  `protobuf:"varint,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"`      // 更新时间
	CreateBy      string `protobuf:"bytes,8,opt,name=createBy,proto3" json:"createBy,omitempty"`           // 创建者
	UpdateBy      string `protobuf:"bytes,9,opt,name=updateBy,proto3" json:"updateBy,omitempty"`           // 更新者
	// 保持跟 IstioRequest 一致
	ProjectID             string            `protobuf:"bytes,10,opt,name=projectID,proto3" json:"projectID,omitempty"`                         // 项目ID
	ProjectCode           string            `protobuf:"bytes,11,opt,name=projectCode,proto3" json:"projectCode,omitempty"`                     // 项目编码
	Name                  string            `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`                                   // 名称
	Description           string            `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`                     // 描述
	Version               string            `protobuf:"bytes,14,opt,name=version,proto3" json:"version,omitempty"`                             // 使用的版本
	ControlPlaneMode      string            `protobuf:"bytes,15,opt,name=controlPlaneMode,proto3" json:"controlPlaneMode,omitempty"`           // 安装模式
	ClusterMode           string            `protobuf:"bytes,16,opt,name=clusterMode,proto3" json:"clusterMode,omitempty"`                     // 多集群集群模式
	PrimaryClusters       []string          `protobuf:"bytes,17,rep,name=primaryClusters,proto3" json:"primaryClusters,omitempty"`             // 主集群列表
	RemoteClusters        []string          `protobuf:"bytes,18,rep,name=remoteClusters,proto3" json:"remoteClusters,omitempty"`               // 远程集群列表
	DifferentNetwork      bool              `protobuf:"varint,19,opt,name=differentNetwork,proto3" json:"differentNetwork,omitempty"`          // 网络是否一致：关乎是否默认安装egress gateway
	SidecarResourceConfig *ResourceConfig   `protobuf:"bytes,20,opt,name=sidecarResourceConfig,proto3" json:"sidecarResourceConfig,omitempty"` // sidecar资源配置
	HighAvailability      *HighAvailability `protobuf:"bytes,21,opt,name=highAvailability,proto3" json:"highAvailability,omitempty"`           // 高可用配置
	// 可观测性配置
	ObservabilityConfig *ObservabilityConfig      `protobuf:"bytes,22,opt,name=observabilityConfig,proto3" json:"observabilityConfig,omitempty"`
	FeatureConfigs      map[string]*FeatureConfig `protobuf:"bytes,23,rep,name=featureConfigs,proto3" json:"featureConfigs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 功能特性[跟随版本关联的特性]
}

func (x *IstioListItem) Reset() {
	*x = IstioListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IstioListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IstioListItem) ProtoMessage() {}

func (x *IstioListItem) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IstioListItem.ProtoReflect.Descriptor instead.
func (*IstioListItem) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{18}
}

func (x *IstioListItem) GetMeshID() string {
	if x != nil {
		return x.MeshID
	}
	return ""
}

func (x *IstioListItem) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IstioListItem) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *IstioListItem) GetNetworkID() string {
	if x != nil {
		return x.NetworkID
	}
	return ""
}

func (x *IstioListItem) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *IstioListItem) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *IstioListItem) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *IstioListItem) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *IstioListItem) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *IstioListItem) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *IstioListItem) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *IstioListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IstioListItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IstioListItem) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *IstioListItem) GetControlPlaneMode() string {
	if x != nil {
		return x.ControlPlaneMode
	}
	return ""
}

func (x *IstioListItem) GetClusterMode() string {
	if x != nil {
		return x.ClusterMode
	}
	return ""
}

func (x *IstioListItem) GetPrimaryClusters() []string {
	if x != nil {
		return x.PrimaryClusters
	}
	return nil
}

func (x *IstioListItem) GetRemoteClusters() []string {
	if x != nil {
		return x.RemoteClusters
	}
	return nil
}

func (x *IstioListItem) GetDifferentNetwork() bool {
	if x != nil {
		return x.DifferentNetwork
	}
	return false
}

func (x *IstioListItem) GetSidecarResourceConfig() *ResourceConfig {
	if x != nil {
		return x.SidecarResourceConfig
	}
	return nil
}

func (x *IstioListItem) GetHighAvailability() *HighAvailability {
	if x != nil {
		return x.HighAvailability
	}
	return nil
}

func (x *IstioListItem) GetObservabilityConfig() *ObservabilityConfig {
	if x != nil {
		return x.ObservabilityConfig
	}
	return nil
}

func (x *IstioListItem) GetFeatureConfigs() map[string]*FeatureConfig {
	if x != nil {
		return x.FeatureConfigs
	}
	return nil
}

// 更新istio响应
type UpdateIstioResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID      string          `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *UpdateIstioResponse) Reset() {
	*x = UpdateIstioResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIstioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIstioResponse) ProtoMessage() {}

func (x *UpdateIstioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIstioResponse.ProtoReflect.Descriptor instead.
func (*UpdateIstioResponse) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateIstioResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateIstioResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateIstioResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *UpdateIstioResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

// 删除istio请求
type DeleteIstioRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeshID      string `protobuf:"bytes,1,opt,name=meshID,proto3" json:"meshID,omitempty"`
	ProjectCode string `protobuf:"bytes,2,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
}

func (x *DeleteIstioRequest) Reset() {
	*x = DeleteIstioRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIstioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIstioRequest) ProtoMessage() {}

func (x *DeleteIstioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIstioRequest.ProtoReflect.Descriptor instead.
func (*DeleteIstioRequest) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteIstioRequest) GetMeshID() string {
	if x != nil {
		return x.MeshID
	}
	return ""
}

func (x *DeleteIstioRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

// 删除istio响应
type DeleteIstioResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID      string          `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *DeleteIstioResponse) Reset() {
	*x = DeleteIstioResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIstioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIstioResponse) ProtoMessage() {}

func (x *DeleteIstioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIstioResponse.ProtoReflect.Descriptor instead.
func (*DeleteIstioResponse) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteIstioResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteIstioResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteIstioResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *DeleteIstioResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

// 获取istio详情请求
type GetIstioDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	MeshID      string `protobuf:"bytes,2,opt,name=meshID,proto3" json:"meshID,omitempty"`
}

func (x *GetIstioDetailRequest) Reset() {
	*x = GetIstioDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIstioDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIstioDetailRequest) ProtoMessage() {}

func (x *GetIstioDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIstioDetailRequest.ProtoReflect.Descriptor instead.
func (*GetIstioDetailRequest) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{22}
}

func (x *GetIstioDetailRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *GetIstioDetailRequest) GetMeshID() string {
	if x != nil {
		return x.MeshID
	}
	return ""
}

// 获取istio详情响应
type GetIstioDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID      string          `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
	Data           *IstioListItem  `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetIstioDetailResponse) Reset() {
	*x = GetIstioDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIstioDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIstioDetailResponse) ProtoMessage() {}

func (x *GetIstioDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIstioDetailResponse.ProtoReflect.Descriptor instead.
func (*GetIstioDetailResponse) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{23}
}

func (x *GetIstioDetailResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetIstioDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetIstioDetailResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *GetIstioDetailResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

func (x *GetIstioDetailResponse) GetData() *IstioListItem {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_bcs_mesh_manager_proto protoreflect.FileDescriptor

var file_bcs_mesh_manager_proto_rawDesc = []byte{
	0x0a, 0x16, 0x62, 0x63, 0x73, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x59, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x65,
	0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x32, 0x0c,
	0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x05, 0x70, 0x65,
	0x72, 0x6d, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf3,
	0x03, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x68, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6,
	0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65, 0x62,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe5, 0x93, 0x8d, 0xe5,
	0xba, 0x94, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x74,
	0x92, 0x41, 0x71, 0x0a, 0x6f, 0x2a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x1d, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x69, 0x73, 0x74, 0x69, 0x6f, 0xe7, 0x89, 0x88, 0xe6,
	0x9c, 0xac, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2,
	0x01, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xd2, 0x01, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xf4, 0x02, 0x0a, 0x17, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x66, 0x0a, 0x0d, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x0d, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x11, 0x69, 0x73, 0x74, 0x69, 0x6f, 0xe7, 0x89, 0x88,
	0xe6, 0x9c, 0xac, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x0d, 0x69, 0x73, 0x74, 0x69, 0x6f,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x0e, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2f, 0x92, 0x41, 0x2c,
	0x2a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x32, 0x1a, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x28, 0xe6,
	0xb3, 0xa8, 0xe6, 0x84, 0x8f, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x29, 0x52, 0x0e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x5d, 0x0a, 0x13,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x0c,
	0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xd3, 0x01, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb6, 0x08, 0x0a, 0x0c, 0x49, 0x73, 0x74, 0x69, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x12, 0x3a, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x46, 0x0a, 0x10, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x51, 0x0a, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x10, 0x68, 0x69,
	0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x10, 0x68, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x55, 0x0a, 0x0e, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x1a, 0x5d, 0x0a, 0x13, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xea, 0x01, 0x0a, 0x13, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x12, 0x6c, 0x6f, 0x67,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x0d, 0x74, 0x72,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x91, 0x04, 0x0a,
	0x10, 0x48, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x46, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x61, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x61, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61,
	0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x3f, 0x0a, 0x0c, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x22,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x50, 0x55, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x22, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x50, 0x55,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40,
	0x0a, 0x0d, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0d, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x22, 0xd0, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x8c, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x42,
	0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x4a, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x0f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x22, 0x88, 0x02, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x14, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x74, 0x72, 0x61, 0x63, 0x65, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x62, 0x6b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x62, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc1,
	0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x5a, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x17,
	0x64, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x64, 0x61, 0x74, 0x61, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0xb9, 0x03, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x73,
	0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x68, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6,
	0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65, 0x62,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x6d,
	0x65, 0x73, 0x68, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10,
	0x2a, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x32, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44,
	0x52, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x3a, 0x64, 0x92, 0x41, 0x61, 0x0a, 0x5f, 0x2a,
	0x14, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x11, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0x69, 0x73, 0x74,
	0x69, 0x6f, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2,
	0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfc,
	0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0x90, 0x4e, 0x20, 0x00, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x20,
	0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x3a, 0x30, 0x92, 0x41, 0x2d,
	0x0a, 0x2b, 0x2a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x17, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x69, 0x73, 0x74, 0x69,
	0x6f, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0xc4, 0x02,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x44, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x6d, 0x92, 0x41, 0x6a, 0x0a, 0x68, 0x2a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x1d, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x69, 0x73, 0x74, 0x69, 0x6f, 0xe7, 0xbd, 0x91, 0xe6,
	0xa0, 0xbc, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2,
	0x01, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xd2, 0x01, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x57, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69,
	0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xca, 0x08,
	0x0a, 0x0d, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x51, 0x0a, 0x15, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49,
	0x0a, 0x10, 0x68, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x10, 0x68, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x13, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x56, 0x0a,
	0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x5d, 0x0a, 0x13, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x3a, 0x24, 0x92, 0x41, 0x21, 0x0a, 0x1f, 0x2a, 0x0d, 0x49, 0x73, 0x74,
	0x69, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x32, 0x0e, 0x69, 0x73, 0x74, 0x69,
	0x6f, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe9, 0xa1, 0xb9, 0x22, 0x86, 0x02, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x44,
	0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x5d, 0x92, 0x41, 0x5a, 0x0a, 0x58, 0x2a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe5, 0x93,
	0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0xd2, 0x01, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73,
	0x74, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x65,
	0x73, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x2c, 0x92, 0x41, 0x29, 0x0a, 0x27, 0x2a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x11, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x69, 0x73, 0x74, 0x69, 0x6f,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0x86, 0x02, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x5d, 0x92, 0x41, 0x5a, 0x0a, 0x58, 0x2a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x12, 0xe5, 0x88,
	0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94,
	0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0xd2, 0x01, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xba, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27,
	0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d,
	0x65, 0x73, 0x68, 0x49, 0x44, 0x3a, 0x35, 0x92, 0x41, 0x32, 0x0a, 0x30, 0x2a, 0x15, 0x47, 0x65,
	0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x17, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x69, 0x73, 0x74, 0x69, 0x6f,
	0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0xc8, 0x02, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x6c, 0x92, 0x41, 0x69, 0x0a, 0x67,
	0x2a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x17, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0x69, 0x73, 0x74, 0x69, 0x6f, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0xe5, 0x93, 0x8d, 0xe5, 0xba,
	0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0xd2, 0x01, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0xd2, 0x01,
	0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x98, 0x06, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x68,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x8b, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x12, 0x22, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x49, 0x73, 0x74, 0x69, 0x6f, 0x12, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x6d, 0x65,
	0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73,
	0x68, 0x2f, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x3a,
	0x01, 0x2a, 0x12, 0x73, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x12,
	0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x69, 0x73, 0x74,
	0x69, 0x6f, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x12, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x1a, 0x23, 0x2f, 0x6d, 0x65,
	0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73,
	0x68, 0x2f, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2f, 0x7b, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x7d,
	0x3a, 0x01, 0x2a, 0x12, 0x7d, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x74,
	0x69, 0x6f, 0x12, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x2a, 0x23, 0x2f,
	0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x73, 0x68, 0x2f, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2f, 0x7b, 0x6d, 0x65, 0x73, 0x68, 0x49,
	0x44, 0x7d, 0x12, 0x8d, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x69, 0x73, 0x74,
	0x69, 0x6f, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f, 0x7b, 0x6d, 0x65, 0x73, 0x68, 0x49,
	0x44, 0x7d, 0x42, 0x59, 0x5a, 0x0e, 0x2e, 0x2f, 0x3b, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x92, 0x41, 0x46, 0x12, 0x1d, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x68, 0x20,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x20, 0x44, 0x6f, 0x63, 0x32,
	0x05, 0x30, 0x2e, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bcs_mesh_manager_proto_rawDescOnce sync.Once
	file_bcs_mesh_manager_proto_rawDescData = file_bcs_mesh_manager_proto_rawDesc
)

func file_bcs_mesh_manager_proto_rawDescGZIP() []byte {
	file_bcs_mesh_manager_proto_rawDescOnce.Do(func() {
		file_bcs_mesh_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_bcs_mesh_manager_proto_rawDescData)
	})
	return file_bcs_mesh_manager_proto_rawDescData
}

var file_bcs_mesh_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_bcs_mesh_manager_proto_goTypes = []interface{}{
	(*WebAnnotations)(nil),           // 0: meshmanager.WebAnnotations
	(*ListIstioVersionRequest)(nil),  // 1: meshmanager.ListIstioVersionRequest
	(*ListIstioVersionResponse)(nil), // 2: meshmanager.ListIstioVersionResponse
	(*IstioVersionAndFeatures)(nil),  // 3: meshmanager.IstioVersionAndFeatures
	(*IstioVersion)(nil),             // 4: meshmanager.IstioVersion
	(*FeatureConfig)(nil),            // 5: meshmanager.FeatureConfig
	(*IstioRequest)(nil),             // 6: meshmanager.IstioRequest
	(*ObservabilityConfig)(nil),      // 7: meshmanager.ObservabilityConfig
	(*HighAvailability)(nil),         // 8: meshmanager.HighAvailability
	(*DedicatedNode)(nil),            // 9: meshmanager.DedicatedNode
	(*ResourceConfig)(nil),           // 10: meshmanager.ResourceConfig
	(*LogCollectorConfig)(nil),       // 11: meshmanager.LogCollectorConfig
	(*TracingConfig)(nil),            // 12: meshmanager.TracingConfig
	(*MetricsConfig)(nil),            // 13: meshmanager.MetricsConfig
	(*InstallIstioResponse)(nil),     // 14: meshmanager.InstallIstioResponse
	(*ListIstioRequest)(nil),         // 15: meshmanager.ListIstioRequest
	(*ListIstioResponse)(nil),        // 16: meshmanager.ListIstioResponse
	(*ListIstioData)(nil),            // 17: meshmanager.ListIstioData
	(*IstioListItem)(nil),            // 18: meshmanager.IstioListItem
	(*UpdateIstioResponse)(nil),      // 19: meshmanager.UpdateIstioResponse
	(*DeleteIstioRequest)(nil),       // 20: meshmanager.DeleteIstioRequest
	(*DeleteIstioResponse)(nil),      // 21: meshmanager.DeleteIstioResponse
	(*GetIstioDetailRequest)(nil),    // 22: meshmanager.GetIstioDetailRequest
	(*GetIstioDetailResponse)(nil),   // 23: meshmanager.GetIstioDetailResponse
	nil,                              // 24: meshmanager.IstioVersionAndFeatures.FeatureConfigsEntry
	nil,                              // 25: meshmanager.IstioRequest.FeatureConfigsEntry
	nil,                              // 26: meshmanager.DedicatedNode.NodeLabelsEntry
	nil,                              // 27: meshmanager.IstioListItem.FeatureConfigsEntry
	(*_struct.Struct)(nil),           // 28: google.protobuf.Struct
	(*wrappers.StringValue)(nil),     // 29: google.protobuf.StringValue
	(*wrappers.BoolValue)(nil),       // 30: google.protobuf.BoolValue
	(*wrappers.Int32Value)(nil),      // 31: google.protobuf.Int32Value
}
var file_bcs_mesh_manager_proto_depIdxs = []int32{
	28, // 0: meshmanager.WebAnnotations.perms:type_name -> google.protobuf.Struct
	0,  // 1: meshmanager.ListIstioVersionResponse.web_annotations:type_name -> meshmanager.WebAnnotations
	3,  // 2: meshmanager.ListIstioVersionResponse.data:type_name -> meshmanager.IstioVersionAndFeatures
	4,  // 3: meshmanager.IstioVersionAndFeatures.istioVersions:type_name -> meshmanager.IstioVersion
	24, // 4: meshmanager.IstioVersionAndFeatures.featureConfigs:type_name -> meshmanager.IstioVersionAndFeatures.FeatureConfigsEntry
	29, // 5: meshmanager.IstioRequest.meshID:type_name -> google.protobuf.StringValue
	29, // 6: meshmanager.IstioRequest.projectID:type_name -> google.protobuf.StringValue
	29, // 7: meshmanager.IstioRequest.projectCode:type_name -> google.protobuf.StringValue
	29, // 8: meshmanager.IstioRequest.name:type_name -> google.protobuf.StringValue
	29, // 9: meshmanager.IstioRequest.version:type_name -> google.protobuf.StringValue
	29, // 10: meshmanager.IstioRequest.controlPlaneMode:type_name -> google.protobuf.StringValue
	29, // 11: meshmanager.IstioRequest.clusterMode:type_name -> google.protobuf.StringValue
	29, // 12: meshmanager.IstioRequest.description:type_name -> google.protobuf.StringValue
	30, // 13: meshmanager.IstioRequest.differentNetwork:type_name -> google.protobuf.BoolValue
	10, // 14: meshmanager.IstioRequest.sidecarResourceConfig:type_name -> meshmanager.ResourceConfig
	8,  // 15: meshmanager.IstioRequest.highAvailability:type_name -> meshmanager.HighAvailability
	7,  // 16: meshmanager.IstioRequest.observabilityConfig:type_name -> meshmanager.ObservabilityConfig
	25, // 17: meshmanager.IstioRequest.featureConfigs:type_name -> meshmanager.IstioRequest.FeatureConfigsEntry
	13, // 18: meshmanager.ObservabilityConfig.metricsConfig:type_name -> meshmanager.MetricsConfig
	11, // 19: meshmanager.ObservabilityConfig.logCollectorConfig:type_name -> meshmanager.LogCollectorConfig
	12, // 20: meshmanager.ObservabilityConfig.tracingConfig:type_name -> meshmanager.TracingConfig
	30, // 21: meshmanager.HighAvailability.autoscaleEnabled:type_name -> google.protobuf.BoolValue
	31, // 22: meshmanager.HighAvailability.autoscaleMin:type_name -> google.protobuf.Int32Value
	31, // 23: meshmanager.HighAvailability.autoscaleMax:type_name -> google.protobuf.Int32Value
	31, // 24: meshmanager.HighAvailability.replicaCount:type_name -> google.protobuf.Int32Value
	31, // 25: meshmanager.HighAvailability.targetCPUAverageUtilizationPercent:type_name -> google.protobuf.Int32Value
	10, // 26: meshmanager.HighAvailability.resourceConfig:type_name -> meshmanager.ResourceConfig
	9,  // 27: meshmanager.HighAvailability.dedicatedNode:type_name -> meshmanager.DedicatedNode
	30, // 28: meshmanager.DedicatedNode.enabled:type_name -> google.protobuf.BoolValue
	26, // 29: meshmanager.DedicatedNode.nodeLabels:type_name -> meshmanager.DedicatedNode.NodeLabelsEntry
	29, // 30: meshmanager.ResourceConfig.cpuRequest:type_name -> google.protobuf.StringValue
	29, // 31: meshmanager.ResourceConfig.cpuLimit:type_name -> google.protobuf.StringValue
	29, // 32: meshmanager.ResourceConfig.memoryRequest:type_name -> google.protobuf.StringValue
	29, // 33: meshmanager.ResourceConfig.memoryLimit:type_name -> google.protobuf.StringValue
	30, // 34: meshmanager.LogCollectorConfig.enabled:type_name -> google.protobuf.BoolValue
	29, // 35: meshmanager.LogCollectorConfig.accessLogEncoding:type_name -> google.protobuf.StringValue
	29, // 36: meshmanager.LogCollectorConfig.accessLogFormat:type_name -> google.protobuf.StringValue
	30, // 37: meshmanager.TracingConfig.enabled:type_name -> google.protobuf.BoolValue
	31, // 38: meshmanager.TracingConfig.traceSamplingPercent:type_name -> google.protobuf.Int32Value
	29, // 39: meshmanager.TracingConfig.endpoint:type_name -> google.protobuf.StringValue
	29, // 40: meshmanager.TracingConfig.bkToken:type_name -> google.protobuf.StringValue
	30, // 41: meshmanager.MetricsConfig.controlPlaneMetricsEnabled:type_name -> google.protobuf.BoolValue
	30, // 42: meshmanager.MetricsConfig.dataPlaneMetricsEnabled:type_name -> google.protobuf.BoolValue
	0,  // 43: meshmanager.InstallIstioResponse.web_annotations:type_name -> meshmanager.WebAnnotations
	0,  // 44: meshmanager.ListIstioResponse.web_annotations:type_name -> meshmanager.WebAnnotations
	17, // 45: meshmanager.ListIstioResponse.data:type_name -> meshmanager.ListIstioData
	18, // 46: meshmanager.ListIstioData.items:type_name -> meshmanager.IstioListItem
	10, // 47: meshmanager.IstioListItem.sidecarResourceConfig:type_name -> meshmanager.ResourceConfig
	8,  // 48: meshmanager.IstioListItem.highAvailability:type_name -> meshmanager.HighAvailability
	7,  // 49: meshmanager.IstioListItem.observabilityConfig:type_name -> meshmanager.ObservabilityConfig
	27, // 50: meshmanager.IstioListItem.featureConfigs:type_name -> meshmanager.IstioListItem.FeatureConfigsEntry
	0,  // 51: meshmanager.UpdateIstioResponse.web_annotations:type_name -> meshmanager.WebAnnotations
	0,  // 52: meshmanager.DeleteIstioResponse.web_annotations:type_name -> meshmanager.WebAnnotations
	0,  // 53: meshmanager.GetIstioDetailResponse.web_annotations:type_name -> meshmanager.WebAnnotations
	18, // 54: meshmanager.GetIstioDetailResponse.data:type_name -> meshmanager.IstioListItem
	5,  // 55: meshmanager.IstioVersionAndFeatures.FeatureConfigsEntry.value:type_name -> meshmanager.FeatureConfig
	5,  // 56: meshmanager.IstioRequest.FeatureConfigsEntry.value:type_name -> meshmanager.FeatureConfig
	5,  // 57: meshmanager.IstioListItem.FeatureConfigsEntry.value:type_name -> meshmanager.FeatureConfig
	1,  // 58: meshmanager.MeshManager.ListIstioVersion:input_type -> meshmanager.ListIstioVersionRequest
	6,  // 59: meshmanager.MeshManager.InstallIstio:input_type -> meshmanager.IstioRequest
	15, // 60: meshmanager.MeshManager.ListIstio:input_type -> meshmanager.ListIstioRequest
	6,  // 61: meshmanager.MeshManager.UpdateIstio:input_type -> meshmanager.IstioRequest
	20, // 62: meshmanager.MeshManager.DeleteIstio:input_type -> meshmanager.DeleteIstioRequest
	22, // 63: meshmanager.MeshManager.GetIstioDetail:input_type -> meshmanager.GetIstioDetailRequest
	2,  // 64: meshmanager.MeshManager.ListIstioVersion:output_type -> meshmanager.ListIstioVersionResponse
	14, // 65: meshmanager.MeshManager.InstallIstio:output_type -> meshmanager.InstallIstioResponse
	16, // 66: meshmanager.MeshManager.ListIstio:output_type -> meshmanager.ListIstioResponse
	19, // 67: meshmanager.MeshManager.UpdateIstio:output_type -> meshmanager.UpdateIstioResponse
	21, // 68: meshmanager.MeshManager.DeleteIstio:output_type -> meshmanager.DeleteIstioResponse
	23, // 69: meshmanager.MeshManager.GetIstioDetail:output_type -> meshmanager.GetIstioDetailResponse
	64, // [64:70] is the sub-list for method output_type
	58, // [58:64] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_bcs_mesh_manager_proto_init() }
func file_bcs_mesh_manager_proto_init() {
	if File_bcs_mesh_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bcs_mesh_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebAnnotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIstioVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIstioVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IstioVersionAndFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IstioVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IstioRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservabilityConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighAvailability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DedicatedNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCollectorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallIstioResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIstioRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIstioResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIstioData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IstioListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIstioResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIstioRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIstioResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIstioDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIstioDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bcs_mesh_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bcs_mesh_manager_proto_goTypes,
		DependencyIndexes: file_bcs_mesh_manager_proto_depIdxs,
		MessageInfos:      file_bcs_mesh_manager_proto_msgTypes,
	}.Build()
	File_bcs_mesh_manager_proto = out.File
	file_bcs_mesh_manager_proto_rawDesc = nil
	file_bcs_mesh_manager_proto_goTypes = nil
	file_bcs_mesh_manager_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MeshManagerClient is the client API for MeshManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MeshManagerClient interface {
	// ===== 版本管理相关 =====
	// 获取当前开放的istio版本
	ListIstioVersion(ctx context.Context, in *ListIstioVersionRequest, opts ...grpc.CallOption) (*ListIstioVersionResponse, error)
	// ===== Istio 相关 =====
	// 安装istio
	InstallIstio(ctx context.Context, in *IstioRequest, opts ...grpc.CallOption) (*InstallIstioResponse, error)
	// 获取istio列表
	ListIstio(ctx context.Context, in *ListIstioRequest, opts ...grpc.CallOption) (*ListIstioResponse, error)
	// 更新istio配置
	UpdateIstio(ctx context.Context, in *IstioRequest, opts ...grpc.CallOption) (*UpdateIstioResponse, error)
	// 删除istio
	DeleteIstio(ctx context.Context, in *DeleteIstioRequest, opts ...grpc.CallOption) (*DeleteIstioResponse, error)
	// 获取istio详情
	GetIstioDetail(ctx context.Context, in *GetIstioDetailRequest, opts ...grpc.CallOption) (*GetIstioDetailResponse, error)
}

type meshManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewMeshManagerClient(cc grpc.ClientConnInterface) MeshManagerClient {
	return &meshManagerClient{cc}
}

func (c *meshManagerClient) ListIstioVersion(ctx context.Context, in *ListIstioVersionRequest, opts ...grpc.CallOption) (*ListIstioVersionResponse, error) {
	out := new(ListIstioVersionResponse)
	err := c.cc.Invoke(ctx, "/meshmanager.MeshManager/ListIstioVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshManagerClient) InstallIstio(ctx context.Context, in *IstioRequest, opts ...grpc.CallOption) (*InstallIstioResponse, error) {
	out := new(InstallIstioResponse)
	err := c.cc.Invoke(ctx, "/meshmanager.MeshManager/InstallIstio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshManagerClient) ListIstio(ctx context.Context, in *ListIstioRequest, opts ...grpc.CallOption) (*ListIstioResponse, error) {
	out := new(ListIstioResponse)
	err := c.cc.Invoke(ctx, "/meshmanager.MeshManager/ListIstio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshManagerClient) UpdateIstio(ctx context.Context, in *IstioRequest, opts ...grpc.CallOption) (*UpdateIstioResponse, error) {
	out := new(UpdateIstioResponse)
	err := c.cc.Invoke(ctx, "/meshmanager.MeshManager/UpdateIstio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshManagerClient) DeleteIstio(ctx context.Context, in *DeleteIstioRequest, opts ...grpc.CallOption) (*DeleteIstioResponse, error) {
	out := new(DeleteIstioResponse)
	err := c.cc.Invoke(ctx, "/meshmanager.MeshManager/DeleteIstio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshManagerClient) GetIstioDetail(ctx context.Context, in *GetIstioDetailRequest, opts ...grpc.CallOption) (*GetIstioDetailResponse, error) {
	out := new(GetIstioDetailResponse)
	err := c.cc.Invoke(ctx, "/meshmanager.MeshManager/GetIstioDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeshManagerServer is the server API for MeshManager service.
type MeshManagerServer interface {
	// ===== 版本管理相关 =====
	// 获取当前开放的istio版本
	ListIstioVersion(context.Context, *ListIstioVersionRequest) (*ListIstioVersionResponse, error)
	// ===== Istio 相关 =====
	// 安装istio
	InstallIstio(context.Context, *IstioRequest) (*InstallIstioResponse, error)
	// 获取istio列表
	ListIstio(context.Context, *ListIstioRequest) (*ListIstioResponse, error)
	// 更新istio配置
	UpdateIstio(context.Context, *IstioRequest) (*UpdateIstioResponse, error)
	// 删除istio
	DeleteIstio(context.Context, *DeleteIstioRequest) (*DeleteIstioResponse, error)
	// 获取istio详情
	GetIstioDetail(context.Context, *GetIstioDetailRequest) (*GetIstioDetailResponse, error)
}

// UnimplementedMeshManagerServer can be embedded to have forward compatible implementations.
type UnimplementedMeshManagerServer struct {
}

func (*UnimplementedMeshManagerServer) ListIstioVersion(context.Context, *ListIstioVersionRequest) (*ListIstioVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIstioVersion not implemented")
}
func (*UnimplementedMeshManagerServer) InstallIstio(context.Context, *IstioRequest) (*InstallIstioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallIstio not implemented")
}
func (*UnimplementedMeshManagerServer) ListIstio(context.Context, *ListIstioRequest) (*ListIstioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIstio not implemented")
}
func (*UnimplementedMeshManagerServer) UpdateIstio(context.Context, *IstioRequest) (*UpdateIstioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIstio not implemented")
}
func (*UnimplementedMeshManagerServer) DeleteIstio(context.Context, *DeleteIstioRequest) (*DeleteIstioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIstio not implemented")
}
func (*UnimplementedMeshManagerServer) GetIstioDetail(context.Context, *GetIstioDetailRequest) (*GetIstioDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIstioDetail not implemented")
}

func RegisterMeshManagerServer(s *grpc.Server, srv MeshManagerServer) {
	s.RegisterService(&_MeshManager_serviceDesc, srv)
}

func _MeshManager_ListIstioVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIstioVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshManagerServer).ListIstioVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshmanager.MeshManager/ListIstioVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshManagerServer).ListIstioVersion(ctx, req.(*ListIstioVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshManager_InstallIstio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IstioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshManagerServer).InstallIstio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshmanager.MeshManager/InstallIstio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshManagerServer).InstallIstio(ctx, req.(*IstioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshManager_ListIstio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIstioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshManagerServer).ListIstio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshmanager.MeshManager/ListIstio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshManagerServer).ListIstio(ctx, req.(*ListIstioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshManager_UpdateIstio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IstioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshManagerServer).UpdateIstio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshmanager.MeshManager/UpdateIstio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshManagerServer).UpdateIstio(ctx, req.(*IstioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshManager_DeleteIstio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIstioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshManagerServer).DeleteIstio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshmanager.MeshManager/DeleteIstio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshManagerServer).DeleteIstio(ctx, req.(*DeleteIstioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshManager_GetIstioDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIstioDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshManagerServer).GetIstioDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshmanager.MeshManager/GetIstioDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshManagerServer).GetIstioDetail(ctx, req.(*GetIstioDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MeshManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "meshmanager.MeshManager",
	HandlerType: (*MeshManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIstioVersion",
			Handler:    _MeshManager_ListIstioVersion_Handler,
		},
		{
			MethodName: "InstallIstio",
			Handler:    _MeshManager_InstallIstio_Handler,
		},
		{
			MethodName: "ListIstio",
			Handler:    _MeshManager_ListIstio_Handler,
		},
		{
			MethodName: "UpdateIstio",
			Handler:    _MeshManager_UpdateIstio_Handler,
		},
		{
			MethodName: "DeleteIstio",
			Handler:    _MeshManager_DeleteIstio_Handler,
		},
		{
			MethodName: "GetIstioDetail",
			Handler:    _MeshManager_GetIstioDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bcs-mesh-manager.proto",
}
