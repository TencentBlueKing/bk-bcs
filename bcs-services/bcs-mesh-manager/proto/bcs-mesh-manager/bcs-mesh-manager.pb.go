// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: bcs-mesh-manager.proto

package meshmanager

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// NamespaceScopedAction 命名空间域资源操作类型
type NamespaceScopedAction int32

const (
	// 创建命名空间域资源
	NamespaceScopedAction_NAMESPACE_SCOPED_ACTION_CREATE NamespaceScopedAction = 0
	// 更新命名空间域资源
	NamespaceScopedAction_NAMESPACE_SCOPED_ACTION_UPDATE NamespaceScopedAction = 1
	// 查看命名空间域资源
	NamespaceScopedAction_NAMESPACE_SCOPED_ACTION_VIEW NamespaceScopedAction = 2
	// 删除命名空间域资源
	NamespaceScopedAction_NAMESPACE_SCOPED_ACTION_DELETE NamespaceScopedAction = 3
)

// Enum value maps for NamespaceScopedAction.
var (
	NamespaceScopedAction_name = map[int32]string{
		0: "NAMESPACE_SCOPED_ACTION_CREATE",
		1: "NAMESPACE_SCOPED_ACTION_UPDATE",
		2: "NAMESPACE_SCOPED_ACTION_VIEW",
		3: "NAMESPACE_SCOPED_ACTION_DELETE",
	}
	NamespaceScopedAction_value = map[string]int32{
		"NAMESPACE_SCOPED_ACTION_CREATE": 0,
		"NAMESPACE_SCOPED_ACTION_UPDATE": 1,
		"NAMESPACE_SCOPED_ACTION_VIEW":   2,
		"NAMESPACE_SCOPED_ACTION_DELETE": 3,
	}
)

func (x NamespaceScopedAction) Enum() *NamespaceScopedAction {
	p := new(NamespaceScopedAction)
	*p = x
	return p
}

func (x NamespaceScopedAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NamespaceScopedAction) Descriptor() protoreflect.EnumDescriptor {
	return file_bcs_mesh_manager_proto_enumTypes[0].Descriptor()
}

func (NamespaceScopedAction) Type() protoreflect.EnumType {
	return &file_bcs_mesh_manager_proto_enumTypes[0]
}

func (x NamespaceScopedAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NamespaceScopedAction.Descriptor instead.
func (NamespaceScopedAction) EnumDescriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{0}
}

// WebAnnotations 权限信息
type WebAnnotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Perms *_struct.Struct `protobuf:"bytes,1,opt,name=perms,proto3" json:"perms,omitempty"`
}

func (x *WebAnnotations) Reset() {
	*x = WebAnnotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebAnnotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebAnnotations) ProtoMessage() {}

func (x *WebAnnotations) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebAnnotations.ProtoReflect.Descriptor instead.
func (*WebAnnotations) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{0}
}

func (x *WebAnnotations) GetPerms() *_struct.Struct {
	if x != nil {
		return x.Perms
	}
	return nil
}

// 获取当前开放的istio版本请求
type ListIstioConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListIstioConfigRequest) Reset() {
	*x = ListIstioConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIstioConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIstioConfigRequest) ProtoMessage() {}

func (x *ListIstioConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIstioConfigRequest.ProtoReflect.Descriptor instead.
func (*ListIstioConfigRequest) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{1}
}

// 获取当前开放的istio版本响应
type ListIstioConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID      string           `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations  `protobuf:"bytes,4,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
	Data           *IstioConfigData `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListIstioConfigResponse) Reset() {
	*x = ListIstioConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIstioConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIstioConfigResponse) ProtoMessage() {}

func (x *ListIstioConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIstioConfigResponse.ProtoReflect.Descriptor instead.
func (*ListIstioConfigResponse) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{2}
}

func (x *ListIstioConfigResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListIstioConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListIstioConfigResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ListIstioConfigResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

func (x *ListIstioConfigResponse) GetData() *IstioConfigData {
	if x != nil {
		return x.Data
	}
	return nil
}

// istio版本和功能特性
type IstioConfigData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IstioVersions         []*IstioVersion           `protobuf:"bytes,1,rep,name=istioVersions,proto3" json:"istioVersions,omitempty"`
	SidecarResourceConfig *ResourceConfig           `protobuf:"bytes,20,opt,name=sidecarResourceConfig,proto3" json:"sidecarResourceConfig,omitempty"`
	HighAvailability      *HighAvailability         `protobuf:"bytes,21,opt,name=highAvailability,proto3" json:"highAvailability,omitempty"`
	ObservabilityConfig   *ObservabilityConfig      `protobuf:"bytes,22,opt,name=observabilityConfig,proto3" json:"observabilityConfig,omitempty"`
	FeatureConfigs        map[string]*FeatureConfig `protobuf:"bytes,2,rep,name=featureConfigs,proto3" json:"featureConfigs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IstioConfigData) Reset() {
	*x = IstioConfigData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IstioConfigData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IstioConfigData) ProtoMessage() {}

func (x *IstioConfigData) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IstioConfigData.ProtoReflect.Descriptor instead.
func (*IstioConfigData) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{3}
}

func (x *IstioConfigData) GetIstioVersions() []*IstioVersion {
	if x != nil {
		return x.IstioVersions
	}
	return nil
}

func (x *IstioConfigData) GetSidecarResourceConfig() *ResourceConfig {
	if x != nil {
		return x.SidecarResourceConfig
	}
	return nil
}

func (x *IstioConfigData) GetHighAvailability() *HighAvailability {
	if x != nil {
		return x.HighAvailability
	}
	return nil
}

func (x *IstioConfigData) GetObservabilityConfig() *ObservabilityConfig {
	if x != nil {
		return x.ObservabilityConfig
	}
	return nil
}

func (x *IstioConfigData) GetFeatureConfigs() map[string]*FeatureConfig {
	if x != nil {
		return x.FeatureConfigs
	}
	return nil
}

// istio版本信息
type IstioVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version      string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	ChartVersion string `protobuf:"bytes,3,opt,name=chartVersion,proto3" json:"chartVersion,omitempty"`
	KubeVersion  string `protobuf:"bytes,4,opt,name=kubeVersion,proto3" json:"kubeVersion,omitempty"`
}

func (x *IstioVersion) Reset() {
	*x = IstioVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IstioVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IstioVersion) ProtoMessage() {}

func (x *IstioVersion) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IstioVersion.ProtoReflect.Descriptor instead.
func (*IstioVersion) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{4}
}

func (x *IstioVersion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IstioVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *IstioVersion) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *IstioVersion) GetKubeVersion() string {
	if x != nil {
		return x.KubeVersion
	}
	return ""
}

// 功能特性配置
type FeatureConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description     string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Value           string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	DefaultValue    string   `protobuf:"bytes,4,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
	AvailableValues []string `protobuf:"bytes,5,rep,name=availableValues,proto3" json:"availableValues,omitempty"`
	SupportVersions []string `protobuf:"bytes,6,rep,name=supportVersions,proto3" json:"supportVersions,omitempty"`
}

func (x *FeatureConfig) Reset() {
	*x = FeatureConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureConfig) ProtoMessage() {}

func (x *FeatureConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureConfig.ProtoReflect.Descriptor instead.
func (*FeatureConfig) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{5}
}

func (x *FeatureConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FeatureConfig) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *FeatureConfig) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *FeatureConfig) GetAvailableValues() []string {
	if x != nil {
		return x.AvailableValues
	}
	return nil
}

func (x *FeatureConfig) GetSupportVersions() []string {
	if x != nil {
		return x.SupportVersions
	}
	return nil
}

// istio配置信息
type IstioInstallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode           string                    `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	Name                  *wrappers.StringValue     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version               *wrappers.StringValue     `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	ControlPlaneMode      *wrappers.StringValue     `protobuf:"bytes,4,opt,name=controlPlaneMode,proto3" json:"controlPlaneMode,omitempty"`
	ClusterMode           *wrappers.StringValue     `protobuf:"bytes,5,opt,name=clusterMode,proto3" json:"clusterMode,omitempty"`
	Description           *wrappers.StringValue     `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	PrimaryClusters       []string                  `protobuf:"bytes,7,rep,name=primaryClusters,proto3" json:"primaryClusters,omitempty"`
	RemoteClusters        []*RemoteCluster          `protobuf:"bytes,8,rep,name=remoteClusters,proto3" json:"remoteClusters,omitempty"`
	DifferentNetwork      *wrappers.BoolValue       `protobuf:"bytes,9,opt,name=differentNetwork,proto3" json:"differentNetwork,omitempty"`
	SidecarResourceConfig *ResourceConfig           `protobuf:"bytes,10,opt,name=sidecarResourceConfig,proto3" json:"sidecarResourceConfig,omitempty"`
	HighAvailability      *HighAvailability         `protobuf:"bytes,11,opt,name=highAvailability,proto3" json:"highAvailability,omitempty"`
	ObservabilityConfig   *ObservabilityConfig      `protobuf:"bytes,12,opt,name=observabilityConfig,proto3" json:"observabilityConfig,omitempty"`
	FeatureConfigs        map[string]*FeatureConfig `protobuf:"bytes,13,rep,name=featureConfigs,proto3" json:"featureConfigs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MultiClusterEnabled   *wrappers.BoolValue       `protobuf:"bytes,14,opt,name=multiClusterEnabled,proto3" json:"multiClusterEnabled,omitempty"`
	ClbID                 *wrappers.StringValue     `protobuf:"bytes,15,opt,name=clbID,proto3" json:"clbID,omitempty"`
	Revision              *wrappers.StringValue     `protobuf:"bytes,16,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *IstioInstallRequest) Reset() {
	*x = IstioInstallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IstioInstallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IstioInstallRequest) ProtoMessage() {}

func (x *IstioInstallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IstioInstallRequest.ProtoReflect.Descriptor instead.
func (*IstioInstallRequest) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{6}
}

func (x *IstioInstallRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *IstioInstallRequest) GetName() *wrappers.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *IstioInstallRequest) GetVersion() *wrappers.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *IstioInstallRequest) GetControlPlaneMode() *wrappers.StringValue {
	if x != nil {
		return x.ControlPlaneMode
	}
	return nil
}

func (x *IstioInstallRequest) GetClusterMode() *wrappers.StringValue {
	if x != nil {
		return x.ClusterMode
	}
	return nil
}

func (x *IstioInstallRequest) GetDescription() *wrappers.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *IstioInstallRequest) GetPrimaryClusters() []string {
	if x != nil {
		return x.PrimaryClusters
	}
	return nil
}

func (x *IstioInstallRequest) GetRemoteClusters() []*RemoteCluster {
	if x != nil {
		return x.RemoteClusters
	}
	return nil
}

func (x *IstioInstallRequest) GetDifferentNetwork() *wrappers.BoolValue {
	if x != nil {
		return x.DifferentNetwork
	}
	return nil
}

func (x *IstioInstallRequest) GetSidecarResourceConfig() *ResourceConfig {
	if x != nil {
		return x.SidecarResourceConfig
	}
	return nil
}

func (x *IstioInstallRequest) GetHighAvailability() *HighAvailability {
	if x != nil {
		return x.HighAvailability
	}
	return nil
}

func (x *IstioInstallRequest) GetObservabilityConfig() *ObservabilityConfig {
	if x != nil {
		return x.ObservabilityConfig
	}
	return nil
}

func (x *IstioInstallRequest) GetFeatureConfigs() map[string]*FeatureConfig {
	if x != nil {
		return x.FeatureConfigs
	}
	return nil
}

func (x *IstioInstallRequest) GetMultiClusterEnabled() *wrappers.BoolValue {
	if x != nil {
		return x.MultiClusterEnabled
	}
	return nil
}

func (x *IstioInstallRequest) GetClbID() *wrappers.StringValue {
	if x != nil {
		return x.ClbID
	}
	return nil
}

func (x *IstioInstallRequest) GetRevision() *wrappers.StringValue {
	if x != nil {
		return x.Revision
	}
	return nil
}

type IstioUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeshID                string                    `protobuf:"bytes,1,opt,name=meshID,proto3" json:"meshID,omitempty"`
	ProjectCode           string                    `protobuf:"bytes,2,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	Name                  *wrappers.StringValue     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ControlPlaneMode      *wrappers.StringValue     `protobuf:"bytes,4,opt,name=controlPlaneMode,proto3" json:"controlPlaneMode,omitempty"`
	ClusterMode           *wrappers.StringValue     `protobuf:"bytes,5,opt,name=clusterMode,proto3" json:"clusterMode,omitempty"`
	Description           *wrappers.StringValue     `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	RemoteClusters        []*RemoteCluster          `protobuf:"bytes,7,rep,name=remoteClusters,proto3" json:"remoteClusters,omitempty"`
	DifferentNetwork      *wrappers.BoolValue       `protobuf:"bytes,8,opt,name=differentNetwork,proto3" json:"differentNetwork,omitempty"`
	SidecarResourceConfig *ResourceConfig           `protobuf:"bytes,9,opt,name=sidecarResourceConfig,proto3" json:"sidecarResourceConfig,omitempty"`
	HighAvailability      *HighAvailability         `protobuf:"bytes,10,opt,name=highAvailability,proto3" json:"highAvailability,omitempty"`
	ObservabilityConfig   *ObservabilityConfig      `protobuf:"bytes,11,opt,name=observabilityConfig,proto3" json:"observabilityConfig,omitempty"`
	FeatureConfigs        map[string]*FeatureConfig `protobuf:"bytes,12,rep,name=featureConfigs,proto3" json:"featureConfigs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MultiClusterEnabled   *wrappers.BoolValue       `protobuf:"bytes,13,opt,name=multiClusterEnabled,proto3" json:"multiClusterEnabled,omitempty"`
	ClbID                 *wrappers.StringValue     `protobuf:"bytes,14,opt,name=clbID,proto3" json:"clbID,omitempty"`
	Revision              *wrappers.StringValue     `protobuf:"bytes,15,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *IstioUpdateRequest) Reset() {
	*x = IstioUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IstioUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IstioUpdateRequest) ProtoMessage() {}

func (x *IstioUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IstioUpdateRequest.ProtoReflect.Descriptor instead.
func (*IstioUpdateRequest) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{7}
}

func (x *IstioUpdateRequest) GetMeshID() string {
	if x != nil {
		return x.MeshID
	}
	return ""
}

func (x *IstioUpdateRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *IstioUpdateRequest) GetName() *wrappers.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *IstioUpdateRequest) GetControlPlaneMode() *wrappers.StringValue {
	if x != nil {
		return x.ControlPlaneMode
	}
	return nil
}

func (x *IstioUpdateRequest) GetClusterMode() *wrappers.StringValue {
	if x != nil {
		return x.ClusterMode
	}
	return nil
}

func (x *IstioUpdateRequest) GetDescription() *wrappers.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *IstioUpdateRequest) GetRemoteClusters() []*RemoteCluster {
	if x != nil {
		return x.RemoteClusters
	}
	return nil
}

func (x *IstioUpdateRequest) GetDifferentNetwork() *wrappers.BoolValue {
	if x != nil {
		return x.DifferentNetwork
	}
	return nil
}

func (x *IstioUpdateRequest) GetSidecarResourceConfig() *ResourceConfig {
	if x != nil {
		return x.SidecarResourceConfig
	}
	return nil
}

func (x *IstioUpdateRequest) GetHighAvailability() *HighAvailability {
	if x != nil {
		return x.HighAvailability
	}
	return nil
}

func (x *IstioUpdateRequest) GetObservabilityConfig() *ObservabilityConfig {
	if x != nil {
		return x.ObservabilityConfig
	}
	return nil
}

func (x *IstioUpdateRequest) GetFeatureConfigs() map[string]*FeatureConfig {
	if x != nil {
		return x.FeatureConfigs
	}
	return nil
}

func (x *IstioUpdateRequest) GetMultiClusterEnabled() *wrappers.BoolValue {
	if x != nil {
		return x.MultiClusterEnabled
	}
	return nil
}

func (x *IstioUpdateRequest) GetClbID() *wrappers.StringValue {
	if x != nil {
		return x.ClbID
	}
	return nil
}

func (x *IstioUpdateRequest) GetRevision() *wrappers.StringValue {
	if x != nil {
		return x.Revision
	}
	return nil
}

// 可观测性配置
type ObservabilityConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricsConfig      *MetricsConfig      `protobuf:"bytes,1,opt,name=metricsConfig,proto3" json:"metricsConfig,omitempty"`
	LogCollectorConfig *LogCollectorConfig `protobuf:"bytes,2,opt,name=logCollectorConfig,proto3" json:"logCollectorConfig,omitempty"`
	TracingConfig      *TracingConfig      `protobuf:"bytes,3,opt,name=tracingConfig,proto3" json:"tracingConfig,omitempty"`
}

func (x *ObservabilityConfig) Reset() {
	*x = ObservabilityConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservabilityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservabilityConfig) ProtoMessage() {}

func (x *ObservabilityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservabilityConfig.ProtoReflect.Descriptor instead.
func (*ObservabilityConfig) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{8}
}

func (x *ObservabilityConfig) GetMetricsConfig() *MetricsConfig {
	if x != nil {
		return x.MetricsConfig
	}
	return nil
}

func (x *ObservabilityConfig) GetLogCollectorConfig() *LogCollectorConfig {
	if x != nil {
		return x.LogCollectorConfig
	}
	return nil
}

func (x *ObservabilityConfig) GetTracingConfig() *TracingConfig {
	if x != nil {
		return x.TracingConfig
	}
	return nil
}

// 高可用配置，hpa，副本数设置等
type HighAvailability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoscaleEnabled                   *wrappers.BoolValue  `protobuf:"bytes,1,opt,name=autoscaleEnabled,proto3" json:"autoscaleEnabled,omitempty"`
	AutoscaleMin                       *wrappers.Int32Value `protobuf:"bytes,2,opt,name=autoscaleMin,proto3" json:"autoscaleMin,omitempty"`
	AutoscaleMax                       *wrappers.Int32Value `protobuf:"bytes,3,opt,name=autoscaleMax,proto3" json:"autoscaleMax,omitempty"`
	ReplicaCount                       *wrappers.Int32Value `protobuf:"bytes,4,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`
	TargetCPUAverageUtilizationPercent *wrappers.Int32Value `protobuf:"bytes,5,opt,name=targetCPUAverageUtilizationPercent,proto3" json:"targetCPUAverageUtilizationPercent,omitempty"`
	ResourceConfig                     *ResourceConfig      `protobuf:"bytes,6,opt,name=resourceConfig,proto3" json:"resourceConfig,omitempty"`
	DedicatedNode                      *DedicatedNode       `protobuf:"bytes,7,opt,name=dedicatedNode,proto3" json:"dedicatedNode,omitempty"`
}

func (x *HighAvailability) Reset() {
	*x = HighAvailability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighAvailability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighAvailability) ProtoMessage() {}

func (x *HighAvailability) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighAvailability.ProtoReflect.Descriptor instead.
func (*HighAvailability) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{9}
}

func (x *HighAvailability) GetAutoscaleEnabled() *wrappers.BoolValue {
	if x != nil {
		return x.AutoscaleEnabled
	}
	return nil
}

func (x *HighAvailability) GetAutoscaleMin() *wrappers.Int32Value {
	if x != nil {
		return x.AutoscaleMin
	}
	return nil
}

func (x *HighAvailability) GetAutoscaleMax() *wrappers.Int32Value {
	if x != nil {
		return x.AutoscaleMax
	}
	return nil
}

func (x *HighAvailability) GetReplicaCount() *wrappers.Int32Value {
	if x != nil {
		return x.ReplicaCount
	}
	return nil
}

func (x *HighAvailability) GetTargetCPUAverageUtilizationPercent() *wrappers.Int32Value {
	if x != nil {
		return x.TargetCPUAverageUtilizationPercent
	}
	return nil
}

func (x *HighAvailability) GetResourceConfig() *ResourceConfig {
	if x != nil {
		return x.ResourceConfig
	}
	return nil
}

func (x *HighAvailability) GetDedicatedNode() *DedicatedNode {
	if x != nil {
		return x.DedicatedNode
	}
	return nil
}

// 专属调度标签
type DedicatedNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled    *wrappers.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	NodeLabels map[string]string   `protobuf:"bytes,2,rep,name=nodeLabels,proto3" json:"nodeLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DedicatedNode) Reset() {
	*x = DedicatedNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DedicatedNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DedicatedNode) ProtoMessage() {}

func (x *DedicatedNode) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DedicatedNode.ProtoReflect.Descriptor instead.
func (*DedicatedNode) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{10}
}

func (x *DedicatedNode) GetEnabled() *wrappers.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *DedicatedNode) GetNodeLabels() map[string]string {
	if x != nil {
		return x.NodeLabels
	}
	return nil
}

// resource配置
type ResourceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuRequest    *wrappers.StringValue `protobuf:"bytes,1,opt,name=cpuRequest,proto3" json:"cpuRequest,omitempty"`
	CpuLimit      *wrappers.StringValue `protobuf:"bytes,2,opt,name=cpuLimit,proto3" json:"cpuLimit,omitempty"`
	MemoryRequest *wrappers.StringValue `protobuf:"bytes,3,opt,name=memoryRequest,proto3" json:"memoryRequest,omitempty"`
	MemoryLimit   *wrappers.StringValue `protobuf:"bytes,4,opt,name=memoryLimit,proto3" json:"memoryLimit,omitempty"`
}

func (x *ResourceConfig) Reset() {
	*x = ResourceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceConfig) ProtoMessage() {}

func (x *ResourceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceConfig.ProtoReflect.Descriptor instead.
func (*ResourceConfig) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{11}
}

func (x *ResourceConfig) GetCpuRequest() *wrappers.StringValue {
	if x != nil {
		return x.CpuRequest
	}
	return nil
}

func (x *ResourceConfig) GetCpuLimit() *wrappers.StringValue {
	if x != nil {
		return x.CpuLimit
	}
	return nil
}

func (x *ResourceConfig) GetMemoryRequest() *wrappers.StringValue {
	if x != nil {
		return x.MemoryRequest
	}
	return nil
}

func (x *ResourceConfig) GetMemoryLimit() *wrappers.StringValue {
	if x != nil {
		return x.MemoryLimit
	}
	return nil
}

// 日志采集配置
type LogCollectorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled           *wrappers.BoolValue   `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	AccessLogEncoding *wrappers.StringValue `protobuf:"bytes,2,opt,name=accessLogEncoding,proto3" json:"accessLogEncoding,omitempty"`
	AccessLogFormat   *wrappers.StringValue `protobuf:"bytes,3,opt,name=accessLogFormat,proto3" json:"accessLogFormat,omitempty"`
}

func (x *LogCollectorConfig) Reset() {
	*x = LogCollectorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogCollectorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogCollectorConfig) ProtoMessage() {}

func (x *LogCollectorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogCollectorConfig.ProtoReflect.Descriptor instead.
func (*LogCollectorConfig) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{12}
}

func (x *LogCollectorConfig) GetEnabled() *wrappers.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *LogCollectorConfig) GetAccessLogEncoding() *wrappers.StringValue {
	if x != nil {
		return x.AccessLogEncoding
	}
	return nil
}

func (x *LogCollectorConfig) GetAccessLogFormat() *wrappers.StringValue {
	if x != nil {
		return x.AccessLogFormat
	}
	return nil
}

// tracing配置
type TracingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled              *wrappers.BoolValue   `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	TraceSamplingPercent *wrappers.Int32Value  `protobuf:"bytes,2,opt,name=traceSamplingPercent,proto3" json:"traceSamplingPercent,omitempty"`
	Endpoint             *wrappers.StringValue `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	BkToken              *wrappers.StringValue `protobuf:"bytes,4,opt,name=bkToken,proto3" json:"bkToken,omitempty"`
}

func (x *TracingConfig) Reset() {
	*x = TracingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingConfig) ProtoMessage() {}

func (x *TracingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingConfig.ProtoReflect.Descriptor instead.
func (*TracingConfig) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{13}
}

func (x *TracingConfig) GetEnabled() *wrappers.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *TracingConfig) GetTraceSamplingPercent() *wrappers.Int32Value {
	if x != nil {
		return x.TraceSamplingPercent
	}
	return nil
}

func (x *TracingConfig) GetEndpoint() *wrappers.StringValue {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *TracingConfig) GetBkToken() *wrappers.StringValue {
	if x != nil {
		return x.BkToken
	}
	return nil
}

// 指标采集配置
type MetricsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricsEnabled             *wrappers.BoolValue `protobuf:"bytes,1,opt,name=metricsEnabled,proto3" json:"metricsEnabled,omitempty"`
	ControlPlaneMetricsEnabled *wrappers.BoolValue `protobuf:"bytes,2,opt,name=controlPlaneMetricsEnabled,proto3" json:"controlPlaneMetricsEnabled,omitempty"`
	DataPlaneMetricsEnabled    *wrappers.BoolValue `protobuf:"bytes,3,opt,name=dataPlaneMetricsEnabled,proto3" json:"dataPlaneMetricsEnabled,omitempty"`
}

func (x *MetricsConfig) Reset() {
	*x = MetricsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsConfig) ProtoMessage() {}

func (x *MetricsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsConfig.ProtoReflect.Descriptor instead.
func (*MetricsConfig) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{14}
}

func (x *MetricsConfig) GetMetricsEnabled() *wrappers.BoolValue {
	if x != nil {
		return x.MetricsEnabled
	}
	return nil
}

func (x *MetricsConfig) GetControlPlaneMetricsEnabled() *wrappers.BoolValue {
	if x != nil {
		return x.ControlPlaneMetricsEnabled
	}
	return nil
}

func (x *MetricsConfig) GetDataPlaneMetricsEnabled() *wrappers.BoolValue {
	if x != nil {
		return x.DataPlaneMetricsEnabled
	}
	return nil
}

// 从集群信息
type RemoteCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID   string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ClusterName string `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Region      string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	JoinTime    int64  `protobuf:"varint,4,opt,name=joinTime,proto3" json:"joinTime,omitempty"`
	Status      string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RemoteCluster) Reset() {
	*x = RemoteCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteCluster) ProtoMessage() {}

func (x *RemoteCluster) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteCluster.ProtoReflect.Descriptor instead.
func (*RemoteCluster) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{15}
}

func (x *RemoteCluster) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *RemoteCluster) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *RemoteCluster) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RemoteCluster) GetJoinTime() int64 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *RemoteCluster) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// 安装istio响应
type InstallIstioResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID      string          `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,4,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
	MeshID         string          `protobuf:"bytes,5,opt,name=meshID,proto3" json:"meshID,omitempty"`
}

func (x *InstallIstioResponse) Reset() {
	*x = InstallIstioResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallIstioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallIstioResponse) ProtoMessage() {}

func (x *InstallIstioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallIstioResponse.ProtoReflect.Descriptor instead.
func (*InstallIstioResponse) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{16}
}

func (x *InstallIstioResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *InstallIstioResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InstallIstioResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *InstallIstioResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

func (x *InstallIstioResponse) GetMeshID() string {
	if x != nil {
		return x.MeshID
	}
	return ""
}

// 获取istio列表请求
type ListIstioRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	MeshID      string `protobuf:"bytes,2,opt,name=meshID,proto3" json:"meshID,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status      string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Version     string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	ClusterID   string `protobuf:"bytes,6,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Page        int32  `protobuf:"varint,7,opt,name=page,proto3" json:"page,omitempty"`
	PageSize    int32  `protobuf:"varint,8,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ListIstioRequest) Reset() {
	*x = ListIstioRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIstioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIstioRequest) ProtoMessage() {}

func (x *ListIstioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIstioRequest.ProtoReflect.Descriptor instead.
func (*ListIstioRequest) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{17}
}

func (x *ListIstioRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *ListIstioRequest) GetMeshID() string {
	if x != nil {
		return x.MeshID
	}
	return ""
}

func (x *ListIstioRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListIstioRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListIstioRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ListIstioRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ListIstioRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListIstioRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 获取istio列表响应
type ListIstioResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                      // 返回错误码
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                 // 返回错误信息
	RequestID      string          `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`             // 请求ID
	WebAnnotations *WebAnnotations `protobuf:"bytes,4,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"` // 权限信息
	Data           *ListIstioData  `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`                       // 响应数据
}

func (x *ListIstioResponse) Reset() {
	*x = ListIstioResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIstioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIstioResponse) ProtoMessage() {}

func (x *ListIstioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIstioResponse.ProtoReflect.Descriptor instead.
func (*ListIstioResponse) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{18}
}

func (x *ListIstioResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListIstioResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListIstioResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ListIstioResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

func (x *ListIstioResponse) GetData() *ListIstioData {
	if x != nil {
		return x.Data
	}
	return nil
}

// istio列表数据
type ListIstioData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*IstioListItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListIstioData) Reset() {
	*x = ListIstioData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIstioData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIstioData) ProtoMessage() {}

func (x *ListIstioData) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIstioData.ProtoReflect.Descriptor instead.
func (*ListIstioData) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{19}
}

func (x *ListIstioData) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListIstioData) GetItems() []*IstioListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// istio列表项
type IstioListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 系统字段
	MeshID          string           `protobuf:"bytes,1,opt,name=meshID,proto3" json:"meshID,omitempty"`
	Status          string           `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	StatusMessage   string           `protobuf:"bytes,3,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
	ChartVersion    string           `protobuf:"bytes,4,opt,name=chartVersion,proto3" json:"chartVersion,omitempty"`
	CreateTime      int64            `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	ProjectCode     string           `protobuf:"bytes,6,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	Name            string           `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Version         string           `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	PrimaryClusters []string         `protobuf:"bytes,9,rep,name=primaryClusters,proto3" json:"primaryClusters,omitempty"`
	RemoteClusters  []*RemoteCluster `protobuf:"bytes,10,rep,name=remoteClusters,proto3" json:"remoteClusters,omitempty"`
	MonitoringLink  string           `protobuf:"bytes,11,opt,name=monitoringLink,proto3" json:"monitoringLink,omitempty"`
}

func (x *IstioListItem) Reset() {
	*x = IstioListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IstioListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IstioListItem) ProtoMessage() {}

func (x *IstioListItem) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IstioListItem.ProtoReflect.Descriptor instead.
func (*IstioListItem) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{20}
}

func (x *IstioListItem) GetMeshID() string {
	if x != nil {
		return x.MeshID
	}
	return ""
}

func (x *IstioListItem) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IstioListItem) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *IstioListItem) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *IstioListItem) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *IstioListItem) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *IstioListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IstioListItem) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *IstioListItem) GetPrimaryClusters() []string {
	if x != nil {
		return x.PrimaryClusters
	}
	return nil
}

func (x *IstioListItem) GetRemoteClusters() []*RemoteCluster {
	if x != nil {
		return x.RemoteClusters
	}
	return nil
}

func (x *IstioListItem) GetMonitoringLink() string {
	if x != nil {
		return x.MonitoringLink
	}
	return ""
}

// istio详情信息
type IstioDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 系统字段
	MeshID                string                    `protobuf:"bytes,1,opt,name=meshID,proto3" json:"meshID,omitempty"`
	Status                string                    `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	StatusMessage         string                    `protobuf:"bytes,3,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
	NetworkID             string                    `protobuf:"bytes,4,opt,name=networkID,proto3" json:"networkID,omitempty"`
	ChartVersion          string                    `protobuf:"bytes,5,opt,name=chartVersion,proto3" json:"chartVersion,omitempty"`
	CreateTime            int64                     `protobuf:"varint,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime            int64                     `protobuf:"varint,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	CreateBy              string                    `protobuf:"bytes,8,opt,name=createBy,proto3" json:"createBy,omitempty"`
	UpdateBy              string                    `protobuf:"bytes,9,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	ProjectCode           string                    `protobuf:"bytes,10,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	Name                  string                    `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Description           string                    `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	Version               string                    `protobuf:"bytes,13,opt,name=version,proto3" json:"version,omitempty"`
	ControlPlaneMode      string                    `protobuf:"bytes,14,opt,name=controlPlaneMode,proto3" json:"controlPlaneMode,omitempty"`
	ClusterMode           string                    `protobuf:"bytes,15,opt,name=clusterMode,proto3" json:"clusterMode,omitempty"`
	PrimaryClusters       []string                  `protobuf:"bytes,16,rep,name=primaryClusters,proto3" json:"primaryClusters,omitempty"`
	RemoteClusters        []*RemoteCluster          `protobuf:"bytes,17,rep,name=remoteClusters,proto3" json:"remoteClusters,omitempty"`
	DifferentNetwork      bool                      `protobuf:"varint,18,opt,name=differentNetwork,proto3" json:"differentNetwork,omitempty"`
	SidecarResourceConfig *ResourceConfig           `protobuf:"bytes,19,opt,name=sidecarResourceConfig,proto3" json:"sidecarResourceConfig,omitempty"`
	HighAvailability      *HighAvailability         `protobuf:"bytes,20,opt,name=highAvailability,proto3" json:"highAvailability,omitempty"`
	ObservabilityConfig   *ObservabilityConfig      `protobuf:"bytes,21,opt,name=observabilityConfig,proto3" json:"observabilityConfig,omitempty"`
	FeatureConfigs        map[string]*FeatureConfig `protobuf:"bytes,22,rep,name=featureConfigs,proto3" json:"featureConfigs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MultiClusterEnabled   *wrappers.BoolValue       `protobuf:"bytes,24,opt,name=multiClusterEnabled,proto3" json:"multiClusterEnabled,omitempty"`
	ClbID                 *wrappers.StringValue     `protobuf:"bytes,25,opt,name=clbID,proto3" json:"clbID,omitempty"`
	Revision              string                    `protobuf:"bytes,26,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *IstioDetailInfo) Reset() {
	*x = IstioDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IstioDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IstioDetailInfo) ProtoMessage() {}

func (x *IstioDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IstioDetailInfo.ProtoReflect.Descriptor instead.
func (*IstioDetailInfo) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{21}
}

func (x *IstioDetailInfo) GetMeshID() string {
	if x != nil {
		return x.MeshID
	}
	return ""
}

func (x *IstioDetailInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IstioDetailInfo) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *IstioDetailInfo) GetNetworkID() string {
	if x != nil {
		return x.NetworkID
	}
	return ""
}

func (x *IstioDetailInfo) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *IstioDetailInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *IstioDetailInfo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *IstioDetailInfo) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *IstioDetailInfo) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *IstioDetailInfo) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *IstioDetailInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IstioDetailInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IstioDetailInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *IstioDetailInfo) GetControlPlaneMode() string {
	if x != nil {
		return x.ControlPlaneMode
	}
	return ""
}

func (x *IstioDetailInfo) GetClusterMode() string {
	if x != nil {
		return x.ClusterMode
	}
	return ""
}

func (x *IstioDetailInfo) GetPrimaryClusters() []string {
	if x != nil {
		return x.PrimaryClusters
	}
	return nil
}

func (x *IstioDetailInfo) GetRemoteClusters() []*RemoteCluster {
	if x != nil {
		return x.RemoteClusters
	}
	return nil
}

func (x *IstioDetailInfo) GetDifferentNetwork() bool {
	if x != nil {
		return x.DifferentNetwork
	}
	return false
}

func (x *IstioDetailInfo) GetSidecarResourceConfig() *ResourceConfig {
	if x != nil {
		return x.SidecarResourceConfig
	}
	return nil
}

func (x *IstioDetailInfo) GetHighAvailability() *HighAvailability {
	if x != nil {
		return x.HighAvailability
	}
	return nil
}

func (x *IstioDetailInfo) GetObservabilityConfig() *ObservabilityConfig {
	if x != nil {
		return x.ObservabilityConfig
	}
	return nil
}

func (x *IstioDetailInfo) GetFeatureConfigs() map[string]*FeatureConfig {
	if x != nil {
		return x.FeatureConfigs
	}
	return nil
}

func (x *IstioDetailInfo) GetMultiClusterEnabled() *wrappers.BoolValue {
	if x != nil {
		return x.MultiClusterEnabled
	}
	return nil
}

func (x *IstioDetailInfo) GetClbID() *wrappers.StringValue {
	if x != nil {
		return x.ClbID
	}
	return nil
}

func (x *IstioDetailInfo) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

// 更新istio响应
type UpdateIstioResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                      // 返回错误码
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                 // 返回错误信息
	RequestID      string          `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`             // 请求ID
	WebAnnotations *WebAnnotations `protobuf:"bytes,4,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"` // 权限信息
}

func (x *UpdateIstioResponse) Reset() {
	*x = UpdateIstioResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIstioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIstioResponse) ProtoMessage() {}

func (x *UpdateIstioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIstioResponse.ProtoReflect.Descriptor instead.
func (*UpdateIstioResponse) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateIstioResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateIstioResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateIstioResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *UpdateIstioResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

// 删除istio请求
type DeleteIstioRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeshID      string `protobuf:"bytes,1,opt,name=meshID,proto3" json:"meshID,omitempty"`
	ProjectCode string `protobuf:"bytes,2,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
}

func (x *DeleteIstioRequest) Reset() {
	*x = DeleteIstioRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIstioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIstioRequest) ProtoMessage() {}

func (x *DeleteIstioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIstioRequest.ProtoReflect.Descriptor instead.
func (*DeleteIstioRequest) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteIstioRequest) GetMeshID() string {
	if x != nil {
		return x.MeshID
	}
	return ""
}

func (x *DeleteIstioRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

// 删除istio响应
type DeleteIstioResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                      // 返回错误码
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                 // 返回错误信息
	RequestID      string          `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`             // 请求ID
	WebAnnotations *WebAnnotations `protobuf:"bytes,4,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"` // 权限信息
}

func (x *DeleteIstioResponse) Reset() {
	*x = DeleteIstioResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIstioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIstioResponse) ProtoMessage() {}

func (x *DeleteIstioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIstioResponse.ProtoReflect.Descriptor instead.
func (*DeleteIstioResponse) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteIstioResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteIstioResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteIstioResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *DeleteIstioResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

// 获取istio详情请求
type GetIstioDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	MeshID      string `protobuf:"bytes,2,opt,name=meshID,proto3" json:"meshID,omitempty"`
}

func (x *GetIstioDetailRequest) Reset() {
	*x = GetIstioDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIstioDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIstioDetailRequest) ProtoMessage() {}

func (x *GetIstioDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIstioDetailRequest.ProtoReflect.Descriptor instead.
func (*GetIstioDetailRequest) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{25}
}

func (x *GetIstioDetailRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *GetIstioDetailRequest) GetMeshID() string {
	if x != nil {
		return x.MeshID
	}
	return ""
}

// 获取istio详情响应
type GetIstioDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                      // 返回错误码
	Message        string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                 // 返回错误信息
	RequestID      string           `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`             // 请求ID
	WebAnnotations *WebAnnotations  `protobuf:"bytes,4,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"` // 权限信息
	Data           *IstioDetailInfo `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`                       // 详情数据
}

func (x *GetIstioDetailResponse) Reset() {
	*x = GetIstioDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIstioDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIstioDetailResponse) ProtoMessage() {}

func (x *GetIstioDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIstioDetailResponse.ProtoReflect.Descriptor instead.
func (*GetIstioDetailResponse) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{26}
}

func (x *GetIstioDetailResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetIstioDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetIstioDetailResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *GetIstioDetailResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

func (x *GetIstioDetailResponse) GetData() *IstioDetailInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// 获取项目下的集群信息请求
type GetClusterInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
}

func (x *GetClusterInfoRequest) Reset() {
	*x = GetClusterInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterInfoRequest) ProtoMessage() {}

func (x *GetClusterInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterInfoRequest.ProtoReflect.Descriptor instead.
func (*GetClusterInfoRequest) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{27}
}

func (x *GetClusterInfoRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

// 获取项目下的集群信息响应
type GetClusterInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`          // 返回错误码
	Message   string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`     // 返回错误信息
	RequestID string           `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"` // 请求ID
	Data      *ClusterInfoData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`           // 响应数据
}

func (x *GetClusterInfoResponse) Reset() {
	*x = GetClusterInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterInfoResponse) ProtoMessage() {}

func (x *GetClusterInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterInfoResponse.ProtoReflect.Descriptor instead.
func (*GetClusterInfoResponse) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{28}
}

func (x *GetClusterInfoResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetClusterInfoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetClusterInfoResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *GetClusterInfoResponse) GetData() *ClusterInfoData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 集群信息数据
type ClusterInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters []*ClusterInfo `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *ClusterInfoData) Reset() {
	*x = ClusterInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfoData) ProtoMessage() {}

func (x *ClusterInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfoData.ProtoReflect.Descriptor instead.
func (*ClusterInfoData) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{29}
}

func (x *ClusterInfoData) GetClusters() []*ClusterInfo {
	if x != nil {
		return x.Clusters
	}
	return nil
}

// 集群信息
type ClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID   string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ClusterName string `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	ClusterType string `protobuf:"bytes,3,opt,name=clusterType,proto3" json:"clusterType,omitempty"`
	IsShared    bool   `protobuf:"varint,4,opt,name=isShared,proto3" json:"isShared,omitempty"`
	IsInstalled bool   `protobuf:"varint,5,opt,name=isInstalled,proto3" json:"isInstalled,omitempty"`
	Status      string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Version     string `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	Region      string `protobuf:"bytes,8,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *ClusterInfo) Reset() {
	*x = ClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfo) ProtoMessage() {}

func (x *ClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfo.ProtoReflect.Descriptor instead.
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{30}
}

func (x *ClusterInfo) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ClusterInfo) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ClusterInfo) GetClusterType() string {
	if x != nil {
		return x.ClusterType
	}
	return ""
}

func (x *ClusterInfo) GetIsShared() bool {
	if x != nil {
		return x.IsShared
	}
	return false
}

func (x *ClusterInfo) GetIsInstalled() bool {
	if x != nil {
		return x.IsInstalled
	}
	return false
}

func (x *ClusterInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ClusterInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ClusterInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

var File_bcs_mesh_manager_proto protoreflect.FileDescriptor

var file_bcs_mesh_manager_proto_rawDesc = []byte{
	0x0a, 0x16, 0x62, 0x63, 0x73, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x59, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x65,
	0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x32, 0x0c,
	0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x05, 0x70, 0x65,
	0x72, 0x6d, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xea, 0x03,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83,
	0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x0c, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x73, 0x92, 0x41, 0x70, 0x0a, 0x6e, 0x2a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1d, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x69, 0x73, 0x74,
	0x69, 0x6f, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe5, 0x93,
	0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0xd2, 0x01, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdf, 0x05, 0x0a, 0x0f, 0x49,
	0x73, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x66,
	0x0a, 0x0d, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x0d, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x32, 0x11, 0x69, 0x73, 0x74, 0x69, 0x6f, 0xe7, 0x89, 0x88, 0xe6, 0x9c,
	0xac, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x0d, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32,
	0x13, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x85,
	0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x71, 0x0a, 0x10, 0x68,
	0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x10, 0x68, 0x69, 0x67, 0x68, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x32, 0x0f, 0xe9, 0xab, 0x98,
	0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x10, 0x68, 0x69,
	0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x80,
	0x01, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2c,
	0x92, 0x41, 0x29, 0x2a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x12, 0xe5, 0x8f, 0xaf, 0xe8, 0xa7, 0x82,
	0xe6, 0xb5, 0x8b, 0xe6, 0x80, 0xa7, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x13, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x89, 0x01, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2f, 0x92, 0x41,
	0x2c, 0x2a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x32, 0x1a, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x28,
	0xe6, 0xb3, 0xa8, 0xe6, 0x84, 0x8f, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x29, 0x52, 0x0e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x5d, 0x0a,
	0x13, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x02, 0x0a,
	0x0c, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19,
	0x2a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0e, 0x69, 0x73, 0x74, 0x69, 0x6f,
	0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe5, 0x8f, 0xb7, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0c, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x11, 0xe5, 0xaf, 0xb9,
	0xe5, 0xba, 0x94, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x0c,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0b,
	0x6b, 0x75, 0x62, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x2a, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x32, 0x28, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe7, 0x9a, 0x84, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xef, 0xbc,
	0x8c, 0x73, 0x65, 0x6d, 0x76, 0x65, 0x72, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0x52, 0x0b, 0x6b,
	0x75, 0x62, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x03, 0x0a, 0x0d, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x32, 0x0c, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x09, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0xe5, 0x80,
	0xbc, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0x92, 0x41, 0x19, 0x2a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x32, 0x09, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x80, 0xbc, 0x52, 0x0c, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x32, 0x09, 0xe5, 0x8f, 0xaf, 0xe9, 0x80,
	0x89, 0xe5, 0x80, 0xbc, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2a,
	0x92, 0x41, 0x27, 0x2a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x32, 0x14, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe7, 0x9a, 0x84, 0x69,
	0x73, 0x74, 0x69, 0x6f, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xcc, 0x10, 0x0a, 0x13,
	0x49, 0x73, 0x74, 0x69, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe7, 0xbd,
	0x91, 0xe6, 0xa0, 0xbc, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x63, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x2b, 0x92, 0x41, 0x28, 0x2a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x1d, 0xe4,
	0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xef, 0xbc,
	0x8c, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0x20, 0x31, 0x2e, 0x31, 0x38, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xb4, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6a,
	0x92, 0x41, 0x67, 0x2a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x32, 0x53, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe6, 0xa8, 0xa1,
	0xe5, 0xbc, 0x8f, 0x5b, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0xef,
	0xbc, 0x9a, 0xe7, 0x8b, 0xac, 0xe7, 0xab, 0x8b, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0xe9, 0x9d,
	0xa2, 0xef, 0xbc, 0x88, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xef, 0xbc, 0x89, 0xef, 0xbc, 0x9b,
	0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0xef, 0xbc, 0x9a, 0xe6, 0x89, 0x98, 0xe7, 0xae, 0xa1,
	0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0xe9, 0x9d, 0xa2, 0x5d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0xaf, 0x01, 0x0a,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x6f, 0x92, 0x41, 0x6c, 0x2a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x32, 0x5d, 0xe5, 0xa4, 0x9a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x5b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0xef, 0xbc, 0x9a, 0xe4, 0xb8, 0xbb, 0xe4, 0xbb, 0x8e,
	0xe6, 0x9e, 0xb6, 0xe6, 0x9e, 0x84, 0xef, 0xbc, 0x88, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xef,
	0xbc, 0x89, 0xef, 0xbc, 0x9b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0xef, 0xbc, 0x9a, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xbb, 0xe6, 0x9e, 0xb6, 0xe6, 0x9e, 0x84,
	0x5d, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5e,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x32, 0x0c, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf,
	0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63,
	0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x36, 0x2a, 0x0f, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x32, 0x23, 0xe4,
	0xb8, 0xbb, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc,
	0x8c, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x42, 0x43, 0x53, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0x49, 0x44, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x44, 0x92, 0x41, 0x41, 0x2a, 0x0e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x32, 0x2f, 0xe8,
	0xbf, 0x9c, 0xe7, 0xa8, 0x8b, 0x2f, 0xe4, 0xbb, 0x8e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x2c, 0xe5, 0xa4, 0x9a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6,
	0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0x8b, 0xe5, 0xa1, 0xab, 0xe5, 0x86, 0x99, 0x52, 0x0e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0xe2,
	0x01, 0x0a, 0x10, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x99, 0x01, 0x92, 0x41, 0x95, 0x01, 0x2a, 0x10, 0x64, 0x69,
	0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x32, 0x80,
	0x01, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xb7, 0xb2,
	0xe6, 0x89, 0x93, 0xe9, 0x80, 0x9a, 0xef, 0xbc, 0x9a, 0xe5, 0x85, 0xb3, 0xe4, 0xb9, 0x8e, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0xae, 0x89, 0xe8, 0xa3,
	0x85, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0xef,
	0xbc, 0x8c, 0x74, 0x72, 0x75, 0x65, 0xef, 0xbc, 0x9a, 0xe5, 0xb7, 0xb2, 0xe6, 0x89, 0x93, 0xe9,
	0x80, 0x9a, 0xef, 0xbc, 0x88, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xef, 0xbc, 0x89, 0xef, 0xbc,
	0x8c, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xef, 0xbc, 0x9a, 0xe6, 0x9c, 0xaa, 0xe6, 0x89, 0x93, 0xe9,
	0x80, 0x9a, 0xef, 0xbc, 0x8c, 0xe6, 0x9a, 0x82, 0xe4, 0xb8, 0x8d, 0xe6, 0x94, 0xaf, 0xe6, 0x8c,
	0x81, 0x52, 0x10, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x13, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x85, 0x8d, 0xe7, 0xbd,
	0xae, 0x52, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x71, 0x0a, 0x10, 0x68, 0x69, 0x67, 0x68,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x48, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x10, 0x68, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x32, 0x0f, 0xe9, 0xab, 0x98, 0xe5, 0x8f, 0xaf,
	0xe7, 0x94, 0xa8, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x10, 0x68, 0x69, 0x67, 0x68, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x13,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2c, 0x92, 0x41, 0x29,
	0x2a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x12, 0xe5, 0x8f, 0xaf, 0xe8, 0xa7, 0x82, 0xe6, 0xb5, 0x8b,
	0xe6, 0x80, 0xa7, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x9c,
	0x01, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x3e, 0x92,
	0x41, 0x3b, 0x2a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x32, 0x29, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7,
	0x5b, 0xe8, 0xb7, 0x9f, 0xe9, 0x9a, 0x8f, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe5, 0x85, 0xb3,
	0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0x5d, 0x52, 0x0e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x7d, 0x0a,
	0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x13, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x32, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe5, 0xa4,
	0x9a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x52, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x05,
	0x63, 0x6c, 0x62, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x05,
	0x63, 0x6c, 0x62, 0x49, 0x44, 0x32, 0x14, 0xe4, 0xb8, 0x9c, 0xe8, 0xa5, 0xbf, 0xe5, 0x90, 0x91,
	0xe7, 0xbd, 0x91, 0xe5, 0x85, 0xb3, 0x63, 0x6c, 0x62, 0x49, 0x44, 0x52, 0x05, 0x63, 0x6c, 0x62,
	0x49, 0x44, 0x12, 0x57, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x32, 0x0e, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x20, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x5d, 0x0a, 0x13, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaf, 0x0f, 0x0a, 0x12, 0x49,
	0x73, 0x74, 0x69, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x32, 0x08,
	0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0x49, 0x44, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44,
	0x12, 0x40, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7,
	0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe7, 0xbd, 0x91, 0xe6, 0xa0,
	0xbc, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xb4, 0x01,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6a, 0x92, 0x41, 0x67, 0x2a, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x32, 0x53, 0xe5,
	0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x5b, 0x69, 0x6e, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0xef, 0xbc, 0x9a, 0xe7, 0x8b, 0xac, 0xe7, 0xab, 0x8b,
	0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0xe9, 0x9d, 0xa2, 0xef, 0xbc, 0x88, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0xef, 0xbc, 0x89, 0xef, 0xbc, 0x9b, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0xef,
	0xbc, 0x9a, 0xe6, 0x89, 0x98, 0xe7, 0xae, 0xa1, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0xe9, 0x9d,
	0xa2, 0x5d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x92, 0x41, 0x6c, 0x2a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x32, 0x5d, 0xe5, 0xa4, 0x9a, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc,
	0x8f, 0x5b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0xef,
	0xbc, 0x9a, 0xe4, 0xb8, 0xbb, 0xe4, 0xbb, 0x8e, 0xe6, 0x9e, 0xb6, 0xe6, 0x9e, 0x84, 0xef, 0xbc,
	0x88, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xef, 0xbc, 0x89, 0xef, 0xbc, 0x9b, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0xef, 0xbc, 0x9a, 0xe5, 0xa4, 0x9a, 0xe4,
	0xb8, 0xbb, 0xe6, 0x9e, 0xb6, 0xe6, 0x9e, 0x84, 0x5d, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x0c, 0xe6, 0x96, 0x87,
	0xe5, 0xad, 0x97, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x88, 0x01, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x44, 0x92, 0x41, 0x41,
	0x2a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x32, 0x2f, 0xe8, 0xbf, 0x9c, 0xe7, 0xa8, 0x8b, 0x2f, 0xe4, 0xbb, 0x8e, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x2c, 0xe5, 0xa4, 0x9a, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe4, 0xb8, 0x8b, 0xe5, 0xa1, 0xab, 0xe5, 0x86,
	0x99, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x12, 0xe2, 0x01, 0x0a, 0x10, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x99, 0x01, 0x92, 0x41, 0x95, 0x01, 0x2a,
	0x10, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x32, 0x80, 0x01, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe5, 0xb7, 0xb2, 0xe6, 0x89, 0x93, 0xe9, 0x80, 0x9a, 0xef, 0xbc, 0x9a, 0xe5, 0x85, 0xb3, 0xe4,
	0xb9, 0x8e, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0xae,
	0x89, 0xe8, 0xa3, 0x85, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0xef, 0xbc, 0x8c, 0x74, 0x72, 0x75, 0x65, 0xef, 0xbc, 0x9a, 0xe5, 0xb7, 0xb2, 0xe6,
	0x89, 0x93, 0xe9, 0x80, 0x9a, 0xef, 0xbc, 0x88, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xef, 0xbc,
	0x89, 0xef, 0xbc, 0x8c, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xef, 0xbc, 0x9a, 0xe6, 0x9c, 0xaa, 0xe6,
	0x89, 0x93, 0xe9, 0x80, 0x9a, 0xef, 0xbc, 0x8c, 0xe6, 0x9a, 0x82, 0xe4, 0xb8, 0x8d, 0xe6, 0x94,
	0xaf, 0xe6, 0x8c, 0x81, 0x52, 0x10, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32,
	0x13, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x85,
	0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x71, 0x0a, 0x10, 0x68,
	0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x10, 0x68, 0x69, 0x67, 0x68, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x32, 0x0f, 0xe9, 0xab, 0x98,
	0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x10, 0x68, 0x69,
	0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x80,
	0x01, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2c,
	0x92, 0x41, 0x29, 0x2a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x12, 0xe5, 0x8f, 0xaf, 0xe8, 0xa7, 0x82,
	0xe6, 0xb5, 0x8b, 0xe6, 0x80, 0xa7, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x13, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x9b, 0x01, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x3e, 0x92, 0x41, 0x3b, 0x2a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x32, 0x29, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xe7, 0x89, 0xb9, 0xe6,
	0x80, 0xa7, 0x5b, 0xe8, 0xb7, 0x9f, 0xe9, 0x9a, 0x8f, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe5,
	0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0x5d, 0x52,
	0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12,
	0x7d, 0x0a, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x13, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x32, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf,
	0xe5, 0xa4, 0x9a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x52, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x54,
	0x0a, 0x05, 0x63, 0x6c, 0x62, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x05, 0x63, 0x6c, 0x62, 0x49, 0x44, 0x32, 0x14, 0xe4, 0xb8, 0x9c, 0xe8, 0xa5, 0xbf, 0xe5,
	0x90, 0x91, 0xe7, 0xbd, 0x91, 0xe5, 0x85, 0xb3, 0x63, 0x6c, 0x62, 0x49, 0x44, 0x52, 0x05, 0x63,
	0x6c, 0x62, 0x49, 0x44, 0x12, 0x57, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x32, 0x0e, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x20, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x5d, 0x0a,
	0x13, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3, 0x04, 0x0a,
	0x13, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0xb0, 0x02, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0xed, 0x01, 0x92, 0x41, 0xe9, 0x01, 0x2a,
	0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0xd7,
	0x01, 0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0xe9, 0x87, 0x87, 0xe9, 0x9b, 0x86, 0xe9, 0x85, 0x8d,
	0xe7, 0xbd, 0xae, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe6, 0x8e, 0xa7, 0xe5,
	0x88, 0xb6, 0x49, 0x73, 0x74, 0x69, 0x6f, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7, 0xbd, 0x91,
	0xe6, 0xa0, 0xbc, 0xe7, 0x9a, 0x84, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73,
	0xe7, 0x9b, 0x91, 0xe6, 0x8e, 0xa7, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xef, 0xbc, 0x8c, 0xe5,
	0x8c, 0x85, 0xe6, 0x8b, 0xac, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0xe9, 0x9d, 0xa2, 0xe5, 0x92,
	0x8c, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe9, 0x9d, 0xa2, 0xe7, 0x9a, 0x84, 0xe6, 0x8c, 0x87,
	0xe6, 0xa0, 0x87, 0xe9, 0x87, 0x87, 0xe9, 0x9b, 0x86, 0xe8, 0xaf, 0xa5, 0xe9, 0x85, 0x8d, 0xe7,
	0xbd, 0xae, 0xe4, 0xb8, 0x8d, 0xe5, 0x86, 0x99, 0xe5, 0x85, 0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x2e, 0x79, 0x61, 0x6d, 0x6c, 0xef, 0xbc, 0x8c, 0xe8, 0x80, 0x8c, 0xe6, 0x98, 0xaf, 0xe7,
	0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0xe5, 0x92, 0x8c, 0x50, 0x6f, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7c, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x12, 0x6c, 0x6f, 0x67, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x12, 0xe6,
	0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe9, 0x87, 0x87, 0xe9, 0x9b, 0x86, 0xe9, 0x85, 0x8d, 0xe7, 0xbd,
	0xae, 0x52, 0x12, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x0d, 0x74,
	0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x15, 0xe5, 0x85,
	0xa8, 0xe9, 0x87, 0x8f, 0xe8, 0xb7, 0xaf, 0xe8, 0xbf, 0xbd, 0xe8, 0xb8, 0xaa, 0xe9, 0x85, 0x8d,
	0xe7, 0xbd, 0xae, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0xe7, 0x06, 0x0a, 0x10, 0x48, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x6e, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x26, 0x92,
	0x41, 0x23, 0x2a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x32, 0x0f, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5,
	0x90, 0xaf, 0x68, 0x70, 0x61, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x66, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a,
	0x0c, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x32, 0x12, 0x68,
	0x70, 0x61, 0xe6, 0x9c, 0x80, 0xe5, 0xb0, 0x8f, 0xe5, 0x89, 0xaf, 0xe6, 0x9c, 0xac, 0xe6, 0x95,
	0xb0, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x12,
	0x66, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x4d, 0x61, 0x78, 0x32, 0x12, 0x68, 0x70, 0x61, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7,
	0xe5, 0x89, 0xaf, 0xe6, 0x9c, 0xac, 0xe6, 0x95, 0xb0, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x5d, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a,
	0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x09, 0xe5,
	0x89, 0xaf, 0xe6, 0x9c, 0xac, 0xe6, 0x95, 0xb0, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xb4, 0x01, 0x0a, 0x22, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x50, 0x55, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x47, 0x92, 0x41, 0x44, 0x2a, 0x22, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x50, 0x55,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x32, 0x1e, 0xe7, 0x9b, 0xae, 0xe6, 0xa0,
	0x87, 0x63, 0x70, 0x75, 0xe5, 0xb9, 0xb3, 0xe5, 0x9d, 0x87, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8,
	0xe7, 0x8e, 0x87, 0x20, 0x30, 0x2d, 0x31, 0x30, 0x30, 0x52, 0x22, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x50, 0x55, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x68, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x92, 0x01, 0x0a, 0x0d, 0x64, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x50, 0x92, 0x41, 0x4d,
	0x2a, 0x0d, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x32,
	0x3c, 0xe4, 0xb8, 0x93, 0xe5, 0xb1, 0x9e, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xef, 0xbc, 0x88,
	0xe4, 0xb8, 0x93, 0xe7, 0x94, 0xa8, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa0, 0x87, 0xe7,
	0xad, 0xbe, 0xef, 0xbc, 0x89, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xbc,
	0x9a, 0xe5, 0x8a, 0xa0, 0xe4, 0xb8, 0x8a, 0xe5, 0xae, 0xb9, 0xe5, 0xbf, 0x8d, 0x52, 0x0d, 0x64,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x8b, 0x02, 0x0a,
	0x0d, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x50,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x32, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x69, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x32, 0x0c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52,
	0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x4e,
	0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x03, 0x0a, 0x0e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a,
	0x0a, 0x63, 0x70, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x63, 0x70, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x09, 0x43, 0x50, 0x55, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x52, 0x0a, 0x63, 0x70, 0x75,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x63, 0x70,
	0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x09, 0x43, 0x50, 0x55, 0xe9, 0x99, 0x90, 0xe5, 0x88,
	0xb6, 0x52, 0x08, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x64, 0x0a, 0x0d, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x0c, 0xe5, 0x86, 0x85, 0xe5, 0xad, 0x98, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5e, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x0c, 0xe5, 0x86, 0x85, 0xe5, 0xad, 0x98, 0xe9, 0x99,
	0x90, 0xe5, 0x88, 0xb6, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0xd1, 0x02, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x50, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x32, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x90, 0xaf, 0xe7, 0x94,
	0xa8, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x7d, 0x0a, 0x11, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x32, 0x19, 0xe6, 0x97, 0xa5,
	0xe5, 0xbf, 0x97, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x20, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x2c,
	0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x5d, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f,
	0x67, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x6a, 0x0a, 0x0f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x0c, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe6, 0xa0,
	0xbc, 0xe5, 0xbc, 0x8f, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x8c, 0x03, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x50, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x32, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x7f, 0x0a, 0x14, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x14, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x32,
	0x13, 0xe9, 0x87, 0x87, 0xe6, 0xa0, 0xb7, 0xe7, 0x8e, 0x87, 0x2c, 0xe7, 0x99, 0xbe, 0xe5, 0x88,
	0x86, 0xe6, 0xaf, 0x94, 0x52, 0x14, 0x74, 0x72, 0x61, 0x63, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x0c, 0xe4, 0xb8, 0x8a, 0xe6, 0x8a,
	0xa5, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x51, 0x0a, 0x07, 0x62, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x07, 0x62, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x0b,
	0xe8, 0x93, 0x9d, 0xe9, 0xb2, 0xb8, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x07, 0x62, 0x6b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xba, 0x05, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6e, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a,
	0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x32,
	0x15, 0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0xe9, 0x87, 0x87, 0xe9, 0x9b, 0x86, 0xe6, 0x80, 0xbb,
	0xe5, 0xbc, 0x80, 0xe5, 0x85, 0xb3, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x9e, 0x02, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0xc1, 0x01, 0x92, 0x41, 0xbd, 0x01, 0x2a, 0x1a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x32, 0x9e, 0x01, 0xe6, 0x8e, 0xa7,
	0xe5, 0x88, 0xb6, 0xe9, 0x9d, 0xa2, 0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0xe9, 0x87, 0x87, 0xe9,
	0x9b, 0x86, 0xe5, 0xbc, 0x80, 0xe5, 0x85, 0xb3, 0xef, 0xbc, 0x8c, 0xe5, 0x90, 0xaf, 0xe7, 0x94,
	0xa8, 0xe6, 0x97, 0xb6, 0xe4, 0xbc, 0x9a, 0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0xe7, 0x9b, 0x91, 0xe6, 0x8e,
	0xa7, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x64, 0xe7, 0xad, 0x89, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6,
	0xe9, 0x9d, 0xa2, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe7, 0x9a, 0x84, 0xe6, 0x8c, 0x87, 0xe6,
	0xa0, 0x87, 0xef, 0xbc, 0x8c, 0xe5, 0x8c, 0x85, 0xe6, 0x8b, 0xac, 0x70, 0x69, 0x6c, 0x6f, 0x74,
	0xe3, 0x80, 0x81, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x79, 0xe3, 0x80, 0x81, 0x63, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0xe7, 0xad, 0x89, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xe7, 0x9a, 0x84, 0xe6,
	0x80, 0xa7, 0xe8, 0x83, 0xbd, 0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0x52, 0x1a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x97, 0x02, 0x0a, 0x17, 0x64, 0x61, 0x74, 0x61,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0xc0, 0x01, 0x92, 0x41, 0xbc, 0x01, 0x2a, 0x17, 0x64, 0x61,
	0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x32, 0xa0, 0x01, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe9, 0x9d,
	0xa2, 0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0xe9, 0x87, 0x87, 0xe9, 0x9b, 0x86, 0xe5, 0xbc, 0x80,
	0xe5, 0x85, 0xb3, 0xef, 0xbc, 0x8c, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0xe6, 0x97, 0xb6, 0xe4,
	0xbc, 0x9a, 0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0x50, 0x6f, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0xe7, 0x9b, 0x91, 0xe6, 0x8e, 0xa7, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0xe7,
	0xad, 0x89, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe9, 0x9d, 0xa2, 0xe7, 0xbb, 0x84, 0xe4, 0xbb,
	0xb6, 0xe7, 0x9a, 0x84, 0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0xef, 0xbc, 0x8c, 0xe5, 0x8c, 0x85,
	0xe6, 0x8b, 0xac, 0x70, 0x72, 0x6f, 0x78, 0x79, 0xe3, 0x80, 0x81, 0xe5, 0xba, 0x94, 0xe7, 0x94,
	0xa8, 0xe5, 0xae, 0xb9, 0xe5, 0x99, 0xa8, 0xe7, 0x9a, 0x84, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c,
	0xe6, 0xb5, 0x81, 0xe9, 0x87, 0x8f, 0xe3, 0x80, 0x81, 0xe5, 0xbb, 0xb6, 0xe8, 0xbf, 0x9f, 0xe7,
	0xad, 0x89, 0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0x52, 0x17, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0x8d, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x32, 0x0c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92,
	0x41, 0x1c, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x2a, 0x08, 0x6a,
	0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x1e, 0xe7, 0xba, 0xb3, 0xe5, 0x85, 0xa5, 0xe6,
	0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe7, 0xae, 0xa1, 0xe7, 0x90,
	0x86, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x7e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x66, 0x92, 0x41, 0x63, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x59,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x5b, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0xef, 0xbc, 0x9a, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xad,
	0xef, 0xbc, 0x9b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0xef, 0xbc, 0x9a,
	0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x9b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0xef, 0xbc, 0x9a, 0xe5, 0xae, 0x89,
	0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xbc, 0x03, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x73, 0x74,
	0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x12, 0x69, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d,
	0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x6d,
	0x65, 0x73, 0x68, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12,
	0x2a, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x32, 0x08, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc,
	0x49, 0x44, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x3a, 0x64, 0x92, 0x41, 0x61, 0x0a,
	0x5f, 0x2a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x11, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0x69,
	0x73, 0x74, 0x69, 0x6f, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xb3, 0x07, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x42, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x32, 0x1d, 0xe7,
	0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89,
	0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x52, 0x06, 0x6d, 0x65,
	0x73, 0x68, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x21, 0xe7,
	0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0x8f,
	0xaf, 0xe9, 0x80, 0x89, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xe1, 0x02, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0xc8, 0x02, 0x92, 0x41, 0xc4, 0x02, 0x2a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0xb9, 0x02, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89, 0xe8, 0xbf,
	0x87, 0xe6, 0xbb, 0xa4, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x5b, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0xef, 0xbc, 0x9a, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xad, 0xef, 0xbc,
	0x9b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0xef, 0xbc, 0x9a, 0xe5, 0xae,
	0x89, 0xe8, 0xa3, 0x85, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x9b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0xef, 0xbc, 0x9a, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe5, 0xae, 0x8c, 0xe6,
	0x88, 0x90, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0xef, 0xbc, 0x9a, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xef,
	0xbc, 0x9b, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0xef, 0xbc,
	0x9a, 0xe5, 0x8d, 0xb8, 0xe8, 0xbd, 0xbd, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x9b, 0x75, 0x6e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0xef, 0xbc, 0x9a, 0xe5, 0x8d, 0xb8, 0xe8,
	0xbd, 0xbd, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xef, 0xbc, 0x9b, 0x75, 0x6e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0xef, 0xbc, 0x9a, 0xe5, 0x8d, 0xb8, 0xe8,
	0xbd, 0xbd, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xef, 0xbc, 0x9b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0xef, 0xbc, 0x9a, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x9b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0xef, 0xbc, 0x9a, 0xe9,
	0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4,
	0xa5, 0x5d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x2b,
	0x2a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x20, 0x69, 0x73, 0x74, 0x69, 0x6f,
	0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89, 0xe8,
	0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5d, 0x92, 0x41, 0x5a, 0x2a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x4d, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49,
	0x44, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xef, 0xbc, 0x8c, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe4,
	0xb8, 0xbb, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x92, 0x8c, 0xe8, 0xbf, 0x9c, 0xe7, 0xa8,
	0x8b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe6, 0xa8, 0xa1, 0xe7, 0xb3, 0x8a,
	0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x1b, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x32, 0x06, 0xe9, 0xa1, 0xb5, 0xe7,
	0xa0, 0x81, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0x90, 0x4e, 0x20, 0x00, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x32, 0x0c, 0xe6, 0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe9, 0x87,
	0x8f, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x20, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x3a, 0x30, 0x92, 0x41, 0x2d, 0x0a, 0x2b, 0x2a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x17, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x69, 0x73, 0x74, 0x69, 0x6f, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0xc5, 0x02, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x73, 0x74, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a,
	0x6d, 0x92, 0x41, 0x6a, 0x0a, 0x68, 0x2a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1d, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0x69, 0x73, 0x74, 0x69, 0x6f, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2,
	0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x82,
	0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x28, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x12, 0x92, 0x41, 0x0f, 0x2a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0x06, 0xe6, 0x80, 0xbb,
	0xe6, 0x95, 0xb0, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x32, 0x09, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe9, 0xa1, 0xb9, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0xb8, 0x08, 0x0a, 0x0d, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x06, 0x6d, 0x65, 0x73, 0x68,
	0x49, 0x44, 0x32, 0x08, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0x49, 0x44, 0x52, 0x06, 0x6d, 0x65,
	0x73, 0x68, 0x49, 0x44, 0x12, 0xae, 0x02, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x95, 0x02, 0x92, 0x41, 0x91, 0x02, 0x2a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x32, 0x86, 0x02, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x5b, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0xef, 0xbc, 0x9a, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8,
	0xad, 0xef, 0xbc, 0x9b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0xef, 0xbc,
	0x9a, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x9b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0xef, 0xbc, 0x9a, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe5,
	0xae, 0x8c, 0xe6, 0x88, 0x90, 0xef, 0xbc, 0x9b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0xef, 0xbc,
	0x9a, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xef, 0xbc, 0x9b,
	0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0xef, 0xbc, 0x9a, 0xe5,
	0x8d, 0xb8, 0xe8, 0xbd, 0xbd, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x9b, 0x75, 0x6e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0xef, 0xbc, 0x9a, 0xe5, 0x8d, 0xb8, 0xe8, 0xbd, 0xbd, 0xe5,
	0xae, 0x8c, 0xe6, 0x88, 0x90, 0xef, 0xbc, 0x9b, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0xef, 0xbc, 0x9a, 0xe5, 0x8d,
	0xb8, 0xe8, 0xbd, 0xbd, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xef, 0xbc, 0x9b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0xef, 0xbc, 0x9a, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe6, 0x9b,
	0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x9b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0xef, 0xbc, 0x9a, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x5d, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x73, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4d, 0x92, 0x41,
	0x4a, 0x2a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x39, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0xef, 0xbc,
	0x8c, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe4, 0xb8, 0xba, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0xe6, 0x97, 0xb6, 0xef, 0xbc, 0x8c, 0xe4, 0xbc, 0x9a, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5,
	0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe5, 0x8e, 0x9f, 0xe5, 0x9b, 0xa0, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x32, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac,
	0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7,
	0xa0, 0x81, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0f, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84,
	0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4f, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x0f, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x32, 0x0f,
	0xe4, 0xb8, 0xbb, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52,
	0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x6b, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x32, 0x12, 0xe8, 0xbf, 0x9c, 0xe7, 0xa8,
	0x8b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x0e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a,
	0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x32, 0x0c, 0xe7, 0x9b, 0x91, 0xe6,
	0xb5, 0x8b, 0xe9, 0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x3a, 0x24, 0x92, 0x41, 0x21, 0x0a, 0x1f, 0x2a,
	0x0d, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x32, 0x0e,
	0x69, 0x73, 0x74, 0x69, 0x6f, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe9, 0xa1, 0xb9, 0x22, 0xb8,
	0x14, 0x0a, 0x0f, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x32,
	0x08, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0x49, 0x44, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49,
	0x44, 0x12, 0xae, 0x02, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x95, 0x02, 0x92, 0x41, 0x91, 0x02, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x32, 0x86, 0x02, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x5b, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0xef, 0xbc, 0x9a, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xad, 0xef, 0xbc,
	0x9b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0xef, 0xbc, 0x9a, 0xe5, 0xae,
	0x89, 0xe8, 0xa3, 0x85, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x9b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0xef, 0xbc, 0x9a, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe5, 0xae, 0x8c, 0xe6,
	0x88, 0x90, 0xef, 0xbc, 0x9b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0xef, 0xbc, 0x9a, 0xe5, 0xae,
	0x89, 0xe8, 0xa3, 0x85, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xef, 0xbc, 0x9b, 0x75, 0x6e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0xef, 0xbc, 0x9a, 0xe5, 0x8d, 0xb8, 0xe8,
	0xbd, 0xbd, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x9b, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0xef, 0xbc, 0x9a, 0xe5, 0x8d, 0xb8, 0xe8, 0xbd, 0xbd, 0xe5, 0xae, 0x8c, 0xe6,
	0x88, 0x90, 0xef, 0xbc, 0x9b, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0xef, 0xbc, 0x9a, 0xe5, 0x8d, 0xb8, 0xe8, 0xbd,
	0xbd, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xef, 0xbc, 0x9b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0xef, 0xbc, 0x9a, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0xe4, 0xb8, 0xad, 0xef, 0xbc, 0x9b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0xef, 0xbc, 0x9a, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe6, 0x9b, 0xb4,
	0xe6, 0x96, 0xb0, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x5d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x73, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4d, 0x92, 0x41, 0x4a, 0x2a, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x39, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xe4, 0xb8, 0xba, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0xe6, 0x97, 0xb6,
	0xef, 0xbc, 0x8c, 0xe4, 0xbc, 0x9a, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0xa4, 0xb1, 0xe8,
	0xb4, 0xa5, 0xe5, 0x8e, 0x9f, 0xe5, 0x9b, 0xa0, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a,
	0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x32, 0x08, 0xe7, 0xbd, 0x91, 0xe7,
	0xbb, 0x9c, 0x49, 0x44, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12,
	0x42, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0c, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x74, 0xe7,
	0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x32, 0x09, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x34, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x32, 0x09, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe8, 0x80, 0x85, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x40, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7,
	0xa0, 0x81, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15,
	0x2a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x06, 0xe6,
	0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x32, 0x0f, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84, 0xe7, 0x89, 0x88, 0xe6,
	0x9c, 0xac, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x96, 0x01, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6a, 0x92, 0x41, 0x67, 0x2a, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x32, 0x53, 0xe5,
	0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x5b, 0x69, 0x6e, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0xef, 0xbc, 0x9a, 0xe7, 0x8b, 0xac, 0xe7, 0xab, 0x8b,
	0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0xe9, 0x9d, 0xa2, 0xef, 0xbc, 0x88, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0xef, 0xbc, 0x89, 0xef, 0xbc, 0x9b, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0xef,
	0xbc, 0x9a, 0xe6, 0x89, 0x98, 0xe7, 0xae, 0xa1, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0xe9, 0x9d,
	0xa2, 0x5d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6f, 0x92, 0x41, 0x6c, 0x2a,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x32, 0x5d, 0xe5, 0xa4,
	0x9a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0xa8, 0xa1,
	0xe5, 0xbc, 0x8f, 0x2c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0xef, 0xbc, 0x9a, 0xe4, 0xb8, 0xbb, 0xe4, 0xbb, 0x8e, 0xe6, 0x9e, 0xb6, 0xe6, 0x9e, 0x84,
	0xef, 0xbc, 0x88, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xef, 0xbc, 0x89, 0xef, 0xbc, 0x9b, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0xef, 0xbc, 0x9a, 0xe5, 0xa4,
	0x9a, 0xe4, 0xb8, 0xbb, 0xe6, 0x9e, 0xb6, 0xe6, 0x9e, 0x84, 0x5d, 0x52, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x32, 0x0f, 0xe4, 0xb8, 0xbb, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x6b, 0x0a, 0x0e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x27, 0x92,
	0x41, 0x24, 0x2a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x32, 0x12, 0xe8, 0xbf, 0x9c, 0xe7, 0xa8, 0x8b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x7e, 0x0a, 0x10, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x52, 0x92, 0x41, 0x4f, 0x2a, 0x10, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x32, 0x3b, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0x80, 0xe8, 0x87, 0xb4, 0xef, 0xbc, 0x9a, 0xe5, 0x85,
	0xb3, 0xe4, 0xb9, 0x8e, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4,
	0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x52, 0x10, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32,
	0x13, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x85,
	0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x71, 0x0a, 0x10, 0x68,
	0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x10, 0x68, 0x69, 0x67, 0x68, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x32, 0x0f, 0xe9, 0xab, 0x98,
	0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x10, 0x68, 0x69,
	0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x80,
	0x01, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2c,
	0x92, 0x41, 0x29, 0x2a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x12, 0xe5, 0x8f, 0xaf, 0xe8, 0xa7, 0x82,
	0xe6, 0xb5, 0x8b, 0xe6, 0x80, 0xa7, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x13, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x98, 0x01, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x3e, 0x92, 0x41,
	0x3b, 0x2a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x32, 0x29, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0x5b,
	0xe8, 0xb7, 0x9f, 0xe9, 0x9a, 0x8f, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe5, 0x85, 0xb3, 0xe8,
	0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0x5d, 0x52, 0x0e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x7d, 0x0a, 0x13,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x13, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x32,
	0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe5, 0xa4, 0x9a,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x52, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x05, 0x63,
	0x6c, 0x62, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x05, 0x63,
	0x6c, 0x62, 0x49, 0x44, 0x32, 0x14, 0xe4, 0xb8, 0x9c, 0xe8, 0xa5, 0xbf, 0xe5, 0x90, 0x91, 0xe7,
	0xbd, 0x91, 0xe5, 0x85, 0xb3, 0x63, 0x6c, 0x62, 0x49, 0x44, 0x52, 0x05, 0x63, 0x6c, 0x62, 0x49,
	0x44, 0x12, 0x31, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x32, 0x06, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x5d, 0x0a, 0x13, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x3a, 0x24, 0x92, 0x41, 0x21, 0x0a, 0x1f, 0x2a, 0x0d, 0x49, 0x73, 0x74, 0x69,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x32, 0x0e, 0x69, 0x73, 0x74, 0x69, 0x6f,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe9, 0xa1, 0xb9, 0x22, 0x87, 0x02, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x45, 0x0a,
	0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x5d, 0x92, 0x41, 0x5a, 0x0a, 0x58, 0x2a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe5, 0x93,
	0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0xd2, 0x01, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73,
	0x74, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x65,
	0x73, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x12, 0x2a,
	0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x32, 0x08, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0x49,
	0x44, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44,
	0x12, 0x49, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7,
	0xbc, 0x96, 0xe7, 0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x2c, 0x92, 0x41, 0x29,
	0x0a, 0x27, 0x2a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x11, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x69, 0x73,
	0x74, 0x69, 0x6f, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0x87, 0x02, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x45, 0x0a,
	0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x5d, 0x92, 0x41, 0x5a, 0x0a, 0x58, 0x2a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x12, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe5, 0x93,
	0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0xd2, 0x01, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7,
	0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x68,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x12, 0x2a, 0x06, 0x6d,
	0x65, 0x73, 0x68, 0x49, 0x44, 0x32, 0x08, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0x49, 0x44, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x3a, 0x35,
	0x92, 0x41, 0x32, 0x0a, 0x30, 0x2a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x17, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0x69, 0x73, 0x74, 0x69, 0x6f, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0xcb, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x73, 0x74,
	0x69, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x49, 0x73, 0x74, 0x69, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x6c, 0x92, 0x41, 0x69, 0x0a, 0x67, 0x2a, 0x16, 0x47, 0x65,
	0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x17, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x69, 0x73, 0x74, 0x69,
	0x6f, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xd2, 0x01, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xa6, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7,
	0xa0, 0x81, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x42, 0x92, 0x41, 0x3f, 0x0a, 0x3d, 0x2a,
	0x15, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x24, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x8b, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0xff, 0x01, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x67, 0x92, 0x41, 0x64, 0x0a, 0x62, 0x2a, 0x16, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x24, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0xe4, 0xb8, 0x8b, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x64,
	0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x51, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x1b, 0x92,
	0x41, 0x18, 0x2a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x32, 0x0c, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x22, 0xf7, 0x03, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49,
	0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x40, 0x0a, 0x08, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x08, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x32, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe5, 0x85, 0xb1, 0xe4,
	0xba, 0xab, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x52, 0x08, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x12, 0x48, 0x0a, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0b, 0x69, 0x73,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x32, 0x14, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe5, 0xb7, 0xb2, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x52,
	0x0b, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x0c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x34, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0c,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x32, 0x12, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e,
	0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2a, 0xa5,
	0x01, 0x0a, 0x15, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x41, 0x4d, 0x45,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e,
	0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x44,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x43,
	0x4f, 0x50, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x45, 0x57,
	0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f,
	0x53, 0x43, 0x4f, 0x50, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x32, 0xe9, 0x07, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x68, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x87, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x73, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f,
	0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x73, 0x68, 0x2f, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x82, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x73, 0x74, 0x69,
	0x6f, 0x12, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x49, 0x73, 0x74, 0x69, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22,
	0x2f, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x73, 0x68, 0x2f, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74,
	0x69, 0x6f, 0x12, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x6d, 0x65, 0x73, 0x68,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f,
	0x69, 0x73, 0x74, 0x69, 0x6f, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x12, 0x1f, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x1a, 0x23, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x69, 0x73, 0x74, 0x69,
	0x6f, 0x2f, 0x7b, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x7d, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x12, 0x1f, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x2a, 0x23, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x69, 0x73,
	0x74, 0x69, 0x6f, 0x2f, 0x7b, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x7d, 0x12, 0x8d, 0x01, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x22, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c,
	0x12, 0x2a, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x2f, 0x7b, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x7d, 0x12, 0xc3, 0x01, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x22, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f,
	0x12, 0x1d, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x92,
	0x41, 0x40, 0x12, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xe4, 0xb8, 0x8b, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x1a, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xe4, 0xb8, 0x8b, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x42, 0x9d, 0x01, 0x5a, 0x0e, 0x2e, 0x2f, 0x3b, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x92, 0x41, 0x89, 0x01, 0x12, 0x1d, 0x0a, 0x14, 0x4d, 0x65, 0x73,
	0x68, 0x20, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x20, 0x44, 0x6f,
	0x63, 0x32, 0x05, 0x30, 0x2e, 0x31, 0x2e, 0x30, 0x22, 0x0a, 0x2f, 0x62, 0x63, 0x73, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x34, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x23, 0x0a, 0x21, 0x0a,
	0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x13, 0x08, 0x02, 0x1a,
	0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02,
	0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bcs_mesh_manager_proto_rawDescOnce sync.Once
	file_bcs_mesh_manager_proto_rawDescData = file_bcs_mesh_manager_proto_rawDesc
)

func file_bcs_mesh_manager_proto_rawDescGZIP() []byte {
	file_bcs_mesh_manager_proto_rawDescOnce.Do(func() {
		file_bcs_mesh_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_bcs_mesh_manager_proto_rawDescData)
	})
	return file_bcs_mesh_manager_proto_rawDescData
}

var file_bcs_mesh_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_bcs_mesh_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_bcs_mesh_manager_proto_goTypes = []interface{}{
	(NamespaceScopedAction)(0),      // 0: meshmanager.NamespaceScopedAction
	(*WebAnnotations)(nil),          // 1: meshmanager.WebAnnotations
	(*ListIstioConfigRequest)(nil),  // 2: meshmanager.ListIstioConfigRequest
	(*ListIstioConfigResponse)(nil), // 3: meshmanager.ListIstioConfigResponse
	(*IstioConfigData)(nil),         // 4: meshmanager.IstioConfigData
	(*IstioVersion)(nil),            // 5: meshmanager.IstioVersion
	(*FeatureConfig)(nil),           // 6: meshmanager.FeatureConfig
	(*IstioInstallRequest)(nil),     // 7: meshmanager.IstioInstallRequest
	(*IstioUpdateRequest)(nil),      // 8: meshmanager.IstioUpdateRequest
	(*ObservabilityConfig)(nil),     // 9: meshmanager.ObservabilityConfig
	(*HighAvailability)(nil),        // 10: meshmanager.HighAvailability
	(*DedicatedNode)(nil),           // 11: meshmanager.DedicatedNode
	(*ResourceConfig)(nil),          // 12: meshmanager.ResourceConfig
	(*LogCollectorConfig)(nil),      // 13: meshmanager.LogCollectorConfig
	(*TracingConfig)(nil),           // 14: meshmanager.TracingConfig
	(*MetricsConfig)(nil),           // 15: meshmanager.MetricsConfig
	(*RemoteCluster)(nil),           // 16: meshmanager.RemoteCluster
	(*InstallIstioResponse)(nil),    // 17: meshmanager.InstallIstioResponse
	(*ListIstioRequest)(nil),        // 18: meshmanager.ListIstioRequest
	(*ListIstioResponse)(nil),       // 19: meshmanager.ListIstioResponse
	(*ListIstioData)(nil),           // 20: meshmanager.ListIstioData
	(*IstioListItem)(nil),           // 21: meshmanager.IstioListItem
	(*IstioDetailInfo)(nil),         // 22: meshmanager.IstioDetailInfo
	(*UpdateIstioResponse)(nil),     // 23: meshmanager.UpdateIstioResponse
	(*DeleteIstioRequest)(nil),      // 24: meshmanager.DeleteIstioRequest
	(*DeleteIstioResponse)(nil),     // 25: meshmanager.DeleteIstioResponse
	(*GetIstioDetailRequest)(nil),   // 26: meshmanager.GetIstioDetailRequest
	(*GetIstioDetailResponse)(nil),  // 27: meshmanager.GetIstioDetailResponse
	(*GetClusterInfoRequest)(nil),   // 28: meshmanager.GetClusterInfoRequest
	(*GetClusterInfoResponse)(nil),  // 29: meshmanager.GetClusterInfoResponse
	(*ClusterInfoData)(nil),         // 30: meshmanager.ClusterInfoData
	(*ClusterInfo)(nil),             // 31: meshmanager.ClusterInfo
	nil,                             // 32: meshmanager.IstioConfigData.FeatureConfigsEntry
	nil,                             // 33: meshmanager.IstioInstallRequest.FeatureConfigsEntry
	nil,                             // 34: meshmanager.IstioUpdateRequest.FeatureConfigsEntry
	nil,                             // 35: meshmanager.DedicatedNode.NodeLabelsEntry
	nil,                             // 36: meshmanager.IstioDetailInfo.FeatureConfigsEntry
	(*_struct.Struct)(nil),          // 37: google.protobuf.Struct
	(*wrappers.StringValue)(nil),    // 38: google.protobuf.StringValue
	(*wrappers.BoolValue)(nil),      // 39: google.protobuf.BoolValue
	(*wrappers.Int32Value)(nil),     // 40: google.protobuf.Int32Value
}
var file_bcs_mesh_manager_proto_depIdxs = []int32{
	37, // 0: meshmanager.WebAnnotations.perms:type_name -> google.protobuf.Struct
	1,  // 1: meshmanager.ListIstioConfigResponse.web_annotations:type_name -> meshmanager.WebAnnotations
	4,  // 2: meshmanager.ListIstioConfigResponse.data:type_name -> meshmanager.IstioConfigData
	5,  // 3: meshmanager.IstioConfigData.istioVersions:type_name -> meshmanager.IstioVersion
	12, // 4: meshmanager.IstioConfigData.sidecarResourceConfig:type_name -> meshmanager.ResourceConfig
	10, // 5: meshmanager.IstioConfigData.highAvailability:type_name -> meshmanager.HighAvailability
	9,  // 6: meshmanager.IstioConfigData.observabilityConfig:type_name -> meshmanager.ObservabilityConfig
	32, // 7: meshmanager.IstioConfigData.featureConfigs:type_name -> meshmanager.IstioConfigData.FeatureConfigsEntry
	38, // 8: meshmanager.IstioInstallRequest.name:type_name -> google.protobuf.StringValue
	38, // 9: meshmanager.IstioInstallRequest.version:type_name -> google.protobuf.StringValue
	38, // 10: meshmanager.IstioInstallRequest.controlPlaneMode:type_name -> google.protobuf.StringValue
	38, // 11: meshmanager.IstioInstallRequest.clusterMode:type_name -> google.protobuf.StringValue
	38, // 12: meshmanager.IstioInstallRequest.description:type_name -> google.protobuf.StringValue
	16, // 13: meshmanager.IstioInstallRequest.remoteClusters:type_name -> meshmanager.RemoteCluster
	39, // 14: meshmanager.IstioInstallRequest.differentNetwork:type_name -> google.protobuf.BoolValue
	12, // 15: meshmanager.IstioInstallRequest.sidecarResourceConfig:type_name -> meshmanager.ResourceConfig
	10, // 16: meshmanager.IstioInstallRequest.highAvailability:type_name -> meshmanager.HighAvailability
	9,  // 17: meshmanager.IstioInstallRequest.observabilityConfig:type_name -> meshmanager.ObservabilityConfig
	33, // 18: meshmanager.IstioInstallRequest.featureConfigs:type_name -> meshmanager.IstioInstallRequest.FeatureConfigsEntry
	39, // 19: meshmanager.IstioInstallRequest.multiClusterEnabled:type_name -> google.protobuf.BoolValue
	38, // 20: meshmanager.IstioInstallRequest.clbID:type_name -> google.protobuf.StringValue
	38, // 21: meshmanager.IstioInstallRequest.revision:type_name -> google.protobuf.StringValue
	38, // 22: meshmanager.IstioUpdateRequest.name:type_name -> google.protobuf.StringValue
	38, // 23: meshmanager.IstioUpdateRequest.controlPlaneMode:type_name -> google.protobuf.StringValue
	38, // 24: meshmanager.IstioUpdateRequest.clusterMode:type_name -> google.protobuf.StringValue
	38, // 25: meshmanager.IstioUpdateRequest.description:type_name -> google.protobuf.StringValue
	16, // 26: meshmanager.IstioUpdateRequest.remoteClusters:type_name -> meshmanager.RemoteCluster
	39, // 27: meshmanager.IstioUpdateRequest.differentNetwork:type_name -> google.protobuf.BoolValue
	12, // 28: meshmanager.IstioUpdateRequest.sidecarResourceConfig:type_name -> meshmanager.ResourceConfig
	10, // 29: meshmanager.IstioUpdateRequest.highAvailability:type_name -> meshmanager.HighAvailability
	9,  // 30: meshmanager.IstioUpdateRequest.observabilityConfig:type_name -> meshmanager.ObservabilityConfig
	34, // 31: meshmanager.IstioUpdateRequest.featureConfigs:type_name -> meshmanager.IstioUpdateRequest.FeatureConfigsEntry
	39, // 32: meshmanager.IstioUpdateRequest.multiClusterEnabled:type_name -> google.protobuf.BoolValue
	38, // 33: meshmanager.IstioUpdateRequest.clbID:type_name -> google.protobuf.StringValue
	38, // 34: meshmanager.IstioUpdateRequest.revision:type_name -> google.protobuf.StringValue
	15, // 35: meshmanager.ObservabilityConfig.metricsConfig:type_name -> meshmanager.MetricsConfig
	13, // 36: meshmanager.ObservabilityConfig.logCollectorConfig:type_name -> meshmanager.LogCollectorConfig
	14, // 37: meshmanager.ObservabilityConfig.tracingConfig:type_name -> meshmanager.TracingConfig
	39, // 38: meshmanager.HighAvailability.autoscaleEnabled:type_name -> google.protobuf.BoolValue
	40, // 39: meshmanager.HighAvailability.autoscaleMin:type_name -> google.protobuf.Int32Value
	40, // 40: meshmanager.HighAvailability.autoscaleMax:type_name -> google.protobuf.Int32Value
	40, // 41: meshmanager.HighAvailability.replicaCount:type_name -> google.protobuf.Int32Value
	40, // 42: meshmanager.HighAvailability.targetCPUAverageUtilizationPercent:type_name -> google.protobuf.Int32Value
	12, // 43: meshmanager.HighAvailability.resourceConfig:type_name -> meshmanager.ResourceConfig
	11, // 44: meshmanager.HighAvailability.dedicatedNode:type_name -> meshmanager.DedicatedNode
	39, // 45: meshmanager.DedicatedNode.enabled:type_name -> google.protobuf.BoolValue
	35, // 46: meshmanager.DedicatedNode.nodeLabels:type_name -> meshmanager.DedicatedNode.NodeLabelsEntry
	38, // 47: meshmanager.ResourceConfig.cpuRequest:type_name -> google.protobuf.StringValue
	38, // 48: meshmanager.ResourceConfig.cpuLimit:type_name -> google.protobuf.StringValue
	38, // 49: meshmanager.ResourceConfig.memoryRequest:type_name -> google.protobuf.StringValue
	38, // 50: meshmanager.ResourceConfig.memoryLimit:type_name -> google.protobuf.StringValue
	39, // 51: meshmanager.LogCollectorConfig.enabled:type_name -> google.protobuf.BoolValue
	38, // 52: meshmanager.LogCollectorConfig.accessLogEncoding:type_name -> google.protobuf.StringValue
	38, // 53: meshmanager.LogCollectorConfig.accessLogFormat:type_name -> google.protobuf.StringValue
	39, // 54: meshmanager.TracingConfig.enabled:type_name -> google.protobuf.BoolValue
	40, // 55: meshmanager.TracingConfig.traceSamplingPercent:type_name -> google.protobuf.Int32Value
	38, // 56: meshmanager.TracingConfig.endpoint:type_name -> google.protobuf.StringValue
	38, // 57: meshmanager.TracingConfig.bkToken:type_name -> google.protobuf.StringValue
	39, // 58: meshmanager.MetricsConfig.metricsEnabled:type_name -> google.protobuf.BoolValue
	39, // 59: meshmanager.MetricsConfig.controlPlaneMetricsEnabled:type_name -> google.protobuf.BoolValue
	39, // 60: meshmanager.MetricsConfig.dataPlaneMetricsEnabled:type_name -> google.protobuf.BoolValue
	1,  // 61: meshmanager.InstallIstioResponse.web_annotations:type_name -> meshmanager.WebAnnotations
	1,  // 62: meshmanager.ListIstioResponse.web_annotations:type_name -> meshmanager.WebAnnotations
	20, // 63: meshmanager.ListIstioResponse.data:type_name -> meshmanager.ListIstioData
	21, // 64: meshmanager.ListIstioData.items:type_name -> meshmanager.IstioListItem
	16, // 65: meshmanager.IstioListItem.remoteClusters:type_name -> meshmanager.RemoteCluster
	16, // 66: meshmanager.IstioDetailInfo.remoteClusters:type_name -> meshmanager.RemoteCluster
	12, // 67: meshmanager.IstioDetailInfo.sidecarResourceConfig:type_name -> meshmanager.ResourceConfig
	10, // 68: meshmanager.IstioDetailInfo.highAvailability:type_name -> meshmanager.HighAvailability
	9,  // 69: meshmanager.IstioDetailInfo.observabilityConfig:type_name -> meshmanager.ObservabilityConfig
	36, // 70: meshmanager.IstioDetailInfo.featureConfigs:type_name -> meshmanager.IstioDetailInfo.FeatureConfigsEntry
	39, // 71: meshmanager.IstioDetailInfo.multiClusterEnabled:type_name -> google.protobuf.BoolValue
	38, // 72: meshmanager.IstioDetailInfo.clbID:type_name -> google.protobuf.StringValue
	1,  // 73: meshmanager.UpdateIstioResponse.web_annotations:type_name -> meshmanager.WebAnnotations
	1,  // 74: meshmanager.DeleteIstioResponse.web_annotations:type_name -> meshmanager.WebAnnotations
	1,  // 75: meshmanager.GetIstioDetailResponse.web_annotations:type_name -> meshmanager.WebAnnotations
	22, // 76: meshmanager.GetIstioDetailResponse.data:type_name -> meshmanager.IstioDetailInfo
	30, // 77: meshmanager.GetClusterInfoResponse.data:type_name -> meshmanager.ClusterInfoData
	31, // 78: meshmanager.ClusterInfoData.clusters:type_name -> meshmanager.ClusterInfo
	6,  // 79: meshmanager.IstioConfigData.FeatureConfigsEntry.value:type_name -> meshmanager.FeatureConfig
	6,  // 80: meshmanager.IstioInstallRequest.FeatureConfigsEntry.value:type_name -> meshmanager.FeatureConfig
	6,  // 81: meshmanager.IstioUpdateRequest.FeatureConfigsEntry.value:type_name -> meshmanager.FeatureConfig
	6,  // 82: meshmanager.IstioDetailInfo.FeatureConfigsEntry.value:type_name -> meshmanager.FeatureConfig
	2,  // 83: meshmanager.MeshManager.ListIstioConfig:input_type -> meshmanager.ListIstioConfigRequest
	7,  // 84: meshmanager.MeshManager.InstallIstio:input_type -> meshmanager.IstioInstallRequest
	18, // 85: meshmanager.MeshManager.ListIstio:input_type -> meshmanager.ListIstioRequest
	8,  // 86: meshmanager.MeshManager.UpdateIstio:input_type -> meshmanager.IstioUpdateRequest
	24, // 87: meshmanager.MeshManager.DeleteIstio:input_type -> meshmanager.DeleteIstioRequest
	26, // 88: meshmanager.MeshManager.GetIstioDetail:input_type -> meshmanager.GetIstioDetailRequest
	28, // 89: meshmanager.MeshManager.GetClusterInfo:input_type -> meshmanager.GetClusterInfoRequest
	3,  // 90: meshmanager.MeshManager.ListIstioConfig:output_type -> meshmanager.ListIstioConfigResponse
	17, // 91: meshmanager.MeshManager.InstallIstio:output_type -> meshmanager.InstallIstioResponse
	19, // 92: meshmanager.MeshManager.ListIstio:output_type -> meshmanager.ListIstioResponse
	23, // 93: meshmanager.MeshManager.UpdateIstio:output_type -> meshmanager.UpdateIstioResponse
	25, // 94: meshmanager.MeshManager.DeleteIstio:output_type -> meshmanager.DeleteIstioResponse
	27, // 95: meshmanager.MeshManager.GetIstioDetail:output_type -> meshmanager.GetIstioDetailResponse
	29, // 96: meshmanager.MeshManager.GetClusterInfo:output_type -> meshmanager.GetClusterInfoResponse
	90, // [90:97] is the sub-list for method output_type
	83, // [83:90] is the sub-list for method input_type
	83, // [83:83] is the sub-list for extension type_name
	83, // [83:83] is the sub-list for extension extendee
	0,  // [0:83] is the sub-list for field type_name
}

func init() { file_bcs_mesh_manager_proto_init() }
func file_bcs_mesh_manager_proto_init() {
	if File_bcs_mesh_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bcs_mesh_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebAnnotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIstioConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIstioConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IstioConfigData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IstioVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IstioInstallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IstioUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservabilityConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighAvailability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DedicatedNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCollectorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallIstioResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIstioRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIstioResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIstioData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IstioListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IstioDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIstioResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIstioRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIstioResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIstioDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIstioDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bcs_mesh_manager_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bcs_mesh_manager_proto_goTypes,
		DependencyIndexes: file_bcs_mesh_manager_proto_depIdxs,
		EnumInfos:         file_bcs_mesh_manager_proto_enumTypes,
		MessageInfos:      file_bcs_mesh_manager_proto_msgTypes,
	}.Build()
	File_bcs_mesh_manager_proto = out.File
	file_bcs_mesh_manager_proto_rawDesc = nil
	file_bcs_mesh_manager_proto_goTypes = nil
	file_bcs_mesh_manager_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MeshManagerClient is the client API for MeshManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MeshManagerClient interface {
	// 获取当前开放的istio版本和配置信息
	ListIstioConfig(ctx context.Context, in *ListIstioConfigRequest, opts ...grpc.CallOption) (*ListIstioConfigResponse, error)
	// 安装istio
	InstallIstio(ctx context.Context, in *IstioInstallRequest, opts ...grpc.CallOption) (*InstallIstioResponse, error)
	// 获取istio列表
	ListIstio(ctx context.Context, in *ListIstioRequest, opts ...grpc.CallOption) (*ListIstioResponse, error)
	// 更新istio配置
	UpdateIstio(ctx context.Context, in *IstioUpdateRequest, opts ...grpc.CallOption) (*UpdateIstioResponse, error)
	// 删除istio
	DeleteIstio(ctx context.Context, in *DeleteIstioRequest, opts ...grpc.CallOption) (*DeleteIstioResponse, error)
	// 获取istio详情
	GetIstioDetail(ctx context.Context, in *GetIstioDetailRequest, opts ...grpc.CallOption) (*GetIstioDetailResponse, error)
	// 获取项目下的集群信息
	GetClusterInfo(ctx context.Context, in *GetClusterInfoRequest, opts ...grpc.CallOption) (*GetClusterInfoResponse, error)
}

type meshManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewMeshManagerClient(cc grpc.ClientConnInterface) MeshManagerClient {
	return &meshManagerClient{cc}
}

func (c *meshManagerClient) ListIstioConfig(ctx context.Context, in *ListIstioConfigRequest, opts ...grpc.CallOption) (*ListIstioConfigResponse, error) {
	out := new(ListIstioConfigResponse)
	err := c.cc.Invoke(ctx, "/meshmanager.MeshManager/ListIstioConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshManagerClient) InstallIstio(ctx context.Context, in *IstioInstallRequest, opts ...grpc.CallOption) (*InstallIstioResponse, error) {
	out := new(InstallIstioResponse)
	err := c.cc.Invoke(ctx, "/meshmanager.MeshManager/InstallIstio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshManagerClient) ListIstio(ctx context.Context, in *ListIstioRequest, opts ...grpc.CallOption) (*ListIstioResponse, error) {
	out := new(ListIstioResponse)
	err := c.cc.Invoke(ctx, "/meshmanager.MeshManager/ListIstio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshManagerClient) UpdateIstio(ctx context.Context, in *IstioUpdateRequest, opts ...grpc.CallOption) (*UpdateIstioResponse, error) {
	out := new(UpdateIstioResponse)
	err := c.cc.Invoke(ctx, "/meshmanager.MeshManager/UpdateIstio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshManagerClient) DeleteIstio(ctx context.Context, in *DeleteIstioRequest, opts ...grpc.CallOption) (*DeleteIstioResponse, error) {
	out := new(DeleteIstioResponse)
	err := c.cc.Invoke(ctx, "/meshmanager.MeshManager/DeleteIstio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshManagerClient) GetIstioDetail(ctx context.Context, in *GetIstioDetailRequest, opts ...grpc.CallOption) (*GetIstioDetailResponse, error) {
	out := new(GetIstioDetailResponse)
	err := c.cc.Invoke(ctx, "/meshmanager.MeshManager/GetIstioDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshManagerClient) GetClusterInfo(ctx context.Context, in *GetClusterInfoRequest, opts ...grpc.CallOption) (*GetClusterInfoResponse, error) {
	out := new(GetClusterInfoResponse)
	err := c.cc.Invoke(ctx, "/meshmanager.MeshManager/GetClusterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeshManagerServer is the server API for MeshManager service.
type MeshManagerServer interface {
	// 获取当前开放的istio版本和配置信息
	ListIstioConfig(context.Context, *ListIstioConfigRequest) (*ListIstioConfigResponse, error)
	// 安装istio
	InstallIstio(context.Context, *IstioInstallRequest) (*InstallIstioResponse, error)
	// 获取istio列表
	ListIstio(context.Context, *ListIstioRequest) (*ListIstioResponse, error)
	// 更新istio配置
	UpdateIstio(context.Context, *IstioUpdateRequest) (*UpdateIstioResponse, error)
	// 删除istio
	DeleteIstio(context.Context, *DeleteIstioRequest) (*DeleteIstioResponse, error)
	// 获取istio详情
	GetIstioDetail(context.Context, *GetIstioDetailRequest) (*GetIstioDetailResponse, error)
	// 获取项目下的集群信息
	GetClusterInfo(context.Context, *GetClusterInfoRequest) (*GetClusterInfoResponse, error)
}

// UnimplementedMeshManagerServer can be embedded to have forward compatible implementations.
type UnimplementedMeshManagerServer struct {
}

func (*UnimplementedMeshManagerServer) ListIstioConfig(context.Context, *ListIstioConfigRequest) (*ListIstioConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIstioConfig not implemented")
}
func (*UnimplementedMeshManagerServer) InstallIstio(context.Context, *IstioInstallRequest) (*InstallIstioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallIstio not implemented")
}
func (*UnimplementedMeshManagerServer) ListIstio(context.Context, *ListIstioRequest) (*ListIstioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIstio not implemented")
}
func (*UnimplementedMeshManagerServer) UpdateIstio(context.Context, *IstioUpdateRequest) (*UpdateIstioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIstio not implemented")
}
func (*UnimplementedMeshManagerServer) DeleteIstio(context.Context, *DeleteIstioRequest) (*DeleteIstioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIstio not implemented")
}
func (*UnimplementedMeshManagerServer) GetIstioDetail(context.Context, *GetIstioDetailRequest) (*GetIstioDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIstioDetail not implemented")
}
func (*UnimplementedMeshManagerServer) GetClusterInfo(context.Context, *GetClusterInfoRequest) (*GetClusterInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterInfo not implemented")
}

func RegisterMeshManagerServer(s *grpc.Server, srv MeshManagerServer) {
	s.RegisterService(&_MeshManager_serviceDesc, srv)
}

func _MeshManager_ListIstioConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIstioConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshManagerServer).ListIstioConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshmanager.MeshManager/ListIstioConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshManagerServer).ListIstioConfig(ctx, req.(*ListIstioConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshManager_InstallIstio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IstioInstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshManagerServer).InstallIstio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshmanager.MeshManager/InstallIstio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshManagerServer).InstallIstio(ctx, req.(*IstioInstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshManager_ListIstio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIstioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshManagerServer).ListIstio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshmanager.MeshManager/ListIstio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshManagerServer).ListIstio(ctx, req.(*ListIstioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshManager_UpdateIstio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IstioUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshManagerServer).UpdateIstio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshmanager.MeshManager/UpdateIstio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshManagerServer).UpdateIstio(ctx, req.(*IstioUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshManager_DeleteIstio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIstioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshManagerServer).DeleteIstio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshmanager.MeshManager/DeleteIstio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshManagerServer).DeleteIstio(ctx, req.(*DeleteIstioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshManager_GetIstioDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIstioDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshManagerServer).GetIstioDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshmanager.MeshManager/GetIstioDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshManagerServer).GetIstioDetail(ctx, req.(*GetIstioDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshManager_GetClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshManagerServer).GetClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshmanager.MeshManager/GetClusterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshManagerServer).GetClusterInfo(ctx, req.(*GetClusterInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MeshManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "meshmanager.MeshManager",
	HandlerType: (*MeshManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIstioConfig",
			Handler:    _MeshManager_ListIstioConfig_Handler,
		},
		{
			MethodName: "InstallIstio",
			Handler:    _MeshManager_InstallIstio_Handler,
		},
		{
			MethodName: "ListIstio",
			Handler:    _MeshManager_ListIstio_Handler,
		},
		{
			MethodName: "UpdateIstio",
			Handler:    _MeshManager_UpdateIstio_Handler,
		},
		{
			MethodName: "DeleteIstio",
			Handler:    _MeshManager_DeleteIstio_Handler,
		},
		{
			MethodName: "GetIstioDetail",
			Handler:    _MeshManager_GetIstioDetail_Handler,
		},
		{
			MethodName: "GetClusterInfo",
			Handler:    _MeshManager_GetClusterInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bcs-mesh-manager.proto",
}
