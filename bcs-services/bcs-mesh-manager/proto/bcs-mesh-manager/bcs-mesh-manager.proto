syntax = "proto3";
package meshmanager;

option go_package = "./;meshmanager";

import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "validate/validate.proto";
import "google/protobuf/struct.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info : {title : "Mesh Manager API Doc" version : "0.1.0"};
schemes : HTTP consumes : "application/json" produces : "application/json"
}
;

// WebAnnotations 权限信息
message WebAnnotations {
  google.protobuf.Struct perms = 1
      [ (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        title : "perms",
        description : "权限信息"
      } ];
}

service MeshManager {
  // ===== 版本管理相关 =====
  // 获取当前开放的istio版本
  rpc ListIstioVersion(ListIstioVersionRequest)
      returns (ListIstioVersionResponse) {
    option (google.api.http) = {
      get : "/meshmanager/v1/mesh/istio/version"
    };
  }

  // ===== Istio 相关 =====
  // 安装istio
  rpc InstallIstio(InstallIstioRequest) returns (InstallIstioResponse) {
    option (google.api.http) = {
      post : "/meshmanager/v1/mesh/istio/install"
      body : "*"
    };
  }

  // 获取istio列表
  rpc ListIstio(ListIstioRequest) returns (ListIstioResponse) {
    option (google.api.http) = {
      get : "/meshmanager/v1/mesh/istio/list"
    };
  }

  // 更新istio配置
  rpc UpdateIstio(UpdateIstioRequest) returns (UpdateIstioResponse) {
    option (google.api.http) = {
      put : "/meshmanager/v1/mesh/istio/{meshID}"
      body : "*"
    };
  }

  // 删除istio
  rpc DeleteIstio(DeleteIstioRequest) returns (DeleteIstioResponse) {
    option (google.api.http) = {
      delete : "/meshmanager/v1/mesh/istio/{meshID}"
    };
  }
}

// ===== 版本管理相关消息 =====
// 获取当前开放的istio版本请求
message ListIstioVersionRequest {}

// 获取当前开放的istio版本响应
message ListIstioVersionResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListIstioVersionResponse"
      description : "获取istio版本列表响应"
      required : [ "code", "message", "requestID", "web_annotations", "data" ]
    }
  };

  uint32 code = 1 [ (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
                        {title : "code", description : "返回错误码"} ];
  string message = 2
      [ (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        title : "message",
        description : "返回错误信息"
      } ];
  string requestID = 3
      [ (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        title : "request id",
        description : "请求 ID"
      } ];
  WebAnnotations web_annotations = 4
      [ (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        title : "web_annotations",
        description : "权限信息"
      } ];
  IstioVersionAndFeatures data = 5 [
    json_name = "data",
    (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
      title : "data"
      description : "响应数据"
    }
  ];
}

// 获取istio版本列表响应
message IstioVersionAndFeatures {
  repeated IstioVersion istioVersions = 1
      [ (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        title : "istioVersions"
        description : "istio版本列表"
      } ];
  map<string, FeatureConfig> featureConfigs = 2
      [ (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        title : "featureConfigs"
        description : "功能列表(注意版本)"
      } ];
}

// istio版本信息
message IstioVersion {
  string name = 1;         // 版本名称
  string version = 2;      // 版本号
  string chartVersion = 3; // chart 版本
  string kubeVersion = 4;  // 支持的 kube 版本
}

// 功能特性配置
message FeatureConfig {
  string name = 1;                     // 特性名称
  string description = 2;              // 特性描述
  string value = 3;                    // 特性值
  string defaultValue = 4;             // 默认值
  repeated string availableValues = 5; // 可选值
  repeated string supportVersions = 6; // 支持的版本
}

// ===== Mesh 管理相关消息 =====
// 安装istio请求
message InstallIstioRequest {
  string projectID = 1;                // 项目ID
  string projectCode = 2;              // 项目编码
  string name = 3;                     // 名称
  string description = 4;              // 描述
  string version = 5;                  // 使用的版本
  string controlPlaneMode = 6;         // 安装模式
  string clusterMode = 7;              // 多集群集群模式
  repeated string primaryClusters = 8; // 主集群列表
  repeated string remoteClusters = 9;  // 远程集群列表
  bool differentNetwork = 10; // 网络是否一致：关乎是否默认安装egress gateway
  ResourceConfig sidecarResourceConfig = 11; // sidecar资源配置
  HighAvailability highAvailability = 12;    // 高可用配置
  // 可观测性配置
  ObservabilityConfig observabilityConfig = 13;
  map<string, FeatureConfig> featureConfigs =
      15; // 功能特性[跟随版本关联的特性]
}

// 可观测性配置
message ObservabilityConfig {
  MetricsConfig metricsConfig = 1;           // 指标采集配置
  LogCollectorConfig logCollectorConfig = 2; // 日志采集配置
  TracingConfig tracingConfig = 3;           // 全量路追踪配置
}

// 高可用配置，hpa，副本数设置等
message HighAvailability {
  bool autoscaleEnabled = 1;                    // 是否开启hpa
  int32 autoscaleMin = 2;                       // hpa最小副本数
  int32 autoscaleMax = 3;                       // hpa最大副本数
  int32 replicaCount = 4;                       // 副本数
  int32 targetCPUAverageUtilizationPercent = 5; // 目标cpu平均使用率 0-100
  ResourceConfig resourceConfig = 6;            // resource配置
  DedicatedNode dedicatedNode = 7; // 专属节点（专用节点标签），默认会加上容忍
}

// 专属调度标签
message DedicatedNode {
  bool enabled = 1;                   // 是否启用
  map<string, string> nodeLabels = 2; // 节点标签
}

// resource配置
message ResourceConfig {
  string cpuRequest = 1;    // CPU请求
  string cpuLimit = 2;      // CPU限制
  string memoryRequest = 3; // 内存请求
  string memoryLimit = 4;   // 内存限制
}

// 日志采集配置
message LogCollectorConfig {
  bool enabled = 1;             // 是否启用
  string accessLogEncoding = 2; // 日志编码 [text, json]
  string accessLogFormat = 3;   // 日志格式
}

// tracing配置
message TracingConfig {
  bool enabled = 1;               // 是否启用
  int32 traceSamplingPercent = 2; // 采样率,百分比
  string endpoint = 3;            // 上报地址
  string bkToken = 4;             // 蓝鲸token
}

// 指标采集配置
message MetricsConfig {
  // 控制面指标
  bool controlPlaneMetricsEnabled = 1;
  // 数据面指标
  bool dataPlaneMetricsEnabled = 2;
}

// 安装istio响应
message InstallIstioResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "InstallIstioResponse"
      description : "安装istio响应"
      required : [ "code", "message", "requestID", "web_annotations", "data" ]
    }
  };

  uint32 code = 1 [ (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) =
                        {title : "code", description : "返回错误码"} ];
  string message = 2
      [ (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        title : "message",
        description : "返回错误信息"
      } ];
  string requestID = 3
      [ (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        title : "request id",
        description : "请求 ID"
      } ];
  WebAnnotations web_annotations = 4
      [ (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        title : "web_annotations",
        description : "权限信息"
      } ];
  string meshID = 5
      [ (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        title : "meshID",
        description : "meshID"
      } ];
}

// 获取istio列表请求
message ListIstioRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {title : "ListIstioRequest" description : "获取istio列表请求"}
  };

  string projectID = 1 [ (validate.rules).string = {min_len : 1} ];
  string meshID = 2;
  string meshName = 3;
  string status = 4;
  int32 page = 5 [ (validate.rules).int32 = {gt : 0, lte : 10000} ];
  int32 pageSize = 6 [ (validate.rules).int32 = {gt : 0, lte : 100} ];
}

// 获取istio列表响应
message ListIstioResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListIstioResponse"
      description : "获取istio网格列表响应"
      required : [ "code", "message", "requestID", "web_annotations", "data" ]
    }
  };

  uint32 code = 1;
  string message = 2;
  string requestID = 3;
  WebAnnotations web_annotations = 4;
  ListIstioData data = 5;
}

// istio列表响应
message ListIstioData {
  int32 total = 1;
  repeated IstioListItem items = 2;
}

// istio列表项
message IstioListItem {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {title : "IstioListItem" description : "istio列表项"}
  };

  string meshID = 1;        // meshID
  string meshName = 2;      // mesh名称
  string status = 3;        // 状态
  string statusMessage = 4; // 状态消息
  string chartVersion = 5;  // chart版本
  int64 createTime = 6;     // 创建时间
  int64 updateTime = 7;     // 更新时间
  string createBy = 8;      // 创建者
  string updateBy = 9;      // 更新者

  /* 保持跟 InstallIstioRequest 一致 */
  string projectID = 10;                // 项目ID
  string projectCode = 11;              // 项目编码
  string name = 12;                     // 名称
  string description = 13;              // 描述
  string version = 14;                  // 使用的版本
  string controlPlaneMode = 15;         // 安装模式
  string clusterMode = 16;              // 多集群集群模式
  repeated string primaryClusters = 17; // 主集群列表
  repeated string remoteClusters = 18;  // 远程集群列表
  bool differentNetwork = 19; // 网络是否一致：关乎是否默认安装egress gateway
  ResourceConfig sidecarResourceConfig = 20; // sidecar资源配置
  HighAvailability highAvailability = 21;    // 高可用配置
  // 可观测性配置
  ObservabilityConfig observabilityConfig = 22;
  map<string, FeatureConfig> featureConfigs =
      23; // 功能特性[跟随版本关联的特性]
}

// 更新istio请求
message UpdateIstioRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {title : "UpdateIstioRequest" description : "更新istio请求"}
  };

  string meshID = 1 [ (validate.rules).string = {min_len : 1} ];
  string meshName = 2;
  string chartVersion = 3;
  string description = 4;
  repeated string primaryClusters = 5;
  repeated string remoteClusters = 6;
  bool differentNetwork = 7;
  ResourceConfig sidecarResourceConfig = 8;
  HighAvailability highAvailability = 9;
  LogCollectorConfig logCollectorConfig = 10;
  TracingConfig tracingConfig = 11;
  map<string, FeatureConfig> featureConfigs = 12;
}

// 更新istio响应
message UpdateIstioResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "UpdateIstioResponse"
      description : "更新网格响应"
      required : [ "code", "message", "requestID", "web_annotations" ]
    }
  };

  uint32 code = 1;
  string message = 2;
  string requestID = 3;
  WebAnnotations web_annotations = 4;
}

// 删除istio请求
message DeleteIstioRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {title : "DeleteIstioRequest" description : "删除istio请求"}
  };

  string meshID = 1 [ (validate.rules).string = {min_len : 1} ];
}

// 删除istio响应
message DeleteIstioResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "DeleteIstioResponse"
      description : "删除网格响应"
      required : [ "code", "message", "requestID", "web_annotations" ]
    }
  };

  uint32 code = 1;
  string message = 2;
  string requestID = 3;
  WebAnnotations web_annotations = 4;
}