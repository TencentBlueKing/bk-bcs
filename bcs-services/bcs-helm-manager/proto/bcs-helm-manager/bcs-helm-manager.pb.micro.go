// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: bcs-helm-manager.proto

package helmmanager

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for HelmManager service

func NewHelmManagerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "HelmManager.Available",
			Path:    []string{"/helmmanager/v1/available"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.CreateRepository",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.UpdateRepository",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{name}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.GetRepository",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.DeleteRepository",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{name}"},
			Method:  []string{"DELETE"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.ListRepository",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.ListChart",
			Path:    []string{"/helmmanager/v1/chart/{projectID}/{repository}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.ListChartVersion",
			Path:    []string{"/helmmanager/v1/chart/{projectID}/{repository}/{name}/version"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.GetChartDetail",
			Path:    []string{"/helmmanager/v1/chart/{projectID}/{repository}/{name}/detail/{version}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.ListRelease",
			Path:    []string{"/helmmanager/v1/release/{clusterID}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.GetReleaseDetail",
			Path:    []string{"/helmmanager/v1/release/{clusterID}/{namespace}/{name}/detail"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.InstallRelease",
			Path:    []string{"/helmmanager/v1/release/{clusterID}/{namespace}/{name}/install"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.UninstallRelease",
			Path:    []string{"/helmmanager/v1/release/{clusterID}/{namespace}/{name}/uninstall"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.UpgradeRelease",
			Path:    []string{"/helmmanager/v1/release/{clusterID}/{namespace}/{name}/upgrade"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.RollbackRelease",
			Path:    []string{"/helmmanager/v1/release/{clusterID}/{namespace}/{name}/rollback"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.GetReleaseHistory",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}/history"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for HelmManager service

type HelmManagerService interface {
	//* common service
	Available(ctx context.Context, in *AvailableReq, opts ...client.CallOption) (*AvailableResp, error)
	//* repository service
	CreateRepository(ctx context.Context, in *CreateRepositoryReq, opts ...client.CallOption) (*CreateRepositoryResp, error)
	UpdateRepository(ctx context.Context, in *UpdateRepositoryReq, opts ...client.CallOption) (*UpdateRepositoryResp, error)
	GetRepository(ctx context.Context, in *GetRepositoryReq, opts ...client.CallOption) (*GetRepositoryResp, error)
	DeleteRepository(ctx context.Context, in *DeleteRepositoryReq, opts ...client.CallOption) (*DeleteRepositoryResp, error)
	ListRepository(ctx context.Context, in *ListRepositoryReq, opts ...client.CallOption) (*ListRepositoryResp, error)
	//* chart service
	ListChart(ctx context.Context, in *ListChartReq, opts ...client.CallOption) (*ListChartResp, error)
	ListChartVersion(ctx context.Context, in *ListChartVersionReq, opts ...client.CallOption) (*ListChartVersionResp, error)
	GetChartDetail(ctx context.Context, in *GetChartDetailReq, opts ...client.CallOption) (*GetChartDetailResp, error)
	//* release service
	ListRelease(ctx context.Context, in *ListReleaseReq, opts ...client.CallOption) (*ListReleaseResp, error)
	GetReleaseDetail(ctx context.Context, in *GetReleaseDetailReq, opts ...client.CallOption) (*GetReleaseDetailResp, error)
	InstallRelease(ctx context.Context, in *InstallReleaseReq, opts ...client.CallOption) (*InstallReleaseResp, error)
	UninstallRelease(ctx context.Context, in *UninstallReleaseReq, opts ...client.CallOption) (*UninstallReleaseResp, error)
	UpgradeRelease(ctx context.Context, in *UpgradeReleaseReq, opts ...client.CallOption) (*UpgradeReleaseResp, error)
	RollbackRelease(ctx context.Context, in *RollbackReleaseReq, opts ...client.CallOption) (*RollbackReleaseResp, error)
	GetReleaseHistory(ctx context.Context, in *GetReleaseHistoryReq, opts ...client.CallOption) (*GetReleaseHistoryResp, error)
}

type helmManagerService struct {
	c    client.Client
	name string
}

func NewHelmManagerService(name string, c client.Client) HelmManagerService {
	return &helmManagerService{
		c:    c,
		name: name,
	}
}

func (c *helmManagerService) Available(ctx context.Context, in *AvailableReq, opts ...client.CallOption) (*AvailableResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.Available", in)
	out := new(AvailableResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) CreateRepository(ctx context.Context, in *CreateRepositoryReq, opts ...client.CallOption) (*CreateRepositoryResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.CreateRepository", in)
	out := new(CreateRepositoryResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) UpdateRepository(ctx context.Context, in *UpdateRepositoryReq, opts ...client.CallOption) (*UpdateRepositoryResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.UpdateRepository", in)
	out := new(UpdateRepositoryResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) GetRepository(ctx context.Context, in *GetRepositoryReq, opts ...client.CallOption) (*GetRepositoryResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.GetRepository", in)
	out := new(GetRepositoryResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) DeleteRepository(ctx context.Context, in *DeleteRepositoryReq, opts ...client.CallOption) (*DeleteRepositoryResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.DeleteRepository", in)
	out := new(DeleteRepositoryResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) ListRepository(ctx context.Context, in *ListRepositoryReq, opts ...client.CallOption) (*ListRepositoryResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.ListRepository", in)
	out := new(ListRepositoryResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) ListChart(ctx context.Context, in *ListChartReq, opts ...client.CallOption) (*ListChartResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.ListChart", in)
	out := new(ListChartResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) ListChartVersion(ctx context.Context, in *ListChartVersionReq, opts ...client.CallOption) (*ListChartVersionResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.ListChartVersion", in)
	out := new(ListChartVersionResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) GetChartDetail(ctx context.Context, in *GetChartDetailReq, opts ...client.CallOption) (*GetChartDetailResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.GetChartDetail", in)
	out := new(GetChartDetailResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) ListRelease(ctx context.Context, in *ListReleaseReq, opts ...client.CallOption) (*ListReleaseResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.ListRelease", in)
	out := new(ListReleaseResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) GetReleaseDetail(ctx context.Context, in *GetReleaseDetailReq, opts ...client.CallOption) (*GetReleaseDetailResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.GetReleaseDetail", in)
	out := new(GetReleaseDetailResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) InstallRelease(ctx context.Context, in *InstallReleaseReq, opts ...client.CallOption) (*InstallReleaseResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.InstallRelease", in)
	out := new(InstallReleaseResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) UninstallRelease(ctx context.Context, in *UninstallReleaseReq, opts ...client.CallOption) (*UninstallReleaseResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.UninstallRelease", in)
	out := new(UninstallReleaseResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) UpgradeRelease(ctx context.Context, in *UpgradeReleaseReq, opts ...client.CallOption) (*UpgradeReleaseResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.UpgradeRelease", in)
	out := new(UpgradeReleaseResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) RollbackRelease(ctx context.Context, in *RollbackReleaseReq, opts ...client.CallOption) (*RollbackReleaseResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.RollbackRelease", in)
	out := new(RollbackReleaseResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) GetReleaseHistory(ctx context.Context, in *GetReleaseHistoryReq, opts ...client.CallOption) (*GetReleaseHistoryResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.GetReleaseHistory", in)
	out := new(GetReleaseHistoryResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HelmManager service

type HelmManagerHandler interface {
	//* common service
	Available(context.Context, *AvailableReq, *AvailableResp) error
	//* repository service
	CreateRepository(context.Context, *CreateRepositoryReq, *CreateRepositoryResp) error
	UpdateRepository(context.Context, *UpdateRepositoryReq, *UpdateRepositoryResp) error
	GetRepository(context.Context, *GetRepositoryReq, *GetRepositoryResp) error
	DeleteRepository(context.Context, *DeleteRepositoryReq, *DeleteRepositoryResp) error
	ListRepository(context.Context, *ListRepositoryReq, *ListRepositoryResp) error
	//* chart service
	ListChart(context.Context, *ListChartReq, *ListChartResp) error
	ListChartVersion(context.Context, *ListChartVersionReq, *ListChartVersionResp) error
	GetChartDetail(context.Context, *GetChartDetailReq, *GetChartDetailResp) error
	//* release service
	ListRelease(context.Context, *ListReleaseReq, *ListReleaseResp) error
	GetReleaseDetail(context.Context, *GetReleaseDetailReq, *GetReleaseDetailResp) error
	InstallRelease(context.Context, *InstallReleaseReq, *InstallReleaseResp) error
	UninstallRelease(context.Context, *UninstallReleaseReq, *UninstallReleaseResp) error
	UpgradeRelease(context.Context, *UpgradeReleaseReq, *UpgradeReleaseResp) error
	RollbackRelease(context.Context, *RollbackReleaseReq, *RollbackReleaseResp) error
	GetReleaseHistory(context.Context, *GetReleaseHistoryReq, *GetReleaseHistoryResp) error
}

func RegisterHelmManagerHandler(s server.Server, hdlr HelmManagerHandler, opts ...server.HandlerOption) error {
	type helmManager interface {
		Available(ctx context.Context, in *AvailableReq, out *AvailableResp) error
		CreateRepository(ctx context.Context, in *CreateRepositoryReq, out *CreateRepositoryResp) error
		UpdateRepository(ctx context.Context, in *UpdateRepositoryReq, out *UpdateRepositoryResp) error
		GetRepository(ctx context.Context, in *GetRepositoryReq, out *GetRepositoryResp) error
		DeleteRepository(ctx context.Context, in *DeleteRepositoryReq, out *DeleteRepositoryResp) error
		ListRepository(ctx context.Context, in *ListRepositoryReq, out *ListRepositoryResp) error
		ListChart(ctx context.Context, in *ListChartReq, out *ListChartResp) error
		ListChartVersion(ctx context.Context, in *ListChartVersionReq, out *ListChartVersionResp) error
		GetChartDetail(ctx context.Context, in *GetChartDetailReq, out *GetChartDetailResp) error
		ListRelease(ctx context.Context, in *ListReleaseReq, out *ListReleaseResp) error
		GetReleaseDetail(ctx context.Context, in *GetReleaseDetailReq, out *GetReleaseDetailResp) error
		InstallRelease(ctx context.Context, in *InstallReleaseReq, out *InstallReleaseResp) error
		UninstallRelease(ctx context.Context, in *UninstallReleaseReq, out *UninstallReleaseResp) error
		UpgradeRelease(ctx context.Context, in *UpgradeReleaseReq, out *UpgradeReleaseResp) error
		RollbackRelease(ctx context.Context, in *RollbackReleaseReq, out *RollbackReleaseResp) error
		GetReleaseHistory(ctx context.Context, in *GetReleaseHistoryReq, out *GetReleaseHistoryResp) error
	}
	type HelmManager struct {
		helmManager
	}
	h := &helmManagerHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.Available",
		Path:    []string{"/helmmanager/v1/available"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.CreateRepository",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.UpdateRepository",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{name}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.GetRepository",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.DeleteRepository",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{name}"},
		Method:  []string{"DELETE"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.ListRepository",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.ListChart",
		Path:    []string{"/helmmanager/v1/chart/{projectID}/{repository}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.ListChartVersion",
		Path:    []string{"/helmmanager/v1/chart/{projectID}/{repository}/{name}/version"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.GetChartDetail",
		Path:    []string{"/helmmanager/v1/chart/{projectID}/{repository}/{name}/detail/{version}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.ListRelease",
		Path:    []string{"/helmmanager/v1/release/{clusterID}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.GetReleaseDetail",
		Path:    []string{"/helmmanager/v1/release/{clusterID}/{namespace}/{name}/detail"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.InstallRelease",
		Path:    []string{"/helmmanager/v1/release/{clusterID}/{namespace}/{name}/install"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.UninstallRelease",
		Path:    []string{"/helmmanager/v1/release/{clusterID}/{namespace}/{name}/uninstall"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.UpgradeRelease",
		Path:    []string{"/helmmanager/v1/release/{clusterID}/{namespace}/{name}/upgrade"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.RollbackRelease",
		Path:    []string{"/helmmanager/v1/release/{clusterID}/{namespace}/{name}/rollback"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.GetReleaseHistory",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}/history"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&HelmManager{h}, opts...))
}

type helmManagerHandler struct {
	HelmManagerHandler
}

func (h *helmManagerHandler) Available(ctx context.Context, in *AvailableReq, out *AvailableResp) error {
	return h.HelmManagerHandler.Available(ctx, in, out)
}

func (h *helmManagerHandler) CreateRepository(ctx context.Context, in *CreateRepositoryReq, out *CreateRepositoryResp) error {
	return h.HelmManagerHandler.CreateRepository(ctx, in, out)
}

func (h *helmManagerHandler) UpdateRepository(ctx context.Context, in *UpdateRepositoryReq, out *UpdateRepositoryResp) error {
	return h.HelmManagerHandler.UpdateRepository(ctx, in, out)
}

func (h *helmManagerHandler) GetRepository(ctx context.Context, in *GetRepositoryReq, out *GetRepositoryResp) error {
	return h.HelmManagerHandler.GetRepository(ctx, in, out)
}

func (h *helmManagerHandler) DeleteRepository(ctx context.Context, in *DeleteRepositoryReq, out *DeleteRepositoryResp) error {
	return h.HelmManagerHandler.DeleteRepository(ctx, in, out)
}

func (h *helmManagerHandler) ListRepository(ctx context.Context, in *ListRepositoryReq, out *ListRepositoryResp) error {
	return h.HelmManagerHandler.ListRepository(ctx, in, out)
}

func (h *helmManagerHandler) ListChart(ctx context.Context, in *ListChartReq, out *ListChartResp) error {
	return h.HelmManagerHandler.ListChart(ctx, in, out)
}

func (h *helmManagerHandler) ListChartVersion(ctx context.Context, in *ListChartVersionReq, out *ListChartVersionResp) error {
	return h.HelmManagerHandler.ListChartVersion(ctx, in, out)
}

func (h *helmManagerHandler) GetChartDetail(ctx context.Context, in *GetChartDetailReq, out *GetChartDetailResp) error {
	return h.HelmManagerHandler.GetChartDetail(ctx, in, out)
}

func (h *helmManagerHandler) ListRelease(ctx context.Context, in *ListReleaseReq, out *ListReleaseResp) error {
	return h.HelmManagerHandler.ListRelease(ctx, in, out)
}

func (h *helmManagerHandler) GetReleaseDetail(ctx context.Context, in *GetReleaseDetailReq, out *GetReleaseDetailResp) error {
	return h.HelmManagerHandler.GetReleaseDetail(ctx, in, out)
}

func (h *helmManagerHandler) InstallRelease(ctx context.Context, in *InstallReleaseReq, out *InstallReleaseResp) error {
	return h.HelmManagerHandler.InstallRelease(ctx, in, out)
}

func (h *helmManagerHandler) UninstallRelease(ctx context.Context, in *UninstallReleaseReq, out *UninstallReleaseResp) error {
	return h.HelmManagerHandler.UninstallRelease(ctx, in, out)
}

func (h *helmManagerHandler) UpgradeRelease(ctx context.Context, in *UpgradeReleaseReq, out *UpgradeReleaseResp) error {
	return h.HelmManagerHandler.UpgradeRelease(ctx, in, out)
}

func (h *helmManagerHandler) RollbackRelease(ctx context.Context, in *RollbackReleaseReq, out *RollbackReleaseResp) error {
	return h.HelmManagerHandler.RollbackRelease(ctx, in, out)
}

func (h *helmManagerHandler) GetReleaseHistory(ctx context.Context, in *GetReleaseHistoryReq, out *GetReleaseHistoryResp) error {
	return h.HelmManagerHandler.GetReleaseHistory(ctx, in, out)
}
