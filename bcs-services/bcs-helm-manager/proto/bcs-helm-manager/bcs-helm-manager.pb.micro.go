// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/bcs-helm-manager/bcs-helm-manager.proto

package helmmanager

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for HelmManager service

func NewHelmManagerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "HelmManager.Available",
			Path:    []string{"/helmmanager/v1/available"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.CreateRepository",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.UpdateRepository",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{name}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.GetRepository",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.DeleteRepository",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{name}"},
			Method:  []string{"DELETE"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.ListRepository",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.ListChartV1",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{repoName}/charts"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.GetChartDetailV1",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{repoName}/charts/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.ListChartVersionV1",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{repoName}/charts/{name}/versions"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.GetVersionDetailV1",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{repoName}/charts/{name}/versions/{version}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.DeleteChart",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{repoName}/charts/{name}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.DeleteChartVersion",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{repoName}/charts/{name}/versions/{version}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.DownloadChart",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{repoName}/charts/{name}/versions/{version}/download"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.UploadChart",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{repoName}/charts/version/{version}/upload"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.GetChartRelease",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{repoName}/charts/{name}/releases"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.ListReleaseV1",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/releases"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.GetReleaseDetailV1",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.InstallReleaseV1",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.UninstallReleaseV1",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}"},
			Method:  []string{"DELETE"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.UpgradeReleaseV1",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.RollbackReleaseV1",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}/rollback"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.ReleasePreview",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}/preview"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.GetReleaseHistory",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}/history"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.GetReleaseManifest",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}/revisions/{revision}/manifest"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.GetReleaseStatus",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}/status"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.GetReleasePods",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}/pods"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "HelmManager.ImportClusterRelease",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}/import"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for HelmManager service

type HelmManagerService interface {
	//* common service
	Available(ctx context.Context, in *AvailableReq, opts ...client.CallOption) (*AvailableResp, error)
	//* repository service
	CreateRepository(ctx context.Context, in *CreateRepositoryReq, opts ...client.CallOption) (*CreateRepositoryResp, error)
	UpdateRepository(ctx context.Context, in *UpdateRepositoryReq, opts ...client.CallOption) (*UpdateRepositoryResp, error)
	GetRepository(ctx context.Context, in *GetRepositoryReq, opts ...client.CallOption) (*GetRepositoryResp, error)
	DeleteRepository(ctx context.Context, in *DeleteRepositoryReq, opts ...client.CallOption) (*DeleteRepositoryResp, error)
	ListRepository(ctx context.Context, in *ListRepositoryReq, opts ...client.CallOption) (*ListRepositoryResp, error)
	//* chart service
	ListChartV1(ctx context.Context, in *ListChartV1Req, opts ...client.CallOption) (*ListChartV1Resp, error)
	GetChartDetailV1(ctx context.Context, in *GetChartDetailV1Req, opts ...client.CallOption) (*GetChartDetailV1Resp, error)
	ListChartVersionV1(ctx context.Context, in *ListChartVersionV1Req, opts ...client.CallOption) (*ListChartVersionV1Resp, error)
	GetVersionDetailV1(ctx context.Context, in *GetVersionDetailV1Req, opts ...client.CallOption) (*GetVersionDetailV1Resp, error)
	DeleteChart(ctx context.Context, in *DeleteChartReq, opts ...client.CallOption) (*DeleteChartResp, error)
	DeleteChartVersion(ctx context.Context, in *DeleteChartVersionReq, opts ...client.CallOption) (*DeleteChartVersionResp, error)
	DownloadChart(ctx context.Context, in *DownloadChartReq, opts ...client.CallOption) (*httpbody.HttpBody, error)
	UploadChart(ctx context.Context, in *UploadChartReq, opts ...client.CallOption) (*UploadChartResp, error)
	GetChartRelease(ctx context.Context, in *GetChartReleaseReq, opts ...client.CallOption) (*GetChartReleaseResp, error)
	//* release service
	ListReleaseV1(ctx context.Context, in *ListReleaseV1Req, opts ...client.CallOption) (*ListReleaseV1Resp, error)
	GetReleaseDetailV1(ctx context.Context, in *GetReleaseDetailV1Req, opts ...client.CallOption) (*GetReleaseDetailV1Resp, error)
	InstallReleaseV1(ctx context.Context, in *InstallReleaseV1Req, opts ...client.CallOption) (*InstallReleaseV1Resp, error)
	UninstallReleaseV1(ctx context.Context, in *UninstallReleaseV1Req, opts ...client.CallOption) (*UninstallReleaseV1Resp, error)
	UpgradeReleaseV1(ctx context.Context, in *UpgradeReleaseV1Req, opts ...client.CallOption) (*UpgradeReleaseV1Resp, error)
	RollbackReleaseV1(ctx context.Context, in *RollbackReleaseV1Req, opts ...client.CallOption) (*RollbackReleaseV1Resp, error)
	ReleasePreview(ctx context.Context, in *ReleasePreviewReq, opts ...client.CallOption) (*ReleasePreviewResp, error)
	GetReleaseHistory(ctx context.Context, in *GetReleaseHistoryReq, opts ...client.CallOption) (*GetReleaseHistoryResp, error)
	GetReleaseManifest(ctx context.Context, in *GetReleaseManifestReq, opts ...client.CallOption) (*GetReleaseManifestResp, error)
	GetReleaseStatus(ctx context.Context, in *GetReleaseStatusReq, opts ...client.CallOption) (*CommonListResp, error)
	GetReleasePods(ctx context.Context, in *GetReleasePodsReq, opts ...client.CallOption) (*CommonListResp, error)
	ImportClusterRelease(ctx context.Context, in *ImportClusterReleaseReq, opts ...client.CallOption) (*ImportClusterReleaseResp, error)
}

type helmManagerService struct {
	c    client.Client
	name string
}

func NewHelmManagerService(name string, c client.Client) HelmManagerService {
	return &helmManagerService{
		c:    c,
		name: name,
	}
}

func (c *helmManagerService) Available(ctx context.Context, in *AvailableReq, opts ...client.CallOption) (*AvailableResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.Available", in)
	out := new(AvailableResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) CreateRepository(ctx context.Context, in *CreateRepositoryReq, opts ...client.CallOption) (*CreateRepositoryResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.CreateRepository", in)
	out := new(CreateRepositoryResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) UpdateRepository(ctx context.Context, in *UpdateRepositoryReq, opts ...client.CallOption) (*UpdateRepositoryResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.UpdateRepository", in)
	out := new(UpdateRepositoryResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) GetRepository(ctx context.Context, in *GetRepositoryReq, opts ...client.CallOption) (*GetRepositoryResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.GetRepository", in)
	out := new(GetRepositoryResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) DeleteRepository(ctx context.Context, in *DeleteRepositoryReq, opts ...client.CallOption) (*DeleteRepositoryResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.DeleteRepository", in)
	out := new(DeleteRepositoryResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) ListRepository(ctx context.Context, in *ListRepositoryReq, opts ...client.CallOption) (*ListRepositoryResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.ListRepository", in)
	out := new(ListRepositoryResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) ListChartV1(ctx context.Context, in *ListChartV1Req, opts ...client.CallOption) (*ListChartV1Resp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.ListChartV1", in)
	out := new(ListChartV1Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) GetChartDetailV1(ctx context.Context, in *GetChartDetailV1Req, opts ...client.CallOption) (*GetChartDetailV1Resp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.GetChartDetailV1", in)
	out := new(GetChartDetailV1Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) ListChartVersionV1(ctx context.Context, in *ListChartVersionV1Req, opts ...client.CallOption) (*ListChartVersionV1Resp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.ListChartVersionV1", in)
	out := new(ListChartVersionV1Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) GetVersionDetailV1(ctx context.Context, in *GetVersionDetailV1Req, opts ...client.CallOption) (*GetVersionDetailV1Resp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.GetVersionDetailV1", in)
	out := new(GetVersionDetailV1Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) DeleteChart(ctx context.Context, in *DeleteChartReq, opts ...client.CallOption) (*DeleteChartResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.DeleteChart", in)
	out := new(DeleteChartResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) DeleteChartVersion(ctx context.Context, in *DeleteChartVersionReq, opts ...client.CallOption) (*DeleteChartVersionResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.DeleteChartVersion", in)
	out := new(DeleteChartVersionResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) DownloadChart(ctx context.Context, in *DownloadChartReq, opts ...client.CallOption) (*httpbody.HttpBody, error) {
	req := c.c.NewRequest(c.name, "HelmManager.DownloadChart", in)
	out := new(httpbody.HttpBody)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) UploadChart(ctx context.Context, in *UploadChartReq, opts ...client.CallOption) (*UploadChartResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.UploadChart", in)
	out := new(UploadChartResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) GetChartRelease(ctx context.Context, in *GetChartReleaseReq, opts ...client.CallOption) (*GetChartReleaseResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.GetChartRelease", in)
	out := new(GetChartReleaseResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) ListReleaseV1(ctx context.Context, in *ListReleaseV1Req, opts ...client.CallOption) (*ListReleaseV1Resp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.ListReleaseV1", in)
	out := new(ListReleaseV1Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) GetReleaseDetailV1(ctx context.Context, in *GetReleaseDetailV1Req, opts ...client.CallOption) (*GetReleaseDetailV1Resp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.GetReleaseDetailV1", in)
	out := new(GetReleaseDetailV1Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) InstallReleaseV1(ctx context.Context, in *InstallReleaseV1Req, opts ...client.CallOption) (*InstallReleaseV1Resp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.InstallReleaseV1", in)
	out := new(InstallReleaseV1Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) UninstallReleaseV1(ctx context.Context, in *UninstallReleaseV1Req, opts ...client.CallOption) (*UninstallReleaseV1Resp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.UninstallReleaseV1", in)
	out := new(UninstallReleaseV1Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) UpgradeReleaseV1(ctx context.Context, in *UpgradeReleaseV1Req, opts ...client.CallOption) (*UpgradeReleaseV1Resp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.UpgradeReleaseV1", in)
	out := new(UpgradeReleaseV1Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) RollbackReleaseV1(ctx context.Context, in *RollbackReleaseV1Req, opts ...client.CallOption) (*RollbackReleaseV1Resp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.RollbackReleaseV1", in)
	out := new(RollbackReleaseV1Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) ReleasePreview(ctx context.Context, in *ReleasePreviewReq, opts ...client.CallOption) (*ReleasePreviewResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.ReleasePreview", in)
	out := new(ReleasePreviewResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) GetReleaseHistory(ctx context.Context, in *GetReleaseHistoryReq, opts ...client.CallOption) (*GetReleaseHistoryResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.GetReleaseHistory", in)
	out := new(GetReleaseHistoryResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) GetReleaseManifest(ctx context.Context, in *GetReleaseManifestReq, opts ...client.CallOption) (*GetReleaseManifestResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.GetReleaseManifest", in)
	out := new(GetReleaseManifestResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) GetReleaseStatus(ctx context.Context, in *GetReleaseStatusReq, opts ...client.CallOption) (*CommonListResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.GetReleaseStatus", in)
	out := new(CommonListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) GetReleasePods(ctx context.Context, in *GetReleasePodsReq, opts ...client.CallOption) (*CommonListResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.GetReleasePods", in)
	out := new(CommonListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmManagerService) ImportClusterRelease(ctx context.Context, in *ImportClusterReleaseReq, opts ...client.CallOption) (*ImportClusterReleaseResp, error) {
	req := c.c.NewRequest(c.name, "HelmManager.ImportClusterRelease", in)
	out := new(ImportClusterReleaseResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HelmManager service

type HelmManagerHandler interface {
	//* common service
	Available(context.Context, *AvailableReq, *AvailableResp) error
	//* repository service
	CreateRepository(context.Context, *CreateRepositoryReq, *CreateRepositoryResp) error
	UpdateRepository(context.Context, *UpdateRepositoryReq, *UpdateRepositoryResp) error
	GetRepository(context.Context, *GetRepositoryReq, *GetRepositoryResp) error
	DeleteRepository(context.Context, *DeleteRepositoryReq, *DeleteRepositoryResp) error
	ListRepository(context.Context, *ListRepositoryReq, *ListRepositoryResp) error
	//* chart service
	ListChartV1(context.Context, *ListChartV1Req, *ListChartV1Resp) error
	GetChartDetailV1(context.Context, *GetChartDetailV1Req, *GetChartDetailV1Resp) error
	ListChartVersionV1(context.Context, *ListChartVersionV1Req, *ListChartVersionV1Resp) error
	GetVersionDetailV1(context.Context, *GetVersionDetailV1Req, *GetVersionDetailV1Resp) error
	DeleteChart(context.Context, *DeleteChartReq, *DeleteChartResp) error
	DeleteChartVersion(context.Context, *DeleteChartVersionReq, *DeleteChartVersionResp) error
	DownloadChart(context.Context, *DownloadChartReq, *httpbody.HttpBody) error
	UploadChart(context.Context, *UploadChartReq, *UploadChartResp) error
	GetChartRelease(context.Context, *GetChartReleaseReq, *GetChartReleaseResp) error
	//* release service
	ListReleaseV1(context.Context, *ListReleaseV1Req, *ListReleaseV1Resp) error
	GetReleaseDetailV1(context.Context, *GetReleaseDetailV1Req, *GetReleaseDetailV1Resp) error
	InstallReleaseV1(context.Context, *InstallReleaseV1Req, *InstallReleaseV1Resp) error
	UninstallReleaseV1(context.Context, *UninstallReleaseV1Req, *UninstallReleaseV1Resp) error
	UpgradeReleaseV1(context.Context, *UpgradeReleaseV1Req, *UpgradeReleaseV1Resp) error
	RollbackReleaseV1(context.Context, *RollbackReleaseV1Req, *RollbackReleaseV1Resp) error
	ReleasePreview(context.Context, *ReleasePreviewReq, *ReleasePreviewResp) error
	GetReleaseHistory(context.Context, *GetReleaseHistoryReq, *GetReleaseHistoryResp) error
	GetReleaseManifest(context.Context, *GetReleaseManifestReq, *GetReleaseManifestResp) error
	GetReleaseStatus(context.Context, *GetReleaseStatusReq, *CommonListResp) error
	GetReleasePods(context.Context, *GetReleasePodsReq, *CommonListResp) error
	ImportClusterRelease(context.Context, *ImportClusterReleaseReq, *ImportClusterReleaseResp) error
}

func RegisterHelmManagerHandler(s server.Server, hdlr HelmManagerHandler, opts ...server.HandlerOption) error {
	type helmManager interface {
		Available(ctx context.Context, in *AvailableReq, out *AvailableResp) error
		CreateRepository(ctx context.Context, in *CreateRepositoryReq, out *CreateRepositoryResp) error
		UpdateRepository(ctx context.Context, in *UpdateRepositoryReq, out *UpdateRepositoryResp) error
		GetRepository(ctx context.Context, in *GetRepositoryReq, out *GetRepositoryResp) error
		DeleteRepository(ctx context.Context, in *DeleteRepositoryReq, out *DeleteRepositoryResp) error
		ListRepository(ctx context.Context, in *ListRepositoryReq, out *ListRepositoryResp) error
		ListChartV1(ctx context.Context, in *ListChartV1Req, out *ListChartV1Resp) error
		GetChartDetailV1(ctx context.Context, in *GetChartDetailV1Req, out *GetChartDetailV1Resp) error
		ListChartVersionV1(ctx context.Context, in *ListChartVersionV1Req, out *ListChartVersionV1Resp) error
		GetVersionDetailV1(ctx context.Context, in *GetVersionDetailV1Req, out *GetVersionDetailV1Resp) error
		DeleteChart(ctx context.Context, in *DeleteChartReq, out *DeleteChartResp) error
		DeleteChartVersion(ctx context.Context, in *DeleteChartVersionReq, out *DeleteChartVersionResp) error
		DownloadChart(ctx context.Context, in *DownloadChartReq, out *httpbody.HttpBody) error
		UploadChart(ctx context.Context, in *UploadChartReq, out *UploadChartResp) error
		GetChartRelease(ctx context.Context, in *GetChartReleaseReq, out *GetChartReleaseResp) error
		ListReleaseV1(ctx context.Context, in *ListReleaseV1Req, out *ListReleaseV1Resp) error
		GetReleaseDetailV1(ctx context.Context, in *GetReleaseDetailV1Req, out *GetReleaseDetailV1Resp) error
		InstallReleaseV1(ctx context.Context, in *InstallReleaseV1Req, out *InstallReleaseV1Resp) error
		UninstallReleaseV1(ctx context.Context, in *UninstallReleaseV1Req, out *UninstallReleaseV1Resp) error
		UpgradeReleaseV1(ctx context.Context, in *UpgradeReleaseV1Req, out *UpgradeReleaseV1Resp) error
		RollbackReleaseV1(ctx context.Context, in *RollbackReleaseV1Req, out *RollbackReleaseV1Resp) error
		ReleasePreview(ctx context.Context, in *ReleasePreviewReq, out *ReleasePreviewResp) error
		GetReleaseHistory(ctx context.Context, in *GetReleaseHistoryReq, out *GetReleaseHistoryResp) error
		GetReleaseManifest(ctx context.Context, in *GetReleaseManifestReq, out *GetReleaseManifestResp) error
		GetReleaseStatus(ctx context.Context, in *GetReleaseStatusReq, out *CommonListResp) error
		GetReleasePods(ctx context.Context, in *GetReleasePodsReq, out *CommonListResp) error
		ImportClusterRelease(ctx context.Context, in *ImportClusterReleaseReq, out *ImportClusterReleaseResp) error
	}
	type HelmManager struct {
		helmManager
	}
	h := &helmManagerHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.Available",
		Path:    []string{"/helmmanager/v1/available"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.CreateRepository",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.UpdateRepository",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{name}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.GetRepository",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.DeleteRepository",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{name}"},
		Method:  []string{"DELETE"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.ListRepository",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.ListChartV1",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{repoName}/charts"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.GetChartDetailV1",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{repoName}/charts/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.ListChartVersionV1",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{repoName}/charts/{name}/versions"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.GetVersionDetailV1",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{repoName}/charts/{name}/versions/{version}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.DeleteChart",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{repoName}/charts/{name}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.DeleteChartVersion",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{repoName}/charts/{name}/versions/{version}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.DownloadChart",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{repoName}/charts/{name}/versions/{version}/download"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.UploadChart",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{repoName}/charts/version/{version}/upload"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.GetChartRelease",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/repos/{repoName}/charts/{name}/releases"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.ListReleaseV1",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/releases"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.GetReleaseDetailV1",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.InstallReleaseV1",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.UninstallReleaseV1",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}"},
		Method:  []string{"DELETE"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.UpgradeReleaseV1",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.RollbackReleaseV1",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}/rollback"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.ReleasePreview",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}/preview"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.GetReleaseHistory",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}/history"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.GetReleaseManifest",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}/revisions/{revision}/manifest"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.GetReleaseStatus",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}/status"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.GetReleasePods",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}/pods"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "HelmManager.ImportClusterRelease",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/namespaces/{namespace}/releases/{name}/import"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&HelmManager{h}, opts...))
}

type helmManagerHandler struct {
	HelmManagerHandler
}

func (h *helmManagerHandler) Available(ctx context.Context, in *AvailableReq, out *AvailableResp) error {
	return h.HelmManagerHandler.Available(ctx, in, out)
}

func (h *helmManagerHandler) CreateRepository(ctx context.Context, in *CreateRepositoryReq, out *CreateRepositoryResp) error {
	return h.HelmManagerHandler.CreateRepository(ctx, in, out)
}

func (h *helmManagerHandler) UpdateRepository(ctx context.Context, in *UpdateRepositoryReq, out *UpdateRepositoryResp) error {
	return h.HelmManagerHandler.UpdateRepository(ctx, in, out)
}

func (h *helmManagerHandler) GetRepository(ctx context.Context, in *GetRepositoryReq, out *GetRepositoryResp) error {
	return h.HelmManagerHandler.GetRepository(ctx, in, out)
}

func (h *helmManagerHandler) DeleteRepository(ctx context.Context, in *DeleteRepositoryReq, out *DeleteRepositoryResp) error {
	return h.HelmManagerHandler.DeleteRepository(ctx, in, out)
}

func (h *helmManagerHandler) ListRepository(ctx context.Context, in *ListRepositoryReq, out *ListRepositoryResp) error {
	return h.HelmManagerHandler.ListRepository(ctx, in, out)
}

func (h *helmManagerHandler) ListChartV1(ctx context.Context, in *ListChartV1Req, out *ListChartV1Resp) error {
	return h.HelmManagerHandler.ListChartV1(ctx, in, out)
}

func (h *helmManagerHandler) GetChartDetailV1(ctx context.Context, in *GetChartDetailV1Req, out *GetChartDetailV1Resp) error {
	return h.HelmManagerHandler.GetChartDetailV1(ctx, in, out)
}

func (h *helmManagerHandler) ListChartVersionV1(ctx context.Context, in *ListChartVersionV1Req, out *ListChartVersionV1Resp) error {
	return h.HelmManagerHandler.ListChartVersionV1(ctx, in, out)
}

func (h *helmManagerHandler) GetVersionDetailV1(ctx context.Context, in *GetVersionDetailV1Req, out *GetVersionDetailV1Resp) error {
	return h.HelmManagerHandler.GetVersionDetailV1(ctx, in, out)
}

func (h *helmManagerHandler) DeleteChart(ctx context.Context, in *DeleteChartReq, out *DeleteChartResp) error {
	return h.HelmManagerHandler.DeleteChart(ctx, in, out)
}

func (h *helmManagerHandler) DeleteChartVersion(ctx context.Context, in *DeleteChartVersionReq, out *DeleteChartVersionResp) error {
	return h.HelmManagerHandler.DeleteChartVersion(ctx, in, out)
}

func (h *helmManagerHandler) DownloadChart(ctx context.Context, in *DownloadChartReq, out *httpbody.HttpBody) error {
	return h.HelmManagerHandler.DownloadChart(ctx, in, out)
}

func (h *helmManagerHandler) UploadChart(ctx context.Context, in *UploadChartReq, out *UploadChartResp) error {
	return h.HelmManagerHandler.UploadChart(ctx, in, out)
}

func (h *helmManagerHandler) GetChartRelease(ctx context.Context, in *GetChartReleaseReq, out *GetChartReleaseResp) error {
	return h.HelmManagerHandler.GetChartRelease(ctx, in, out)
}

func (h *helmManagerHandler) ListReleaseV1(ctx context.Context, in *ListReleaseV1Req, out *ListReleaseV1Resp) error {
	return h.HelmManagerHandler.ListReleaseV1(ctx, in, out)
}

func (h *helmManagerHandler) GetReleaseDetailV1(ctx context.Context, in *GetReleaseDetailV1Req, out *GetReleaseDetailV1Resp) error {
	return h.HelmManagerHandler.GetReleaseDetailV1(ctx, in, out)
}

func (h *helmManagerHandler) InstallReleaseV1(ctx context.Context, in *InstallReleaseV1Req, out *InstallReleaseV1Resp) error {
	return h.HelmManagerHandler.InstallReleaseV1(ctx, in, out)
}

func (h *helmManagerHandler) UninstallReleaseV1(ctx context.Context, in *UninstallReleaseV1Req, out *UninstallReleaseV1Resp) error {
	return h.HelmManagerHandler.UninstallReleaseV1(ctx, in, out)
}

func (h *helmManagerHandler) UpgradeReleaseV1(ctx context.Context, in *UpgradeReleaseV1Req, out *UpgradeReleaseV1Resp) error {
	return h.HelmManagerHandler.UpgradeReleaseV1(ctx, in, out)
}

func (h *helmManagerHandler) RollbackReleaseV1(ctx context.Context, in *RollbackReleaseV1Req, out *RollbackReleaseV1Resp) error {
	return h.HelmManagerHandler.RollbackReleaseV1(ctx, in, out)
}

func (h *helmManagerHandler) ReleasePreview(ctx context.Context, in *ReleasePreviewReq, out *ReleasePreviewResp) error {
	return h.HelmManagerHandler.ReleasePreview(ctx, in, out)
}

func (h *helmManagerHandler) GetReleaseHistory(ctx context.Context, in *GetReleaseHistoryReq, out *GetReleaseHistoryResp) error {
	return h.HelmManagerHandler.GetReleaseHistory(ctx, in, out)
}

func (h *helmManagerHandler) GetReleaseManifest(ctx context.Context, in *GetReleaseManifestReq, out *GetReleaseManifestResp) error {
	return h.HelmManagerHandler.GetReleaseManifest(ctx, in, out)
}

func (h *helmManagerHandler) GetReleaseStatus(ctx context.Context, in *GetReleaseStatusReq, out *CommonListResp) error {
	return h.HelmManagerHandler.GetReleaseStatus(ctx, in, out)
}

func (h *helmManagerHandler) GetReleasePods(ctx context.Context, in *GetReleasePodsReq, out *CommonListResp) error {
	return h.HelmManagerHandler.GetReleasePods(ctx, in, out)
}

func (h *helmManagerHandler) ImportClusterRelease(ctx context.Context, in *ImportClusterReleaseReq, out *ImportClusterReleaseResp) error {
	return h.HelmManagerHandler.ImportClusterRelease(ctx, in, out)
}

// Api Endpoints for ClusterAddons service

func NewClusterAddonsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "ClusterAddons.ListAddons",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/addons"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterAddons.GetAddonsDetail",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/addons/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterAddons.InstallAddons",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/addons"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterAddons.UpgradeAddons",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/addons/{name}"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterAddons.StopAddons",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/addons/{name}/stop"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "ClusterAddons.UninstallAddons",
			Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/addons/{name}"},
			Method:  []string{"DELETE"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for ClusterAddons service

type ClusterAddonsService interface {
	ListAddons(ctx context.Context, in *ListAddonsReq, opts ...client.CallOption) (*ListAddonsResp, error)
	GetAddonsDetail(ctx context.Context, in *GetAddonsDetailReq, opts ...client.CallOption) (*GetAddonsDetailResp, error)
	InstallAddons(ctx context.Context, in *InstallAddonsReq, opts ...client.CallOption) (*InstallAddonsResp, error)
	UpgradeAddons(ctx context.Context, in *UpgradeAddonsReq, opts ...client.CallOption) (*UpgradeAddonsResp, error)
	StopAddons(ctx context.Context, in *StopAddonsReq, opts ...client.CallOption) (*StopAddonsResp, error)
	UninstallAddons(ctx context.Context, in *UninstallAddonsReq, opts ...client.CallOption) (*UninstallAddonsResp, error)
}

type clusterAddonsService struct {
	c    client.Client
	name string
}

func NewClusterAddonsService(name string, c client.Client) ClusterAddonsService {
	return &clusterAddonsService{
		c:    c,
		name: name,
	}
}

func (c *clusterAddonsService) ListAddons(ctx context.Context, in *ListAddonsReq, opts ...client.CallOption) (*ListAddonsResp, error) {
	req := c.c.NewRequest(c.name, "ClusterAddons.ListAddons", in)
	out := new(ListAddonsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAddonsService) GetAddonsDetail(ctx context.Context, in *GetAddonsDetailReq, opts ...client.CallOption) (*GetAddonsDetailResp, error) {
	req := c.c.NewRequest(c.name, "ClusterAddons.GetAddonsDetail", in)
	out := new(GetAddonsDetailResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAddonsService) InstallAddons(ctx context.Context, in *InstallAddonsReq, opts ...client.CallOption) (*InstallAddonsResp, error) {
	req := c.c.NewRequest(c.name, "ClusterAddons.InstallAddons", in)
	out := new(InstallAddonsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAddonsService) UpgradeAddons(ctx context.Context, in *UpgradeAddonsReq, opts ...client.CallOption) (*UpgradeAddonsResp, error) {
	req := c.c.NewRequest(c.name, "ClusterAddons.UpgradeAddons", in)
	out := new(UpgradeAddonsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAddonsService) StopAddons(ctx context.Context, in *StopAddonsReq, opts ...client.CallOption) (*StopAddonsResp, error) {
	req := c.c.NewRequest(c.name, "ClusterAddons.StopAddons", in)
	out := new(StopAddonsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAddonsService) UninstallAddons(ctx context.Context, in *UninstallAddonsReq, opts ...client.CallOption) (*UninstallAddonsResp, error) {
	req := c.c.NewRequest(c.name, "ClusterAddons.UninstallAddons", in)
	out := new(UninstallAddonsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClusterAddons service

type ClusterAddonsHandler interface {
	ListAddons(context.Context, *ListAddonsReq, *ListAddonsResp) error
	GetAddonsDetail(context.Context, *GetAddonsDetailReq, *GetAddonsDetailResp) error
	InstallAddons(context.Context, *InstallAddonsReq, *InstallAddonsResp) error
	UpgradeAddons(context.Context, *UpgradeAddonsReq, *UpgradeAddonsResp) error
	StopAddons(context.Context, *StopAddonsReq, *StopAddonsResp) error
	UninstallAddons(context.Context, *UninstallAddonsReq, *UninstallAddonsResp) error
}

func RegisterClusterAddonsHandler(s server.Server, hdlr ClusterAddonsHandler, opts ...server.HandlerOption) error {
	type clusterAddons interface {
		ListAddons(ctx context.Context, in *ListAddonsReq, out *ListAddonsResp) error
		GetAddonsDetail(ctx context.Context, in *GetAddonsDetailReq, out *GetAddonsDetailResp) error
		InstallAddons(ctx context.Context, in *InstallAddonsReq, out *InstallAddonsResp) error
		UpgradeAddons(ctx context.Context, in *UpgradeAddonsReq, out *UpgradeAddonsResp) error
		StopAddons(ctx context.Context, in *StopAddonsReq, out *StopAddonsResp) error
		UninstallAddons(ctx context.Context, in *UninstallAddonsReq, out *UninstallAddonsResp) error
	}
	type ClusterAddons struct {
		clusterAddons
	}
	h := &clusterAddonsHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterAddons.ListAddons",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/addons"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterAddons.GetAddonsDetail",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/addons/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterAddons.InstallAddons",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/addons"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterAddons.UpgradeAddons",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/addons/{name}"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterAddons.StopAddons",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/addons/{name}/stop"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ClusterAddons.UninstallAddons",
		Path:    []string{"/helmmanager/v1/projects/{projectCode}/clusters/{clusterID}/addons/{name}"},
		Method:  []string{"DELETE"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&ClusterAddons{h}, opts...))
}

type clusterAddonsHandler struct {
	ClusterAddonsHandler
}

func (h *clusterAddonsHandler) ListAddons(ctx context.Context, in *ListAddonsReq, out *ListAddonsResp) error {
	return h.ClusterAddonsHandler.ListAddons(ctx, in, out)
}

func (h *clusterAddonsHandler) GetAddonsDetail(ctx context.Context, in *GetAddonsDetailReq, out *GetAddonsDetailResp) error {
	return h.ClusterAddonsHandler.GetAddonsDetail(ctx, in, out)
}

func (h *clusterAddonsHandler) InstallAddons(ctx context.Context, in *InstallAddonsReq, out *InstallAddonsResp) error {
	return h.ClusterAddonsHandler.InstallAddons(ctx, in, out)
}

func (h *clusterAddonsHandler) UpgradeAddons(ctx context.Context, in *UpgradeAddonsReq, out *UpgradeAddonsResp) error {
	return h.ClusterAddonsHandler.UpgradeAddons(ctx, in, out)
}

func (h *clusterAddonsHandler) StopAddons(ctx context.Context, in *StopAddonsReq, out *StopAddonsResp) error {
	return h.ClusterAddonsHandler.StopAddons(ctx, in, out)
}

func (h *clusterAddonsHandler) UninstallAddons(ctx context.Context, in *UninstallAddonsReq, out *UninstallAddonsResp) error {
	return h.ClusterAddonsHandler.UninstallAddons(ctx, in, out)
}
