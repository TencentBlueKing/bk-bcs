// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bcs-helm-manager.proto

package helmmanager

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on AvailableReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AvailableReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AvailableReqValidationError is the validation error returned by
// AvailableReq.Validate if the designated constraints aren't met.
type AvailableReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AvailableReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AvailableReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AvailableReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AvailableReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AvailableReqValidationError) ErrorName() string { return "AvailableReqValidationError" }

// Error satisfies the builtin error interface
func (e AvailableReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAvailableReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AvailableReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AvailableReqValidationError{}

// Validate checks the field values on AvailableResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AvailableResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// AvailableRespValidationError is the validation error returned by
// AvailableResp.Validate if the designated constraints aren't met.
type AvailableRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AvailableRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AvailableRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AvailableRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AvailableRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AvailableRespValidationError) ErrorName() string { return "AvailableRespValidationError" }

// Error satisfies the builtin error interface
func (e AvailableRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAvailableResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AvailableRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AvailableRespValidationError{}

// Validate checks the field values on CreateRepositoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateRepositoryReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectID()); l < 1 || l > 64 {
		return CreateRepositoryReqValidationError{
			field:  "ProjectID",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		return CreateRepositoryReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	// no validation rules for Type

	// no validation rules for Remote

	// no validation rules for RemoteURL

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Operator

	// no validation rules for Takeover

	// no validation rules for RemoteUsername

	// no validation rules for RemotePassword

	return nil
}

// CreateRepositoryReqValidationError is the validation error returned by
// CreateRepositoryReq.Validate if the designated constraints aren't met.
type CreateRepositoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRepositoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRepositoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRepositoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRepositoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRepositoryReqValidationError) ErrorName() string {
	return "CreateRepositoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRepositoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRepositoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRepositoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRepositoryReqValidationError{}

// Validate checks the field values on CreateRepositoryResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateRepositoryResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRepositoryRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateRepositoryRespValidationError is the validation error returned by
// CreateRepositoryResp.Validate if the designated constraints aren't met.
type CreateRepositoryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRepositoryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRepositoryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRepositoryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRepositoryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRepositoryRespValidationError) ErrorName() string {
	return "CreateRepositoryRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRepositoryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRepositoryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRepositoryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRepositoryRespValidationError{}

// Validate checks the field values on UpdateRepositoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateRepositoryReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectID()); l < 1 || l > 64 {
		return UpdateRepositoryReqValidationError{
			field:  "ProjectID",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		return UpdateRepositoryReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	// no validation rules for Type

	// no validation rules for Remote

	// no validation rules for RemoteURL

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Operator

	return nil
}

// UpdateRepositoryReqValidationError is the validation error returned by
// UpdateRepositoryReq.Validate if the designated constraints aren't met.
type UpdateRepositoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRepositoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRepositoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRepositoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRepositoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRepositoryReqValidationError) ErrorName() string {
	return "UpdateRepositoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRepositoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRepositoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRepositoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRepositoryReqValidationError{}

// Validate checks the field values on UpdateRepositoryResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateRepositoryResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRepositoryRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateRepositoryRespValidationError is the validation error returned by
// UpdateRepositoryResp.Validate if the designated constraints aren't met.
type UpdateRepositoryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRepositoryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRepositoryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRepositoryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRepositoryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRepositoryRespValidationError) ErrorName() string {
	return "UpdateRepositoryRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRepositoryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRepositoryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRepositoryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRepositoryRespValidationError{}

// Validate checks the field values on GetRepositoryReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetRepositoryReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectID()); l < 1 || l > 64 {
		return GetRepositoryReqValidationError{
			field:  "ProjectID",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		return GetRepositoryReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	return nil
}

// GetRepositoryReqValidationError is the validation error returned by
// GetRepositoryReq.Validate if the designated constraints aren't met.
type GetRepositoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRepositoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRepositoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRepositoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRepositoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRepositoryReqValidationError) ErrorName() string { return "GetRepositoryReqValidationError" }

// Error satisfies the builtin error interface
func (e GetRepositoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRepositoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRepositoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRepositoryReqValidationError{}

// Validate checks the field values on GetRepositoryResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetRepositoryResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRepositoryRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetRepositoryRespValidationError is the validation error returned by
// GetRepositoryResp.Validate if the designated constraints aren't met.
type GetRepositoryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRepositoryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRepositoryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRepositoryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRepositoryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRepositoryRespValidationError) ErrorName() string {
	return "GetRepositoryRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetRepositoryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRepositoryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRepositoryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRepositoryRespValidationError{}

// Validate checks the field values on ListRepositoryReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListRepositoryReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Sort

	// no validation rules for Desc

	// no validation rules for Page

	// no validation rules for Size

	if l := utf8.RuneCountInString(m.GetProjectID()); l < 1 || l > 64 {
		return ListRepositoryReqValidationError{
			field:  "ProjectID",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	// no validation rules for Name

	// no validation rules for Type

	return nil
}

// ListRepositoryReqValidationError is the validation error returned by
// ListRepositoryReq.Validate if the designated constraints aren't met.
type ListRepositoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRepositoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRepositoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRepositoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRepositoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRepositoryReqValidationError) ErrorName() string {
	return "ListRepositoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListRepositoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRepositoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRepositoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRepositoryReqValidationError{}

// Validate checks the field values on ListRepositoryResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListRepositoryResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRepositoryRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListRepositoryRespValidationError is the validation error returned by
// ListRepositoryResp.Validate if the designated constraints aren't met.
type ListRepositoryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRepositoryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRepositoryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRepositoryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRepositoryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRepositoryRespValidationError) ErrorName() string {
	return "ListRepositoryRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListRepositoryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRepositoryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRepositoryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRepositoryRespValidationError{}

// Validate checks the field values on DeleteRepositoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteRepositoryReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectID()); l < 1 || l > 64 {
		return DeleteRepositoryReqValidationError{
			field:  "ProjectID",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		return DeleteRepositoryReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	// no validation rules for Operator

	return nil
}

// DeleteRepositoryReqValidationError is the validation error returned by
// DeleteRepositoryReq.Validate if the designated constraints aren't met.
type DeleteRepositoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRepositoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRepositoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRepositoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRepositoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRepositoryReqValidationError) ErrorName() string {
	return "DeleteRepositoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRepositoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRepositoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRepositoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRepositoryReqValidationError{}

// Validate checks the field values on DeleteRepositoryResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteRepositoryResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// DeleteRepositoryRespValidationError is the validation error returned by
// DeleteRepositoryResp.Validate if the designated constraints aren't met.
type DeleteRepositoryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRepositoryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRepositoryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRepositoryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRepositoryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRepositoryRespValidationError) ErrorName() string {
	return "DeleteRepositoryRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRepositoryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRepositoryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRepositoryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRepositoryRespValidationError{}

// Validate checks the field values on DeleteRepositoriesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteRepositoriesReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectID()); l < 1 || l > 64 {
		return DeleteRepositoriesReqValidationError{
			field:  "ProjectID",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	return nil
}

// DeleteRepositoriesReqValidationError is the validation error returned by
// DeleteRepositoriesReq.Validate if the designated constraints aren't met.
type DeleteRepositoriesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRepositoriesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRepositoriesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRepositoriesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRepositoriesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRepositoriesReqValidationError) ErrorName() string {
	return "DeleteRepositoriesReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRepositoriesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRepositoriesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRepositoriesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRepositoriesReqValidationError{}

// Validate checks the field values on DeleteRepositoriesResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteRepositoriesResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// DeleteRepositoriesRespValidationError is the validation error returned by
// DeleteRepositoriesResp.Validate if the designated constraints aren't met.
type DeleteRepositoriesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRepositoriesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRepositoriesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRepositoriesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRepositoriesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRepositoriesRespValidationError) ErrorName() string {
	return "DeleteRepositoriesRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRepositoriesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRepositoriesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRepositoriesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRepositoriesRespValidationError{}

// Validate checks the field values on RepositoryListData with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RepositoryListData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for Size

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RepositoryListDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RepositoryListDataValidationError is the validation error returned by
// RepositoryListData.Validate if the designated constraints aren't met.
type RepositoryListDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepositoryListDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepositoryListDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepositoryListDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepositoryListDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepositoryListDataValidationError) ErrorName() string {
	return "RepositoryListDataValidationError"
}

// Error satisfies the builtin error interface
func (e RepositoryListDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepositoryListData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepositoryListDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepositoryListDataValidationError{}

// Validate checks the field values on Repository with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Repository) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectID

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Remote

	// no validation rules for RemoteURL

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for CreateBy

	// no validation rules for UpdateBy

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for RemoteUsername

	// no validation rules for RemotePassword

	// no validation rules for RepoURL

	return nil
}

// RepositoryValidationError is the validation error returned by
// Repository.Validate if the designated constraints aren't met.
type RepositoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepositoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepositoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepositoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepositoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepositoryValidationError) ErrorName() string { return "RepositoryValidationError" }

// Error satisfies the builtin error interface
func (e RepositoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepository.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepositoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepositoryValidationError{}

// Validate checks the field values on ListChartReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListChartReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for Size

	if l := utf8.RuneCountInString(m.GetProjectID()); l < 1 || l > 64 {
		return ListChartReqValidationError{
			field:  "ProjectID",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetRepository()); l < 1 || l > 64 {
		return ListChartReqValidationError{
			field:  "Repository",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	// no validation rules for Operator

	return nil
}

// ListChartReqValidationError is the validation error returned by
// ListChartReq.Validate if the designated constraints aren't met.
type ListChartReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChartReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChartReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChartReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChartReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChartReqValidationError) ErrorName() string { return "ListChartReqValidationError" }

// Error satisfies the builtin error interface
func (e ListChartReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChartReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChartReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChartReqValidationError{}

// Validate checks the field values on ListChartResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListChartResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListChartRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListChartRespValidationError is the validation error returned by
// ListChartResp.Validate if the designated constraints aren't met.
type ListChartRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChartRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChartRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChartRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChartRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChartRespValidationError) ErrorName() string { return "ListChartRespValidationError" }

// Error satisfies the builtin error interface
func (e ListChartRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChartResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChartRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChartRespValidationError{}

// Validate checks the field values on ChartListData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ChartListData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for Size

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChartListDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ChartListDataValidationError is the validation error returned by
// ChartListData.Validate if the designated constraints aren't met.
type ChartListDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChartListDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChartListDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChartListDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChartListDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChartListDataValidationError) ErrorName() string { return "ChartListDataValidationError" }

// Error satisfies the builtin error interface
func (e ChartListDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChartListData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChartListDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChartListDataValidationError{}

// Validate checks the field values on Chart with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Chart) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectID

	// no validation rules for Repository

	// no validation rules for Type

	// no validation rules for Key

	// no validation rules for Name

	// no validation rules for LatestVersion

	// no validation rules for LatestAppVersion

	// no validation rules for LatestDescription

	// no validation rules for CreateBy

	// no validation rules for UpdateBy

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	return nil
}

// ChartValidationError is the validation error returned by Chart.Validate if
// the designated constraints aren't met.
type ChartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChartValidationError) ErrorName() string { return "ChartValidationError" }

// Error satisfies the builtin error interface
func (e ChartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChartValidationError{}

// Validate checks the field values on ListChartVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListChartVersionReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for Size

	if l := utf8.RuneCountInString(m.GetProjectID()); l < 1 || l > 64 {
		return ListChartVersionReqValidationError{
			field:  "ProjectID",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetRepository()); l < 1 || l > 64 {
		return ListChartVersionReqValidationError{
			field:  "Repository",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		return ListChartVersionReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	// no validation rules for Operator

	return nil
}

// ListChartVersionReqValidationError is the validation error returned by
// ListChartVersionReq.Validate if the designated constraints aren't met.
type ListChartVersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChartVersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChartVersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChartVersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChartVersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChartVersionReqValidationError) ErrorName() string {
	return "ListChartVersionReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListChartVersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChartVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChartVersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChartVersionReqValidationError{}

// Validate checks the field values on ListChartVersionResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListChartVersionResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListChartVersionRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListChartVersionRespValidationError is the validation error returned by
// ListChartVersionResp.Validate if the designated constraints aren't met.
type ListChartVersionRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChartVersionRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChartVersionRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChartVersionRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChartVersionRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChartVersionRespValidationError) ErrorName() string {
	return "ListChartVersionRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListChartVersionRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChartVersionResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChartVersionRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChartVersionRespValidationError{}

// Validate checks the field values on ChartVersionListData with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ChartVersionListData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for Size

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChartVersionListDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ChartVersionListDataValidationError is the validation error returned by
// ChartVersionListData.Validate if the designated constraints aren't met.
type ChartVersionListDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChartVersionListDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChartVersionListDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChartVersionListDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChartVersionListDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChartVersionListDataValidationError) ErrorName() string {
	return "ChartVersionListDataValidationError"
}

// Error satisfies the builtin error interface
func (e ChartVersionListDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChartVersionListData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChartVersionListDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChartVersionListDataValidationError{}

// Validate checks the field values on ChartVersion with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ChartVersion) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for AppVersion

	// no validation rules for Description

	// no validation rules for CreateBy

	// no validation rules for UpdateBy

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	return nil
}

// ChartVersionValidationError is the validation error returned by
// ChartVersion.Validate if the designated constraints aren't met.
type ChartVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChartVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChartVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChartVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChartVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChartVersionValidationError) ErrorName() string { return "ChartVersionValidationError" }

// Error satisfies the builtin error interface
func (e ChartVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChartVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChartVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChartVersionValidationError{}

// Validate checks the field values on GetChartDetailReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetChartDetailReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectID()); l < 1 || l > 64 {
		return GetChartDetailReqValidationError{
			field:  "ProjectID",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetRepository()); l < 1 || l > 64 {
		return GetChartDetailReqValidationError{
			field:  "Repository",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		return GetChartDetailReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetVersion()); l < 1 || l > 64 {
		return GetChartDetailReqValidationError{
			field:  "Version",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	// no validation rules for Operator

	return nil
}

// GetChartDetailReqValidationError is the validation error returned by
// GetChartDetailReq.Validate if the designated constraints aren't met.
type GetChartDetailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChartDetailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChartDetailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChartDetailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChartDetailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChartDetailReqValidationError) ErrorName() string {
	return "GetChartDetailReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetChartDetailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChartDetailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChartDetailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChartDetailReqValidationError{}

// Validate checks the field values on GetChartDetailResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetChartDetailResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetChartDetailRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetChartDetailRespValidationError is the validation error returned by
// GetChartDetailResp.Validate if the designated constraints aren't met.
type GetChartDetailRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChartDetailRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChartDetailRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChartDetailRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChartDetailRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChartDetailRespValidationError) ErrorName() string {
	return "GetChartDetailRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetChartDetailRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChartDetailResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChartDetailRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChartDetailRespValidationError{}

// Validate checks the field values on ChartDetail with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ChartDetail) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Readme

	for key, val := range m.GetContents() {
		_ = val

		// no validation rules for Contents[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChartDetailValidationError{
					field:  fmt.Sprintf("Contents[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ChartDetailValidationError is the validation error returned by
// ChartDetail.Validate if the designated constraints aren't met.
type ChartDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChartDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChartDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChartDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChartDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChartDetailValidationError) ErrorName() string { return "ChartDetailValidationError" }

// Error satisfies the builtin error interface
func (e ChartDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChartDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChartDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChartDetailValidationError{}

// Validate checks the field values on FileContent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FileContent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Path

	// no validation rules for Content

	return nil
}

// FileContentValidationError is the validation error returned by
// FileContent.Validate if the designated constraints aren't met.
type FileContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileContentValidationError) ErrorName() string { return "FileContentValidationError" }

// Error satisfies the builtin error interface
func (e FileContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileContentValidationError{}

// Validate checks the field values on ListReleaseReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListReleaseReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for Size

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 1 || l > 64 {
		return ListReleaseReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	// no validation rules for Namespace

	// no validation rules for Name

	return nil
}

// ListReleaseReqValidationError is the validation error returned by
// ListReleaseReq.Validate if the designated constraints aren't met.
type ListReleaseReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReleaseReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReleaseReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReleaseReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReleaseReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReleaseReqValidationError) ErrorName() string { return "ListReleaseReqValidationError" }

// Error satisfies the builtin error interface
func (e ListReleaseReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReleaseReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReleaseReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReleaseReqValidationError{}

// Validate checks the field values on ListReleaseResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListReleaseResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListReleaseRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListReleaseRespValidationError is the validation error returned by
// ListReleaseResp.Validate if the designated constraints aren't met.
type ListReleaseRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReleaseRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReleaseRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReleaseRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReleaseRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReleaseRespValidationError) ErrorName() string { return "ListReleaseRespValidationError" }

// Error satisfies the builtin error interface
func (e ListReleaseRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReleaseResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReleaseRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReleaseRespValidationError{}

// Validate checks the field values on GetReleaseDetailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetReleaseDetailReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 1 || l > 64 {
		return GetReleaseDetailReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetNamespace()); l < 1 || l > 64 {
		return GetReleaseDetailReqValidationError{
			field:  "Namespace",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		return GetReleaseDetailReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	return nil
}

// GetReleaseDetailReqValidationError is the validation error returned by
// GetReleaseDetailReq.Validate if the designated constraints aren't met.
type GetReleaseDetailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReleaseDetailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReleaseDetailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReleaseDetailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReleaseDetailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReleaseDetailReqValidationError) ErrorName() string {
	return "GetReleaseDetailReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetReleaseDetailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReleaseDetailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReleaseDetailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReleaseDetailReqValidationError{}

// Validate checks the field values on GetReleaseDetailResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetReleaseDetailResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReleaseDetailRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetReleaseDetailRespValidationError is the validation error returned by
// GetReleaseDetailResp.Validate if the designated constraints aren't met.
type GetReleaseDetailRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReleaseDetailRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReleaseDetailRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReleaseDetailRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReleaseDetailRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReleaseDetailRespValidationError) ErrorName() string {
	return "GetReleaseDetailRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetReleaseDetailRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReleaseDetailResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReleaseDetailRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReleaseDetailRespValidationError{}

// Validate checks the field values on ReleaseListData with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReleaseListData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for Size

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReleaseListDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ReleaseListDataValidationError is the validation error returned by
// ReleaseListData.Validate if the designated constraints aren't met.
type ReleaseListDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseListDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseListDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseListDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseListDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseListDataValidationError) ErrorName() string { return "ReleaseListDataValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseListDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseListData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseListDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseListDataValidationError{}

// Validate checks the field values on Release with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Release) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Namespace

	// no validation rules for Revision

	// no validation rules for Status

	// no validation rules for Chart

	// no validation rules for AppVersion

	// no validation rules for UpdateTime

	// no validation rules for ChartVersion

	return nil
}

// ReleaseValidationError is the validation error returned by Release.Validate
// if the designated constraints aren't met.
type ReleaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseValidationError) ErrorName() string { return "ReleaseValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelease.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseValidationError{}

// Validate checks the field values on ReleaseDetail with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ReleaseDetail) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Namespace

	// no validation rules for Revision

	// no validation rules for Status

	// no validation rules for Chart

	// no validation rules for AppVersion

	// no validation rules for UpdateTime

	// no validation rules for ChartVersion

	return nil
}

// ReleaseDetailValidationError is the validation error returned by
// ReleaseDetail.Validate if the designated constraints aren't met.
type ReleaseDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseDetailValidationError) ErrorName() string { return "ReleaseDetailValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseDetailValidationError{}

// Validate checks the field values on InstallReleaseReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *InstallReleaseReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		return InstallReleaseReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetNamespace()); l < 1 || l > 64 {
		return InstallReleaseReqValidationError{
			field:  "Namespace",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 1 || l > 64 {
		return InstallReleaseReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetProjectID()); l < 1 || l > 64 {
		return InstallReleaseReqValidationError{
			field:  "ProjectID",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetRepository()); l < 1 || l > 64 {
		return InstallReleaseReqValidationError{
			field:  "Repository",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetChart()); l < 1 || l > 64 {
		return InstallReleaseReqValidationError{
			field:  "Chart",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetVersion()); l < 1 || l > 64 {
		return InstallReleaseReqValidationError{
			field:  "Version",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	// no validation rules for Operator

	// no validation rules for BcsSysVar

	return nil
}

// InstallReleaseReqValidationError is the validation error returned by
// InstallReleaseReq.Validate if the designated constraints aren't met.
type InstallReleaseReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallReleaseReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallReleaseReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallReleaseReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallReleaseReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallReleaseReqValidationError) ErrorName() string {
	return "InstallReleaseReqValidationError"
}

// Error satisfies the builtin error interface
func (e InstallReleaseReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallReleaseReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallReleaseReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallReleaseReqValidationError{}

// Validate checks the field values on InstallReleaseResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InstallReleaseResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstallReleaseRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// InstallReleaseRespValidationError is the validation error returned by
// InstallReleaseResp.Validate if the designated constraints aren't met.
type InstallReleaseRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallReleaseRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallReleaseRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallReleaseRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallReleaseRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallReleaseRespValidationError) ErrorName() string {
	return "InstallReleaseRespValidationError"
}

// Error satisfies the builtin error interface
func (e InstallReleaseRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallReleaseResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallReleaseRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallReleaseRespValidationError{}

// Validate checks the field values on UninstallReleaseReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UninstallReleaseReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		return UninstallReleaseReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetNamespace()); l < 1 || l > 64 {
		return UninstallReleaseReqValidationError{
			field:  "Namespace",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 1 || l > 64 {
		return UninstallReleaseReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	// no validation rules for Operator

	return nil
}

// UninstallReleaseReqValidationError is the validation error returned by
// UninstallReleaseReq.Validate if the designated constraints aren't met.
type UninstallReleaseReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UninstallReleaseReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UninstallReleaseReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UninstallReleaseReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UninstallReleaseReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UninstallReleaseReqValidationError) ErrorName() string {
	return "UninstallReleaseReqValidationError"
}

// Error satisfies the builtin error interface
func (e UninstallReleaseReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUninstallReleaseReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UninstallReleaseReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UninstallReleaseReqValidationError{}

// Validate checks the field values on UninstallReleaseResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UninstallReleaseResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// UninstallReleaseRespValidationError is the validation error returned by
// UninstallReleaseResp.Validate if the designated constraints aren't met.
type UninstallReleaseRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UninstallReleaseRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UninstallReleaseRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UninstallReleaseRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UninstallReleaseRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UninstallReleaseRespValidationError) ErrorName() string {
	return "UninstallReleaseRespValidationError"
}

// Error satisfies the builtin error interface
func (e UninstallReleaseRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUninstallReleaseResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UninstallReleaseRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UninstallReleaseRespValidationError{}

// Validate checks the field values on UpgradeReleaseReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpgradeReleaseReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		return UpgradeReleaseReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetNamespace()); l < 1 || l > 64 {
		return UpgradeReleaseReqValidationError{
			field:  "Namespace",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 1 || l > 64 {
		return UpgradeReleaseReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetProjectID()); l < 1 || l > 64 {
		return UpgradeReleaseReqValidationError{
			field:  "ProjectID",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetRepository()); l < 1 || l > 64 {
		return UpgradeReleaseReqValidationError{
			field:  "Repository",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetChart()); l < 1 || l > 64 {
		return UpgradeReleaseReqValidationError{
			field:  "Chart",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetVersion()); l < 1 || l > 64 {
		return UpgradeReleaseReqValidationError{
			field:  "Version",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	// no validation rules for Operator

	// no validation rules for BcsSysVar

	return nil
}

// UpgradeReleaseReqValidationError is the validation error returned by
// UpgradeReleaseReq.Validate if the designated constraints aren't met.
type UpgradeReleaseReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpgradeReleaseReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpgradeReleaseReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpgradeReleaseReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpgradeReleaseReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpgradeReleaseReqValidationError) ErrorName() string {
	return "UpgradeReleaseReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpgradeReleaseReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpgradeReleaseReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpgradeReleaseReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpgradeReleaseReqValidationError{}

// Validate checks the field values on UpgradeReleaseResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpgradeReleaseResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpgradeReleaseRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpgradeReleaseRespValidationError is the validation error returned by
// UpgradeReleaseResp.Validate if the designated constraints aren't met.
type UpgradeReleaseRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpgradeReleaseRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpgradeReleaseRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpgradeReleaseRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpgradeReleaseRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpgradeReleaseRespValidationError) ErrorName() string {
	return "UpgradeReleaseRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpgradeReleaseRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpgradeReleaseResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpgradeReleaseRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpgradeReleaseRespValidationError{}

// Validate checks the field values on RollbackReleaseReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RollbackReleaseReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		return RollbackReleaseReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetNamespace()); l < 1 || l > 64 {
		return RollbackReleaseReqValidationError{
			field:  "Namespace",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetClusterID()); l < 1 || l > 64 {
		return RollbackReleaseReqValidationError{
			field:  "ClusterID",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	// no validation rules for Revision

	// no validation rules for Operator

	return nil
}

// RollbackReleaseReqValidationError is the validation error returned by
// RollbackReleaseReq.Validate if the designated constraints aren't met.
type RollbackReleaseReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackReleaseReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackReleaseReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackReleaseReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackReleaseReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackReleaseReqValidationError) ErrorName() string {
	return "RollbackReleaseReqValidationError"
}

// Error satisfies the builtin error interface
func (e RollbackReleaseReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackReleaseReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackReleaseReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackReleaseReqValidationError{}

// Validate checks the field values on RollbackReleaseResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RollbackReleaseResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Result

	return nil
}

// RollbackReleaseRespValidationError is the validation error returned by
// RollbackReleaseResp.Validate if the designated constraints aren't met.
type RollbackReleaseRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackReleaseRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackReleaseRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackReleaseRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackReleaseRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackReleaseRespValidationError) ErrorName() string {
	return "RollbackReleaseRespValidationError"
}

// Error satisfies the builtin error interface
func (e RollbackReleaseRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackReleaseResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackReleaseRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackReleaseRespValidationError{}
