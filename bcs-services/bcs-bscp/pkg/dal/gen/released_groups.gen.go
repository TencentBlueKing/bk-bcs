// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bscp.io/pkg/dal/table"
)

func newReleasedGroup(db *gorm.DB, opts ...gen.DOOption) releasedGroup {
	_releasedGroup := releasedGroup{}

	_releasedGroup.releasedGroupDo.UseDB(db, opts...)
	_releasedGroup.releasedGroupDo.UseModel(&table.ReleasedGroup{})

	tableName := _releasedGroup.releasedGroupDo.TableName()
	_releasedGroup.ALL = field.NewAsterisk(tableName)
	_releasedGroup.ID = field.NewUint32(tableName, "id")
	_releasedGroup.GroupID = field.NewUint32(tableName, "group_id")
	_releasedGroup.AppID = field.NewUint32(tableName, "app_id")
	_releasedGroup.ReleaseID = field.NewUint32(tableName, "release_id")
	_releasedGroup.StrategyID = field.NewUint32(tableName, "strategy_id")
	_releasedGroup.Mode = field.NewString(tableName, "mode")
	_releasedGroup.Selector = field.NewField(tableName, "selector")
	_releasedGroup.UID = field.NewString(tableName, "uid")
	_releasedGroup.Edited = field.NewBool(tableName, "edited")
	_releasedGroup.BizID = field.NewUint32(tableName, "biz_id")
	_releasedGroup.Reviser = field.NewString(tableName, "reviser")
	_releasedGroup.UpdatedAt = field.NewTime(tableName, "updated_at")

	_releasedGroup.fillFieldMap()

	return _releasedGroup
}

type releasedGroup struct {
	releasedGroupDo releasedGroupDo

	ALL        field.Asterisk
	ID         field.Uint32
	GroupID    field.Uint32
	AppID      field.Uint32
	ReleaseID  field.Uint32
	StrategyID field.Uint32
	Mode       field.String
	Selector   field.Field
	UID        field.String
	Edited     field.Bool
	BizID      field.Uint32
	Reviser    field.String
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (r releasedGroup) Table(newTableName string) *releasedGroup {
	r.releasedGroupDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r releasedGroup) As(alias string) *releasedGroup {
	r.releasedGroupDo.DO = *(r.releasedGroupDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *releasedGroup) updateTableName(table string) *releasedGroup {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint32(table, "id")
	r.GroupID = field.NewUint32(table, "group_id")
	r.AppID = field.NewUint32(table, "app_id")
	r.ReleaseID = field.NewUint32(table, "release_id")
	r.StrategyID = field.NewUint32(table, "strategy_id")
	r.Mode = field.NewString(table, "mode")
	r.Selector = field.NewField(table, "selector")
	r.UID = field.NewString(table, "uid")
	r.Edited = field.NewBool(table, "edited")
	r.BizID = field.NewUint32(table, "biz_id")
	r.Reviser = field.NewString(table, "reviser")
	r.UpdatedAt = field.NewTime(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *releasedGroup) WithContext(ctx context.Context) IReleasedGroupDo {
	return r.releasedGroupDo.WithContext(ctx)
}

func (r releasedGroup) TableName() string { return r.releasedGroupDo.TableName() }

func (r releasedGroup) Alias() string { return r.releasedGroupDo.Alias() }

func (r *releasedGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *releasedGroup) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 12)
	r.fieldMap["id"] = r.ID
	r.fieldMap["group_id"] = r.GroupID
	r.fieldMap["app_id"] = r.AppID
	r.fieldMap["release_id"] = r.ReleaseID
	r.fieldMap["strategy_id"] = r.StrategyID
	r.fieldMap["mode"] = r.Mode
	r.fieldMap["selector"] = r.Selector
	r.fieldMap["uid"] = r.UID
	r.fieldMap["edited"] = r.Edited
	r.fieldMap["biz_id"] = r.BizID
	r.fieldMap["reviser"] = r.Reviser
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r releasedGroup) clone(db *gorm.DB) releasedGroup {
	r.releasedGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r releasedGroup) replaceDB(db *gorm.DB) releasedGroup {
	r.releasedGroupDo.ReplaceDB(db)
	return r
}

type releasedGroupDo struct{ gen.DO }

type IReleasedGroupDo interface {
	gen.SubQuery
	Debug() IReleasedGroupDo
	WithContext(ctx context.Context) IReleasedGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReleasedGroupDo
	WriteDB() IReleasedGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReleasedGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReleasedGroupDo
	Not(conds ...gen.Condition) IReleasedGroupDo
	Or(conds ...gen.Condition) IReleasedGroupDo
	Select(conds ...field.Expr) IReleasedGroupDo
	Where(conds ...gen.Condition) IReleasedGroupDo
	Order(conds ...field.Expr) IReleasedGroupDo
	Distinct(cols ...field.Expr) IReleasedGroupDo
	Omit(cols ...field.Expr) IReleasedGroupDo
	Join(table schema.Tabler, on ...field.Expr) IReleasedGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReleasedGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReleasedGroupDo
	Group(cols ...field.Expr) IReleasedGroupDo
	Having(conds ...gen.Condition) IReleasedGroupDo
	Limit(limit int) IReleasedGroupDo
	Offset(offset int) IReleasedGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReleasedGroupDo
	Unscoped() IReleasedGroupDo
	Create(values ...*table.ReleasedGroup) error
	CreateInBatches(values []*table.ReleasedGroup, batchSize int) error
	Save(values ...*table.ReleasedGroup) error
	First() (*table.ReleasedGroup, error)
	Take() (*table.ReleasedGroup, error)
	Last() (*table.ReleasedGroup, error)
	Find() ([]*table.ReleasedGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ReleasedGroup, err error)
	FindInBatches(result *[]*table.ReleasedGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.ReleasedGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReleasedGroupDo
	Assign(attrs ...field.AssignExpr) IReleasedGroupDo
	Joins(fields ...field.RelationField) IReleasedGroupDo
	Preload(fields ...field.RelationField) IReleasedGroupDo
	FirstOrInit() (*table.ReleasedGroup, error)
	FirstOrCreate() (*table.ReleasedGroup, error)
	FindByPage(offset int, limit int) (result []*table.ReleasedGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReleasedGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r releasedGroupDo) Debug() IReleasedGroupDo {
	return r.withDO(r.DO.Debug())
}

func (r releasedGroupDo) WithContext(ctx context.Context) IReleasedGroupDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r releasedGroupDo) ReadDB() IReleasedGroupDo {
	return r.Clauses(dbresolver.Read)
}

func (r releasedGroupDo) WriteDB() IReleasedGroupDo {
	return r.Clauses(dbresolver.Write)
}

func (r releasedGroupDo) Session(config *gorm.Session) IReleasedGroupDo {
	return r.withDO(r.DO.Session(config))
}

func (r releasedGroupDo) Clauses(conds ...clause.Expression) IReleasedGroupDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r releasedGroupDo) Returning(value interface{}, columns ...string) IReleasedGroupDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r releasedGroupDo) Not(conds ...gen.Condition) IReleasedGroupDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r releasedGroupDo) Or(conds ...gen.Condition) IReleasedGroupDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r releasedGroupDo) Select(conds ...field.Expr) IReleasedGroupDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r releasedGroupDo) Where(conds ...gen.Condition) IReleasedGroupDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r releasedGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IReleasedGroupDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r releasedGroupDo) Order(conds ...field.Expr) IReleasedGroupDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r releasedGroupDo) Distinct(cols ...field.Expr) IReleasedGroupDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r releasedGroupDo) Omit(cols ...field.Expr) IReleasedGroupDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r releasedGroupDo) Join(table schema.Tabler, on ...field.Expr) IReleasedGroupDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r releasedGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReleasedGroupDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r releasedGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IReleasedGroupDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r releasedGroupDo) Group(cols ...field.Expr) IReleasedGroupDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r releasedGroupDo) Having(conds ...gen.Condition) IReleasedGroupDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r releasedGroupDo) Limit(limit int) IReleasedGroupDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r releasedGroupDo) Offset(offset int) IReleasedGroupDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r releasedGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReleasedGroupDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r releasedGroupDo) Unscoped() IReleasedGroupDo {
	return r.withDO(r.DO.Unscoped())
}

func (r releasedGroupDo) Create(values ...*table.ReleasedGroup) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r releasedGroupDo) CreateInBatches(values []*table.ReleasedGroup, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r releasedGroupDo) Save(values ...*table.ReleasedGroup) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r releasedGroupDo) First() (*table.ReleasedGroup, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.ReleasedGroup), nil
	}
}

func (r releasedGroupDo) Take() (*table.ReleasedGroup, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.ReleasedGroup), nil
	}
}

func (r releasedGroupDo) Last() (*table.ReleasedGroup, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.ReleasedGroup), nil
	}
}

func (r releasedGroupDo) Find() ([]*table.ReleasedGroup, error) {
	result, err := r.DO.Find()
	return result.([]*table.ReleasedGroup), err
}

func (r releasedGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ReleasedGroup, err error) {
	buf := make([]*table.ReleasedGroup, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r releasedGroupDo) FindInBatches(result *[]*table.ReleasedGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r releasedGroupDo) Attrs(attrs ...field.AssignExpr) IReleasedGroupDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r releasedGroupDo) Assign(attrs ...field.AssignExpr) IReleasedGroupDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r releasedGroupDo) Joins(fields ...field.RelationField) IReleasedGroupDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r releasedGroupDo) Preload(fields ...field.RelationField) IReleasedGroupDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r releasedGroupDo) FirstOrInit() (*table.ReleasedGroup, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.ReleasedGroup), nil
	}
}

func (r releasedGroupDo) FirstOrCreate() (*table.ReleasedGroup, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.ReleasedGroup), nil
	}
}

func (r releasedGroupDo) FindByPage(offset int, limit int) (result []*table.ReleasedGroup, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r releasedGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r releasedGroupDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r releasedGroupDo) Delete(models ...*table.ReleasedGroup) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *releasedGroupDo) withDO(do gen.Dao) *releasedGroupDo {
	r.DO = *do.(*gen.DO)
	return r
}
