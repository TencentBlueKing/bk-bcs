// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bscp.io/pkg/dal/table"
)

func newRelease(db *gorm.DB, opts ...gen.DOOption) release {
	_release := release{}

	_release.releaseDo.UseDB(db, opts...)
	_release.releaseDo.UseModel(&table.Release{})

	tableName := _release.releaseDo.TableName()
	_release.ALL = field.NewAsterisk(tableName)
	_release.ID = field.NewUint32(tableName, "id")
	_release.Name = field.NewString(tableName, "name")
	_release.Memo = field.NewString(tableName, "memo")
	_release.Deprecated = field.NewBool(tableName, "deprecated")
	_release.PublishNum = field.NewUint32(tableName, "publish_num")
	_release.BizID = field.NewUint32(tableName, "biz_id")
	_release.AppID = field.NewUint32(tableName, "app_id")
	_release.Creator = field.NewString(tableName, "creator")
	_release.CreatedAt = field.NewTime(tableName, "created_at")

	_release.fillFieldMap()

	return _release
}

type release struct {
	releaseDo releaseDo

	ALL        field.Asterisk
	ID         field.Uint32
	Name       field.String
	Memo       field.String
	Deprecated field.Bool
	PublishNum field.Uint32
	BizID      field.Uint32
	AppID      field.Uint32
	Creator    field.String
	CreatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (r release) Table(newTableName string) *release {
	r.releaseDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r release) As(alias string) *release {
	r.releaseDo.DO = *(r.releaseDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *release) updateTableName(table string) *release {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint32(table, "id")
	r.Name = field.NewString(table, "name")
	r.Memo = field.NewString(table, "memo")
	r.Deprecated = field.NewBool(table, "deprecated")
	r.PublishNum = field.NewUint32(table, "publish_num")
	r.BizID = field.NewUint32(table, "biz_id")
	r.AppID = field.NewUint32(table, "app_id")
	r.Creator = field.NewString(table, "creator")
	r.CreatedAt = field.NewTime(table, "created_at")

	r.fillFieldMap()

	return r
}

func (r *release) WithContext(ctx context.Context) IReleaseDo { return r.releaseDo.WithContext(ctx) }

func (r release) TableName() string { return r.releaseDo.TableName() }

func (r release) Alias() string { return r.releaseDo.Alias() }

func (r *release) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *release) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 9)
	r.fieldMap["id"] = r.ID
	r.fieldMap["name"] = r.Name
	r.fieldMap["memo"] = r.Memo
	r.fieldMap["deprecated"] = r.Deprecated
	r.fieldMap["publish_num"] = r.PublishNum
	r.fieldMap["biz_id"] = r.BizID
	r.fieldMap["app_id"] = r.AppID
	r.fieldMap["creator"] = r.Creator
	r.fieldMap["created_at"] = r.CreatedAt
}

func (r release) clone(db *gorm.DB) release {
	r.releaseDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r release) replaceDB(db *gorm.DB) release {
	r.releaseDo.ReplaceDB(db)
	return r
}

type releaseDo struct{ gen.DO }

type IReleaseDo interface {
	gen.SubQuery
	Debug() IReleaseDo
	WithContext(ctx context.Context) IReleaseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReleaseDo
	WriteDB() IReleaseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReleaseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReleaseDo
	Not(conds ...gen.Condition) IReleaseDo
	Or(conds ...gen.Condition) IReleaseDo
	Select(conds ...field.Expr) IReleaseDo
	Where(conds ...gen.Condition) IReleaseDo
	Order(conds ...field.Expr) IReleaseDo
	Distinct(cols ...field.Expr) IReleaseDo
	Omit(cols ...field.Expr) IReleaseDo
	Join(table schema.Tabler, on ...field.Expr) IReleaseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReleaseDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReleaseDo
	Group(cols ...field.Expr) IReleaseDo
	Having(conds ...gen.Condition) IReleaseDo
	Limit(limit int) IReleaseDo
	Offset(offset int) IReleaseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReleaseDo
	Unscoped() IReleaseDo
	Create(values ...*table.Release) error
	CreateInBatches(values []*table.Release, batchSize int) error
	Save(values ...*table.Release) error
	First() (*table.Release, error)
	Take() (*table.Release, error)
	Last() (*table.Release, error)
	Find() ([]*table.Release, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.Release, err error)
	FindInBatches(result *[]*table.Release, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.Release) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReleaseDo
	Assign(attrs ...field.AssignExpr) IReleaseDo
	Joins(fields ...field.RelationField) IReleaseDo
	Preload(fields ...field.RelationField) IReleaseDo
	FirstOrInit() (*table.Release, error)
	FirstOrCreate() (*table.Release, error)
	FindByPage(offset int, limit int) (result []*table.Release, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReleaseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r releaseDo) Debug() IReleaseDo {
	return r.withDO(r.DO.Debug())
}

func (r releaseDo) WithContext(ctx context.Context) IReleaseDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r releaseDo) ReadDB() IReleaseDo {
	return r.Clauses(dbresolver.Read)
}

func (r releaseDo) WriteDB() IReleaseDo {
	return r.Clauses(dbresolver.Write)
}

func (r releaseDo) Session(config *gorm.Session) IReleaseDo {
	return r.withDO(r.DO.Session(config))
}

func (r releaseDo) Clauses(conds ...clause.Expression) IReleaseDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r releaseDo) Returning(value interface{}, columns ...string) IReleaseDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r releaseDo) Not(conds ...gen.Condition) IReleaseDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r releaseDo) Or(conds ...gen.Condition) IReleaseDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r releaseDo) Select(conds ...field.Expr) IReleaseDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r releaseDo) Where(conds ...gen.Condition) IReleaseDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r releaseDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IReleaseDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r releaseDo) Order(conds ...field.Expr) IReleaseDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r releaseDo) Distinct(cols ...field.Expr) IReleaseDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r releaseDo) Omit(cols ...field.Expr) IReleaseDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r releaseDo) Join(table schema.Tabler, on ...field.Expr) IReleaseDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r releaseDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReleaseDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r releaseDo) RightJoin(table schema.Tabler, on ...field.Expr) IReleaseDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r releaseDo) Group(cols ...field.Expr) IReleaseDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r releaseDo) Having(conds ...gen.Condition) IReleaseDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r releaseDo) Limit(limit int) IReleaseDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r releaseDo) Offset(offset int) IReleaseDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r releaseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReleaseDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r releaseDo) Unscoped() IReleaseDo {
	return r.withDO(r.DO.Unscoped())
}

func (r releaseDo) Create(values ...*table.Release) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r releaseDo) CreateInBatches(values []*table.Release, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r releaseDo) Save(values ...*table.Release) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r releaseDo) First() (*table.Release, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.Release), nil
	}
}

func (r releaseDo) Take() (*table.Release, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.Release), nil
	}
}

func (r releaseDo) Last() (*table.Release, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.Release), nil
	}
}

func (r releaseDo) Find() ([]*table.Release, error) {
	result, err := r.DO.Find()
	return result.([]*table.Release), err
}

func (r releaseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.Release, err error) {
	buf := make([]*table.Release, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r releaseDo) FindInBatches(result *[]*table.Release, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r releaseDo) Attrs(attrs ...field.AssignExpr) IReleaseDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r releaseDo) Assign(attrs ...field.AssignExpr) IReleaseDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r releaseDo) Joins(fields ...field.RelationField) IReleaseDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r releaseDo) Preload(fields ...field.RelationField) IReleaseDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r releaseDo) FirstOrInit() (*table.Release, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.Release), nil
	}
}

func (r releaseDo) FirstOrCreate() (*table.Release, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.Release), nil
	}
}

func (r releaseDo) FindByPage(offset int, limit int) (result []*table.Release, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r releaseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r releaseDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r releaseDo) Delete(models ...*table.Release) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *releaseDo) withDO(do gen.Dao) *releaseDo {
	r.DO = *do.(*gen.DO)
	return r
}
