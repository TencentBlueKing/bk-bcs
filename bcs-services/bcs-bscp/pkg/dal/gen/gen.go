// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q             = new(Query)
	App           *app
	Audit         *audit
	ConfigHook    *configHook
	Hook          *hook
	HookRelease   *hookRelease
	IDGenerator   *iDGenerator
	Release       *release
	TemplateSpace *templateSpace
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	App = &Q.App
	Audit = &Q.Audit
	ConfigHook = &Q.ConfigHook
	Hook = &Q.Hook
	HookRelease = &Q.HookRelease
	IDGenerator = &Q.IDGenerator
	Release = &Q.Release
	TemplateSpace = &Q.TemplateSpace
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:            db,
		App:           newApp(db, opts...),
		Audit:         newAudit(db, opts...),
		ConfigHook:    newConfigHook(db, opts...),
		Hook:          newHook(db, opts...),
		HookRelease:   newHookRelease(db, opts...),
		IDGenerator:   newIDGenerator(db, opts...),
		Release:       newRelease(db, opts...),
		TemplateSpace: newTemplateSpace(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	App           app
	Audit         audit
	ConfigHook    configHook
	Hook          hook
	HookRelease   hookRelease
	IDGenerator   iDGenerator
	Release       release
	TemplateSpace templateSpace
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		App:           q.App.clone(db),
		Audit:         q.Audit.clone(db),
		ConfigHook:    q.ConfigHook.clone(db),
		Hook:          q.Hook.clone(db),
		HookRelease:   q.HookRelease.clone(db),
		IDGenerator:   q.IDGenerator.clone(db),
		Release:       q.Release.clone(db),
		TemplateSpace: q.TemplateSpace.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		App:           q.App.replaceDB(db),
		Audit:         q.Audit.replaceDB(db),
		ConfigHook:    q.ConfigHook.replaceDB(db),
		Hook:          q.Hook.replaceDB(db),
		HookRelease:   q.HookRelease.replaceDB(db),
		IDGenerator:   q.IDGenerator.replaceDB(db),
		Release:       q.Release.replaceDB(db),
		TemplateSpace: q.TemplateSpace.replaceDB(db),
	}
}

type queryCtx struct {
	App           IAppDo
	Audit         IAuditDo
	ConfigHook    IConfigHookDo
	Hook          IHookDo
	HookRelease   IHookReleaseDo
	IDGenerator   IIDGeneratorDo
	Release       IReleaseDo
	TemplateSpace ITemplateSpaceDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		App:           q.App.WithContext(ctx),
		Audit:         q.Audit.WithContext(ctx),
		ConfigHook:    q.ConfigHook.WithContext(ctx),
		Hook:          q.Hook.WithContext(ctx),
		HookRelease:   q.HookRelease.WithContext(ctx),
		IDGenerator:   q.IDGenerator.WithContext(ctx),
		Release:       q.Release.WithContext(ctx),
		TemplateSpace: q.TemplateSpace.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
