// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q               = new(Query)
	App             *app
	Audit           *audit
	Credential      *credential
	CredentialScope *credentialScope
	Event           *event
	Group           *group
	GroupAppBind    *groupAppBind
	IDGenerator     *iDGenerator
	Template        *template
	TemplateRelease *templateRelease
	TemplateSpace   *templateSpace
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	App = &Q.App
	Audit = &Q.Audit
	Credential = &Q.Credential
	CredentialScope = &Q.CredentialScope
	Event = &Q.Event
	Group = &Q.Group
	GroupAppBind = &Q.GroupAppBind
	IDGenerator = &Q.IDGenerator
	Template = &Q.Template
	TemplateRelease = &Q.TemplateRelease
	TemplateSpace = &Q.TemplateSpace
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:              db,
		App:             newApp(db, opts...),
		Audit:           newAudit(db, opts...),
		Credential:      newCredential(db, opts...),
		CredentialScope: newCredentialScope(db, opts...),
		Event:           newEvent(db, opts...),
		Group:           newGroup(db, opts...),
		GroupAppBind:    newGroupAppBind(db, opts...),
		IDGenerator:     newIDGenerator(db, opts...),
		Template:        newTemplate(db, opts...),
		TemplateRelease: newTemplateRelease(db, opts...),
		TemplateSpace:   newTemplateSpace(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	App             app
	Audit           audit
	Credential      credential
	CredentialScope credentialScope
	Event           event
	Group           group
	GroupAppBind    groupAppBind
	IDGenerator     iDGenerator
	Template        template
	TemplateRelease templateRelease
	TemplateSpace   templateSpace
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		App:             q.App.clone(db),
		Audit:           q.Audit.clone(db),
		Credential:      q.Credential.clone(db),
		CredentialScope: q.CredentialScope.clone(db),
		Event:           q.Event.clone(db),
		Group:           q.Group.clone(db),
		GroupAppBind:    q.GroupAppBind.clone(db),
		IDGenerator:     q.IDGenerator.clone(db),
		Template:        q.Template.clone(db),
		TemplateRelease: q.TemplateRelease.clone(db),
		TemplateSpace:   q.TemplateSpace.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		App:             q.App.replaceDB(db),
		Audit:           q.Audit.replaceDB(db),
		Credential:      q.Credential.replaceDB(db),
		CredentialScope: q.CredentialScope.replaceDB(db),
		Event:           q.Event.replaceDB(db),
		Group:           q.Group.replaceDB(db),
		GroupAppBind:    q.GroupAppBind.replaceDB(db),
		IDGenerator:     q.IDGenerator.replaceDB(db),
		Template:        q.Template.replaceDB(db),
		TemplateRelease: q.TemplateRelease.replaceDB(db),
		TemplateSpace:   q.TemplateSpace.replaceDB(db),
	}
}

type queryCtx struct {
	App             IAppDo
	Audit           IAuditDo
	Credential      ICredentialDo
	CredentialScope ICredentialScopeDo
	Event           IEventDo
	Group           IGroupDo
	GroupAppBind    IGroupAppBindDo
	IDGenerator     IIDGeneratorDo
	Template        ITemplateDo
	TemplateRelease ITemplateReleaseDo
	TemplateSpace   ITemplateSpaceDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		App:             q.App.WithContext(ctx),
		Audit:           q.Audit.WithContext(ctx),
		Credential:      q.Credential.WithContext(ctx),
		CredentialScope: q.CredentialScope.WithContext(ctx),
		Event:           q.Event.WithContext(ctx),
		Group:           q.Group.WithContext(ctx),
		GroupAppBind:    q.GroupAppBind.WithContext(ctx),
		IDGenerator:     q.IDGenerator.WithContext(ctx),
		Template:        q.Template.WithContext(ctx),
		TemplateRelease: q.TemplateRelease.WithContext(ctx),
		TemplateSpace:   q.TemplateSpace.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
