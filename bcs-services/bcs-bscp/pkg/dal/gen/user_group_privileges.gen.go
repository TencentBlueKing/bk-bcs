// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TencentBlueKing/bk-bcs/bcs-services/bcs-bscp/pkg/dal/table"
)

func newUserGroupPrivilege(db *gorm.DB, opts ...gen.DOOption) userGroupPrivilege {
	_userGroupPrivilege := userGroupPrivilege{}

	_userGroupPrivilege.userGroupPrivilegeDo.UseDB(db, opts...)
	_userGroupPrivilege.userGroupPrivilegeDo.UseModel(&table.UserGroupPrivilege{})

	tableName := _userGroupPrivilege.userGroupPrivilegeDo.TableName()
	_userGroupPrivilege.ALL = field.NewAsterisk(tableName)
	_userGroupPrivilege.ID = field.NewUint32(tableName, "id")
	_userGroupPrivilege.UserGroup = field.NewString(tableName, "user_group")
	_userGroupPrivilege.PrivilegeType = field.NewString(tableName, "privilege_type")
	_userGroupPrivilege.ReadOnly = field.NewBool(tableName, "read_only")
	_userGroupPrivilege.BizID = field.NewUint32(tableName, "biz_id")
	_userGroupPrivilege.AppID = field.NewUint32(tableName, "app_id")
	_userGroupPrivilege.Gid = field.NewUint32(tableName, "gid")
	_userGroupPrivilege.TemplateSpaceID = field.NewUint32(tableName, "template_space_id")
	_userGroupPrivilege.Creator = field.NewString(tableName, "creator")
	_userGroupPrivilege.Reviser = field.NewString(tableName, "reviser")
	_userGroupPrivilege.CreatedAt = field.NewTime(tableName, "created_at")
	_userGroupPrivilege.UpdatedAt = field.NewTime(tableName, "updated_at")

	_userGroupPrivilege.fillFieldMap()

	return _userGroupPrivilege
}

type userGroupPrivilege struct {
	userGroupPrivilegeDo userGroupPrivilegeDo

	ALL             field.Asterisk
	ID              field.Uint32
	UserGroup       field.String
	PrivilegeType   field.String
	ReadOnly        field.Bool
	BizID           field.Uint32
	AppID           field.Uint32
	Gid             field.Uint32
	TemplateSpaceID field.Uint32
	Creator         field.String
	Reviser         field.String
	CreatedAt       field.Time
	UpdatedAt       field.Time

	fieldMap map[string]field.Expr
}

func (u userGroupPrivilege) Table(newTableName string) *userGroupPrivilege {
	u.userGroupPrivilegeDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userGroupPrivilege) As(alias string) *userGroupPrivilege {
	u.userGroupPrivilegeDo.DO = *(u.userGroupPrivilegeDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userGroupPrivilege) updateTableName(table string) *userGroupPrivilege {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint32(table, "id")
	u.UserGroup = field.NewString(table, "user_group")
	u.PrivilegeType = field.NewString(table, "privilege_type")
	u.ReadOnly = field.NewBool(table, "read_only")
	u.BizID = field.NewUint32(table, "biz_id")
	u.AppID = field.NewUint32(table, "app_id")
	u.Gid = field.NewUint32(table, "gid")
	u.TemplateSpaceID = field.NewUint32(table, "template_space_id")
	u.Creator = field.NewString(table, "creator")
	u.Reviser = field.NewString(table, "reviser")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userGroupPrivilege) WithContext(ctx context.Context) IUserGroupPrivilegeDo {
	return u.userGroupPrivilegeDo.WithContext(ctx)
}

func (u userGroupPrivilege) TableName() string { return u.userGroupPrivilegeDo.TableName() }

func (u userGroupPrivilege) Alias() string { return u.userGroupPrivilegeDo.Alias() }

func (u userGroupPrivilege) Columns(cols ...field.Expr) gen.Columns {
	return u.userGroupPrivilegeDo.Columns(cols...)
}

func (u *userGroupPrivilege) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userGroupPrivilege) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 12)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_group"] = u.UserGroup
	u.fieldMap["privilege_type"] = u.PrivilegeType
	u.fieldMap["read_only"] = u.ReadOnly
	u.fieldMap["biz_id"] = u.BizID
	u.fieldMap["app_id"] = u.AppID
	u.fieldMap["gid"] = u.Gid
	u.fieldMap["template_space_id"] = u.TemplateSpaceID
	u.fieldMap["creator"] = u.Creator
	u.fieldMap["reviser"] = u.Reviser
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userGroupPrivilege) clone(db *gorm.DB) userGroupPrivilege {
	u.userGroupPrivilegeDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userGroupPrivilege) replaceDB(db *gorm.DB) userGroupPrivilege {
	u.userGroupPrivilegeDo.ReplaceDB(db)
	return u
}

type userGroupPrivilegeDo struct{ gen.DO }

type IUserGroupPrivilegeDo interface {
	gen.SubQuery
	Debug() IUserGroupPrivilegeDo
	WithContext(ctx context.Context) IUserGroupPrivilegeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserGroupPrivilegeDo
	WriteDB() IUserGroupPrivilegeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserGroupPrivilegeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserGroupPrivilegeDo
	Not(conds ...gen.Condition) IUserGroupPrivilegeDo
	Or(conds ...gen.Condition) IUserGroupPrivilegeDo
	Select(conds ...field.Expr) IUserGroupPrivilegeDo
	Where(conds ...gen.Condition) IUserGroupPrivilegeDo
	Order(conds ...field.Expr) IUserGroupPrivilegeDo
	Distinct(cols ...field.Expr) IUserGroupPrivilegeDo
	Omit(cols ...field.Expr) IUserGroupPrivilegeDo
	Join(table schema.Tabler, on ...field.Expr) IUserGroupPrivilegeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserGroupPrivilegeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserGroupPrivilegeDo
	Group(cols ...field.Expr) IUserGroupPrivilegeDo
	Having(conds ...gen.Condition) IUserGroupPrivilegeDo
	Limit(limit int) IUserGroupPrivilegeDo
	Offset(offset int) IUserGroupPrivilegeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserGroupPrivilegeDo
	Unscoped() IUserGroupPrivilegeDo
	Create(values ...*table.UserGroupPrivilege) error
	CreateInBatches(values []*table.UserGroupPrivilege, batchSize int) error
	Save(values ...*table.UserGroupPrivilege) error
	First() (*table.UserGroupPrivilege, error)
	Take() (*table.UserGroupPrivilege, error)
	Last() (*table.UserGroupPrivilege, error)
	Find() ([]*table.UserGroupPrivilege, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.UserGroupPrivilege, err error)
	FindInBatches(result *[]*table.UserGroupPrivilege, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.UserGroupPrivilege) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserGroupPrivilegeDo
	Assign(attrs ...field.AssignExpr) IUserGroupPrivilegeDo
	Joins(fields ...field.RelationField) IUserGroupPrivilegeDo
	Preload(fields ...field.RelationField) IUserGroupPrivilegeDo
	FirstOrInit() (*table.UserGroupPrivilege, error)
	FirstOrCreate() (*table.UserGroupPrivilege, error)
	FindByPage(offset int, limit int) (result []*table.UserGroupPrivilege, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserGroupPrivilegeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userGroupPrivilegeDo) Debug() IUserGroupPrivilegeDo {
	return u.withDO(u.DO.Debug())
}

func (u userGroupPrivilegeDo) WithContext(ctx context.Context) IUserGroupPrivilegeDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userGroupPrivilegeDo) ReadDB() IUserGroupPrivilegeDo {
	return u.Clauses(dbresolver.Read)
}

func (u userGroupPrivilegeDo) WriteDB() IUserGroupPrivilegeDo {
	return u.Clauses(dbresolver.Write)
}

func (u userGroupPrivilegeDo) Session(config *gorm.Session) IUserGroupPrivilegeDo {
	return u.withDO(u.DO.Session(config))
}

func (u userGroupPrivilegeDo) Clauses(conds ...clause.Expression) IUserGroupPrivilegeDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userGroupPrivilegeDo) Returning(value interface{}, columns ...string) IUserGroupPrivilegeDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userGroupPrivilegeDo) Not(conds ...gen.Condition) IUserGroupPrivilegeDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userGroupPrivilegeDo) Or(conds ...gen.Condition) IUserGroupPrivilegeDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userGroupPrivilegeDo) Select(conds ...field.Expr) IUserGroupPrivilegeDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userGroupPrivilegeDo) Where(conds ...gen.Condition) IUserGroupPrivilegeDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userGroupPrivilegeDo) Order(conds ...field.Expr) IUserGroupPrivilegeDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userGroupPrivilegeDo) Distinct(cols ...field.Expr) IUserGroupPrivilegeDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userGroupPrivilegeDo) Omit(cols ...field.Expr) IUserGroupPrivilegeDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userGroupPrivilegeDo) Join(table schema.Tabler, on ...field.Expr) IUserGroupPrivilegeDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userGroupPrivilegeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserGroupPrivilegeDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userGroupPrivilegeDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserGroupPrivilegeDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userGroupPrivilegeDo) Group(cols ...field.Expr) IUserGroupPrivilegeDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userGroupPrivilegeDo) Having(conds ...gen.Condition) IUserGroupPrivilegeDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userGroupPrivilegeDo) Limit(limit int) IUserGroupPrivilegeDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userGroupPrivilegeDo) Offset(offset int) IUserGroupPrivilegeDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userGroupPrivilegeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserGroupPrivilegeDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userGroupPrivilegeDo) Unscoped() IUserGroupPrivilegeDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userGroupPrivilegeDo) Create(values ...*table.UserGroupPrivilege) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userGroupPrivilegeDo) CreateInBatches(values []*table.UserGroupPrivilege, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userGroupPrivilegeDo) Save(values ...*table.UserGroupPrivilege) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userGroupPrivilegeDo) First() (*table.UserGroupPrivilege, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.UserGroupPrivilege), nil
	}
}

func (u userGroupPrivilegeDo) Take() (*table.UserGroupPrivilege, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.UserGroupPrivilege), nil
	}
}

func (u userGroupPrivilegeDo) Last() (*table.UserGroupPrivilege, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.UserGroupPrivilege), nil
	}
}

func (u userGroupPrivilegeDo) Find() ([]*table.UserGroupPrivilege, error) {
	result, err := u.DO.Find()
	return result.([]*table.UserGroupPrivilege), err
}

func (u userGroupPrivilegeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.UserGroupPrivilege, err error) {
	buf := make([]*table.UserGroupPrivilege, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userGroupPrivilegeDo) FindInBatches(result *[]*table.UserGroupPrivilege, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userGroupPrivilegeDo) Attrs(attrs ...field.AssignExpr) IUserGroupPrivilegeDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userGroupPrivilegeDo) Assign(attrs ...field.AssignExpr) IUserGroupPrivilegeDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userGroupPrivilegeDo) Joins(fields ...field.RelationField) IUserGroupPrivilegeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userGroupPrivilegeDo) Preload(fields ...field.RelationField) IUserGroupPrivilegeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userGroupPrivilegeDo) FirstOrInit() (*table.UserGroupPrivilege, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.UserGroupPrivilege), nil
	}
}

func (u userGroupPrivilegeDo) FirstOrCreate() (*table.UserGroupPrivilege, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.UserGroupPrivilege), nil
	}
}

func (u userGroupPrivilegeDo) FindByPage(offset int, limit int) (result []*table.UserGroupPrivilege, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userGroupPrivilegeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userGroupPrivilegeDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userGroupPrivilegeDo) Delete(models ...*table.UserGroupPrivilege) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userGroupPrivilegeDo) withDO(do gen.Dao) *userGroupPrivilegeDo {
	u.DO = *do.(*gen.DO)
	return u
}
