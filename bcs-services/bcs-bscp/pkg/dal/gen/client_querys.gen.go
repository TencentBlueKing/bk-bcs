// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TencentBlueKing/bk-bcs/bcs-services/bcs-bscp/pkg/dal/table"
)

func newClientQuery(db *gorm.DB, opts ...gen.DOOption) clientQuery {
	_clientQuery := clientQuery{}

	_clientQuery.clientQueryDo.UseDB(db, opts...)
	_clientQuery.clientQueryDo.UseModel(&table.ClientQuery{})

	tableName := _clientQuery.clientQueryDo.TableName()
	_clientQuery.ALL = field.NewAsterisk(tableName)
	_clientQuery.ID = field.NewUint32(tableName, "id")
	_clientQuery.BizID = field.NewUint32(tableName, "biz_id")
	_clientQuery.AppID = field.NewUint32(tableName, "app_id")
	_clientQuery.Creator = field.NewString(tableName, "creator")
	_clientQuery.SearchName = field.NewString(tableName, "search_name")
	_clientQuery.SearchType = field.NewString(tableName, "search_type")
	_clientQuery.SearchCondition = field.NewString(tableName, "search_condition")
	_clientQuery.CreatedAt = field.NewTime(tableName, "created_at")
	_clientQuery.UpdatedAt = field.NewTime(tableName, "updated_at")

	_clientQuery.fillFieldMap()

	return _clientQuery
}

type clientQuery struct {
	clientQueryDo clientQueryDo

	ALL             field.Asterisk
	ID              field.Uint32
	BizID           field.Uint32
	AppID           field.Uint32
	Creator         field.String
	SearchName      field.String
	SearchType      field.String
	SearchCondition field.String
	CreatedAt       field.Time
	UpdatedAt       field.Time

	fieldMap map[string]field.Expr
}

func (c clientQuery) Table(newTableName string) *clientQuery {
	c.clientQueryDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c clientQuery) As(alias string) *clientQuery {
	c.clientQueryDo.DO = *(c.clientQueryDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *clientQuery) updateTableName(table string) *clientQuery {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint32(table, "id")
	c.BizID = field.NewUint32(table, "biz_id")
	c.AppID = field.NewUint32(table, "app_id")
	c.Creator = field.NewString(table, "creator")
	c.SearchName = field.NewString(table, "search_name")
	c.SearchType = field.NewString(table, "search_type")
	c.SearchCondition = field.NewString(table, "search_condition")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *clientQuery) WithContext(ctx context.Context) IClientQueryDo {
	return c.clientQueryDo.WithContext(ctx)
}

func (c clientQuery) TableName() string { return c.clientQueryDo.TableName() }

func (c clientQuery) Alias() string { return c.clientQueryDo.Alias() }

func (c clientQuery) Columns(cols ...field.Expr) gen.Columns { return c.clientQueryDo.Columns(cols...) }

func (c *clientQuery) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *clientQuery) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["biz_id"] = c.BizID
	c.fieldMap["app_id"] = c.AppID
	c.fieldMap["creator"] = c.Creator
	c.fieldMap["search_name"] = c.SearchName
	c.fieldMap["search_type"] = c.SearchType
	c.fieldMap["search_condition"] = c.SearchCondition
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c clientQuery) clone(db *gorm.DB) clientQuery {
	c.clientQueryDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c clientQuery) replaceDB(db *gorm.DB) clientQuery {
	c.clientQueryDo.ReplaceDB(db)
	return c
}

type clientQueryDo struct{ gen.DO }

type IClientQueryDo interface {
	gen.SubQuery
	Debug() IClientQueryDo
	WithContext(ctx context.Context) IClientQueryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IClientQueryDo
	WriteDB() IClientQueryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IClientQueryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IClientQueryDo
	Not(conds ...gen.Condition) IClientQueryDo
	Or(conds ...gen.Condition) IClientQueryDo
	Select(conds ...field.Expr) IClientQueryDo
	Where(conds ...gen.Condition) IClientQueryDo
	Order(conds ...field.Expr) IClientQueryDo
	Distinct(cols ...field.Expr) IClientQueryDo
	Omit(cols ...field.Expr) IClientQueryDo
	Join(table schema.Tabler, on ...field.Expr) IClientQueryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IClientQueryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IClientQueryDo
	Group(cols ...field.Expr) IClientQueryDo
	Having(conds ...gen.Condition) IClientQueryDo
	Limit(limit int) IClientQueryDo
	Offset(offset int) IClientQueryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IClientQueryDo
	Unscoped() IClientQueryDo
	Create(values ...*table.ClientQuery) error
	CreateInBatches(values []*table.ClientQuery, batchSize int) error
	Save(values ...*table.ClientQuery) error
	First() (*table.ClientQuery, error)
	Take() (*table.ClientQuery, error)
	Last() (*table.ClientQuery, error)
	Find() ([]*table.ClientQuery, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ClientQuery, err error)
	FindInBatches(result *[]*table.ClientQuery, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.ClientQuery) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IClientQueryDo
	Assign(attrs ...field.AssignExpr) IClientQueryDo
	Joins(fields ...field.RelationField) IClientQueryDo
	Preload(fields ...field.RelationField) IClientQueryDo
	FirstOrInit() (*table.ClientQuery, error)
	FirstOrCreate() (*table.ClientQuery, error)
	FindByPage(offset int, limit int) (result []*table.ClientQuery, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IClientQueryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c clientQueryDo) Debug() IClientQueryDo {
	return c.withDO(c.DO.Debug())
}

func (c clientQueryDo) WithContext(ctx context.Context) IClientQueryDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c clientQueryDo) ReadDB() IClientQueryDo {
	return c.Clauses(dbresolver.Read)
}

func (c clientQueryDo) WriteDB() IClientQueryDo {
	return c.Clauses(dbresolver.Write)
}

func (c clientQueryDo) Session(config *gorm.Session) IClientQueryDo {
	return c.withDO(c.DO.Session(config))
}

func (c clientQueryDo) Clauses(conds ...clause.Expression) IClientQueryDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c clientQueryDo) Returning(value interface{}, columns ...string) IClientQueryDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c clientQueryDo) Not(conds ...gen.Condition) IClientQueryDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c clientQueryDo) Or(conds ...gen.Condition) IClientQueryDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c clientQueryDo) Select(conds ...field.Expr) IClientQueryDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c clientQueryDo) Where(conds ...gen.Condition) IClientQueryDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c clientQueryDo) Order(conds ...field.Expr) IClientQueryDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c clientQueryDo) Distinct(cols ...field.Expr) IClientQueryDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c clientQueryDo) Omit(cols ...field.Expr) IClientQueryDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c clientQueryDo) Join(table schema.Tabler, on ...field.Expr) IClientQueryDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c clientQueryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IClientQueryDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c clientQueryDo) RightJoin(table schema.Tabler, on ...field.Expr) IClientQueryDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c clientQueryDo) Group(cols ...field.Expr) IClientQueryDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c clientQueryDo) Having(conds ...gen.Condition) IClientQueryDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c clientQueryDo) Limit(limit int) IClientQueryDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c clientQueryDo) Offset(offset int) IClientQueryDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c clientQueryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IClientQueryDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c clientQueryDo) Unscoped() IClientQueryDo {
	return c.withDO(c.DO.Unscoped())
}

func (c clientQueryDo) Create(values ...*table.ClientQuery) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c clientQueryDo) CreateInBatches(values []*table.ClientQuery, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c clientQueryDo) Save(values ...*table.ClientQuery) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c clientQueryDo) First() (*table.ClientQuery, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.ClientQuery), nil
	}
}

func (c clientQueryDo) Take() (*table.ClientQuery, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.ClientQuery), nil
	}
}

func (c clientQueryDo) Last() (*table.ClientQuery, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.ClientQuery), nil
	}
}

func (c clientQueryDo) Find() ([]*table.ClientQuery, error) {
	result, err := c.DO.Find()
	return result.([]*table.ClientQuery), err
}

func (c clientQueryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ClientQuery, err error) {
	buf := make([]*table.ClientQuery, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c clientQueryDo) FindInBatches(result *[]*table.ClientQuery, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c clientQueryDo) Attrs(attrs ...field.AssignExpr) IClientQueryDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c clientQueryDo) Assign(attrs ...field.AssignExpr) IClientQueryDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c clientQueryDo) Joins(fields ...field.RelationField) IClientQueryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c clientQueryDo) Preload(fields ...field.RelationField) IClientQueryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c clientQueryDo) FirstOrInit() (*table.ClientQuery, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.ClientQuery), nil
	}
}

func (c clientQueryDo) FirstOrCreate() (*table.ClientQuery, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.ClientQuery), nil
	}
}

func (c clientQueryDo) FindByPage(offset int, limit int) (result []*table.ClientQuery, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c clientQueryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c clientQueryDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c clientQueryDo) Delete(models ...*table.ClientQuery) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *clientQueryDo) withDO(do gen.Dao) *clientQueryDo {
	c.DO = *do.(*gen.DO)
	return c
}
