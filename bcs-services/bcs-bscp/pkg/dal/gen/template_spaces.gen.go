// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bscp.io/pkg/dal/table"
)

func newTemplateSpace(db *gorm.DB, opts ...gen.DOOption) templateSpace {
	_templateSpace := templateSpace{}

	_templateSpace.templateSpaceDo.UseDB(db, opts...)
	_templateSpace.templateSpaceDo.UseModel(&table.TemplateSpace{})

	tableName := _templateSpace.templateSpaceDo.TableName()
	_templateSpace.ALL = field.NewAsterisk(tableName)
	_templateSpace.ID = field.NewUint32(tableName, "id")
	_templateSpace.Name = field.NewString(tableName, "name")
	_templateSpace.Memo = field.NewString(tableName, "memo")
	_templateSpace.BizID = field.NewUint32(tableName, "biz_id")
	_templateSpace.Creator = field.NewString(tableName, "creator")
	_templateSpace.Reviser = field.NewString(tableName, "reviser")
	_templateSpace.CreatedAt = field.NewTime(tableName, "created_at")
	_templateSpace.UpdatedAt = field.NewTime(tableName, "updated_at")

	_templateSpace.fillFieldMap()

	return _templateSpace
}

type templateSpace struct {
	templateSpaceDo templateSpaceDo

	ALL       field.Asterisk
	ID        field.Uint32
	Name      field.String
	Memo      field.String
	BizID     field.Uint32
	Creator   field.String
	Reviser   field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (t templateSpace) Table(newTableName string) *templateSpace {
	t.templateSpaceDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t templateSpace) As(alias string) *templateSpace {
	t.templateSpaceDo.DO = *(t.templateSpaceDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *templateSpace) updateTableName(table string) *templateSpace {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint32(table, "id")
	t.Name = field.NewString(table, "name")
	t.Memo = field.NewString(table, "memo")
	t.BizID = field.NewUint32(table, "biz_id")
	t.Creator = field.NewString(table, "creator")
	t.Reviser = field.NewString(table, "reviser")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *templateSpace) WithContext(ctx context.Context) ITemplateSpaceDo {
	return t.templateSpaceDo.WithContext(ctx)
}

func (t templateSpace) TableName() string { return t.templateSpaceDo.TableName() }

func (t templateSpace) Alias() string { return t.templateSpaceDo.Alias() }

func (t *templateSpace) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *templateSpace) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["memo"] = t.Memo
	t.fieldMap["biz_id"] = t.BizID
	t.fieldMap["creator"] = t.Creator
	t.fieldMap["reviser"] = t.Reviser
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t templateSpace) clone(db *gorm.DB) templateSpace {
	t.templateSpaceDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t templateSpace) replaceDB(db *gorm.DB) templateSpace {
	t.templateSpaceDo.ReplaceDB(db)
	return t
}

type templateSpaceDo struct{ gen.DO }

type ITemplateSpaceDo interface {
	gen.SubQuery
	Debug() ITemplateSpaceDo
	WithContext(ctx context.Context) ITemplateSpaceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITemplateSpaceDo
	WriteDB() ITemplateSpaceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITemplateSpaceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITemplateSpaceDo
	Not(conds ...gen.Condition) ITemplateSpaceDo
	Or(conds ...gen.Condition) ITemplateSpaceDo
	Select(conds ...field.Expr) ITemplateSpaceDo
	Where(conds ...gen.Condition) ITemplateSpaceDo
	Order(conds ...field.Expr) ITemplateSpaceDo
	Distinct(cols ...field.Expr) ITemplateSpaceDo
	Omit(cols ...field.Expr) ITemplateSpaceDo
	Join(table schema.Tabler, on ...field.Expr) ITemplateSpaceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITemplateSpaceDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITemplateSpaceDo
	Group(cols ...field.Expr) ITemplateSpaceDo
	Having(conds ...gen.Condition) ITemplateSpaceDo
	Limit(limit int) ITemplateSpaceDo
	Offset(offset int) ITemplateSpaceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITemplateSpaceDo
	Unscoped() ITemplateSpaceDo
	Create(values ...*table.TemplateSpace) error
	CreateInBatches(values []*table.TemplateSpace, batchSize int) error
	Save(values ...*table.TemplateSpace) error
	First() (*table.TemplateSpace, error)
	Take() (*table.TemplateSpace, error)
	Last() (*table.TemplateSpace, error)
	Find() ([]*table.TemplateSpace, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.TemplateSpace, err error)
	FindInBatches(result *[]*table.TemplateSpace, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.TemplateSpace) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITemplateSpaceDo
	Assign(attrs ...field.AssignExpr) ITemplateSpaceDo
	Joins(fields ...field.RelationField) ITemplateSpaceDo
	Preload(fields ...field.RelationField) ITemplateSpaceDo
	FirstOrInit() (*table.TemplateSpace, error)
	FirstOrCreate() (*table.TemplateSpace, error)
	FindByPage(offset int, limit int) (result []*table.TemplateSpace, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITemplateSpaceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t templateSpaceDo) Debug() ITemplateSpaceDo {
	return t.withDO(t.DO.Debug())
}

func (t templateSpaceDo) WithContext(ctx context.Context) ITemplateSpaceDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t templateSpaceDo) ReadDB() ITemplateSpaceDo {
	return t.Clauses(dbresolver.Read)
}

func (t templateSpaceDo) WriteDB() ITemplateSpaceDo {
	return t.Clauses(dbresolver.Write)
}

func (t templateSpaceDo) Session(config *gorm.Session) ITemplateSpaceDo {
	return t.withDO(t.DO.Session(config))
}

func (t templateSpaceDo) Clauses(conds ...clause.Expression) ITemplateSpaceDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t templateSpaceDo) Returning(value interface{}, columns ...string) ITemplateSpaceDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t templateSpaceDo) Not(conds ...gen.Condition) ITemplateSpaceDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t templateSpaceDo) Or(conds ...gen.Condition) ITemplateSpaceDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t templateSpaceDo) Select(conds ...field.Expr) ITemplateSpaceDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t templateSpaceDo) Where(conds ...gen.Condition) ITemplateSpaceDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t templateSpaceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITemplateSpaceDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t templateSpaceDo) Order(conds ...field.Expr) ITemplateSpaceDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t templateSpaceDo) Distinct(cols ...field.Expr) ITemplateSpaceDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t templateSpaceDo) Omit(cols ...field.Expr) ITemplateSpaceDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t templateSpaceDo) Join(table schema.Tabler, on ...field.Expr) ITemplateSpaceDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t templateSpaceDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITemplateSpaceDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t templateSpaceDo) RightJoin(table schema.Tabler, on ...field.Expr) ITemplateSpaceDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t templateSpaceDo) Group(cols ...field.Expr) ITemplateSpaceDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t templateSpaceDo) Having(conds ...gen.Condition) ITemplateSpaceDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t templateSpaceDo) Limit(limit int) ITemplateSpaceDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t templateSpaceDo) Offset(offset int) ITemplateSpaceDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t templateSpaceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITemplateSpaceDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t templateSpaceDo) Unscoped() ITemplateSpaceDo {
	return t.withDO(t.DO.Unscoped())
}

func (t templateSpaceDo) Create(values ...*table.TemplateSpace) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t templateSpaceDo) CreateInBatches(values []*table.TemplateSpace, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t templateSpaceDo) Save(values ...*table.TemplateSpace) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t templateSpaceDo) First() (*table.TemplateSpace, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.TemplateSpace), nil
	}
}

func (t templateSpaceDo) Take() (*table.TemplateSpace, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.TemplateSpace), nil
	}
}

func (t templateSpaceDo) Last() (*table.TemplateSpace, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.TemplateSpace), nil
	}
}

func (t templateSpaceDo) Find() ([]*table.TemplateSpace, error) {
	result, err := t.DO.Find()
	return result.([]*table.TemplateSpace), err
}

func (t templateSpaceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.TemplateSpace, err error) {
	buf := make([]*table.TemplateSpace, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t templateSpaceDo) FindInBatches(result *[]*table.TemplateSpace, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t templateSpaceDo) Attrs(attrs ...field.AssignExpr) ITemplateSpaceDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t templateSpaceDo) Assign(attrs ...field.AssignExpr) ITemplateSpaceDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t templateSpaceDo) Joins(fields ...field.RelationField) ITemplateSpaceDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t templateSpaceDo) Preload(fields ...field.RelationField) ITemplateSpaceDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t templateSpaceDo) FirstOrInit() (*table.TemplateSpace, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.TemplateSpace), nil
	}
}

func (t templateSpaceDo) FirstOrCreate() (*table.TemplateSpace, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.TemplateSpace), nil
	}
}

func (t templateSpaceDo) FindByPage(offset int, limit int) (result []*table.TemplateSpace, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t templateSpaceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t templateSpaceDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t templateSpaceDo) Delete(models ...*table.TemplateSpace) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *templateSpaceDo) withDO(do gen.Dao) *templateSpaceDo {
	t.DO = *do.(*gen.DO)
	return t
}
