// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bscp.io/pkg/dal/table"
)

func newConfigHook(db *gorm.DB, opts ...gen.DOOption) configHook {
	_configHook := configHook{}

	_configHook.configHookDo.UseDB(db, opts...)
	_configHook.configHookDo.UseModel(&table.ConfigHook{})

	tableName := _configHook.configHookDo.TableName()
	_configHook.ALL = field.NewAsterisk(tableName)
	_configHook.ID = field.NewUint32(tableName, "id")
	_configHook.PreHookID = field.NewUint32(tableName, "pre_hook_id")
	_configHook.PreHookReleaseID = field.NewUint32(tableName, "pre_hook_release_id")
	_configHook.PostHookID = field.NewUint32(tableName, "post_hook_id")
	_configHook.PostHookReleaseID = field.NewUint32(tableName, "post_hook_release_id")
	_configHook.BizID = field.NewUint32(tableName, "biz_id")
	_configHook.AppID = field.NewUint32(tableName, "app_id")
	_configHook.Creator = field.NewString(tableName, "creator")
	_configHook.Reviser = field.NewString(tableName, "reviser")
	_configHook.CreatedAt = field.NewTime(tableName, "created_at")
	_configHook.UpdatedAt = field.NewTime(tableName, "updated_at")

	_configHook.fillFieldMap()

	return _configHook
}

type configHook struct {
	configHookDo configHookDo

	ALL               field.Asterisk
	ID                field.Uint32
	PreHookID         field.Uint32
	PreHookReleaseID  field.Uint32
	PostHookID        field.Uint32
	PostHookReleaseID field.Uint32
	BizID             field.Uint32
	AppID             field.Uint32
	Creator           field.String
	Reviser           field.String
	CreatedAt         field.Time
	UpdatedAt         field.Time

	fieldMap map[string]field.Expr
}

func (c configHook) Table(newTableName string) *configHook {
	c.configHookDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c configHook) As(alias string) *configHook {
	c.configHookDo.DO = *(c.configHookDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *configHook) updateTableName(table string) *configHook {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint32(table, "id")
	c.PreHookID = field.NewUint32(table, "pre_hook_id")
	c.PreHookReleaseID = field.NewUint32(table, "pre_hook_release_id")
	c.PostHookID = field.NewUint32(table, "post_hook_id")
	c.PostHookReleaseID = field.NewUint32(table, "post_hook_release_id")
	c.BizID = field.NewUint32(table, "biz_id")
	c.AppID = field.NewUint32(table, "app_id")
	c.Creator = field.NewString(table, "creator")
	c.Reviser = field.NewString(table, "reviser")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *configHook) WithContext(ctx context.Context) IConfigHookDo {
	return c.configHookDo.WithContext(ctx)
}

func (c configHook) TableName() string { return c.configHookDo.TableName() }

func (c configHook) Alias() string { return c.configHookDo.Alias() }

func (c *configHook) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *configHook) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 11)
	c.fieldMap["id"] = c.ID
	c.fieldMap["pre_hook_id"] = c.PreHookID
	c.fieldMap["pre_hook_release_id"] = c.PreHookReleaseID
	c.fieldMap["post_hook_id"] = c.PostHookID
	c.fieldMap["post_hook_release_id"] = c.PostHookReleaseID
	c.fieldMap["biz_id"] = c.BizID
	c.fieldMap["app_id"] = c.AppID
	c.fieldMap["creator"] = c.Creator
	c.fieldMap["reviser"] = c.Reviser
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c configHook) clone(db *gorm.DB) configHook {
	c.configHookDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c configHook) replaceDB(db *gorm.DB) configHook {
	c.configHookDo.ReplaceDB(db)
	return c
}

type configHookDo struct{ gen.DO }

type IConfigHookDo interface {
	gen.SubQuery
	Debug() IConfigHookDo
	WithContext(ctx context.Context) IConfigHookDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IConfigHookDo
	WriteDB() IConfigHookDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IConfigHookDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IConfigHookDo
	Not(conds ...gen.Condition) IConfigHookDo
	Or(conds ...gen.Condition) IConfigHookDo
	Select(conds ...field.Expr) IConfigHookDo
	Where(conds ...gen.Condition) IConfigHookDo
	Order(conds ...field.Expr) IConfigHookDo
	Distinct(cols ...field.Expr) IConfigHookDo
	Omit(cols ...field.Expr) IConfigHookDo
	Join(table schema.Tabler, on ...field.Expr) IConfigHookDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IConfigHookDo
	RightJoin(table schema.Tabler, on ...field.Expr) IConfigHookDo
	Group(cols ...field.Expr) IConfigHookDo
	Having(conds ...gen.Condition) IConfigHookDo
	Limit(limit int) IConfigHookDo
	Offset(offset int) IConfigHookDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IConfigHookDo
	Unscoped() IConfigHookDo
	Create(values ...*table.ConfigHook) error
	CreateInBatches(values []*table.ConfigHook, batchSize int) error
	Save(values ...*table.ConfigHook) error
	First() (*table.ConfigHook, error)
	Take() (*table.ConfigHook, error)
	Last() (*table.ConfigHook, error)
	Find() ([]*table.ConfigHook, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ConfigHook, err error)
	FindInBatches(result *[]*table.ConfigHook, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.ConfigHook) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IConfigHookDo
	Assign(attrs ...field.AssignExpr) IConfigHookDo
	Joins(fields ...field.RelationField) IConfigHookDo
	Preload(fields ...field.RelationField) IConfigHookDo
	FirstOrInit() (*table.ConfigHook, error)
	FirstOrCreate() (*table.ConfigHook, error)
	FindByPage(offset int, limit int) (result []*table.ConfigHook, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IConfigHookDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c configHookDo) Debug() IConfigHookDo {
	return c.withDO(c.DO.Debug())
}

func (c configHookDo) WithContext(ctx context.Context) IConfigHookDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c configHookDo) ReadDB() IConfigHookDo {
	return c.Clauses(dbresolver.Read)
}

func (c configHookDo) WriteDB() IConfigHookDo {
	return c.Clauses(dbresolver.Write)
}

func (c configHookDo) Session(config *gorm.Session) IConfigHookDo {
	return c.withDO(c.DO.Session(config))
}

func (c configHookDo) Clauses(conds ...clause.Expression) IConfigHookDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c configHookDo) Returning(value interface{}, columns ...string) IConfigHookDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c configHookDo) Not(conds ...gen.Condition) IConfigHookDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c configHookDo) Or(conds ...gen.Condition) IConfigHookDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c configHookDo) Select(conds ...field.Expr) IConfigHookDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c configHookDo) Where(conds ...gen.Condition) IConfigHookDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c configHookDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IConfigHookDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c configHookDo) Order(conds ...field.Expr) IConfigHookDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c configHookDo) Distinct(cols ...field.Expr) IConfigHookDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c configHookDo) Omit(cols ...field.Expr) IConfigHookDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c configHookDo) Join(table schema.Tabler, on ...field.Expr) IConfigHookDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c configHookDo) LeftJoin(table schema.Tabler, on ...field.Expr) IConfigHookDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c configHookDo) RightJoin(table schema.Tabler, on ...field.Expr) IConfigHookDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c configHookDo) Group(cols ...field.Expr) IConfigHookDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c configHookDo) Having(conds ...gen.Condition) IConfigHookDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c configHookDo) Limit(limit int) IConfigHookDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c configHookDo) Offset(offset int) IConfigHookDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c configHookDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IConfigHookDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c configHookDo) Unscoped() IConfigHookDo {
	return c.withDO(c.DO.Unscoped())
}

func (c configHookDo) Create(values ...*table.ConfigHook) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c configHookDo) CreateInBatches(values []*table.ConfigHook, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c configHookDo) Save(values ...*table.ConfigHook) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c configHookDo) First() (*table.ConfigHook, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.ConfigHook), nil
	}
}

func (c configHookDo) Take() (*table.ConfigHook, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.ConfigHook), nil
	}
}

func (c configHookDo) Last() (*table.ConfigHook, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.ConfigHook), nil
	}
}

func (c configHookDo) Find() ([]*table.ConfigHook, error) {
	result, err := c.DO.Find()
	return result.([]*table.ConfigHook), err
}

func (c configHookDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ConfigHook, err error) {
	buf := make([]*table.ConfigHook, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c configHookDo) FindInBatches(result *[]*table.ConfigHook, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c configHookDo) Attrs(attrs ...field.AssignExpr) IConfigHookDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c configHookDo) Assign(attrs ...field.AssignExpr) IConfigHookDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c configHookDo) Joins(fields ...field.RelationField) IConfigHookDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c configHookDo) Preload(fields ...field.RelationField) IConfigHookDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c configHookDo) FirstOrInit() (*table.ConfigHook, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.ConfigHook), nil
	}
}

func (c configHookDo) FirstOrCreate() (*table.ConfigHook, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.ConfigHook), nil
	}
}

func (c configHookDo) FindByPage(offset int, limit int) (result []*table.ConfigHook, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c configHookDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c configHookDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c configHookDo) Delete(models ...*table.ConfigHook) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *configHookDo) withDO(do gen.Dao) *configHookDo {
	c.DO = *do.(*gen.DO)
	return c
}
