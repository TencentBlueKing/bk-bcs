// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bscp.io/pkg/dal/table"
)

func newCredentialScope(db *gorm.DB, opts ...gen.DOOption) credentialScope {
	_credentialScope := credentialScope{}

	_credentialScope.credentialScopeDo.UseDB(db, opts...)
	_credentialScope.credentialScopeDo.UseModel(&table.CredentialScope{})

	tableName := _credentialScope.credentialScopeDo.TableName()
	_credentialScope.ALL = field.NewAsterisk(tableName)
	_credentialScope.ID = field.NewUint32(tableName, "id")
	_credentialScope.CredentialScope = field.NewString(tableName, "credential_scope")
	_credentialScope.ExpiredAt = field.NewTime(tableName, "expired_at")
	_credentialScope.BizID = field.NewUint32(tableName, "biz_id")
	_credentialScope.CredentialId = field.NewUint32(tableName, "credential_id")
	_credentialScope.Creator = field.NewString(tableName, "creator")
	_credentialScope.Reviser = field.NewString(tableName, "reviser")
	_credentialScope.CreatedAt = field.NewTime(tableName, "created_at")
	_credentialScope.UpdatedAt = field.NewTime(tableName, "updated_at")

	_credentialScope.fillFieldMap()

	return _credentialScope
}

type credentialScope struct {
	credentialScopeDo credentialScopeDo

	ALL             field.Asterisk
	ID              field.Uint32
	CredentialScope field.String
	ExpiredAt       field.Time
	BizID           field.Uint32
	CredentialId    field.Uint32
	Creator         field.String
	Reviser         field.String
	CreatedAt       field.Time
	UpdatedAt       field.Time

	fieldMap map[string]field.Expr
}

func (c credentialScope) Table(newTableName string) *credentialScope {
	c.credentialScopeDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c credentialScope) As(alias string) *credentialScope {
	c.credentialScopeDo.DO = *(c.credentialScopeDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *credentialScope) updateTableName(table string) *credentialScope {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint32(table, "id")
	c.CredentialScope = field.NewString(table, "credential_scope")
	c.ExpiredAt = field.NewTime(table, "expired_at")
	c.BizID = field.NewUint32(table, "biz_id")
	c.CredentialId = field.NewUint32(table, "credential_id")
	c.Creator = field.NewString(table, "creator")
	c.Reviser = field.NewString(table, "reviser")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *credentialScope) WithContext(ctx context.Context) ICredentialScopeDo {
	return c.credentialScopeDo.WithContext(ctx)
}

func (c credentialScope) TableName() string { return c.credentialScopeDo.TableName() }

func (c credentialScope) Alias() string { return c.credentialScopeDo.Alias() }

func (c *credentialScope) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *credentialScope) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["credential_scope"] = c.CredentialScope
	c.fieldMap["expired_at"] = c.ExpiredAt
	c.fieldMap["biz_id"] = c.BizID
	c.fieldMap["credential_id"] = c.CredentialId
	c.fieldMap["creator"] = c.Creator
	c.fieldMap["reviser"] = c.Reviser
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c credentialScope) clone(db *gorm.DB) credentialScope {
	c.credentialScopeDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c credentialScope) replaceDB(db *gorm.DB) credentialScope {
	c.credentialScopeDo.ReplaceDB(db)
	return c
}

type credentialScopeDo struct{ gen.DO }

type ICredentialScopeDo interface {
	gen.SubQuery
	Debug() ICredentialScopeDo
	WithContext(ctx context.Context) ICredentialScopeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICredentialScopeDo
	WriteDB() ICredentialScopeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICredentialScopeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICredentialScopeDo
	Not(conds ...gen.Condition) ICredentialScopeDo
	Or(conds ...gen.Condition) ICredentialScopeDo
	Select(conds ...field.Expr) ICredentialScopeDo
	Where(conds ...gen.Condition) ICredentialScopeDo
	Order(conds ...field.Expr) ICredentialScopeDo
	Distinct(cols ...field.Expr) ICredentialScopeDo
	Omit(cols ...field.Expr) ICredentialScopeDo
	Join(table schema.Tabler, on ...field.Expr) ICredentialScopeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICredentialScopeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICredentialScopeDo
	Group(cols ...field.Expr) ICredentialScopeDo
	Having(conds ...gen.Condition) ICredentialScopeDo
	Limit(limit int) ICredentialScopeDo
	Offset(offset int) ICredentialScopeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICredentialScopeDo
	Unscoped() ICredentialScopeDo
	Create(values ...*table.CredentialScope) error
	CreateInBatches(values []*table.CredentialScope, batchSize int) error
	Save(values ...*table.CredentialScope) error
	First() (*table.CredentialScope, error)
	Take() (*table.CredentialScope, error)
	Last() (*table.CredentialScope, error)
	Find() ([]*table.CredentialScope, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.CredentialScope, err error)
	FindInBatches(result *[]*table.CredentialScope, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.CredentialScope) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICredentialScopeDo
	Assign(attrs ...field.AssignExpr) ICredentialScopeDo
	Joins(fields ...field.RelationField) ICredentialScopeDo
	Preload(fields ...field.RelationField) ICredentialScopeDo
	FirstOrInit() (*table.CredentialScope, error)
	FirstOrCreate() (*table.CredentialScope, error)
	FindByPage(offset int, limit int) (result []*table.CredentialScope, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICredentialScopeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c credentialScopeDo) Debug() ICredentialScopeDo {
	return c.withDO(c.DO.Debug())
}

func (c credentialScopeDo) WithContext(ctx context.Context) ICredentialScopeDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c credentialScopeDo) ReadDB() ICredentialScopeDo {
	return c.Clauses(dbresolver.Read)
}

func (c credentialScopeDo) WriteDB() ICredentialScopeDo {
	return c.Clauses(dbresolver.Write)
}

func (c credentialScopeDo) Session(config *gorm.Session) ICredentialScopeDo {
	return c.withDO(c.DO.Session(config))
}

func (c credentialScopeDo) Clauses(conds ...clause.Expression) ICredentialScopeDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c credentialScopeDo) Returning(value interface{}, columns ...string) ICredentialScopeDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c credentialScopeDo) Not(conds ...gen.Condition) ICredentialScopeDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c credentialScopeDo) Or(conds ...gen.Condition) ICredentialScopeDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c credentialScopeDo) Select(conds ...field.Expr) ICredentialScopeDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c credentialScopeDo) Where(conds ...gen.Condition) ICredentialScopeDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c credentialScopeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICredentialScopeDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c credentialScopeDo) Order(conds ...field.Expr) ICredentialScopeDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c credentialScopeDo) Distinct(cols ...field.Expr) ICredentialScopeDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c credentialScopeDo) Omit(cols ...field.Expr) ICredentialScopeDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c credentialScopeDo) Join(table schema.Tabler, on ...field.Expr) ICredentialScopeDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c credentialScopeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICredentialScopeDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c credentialScopeDo) RightJoin(table schema.Tabler, on ...field.Expr) ICredentialScopeDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c credentialScopeDo) Group(cols ...field.Expr) ICredentialScopeDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c credentialScopeDo) Having(conds ...gen.Condition) ICredentialScopeDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c credentialScopeDo) Limit(limit int) ICredentialScopeDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c credentialScopeDo) Offset(offset int) ICredentialScopeDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c credentialScopeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICredentialScopeDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c credentialScopeDo) Unscoped() ICredentialScopeDo {
	return c.withDO(c.DO.Unscoped())
}

func (c credentialScopeDo) Create(values ...*table.CredentialScope) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c credentialScopeDo) CreateInBatches(values []*table.CredentialScope, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c credentialScopeDo) Save(values ...*table.CredentialScope) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c credentialScopeDo) First() (*table.CredentialScope, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.CredentialScope), nil
	}
}

func (c credentialScopeDo) Take() (*table.CredentialScope, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.CredentialScope), nil
	}
}

func (c credentialScopeDo) Last() (*table.CredentialScope, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.CredentialScope), nil
	}
}

func (c credentialScopeDo) Find() ([]*table.CredentialScope, error) {
	result, err := c.DO.Find()
	return result.([]*table.CredentialScope), err
}

func (c credentialScopeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.CredentialScope, err error) {
	buf := make([]*table.CredentialScope, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c credentialScopeDo) FindInBatches(result *[]*table.CredentialScope, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c credentialScopeDo) Attrs(attrs ...field.AssignExpr) ICredentialScopeDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c credentialScopeDo) Assign(attrs ...field.AssignExpr) ICredentialScopeDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c credentialScopeDo) Joins(fields ...field.RelationField) ICredentialScopeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c credentialScopeDo) Preload(fields ...field.RelationField) ICredentialScopeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c credentialScopeDo) FirstOrInit() (*table.CredentialScope, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.CredentialScope), nil
	}
}

func (c credentialScopeDo) FirstOrCreate() (*table.CredentialScope, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.CredentialScope), nil
	}
}

func (c credentialScopeDo) FindByPage(offset int, limit int) (result []*table.CredentialScope, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c credentialScopeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c credentialScopeDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c credentialScopeDo) Delete(models ...*table.CredentialScope) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *credentialScopeDo) withDO(do gen.Dao) *credentialScopeDo {
	c.DO = *do.(*gen.DO)
	return c
}
