// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bscp.io/pkg/dal/table"
)

func newIDGenerator(db *gorm.DB, opts ...gen.DOOption) iDGenerator {
	_iDGenerator := iDGenerator{}

	_iDGenerator.iDGeneratorDo.UseDB(db, opts...)
	_iDGenerator.iDGeneratorDo.UseModel(&table.IDGenerator{})

	tableName := _iDGenerator.iDGeneratorDo.TableName()
	_iDGenerator.ALL = field.NewAsterisk(tableName)
	_iDGenerator.ID = field.NewUint32(tableName, "id")
	_iDGenerator.Resource = field.NewString(tableName, "resource")
	_iDGenerator.MaxID = field.NewUint32(tableName, "max_id")
	_iDGenerator.UpdatedAt = field.NewTime(tableName, "updated_at")

	_iDGenerator.fillFieldMap()

	return _iDGenerator
}

type iDGenerator struct {
	iDGeneratorDo iDGeneratorDo

	ALL       field.Asterisk
	ID        field.Uint32
	Resource  field.String
	MaxID     field.Uint32
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (i iDGenerator) Table(newTableName string) *iDGenerator {
	i.iDGeneratorDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i iDGenerator) As(alias string) *iDGenerator {
	i.iDGeneratorDo.DO = *(i.iDGeneratorDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *iDGenerator) updateTableName(table string) *iDGenerator {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewUint32(table, "id")
	i.Resource = field.NewString(table, "resource")
	i.MaxID = field.NewUint32(table, "max_id")
	i.UpdatedAt = field.NewTime(table, "updated_at")

	i.fillFieldMap()

	return i
}

func (i *iDGenerator) WithContext(ctx context.Context) IIDGeneratorDo {
	return i.iDGeneratorDo.WithContext(ctx)
}

func (i iDGenerator) TableName() string { return i.iDGeneratorDo.TableName() }

func (i iDGenerator) Alias() string { return i.iDGeneratorDo.Alias() }

func (i *iDGenerator) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *iDGenerator) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 4)
	i.fieldMap["id"] = i.ID
	i.fieldMap["resource"] = i.Resource
	i.fieldMap["max_id"] = i.MaxID
	i.fieldMap["updated_at"] = i.UpdatedAt
}

func (i iDGenerator) clone(db *gorm.DB) iDGenerator {
	i.iDGeneratorDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i iDGenerator) replaceDB(db *gorm.DB) iDGenerator {
	i.iDGeneratorDo.ReplaceDB(db)
	return i
}

type iDGeneratorDo struct{ gen.DO }

type IIDGeneratorDo interface {
	gen.SubQuery
	Debug() IIDGeneratorDo
	WithContext(ctx context.Context) IIDGeneratorDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIDGeneratorDo
	WriteDB() IIDGeneratorDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIDGeneratorDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIDGeneratorDo
	Not(conds ...gen.Condition) IIDGeneratorDo
	Or(conds ...gen.Condition) IIDGeneratorDo
	Select(conds ...field.Expr) IIDGeneratorDo
	Where(conds ...gen.Condition) IIDGeneratorDo
	Order(conds ...field.Expr) IIDGeneratorDo
	Distinct(cols ...field.Expr) IIDGeneratorDo
	Omit(cols ...field.Expr) IIDGeneratorDo
	Join(table schema.Tabler, on ...field.Expr) IIDGeneratorDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIDGeneratorDo
	RightJoin(table schema.Tabler, on ...field.Expr) IIDGeneratorDo
	Group(cols ...field.Expr) IIDGeneratorDo
	Having(conds ...gen.Condition) IIDGeneratorDo
	Limit(limit int) IIDGeneratorDo
	Offset(offset int) IIDGeneratorDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIDGeneratorDo
	Unscoped() IIDGeneratorDo
	Create(values ...*table.IDGenerator) error
	CreateInBatches(values []*table.IDGenerator, batchSize int) error
	Save(values ...*table.IDGenerator) error
	First() (*table.IDGenerator, error)
	Take() (*table.IDGenerator, error)
	Last() (*table.IDGenerator, error)
	Find() ([]*table.IDGenerator, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.IDGenerator, err error)
	FindInBatches(result *[]*table.IDGenerator, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.IDGenerator) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIDGeneratorDo
	Assign(attrs ...field.AssignExpr) IIDGeneratorDo
	Joins(fields ...field.RelationField) IIDGeneratorDo
	Preload(fields ...field.RelationField) IIDGeneratorDo
	FirstOrInit() (*table.IDGenerator, error)
	FirstOrCreate() (*table.IDGenerator, error)
	FindByPage(offset int, limit int) (result []*table.IDGenerator, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIDGeneratorDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i iDGeneratorDo) Debug() IIDGeneratorDo {
	return i.withDO(i.DO.Debug())
}

func (i iDGeneratorDo) WithContext(ctx context.Context) IIDGeneratorDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i iDGeneratorDo) ReadDB() IIDGeneratorDo {
	return i.Clauses(dbresolver.Read)
}

func (i iDGeneratorDo) WriteDB() IIDGeneratorDo {
	return i.Clauses(dbresolver.Write)
}

func (i iDGeneratorDo) Session(config *gorm.Session) IIDGeneratorDo {
	return i.withDO(i.DO.Session(config))
}

func (i iDGeneratorDo) Clauses(conds ...clause.Expression) IIDGeneratorDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i iDGeneratorDo) Returning(value interface{}, columns ...string) IIDGeneratorDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i iDGeneratorDo) Not(conds ...gen.Condition) IIDGeneratorDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i iDGeneratorDo) Or(conds ...gen.Condition) IIDGeneratorDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i iDGeneratorDo) Select(conds ...field.Expr) IIDGeneratorDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i iDGeneratorDo) Where(conds ...gen.Condition) IIDGeneratorDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i iDGeneratorDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IIDGeneratorDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i iDGeneratorDo) Order(conds ...field.Expr) IIDGeneratorDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i iDGeneratorDo) Distinct(cols ...field.Expr) IIDGeneratorDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i iDGeneratorDo) Omit(cols ...field.Expr) IIDGeneratorDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i iDGeneratorDo) Join(table schema.Tabler, on ...field.Expr) IIDGeneratorDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i iDGeneratorDo) LeftJoin(table schema.Tabler, on ...field.Expr) IIDGeneratorDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i iDGeneratorDo) RightJoin(table schema.Tabler, on ...field.Expr) IIDGeneratorDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i iDGeneratorDo) Group(cols ...field.Expr) IIDGeneratorDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i iDGeneratorDo) Having(conds ...gen.Condition) IIDGeneratorDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i iDGeneratorDo) Limit(limit int) IIDGeneratorDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i iDGeneratorDo) Offset(offset int) IIDGeneratorDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i iDGeneratorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIDGeneratorDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i iDGeneratorDo) Unscoped() IIDGeneratorDo {
	return i.withDO(i.DO.Unscoped())
}

func (i iDGeneratorDo) Create(values ...*table.IDGenerator) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i iDGeneratorDo) CreateInBatches(values []*table.IDGenerator, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i iDGeneratorDo) Save(values ...*table.IDGenerator) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i iDGeneratorDo) First() (*table.IDGenerator, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.IDGenerator), nil
	}
}

func (i iDGeneratorDo) Take() (*table.IDGenerator, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.IDGenerator), nil
	}
}

func (i iDGeneratorDo) Last() (*table.IDGenerator, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.IDGenerator), nil
	}
}

func (i iDGeneratorDo) Find() ([]*table.IDGenerator, error) {
	result, err := i.DO.Find()
	return result.([]*table.IDGenerator), err
}

func (i iDGeneratorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.IDGenerator, err error) {
	buf := make([]*table.IDGenerator, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i iDGeneratorDo) FindInBatches(result *[]*table.IDGenerator, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i iDGeneratorDo) Attrs(attrs ...field.AssignExpr) IIDGeneratorDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i iDGeneratorDo) Assign(attrs ...field.AssignExpr) IIDGeneratorDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i iDGeneratorDo) Joins(fields ...field.RelationField) IIDGeneratorDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i iDGeneratorDo) Preload(fields ...field.RelationField) IIDGeneratorDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i iDGeneratorDo) FirstOrInit() (*table.IDGenerator, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.IDGenerator), nil
	}
}

func (i iDGeneratorDo) FirstOrCreate() (*table.IDGenerator, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.IDGenerator), nil
	}
}

func (i iDGeneratorDo) FindByPage(offset int, limit int) (result []*table.IDGenerator, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i iDGeneratorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i iDGeneratorDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i iDGeneratorDo) Delete(models ...*table.IDGenerator) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *iDGeneratorDo) withDO(do gen.Dao) *iDGeneratorDo {
	i.DO = *do.(*gen.DO)
	return i
}
