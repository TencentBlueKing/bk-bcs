// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bscp.io/pkg/dal/table"
)

func newReleasedAppTemplateVariable(db *gorm.DB, opts ...gen.DOOption) releasedAppTemplateVariable {
	_releasedAppTemplateVariable := releasedAppTemplateVariable{}

	_releasedAppTemplateVariable.releasedAppTemplateVariableDo.UseDB(db, opts...)
	_releasedAppTemplateVariable.releasedAppTemplateVariableDo.UseModel(&table.ReleasedAppTemplateVariable{})

	tableName := _releasedAppTemplateVariable.releasedAppTemplateVariableDo.TableName()
	_releasedAppTemplateVariable.ALL = field.NewAsterisk(tableName)
	_releasedAppTemplateVariable.ID = field.NewUint32(tableName, "id")
	_releasedAppTemplateVariable.ReleaseID = field.NewUint32(tableName, "release_id")
	_releasedAppTemplateVariable.Variables = field.NewField(tableName, "variables")
	_releasedAppTemplateVariable.BizID = field.NewUint32(tableName, "biz_id")
	_releasedAppTemplateVariable.AppID = field.NewUint32(tableName, "app_id")
	_releasedAppTemplateVariable.Creator = field.NewString(tableName, "creator")
	_releasedAppTemplateVariable.CreatedAt = field.NewTime(tableName, "created_at")

	_releasedAppTemplateVariable.fillFieldMap()

	return _releasedAppTemplateVariable
}

type releasedAppTemplateVariable struct {
	releasedAppTemplateVariableDo releasedAppTemplateVariableDo

	ALL       field.Asterisk
	ID        field.Uint32
	ReleaseID field.Uint32
	Variables field.Field
	BizID     field.Uint32
	AppID     field.Uint32
	Creator   field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (r releasedAppTemplateVariable) Table(newTableName string) *releasedAppTemplateVariable {
	r.releasedAppTemplateVariableDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r releasedAppTemplateVariable) As(alias string) *releasedAppTemplateVariable {
	r.releasedAppTemplateVariableDo.DO = *(r.releasedAppTemplateVariableDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *releasedAppTemplateVariable) updateTableName(table string) *releasedAppTemplateVariable {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint32(table, "id")
	r.ReleaseID = field.NewUint32(table, "release_id")
	r.Variables = field.NewField(table, "variables")
	r.BizID = field.NewUint32(table, "biz_id")
	r.AppID = field.NewUint32(table, "app_id")
	r.Creator = field.NewString(table, "creator")
	r.CreatedAt = field.NewTime(table, "created_at")

	r.fillFieldMap()

	return r
}

func (r *releasedAppTemplateVariable) WithContext(ctx context.Context) IReleasedAppTemplateVariableDo {
	return r.releasedAppTemplateVariableDo.WithContext(ctx)
}

func (r releasedAppTemplateVariable) TableName() string {
	return r.releasedAppTemplateVariableDo.TableName()
}

func (r releasedAppTemplateVariable) Alias() string { return r.releasedAppTemplateVariableDo.Alias() }

func (r releasedAppTemplateVariable) Columns(cols ...field.Expr) gen.Columns {
	return r.releasedAppTemplateVariableDo.Columns(cols...)
}

func (r *releasedAppTemplateVariable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *releasedAppTemplateVariable) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 7)
	r.fieldMap["id"] = r.ID
	r.fieldMap["release_id"] = r.ReleaseID
	r.fieldMap["variables"] = r.Variables
	r.fieldMap["biz_id"] = r.BizID
	r.fieldMap["app_id"] = r.AppID
	r.fieldMap["creator"] = r.Creator
	r.fieldMap["created_at"] = r.CreatedAt
}

func (r releasedAppTemplateVariable) clone(db *gorm.DB) releasedAppTemplateVariable {
	r.releasedAppTemplateVariableDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r releasedAppTemplateVariable) replaceDB(db *gorm.DB) releasedAppTemplateVariable {
	r.releasedAppTemplateVariableDo.ReplaceDB(db)
	return r
}

type releasedAppTemplateVariableDo struct{ gen.DO }

type IReleasedAppTemplateVariableDo interface {
	gen.SubQuery
	Debug() IReleasedAppTemplateVariableDo
	WithContext(ctx context.Context) IReleasedAppTemplateVariableDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReleasedAppTemplateVariableDo
	WriteDB() IReleasedAppTemplateVariableDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReleasedAppTemplateVariableDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReleasedAppTemplateVariableDo
	Not(conds ...gen.Condition) IReleasedAppTemplateVariableDo
	Or(conds ...gen.Condition) IReleasedAppTemplateVariableDo
	Select(conds ...field.Expr) IReleasedAppTemplateVariableDo
	Where(conds ...gen.Condition) IReleasedAppTemplateVariableDo
	Order(conds ...field.Expr) IReleasedAppTemplateVariableDo
	Distinct(cols ...field.Expr) IReleasedAppTemplateVariableDo
	Omit(cols ...field.Expr) IReleasedAppTemplateVariableDo
	Join(table schema.Tabler, on ...field.Expr) IReleasedAppTemplateVariableDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReleasedAppTemplateVariableDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReleasedAppTemplateVariableDo
	Group(cols ...field.Expr) IReleasedAppTemplateVariableDo
	Having(conds ...gen.Condition) IReleasedAppTemplateVariableDo
	Limit(limit int) IReleasedAppTemplateVariableDo
	Offset(offset int) IReleasedAppTemplateVariableDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReleasedAppTemplateVariableDo
	Unscoped() IReleasedAppTemplateVariableDo
	Create(values ...*table.ReleasedAppTemplateVariable) error
	CreateInBatches(values []*table.ReleasedAppTemplateVariable, batchSize int) error
	Save(values ...*table.ReleasedAppTemplateVariable) error
	First() (*table.ReleasedAppTemplateVariable, error)
	Take() (*table.ReleasedAppTemplateVariable, error)
	Last() (*table.ReleasedAppTemplateVariable, error)
	Find() ([]*table.ReleasedAppTemplateVariable, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ReleasedAppTemplateVariable, err error)
	FindInBatches(result *[]*table.ReleasedAppTemplateVariable, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.ReleasedAppTemplateVariable) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReleasedAppTemplateVariableDo
	Assign(attrs ...field.AssignExpr) IReleasedAppTemplateVariableDo
	Joins(fields ...field.RelationField) IReleasedAppTemplateVariableDo
	Preload(fields ...field.RelationField) IReleasedAppTemplateVariableDo
	FirstOrInit() (*table.ReleasedAppTemplateVariable, error)
	FirstOrCreate() (*table.ReleasedAppTemplateVariable, error)
	FindByPage(offset int, limit int) (result []*table.ReleasedAppTemplateVariable, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReleasedAppTemplateVariableDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r releasedAppTemplateVariableDo) Debug() IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.Debug())
}

func (r releasedAppTemplateVariableDo) WithContext(ctx context.Context) IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r releasedAppTemplateVariableDo) ReadDB() IReleasedAppTemplateVariableDo {
	return r.Clauses(dbresolver.Read)
}

func (r releasedAppTemplateVariableDo) WriteDB() IReleasedAppTemplateVariableDo {
	return r.Clauses(dbresolver.Write)
}

func (r releasedAppTemplateVariableDo) Session(config *gorm.Session) IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.Session(config))
}

func (r releasedAppTemplateVariableDo) Clauses(conds ...clause.Expression) IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r releasedAppTemplateVariableDo) Returning(value interface{}, columns ...string) IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r releasedAppTemplateVariableDo) Not(conds ...gen.Condition) IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r releasedAppTemplateVariableDo) Or(conds ...gen.Condition) IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r releasedAppTemplateVariableDo) Select(conds ...field.Expr) IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r releasedAppTemplateVariableDo) Where(conds ...gen.Condition) IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r releasedAppTemplateVariableDo) Order(conds ...field.Expr) IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r releasedAppTemplateVariableDo) Distinct(cols ...field.Expr) IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r releasedAppTemplateVariableDo) Omit(cols ...field.Expr) IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r releasedAppTemplateVariableDo) Join(table schema.Tabler, on ...field.Expr) IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r releasedAppTemplateVariableDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r releasedAppTemplateVariableDo) RightJoin(table schema.Tabler, on ...field.Expr) IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r releasedAppTemplateVariableDo) Group(cols ...field.Expr) IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r releasedAppTemplateVariableDo) Having(conds ...gen.Condition) IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r releasedAppTemplateVariableDo) Limit(limit int) IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r releasedAppTemplateVariableDo) Offset(offset int) IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r releasedAppTemplateVariableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r releasedAppTemplateVariableDo) Unscoped() IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.Unscoped())
}

func (r releasedAppTemplateVariableDo) Create(values ...*table.ReleasedAppTemplateVariable) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r releasedAppTemplateVariableDo) CreateInBatches(values []*table.ReleasedAppTemplateVariable, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r releasedAppTemplateVariableDo) Save(values ...*table.ReleasedAppTemplateVariable) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r releasedAppTemplateVariableDo) First() (*table.ReleasedAppTemplateVariable, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.ReleasedAppTemplateVariable), nil
	}
}

func (r releasedAppTemplateVariableDo) Take() (*table.ReleasedAppTemplateVariable, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.ReleasedAppTemplateVariable), nil
	}
}

func (r releasedAppTemplateVariableDo) Last() (*table.ReleasedAppTemplateVariable, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.ReleasedAppTemplateVariable), nil
	}
}

func (r releasedAppTemplateVariableDo) Find() ([]*table.ReleasedAppTemplateVariable, error) {
	result, err := r.DO.Find()
	return result.([]*table.ReleasedAppTemplateVariable), err
}

func (r releasedAppTemplateVariableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ReleasedAppTemplateVariable, err error) {
	buf := make([]*table.ReleasedAppTemplateVariable, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r releasedAppTemplateVariableDo) FindInBatches(result *[]*table.ReleasedAppTemplateVariable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r releasedAppTemplateVariableDo) Attrs(attrs ...field.AssignExpr) IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r releasedAppTemplateVariableDo) Assign(attrs ...field.AssignExpr) IReleasedAppTemplateVariableDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r releasedAppTemplateVariableDo) Joins(fields ...field.RelationField) IReleasedAppTemplateVariableDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r releasedAppTemplateVariableDo) Preload(fields ...field.RelationField) IReleasedAppTemplateVariableDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r releasedAppTemplateVariableDo) FirstOrInit() (*table.ReleasedAppTemplateVariable, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.ReleasedAppTemplateVariable), nil
	}
}

func (r releasedAppTemplateVariableDo) FirstOrCreate() (*table.ReleasedAppTemplateVariable, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.ReleasedAppTemplateVariable), nil
	}
}

func (r releasedAppTemplateVariableDo) FindByPage(offset int, limit int) (result []*table.ReleasedAppTemplateVariable, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r releasedAppTemplateVariableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r releasedAppTemplateVariableDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r releasedAppTemplateVariableDo) Delete(models ...*table.ReleasedAppTemplateVariable) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *releasedAppTemplateVariableDo) withDO(do gen.Dao) *releasedAppTemplateVariableDo {
	r.DO = *do.(*gen.DO)
	return r
}
