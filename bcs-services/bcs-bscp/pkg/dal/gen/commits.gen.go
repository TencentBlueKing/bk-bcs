// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TencentBlueKing/bk-bcs/bcs-services/bcs-bscp/pkg/dal/table"
)

func newCommit(db *gorm.DB, opts ...gen.DOOption) commit {
	_commit := commit{}

	_commit.commitDo.UseDB(db, opts...)
	_commit.commitDo.UseModel(&table.Commit{})

	tableName := _commit.commitDo.TableName()
	_commit.ALL = field.NewAsterisk(tableName)
	_commit.ID = field.NewUint32(tableName, "id")
	_commit.ContentID = field.NewUint32(tableName, "content_id")
	_commit.Signature = field.NewString(tableName, "signature")
	_commit.ByteSize = field.NewUint64(tableName, "byte_size")
	_commit.Memo = field.NewString(tableName, "memo")
	_commit.BizID = field.NewUint32(tableName, "biz_id")
	_commit.AppID = field.NewUint32(tableName, "app_id")
	_commit.ConfigItemID = field.NewUint32(tableName, "config_item_id")
	_commit.Creator = field.NewString(tableName, "creator")
	_commit.CreatedAt = field.NewTime(tableName, "created_at")

	_commit.fillFieldMap()

	return _commit
}

type commit struct {
	commitDo commitDo

	ALL          field.Asterisk
	ID           field.Uint32
	ContentID    field.Uint32
	Signature    field.String
	ByteSize     field.Uint64
	Memo         field.String
	BizID        field.Uint32
	AppID        field.Uint32
	ConfigItemID field.Uint32
	Creator      field.String
	CreatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (c commit) Table(newTableName string) *commit {
	c.commitDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c commit) As(alias string) *commit {
	c.commitDo.DO = *(c.commitDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *commit) updateTableName(table string) *commit {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint32(table, "id")
	c.ContentID = field.NewUint32(table, "content_id")
	c.Signature = field.NewString(table, "signature")
	c.ByteSize = field.NewUint64(table, "byte_size")
	c.Memo = field.NewString(table, "memo")
	c.BizID = field.NewUint32(table, "biz_id")
	c.AppID = field.NewUint32(table, "app_id")
	c.ConfigItemID = field.NewUint32(table, "config_item_id")
	c.Creator = field.NewString(table, "creator")
	c.CreatedAt = field.NewTime(table, "created_at")

	c.fillFieldMap()

	return c
}

func (c *commit) WithContext(ctx context.Context) ICommitDo { return c.commitDo.WithContext(ctx) }

func (c commit) TableName() string { return c.commitDo.TableName() }

func (c commit) Alias() string { return c.commitDo.Alias() }

func (c commit) Columns(cols ...field.Expr) gen.Columns { return c.commitDo.Columns(cols...) }

func (c *commit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *commit) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["content_id"] = c.ContentID
	c.fieldMap["signature"] = c.Signature
	c.fieldMap["byte_size"] = c.ByteSize
	c.fieldMap["memo"] = c.Memo
	c.fieldMap["biz_id"] = c.BizID
	c.fieldMap["app_id"] = c.AppID
	c.fieldMap["config_item_id"] = c.ConfigItemID
	c.fieldMap["creator"] = c.Creator
	c.fieldMap["created_at"] = c.CreatedAt
}

func (c commit) clone(db *gorm.DB) commit {
	c.commitDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c commit) replaceDB(db *gorm.DB) commit {
	c.commitDo.ReplaceDB(db)
	return c
}

type commitDo struct{ gen.DO }

type ICommitDo interface {
	gen.SubQuery
	Debug() ICommitDo
	WithContext(ctx context.Context) ICommitDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICommitDo
	WriteDB() ICommitDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICommitDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICommitDo
	Not(conds ...gen.Condition) ICommitDo
	Or(conds ...gen.Condition) ICommitDo
	Select(conds ...field.Expr) ICommitDo
	Where(conds ...gen.Condition) ICommitDo
	Order(conds ...field.Expr) ICommitDo
	Distinct(cols ...field.Expr) ICommitDo
	Omit(cols ...field.Expr) ICommitDo
	Join(table schema.Tabler, on ...field.Expr) ICommitDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICommitDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICommitDo
	Group(cols ...field.Expr) ICommitDo
	Having(conds ...gen.Condition) ICommitDo
	Limit(limit int) ICommitDo
	Offset(offset int) ICommitDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICommitDo
	Unscoped() ICommitDo
	Create(values ...*table.Commit) error
	CreateInBatches(values []*table.Commit, batchSize int) error
	Save(values ...*table.Commit) error
	First() (*table.Commit, error)
	Take() (*table.Commit, error)
	Last() (*table.Commit, error)
	Find() ([]*table.Commit, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.Commit, err error)
	FindInBatches(result *[]*table.Commit, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.Commit) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICommitDo
	Assign(attrs ...field.AssignExpr) ICommitDo
	Joins(fields ...field.RelationField) ICommitDo
	Preload(fields ...field.RelationField) ICommitDo
	FirstOrInit() (*table.Commit, error)
	FirstOrCreate() (*table.Commit, error)
	FindByPage(offset int, limit int) (result []*table.Commit, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICommitDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c commitDo) Debug() ICommitDo {
	return c.withDO(c.DO.Debug())
}

func (c commitDo) WithContext(ctx context.Context) ICommitDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c commitDo) ReadDB() ICommitDo {
	return c.Clauses(dbresolver.Read)
}

func (c commitDo) WriteDB() ICommitDo {
	return c.Clauses(dbresolver.Write)
}

func (c commitDo) Session(config *gorm.Session) ICommitDo {
	return c.withDO(c.DO.Session(config))
}

func (c commitDo) Clauses(conds ...clause.Expression) ICommitDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c commitDo) Returning(value interface{}, columns ...string) ICommitDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c commitDo) Not(conds ...gen.Condition) ICommitDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c commitDo) Or(conds ...gen.Condition) ICommitDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c commitDo) Select(conds ...field.Expr) ICommitDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c commitDo) Where(conds ...gen.Condition) ICommitDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c commitDo) Order(conds ...field.Expr) ICommitDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c commitDo) Distinct(cols ...field.Expr) ICommitDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c commitDo) Omit(cols ...field.Expr) ICommitDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c commitDo) Join(table schema.Tabler, on ...field.Expr) ICommitDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c commitDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICommitDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c commitDo) RightJoin(table schema.Tabler, on ...field.Expr) ICommitDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c commitDo) Group(cols ...field.Expr) ICommitDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c commitDo) Having(conds ...gen.Condition) ICommitDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c commitDo) Limit(limit int) ICommitDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c commitDo) Offset(offset int) ICommitDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c commitDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICommitDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c commitDo) Unscoped() ICommitDo {
	return c.withDO(c.DO.Unscoped())
}

func (c commitDo) Create(values ...*table.Commit) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c commitDo) CreateInBatches(values []*table.Commit, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c commitDo) Save(values ...*table.Commit) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c commitDo) First() (*table.Commit, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.Commit), nil
	}
}

func (c commitDo) Take() (*table.Commit, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.Commit), nil
	}
}

func (c commitDo) Last() (*table.Commit, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.Commit), nil
	}
}

func (c commitDo) Find() ([]*table.Commit, error) {
	result, err := c.DO.Find()
	return result.([]*table.Commit), err
}

func (c commitDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.Commit, err error) {
	buf := make([]*table.Commit, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c commitDo) FindInBatches(result *[]*table.Commit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c commitDo) Attrs(attrs ...field.AssignExpr) ICommitDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c commitDo) Assign(attrs ...field.AssignExpr) ICommitDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c commitDo) Joins(fields ...field.RelationField) ICommitDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c commitDo) Preload(fields ...field.RelationField) ICommitDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c commitDo) FirstOrInit() (*table.Commit, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.Commit), nil
	}
}

func (c commitDo) FirstOrCreate() (*table.Commit, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.Commit), nil
	}
}

func (c commitDo) FindByPage(offset int, limit int) (result []*table.Commit, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c commitDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c commitDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c commitDo) Delete(models ...*table.Commit) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *commitDo) withDO(do gen.Dao) *commitDo {
	c.DO = *do.(*gen.DO)
	return c
}
