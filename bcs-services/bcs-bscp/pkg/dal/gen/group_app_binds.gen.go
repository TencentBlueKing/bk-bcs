// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bscp.io/pkg/dal/table"
)

func newGroupAppBind(db *gorm.DB, opts ...gen.DOOption) groupAppBind {
	_groupAppBind := groupAppBind{}

	_groupAppBind.groupAppBindDo.UseDB(db, opts...)
	_groupAppBind.groupAppBindDo.UseModel(&table.GroupAppBind{})

	tableName := _groupAppBind.groupAppBindDo.TableName()
	_groupAppBind.ALL = field.NewAsterisk(tableName)
	_groupAppBind.ID = field.NewUint32(tableName, "id")
	_groupAppBind.GroupID = field.NewUint32(tableName, "group_id")
	_groupAppBind.AppID = field.NewUint32(tableName, "app_id")
	_groupAppBind.BizID = field.NewUint32(tableName, "biz_id")

	_groupAppBind.fillFieldMap()

	return _groupAppBind
}

type groupAppBind struct {
	groupAppBindDo groupAppBindDo

	ALL     field.Asterisk
	ID      field.Uint32
	GroupID field.Uint32
	AppID   field.Uint32
	BizID   field.Uint32

	fieldMap map[string]field.Expr
}

func (g groupAppBind) Table(newTableName string) *groupAppBind {
	g.groupAppBindDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g groupAppBind) As(alias string) *groupAppBind {
	g.groupAppBindDo.DO = *(g.groupAppBindDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *groupAppBind) updateTableName(table string) *groupAppBind {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewUint32(table, "id")
	g.GroupID = field.NewUint32(table, "group_id")
	g.AppID = field.NewUint32(table, "app_id")
	g.BizID = field.NewUint32(table, "biz_id")

	g.fillFieldMap()

	return g
}

func (g *groupAppBind) WithContext(ctx context.Context) IGroupAppBindDo {
	return g.groupAppBindDo.WithContext(ctx)
}

func (g groupAppBind) TableName() string { return g.groupAppBindDo.TableName() }

func (g groupAppBind) Alias() string { return g.groupAppBindDo.Alias() }

func (g *groupAppBind) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *groupAppBind) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 4)
	g.fieldMap["id"] = g.ID
	g.fieldMap["group_id"] = g.GroupID
	g.fieldMap["app_id"] = g.AppID
	g.fieldMap["biz_id"] = g.BizID
}

func (g groupAppBind) clone(db *gorm.DB) groupAppBind {
	g.groupAppBindDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g groupAppBind) replaceDB(db *gorm.DB) groupAppBind {
	g.groupAppBindDo.ReplaceDB(db)
	return g
}

type groupAppBindDo struct{ gen.DO }

type IGroupAppBindDo interface {
	gen.SubQuery
	Debug() IGroupAppBindDo
	WithContext(ctx context.Context) IGroupAppBindDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGroupAppBindDo
	WriteDB() IGroupAppBindDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGroupAppBindDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGroupAppBindDo
	Not(conds ...gen.Condition) IGroupAppBindDo
	Or(conds ...gen.Condition) IGroupAppBindDo
	Select(conds ...field.Expr) IGroupAppBindDo
	Where(conds ...gen.Condition) IGroupAppBindDo
	Order(conds ...field.Expr) IGroupAppBindDo
	Distinct(cols ...field.Expr) IGroupAppBindDo
	Omit(cols ...field.Expr) IGroupAppBindDo
	Join(table schema.Tabler, on ...field.Expr) IGroupAppBindDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGroupAppBindDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGroupAppBindDo
	Group(cols ...field.Expr) IGroupAppBindDo
	Having(conds ...gen.Condition) IGroupAppBindDo
	Limit(limit int) IGroupAppBindDo
	Offset(offset int) IGroupAppBindDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGroupAppBindDo
	Unscoped() IGroupAppBindDo
	Create(values ...*table.GroupAppBind) error
	CreateInBatches(values []*table.GroupAppBind, batchSize int) error
	Save(values ...*table.GroupAppBind) error
	First() (*table.GroupAppBind, error)
	Take() (*table.GroupAppBind, error)
	Last() (*table.GroupAppBind, error)
	Find() ([]*table.GroupAppBind, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.GroupAppBind, err error)
	FindInBatches(result *[]*table.GroupAppBind, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.GroupAppBind) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGroupAppBindDo
	Assign(attrs ...field.AssignExpr) IGroupAppBindDo
	Joins(fields ...field.RelationField) IGroupAppBindDo
	Preload(fields ...field.RelationField) IGroupAppBindDo
	FirstOrInit() (*table.GroupAppBind, error)
	FirstOrCreate() (*table.GroupAppBind, error)
	FindByPage(offset int, limit int) (result []*table.GroupAppBind, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGroupAppBindDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g groupAppBindDo) Debug() IGroupAppBindDo {
	return g.withDO(g.DO.Debug())
}

func (g groupAppBindDo) WithContext(ctx context.Context) IGroupAppBindDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g groupAppBindDo) ReadDB() IGroupAppBindDo {
	return g.Clauses(dbresolver.Read)
}

func (g groupAppBindDo) WriteDB() IGroupAppBindDo {
	return g.Clauses(dbresolver.Write)
}

func (g groupAppBindDo) Session(config *gorm.Session) IGroupAppBindDo {
	return g.withDO(g.DO.Session(config))
}

func (g groupAppBindDo) Clauses(conds ...clause.Expression) IGroupAppBindDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g groupAppBindDo) Returning(value interface{}, columns ...string) IGroupAppBindDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g groupAppBindDo) Not(conds ...gen.Condition) IGroupAppBindDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g groupAppBindDo) Or(conds ...gen.Condition) IGroupAppBindDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g groupAppBindDo) Select(conds ...field.Expr) IGroupAppBindDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g groupAppBindDo) Where(conds ...gen.Condition) IGroupAppBindDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g groupAppBindDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGroupAppBindDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g groupAppBindDo) Order(conds ...field.Expr) IGroupAppBindDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g groupAppBindDo) Distinct(cols ...field.Expr) IGroupAppBindDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g groupAppBindDo) Omit(cols ...field.Expr) IGroupAppBindDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g groupAppBindDo) Join(table schema.Tabler, on ...field.Expr) IGroupAppBindDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g groupAppBindDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGroupAppBindDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g groupAppBindDo) RightJoin(table schema.Tabler, on ...field.Expr) IGroupAppBindDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g groupAppBindDo) Group(cols ...field.Expr) IGroupAppBindDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g groupAppBindDo) Having(conds ...gen.Condition) IGroupAppBindDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g groupAppBindDo) Limit(limit int) IGroupAppBindDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g groupAppBindDo) Offset(offset int) IGroupAppBindDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g groupAppBindDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGroupAppBindDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g groupAppBindDo) Unscoped() IGroupAppBindDo {
	return g.withDO(g.DO.Unscoped())
}

func (g groupAppBindDo) Create(values ...*table.GroupAppBind) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g groupAppBindDo) CreateInBatches(values []*table.GroupAppBind, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g groupAppBindDo) Save(values ...*table.GroupAppBind) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g groupAppBindDo) First() (*table.GroupAppBind, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.GroupAppBind), nil
	}
}

func (g groupAppBindDo) Take() (*table.GroupAppBind, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.GroupAppBind), nil
	}
}

func (g groupAppBindDo) Last() (*table.GroupAppBind, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.GroupAppBind), nil
	}
}

func (g groupAppBindDo) Find() ([]*table.GroupAppBind, error) {
	result, err := g.DO.Find()
	return result.([]*table.GroupAppBind), err
}

func (g groupAppBindDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.GroupAppBind, err error) {
	buf := make([]*table.GroupAppBind, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g groupAppBindDo) FindInBatches(result *[]*table.GroupAppBind, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g groupAppBindDo) Attrs(attrs ...field.AssignExpr) IGroupAppBindDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g groupAppBindDo) Assign(attrs ...field.AssignExpr) IGroupAppBindDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g groupAppBindDo) Joins(fields ...field.RelationField) IGroupAppBindDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g groupAppBindDo) Preload(fields ...field.RelationField) IGroupAppBindDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g groupAppBindDo) FirstOrInit() (*table.GroupAppBind, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.GroupAppBind), nil
	}
}

func (g groupAppBindDo) FirstOrCreate() (*table.GroupAppBind, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.GroupAppBind), nil
	}
}

func (g groupAppBindDo) FindByPage(offset int, limit int) (result []*table.GroupAppBind, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g groupAppBindDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g groupAppBindDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g groupAppBindDo) Delete(models ...*table.GroupAppBind) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *groupAppBindDo) withDO(do gen.Dao) *groupAppBindDo {
	g.DO = *do.(*gen.DO)
	return g
}
