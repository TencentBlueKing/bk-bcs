// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bscp.io/pkg/dal/table"
)

func newReleasedAppTemplateBinding(db *gorm.DB, opts ...gen.DOOption) releasedAppTemplateBinding {
	_releasedAppTemplateBinding := releasedAppTemplateBinding{}

	_releasedAppTemplateBinding.releasedAppTemplateBindingDo.UseDB(db, opts...)
	_releasedAppTemplateBinding.releasedAppTemplateBindingDo.UseModel(&table.ReleasedAppTemplateBinding{})

	tableName := _releasedAppTemplateBinding.releasedAppTemplateBindingDo.TableName()
	_releasedAppTemplateBinding.ALL = field.NewAsterisk(tableName)
	_releasedAppTemplateBinding.ID = field.NewUint32(tableName, "id")
	_releasedAppTemplateBinding.TemplateSpaceIDs = field.NewField(tableName, "template_space_ids")
	_releasedAppTemplateBinding.TemplateSetIDs = field.NewField(tableName, "template_set_ids")
	_releasedAppTemplateBinding.TemplateIDs = field.NewField(tableName, "template_ids")
	_releasedAppTemplateBinding.TemplateRevisionIDs = field.NewField(tableName, "template_revision_ids")
	_releasedAppTemplateBinding.Bindings = field.NewField(tableName, "bindings")
	_releasedAppTemplateBinding.ReleaseID = field.NewUint32(tableName, "release_id")
	_releasedAppTemplateBinding.BizID = field.NewUint32(tableName, "biz_id")
	_releasedAppTemplateBinding.AppID = field.NewUint32(tableName, "app_id")
	_releasedAppTemplateBinding.Creator = field.NewString(tableName, "creator")
	_releasedAppTemplateBinding.CreatedAt = field.NewTime(tableName, "created_at")

	_releasedAppTemplateBinding.fillFieldMap()

	return _releasedAppTemplateBinding
}

type releasedAppTemplateBinding struct {
	releasedAppTemplateBindingDo releasedAppTemplateBindingDo

	ALL                 field.Asterisk
	ID                  field.Uint32
	TemplateSpaceIDs    field.Field
	TemplateSetIDs      field.Field
	TemplateIDs         field.Field
	TemplateRevisionIDs field.Field
	Bindings            field.Field
	ReleaseID           field.Uint32
	BizID               field.Uint32
	AppID               field.Uint32
	Creator             field.String
	CreatedAt           field.Time

	fieldMap map[string]field.Expr
}

func (r releasedAppTemplateBinding) Table(newTableName string) *releasedAppTemplateBinding {
	r.releasedAppTemplateBindingDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r releasedAppTemplateBinding) As(alias string) *releasedAppTemplateBinding {
	r.releasedAppTemplateBindingDo.DO = *(r.releasedAppTemplateBindingDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *releasedAppTemplateBinding) updateTableName(table string) *releasedAppTemplateBinding {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint32(table, "id")
	r.TemplateSpaceIDs = field.NewField(table, "template_space_ids")
	r.TemplateSetIDs = field.NewField(table, "template_set_ids")
	r.TemplateIDs = field.NewField(table, "template_ids")
	r.TemplateRevisionIDs = field.NewField(table, "template_revision_ids")
	r.Bindings = field.NewField(table, "bindings")
	r.ReleaseID = field.NewUint32(table, "release_id")
	r.BizID = field.NewUint32(table, "biz_id")
	r.AppID = field.NewUint32(table, "app_id")
	r.Creator = field.NewString(table, "creator")
	r.CreatedAt = field.NewTime(table, "created_at")

	r.fillFieldMap()

	return r
}

func (r *releasedAppTemplateBinding) WithContext(ctx context.Context) IReleasedAppTemplateBindingDo {
	return r.releasedAppTemplateBindingDo.WithContext(ctx)
}

func (r releasedAppTemplateBinding) TableName() string {
	return r.releasedAppTemplateBindingDo.TableName()
}

func (r releasedAppTemplateBinding) Alias() string { return r.releasedAppTemplateBindingDo.Alias() }

func (r releasedAppTemplateBinding) Columns(cols ...field.Expr) gen.Columns {
	return r.releasedAppTemplateBindingDo.Columns(cols...)
}

func (r *releasedAppTemplateBinding) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *releasedAppTemplateBinding) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 11)
	r.fieldMap["id"] = r.ID
	r.fieldMap["template_space_ids"] = r.TemplateSpaceIDs
	r.fieldMap["template_set_ids"] = r.TemplateSetIDs
	r.fieldMap["template_ids"] = r.TemplateIDs
	r.fieldMap["template_revision_ids"] = r.TemplateRevisionIDs
	r.fieldMap["bindings"] = r.Bindings
	r.fieldMap["release_id"] = r.ReleaseID
	r.fieldMap["biz_id"] = r.BizID
	r.fieldMap["app_id"] = r.AppID
	r.fieldMap["creator"] = r.Creator
	r.fieldMap["created_at"] = r.CreatedAt
}

func (r releasedAppTemplateBinding) clone(db *gorm.DB) releasedAppTemplateBinding {
	r.releasedAppTemplateBindingDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r releasedAppTemplateBinding) replaceDB(db *gorm.DB) releasedAppTemplateBinding {
	r.releasedAppTemplateBindingDo.ReplaceDB(db)
	return r
}

type releasedAppTemplateBindingDo struct{ gen.DO }

type IReleasedAppTemplateBindingDo interface {
	gen.SubQuery
	Debug() IReleasedAppTemplateBindingDo
	WithContext(ctx context.Context) IReleasedAppTemplateBindingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReleasedAppTemplateBindingDo
	WriteDB() IReleasedAppTemplateBindingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReleasedAppTemplateBindingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReleasedAppTemplateBindingDo
	Not(conds ...gen.Condition) IReleasedAppTemplateBindingDo
	Or(conds ...gen.Condition) IReleasedAppTemplateBindingDo
	Select(conds ...field.Expr) IReleasedAppTemplateBindingDo
	Where(conds ...gen.Condition) IReleasedAppTemplateBindingDo
	Order(conds ...field.Expr) IReleasedAppTemplateBindingDo
	Distinct(cols ...field.Expr) IReleasedAppTemplateBindingDo
	Omit(cols ...field.Expr) IReleasedAppTemplateBindingDo
	Join(table schema.Tabler, on ...field.Expr) IReleasedAppTemplateBindingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReleasedAppTemplateBindingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReleasedAppTemplateBindingDo
	Group(cols ...field.Expr) IReleasedAppTemplateBindingDo
	Having(conds ...gen.Condition) IReleasedAppTemplateBindingDo
	Limit(limit int) IReleasedAppTemplateBindingDo
	Offset(offset int) IReleasedAppTemplateBindingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReleasedAppTemplateBindingDo
	Unscoped() IReleasedAppTemplateBindingDo
	Create(values ...*table.ReleasedAppTemplateBinding) error
	CreateInBatches(values []*table.ReleasedAppTemplateBinding, batchSize int) error
	Save(values ...*table.ReleasedAppTemplateBinding) error
	First() (*table.ReleasedAppTemplateBinding, error)
	Take() (*table.ReleasedAppTemplateBinding, error)
	Last() (*table.ReleasedAppTemplateBinding, error)
	Find() ([]*table.ReleasedAppTemplateBinding, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ReleasedAppTemplateBinding, err error)
	FindInBatches(result *[]*table.ReleasedAppTemplateBinding, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.ReleasedAppTemplateBinding) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReleasedAppTemplateBindingDo
	Assign(attrs ...field.AssignExpr) IReleasedAppTemplateBindingDo
	Joins(fields ...field.RelationField) IReleasedAppTemplateBindingDo
	Preload(fields ...field.RelationField) IReleasedAppTemplateBindingDo
	FirstOrInit() (*table.ReleasedAppTemplateBinding, error)
	FirstOrCreate() (*table.ReleasedAppTemplateBinding, error)
	FindByPage(offset int, limit int) (result []*table.ReleasedAppTemplateBinding, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReleasedAppTemplateBindingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r releasedAppTemplateBindingDo) Debug() IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.Debug())
}

func (r releasedAppTemplateBindingDo) WithContext(ctx context.Context) IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r releasedAppTemplateBindingDo) ReadDB() IReleasedAppTemplateBindingDo {
	return r.Clauses(dbresolver.Read)
}

func (r releasedAppTemplateBindingDo) WriteDB() IReleasedAppTemplateBindingDo {
	return r.Clauses(dbresolver.Write)
}

func (r releasedAppTemplateBindingDo) Session(config *gorm.Session) IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.Session(config))
}

func (r releasedAppTemplateBindingDo) Clauses(conds ...clause.Expression) IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r releasedAppTemplateBindingDo) Returning(value interface{}, columns ...string) IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r releasedAppTemplateBindingDo) Not(conds ...gen.Condition) IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r releasedAppTemplateBindingDo) Or(conds ...gen.Condition) IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r releasedAppTemplateBindingDo) Select(conds ...field.Expr) IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r releasedAppTemplateBindingDo) Where(conds ...gen.Condition) IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r releasedAppTemplateBindingDo) Order(conds ...field.Expr) IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r releasedAppTemplateBindingDo) Distinct(cols ...field.Expr) IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r releasedAppTemplateBindingDo) Omit(cols ...field.Expr) IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r releasedAppTemplateBindingDo) Join(table schema.Tabler, on ...field.Expr) IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r releasedAppTemplateBindingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r releasedAppTemplateBindingDo) RightJoin(table schema.Tabler, on ...field.Expr) IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r releasedAppTemplateBindingDo) Group(cols ...field.Expr) IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r releasedAppTemplateBindingDo) Having(conds ...gen.Condition) IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r releasedAppTemplateBindingDo) Limit(limit int) IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r releasedAppTemplateBindingDo) Offset(offset int) IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r releasedAppTemplateBindingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r releasedAppTemplateBindingDo) Unscoped() IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.Unscoped())
}

func (r releasedAppTemplateBindingDo) Create(values ...*table.ReleasedAppTemplateBinding) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r releasedAppTemplateBindingDo) CreateInBatches(values []*table.ReleasedAppTemplateBinding, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r releasedAppTemplateBindingDo) Save(values ...*table.ReleasedAppTemplateBinding) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r releasedAppTemplateBindingDo) First() (*table.ReleasedAppTemplateBinding, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.ReleasedAppTemplateBinding), nil
	}
}

func (r releasedAppTemplateBindingDo) Take() (*table.ReleasedAppTemplateBinding, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.ReleasedAppTemplateBinding), nil
	}
}

func (r releasedAppTemplateBindingDo) Last() (*table.ReleasedAppTemplateBinding, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.ReleasedAppTemplateBinding), nil
	}
}

func (r releasedAppTemplateBindingDo) Find() ([]*table.ReleasedAppTemplateBinding, error) {
	result, err := r.DO.Find()
	return result.([]*table.ReleasedAppTemplateBinding), err
}

func (r releasedAppTemplateBindingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ReleasedAppTemplateBinding, err error) {
	buf := make([]*table.ReleasedAppTemplateBinding, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r releasedAppTemplateBindingDo) FindInBatches(result *[]*table.ReleasedAppTemplateBinding, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r releasedAppTemplateBindingDo) Attrs(attrs ...field.AssignExpr) IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r releasedAppTemplateBindingDo) Assign(attrs ...field.AssignExpr) IReleasedAppTemplateBindingDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r releasedAppTemplateBindingDo) Joins(fields ...field.RelationField) IReleasedAppTemplateBindingDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r releasedAppTemplateBindingDo) Preload(fields ...field.RelationField) IReleasedAppTemplateBindingDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r releasedAppTemplateBindingDo) FirstOrInit() (*table.ReleasedAppTemplateBinding, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.ReleasedAppTemplateBinding), nil
	}
}

func (r releasedAppTemplateBindingDo) FirstOrCreate() (*table.ReleasedAppTemplateBinding, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.ReleasedAppTemplateBinding), nil
	}
}

func (r releasedAppTemplateBindingDo) FindByPage(offset int, limit int) (result []*table.ReleasedAppTemplateBinding, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r releasedAppTemplateBindingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r releasedAppTemplateBindingDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r releasedAppTemplateBindingDo) Delete(models ...*table.ReleasedAppTemplateBinding) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *releasedAppTemplateBindingDo) withDO(do gen.Dao) *releasedAppTemplateBindingDo {
	r.DO = *do.(*gen.DO)
	return r
}
