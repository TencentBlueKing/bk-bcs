// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bscp.io/pkg/dal/table"
)

func newReleasedConfigItem(db *gorm.DB, opts ...gen.DOOption) releasedConfigItem {
	_releasedConfigItem := releasedConfigItem{}

	_releasedConfigItem.releasedConfigItemDo.UseDB(db, opts...)
	_releasedConfigItem.releasedConfigItemDo.UseModel(&table.ReleasedConfigItem{})

	tableName := _releasedConfigItem.releasedConfigItemDo.TableName()
	_releasedConfigItem.ALL = field.NewAsterisk(tableName)
	_releasedConfigItem.ID = field.NewUint32(tableName, "id")
	_releasedConfigItem.ReleaseID = field.NewUint32(tableName, "release_id")
	_releasedConfigItem.CommitID = field.NewUint32(tableName, "commit_id")
	_releasedConfigItem.ConfigItemID = field.NewUint32(tableName, "config_item_id")
	_releasedConfigItem.ContentID = field.NewUint32(tableName, "content_id")
	_releasedConfigItem.Signature = field.NewString(tableName, "signature")
	_releasedConfigItem.ByteSize = field.NewUint64(tableName, "byte_size")
	_releasedConfigItem.Memo = field.NewString(tableName, "name")
	_releasedConfigItem.Name = field.NewString(tableName, "name")
	_releasedConfigItem.Path = field.NewString(tableName, "name")
	_releasedConfigItem.FileType = field.NewString(tableName, "name")
	_releasedConfigItem.FileMode = field.NewString(tableName, "name")
	_releasedConfigItem.User = field.NewString(tableName, "user")
	_releasedConfigItem.UserGroup = field.NewString(tableName, "user_group")
	_releasedConfigItem.Privilege = field.NewString(tableName, "privilege")
	_releasedConfigItem.BizID = field.NewUint32(tableName, "biz_id")
	_releasedConfigItem.AppID = field.NewUint32(tableName, "app_id")
	_releasedConfigItem.Creator = field.NewString(tableName, "creator")
	_releasedConfigItem.Reviser = field.NewString(tableName, "reviser")
	_releasedConfigItem.CreatedAt = field.NewTime(tableName, "created_at")
	_releasedConfigItem.UpdatedAt = field.NewTime(tableName, "updated_at")

	_releasedConfigItem.fillFieldMap()

	return _releasedConfigItem
}

type releasedConfigItem struct {
	releasedConfigItemDo releasedConfigItemDo

	ALL          field.Asterisk
	ID           field.Uint32
	ReleaseID    field.Uint32
	CommitID     field.Uint32
	ConfigItemID field.Uint32
	ContentID    field.Uint32
	Signature    field.String
	ByteSize     field.Uint64
	Memo         field.String
	Name         field.String
	Path         field.String
	FileType     field.String
	FileMode     field.String
	User         field.String
	UserGroup    field.String
	Privilege    field.String
	BizID        field.Uint32
	AppID        field.Uint32
	Creator      field.String
	Reviser      field.String
	CreatedAt    field.Time
	UpdatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (r releasedConfigItem) Table(newTableName string) *releasedConfigItem {
	r.releasedConfigItemDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r releasedConfigItem) As(alias string) *releasedConfigItem {
	r.releasedConfigItemDo.DO = *(r.releasedConfigItemDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *releasedConfigItem) updateTableName(table string) *releasedConfigItem {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint32(table, "id")
	r.ReleaseID = field.NewUint32(table, "release_id")
	r.CommitID = field.NewUint32(table, "commit_id")
	r.ConfigItemID = field.NewUint32(table, "config_item_id")
	r.ContentID = field.NewUint32(table, "content_id")
	r.Signature = field.NewString(table, "signature")
	r.ByteSize = field.NewUint64(table, "byte_size")
	r.Memo = field.NewString(table, "name")
	r.Name = field.NewString(table, "name")
	r.Path = field.NewString(table, "name")
	r.FileType = field.NewString(table, "name")
	r.FileMode = field.NewString(table, "name")
	r.User = field.NewString(table, "user")
	r.UserGroup = field.NewString(table, "user_group")
	r.Privilege = field.NewString(table, "privilege")
	r.BizID = field.NewUint32(table, "biz_id")
	r.AppID = field.NewUint32(table, "app_id")
	r.Creator = field.NewString(table, "creator")
	r.Reviser = field.NewString(table, "reviser")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *releasedConfigItem) WithContext(ctx context.Context) IReleasedConfigItemDo {
	return r.releasedConfigItemDo.WithContext(ctx)
}

func (r releasedConfigItem) TableName() string { return r.releasedConfigItemDo.TableName() }

func (r releasedConfigItem) Alias() string { return r.releasedConfigItemDo.Alias() }

func (r *releasedConfigItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *releasedConfigItem) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 21)
	r.fieldMap["id"] = r.ID
	r.fieldMap["release_id"] = r.ReleaseID
	r.fieldMap["commit_id"] = r.CommitID
	r.fieldMap["config_item_id"] = r.ConfigItemID
	r.fieldMap["content_id"] = r.ContentID
	r.fieldMap["signature"] = r.Signature
	r.fieldMap["byte_size"] = r.ByteSize
	r.fieldMap["name"] = r.Memo
	r.fieldMap["name"] = r.Name
	r.fieldMap["name"] = r.Path
	r.fieldMap["name"] = r.FileType
	r.fieldMap["name"] = r.FileMode
	r.fieldMap["user"] = r.User
	r.fieldMap["user_group"] = r.UserGroup
	r.fieldMap["privilege"] = r.Privilege
	r.fieldMap["biz_id"] = r.BizID
	r.fieldMap["app_id"] = r.AppID
	r.fieldMap["creator"] = r.Creator
	r.fieldMap["reviser"] = r.Reviser
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r releasedConfigItem) clone(db *gorm.DB) releasedConfigItem {
	r.releasedConfigItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r releasedConfigItem) replaceDB(db *gorm.DB) releasedConfigItem {
	r.releasedConfigItemDo.ReplaceDB(db)
	return r
}

type releasedConfigItemDo struct{ gen.DO }

type IReleasedConfigItemDo interface {
	gen.SubQuery
	Debug() IReleasedConfigItemDo
	WithContext(ctx context.Context) IReleasedConfigItemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReleasedConfigItemDo
	WriteDB() IReleasedConfigItemDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReleasedConfigItemDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReleasedConfigItemDo
	Not(conds ...gen.Condition) IReleasedConfigItemDo
	Or(conds ...gen.Condition) IReleasedConfigItemDo
	Select(conds ...field.Expr) IReleasedConfigItemDo
	Where(conds ...gen.Condition) IReleasedConfigItemDo
	Order(conds ...field.Expr) IReleasedConfigItemDo
	Distinct(cols ...field.Expr) IReleasedConfigItemDo
	Omit(cols ...field.Expr) IReleasedConfigItemDo
	Join(table schema.Tabler, on ...field.Expr) IReleasedConfigItemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReleasedConfigItemDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReleasedConfigItemDo
	Group(cols ...field.Expr) IReleasedConfigItemDo
	Having(conds ...gen.Condition) IReleasedConfigItemDo
	Limit(limit int) IReleasedConfigItemDo
	Offset(offset int) IReleasedConfigItemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReleasedConfigItemDo
	Unscoped() IReleasedConfigItemDo
	Create(values ...*table.ReleasedConfigItem) error
	CreateInBatches(values []*table.ReleasedConfigItem, batchSize int) error
	Save(values ...*table.ReleasedConfigItem) error
	First() (*table.ReleasedConfigItem, error)
	Take() (*table.ReleasedConfigItem, error)
	Last() (*table.ReleasedConfigItem, error)
	Find() ([]*table.ReleasedConfigItem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ReleasedConfigItem, err error)
	FindInBatches(result *[]*table.ReleasedConfigItem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.ReleasedConfigItem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReleasedConfigItemDo
	Assign(attrs ...field.AssignExpr) IReleasedConfigItemDo
	Joins(fields ...field.RelationField) IReleasedConfigItemDo
	Preload(fields ...field.RelationField) IReleasedConfigItemDo
	FirstOrInit() (*table.ReleasedConfigItem, error)
	FirstOrCreate() (*table.ReleasedConfigItem, error)
	FindByPage(offset int, limit int) (result []*table.ReleasedConfigItem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReleasedConfigItemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r releasedConfigItemDo) Debug() IReleasedConfigItemDo {
	return r.withDO(r.DO.Debug())
}

func (r releasedConfigItemDo) WithContext(ctx context.Context) IReleasedConfigItemDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r releasedConfigItemDo) ReadDB() IReleasedConfigItemDo {
	return r.Clauses(dbresolver.Read)
}

func (r releasedConfigItemDo) WriteDB() IReleasedConfigItemDo {
	return r.Clauses(dbresolver.Write)
}

func (r releasedConfigItemDo) Session(config *gorm.Session) IReleasedConfigItemDo {
	return r.withDO(r.DO.Session(config))
}

func (r releasedConfigItemDo) Clauses(conds ...clause.Expression) IReleasedConfigItemDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r releasedConfigItemDo) Returning(value interface{}, columns ...string) IReleasedConfigItemDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r releasedConfigItemDo) Not(conds ...gen.Condition) IReleasedConfigItemDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r releasedConfigItemDo) Or(conds ...gen.Condition) IReleasedConfigItemDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r releasedConfigItemDo) Select(conds ...field.Expr) IReleasedConfigItemDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r releasedConfigItemDo) Where(conds ...gen.Condition) IReleasedConfigItemDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r releasedConfigItemDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IReleasedConfigItemDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r releasedConfigItemDo) Order(conds ...field.Expr) IReleasedConfigItemDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r releasedConfigItemDo) Distinct(cols ...field.Expr) IReleasedConfigItemDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r releasedConfigItemDo) Omit(cols ...field.Expr) IReleasedConfigItemDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r releasedConfigItemDo) Join(table schema.Tabler, on ...field.Expr) IReleasedConfigItemDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r releasedConfigItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReleasedConfigItemDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r releasedConfigItemDo) RightJoin(table schema.Tabler, on ...field.Expr) IReleasedConfigItemDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r releasedConfigItemDo) Group(cols ...field.Expr) IReleasedConfigItemDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r releasedConfigItemDo) Having(conds ...gen.Condition) IReleasedConfigItemDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r releasedConfigItemDo) Limit(limit int) IReleasedConfigItemDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r releasedConfigItemDo) Offset(offset int) IReleasedConfigItemDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r releasedConfigItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReleasedConfigItemDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r releasedConfigItemDo) Unscoped() IReleasedConfigItemDo {
	return r.withDO(r.DO.Unscoped())
}

func (r releasedConfigItemDo) Create(values ...*table.ReleasedConfigItem) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r releasedConfigItemDo) CreateInBatches(values []*table.ReleasedConfigItem, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r releasedConfigItemDo) Save(values ...*table.ReleasedConfigItem) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r releasedConfigItemDo) First() (*table.ReleasedConfigItem, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.ReleasedConfigItem), nil
	}
}

func (r releasedConfigItemDo) Take() (*table.ReleasedConfigItem, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.ReleasedConfigItem), nil
	}
}

func (r releasedConfigItemDo) Last() (*table.ReleasedConfigItem, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.ReleasedConfigItem), nil
	}
}

func (r releasedConfigItemDo) Find() ([]*table.ReleasedConfigItem, error) {
	result, err := r.DO.Find()
	return result.([]*table.ReleasedConfigItem), err
}

func (r releasedConfigItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ReleasedConfigItem, err error) {
	buf := make([]*table.ReleasedConfigItem, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r releasedConfigItemDo) FindInBatches(result *[]*table.ReleasedConfigItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r releasedConfigItemDo) Attrs(attrs ...field.AssignExpr) IReleasedConfigItemDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r releasedConfigItemDo) Assign(attrs ...field.AssignExpr) IReleasedConfigItemDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r releasedConfigItemDo) Joins(fields ...field.RelationField) IReleasedConfigItemDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r releasedConfigItemDo) Preload(fields ...field.RelationField) IReleasedConfigItemDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r releasedConfigItemDo) FirstOrInit() (*table.ReleasedConfigItem, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.ReleasedConfigItem), nil
	}
}

func (r releasedConfigItemDo) FirstOrCreate() (*table.ReleasedConfigItem, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.ReleasedConfigItem), nil
	}
}

func (r releasedConfigItemDo) FindByPage(offset int, limit int) (result []*table.ReleasedConfigItem, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r releasedConfigItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r releasedConfigItemDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r releasedConfigItemDo) Delete(models ...*table.ReleasedConfigItem) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *releasedConfigItemDo) withDO(do gen.Dao) *releasedConfigItemDo {
	r.DO = *do.(*gen.DO)
	return r
}
