// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bscp.io/pkg/dal/table"
)

func newHookRelease(db *gorm.DB, opts ...gen.DOOption) hookRelease {
	_hookRelease := hookRelease{}

	_hookRelease.hookReleaseDo.UseDB(db, opts...)
	_hookRelease.hookReleaseDo.UseModel(&table.HookRelease{})

	tableName := _hookRelease.hookReleaseDo.TableName()
	_hookRelease.ALL = field.NewAsterisk(tableName)
	_hookRelease.ID = field.NewUint32(tableName, "id")
	_hookRelease.Name = field.NewString(tableName, "name")
	_hookRelease.PublishNum = field.NewUint32(tableName, "publish_num")
	_hookRelease.State = field.NewString(tableName, "state")
	_hookRelease.Content = field.NewString(tableName, "content")
	_hookRelease.Memo = field.NewString(tableName, "memo")
	_hookRelease.BizID = field.NewUint32(tableName, "biz_id")
	_hookRelease.HookID = field.NewUint32(tableName, "hook_id")
	_hookRelease.Creator = field.NewString(tableName, "creator")
	_hookRelease.Reviser = field.NewString(tableName, "reviser")
	_hookRelease.CreatedAt = field.NewTime(tableName, "created_at")
	_hookRelease.UpdatedAt = field.NewTime(tableName, "updated_at")

	_hookRelease.fillFieldMap()

	return _hookRelease
}

type hookRelease struct {
	hookReleaseDo hookReleaseDo

	ALL        field.Asterisk
	ID         field.Uint32
	Name       field.String
	PublishNum field.Uint32
	State      field.String
	Content    field.String
	Memo       field.String
	BizID      field.Uint32
	HookID     field.Uint32
	Creator    field.String
	Reviser    field.String
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (h hookRelease) Table(newTableName string) *hookRelease {
	h.hookReleaseDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hookRelease) As(alias string) *hookRelease {
	h.hookReleaseDo.DO = *(h.hookReleaseDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hookRelease) updateTableName(table string) *hookRelease {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewUint32(table, "id")
	h.Name = field.NewString(table, "name")
	h.PublishNum = field.NewUint32(table, "publish_num")
	h.State = field.NewString(table, "state")
	h.Content = field.NewString(table, "content")
	h.Memo = field.NewString(table, "memo")
	h.BizID = field.NewUint32(table, "biz_id")
	h.HookID = field.NewUint32(table, "hook_id")
	h.Creator = field.NewString(table, "creator")
	h.Reviser = field.NewString(table, "reviser")
	h.CreatedAt = field.NewTime(table, "created_at")
	h.UpdatedAt = field.NewTime(table, "updated_at")

	h.fillFieldMap()

	return h
}

func (h *hookRelease) WithContext(ctx context.Context) IHookReleaseDo {
	return h.hookReleaseDo.WithContext(ctx)
}

func (h hookRelease) TableName() string { return h.hookReleaseDo.TableName() }

func (h hookRelease) Alias() string { return h.hookReleaseDo.Alias() }

func (h *hookRelease) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hookRelease) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 12)
	h.fieldMap["id"] = h.ID
	h.fieldMap["name"] = h.Name
	h.fieldMap["publish_num"] = h.PublishNum
	h.fieldMap["state"] = h.State
	h.fieldMap["content"] = h.Content
	h.fieldMap["memo"] = h.Memo
	h.fieldMap["biz_id"] = h.BizID
	h.fieldMap["hook_id"] = h.HookID
	h.fieldMap["creator"] = h.Creator
	h.fieldMap["reviser"] = h.Reviser
	h.fieldMap["created_at"] = h.CreatedAt
	h.fieldMap["updated_at"] = h.UpdatedAt
}

func (h hookRelease) clone(db *gorm.DB) hookRelease {
	h.hookReleaseDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hookRelease) replaceDB(db *gorm.DB) hookRelease {
	h.hookReleaseDo.ReplaceDB(db)
	return h
}

type hookReleaseDo struct{ gen.DO }

type IHookReleaseDo interface {
	gen.SubQuery
	Debug() IHookReleaseDo
	WithContext(ctx context.Context) IHookReleaseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHookReleaseDo
	WriteDB() IHookReleaseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHookReleaseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHookReleaseDo
	Not(conds ...gen.Condition) IHookReleaseDo
	Or(conds ...gen.Condition) IHookReleaseDo
	Select(conds ...field.Expr) IHookReleaseDo
	Where(conds ...gen.Condition) IHookReleaseDo
	Order(conds ...field.Expr) IHookReleaseDo
	Distinct(cols ...field.Expr) IHookReleaseDo
	Omit(cols ...field.Expr) IHookReleaseDo
	Join(table schema.Tabler, on ...field.Expr) IHookReleaseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHookReleaseDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHookReleaseDo
	Group(cols ...field.Expr) IHookReleaseDo
	Having(conds ...gen.Condition) IHookReleaseDo
	Limit(limit int) IHookReleaseDo
	Offset(offset int) IHookReleaseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHookReleaseDo
	Unscoped() IHookReleaseDo
	Create(values ...*table.HookRelease) error
	CreateInBatches(values []*table.HookRelease, batchSize int) error
	Save(values ...*table.HookRelease) error
	First() (*table.HookRelease, error)
	Take() (*table.HookRelease, error)
	Last() (*table.HookRelease, error)
	Find() ([]*table.HookRelease, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.HookRelease, err error)
	FindInBatches(result *[]*table.HookRelease, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.HookRelease) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHookReleaseDo
	Assign(attrs ...field.AssignExpr) IHookReleaseDo
	Joins(fields ...field.RelationField) IHookReleaseDo
	Preload(fields ...field.RelationField) IHookReleaseDo
	FirstOrInit() (*table.HookRelease, error)
	FirstOrCreate() (*table.HookRelease, error)
	FindByPage(offset int, limit int) (result []*table.HookRelease, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHookReleaseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hookReleaseDo) Debug() IHookReleaseDo {
	return h.withDO(h.DO.Debug())
}

func (h hookReleaseDo) WithContext(ctx context.Context) IHookReleaseDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hookReleaseDo) ReadDB() IHookReleaseDo {
	return h.Clauses(dbresolver.Read)
}

func (h hookReleaseDo) WriteDB() IHookReleaseDo {
	return h.Clauses(dbresolver.Write)
}

func (h hookReleaseDo) Session(config *gorm.Session) IHookReleaseDo {
	return h.withDO(h.DO.Session(config))
}

func (h hookReleaseDo) Clauses(conds ...clause.Expression) IHookReleaseDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hookReleaseDo) Returning(value interface{}, columns ...string) IHookReleaseDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hookReleaseDo) Not(conds ...gen.Condition) IHookReleaseDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hookReleaseDo) Or(conds ...gen.Condition) IHookReleaseDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hookReleaseDo) Select(conds ...field.Expr) IHookReleaseDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hookReleaseDo) Where(conds ...gen.Condition) IHookReleaseDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hookReleaseDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IHookReleaseDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h hookReleaseDo) Order(conds ...field.Expr) IHookReleaseDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hookReleaseDo) Distinct(cols ...field.Expr) IHookReleaseDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hookReleaseDo) Omit(cols ...field.Expr) IHookReleaseDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hookReleaseDo) Join(table schema.Tabler, on ...field.Expr) IHookReleaseDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hookReleaseDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHookReleaseDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hookReleaseDo) RightJoin(table schema.Tabler, on ...field.Expr) IHookReleaseDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hookReleaseDo) Group(cols ...field.Expr) IHookReleaseDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hookReleaseDo) Having(conds ...gen.Condition) IHookReleaseDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hookReleaseDo) Limit(limit int) IHookReleaseDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hookReleaseDo) Offset(offset int) IHookReleaseDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hookReleaseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHookReleaseDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hookReleaseDo) Unscoped() IHookReleaseDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hookReleaseDo) Create(values ...*table.HookRelease) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hookReleaseDo) CreateInBatches(values []*table.HookRelease, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hookReleaseDo) Save(values ...*table.HookRelease) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hookReleaseDo) First() (*table.HookRelease, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.HookRelease), nil
	}
}

func (h hookReleaseDo) Take() (*table.HookRelease, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.HookRelease), nil
	}
}

func (h hookReleaseDo) Last() (*table.HookRelease, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.HookRelease), nil
	}
}

func (h hookReleaseDo) Find() ([]*table.HookRelease, error) {
	result, err := h.DO.Find()
	return result.([]*table.HookRelease), err
}

func (h hookReleaseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.HookRelease, err error) {
	buf := make([]*table.HookRelease, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hookReleaseDo) FindInBatches(result *[]*table.HookRelease, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hookReleaseDo) Attrs(attrs ...field.AssignExpr) IHookReleaseDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hookReleaseDo) Assign(attrs ...field.AssignExpr) IHookReleaseDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hookReleaseDo) Joins(fields ...field.RelationField) IHookReleaseDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hookReleaseDo) Preload(fields ...field.RelationField) IHookReleaseDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hookReleaseDo) FirstOrInit() (*table.HookRelease, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.HookRelease), nil
	}
}

func (h hookReleaseDo) FirstOrCreate() (*table.HookRelease, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.HookRelease), nil
	}
}

func (h hookReleaseDo) FindByPage(offset int, limit int) (result []*table.HookRelease, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hookReleaseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hookReleaseDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hookReleaseDo) Delete(models ...*table.HookRelease) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hookReleaseDo) withDO(do gen.Dao) *hookReleaseDo {
	h.DO = *do.(*gen.DO)
	return h
}
