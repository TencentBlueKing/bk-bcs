// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TencentBlueKing/bk-bcs/bcs-services/bcs-bscp/pkg/dal/table"
)

func newItsmConfig(db *gorm.DB, opts ...gen.DOOption) itsmConfig {
	_itsmConfig := itsmConfig{}

	_itsmConfig.itsmConfigDo.UseDB(db, opts...)
	_itsmConfig.itsmConfigDo.UseModel(&table.ItsmConfig{})

	tableName := _itsmConfig.itsmConfigDo.TableName()
	_itsmConfig.ALL = field.NewAsterisk(tableName)
	_itsmConfig.ID = field.NewUint32(tableName, "id")
	_itsmConfig.Key = field.NewString(tableName, "key")
	_itsmConfig.Value = field.NewInt(tableName, "value")
	_itsmConfig.WorkflowId = field.NewInt(tableName, "workflow_id")
	_itsmConfig.StateApproveId = field.NewInt(tableName, "state_approve_id")

	_itsmConfig.fillFieldMap()

	return _itsmConfig
}

type itsmConfig struct {
	itsmConfigDo itsmConfigDo

	ALL            field.Asterisk
	ID             field.Uint32
	Key            field.String
	Value          field.Int
	WorkflowId     field.Int
	StateApproveId field.Int

	fieldMap map[string]field.Expr
}

func (i itsmConfig) Table(newTableName string) *itsmConfig {
	i.itsmConfigDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i itsmConfig) As(alias string) *itsmConfig {
	i.itsmConfigDo.DO = *(i.itsmConfigDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *itsmConfig) updateTableName(table string) *itsmConfig {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewUint32(table, "id")
	i.Key = field.NewString(table, "key")
	i.Value = field.NewInt(table, "value")
	i.WorkflowId = field.NewInt(table, "workflow_id")
	i.StateApproveId = field.NewInt(table, "state_approve_id")

	i.fillFieldMap()

	return i
}

func (i *itsmConfig) WithContext(ctx context.Context) IItsmConfigDo {
	return i.itsmConfigDo.WithContext(ctx)
}

func (i itsmConfig) TableName() string { return i.itsmConfigDo.TableName() }

func (i itsmConfig) Alias() string { return i.itsmConfigDo.Alias() }

func (i itsmConfig) Columns(cols ...field.Expr) gen.Columns { return i.itsmConfigDo.Columns(cols...) }

func (i *itsmConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *itsmConfig) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 5)
	i.fieldMap["id"] = i.ID
	i.fieldMap["key"] = i.Key
	i.fieldMap["value"] = i.Value
	i.fieldMap["workflow_id"] = i.WorkflowId
	i.fieldMap["state_approve_id"] = i.StateApproveId
}

func (i itsmConfig) clone(db *gorm.DB) itsmConfig {
	i.itsmConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i itsmConfig) replaceDB(db *gorm.DB) itsmConfig {
	i.itsmConfigDo.ReplaceDB(db)
	return i
}

type itsmConfigDo struct{ gen.DO }

type IItsmConfigDo interface {
	gen.SubQuery
	Debug() IItsmConfigDo
	WithContext(ctx context.Context) IItsmConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IItsmConfigDo
	WriteDB() IItsmConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IItsmConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IItsmConfigDo
	Not(conds ...gen.Condition) IItsmConfigDo
	Or(conds ...gen.Condition) IItsmConfigDo
	Select(conds ...field.Expr) IItsmConfigDo
	Where(conds ...gen.Condition) IItsmConfigDo
	Order(conds ...field.Expr) IItsmConfigDo
	Distinct(cols ...field.Expr) IItsmConfigDo
	Omit(cols ...field.Expr) IItsmConfigDo
	Join(table schema.Tabler, on ...field.Expr) IItsmConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IItsmConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IItsmConfigDo
	Group(cols ...field.Expr) IItsmConfigDo
	Having(conds ...gen.Condition) IItsmConfigDo
	Limit(limit int) IItsmConfigDo
	Offset(offset int) IItsmConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IItsmConfigDo
	Unscoped() IItsmConfigDo
	Create(values ...*table.ItsmConfig) error
	CreateInBatches(values []*table.ItsmConfig, batchSize int) error
	Save(values ...*table.ItsmConfig) error
	First() (*table.ItsmConfig, error)
	Take() (*table.ItsmConfig, error)
	Last() (*table.ItsmConfig, error)
	Find() ([]*table.ItsmConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ItsmConfig, err error)
	FindInBatches(result *[]*table.ItsmConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.ItsmConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IItsmConfigDo
	Assign(attrs ...field.AssignExpr) IItsmConfigDo
	Joins(fields ...field.RelationField) IItsmConfigDo
	Preload(fields ...field.RelationField) IItsmConfigDo
	FirstOrInit() (*table.ItsmConfig, error)
	FirstOrCreate() (*table.ItsmConfig, error)
	FindByPage(offset int, limit int) (result []*table.ItsmConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IItsmConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i itsmConfigDo) Debug() IItsmConfigDo {
	return i.withDO(i.DO.Debug())
}

func (i itsmConfigDo) WithContext(ctx context.Context) IItsmConfigDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i itsmConfigDo) ReadDB() IItsmConfigDo {
	return i.Clauses(dbresolver.Read)
}

func (i itsmConfigDo) WriteDB() IItsmConfigDo {
	return i.Clauses(dbresolver.Write)
}

func (i itsmConfigDo) Session(config *gorm.Session) IItsmConfigDo {
	return i.withDO(i.DO.Session(config))
}

func (i itsmConfigDo) Clauses(conds ...clause.Expression) IItsmConfigDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i itsmConfigDo) Returning(value interface{}, columns ...string) IItsmConfigDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i itsmConfigDo) Not(conds ...gen.Condition) IItsmConfigDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i itsmConfigDo) Or(conds ...gen.Condition) IItsmConfigDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i itsmConfigDo) Select(conds ...field.Expr) IItsmConfigDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i itsmConfigDo) Where(conds ...gen.Condition) IItsmConfigDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i itsmConfigDo) Order(conds ...field.Expr) IItsmConfigDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i itsmConfigDo) Distinct(cols ...field.Expr) IItsmConfigDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i itsmConfigDo) Omit(cols ...field.Expr) IItsmConfigDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i itsmConfigDo) Join(table schema.Tabler, on ...field.Expr) IItsmConfigDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i itsmConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IItsmConfigDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i itsmConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IItsmConfigDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i itsmConfigDo) Group(cols ...field.Expr) IItsmConfigDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i itsmConfigDo) Having(conds ...gen.Condition) IItsmConfigDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i itsmConfigDo) Limit(limit int) IItsmConfigDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i itsmConfigDo) Offset(offset int) IItsmConfigDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i itsmConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IItsmConfigDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i itsmConfigDo) Unscoped() IItsmConfigDo {
	return i.withDO(i.DO.Unscoped())
}

func (i itsmConfigDo) Create(values ...*table.ItsmConfig) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i itsmConfigDo) CreateInBatches(values []*table.ItsmConfig, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i itsmConfigDo) Save(values ...*table.ItsmConfig) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i itsmConfigDo) First() (*table.ItsmConfig, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.ItsmConfig), nil
	}
}

func (i itsmConfigDo) Take() (*table.ItsmConfig, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.ItsmConfig), nil
	}
}

func (i itsmConfigDo) Last() (*table.ItsmConfig, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.ItsmConfig), nil
	}
}

func (i itsmConfigDo) Find() ([]*table.ItsmConfig, error) {
	result, err := i.DO.Find()
	return result.([]*table.ItsmConfig), err
}

func (i itsmConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ItsmConfig, err error) {
	buf := make([]*table.ItsmConfig, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i itsmConfigDo) FindInBatches(result *[]*table.ItsmConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i itsmConfigDo) Attrs(attrs ...field.AssignExpr) IItsmConfigDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i itsmConfigDo) Assign(attrs ...field.AssignExpr) IItsmConfigDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i itsmConfigDo) Joins(fields ...field.RelationField) IItsmConfigDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i itsmConfigDo) Preload(fields ...field.RelationField) IItsmConfigDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i itsmConfigDo) FirstOrInit() (*table.ItsmConfig, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.ItsmConfig), nil
	}
}

func (i itsmConfigDo) FirstOrCreate() (*table.ItsmConfig, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.ItsmConfig), nil
	}
}

func (i itsmConfigDo) FindByPage(offset int, limit int) (result []*table.ItsmConfig, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i itsmConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i itsmConfigDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i itsmConfigDo) Delete(models ...*table.ItsmConfig) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *itsmConfigDo) withDO(do gen.Dao) *itsmConfigDo {
	i.DO = *do.(*gen.DO)
	return i
}
