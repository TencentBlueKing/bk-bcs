// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bscp.io/pkg/dal/table"
)

func newTemplateSet(db *gorm.DB, opts ...gen.DOOption) templateSet {
	_templateSet := templateSet{}

	_templateSet.templateSetDo.UseDB(db, opts...)
	_templateSet.templateSetDo.UseModel(&table.TemplateSet{})

	tableName := _templateSet.templateSetDo.TableName()
	_templateSet.ALL = field.NewAsterisk(tableName)
	_templateSet.ID = field.NewUint32(tableName, "id")
	_templateSet.Name = field.NewString(tableName, "name")
	_templateSet.Memo = field.NewString(tableName, "memo")
	_templateSet.TemplateIDs = field.NewField(tableName, "template_ids")
	_templateSet.Public = field.NewBool(tableName, "public")
	_templateSet.BoundApps = field.NewField(tableName, "bound_apps")
	_templateSet.BizID = field.NewUint32(tableName, "biz_id")
	_templateSet.TemplateSpaceID = field.NewUint32(tableName, "template_space_id")
	_templateSet.Creator = field.NewString(tableName, "creator")
	_templateSet.Reviser = field.NewString(tableName, "reviser")
	_templateSet.CreatedAt = field.NewTime(tableName, "created_at")
	_templateSet.UpdatedAt = field.NewTime(tableName, "updated_at")

	_templateSet.fillFieldMap()

	return _templateSet
}

type templateSet struct {
	templateSetDo templateSetDo

	ALL             field.Asterisk
	ID              field.Uint32
	Name            field.String
	Memo            field.String
	TemplateIDs     field.Field
	Public          field.Bool
	BoundApps       field.Field
	BizID           field.Uint32
	TemplateSpaceID field.Uint32
	Creator         field.String
	Reviser         field.String
	CreatedAt       field.Time
	UpdatedAt       field.Time

	fieldMap map[string]field.Expr
}

func (t templateSet) Table(newTableName string) *templateSet {
	t.templateSetDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t templateSet) As(alias string) *templateSet {
	t.templateSetDo.DO = *(t.templateSetDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *templateSet) updateTableName(table string) *templateSet {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint32(table, "id")
	t.Name = field.NewString(table, "name")
	t.Memo = field.NewString(table, "memo")
	t.TemplateIDs = field.NewField(table, "template_ids")
	t.Public = field.NewBool(table, "public")
	t.BoundApps = field.NewField(table, "bound_apps")
	t.BizID = field.NewUint32(table, "biz_id")
	t.TemplateSpaceID = field.NewUint32(table, "template_space_id")
	t.Creator = field.NewString(table, "creator")
	t.Reviser = field.NewString(table, "reviser")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *templateSet) WithContext(ctx context.Context) ITemplateSetDo {
	return t.templateSetDo.WithContext(ctx)
}

func (t templateSet) TableName() string { return t.templateSetDo.TableName() }

func (t templateSet) Alias() string { return t.templateSetDo.Alias() }

func (t *templateSet) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *templateSet) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["memo"] = t.Memo
	t.fieldMap["template_ids"] = t.TemplateIDs
	t.fieldMap["public"] = t.Public
	t.fieldMap["bound_apps"] = t.BoundApps
	t.fieldMap["biz_id"] = t.BizID
	t.fieldMap["template_space_id"] = t.TemplateSpaceID
	t.fieldMap["creator"] = t.Creator
	t.fieldMap["reviser"] = t.Reviser
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t templateSet) clone(db *gorm.DB) templateSet {
	t.templateSetDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t templateSet) replaceDB(db *gorm.DB) templateSet {
	t.templateSetDo.ReplaceDB(db)
	return t
}

type templateSetDo struct{ gen.DO }

type ITemplateSetDo interface {
	gen.SubQuery
	Debug() ITemplateSetDo
	WithContext(ctx context.Context) ITemplateSetDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITemplateSetDo
	WriteDB() ITemplateSetDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITemplateSetDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITemplateSetDo
	Not(conds ...gen.Condition) ITemplateSetDo
	Or(conds ...gen.Condition) ITemplateSetDo
	Select(conds ...field.Expr) ITemplateSetDo
	Where(conds ...gen.Condition) ITemplateSetDo
	Order(conds ...field.Expr) ITemplateSetDo
	Distinct(cols ...field.Expr) ITemplateSetDo
	Omit(cols ...field.Expr) ITemplateSetDo
	Join(table schema.Tabler, on ...field.Expr) ITemplateSetDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITemplateSetDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITemplateSetDo
	Group(cols ...field.Expr) ITemplateSetDo
	Having(conds ...gen.Condition) ITemplateSetDo
	Limit(limit int) ITemplateSetDo
	Offset(offset int) ITemplateSetDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITemplateSetDo
	Unscoped() ITemplateSetDo
	Create(values ...*table.TemplateSet) error
	CreateInBatches(values []*table.TemplateSet, batchSize int) error
	Save(values ...*table.TemplateSet) error
	First() (*table.TemplateSet, error)
	Take() (*table.TemplateSet, error)
	Last() (*table.TemplateSet, error)
	Find() ([]*table.TemplateSet, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.TemplateSet, err error)
	FindInBatches(result *[]*table.TemplateSet, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.TemplateSet) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITemplateSetDo
	Assign(attrs ...field.AssignExpr) ITemplateSetDo
	Joins(fields ...field.RelationField) ITemplateSetDo
	Preload(fields ...field.RelationField) ITemplateSetDo
	FirstOrInit() (*table.TemplateSet, error)
	FirstOrCreate() (*table.TemplateSet, error)
	FindByPage(offset int, limit int) (result []*table.TemplateSet, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITemplateSetDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t templateSetDo) Debug() ITemplateSetDo {
	return t.withDO(t.DO.Debug())
}

func (t templateSetDo) WithContext(ctx context.Context) ITemplateSetDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t templateSetDo) ReadDB() ITemplateSetDo {
	return t.Clauses(dbresolver.Read)
}

func (t templateSetDo) WriteDB() ITemplateSetDo {
	return t.Clauses(dbresolver.Write)
}

func (t templateSetDo) Session(config *gorm.Session) ITemplateSetDo {
	return t.withDO(t.DO.Session(config))
}

func (t templateSetDo) Clauses(conds ...clause.Expression) ITemplateSetDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t templateSetDo) Returning(value interface{}, columns ...string) ITemplateSetDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t templateSetDo) Not(conds ...gen.Condition) ITemplateSetDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t templateSetDo) Or(conds ...gen.Condition) ITemplateSetDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t templateSetDo) Select(conds ...field.Expr) ITemplateSetDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t templateSetDo) Where(conds ...gen.Condition) ITemplateSetDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t templateSetDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITemplateSetDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t templateSetDo) Order(conds ...field.Expr) ITemplateSetDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t templateSetDo) Distinct(cols ...field.Expr) ITemplateSetDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t templateSetDo) Omit(cols ...field.Expr) ITemplateSetDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t templateSetDo) Join(table schema.Tabler, on ...field.Expr) ITemplateSetDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t templateSetDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITemplateSetDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t templateSetDo) RightJoin(table schema.Tabler, on ...field.Expr) ITemplateSetDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t templateSetDo) Group(cols ...field.Expr) ITemplateSetDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t templateSetDo) Having(conds ...gen.Condition) ITemplateSetDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t templateSetDo) Limit(limit int) ITemplateSetDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t templateSetDo) Offset(offset int) ITemplateSetDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t templateSetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITemplateSetDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t templateSetDo) Unscoped() ITemplateSetDo {
	return t.withDO(t.DO.Unscoped())
}

func (t templateSetDo) Create(values ...*table.TemplateSet) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t templateSetDo) CreateInBatches(values []*table.TemplateSet, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t templateSetDo) Save(values ...*table.TemplateSet) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t templateSetDo) First() (*table.TemplateSet, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.TemplateSet), nil
	}
}

func (t templateSetDo) Take() (*table.TemplateSet, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.TemplateSet), nil
	}
}

func (t templateSetDo) Last() (*table.TemplateSet, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.TemplateSet), nil
	}
}

func (t templateSetDo) Find() ([]*table.TemplateSet, error) {
	result, err := t.DO.Find()
	return result.([]*table.TemplateSet), err
}

func (t templateSetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.TemplateSet, err error) {
	buf := make([]*table.TemplateSet, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t templateSetDo) FindInBatches(result *[]*table.TemplateSet, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t templateSetDo) Attrs(attrs ...field.AssignExpr) ITemplateSetDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t templateSetDo) Assign(attrs ...field.AssignExpr) ITemplateSetDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t templateSetDo) Joins(fields ...field.RelationField) ITemplateSetDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t templateSetDo) Preload(fields ...field.RelationField) ITemplateSetDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t templateSetDo) FirstOrInit() (*table.TemplateSet, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.TemplateSet), nil
	}
}

func (t templateSetDo) FirstOrCreate() (*table.TemplateSet, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.TemplateSet), nil
	}
}

func (t templateSetDo) FindByPage(offset int, limit int) (result []*table.TemplateSet, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t templateSetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t templateSetDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t templateSetDo) Delete(models ...*table.TemplateSet) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *templateSetDo) withDO(do gen.Dao) *templateSetDo {
	t.DO = *do.(*gen.DO)
	return t
}
