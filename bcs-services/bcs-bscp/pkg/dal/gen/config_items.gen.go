// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TencentBlueking/bk-bcs/bcs-services/bcs-bscp/pkg/dal/table"
)

func newConfigItem(db *gorm.DB, opts ...gen.DOOption) configItem {
	_configItem := configItem{}

	_configItem.configItemDo.UseDB(db, opts...)
	_configItem.configItemDo.UseModel(&table.ConfigItem{})

	tableName := _configItem.configItemDo.TableName()
	_configItem.ALL = field.NewAsterisk(tableName)
	_configItem.ID = field.NewUint32(tableName, "id")
	_configItem.Name = field.NewString(tableName, "name")
	_configItem.Path = field.NewString(tableName, "path")
	_configItem.FileType = field.NewString(tableName, "file_type")
	_configItem.FileMode = field.NewString(tableName, "file_mode")
	_configItem.Memo = field.NewString(tableName, "memo")
	_configItem.User = field.NewString(tableName, "user")
	_configItem.UserGroup = field.NewString(tableName, "user_group")
	_configItem.Privilege = field.NewString(tableName, "privilege")
	_configItem.BizID = field.NewUint32(tableName, "biz_id")
	_configItem.AppID = field.NewUint32(tableName, "app_id")
	_configItem.Creator = field.NewString(tableName, "creator")
	_configItem.Reviser = field.NewString(tableName, "reviser")
	_configItem.CreatedAt = field.NewTime(tableName, "created_at")
	_configItem.UpdatedAt = field.NewTime(tableName, "updated_at")

	_configItem.fillFieldMap()

	return _configItem
}

type configItem struct {
	configItemDo configItemDo

	ALL       field.Asterisk
	ID        field.Uint32
	Name      field.String
	Path      field.String
	FileType  field.String
	FileMode  field.String
	Memo      field.String
	User      field.String
	UserGroup field.String
	Privilege field.String
	BizID     field.Uint32
	AppID     field.Uint32
	Creator   field.String
	Reviser   field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (c configItem) Table(newTableName string) *configItem {
	c.configItemDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c configItem) As(alias string) *configItem {
	c.configItemDo.DO = *(c.configItemDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *configItem) updateTableName(table string) *configItem {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint32(table, "id")
	c.Name = field.NewString(table, "name")
	c.Path = field.NewString(table, "path")
	c.FileType = field.NewString(table, "file_type")
	c.FileMode = field.NewString(table, "file_mode")
	c.Memo = field.NewString(table, "memo")
	c.User = field.NewString(table, "user")
	c.UserGroup = field.NewString(table, "user_group")
	c.Privilege = field.NewString(table, "privilege")
	c.BizID = field.NewUint32(table, "biz_id")
	c.AppID = field.NewUint32(table, "app_id")
	c.Creator = field.NewString(table, "creator")
	c.Reviser = field.NewString(table, "reviser")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *configItem) WithContext(ctx context.Context) IConfigItemDo {
	return c.configItemDo.WithContext(ctx)
}

func (c configItem) TableName() string { return c.configItemDo.TableName() }

func (c configItem) Alias() string { return c.configItemDo.Alias() }

func (c configItem) Columns(cols ...field.Expr) gen.Columns { return c.configItemDo.Columns(cols...) }

func (c *configItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *configItem) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 15)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["path"] = c.Path
	c.fieldMap["file_type"] = c.FileType
	c.fieldMap["file_mode"] = c.FileMode
	c.fieldMap["memo"] = c.Memo
	c.fieldMap["user"] = c.User
	c.fieldMap["user_group"] = c.UserGroup
	c.fieldMap["privilege"] = c.Privilege
	c.fieldMap["biz_id"] = c.BizID
	c.fieldMap["app_id"] = c.AppID
	c.fieldMap["creator"] = c.Creator
	c.fieldMap["reviser"] = c.Reviser
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c configItem) clone(db *gorm.DB) configItem {
	c.configItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c configItem) replaceDB(db *gorm.DB) configItem {
	c.configItemDo.ReplaceDB(db)
	return c
}

type configItemDo struct{ gen.DO }

type IConfigItemDo interface {
	gen.SubQuery
	Debug() IConfigItemDo
	WithContext(ctx context.Context) IConfigItemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IConfigItemDo
	WriteDB() IConfigItemDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IConfigItemDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IConfigItemDo
	Not(conds ...gen.Condition) IConfigItemDo
	Or(conds ...gen.Condition) IConfigItemDo
	Select(conds ...field.Expr) IConfigItemDo
	Where(conds ...gen.Condition) IConfigItemDo
	Order(conds ...field.Expr) IConfigItemDo
	Distinct(cols ...field.Expr) IConfigItemDo
	Omit(cols ...field.Expr) IConfigItemDo
	Join(table schema.Tabler, on ...field.Expr) IConfigItemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IConfigItemDo
	RightJoin(table schema.Tabler, on ...field.Expr) IConfigItemDo
	Group(cols ...field.Expr) IConfigItemDo
	Having(conds ...gen.Condition) IConfigItemDo
	Limit(limit int) IConfigItemDo
	Offset(offset int) IConfigItemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IConfigItemDo
	Unscoped() IConfigItemDo
	Create(values ...*table.ConfigItem) error
	CreateInBatches(values []*table.ConfigItem, batchSize int) error
	Save(values ...*table.ConfigItem) error
	First() (*table.ConfigItem, error)
	Take() (*table.ConfigItem, error)
	Last() (*table.ConfigItem, error)
	Find() ([]*table.ConfigItem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ConfigItem, err error)
	FindInBatches(result *[]*table.ConfigItem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.ConfigItem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IConfigItemDo
	Assign(attrs ...field.AssignExpr) IConfigItemDo
	Joins(fields ...field.RelationField) IConfigItemDo
	Preload(fields ...field.RelationField) IConfigItemDo
	FirstOrInit() (*table.ConfigItem, error)
	FirstOrCreate() (*table.ConfigItem, error)
	FindByPage(offset int, limit int) (result []*table.ConfigItem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IConfigItemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c configItemDo) Debug() IConfigItemDo {
	return c.withDO(c.DO.Debug())
}

func (c configItemDo) WithContext(ctx context.Context) IConfigItemDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c configItemDo) ReadDB() IConfigItemDo {
	return c.Clauses(dbresolver.Read)
}

func (c configItemDo) WriteDB() IConfigItemDo {
	return c.Clauses(dbresolver.Write)
}

func (c configItemDo) Session(config *gorm.Session) IConfigItemDo {
	return c.withDO(c.DO.Session(config))
}

func (c configItemDo) Clauses(conds ...clause.Expression) IConfigItemDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c configItemDo) Returning(value interface{}, columns ...string) IConfigItemDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c configItemDo) Not(conds ...gen.Condition) IConfigItemDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c configItemDo) Or(conds ...gen.Condition) IConfigItemDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c configItemDo) Select(conds ...field.Expr) IConfigItemDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c configItemDo) Where(conds ...gen.Condition) IConfigItemDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c configItemDo) Order(conds ...field.Expr) IConfigItemDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c configItemDo) Distinct(cols ...field.Expr) IConfigItemDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c configItemDo) Omit(cols ...field.Expr) IConfigItemDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c configItemDo) Join(table schema.Tabler, on ...field.Expr) IConfigItemDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c configItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) IConfigItemDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c configItemDo) RightJoin(table schema.Tabler, on ...field.Expr) IConfigItemDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c configItemDo) Group(cols ...field.Expr) IConfigItemDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c configItemDo) Having(conds ...gen.Condition) IConfigItemDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c configItemDo) Limit(limit int) IConfigItemDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c configItemDo) Offset(offset int) IConfigItemDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c configItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IConfigItemDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c configItemDo) Unscoped() IConfigItemDo {
	return c.withDO(c.DO.Unscoped())
}

func (c configItemDo) Create(values ...*table.ConfigItem) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c configItemDo) CreateInBatches(values []*table.ConfigItem, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c configItemDo) Save(values ...*table.ConfigItem) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c configItemDo) First() (*table.ConfigItem, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.ConfigItem), nil
	}
}

func (c configItemDo) Take() (*table.ConfigItem, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.ConfigItem), nil
	}
}

func (c configItemDo) Last() (*table.ConfigItem, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.ConfigItem), nil
	}
}

func (c configItemDo) Find() ([]*table.ConfigItem, error) {
	result, err := c.DO.Find()
	return result.([]*table.ConfigItem), err
}

func (c configItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.ConfigItem, err error) {
	buf := make([]*table.ConfigItem, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c configItemDo) FindInBatches(result *[]*table.ConfigItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c configItemDo) Attrs(attrs ...field.AssignExpr) IConfigItemDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c configItemDo) Assign(attrs ...field.AssignExpr) IConfigItemDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c configItemDo) Joins(fields ...field.RelationField) IConfigItemDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c configItemDo) Preload(fields ...field.RelationField) IConfigItemDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c configItemDo) FirstOrInit() (*table.ConfigItem, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.ConfigItem), nil
	}
}

func (c configItemDo) FirstOrCreate() (*table.ConfigItem, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.ConfigItem), nil
	}
}

func (c configItemDo) FindByPage(offset int, limit int) (result []*table.ConfigItem, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c configItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c configItemDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c configItemDo) Delete(models ...*table.ConfigItem) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *configItemDo) withDO(do gen.Dao) *configItemDo {
	c.DO = *do.(*gen.DO)
	return c
}
