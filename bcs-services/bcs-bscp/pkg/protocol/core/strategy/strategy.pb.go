// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0
// source: strategy.proto

package pbstrategy

import (
	base "bscp.io/pkg/protocol/core/base"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Strategy source resource reference: pkg/dal/table/strategy.go
type Strategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Spec       *StrategySpec       `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	State      *StrategyState      `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Attachment *StrategyAttachment `protobuf:"bytes,4,opt,name=attachment,proto3" json:"attachment,omitempty"`
	Revision   *base.Revision      `protobuf:"bytes,5,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *Strategy) Reset() {
	*x = Strategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Strategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Strategy) ProtoMessage() {}

func (x *Strategy) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Strategy.ProtoReflect.Descriptor instead.
func (*Strategy) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{0}
}

func (x *Strategy) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Strategy) GetSpec() *StrategySpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Strategy) GetState() *StrategyState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Strategy) GetAttachment() *StrategyAttachment {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *Strategy) GetRevision() *base.Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

// StrategySpec source resource reference: pkg/dal/table/strategy.go
type StrategySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReleaseId uint32         `protobuf:"varint,2,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty"`
	AsDefault bool           `protobuf:"varint,3,opt,name=as_default,json=asDefault,proto3" json:"as_default,omitempty"`
	Scope     *ScopeSelector `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	Mode      string         `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`
	Namespace string         `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Memo      string         `protobuf:"bytes,7,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *StrategySpec) Reset() {
	*x = StrategySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategySpec) ProtoMessage() {}

func (x *StrategySpec) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategySpec.ProtoReflect.Descriptor instead.
func (*StrategySpec) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{1}
}

func (x *StrategySpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StrategySpec) GetReleaseId() uint32 {
	if x != nil {
		return x.ReleaseId
	}
	return 0
}

func (x *StrategySpec) GetAsDefault() bool {
	if x != nil {
		return x.AsDefault
	}
	return false
}

func (x *StrategySpec) GetScope() *ScopeSelector {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *StrategySpec) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *StrategySpec) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *StrategySpec) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

// StrategyState source resource reference: pkg/dal/table/strategy.go
type StrategyState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubState string `protobuf:"bytes,1,opt,name=pub_state,json=pubState,proto3" json:"pub_state,omitempty"`
}

func (x *StrategyState) Reset() {
	*x = StrategyState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyState) ProtoMessage() {}

func (x *StrategyState) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyState.ProtoReflect.Descriptor instead.
func (*StrategyState) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{2}
}

func (x *StrategyState) GetPubState() string {
	if x != nil {
		return x.PubState
	}
	return ""
}

// StrategyAttachment source resource reference: pkg/dal/table/strategy.go
type StrategyAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BizId         uint32 `protobuf:"varint,1,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`
	AppId         uint32 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	StrategySetId uint32 `protobuf:"varint,3,opt,name=strategy_set_id,json=strategySetId,proto3" json:"strategy_set_id,omitempty"`
}

func (x *StrategyAttachment) Reset() {
	*x = StrategyAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategyAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyAttachment) ProtoMessage() {}

func (x *StrategyAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyAttachment.ProtoReflect.Descriptor instead.
func (*StrategyAttachment) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{3}
}

func (x *StrategyAttachment) GetBizId() uint32 {
	if x != nil {
		return x.BizId
	}
	return 0
}

func (x *StrategyAttachment) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *StrategyAttachment) GetStrategySetId() uint32 {
	if x != nil {
		return x.StrategySetId
	}
	return 0
}

// ScopeSelector source resource reference: pkg/dal/table/strategy.go
type ScopeSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector    *structpb.Struct `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
	SubStrategy *SubStrategy     `protobuf:"bytes,2,opt,name=sub_strategy,json=subStrategy,proto3" json:"sub_strategy,omitempty"`
}

func (x *ScopeSelector) Reset() {
	*x = ScopeSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeSelector) ProtoMessage() {}

func (x *ScopeSelector) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeSelector.ProtoReflect.Descriptor instead.
func (*ScopeSelector) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{4}
}

func (x *ScopeSelector) GetSelector() *structpb.Struct {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *ScopeSelector) GetSubStrategy() *SubStrategy {
	if x != nil {
		return x.SubStrategy
	}
	return nil
}

// SubStrategy source resource reference: pkg/dal/table/strategy.go
type SubStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec     *SubStrategySpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	Revision *base.Revision   `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *SubStrategy) Reset() {
	*x = SubStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubStrategy) ProtoMessage() {}

func (x *SubStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubStrategy.ProtoReflect.Descriptor instead.
func (*SubStrategy) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{5}
}

func (x *SubStrategy) GetSpec() *SubStrategySpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *SubStrategy) GetRevision() *base.Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

// SubStrategySpec source resource reference: pkg/dal/table/strategy.go
type SubStrategySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReleaseId uint32            `protobuf:"varint,2,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty"`
	Scope     *SubScopeSelector `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	Memo      string            `protobuf:"bytes,4,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *SubStrategySpec) Reset() {
	*x = SubStrategySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubStrategySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubStrategySpec) ProtoMessage() {}

func (x *SubStrategySpec) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubStrategySpec.ProtoReflect.Descriptor instead.
func (*SubStrategySpec) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{6}
}

func (x *SubStrategySpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubStrategySpec) GetReleaseId() uint32 {
	if x != nil {
		return x.ReleaseId
	}
	return 0
}

func (x *SubStrategySpec) GetScope() *SubScopeSelector {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *SubStrategySpec) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

// SubScopeSelector source resource reference: pkg/dal/table/strategy.go
type SubScopeSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector *structpb.Struct `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *SubScopeSelector) Reset() {
	*x = SubScopeSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubScopeSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubScopeSelector) ProtoMessage() {}

func (x *SubScopeSelector) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubScopeSelector.ProtoReflect.Descriptor instead.
func (*SubScopeSelector) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{7}
}

func (x *SubScopeSelector) GetSelector() *structpb.Struct {
	if x != nil {
		return x.Selector
	}
	return nil
}

// CurrentPublishedStrategy source resource reference: pkg/dal/table/strategy.go
type CurrentPublishedStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StrategyId uint32                `protobuf:"varint,2,opt,name=strategy_id,json=strategyId,proto3" json:"strategy_id,omitempty"`
	Spec       *StrategySpec         `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	State      *StrategyState        `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Attachment *StrategyAttachment   `protobuf:"bytes,5,opt,name=attachment,proto3" json:"attachment,omitempty"`
	Revision   *base.CreatedRevision `protobuf:"bytes,6,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *CurrentPublishedStrategy) Reset() {
	*x = CurrentPublishedStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentPublishedStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentPublishedStrategy) ProtoMessage() {}

func (x *CurrentPublishedStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentPublishedStrategy.ProtoReflect.Descriptor instead.
func (*CurrentPublishedStrategy) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{8}
}

func (x *CurrentPublishedStrategy) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CurrentPublishedStrategy) GetStrategyId() uint32 {
	if x != nil {
		return x.StrategyId
	}
	return 0
}

func (x *CurrentPublishedStrategy) GetSpec() *StrategySpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CurrentPublishedStrategy) GetState() *StrategyState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *CurrentPublishedStrategy) GetAttachment() *StrategyAttachment {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *CurrentPublishedStrategy) GetRevision() *base.CreatedRevision {
	if x != nil {
		return x.Revision
	}
	return nil
}

// PublishedStrategyHistory source resource reference: pkg/dal/table/strategy.go
type PublishedStrategyHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StrategyId uint32                `protobuf:"varint,2,opt,name=strategy_id,json=strategyId,proto3" json:"strategy_id,omitempty"`
	Spec       *StrategySpec         `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	State      *StrategyState        `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Attachment *StrategyAttachment   `protobuf:"bytes,5,opt,name=attachment,proto3" json:"attachment,omitempty"`
	Revision   *base.CreatedRevision `protobuf:"bytes,6,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *PublishedStrategyHistory) Reset() {
	*x = PublishedStrategyHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishedStrategyHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedStrategyHistory) ProtoMessage() {}

func (x *PublishedStrategyHistory) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedStrategyHistory.ProtoReflect.Descriptor instead.
func (*PublishedStrategyHistory) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{9}
}

func (x *PublishedStrategyHistory) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PublishedStrategyHistory) GetStrategyId() uint32 {
	if x != nil {
		return x.StrategyId
	}
	return 0
}

func (x *PublishedStrategyHistory) GetSpec() *StrategySpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *PublishedStrategyHistory) GetState() *StrategyState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *PublishedStrategyHistory) GetAttachment() *StrategyAttachment {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *PublishedStrategyHistory) GetRevision() *base.CreatedRevision {
	if x != nil {
		return x.Revision
	}
	return nil
}

var File_strategy_proto protoreflect.FileDescriptor

var file_strategy_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x70, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x1a, 0x29, 0x62, 0x73,
	0x63, 0x70, 0x2e, 0x69, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7, 0x01, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xd7, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x22, 0x2c, 0x0a, 0x0d, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75,
	0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x6a, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62,
	0x69, 0x7a, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53, 0x65,
	0x74, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x0d, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x53, 0x75,
	0x62, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x6c, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x2e, 0x53, 0x75, 0x62, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x22, 0x47, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x9f, 0x02, 0x0a,
	0x18, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9f,
	0x02, 0x0a, 0x18, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x62, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x2f, 0x5a, 0x2d, 0x62, 0x73, 0x63, 0x70, 0x2e, 0x69, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3b, 0x70, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_strategy_proto_rawDescOnce sync.Once
	file_strategy_proto_rawDescData = file_strategy_proto_rawDesc
)

func file_strategy_proto_rawDescGZIP() []byte {
	file_strategy_proto_rawDescOnce.Do(func() {
		file_strategy_proto_rawDescData = protoimpl.X.CompressGZIP(file_strategy_proto_rawDescData)
	})
	return file_strategy_proto_rawDescData
}

var file_strategy_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_strategy_proto_goTypes = []interface{}{
	(*Strategy)(nil),                 // 0: pbstrategy.Strategy
	(*StrategySpec)(nil),             // 1: pbstrategy.StrategySpec
	(*StrategyState)(nil),            // 2: pbstrategy.StrategyState
	(*StrategyAttachment)(nil),       // 3: pbstrategy.StrategyAttachment
	(*ScopeSelector)(nil),            // 4: pbstrategy.ScopeSelector
	(*SubStrategy)(nil),              // 5: pbstrategy.SubStrategy
	(*SubStrategySpec)(nil),          // 6: pbstrategy.SubStrategySpec
	(*SubScopeSelector)(nil),         // 7: pbstrategy.SubScopeSelector
	(*CurrentPublishedStrategy)(nil), // 8: pbstrategy.CurrentPublishedStrategy
	(*PublishedStrategyHistory)(nil), // 9: pbstrategy.PublishedStrategyHistory
	(*base.Revision)(nil),            // 10: pbbase.Revision
	(*structpb.Struct)(nil),          // 11: google.protobuf.Struct
	(*base.CreatedRevision)(nil),     // 12: pbbase.CreatedRevision
}
var file_strategy_proto_depIdxs = []int32{
	1,  // 0: pbstrategy.Strategy.spec:type_name -> pbstrategy.StrategySpec
	2,  // 1: pbstrategy.Strategy.state:type_name -> pbstrategy.StrategyState
	3,  // 2: pbstrategy.Strategy.attachment:type_name -> pbstrategy.StrategyAttachment
	10, // 3: pbstrategy.Strategy.revision:type_name -> pbbase.Revision
	4,  // 4: pbstrategy.StrategySpec.scope:type_name -> pbstrategy.ScopeSelector
	11, // 5: pbstrategy.ScopeSelector.selector:type_name -> google.protobuf.Struct
	5,  // 6: pbstrategy.ScopeSelector.sub_strategy:type_name -> pbstrategy.SubStrategy
	6,  // 7: pbstrategy.SubStrategy.spec:type_name -> pbstrategy.SubStrategySpec
	10, // 8: pbstrategy.SubStrategy.revision:type_name -> pbbase.Revision
	7,  // 9: pbstrategy.SubStrategySpec.scope:type_name -> pbstrategy.SubScopeSelector
	11, // 10: pbstrategy.SubScopeSelector.selector:type_name -> google.protobuf.Struct
	1,  // 11: pbstrategy.CurrentPublishedStrategy.spec:type_name -> pbstrategy.StrategySpec
	2,  // 12: pbstrategy.CurrentPublishedStrategy.state:type_name -> pbstrategy.StrategyState
	3,  // 13: pbstrategy.CurrentPublishedStrategy.attachment:type_name -> pbstrategy.StrategyAttachment
	12, // 14: pbstrategy.CurrentPublishedStrategy.revision:type_name -> pbbase.CreatedRevision
	1,  // 15: pbstrategy.PublishedStrategyHistory.spec:type_name -> pbstrategy.StrategySpec
	2,  // 16: pbstrategy.PublishedStrategyHistory.state:type_name -> pbstrategy.StrategyState
	3,  // 17: pbstrategy.PublishedStrategyHistory.attachment:type_name -> pbstrategy.StrategyAttachment
	12, // 18: pbstrategy.PublishedStrategyHistory.revision:type_name -> pbbase.CreatedRevision
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_strategy_proto_init() }
func file_strategy_proto_init() {
	if File_strategy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_strategy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Strategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategyState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategyAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubStrategySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubScopeSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentPublishedStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishedStrategyHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_strategy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_strategy_proto_goTypes,
		DependencyIndexes: file_strategy_proto_depIdxs,
		MessageInfos:      file_strategy_proto_msgTypes,
	}.Build()
	File_strategy_proto = out.File
	file_strategy_proto_rawDesc = nil
	file_strategy_proto_goTypes = nil
	file_strategy_proto_depIdxs = nil
}
