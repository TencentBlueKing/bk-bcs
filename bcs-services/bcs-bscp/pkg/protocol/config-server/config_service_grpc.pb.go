// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: config_service.proto

package pbcs

import (
	app "bscp.io/pkg/protocol/core/app"
	base "bscp.io/pkg/protocol/core/base"
	group "bscp.io/pkg/protocol/core/group"
	hook_revision "bscp.io/pkg/protocol/core/hook-revision"
	release "bscp.io/pkg/protocol/core/release"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Config_CreateApp_FullMethodName                                  = "/pbcs.Config/CreateApp"
	Config_UpdateApp_FullMethodName                                  = "/pbcs.Config/UpdateApp"
	Config_DeleteApp_FullMethodName                                  = "/pbcs.Config/DeleteApp"
	Config_GetApp_FullMethodName                                     = "/pbcs.Config/GetApp"
	Config_GetAppByName_FullMethodName                               = "/pbcs.Config/GetAppByName"
	Config_ListAppsRest_FullMethodName                               = "/pbcs.Config/ListAppsRest"
	Config_ListAppsBySpaceRest_FullMethodName                        = "/pbcs.Config/ListAppsBySpaceRest"
	Config_CreateConfigItem_FullMethodName                           = "/pbcs.Config/CreateConfigItem"
	Config_BatchUpsertConfigItems_FullMethodName                     = "/pbcs.Config/BatchUpsertConfigItems"
	Config_UpdateConfigItem_FullMethodName                           = "/pbcs.Config/UpdateConfigItem"
	Config_DeleteConfigItem_FullMethodName                           = "/pbcs.Config/DeleteConfigItem"
	Config_GetConfigItem_FullMethodName                              = "/pbcs.Config/GetConfigItem"
	Config_ListConfigItems_FullMethodName                            = "/pbcs.Config/ListConfigItems"
	Config_ListConfigItemCount_FullMethodName                        = "/pbcs.Config/ListConfigItemCount"
	Config_UpdateConfigHook_FullMethodName                           = "/pbcs.Config/UpdateConfigHook"
	Config_CreateRelease_FullMethodName                              = "/pbcs.Config/CreateRelease"
	Config_ListReleases_FullMethodName                               = "/pbcs.Config/ListReleases"
	Config_GetReleaseByName_FullMethodName                           = "/pbcs.Config/GetReleaseByName"
	Config_CreateHook_FullMethodName                                 = "/pbcs.Config/CreateHook"
	Config_DeleteHook_FullMethodName                                 = "/pbcs.Config/DeleteHook"
	Config_ListHooks_FullMethodName                                  = "/pbcs.Config/ListHooks"
	Config_ListHookTags_FullMethodName                               = "/pbcs.Config/ListHookTags"
	Config_GetHook_FullMethodName                                    = "/pbcs.Config/GetHook"
	Config_CreateHookRevision_FullMethodName                         = "/pbcs.Config/CreateHookRevision"
	Config_ListHookRevisions_FullMethodName                          = "/pbcs.Config/ListHookRevisions"
	Config_DeleteHookRevision_FullMethodName                         = "/pbcs.Config/DeleteHookRevision"
	Config_PublishHookRevision_FullMethodName                        = "/pbcs.Config/PublishHookRevision"
	Config_GetHookRevision_FullMethodName                            = "/pbcs.Config/GetHookRevision"
	Config_UpdateHookRevision_FullMethodName                         = "/pbcs.Config/UpdateHookRevision"
	Config_ListHookReferences_FullMethodName                         = "/pbcs.Config/ListHookReferences"
	Config_ListHookRevisionReferences_FullMethodName                 = "/pbcs.Config/ListHookRevisionReferences"
	Config_GetReleaseHook_FullMethodName                             = "/pbcs.Config/GetReleaseHook"
	Config_CreateTemplateSpace_FullMethodName                        = "/pbcs.Config/CreateTemplateSpace"
	Config_DeleteTemplateSpace_FullMethodName                        = "/pbcs.Config/DeleteTemplateSpace"
	Config_UpdateTemplateSpace_FullMethodName                        = "/pbcs.Config/UpdateTemplateSpace"
	Config_ListTemplateSpaces_FullMethodName                         = "/pbcs.Config/ListTemplateSpaces"
	Config_GetAllBizsOfTemplateSpaces_FullMethodName                 = "/pbcs.Config/GetAllBizsOfTemplateSpaces"
	Config_CreateDefaultTemplateSpace_FullMethodName                 = "/pbcs.Config/CreateDefaultTemplateSpace"
	Config_ListTemplateSpacesByIDs_FullMethodName                    = "/pbcs.Config/ListTemplateSpacesByIDs"
	Config_CreateTemplate_FullMethodName                             = "/pbcs.Config/CreateTemplate"
	Config_DeleteTemplate_FullMethodName                             = "/pbcs.Config/DeleteTemplate"
	Config_BatchDeleteTemplate_FullMethodName                        = "/pbcs.Config/BatchDeleteTemplate"
	Config_UpdateTemplate_FullMethodName                             = "/pbcs.Config/UpdateTemplate"
	Config_ListTemplates_FullMethodName                              = "/pbcs.Config/ListTemplates"
	Config_AddTemplatesToTemplateSets_FullMethodName                 = "/pbcs.Config/AddTemplatesToTemplateSets"
	Config_DeleteTemplatesFromTemplateSets_FullMethodName            = "/pbcs.Config/DeleteTemplatesFromTemplateSets"
	Config_ListTemplatesByIDs_FullMethodName                         = "/pbcs.Config/ListTemplatesByIDs"
	Config_ListTemplatesNotBound_FullMethodName                      = "/pbcs.Config/ListTemplatesNotBound"
	Config_ListTemplatesOfTemplateSet_FullMethodName                 = "/pbcs.Config/ListTemplatesOfTemplateSet"
	Config_CreateTemplateRevision_FullMethodName                     = "/pbcs.Config/CreateTemplateRevision"
	Config_ListTemplateRevisions_FullMethodName                      = "/pbcs.Config/ListTemplateRevisions"
	Config_ListTemplateRevisionsByIDs_FullMethodName                 = "/pbcs.Config/ListTemplateRevisionsByIDs"
	Config_ListTemplateRevisionNamesByTemplateIDs_FullMethodName     = "/pbcs.Config/ListTemplateRevisionNamesByTemplateIDs"
	Config_CreateTemplateSet_FullMethodName                          = "/pbcs.Config/CreateTemplateSet"
	Config_DeleteTemplateSet_FullMethodName                          = "/pbcs.Config/DeleteTemplateSet"
	Config_UpdateTemplateSet_FullMethodName                          = "/pbcs.Config/UpdateTemplateSet"
	Config_ListTemplateSets_FullMethodName                           = "/pbcs.Config/ListTemplateSets"
	Config_ListAppTemplateSets_FullMethodName                        = "/pbcs.Config/ListAppTemplateSets"
	Config_ListTemplateSetsByIDs_FullMethodName                      = "/pbcs.Config/ListTemplateSetsByIDs"
	Config_ListTemplateSetsOfBiz_FullMethodName                      = "/pbcs.Config/ListTemplateSetsOfBiz"
	Config_CreateAppTemplateBinding_FullMethodName                   = "/pbcs.Config/CreateAppTemplateBinding"
	Config_DeleteAppTemplateBinding_FullMethodName                   = "/pbcs.Config/DeleteAppTemplateBinding"
	Config_UpdateAppTemplateBinding_FullMethodName                   = "/pbcs.Config/UpdateAppTemplateBinding"
	Config_ListAppTemplateBindings_FullMethodName                    = "/pbcs.Config/ListAppTemplateBindings"
	Config_ListAppBoundTemplateRevisions_FullMethodName              = "/pbcs.Config/ListAppBoundTemplateRevisions"
	Config_ListReleasedAppBoundTemplateRevisions_FullMethodName      = "/pbcs.Config/ListReleasedAppBoundTemplateRevisions"
	Config_UpdateAppBoundTemplateRevisions_FullMethodName            = "/pbcs.Config/UpdateAppBoundTemplateRevisions"
	Config_DeleteAppBoundTemplateSets_FullMethodName                 = "/pbcs.Config/DeleteAppBoundTemplateSets"
	Config_CheckAppTemplateBinding_FullMethodName                    = "/pbcs.Config/CheckAppTemplateBinding"
	Config_ListTemplateBoundCounts_FullMethodName                    = "/pbcs.Config/ListTemplateBoundCounts"
	Config_ListTemplateRevisionBoundCounts_FullMethodName            = "/pbcs.Config/ListTemplateRevisionBoundCounts"
	Config_ListTemplateSetBoundCounts_FullMethodName                 = "/pbcs.Config/ListTemplateSetBoundCounts"
	Config_ListTemplateBoundUnnamedAppDetails_FullMethodName         = "/pbcs.Config/ListTemplateBoundUnnamedAppDetails"
	Config_ListTemplateBoundNamedAppDetails_FullMethodName           = "/pbcs.Config/ListTemplateBoundNamedAppDetails"
	Config_ListTemplateBoundTemplateSetDetails_FullMethodName        = "/pbcs.Config/ListTemplateBoundTemplateSetDetails"
	Config_ListMultiTemplateBoundTemplateSetDetails_FullMethodName   = "/pbcs.Config/ListMultiTemplateBoundTemplateSetDetails"
	Config_ListTemplateRevisionBoundUnnamedAppDetails_FullMethodName = "/pbcs.Config/ListTemplateRevisionBoundUnnamedAppDetails"
	Config_ListTemplateRevisionBoundNamedAppDetails_FullMethodName   = "/pbcs.Config/ListTemplateRevisionBoundNamedAppDetails"
	Config_ListTemplateSetBoundUnnamedAppDetails_FullMethodName      = "/pbcs.Config/ListTemplateSetBoundUnnamedAppDetails"
	Config_ListMultiTemplateSetBoundUnnamedAppDetails_FullMethodName = "/pbcs.Config/ListMultiTemplateSetBoundUnnamedAppDetails"
	Config_ListTemplateSetBoundNamedAppDetails_FullMethodName        = "/pbcs.Config/ListTemplateSetBoundNamedAppDetails"
	Config_ListLatestTemplateBoundUnnamedAppDetails_FullMethodName   = "/pbcs.Config/ListLatestTemplateBoundUnnamedAppDetails"
	Config_CreateTemplateVariable_FullMethodName                     = "/pbcs.Config/CreateTemplateVariable"
	Config_DeleteTemplateVariable_FullMethodName                     = "/pbcs.Config/DeleteTemplateVariable"
	Config_UpdateTemplateVariable_FullMethodName                     = "/pbcs.Config/UpdateTemplateVariable"
	Config_ListTemplateVariables_FullMethodName                      = "/pbcs.Config/ListTemplateVariables"
	Config_ExtractAppTemplateVariables_FullMethodName                = "/pbcs.Config/ExtractAppTemplateVariables"
	Config_GetAppTemplateVariableReferences_FullMethodName           = "/pbcs.Config/GetAppTemplateVariableReferences"
	Config_GetReleasedAppTemplateVariableReferences_FullMethodName   = "/pbcs.Config/GetReleasedAppTemplateVariableReferences"
	Config_UpdateAppTemplateVariables_FullMethodName                 = "/pbcs.Config/UpdateAppTemplateVariables"
	Config_ListAppTemplateVariables_FullMethodName                   = "/pbcs.Config/ListAppTemplateVariables"
	Config_ListReleasedAppTemplateVariables_FullMethodName           = "/pbcs.Config/ListReleasedAppTemplateVariables"
	Config_CreateGroup_FullMethodName                                = "/pbcs.Config/CreateGroup"
	Config_DeleteGroup_FullMethodName                                = "/pbcs.Config/DeleteGroup"
	Config_UpdateGroup_FullMethodName                                = "/pbcs.Config/UpdateGroup"
	Config_ListAllGroups_FullMethodName                              = "/pbcs.Config/ListAllGroups"
	Config_ListAppGroups_FullMethodName                              = "/pbcs.Config/ListAppGroups"
	Config_ListGroupReleasedApps_FullMethodName                      = "/pbcs.Config/ListGroupReleasedApps"
	Config_GetGroupByName_FullMethodName                             = "/pbcs.Config/GetGroupByName"
	Config_Publish_FullMethodName                                    = "/pbcs.Config/Publish"
	Config_GenerateReleaseAndPublish_FullMethodName                  = "/pbcs.Config/GenerateReleaseAndPublish"
	Config_CreateCredentials_FullMethodName                          = "/pbcs.Config/CreateCredentials"
	Config_ListCredentials_FullMethodName                            = "/pbcs.Config/ListCredentials"
	Config_DeleteCredential_FullMethodName                           = "/pbcs.Config/DeleteCredential"
	Config_UpdateCredential_FullMethodName                           = "/pbcs.Config/UpdateCredential"
	Config_ListCredentialScopes_FullMethodName                       = "/pbcs.Config/ListCredentialScopes"
	Config_UpdateCredentialScope_FullMethodName                      = "/pbcs.Config/UpdateCredentialScope"
)

// ConfigClient is the client API for Config service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigClient interface {
	CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateAppResp, error)
	UpdateApp(ctx context.Context, in *UpdateAppReq, opts ...grpc.CallOption) (*UpdateAppResp, error)
	DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*DeleteAppResp, error)
	GetApp(ctx context.Context, in *GetAppReq, opts ...grpc.CallOption) (*app.App, error)
	GetAppByName(ctx context.Context, in *GetAppByNameReq, opts ...grpc.CallOption) (*app.App, error)
	// 获取用户有权限的 spaces 所有的 apps
	ListAppsRest(ctx context.Context, in *ListAppsRestReq, opts ...grpc.CallOption) (*ListAppsResp, error)
	// 按 space 查询 app 信息
	ListAppsBySpaceRest(ctx context.Context, in *ListAppsBySpaceRestReq, opts ...grpc.CallOption) (*ListAppsResp, error)
	CreateConfigItem(ctx context.Context, in *CreateConfigItemReq, opts ...grpc.CallOption) (*CreateConfigItemResp, error)
	BatchUpsertConfigItems(ctx context.Context, in *BatchUpsertConfigItemsReq, opts ...grpc.CallOption) (*BatchUpsertConfigItemsResp, error)
	UpdateConfigItem(ctx context.Context, in *UpdateConfigItemReq, opts ...grpc.CallOption) (*UpdateConfigItemResp, error)
	DeleteConfigItem(ctx context.Context, in *DeleteConfigItemReq, opts ...grpc.CallOption) (*DeleteConfigItemResp, error)
	GetConfigItem(ctx context.Context, in *GetConfigItemReq, opts ...grpc.CallOption) (*GetConfigItemResp, error)
	ListConfigItems(ctx context.Context, in *ListConfigItemsReq, opts ...grpc.CallOption) (*ListConfigItemsResp, error)
	ListConfigItemCount(ctx context.Context, in *ListConfigItemCountReq, opts ...grpc.CallOption) (*ListConfigItemCountResp, error)
	UpdateConfigHook(ctx context.Context, in *UpdateConfigHookReq, opts ...grpc.CallOption) (*UpdateConfigHookResp, error)
	CreateRelease(ctx context.Context, in *CreateReleaseReq, opts ...grpc.CallOption) (*CreateReleaseResp, error)
	ListReleases(ctx context.Context, in *ListReleasesReq, opts ...grpc.CallOption) (*ListReleasesResp, error)
	GetReleaseByName(ctx context.Context, in *GetReleaseByNameReq, opts ...grpc.CallOption) (*release.Release, error)
	CreateHook(ctx context.Context, in *CreateHookReq, opts ...grpc.CallOption) (*CreateHookResp, error)
	DeleteHook(ctx context.Context, in *DeleteHookReq, opts ...grpc.CallOption) (*DeleteHookResp, error)
	ListHooks(ctx context.Context, in *ListHooksReq, opts ...grpc.CallOption) (*ListHooksResp, error)
	ListHookTags(ctx context.Context, in *ListHookTagsReq, opts ...grpc.CallOption) (*ListHookTagsResp, error)
	GetHook(ctx context.Context, in *GetHookReq, opts ...grpc.CallOption) (*GetHookResp, error)
	CreateHookRevision(ctx context.Context, in *CreateHookRevisionReq, opts ...grpc.CallOption) (*CreateHookRevisionResp, error)
	ListHookRevisions(ctx context.Context, in *ListHookRevisionsReq, opts ...grpc.CallOption) (*ListHookRevisionsResp, error)
	DeleteHookRevision(ctx context.Context, in *DeleteHookRevisionReq, opts ...grpc.CallOption) (*DeleteHookRevisionResp, error)
	PublishHookRevision(ctx context.Context, in *PublishHookRevisionReq, opts ...grpc.CallOption) (*PublishHookRevisionResp, error)
	GetHookRevision(ctx context.Context, in *GetHookRevisionReq, opts ...grpc.CallOption) (*hook_revision.HookRevision, error)
	UpdateHookRevision(ctx context.Context, in *UpdateHookRevisionReq, opts ...grpc.CallOption) (*UpdateHookRevisionResp, error)
	ListHookReferences(ctx context.Context, in *ListHookReferencesReq, opts ...grpc.CallOption) (*ListHookReferencesResp, error)
	ListHookRevisionReferences(ctx context.Context, in *ListHookRevisionReferencesReq, opts ...grpc.CallOption) (*ListHookRevisionReferencesResp, error)
	GetReleaseHook(ctx context.Context, in *GetReleaseHookReq, opts ...grpc.CallOption) (*GetReleaseHookResp, error)
	CreateTemplateSpace(ctx context.Context, in *CreateTemplateSpaceReq, opts ...grpc.CallOption) (*CreateTemplateSpaceResp, error)
	DeleteTemplateSpace(ctx context.Context, in *DeleteTemplateSpaceReq, opts ...grpc.CallOption) (*DeleteTemplateSpaceResp, error)
	UpdateTemplateSpace(ctx context.Context, in *UpdateTemplateSpaceReq, opts ...grpc.CallOption) (*UpdateTemplateSpaceResp, error)
	ListTemplateSpaces(ctx context.Context, in *ListTemplateSpacesReq, opts ...grpc.CallOption) (*ListTemplateSpacesResp, error)
	// GetAllBizsOfTemplateSpaces called only by system itself
	GetAllBizsOfTemplateSpaces(ctx context.Context, in *base.EmptyReq, opts ...grpc.CallOption) (*GetAllBizsOfTemplateSpacesResp, error)
	// CreateDefaultTemplateSpace called only by system itself
	CreateDefaultTemplateSpace(ctx context.Context, in *CreateDefaultTemplateSpaceReq, opts ...grpc.CallOption) (*CreateDefaultTemplateSpaceResp, error)
	ListTemplateSpacesByIDs(ctx context.Context, in *ListTemplateSpacesByIDsReq, opts ...grpc.CallOption) (*ListTemplateSpacesByIDsResp, error)
	CreateTemplate(ctx context.Context, in *CreateTemplateReq, opts ...grpc.CallOption) (*CreateTemplateResp, error)
	DeleteTemplate(ctx context.Context, in *DeleteTemplateReq, opts ...grpc.CallOption) (*DeleteTemplateResp, error)
	BatchDeleteTemplate(ctx context.Context, in *BatchDeleteTemplateReq, opts ...grpc.CallOption) (*BatchDeleteTemplateResp, error)
	UpdateTemplate(ctx context.Context, in *UpdateTemplateReq, opts ...grpc.CallOption) (*UpdateTemplateResp, error)
	ListTemplates(ctx context.Context, in *ListTemplatesReq, opts ...grpc.CallOption) (*ListTemplatesResp, error)
	AddTemplatesToTemplateSets(ctx context.Context, in *AddTemplatesToTemplateSetsReq, opts ...grpc.CallOption) (*AddTemplatesToTemplateSetsResp, error)
	DeleteTemplatesFromTemplateSets(ctx context.Context, in *DeleteTemplatesFromTemplateSetsReq, opts ...grpc.CallOption) (*DeleteTemplatesFromTemplateSetsResp, error)
	ListTemplatesByIDs(ctx context.Context, in *ListTemplatesByIDsReq, opts ...grpc.CallOption) (*ListTemplatesByIDsResp, error)
	ListTemplatesNotBound(ctx context.Context, in *ListTemplatesNotBoundReq, opts ...grpc.CallOption) (*ListTemplatesNotBoundResp, error)
	ListTemplatesOfTemplateSet(ctx context.Context, in *ListTemplatesOfTemplateSetReq, opts ...grpc.CallOption) (*ListTemplatesOfTemplateSetResp, error)
	CreateTemplateRevision(ctx context.Context, in *CreateTemplateRevisionReq, opts ...grpc.CallOption) (*CreateTemplateRevisionResp, error)
	ListTemplateRevisions(ctx context.Context, in *ListTemplateRevisionsReq, opts ...grpc.CallOption) (*ListTemplateRevisionsResp, error)
	// 暂时不对外开发（删除模版后，服务引用的latest版本会回退到上一个老版本）
	//rpc DeleteTemplateRevision(DeleteTemplateRevisionReq) returns (DeleteTemplateRevisionResp) {
	//option (google.api.http) = {
	//delete : "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/templates/{template_id}/template_revisions/{template_revision_id}"
	//};
	//}
	ListTemplateRevisionsByIDs(ctx context.Context, in *ListTemplateRevisionsByIDsReq, opts ...grpc.CallOption) (*ListTemplateRevisionsByIDsResp, error)
	ListTemplateRevisionNamesByTemplateIDs(ctx context.Context, in *ListTemplateRevisionNamesByTemplateIDsReq, opts ...grpc.CallOption) (*ListTemplateRevisionNamesByTemplateIDsResp, error)
	CreateTemplateSet(ctx context.Context, in *CreateTemplateSetReq, opts ...grpc.CallOption) (*CreateTemplateSetResp, error)
	DeleteTemplateSet(ctx context.Context, in *DeleteTemplateSetReq, opts ...grpc.CallOption) (*DeleteTemplateSetResp, error)
	UpdateTemplateSet(ctx context.Context, in *UpdateTemplateSetReq, opts ...grpc.CallOption) (*UpdateTemplateSetResp, error)
	ListTemplateSets(ctx context.Context, in *ListTemplateSetsReq, opts ...grpc.CallOption) (*ListTemplateSetsResp, error)
	ListAppTemplateSets(ctx context.Context, in *ListAppTemplateSetsReq, opts ...grpc.CallOption) (*ListAppTemplateSetsResp, error)
	ListTemplateSetsByIDs(ctx context.Context, in *ListTemplateSetsByIDsReq, opts ...grpc.CallOption) (*ListTemplateSetsByIDsResp, error)
	ListTemplateSetsOfBiz(ctx context.Context, in *ListTemplateSetsOfBizReq, opts ...grpc.CallOption) (*ListTemplateSetsOfBizResp, error)
	CreateAppTemplateBinding(ctx context.Context, in *CreateAppTemplateBindingReq, opts ...grpc.CallOption) (*CreateAppTemplateBindingResp, error)
	DeleteAppTemplateBinding(ctx context.Context, in *DeleteAppTemplateBindingReq, opts ...grpc.CallOption) (*DeleteAppTemplateBindingResp, error)
	UpdateAppTemplateBinding(ctx context.Context, in *UpdateAppTemplateBindingReq, opts ...grpc.CallOption) (*UpdateAppTemplateBindingResp, error)
	ListAppTemplateBindings(ctx context.Context, in *ListAppTemplateBindingsReq, opts ...grpc.CallOption) (*ListAppTemplateBindingsResp, error)
	ListAppBoundTemplateRevisions(ctx context.Context, in *ListAppBoundTemplateRevisionsReq, opts ...grpc.CallOption) (*ListAppBoundTemplateRevisionsResp, error)
	ListReleasedAppBoundTemplateRevisions(ctx context.Context, in *ListReleasedAppBoundTemplateRevisionsReq, opts ...grpc.CallOption) (*ListReleasedAppBoundTemplateRevisionsResp, error)
	UpdateAppBoundTemplateRevisions(ctx context.Context, in *UpdateAppBoundTemplateRevisionsReq, opts ...grpc.CallOption) (*UpdateAppBoundTemplateRevisionsResp, error)
	DeleteAppBoundTemplateSets(ctx context.Context, in *DeleteAppBoundTemplateSetsReq, opts ...grpc.CallOption) (*DeleteAppBoundTemplateSetsResp, error)
	CheckAppTemplateBinding(ctx context.Context, in *CheckAppTemplateBindingReq, opts ...grpc.CallOption) (*CheckAppTemplateBindingResp, error)
	ListTemplateBoundCounts(ctx context.Context, in *ListTemplateBoundCountsReq, opts ...grpc.CallOption) (*ListTemplateBoundCountsResp, error)
	ListTemplateRevisionBoundCounts(ctx context.Context, in *ListTemplateRevisionBoundCountsReq, opts ...grpc.CallOption) (*ListTemplateRevisionBoundCountsResp, error)
	ListTemplateSetBoundCounts(ctx context.Context, in *ListTemplateSetBoundCountsReq, opts ...grpc.CallOption) (*ListTemplateSetBoundCountsResp, error)
	ListTemplateBoundUnnamedAppDetails(ctx context.Context, in *ListTemplateBoundUnnamedAppDetailsReq, opts ...grpc.CallOption) (*ListTemplateBoundUnnamedAppDetailsResp, error)
	ListTemplateBoundNamedAppDetails(ctx context.Context, in *ListTemplateBoundNamedAppDetailsReq, opts ...grpc.CallOption) (*ListTemplateBoundNamedAppDetailsResp, error)
	ListTemplateBoundTemplateSetDetails(ctx context.Context, in *ListTemplateBoundTemplateSetDetailsReq, opts ...grpc.CallOption) (*ListTemplateBoundTemplateSetDetailsResp, error)
	ListMultiTemplateBoundTemplateSetDetails(ctx context.Context, in *ListMultiTemplateBoundTemplateSetDetailsReq, opts ...grpc.CallOption) (*ListMultiTemplateBoundTemplateSetDetailsResp, error)
	ListTemplateRevisionBoundUnnamedAppDetails(ctx context.Context, in *ListTemplateRevisionBoundUnnamedAppDetailsReq, opts ...grpc.CallOption) (*ListTemplateRevisionBoundUnnamedAppDetailsResp, error)
	ListTemplateRevisionBoundNamedAppDetails(ctx context.Context, in *ListTemplateRevisionBoundNamedAppDetailsReq, opts ...grpc.CallOption) (*ListTemplateRevisionBoundNamedAppDetailsResp, error)
	ListTemplateSetBoundUnnamedAppDetails(ctx context.Context, in *ListTemplateSetBoundUnnamedAppDetailsReq, opts ...grpc.CallOption) (*ListTemplateSetBoundUnnamedAppDetailsResp, error)
	ListMultiTemplateSetBoundUnnamedAppDetails(ctx context.Context, in *ListMultiTemplateSetBoundUnnamedAppDetailsReq, opts ...grpc.CallOption) (*ListMultiTemplateSetBoundUnnamedAppDetailsResp, error)
	ListTemplateSetBoundNamedAppDetails(ctx context.Context, in *ListTemplateSetBoundNamedAppDetailsReq, opts ...grpc.CallOption) (*ListTemplateSetBoundNamedAppDetailsResp, error)
	ListLatestTemplateBoundUnnamedAppDetails(ctx context.Context, in *ListLatestTemplateBoundUnnamedAppDetailsReq, opts ...grpc.CallOption) (*ListLatestTemplateBoundUnnamedAppDetailsResp, error)
	CreateTemplateVariable(ctx context.Context, in *CreateTemplateVariableReq, opts ...grpc.CallOption) (*CreateTemplateVariableResp, error)
	DeleteTemplateVariable(ctx context.Context, in *DeleteTemplateVariableReq, opts ...grpc.CallOption) (*DeleteTemplateVariableResp, error)
	UpdateTemplateVariable(ctx context.Context, in *UpdateTemplateVariableReq, opts ...grpc.CallOption) (*UpdateTemplateVariableResp, error)
	ListTemplateVariables(ctx context.Context, in *ListTemplateVariablesReq, opts ...grpc.CallOption) (*ListTemplateVariablesResp, error)
	ExtractAppTemplateVariables(ctx context.Context, in *ExtractAppTemplateVariablesReq, opts ...grpc.CallOption) (*ExtractAppTemplateVariablesResp, error)
	GetAppTemplateVariableReferences(ctx context.Context, in *GetAppTemplateVariableReferencesReq, opts ...grpc.CallOption) (*GetAppTemplateVariableReferencesResp, error)
	GetReleasedAppTemplateVariableReferences(ctx context.Context, in *GetReleasedAppTemplateVariableReferencesReq, opts ...grpc.CallOption) (*GetReleasedAppTemplateVariableReferencesResp, error)
	UpdateAppTemplateVariables(ctx context.Context, in *UpdateAppTemplateVariablesReq, opts ...grpc.CallOption) (*UpdateAppTemplateVariablesResp, error)
	ListAppTemplateVariables(ctx context.Context, in *ListAppTemplateVariablesReq, opts ...grpc.CallOption) (*ListAppTemplateVariablesResp, error)
	ListReleasedAppTemplateVariables(ctx context.Context, in *ListReleasedAppTemplateVariablesReq, opts ...grpc.CallOption) (*ListReleasedAppTemplateVariablesResp, error)
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupResp, error)
	UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupResp, error)
	ListAllGroups(ctx context.Context, in *ListAllGroupsReq, opts ...grpc.CallOption) (*ListAllGroupsResp, error)
	ListAppGroups(ctx context.Context, in *ListAppGroupsReq, opts ...grpc.CallOption) (*ListAppGroupsResp, error)
	ListGroupReleasedApps(ctx context.Context, in *ListGroupReleasedAppsReq, opts ...grpc.CallOption) (*ListGroupReleasedAppsResp, error)
	GetGroupByName(ctx context.Context, in *GetGroupByNameReq, opts ...grpc.CallOption) (*group.Group, error)
	Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishResp, error)
	GenerateReleaseAndPublish(ctx context.Context, in *GenerateReleaseAndPublishReq, opts ...grpc.CallOption) (*PublishResp, error)
	CreateCredentials(ctx context.Context, in *CreateCredentialReq, opts ...grpc.CallOption) (*CreateCredentialResp, error)
	ListCredentials(ctx context.Context, in *ListCredentialsReq, opts ...grpc.CallOption) (*ListCredentialsResp, error)
	DeleteCredential(ctx context.Context, in *DeleteCredentialsReq, opts ...grpc.CallOption) (*DeleteCredentialsResp, error)
	UpdateCredential(ctx context.Context, in *UpdateCredentialsReq, opts ...grpc.CallOption) (*UpdateCredentialsResp, error)
	ListCredentialScopes(ctx context.Context, in *ListCredentialScopesReq, opts ...grpc.CallOption) (*ListCredentialScopesResp, error)
	UpdateCredentialScope(ctx context.Context, in *UpdateCredentialScopeReq, opts ...grpc.CallOption) (*UpdateCredentialScopeResp, error)
}

type configClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigClient(cc grpc.ClientConnInterface) ConfigClient {
	return &configClient{cc}
}

func (c *configClient) CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateAppResp, error) {
	out := new(CreateAppResp)
	err := c.cc.Invoke(ctx, Config_CreateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateApp(ctx context.Context, in *UpdateAppReq, opts ...grpc.CallOption) (*UpdateAppResp, error) {
	out := new(UpdateAppResp)
	err := c.cc.Invoke(ctx, Config_UpdateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*DeleteAppResp, error) {
	out := new(DeleteAppResp)
	err := c.cc.Invoke(ctx, Config_DeleteApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetApp(ctx context.Context, in *GetAppReq, opts ...grpc.CallOption) (*app.App, error) {
	out := new(app.App)
	err := c.cc.Invoke(ctx, Config_GetApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetAppByName(ctx context.Context, in *GetAppByNameReq, opts ...grpc.CallOption) (*app.App, error) {
	out := new(app.App)
	err := c.cc.Invoke(ctx, Config_GetAppByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListAppsRest(ctx context.Context, in *ListAppsRestReq, opts ...grpc.CallOption) (*ListAppsResp, error) {
	out := new(ListAppsResp)
	err := c.cc.Invoke(ctx, Config_ListAppsRest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListAppsBySpaceRest(ctx context.Context, in *ListAppsBySpaceRestReq, opts ...grpc.CallOption) (*ListAppsResp, error) {
	out := new(ListAppsResp)
	err := c.cc.Invoke(ctx, Config_ListAppsBySpaceRest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateConfigItem(ctx context.Context, in *CreateConfigItemReq, opts ...grpc.CallOption) (*CreateConfigItemResp, error) {
	out := new(CreateConfigItemResp)
	err := c.cc.Invoke(ctx, Config_CreateConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) BatchUpsertConfigItems(ctx context.Context, in *BatchUpsertConfigItemsReq, opts ...grpc.CallOption) (*BatchUpsertConfigItemsResp, error) {
	out := new(BatchUpsertConfigItemsResp)
	err := c.cc.Invoke(ctx, Config_BatchUpsertConfigItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateConfigItem(ctx context.Context, in *UpdateConfigItemReq, opts ...grpc.CallOption) (*UpdateConfigItemResp, error) {
	out := new(UpdateConfigItemResp)
	err := c.cc.Invoke(ctx, Config_UpdateConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteConfigItem(ctx context.Context, in *DeleteConfigItemReq, opts ...grpc.CallOption) (*DeleteConfigItemResp, error) {
	out := new(DeleteConfigItemResp)
	err := c.cc.Invoke(ctx, Config_DeleteConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetConfigItem(ctx context.Context, in *GetConfigItemReq, opts ...grpc.CallOption) (*GetConfigItemResp, error) {
	out := new(GetConfigItemResp)
	err := c.cc.Invoke(ctx, Config_GetConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListConfigItems(ctx context.Context, in *ListConfigItemsReq, opts ...grpc.CallOption) (*ListConfigItemsResp, error) {
	out := new(ListConfigItemsResp)
	err := c.cc.Invoke(ctx, Config_ListConfigItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListConfigItemCount(ctx context.Context, in *ListConfigItemCountReq, opts ...grpc.CallOption) (*ListConfigItemCountResp, error) {
	out := new(ListConfigItemCountResp)
	err := c.cc.Invoke(ctx, Config_ListConfigItemCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateConfigHook(ctx context.Context, in *UpdateConfigHookReq, opts ...grpc.CallOption) (*UpdateConfigHookResp, error) {
	out := new(UpdateConfigHookResp)
	err := c.cc.Invoke(ctx, Config_UpdateConfigHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateRelease(ctx context.Context, in *CreateReleaseReq, opts ...grpc.CallOption) (*CreateReleaseResp, error) {
	out := new(CreateReleaseResp)
	err := c.cc.Invoke(ctx, Config_CreateRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListReleases(ctx context.Context, in *ListReleasesReq, opts ...grpc.CallOption) (*ListReleasesResp, error) {
	out := new(ListReleasesResp)
	err := c.cc.Invoke(ctx, Config_ListReleases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetReleaseByName(ctx context.Context, in *GetReleaseByNameReq, opts ...grpc.CallOption) (*release.Release, error) {
	out := new(release.Release)
	err := c.cc.Invoke(ctx, Config_GetReleaseByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateHook(ctx context.Context, in *CreateHookReq, opts ...grpc.CallOption) (*CreateHookResp, error) {
	out := new(CreateHookResp)
	err := c.cc.Invoke(ctx, Config_CreateHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteHook(ctx context.Context, in *DeleteHookReq, opts ...grpc.CallOption) (*DeleteHookResp, error) {
	out := new(DeleteHookResp)
	err := c.cc.Invoke(ctx, Config_DeleteHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListHooks(ctx context.Context, in *ListHooksReq, opts ...grpc.CallOption) (*ListHooksResp, error) {
	out := new(ListHooksResp)
	err := c.cc.Invoke(ctx, Config_ListHooks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListHookTags(ctx context.Context, in *ListHookTagsReq, opts ...grpc.CallOption) (*ListHookTagsResp, error) {
	out := new(ListHookTagsResp)
	err := c.cc.Invoke(ctx, Config_ListHookTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetHook(ctx context.Context, in *GetHookReq, opts ...grpc.CallOption) (*GetHookResp, error) {
	out := new(GetHookResp)
	err := c.cc.Invoke(ctx, Config_GetHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateHookRevision(ctx context.Context, in *CreateHookRevisionReq, opts ...grpc.CallOption) (*CreateHookRevisionResp, error) {
	out := new(CreateHookRevisionResp)
	err := c.cc.Invoke(ctx, Config_CreateHookRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListHookRevisions(ctx context.Context, in *ListHookRevisionsReq, opts ...grpc.CallOption) (*ListHookRevisionsResp, error) {
	out := new(ListHookRevisionsResp)
	err := c.cc.Invoke(ctx, Config_ListHookRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteHookRevision(ctx context.Context, in *DeleteHookRevisionReq, opts ...grpc.CallOption) (*DeleteHookRevisionResp, error) {
	out := new(DeleteHookRevisionResp)
	err := c.cc.Invoke(ctx, Config_DeleteHookRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) PublishHookRevision(ctx context.Context, in *PublishHookRevisionReq, opts ...grpc.CallOption) (*PublishHookRevisionResp, error) {
	out := new(PublishHookRevisionResp)
	err := c.cc.Invoke(ctx, Config_PublishHookRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetHookRevision(ctx context.Context, in *GetHookRevisionReq, opts ...grpc.CallOption) (*hook_revision.HookRevision, error) {
	out := new(hook_revision.HookRevision)
	err := c.cc.Invoke(ctx, Config_GetHookRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateHookRevision(ctx context.Context, in *UpdateHookRevisionReq, opts ...grpc.CallOption) (*UpdateHookRevisionResp, error) {
	out := new(UpdateHookRevisionResp)
	err := c.cc.Invoke(ctx, Config_UpdateHookRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListHookReferences(ctx context.Context, in *ListHookReferencesReq, opts ...grpc.CallOption) (*ListHookReferencesResp, error) {
	out := new(ListHookReferencesResp)
	err := c.cc.Invoke(ctx, Config_ListHookReferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListHookRevisionReferences(ctx context.Context, in *ListHookRevisionReferencesReq, opts ...grpc.CallOption) (*ListHookRevisionReferencesResp, error) {
	out := new(ListHookRevisionReferencesResp)
	err := c.cc.Invoke(ctx, Config_ListHookRevisionReferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetReleaseHook(ctx context.Context, in *GetReleaseHookReq, opts ...grpc.CallOption) (*GetReleaseHookResp, error) {
	out := new(GetReleaseHookResp)
	err := c.cc.Invoke(ctx, Config_GetReleaseHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateTemplateSpace(ctx context.Context, in *CreateTemplateSpaceReq, opts ...grpc.CallOption) (*CreateTemplateSpaceResp, error) {
	out := new(CreateTemplateSpaceResp)
	err := c.cc.Invoke(ctx, Config_CreateTemplateSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteTemplateSpace(ctx context.Context, in *DeleteTemplateSpaceReq, opts ...grpc.CallOption) (*DeleteTemplateSpaceResp, error) {
	out := new(DeleteTemplateSpaceResp)
	err := c.cc.Invoke(ctx, Config_DeleteTemplateSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateTemplateSpace(ctx context.Context, in *UpdateTemplateSpaceReq, opts ...grpc.CallOption) (*UpdateTemplateSpaceResp, error) {
	out := new(UpdateTemplateSpaceResp)
	err := c.cc.Invoke(ctx, Config_UpdateTemplateSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateSpaces(ctx context.Context, in *ListTemplateSpacesReq, opts ...grpc.CallOption) (*ListTemplateSpacesResp, error) {
	out := new(ListTemplateSpacesResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateSpaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetAllBizsOfTemplateSpaces(ctx context.Context, in *base.EmptyReq, opts ...grpc.CallOption) (*GetAllBizsOfTemplateSpacesResp, error) {
	out := new(GetAllBizsOfTemplateSpacesResp)
	err := c.cc.Invoke(ctx, Config_GetAllBizsOfTemplateSpaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateDefaultTemplateSpace(ctx context.Context, in *CreateDefaultTemplateSpaceReq, opts ...grpc.CallOption) (*CreateDefaultTemplateSpaceResp, error) {
	out := new(CreateDefaultTemplateSpaceResp)
	err := c.cc.Invoke(ctx, Config_CreateDefaultTemplateSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateSpacesByIDs(ctx context.Context, in *ListTemplateSpacesByIDsReq, opts ...grpc.CallOption) (*ListTemplateSpacesByIDsResp, error) {
	out := new(ListTemplateSpacesByIDsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateSpacesByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateTemplate(ctx context.Context, in *CreateTemplateReq, opts ...grpc.CallOption) (*CreateTemplateResp, error) {
	out := new(CreateTemplateResp)
	err := c.cc.Invoke(ctx, Config_CreateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteTemplate(ctx context.Context, in *DeleteTemplateReq, opts ...grpc.CallOption) (*DeleteTemplateResp, error) {
	out := new(DeleteTemplateResp)
	err := c.cc.Invoke(ctx, Config_DeleteTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) BatchDeleteTemplate(ctx context.Context, in *BatchDeleteTemplateReq, opts ...grpc.CallOption) (*BatchDeleteTemplateResp, error) {
	out := new(BatchDeleteTemplateResp)
	err := c.cc.Invoke(ctx, Config_BatchDeleteTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateTemplate(ctx context.Context, in *UpdateTemplateReq, opts ...grpc.CallOption) (*UpdateTemplateResp, error) {
	out := new(UpdateTemplateResp)
	err := c.cc.Invoke(ctx, Config_UpdateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplates(ctx context.Context, in *ListTemplatesReq, opts ...grpc.CallOption) (*ListTemplatesResp, error) {
	out := new(ListTemplatesResp)
	err := c.cc.Invoke(ctx, Config_ListTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) AddTemplatesToTemplateSets(ctx context.Context, in *AddTemplatesToTemplateSetsReq, opts ...grpc.CallOption) (*AddTemplatesToTemplateSetsResp, error) {
	out := new(AddTemplatesToTemplateSetsResp)
	err := c.cc.Invoke(ctx, Config_AddTemplatesToTemplateSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteTemplatesFromTemplateSets(ctx context.Context, in *DeleteTemplatesFromTemplateSetsReq, opts ...grpc.CallOption) (*DeleteTemplatesFromTemplateSetsResp, error) {
	out := new(DeleteTemplatesFromTemplateSetsResp)
	err := c.cc.Invoke(ctx, Config_DeleteTemplatesFromTemplateSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplatesByIDs(ctx context.Context, in *ListTemplatesByIDsReq, opts ...grpc.CallOption) (*ListTemplatesByIDsResp, error) {
	out := new(ListTemplatesByIDsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplatesByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplatesNotBound(ctx context.Context, in *ListTemplatesNotBoundReq, opts ...grpc.CallOption) (*ListTemplatesNotBoundResp, error) {
	out := new(ListTemplatesNotBoundResp)
	err := c.cc.Invoke(ctx, Config_ListTemplatesNotBound_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplatesOfTemplateSet(ctx context.Context, in *ListTemplatesOfTemplateSetReq, opts ...grpc.CallOption) (*ListTemplatesOfTemplateSetResp, error) {
	out := new(ListTemplatesOfTemplateSetResp)
	err := c.cc.Invoke(ctx, Config_ListTemplatesOfTemplateSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateTemplateRevision(ctx context.Context, in *CreateTemplateRevisionReq, opts ...grpc.CallOption) (*CreateTemplateRevisionResp, error) {
	out := new(CreateTemplateRevisionResp)
	err := c.cc.Invoke(ctx, Config_CreateTemplateRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateRevisions(ctx context.Context, in *ListTemplateRevisionsReq, opts ...grpc.CallOption) (*ListTemplateRevisionsResp, error) {
	out := new(ListTemplateRevisionsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateRevisionsByIDs(ctx context.Context, in *ListTemplateRevisionsByIDsReq, opts ...grpc.CallOption) (*ListTemplateRevisionsByIDsResp, error) {
	out := new(ListTemplateRevisionsByIDsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateRevisionsByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateRevisionNamesByTemplateIDs(ctx context.Context, in *ListTemplateRevisionNamesByTemplateIDsReq, opts ...grpc.CallOption) (*ListTemplateRevisionNamesByTemplateIDsResp, error) {
	out := new(ListTemplateRevisionNamesByTemplateIDsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateRevisionNamesByTemplateIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateTemplateSet(ctx context.Context, in *CreateTemplateSetReq, opts ...grpc.CallOption) (*CreateTemplateSetResp, error) {
	out := new(CreateTemplateSetResp)
	err := c.cc.Invoke(ctx, Config_CreateTemplateSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteTemplateSet(ctx context.Context, in *DeleteTemplateSetReq, opts ...grpc.CallOption) (*DeleteTemplateSetResp, error) {
	out := new(DeleteTemplateSetResp)
	err := c.cc.Invoke(ctx, Config_DeleteTemplateSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateTemplateSet(ctx context.Context, in *UpdateTemplateSetReq, opts ...grpc.CallOption) (*UpdateTemplateSetResp, error) {
	out := new(UpdateTemplateSetResp)
	err := c.cc.Invoke(ctx, Config_UpdateTemplateSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateSets(ctx context.Context, in *ListTemplateSetsReq, opts ...grpc.CallOption) (*ListTemplateSetsResp, error) {
	out := new(ListTemplateSetsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListAppTemplateSets(ctx context.Context, in *ListAppTemplateSetsReq, opts ...grpc.CallOption) (*ListAppTemplateSetsResp, error) {
	out := new(ListAppTemplateSetsResp)
	err := c.cc.Invoke(ctx, Config_ListAppTemplateSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateSetsByIDs(ctx context.Context, in *ListTemplateSetsByIDsReq, opts ...grpc.CallOption) (*ListTemplateSetsByIDsResp, error) {
	out := new(ListTemplateSetsByIDsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateSetsByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateSetsOfBiz(ctx context.Context, in *ListTemplateSetsOfBizReq, opts ...grpc.CallOption) (*ListTemplateSetsOfBizResp, error) {
	out := new(ListTemplateSetsOfBizResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateSetsOfBiz_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateAppTemplateBinding(ctx context.Context, in *CreateAppTemplateBindingReq, opts ...grpc.CallOption) (*CreateAppTemplateBindingResp, error) {
	out := new(CreateAppTemplateBindingResp)
	err := c.cc.Invoke(ctx, Config_CreateAppTemplateBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteAppTemplateBinding(ctx context.Context, in *DeleteAppTemplateBindingReq, opts ...grpc.CallOption) (*DeleteAppTemplateBindingResp, error) {
	out := new(DeleteAppTemplateBindingResp)
	err := c.cc.Invoke(ctx, Config_DeleteAppTemplateBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateAppTemplateBinding(ctx context.Context, in *UpdateAppTemplateBindingReq, opts ...grpc.CallOption) (*UpdateAppTemplateBindingResp, error) {
	out := new(UpdateAppTemplateBindingResp)
	err := c.cc.Invoke(ctx, Config_UpdateAppTemplateBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListAppTemplateBindings(ctx context.Context, in *ListAppTemplateBindingsReq, opts ...grpc.CallOption) (*ListAppTemplateBindingsResp, error) {
	out := new(ListAppTemplateBindingsResp)
	err := c.cc.Invoke(ctx, Config_ListAppTemplateBindings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListAppBoundTemplateRevisions(ctx context.Context, in *ListAppBoundTemplateRevisionsReq, opts ...grpc.CallOption) (*ListAppBoundTemplateRevisionsResp, error) {
	out := new(ListAppBoundTemplateRevisionsResp)
	err := c.cc.Invoke(ctx, Config_ListAppBoundTemplateRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListReleasedAppBoundTemplateRevisions(ctx context.Context, in *ListReleasedAppBoundTemplateRevisionsReq, opts ...grpc.CallOption) (*ListReleasedAppBoundTemplateRevisionsResp, error) {
	out := new(ListReleasedAppBoundTemplateRevisionsResp)
	err := c.cc.Invoke(ctx, Config_ListReleasedAppBoundTemplateRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateAppBoundTemplateRevisions(ctx context.Context, in *UpdateAppBoundTemplateRevisionsReq, opts ...grpc.CallOption) (*UpdateAppBoundTemplateRevisionsResp, error) {
	out := new(UpdateAppBoundTemplateRevisionsResp)
	err := c.cc.Invoke(ctx, Config_UpdateAppBoundTemplateRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteAppBoundTemplateSets(ctx context.Context, in *DeleteAppBoundTemplateSetsReq, opts ...grpc.CallOption) (*DeleteAppBoundTemplateSetsResp, error) {
	out := new(DeleteAppBoundTemplateSetsResp)
	err := c.cc.Invoke(ctx, Config_DeleteAppBoundTemplateSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CheckAppTemplateBinding(ctx context.Context, in *CheckAppTemplateBindingReq, opts ...grpc.CallOption) (*CheckAppTemplateBindingResp, error) {
	out := new(CheckAppTemplateBindingResp)
	err := c.cc.Invoke(ctx, Config_CheckAppTemplateBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateBoundCounts(ctx context.Context, in *ListTemplateBoundCountsReq, opts ...grpc.CallOption) (*ListTemplateBoundCountsResp, error) {
	out := new(ListTemplateBoundCountsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateBoundCounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateRevisionBoundCounts(ctx context.Context, in *ListTemplateRevisionBoundCountsReq, opts ...grpc.CallOption) (*ListTemplateRevisionBoundCountsResp, error) {
	out := new(ListTemplateRevisionBoundCountsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateRevisionBoundCounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateSetBoundCounts(ctx context.Context, in *ListTemplateSetBoundCountsReq, opts ...grpc.CallOption) (*ListTemplateSetBoundCountsResp, error) {
	out := new(ListTemplateSetBoundCountsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateSetBoundCounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateBoundUnnamedAppDetails(ctx context.Context, in *ListTemplateBoundUnnamedAppDetailsReq, opts ...grpc.CallOption) (*ListTemplateBoundUnnamedAppDetailsResp, error) {
	out := new(ListTemplateBoundUnnamedAppDetailsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateBoundUnnamedAppDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateBoundNamedAppDetails(ctx context.Context, in *ListTemplateBoundNamedAppDetailsReq, opts ...grpc.CallOption) (*ListTemplateBoundNamedAppDetailsResp, error) {
	out := new(ListTemplateBoundNamedAppDetailsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateBoundNamedAppDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateBoundTemplateSetDetails(ctx context.Context, in *ListTemplateBoundTemplateSetDetailsReq, opts ...grpc.CallOption) (*ListTemplateBoundTemplateSetDetailsResp, error) {
	out := new(ListTemplateBoundTemplateSetDetailsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateBoundTemplateSetDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListMultiTemplateBoundTemplateSetDetails(ctx context.Context, in *ListMultiTemplateBoundTemplateSetDetailsReq, opts ...grpc.CallOption) (*ListMultiTemplateBoundTemplateSetDetailsResp, error) {
	out := new(ListMultiTemplateBoundTemplateSetDetailsResp)
	err := c.cc.Invoke(ctx, Config_ListMultiTemplateBoundTemplateSetDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateRevisionBoundUnnamedAppDetails(ctx context.Context, in *ListTemplateRevisionBoundUnnamedAppDetailsReq, opts ...grpc.CallOption) (*ListTemplateRevisionBoundUnnamedAppDetailsResp, error) {
	out := new(ListTemplateRevisionBoundUnnamedAppDetailsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateRevisionBoundUnnamedAppDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateRevisionBoundNamedAppDetails(ctx context.Context, in *ListTemplateRevisionBoundNamedAppDetailsReq, opts ...grpc.CallOption) (*ListTemplateRevisionBoundNamedAppDetailsResp, error) {
	out := new(ListTemplateRevisionBoundNamedAppDetailsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateRevisionBoundNamedAppDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateSetBoundUnnamedAppDetails(ctx context.Context, in *ListTemplateSetBoundUnnamedAppDetailsReq, opts ...grpc.CallOption) (*ListTemplateSetBoundUnnamedAppDetailsResp, error) {
	out := new(ListTemplateSetBoundUnnamedAppDetailsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateSetBoundUnnamedAppDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListMultiTemplateSetBoundUnnamedAppDetails(ctx context.Context, in *ListMultiTemplateSetBoundUnnamedAppDetailsReq, opts ...grpc.CallOption) (*ListMultiTemplateSetBoundUnnamedAppDetailsResp, error) {
	out := new(ListMultiTemplateSetBoundUnnamedAppDetailsResp)
	err := c.cc.Invoke(ctx, Config_ListMultiTemplateSetBoundUnnamedAppDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateSetBoundNamedAppDetails(ctx context.Context, in *ListTemplateSetBoundNamedAppDetailsReq, opts ...grpc.CallOption) (*ListTemplateSetBoundNamedAppDetailsResp, error) {
	out := new(ListTemplateSetBoundNamedAppDetailsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateSetBoundNamedAppDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListLatestTemplateBoundUnnamedAppDetails(ctx context.Context, in *ListLatestTemplateBoundUnnamedAppDetailsReq, opts ...grpc.CallOption) (*ListLatestTemplateBoundUnnamedAppDetailsResp, error) {
	out := new(ListLatestTemplateBoundUnnamedAppDetailsResp)
	err := c.cc.Invoke(ctx, Config_ListLatestTemplateBoundUnnamedAppDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateTemplateVariable(ctx context.Context, in *CreateTemplateVariableReq, opts ...grpc.CallOption) (*CreateTemplateVariableResp, error) {
	out := new(CreateTemplateVariableResp)
	err := c.cc.Invoke(ctx, Config_CreateTemplateVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteTemplateVariable(ctx context.Context, in *DeleteTemplateVariableReq, opts ...grpc.CallOption) (*DeleteTemplateVariableResp, error) {
	out := new(DeleteTemplateVariableResp)
	err := c.cc.Invoke(ctx, Config_DeleteTemplateVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateTemplateVariable(ctx context.Context, in *UpdateTemplateVariableReq, opts ...grpc.CallOption) (*UpdateTemplateVariableResp, error) {
	out := new(UpdateTemplateVariableResp)
	err := c.cc.Invoke(ctx, Config_UpdateTemplateVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateVariables(ctx context.Context, in *ListTemplateVariablesReq, opts ...grpc.CallOption) (*ListTemplateVariablesResp, error) {
	out := new(ListTemplateVariablesResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ExtractAppTemplateVariables(ctx context.Context, in *ExtractAppTemplateVariablesReq, opts ...grpc.CallOption) (*ExtractAppTemplateVariablesResp, error) {
	out := new(ExtractAppTemplateVariablesResp)
	err := c.cc.Invoke(ctx, Config_ExtractAppTemplateVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetAppTemplateVariableReferences(ctx context.Context, in *GetAppTemplateVariableReferencesReq, opts ...grpc.CallOption) (*GetAppTemplateVariableReferencesResp, error) {
	out := new(GetAppTemplateVariableReferencesResp)
	err := c.cc.Invoke(ctx, Config_GetAppTemplateVariableReferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetReleasedAppTemplateVariableReferences(ctx context.Context, in *GetReleasedAppTemplateVariableReferencesReq, opts ...grpc.CallOption) (*GetReleasedAppTemplateVariableReferencesResp, error) {
	out := new(GetReleasedAppTemplateVariableReferencesResp)
	err := c.cc.Invoke(ctx, Config_GetReleasedAppTemplateVariableReferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateAppTemplateVariables(ctx context.Context, in *UpdateAppTemplateVariablesReq, opts ...grpc.CallOption) (*UpdateAppTemplateVariablesResp, error) {
	out := new(UpdateAppTemplateVariablesResp)
	err := c.cc.Invoke(ctx, Config_UpdateAppTemplateVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListAppTemplateVariables(ctx context.Context, in *ListAppTemplateVariablesReq, opts ...grpc.CallOption) (*ListAppTemplateVariablesResp, error) {
	out := new(ListAppTemplateVariablesResp)
	err := c.cc.Invoke(ctx, Config_ListAppTemplateVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListReleasedAppTemplateVariables(ctx context.Context, in *ListReleasedAppTemplateVariablesReq, opts ...grpc.CallOption) (*ListReleasedAppTemplateVariablesResp, error) {
	out := new(ListReleasedAppTemplateVariablesResp)
	err := c.cc.Invoke(ctx, Config_ListReleasedAppTemplateVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error) {
	out := new(CreateGroupResp)
	err := c.cc.Invoke(ctx, Config_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupResp, error) {
	out := new(DeleteGroupResp)
	err := c.cc.Invoke(ctx, Config_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupResp, error) {
	out := new(UpdateGroupResp)
	err := c.cc.Invoke(ctx, Config_UpdateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListAllGroups(ctx context.Context, in *ListAllGroupsReq, opts ...grpc.CallOption) (*ListAllGroupsResp, error) {
	out := new(ListAllGroupsResp)
	err := c.cc.Invoke(ctx, Config_ListAllGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListAppGroups(ctx context.Context, in *ListAppGroupsReq, opts ...grpc.CallOption) (*ListAppGroupsResp, error) {
	out := new(ListAppGroupsResp)
	err := c.cc.Invoke(ctx, Config_ListAppGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListGroupReleasedApps(ctx context.Context, in *ListGroupReleasedAppsReq, opts ...grpc.CallOption) (*ListGroupReleasedAppsResp, error) {
	out := new(ListGroupReleasedAppsResp)
	err := c.cc.Invoke(ctx, Config_ListGroupReleasedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetGroupByName(ctx context.Context, in *GetGroupByNameReq, opts ...grpc.CallOption) (*group.Group, error) {
	out := new(group.Group)
	err := c.cc.Invoke(ctx, Config_GetGroupByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishResp, error) {
	out := new(PublishResp)
	err := c.cc.Invoke(ctx, Config_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GenerateReleaseAndPublish(ctx context.Context, in *GenerateReleaseAndPublishReq, opts ...grpc.CallOption) (*PublishResp, error) {
	out := new(PublishResp)
	err := c.cc.Invoke(ctx, Config_GenerateReleaseAndPublish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateCredentials(ctx context.Context, in *CreateCredentialReq, opts ...grpc.CallOption) (*CreateCredentialResp, error) {
	out := new(CreateCredentialResp)
	err := c.cc.Invoke(ctx, Config_CreateCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListCredentials(ctx context.Context, in *ListCredentialsReq, opts ...grpc.CallOption) (*ListCredentialsResp, error) {
	out := new(ListCredentialsResp)
	err := c.cc.Invoke(ctx, Config_ListCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteCredential(ctx context.Context, in *DeleteCredentialsReq, opts ...grpc.CallOption) (*DeleteCredentialsResp, error) {
	out := new(DeleteCredentialsResp)
	err := c.cc.Invoke(ctx, Config_DeleteCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateCredential(ctx context.Context, in *UpdateCredentialsReq, opts ...grpc.CallOption) (*UpdateCredentialsResp, error) {
	out := new(UpdateCredentialsResp)
	err := c.cc.Invoke(ctx, Config_UpdateCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListCredentialScopes(ctx context.Context, in *ListCredentialScopesReq, opts ...grpc.CallOption) (*ListCredentialScopesResp, error) {
	out := new(ListCredentialScopesResp)
	err := c.cc.Invoke(ctx, Config_ListCredentialScopes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateCredentialScope(ctx context.Context, in *UpdateCredentialScopeReq, opts ...grpc.CallOption) (*UpdateCredentialScopeResp, error) {
	out := new(UpdateCredentialScopeResp)
	err := c.cc.Invoke(ctx, Config_UpdateCredentialScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServer is the server API for Config service.
// All implementations should embed UnimplementedConfigServer
// for forward compatibility
type ConfigServer interface {
	CreateApp(context.Context, *CreateAppReq) (*CreateAppResp, error)
	UpdateApp(context.Context, *UpdateAppReq) (*UpdateAppResp, error)
	DeleteApp(context.Context, *DeleteAppReq) (*DeleteAppResp, error)
	GetApp(context.Context, *GetAppReq) (*app.App, error)
	GetAppByName(context.Context, *GetAppByNameReq) (*app.App, error)
	// 获取用户有权限的 spaces 所有的 apps
	ListAppsRest(context.Context, *ListAppsRestReq) (*ListAppsResp, error)
	// 按 space 查询 app 信息
	ListAppsBySpaceRest(context.Context, *ListAppsBySpaceRestReq) (*ListAppsResp, error)
	CreateConfigItem(context.Context, *CreateConfigItemReq) (*CreateConfigItemResp, error)
	BatchUpsertConfigItems(context.Context, *BatchUpsertConfigItemsReq) (*BatchUpsertConfigItemsResp, error)
	UpdateConfigItem(context.Context, *UpdateConfigItemReq) (*UpdateConfigItemResp, error)
	DeleteConfigItem(context.Context, *DeleteConfigItemReq) (*DeleteConfigItemResp, error)
	GetConfigItem(context.Context, *GetConfigItemReq) (*GetConfigItemResp, error)
	ListConfigItems(context.Context, *ListConfigItemsReq) (*ListConfigItemsResp, error)
	ListConfigItemCount(context.Context, *ListConfigItemCountReq) (*ListConfigItemCountResp, error)
	UpdateConfigHook(context.Context, *UpdateConfigHookReq) (*UpdateConfigHookResp, error)
	CreateRelease(context.Context, *CreateReleaseReq) (*CreateReleaseResp, error)
	ListReleases(context.Context, *ListReleasesReq) (*ListReleasesResp, error)
	GetReleaseByName(context.Context, *GetReleaseByNameReq) (*release.Release, error)
	CreateHook(context.Context, *CreateHookReq) (*CreateHookResp, error)
	DeleteHook(context.Context, *DeleteHookReq) (*DeleteHookResp, error)
	ListHooks(context.Context, *ListHooksReq) (*ListHooksResp, error)
	ListHookTags(context.Context, *ListHookTagsReq) (*ListHookTagsResp, error)
	GetHook(context.Context, *GetHookReq) (*GetHookResp, error)
	CreateHookRevision(context.Context, *CreateHookRevisionReq) (*CreateHookRevisionResp, error)
	ListHookRevisions(context.Context, *ListHookRevisionsReq) (*ListHookRevisionsResp, error)
	DeleteHookRevision(context.Context, *DeleteHookRevisionReq) (*DeleteHookRevisionResp, error)
	PublishHookRevision(context.Context, *PublishHookRevisionReq) (*PublishHookRevisionResp, error)
	GetHookRevision(context.Context, *GetHookRevisionReq) (*hook_revision.HookRevision, error)
	UpdateHookRevision(context.Context, *UpdateHookRevisionReq) (*UpdateHookRevisionResp, error)
	ListHookReferences(context.Context, *ListHookReferencesReq) (*ListHookReferencesResp, error)
	ListHookRevisionReferences(context.Context, *ListHookRevisionReferencesReq) (*ListHookRevisionReferencesResp, error)
	GetReleaseHook(context.Context, *GetReleaseHookReq) (*GetReleaseHookResp, error)
	CreateTemplateSpace(context.Context, *CreateTemplateSpaceReq) (*CreateTemplateSpaceResp, error)
	DeleteTemplateSpace(context.Context, *DeleteTemplateSpaceReq) (*DeleteTemplateSpaceResp, error)
	UpdateTemplateSpace(context.Context, *UpdateTemplateSpaceReq) (*UpdateTemplateSpaceResp, error)
	ListTemplateSpaces(context.Context, *ListTemplateSpacesReq) (*ListTemplateSpacesResp, error)
	// GetAllBizsOfTemplateSpaces called only by system itself
	GetAllBizsOfTemplateSpaces(context.Context, *base.EmptyReq) (*GetAllBizsOfTemplateSpacesResp, error)
	// CreateDefaultTemplateSpace called only by system itself
	CreateDefaultTemplateSpace(context.Context, *CreateDefaultTemplateSpaceReq) (*CreateDefaultTemplateSpaceResp, error)
	ListTemplateSpacesByIDs(context.Context, *ListTemplateSpacesByIDsReq) (*ListTemplateSpacesByIDsResp, error)
	CreateTemplate(context.Context, *CreateTemplateReq) (*CreateTemplateResp, error)
	DeleteTemplate(context.Context, *DeleteTemplateReq) (*DeleteTemplateResp, error)
	BatchDeleteTemplate(context.Context, *BatchDeleteTemplateReq) (*BatchDeleteTemplateResp, error)
	UpdateTemplate(context.Context, *UpdateTemplateReq) (*UpdateTemplateResp, error)
	ListTemplates(context.Context, *ListTemplatesReq) (*ListTemplatesResp, error)
	AddTemplatesToTemplateSets(context.Context, *AddTemplatesToTemplateSetsReq) (*AddTemplatesToTemplateSetsResp, error)
	DeleteTemplatesFromTemplateSets(context.Context, *DeleteTemplatesFromTemplateSetsReq) (*DeleteTemplatesFromTemplateSetsResp, error)
	ListTemplatesByIDs(context.Context, *ListTemplatesByIDsReq) (*ListTemplatesByIDsResp, error)
	ListTemplatesNotBound(context.Context, *ListTemplatesNotBoundReq) (*ListTemplatesNotBoundResp, error)
	ListTemplatesOfTemplateSet(context.Context, *ListTemplatesOfTemplateSetReq) (*ListTemplatesOfTemplateSetResp, error)
	CreateTemplateRevision(context.Context, *CreateTemplateRevisionReq) (*CreateTemplateRevisionResp, error)
	ListTemplateRevisions(context.Context, *ListTemplateRevisionsReq) (*ListTemplateRevisionsResp, error)
	// 暂时不对外开发（删除模版后，服务引用的latest版本会回退到上一个老版本）
	//rpc DeleteTemplateRevision(DeleteTemplateRevisionReq) returns (DeleteTemplateRevisionResp) {
	//option (google.api.http) = {
	//delete : "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/templates/{template_id}/template_revisions/{template_revision_id}"
	//};
	//}
	ListTemplateRevisionsByIDs(context.Context, *ListTemplateRevisionsByIDsReq) (*ListTemplateRevisionsByIDsResp, error)
	ListTemplateRevisionNamesByTemplateIDs(context.Context, *ListTemplateRevisionNamesByTemplateIDsReq) (*ListTemplateRevisionNamesByTemplateIDsResp, error)
	CreateTemplateSet(context.Context, *CreateTemplateSetReq) (*CreateTemplateSetResp, error)
	DeleteTemplateSet(context.Context, *DeleteTemplateSetReq) (*DeleteTemplateSetResp, error)
	UpdateTemplateSet(context.Context, *UpdateTemplateSetReq) (*UpdateTemplateSetResp, error)
	ListTemplateSets(context.Context, *ListTemplateSetsReq) (*ListTemplateSetsResp, error)
	ListAppTemplateSets(context.Context, *ListAppTemplateSetsReq) (*ListAppTemplateSetsResp, error)
	ListTemplateSetsByIDs(context.Context, *ListTemplateSetsByIDsReq) (*ListTemplateSetsByIDsResp, error)
	ListTemplateSetsOfBiz(context.Context, *ListTemplateSetsOfBizReq) (*ListTemplateSetsOfBizResp, error)
	CreateAppTemplateBinding(context.Context, *CreateAppTemplateBindingReq) (*CreateAppTemplateBindingResp, error)
	DeleteAppTemplateBinding(context.Context, *DeleteAppTemplateBindingReq) (*DeleteAppTemplateBindingResp, error)
	UpdateAppTemplateBinding(context.Context, *UpdateAppTemplateBindingReq) (*UpdateAppTemplateBindingResp, error)
	ListAppTemplateBindings(context.Context, *ListAppTemplateBindingsReq) (*ListAppTemplateBindingsResp, error)
	ListAppBoundTemplateRevisions(context.Context, *ListAppBoundTemplateRevisionsReq) (*ListAppBoundTemplateRevisionsResp, error)
	ListReleasedAppBoundTemplateRevisions(context.Context, *ListReleasedAppBoundTemplateRevisionsReq) (*ListReleasedAppBoundTemplateRevisionsResp, error)
	UpdateAppBoundTemplateRevisions(context.Context, *UpdateAppBoundTemplateRevisionsReq) (*UpdateAppBoundTemplateRevisionsResp, error)
	DeleteAppBoundTemplateSets(context.Context, *DeleteAppBoundTemplateSetsReq) (*DeleteAppBoundTemplateSetsResp, error)
	CheckAppTemplateBinding(context.Context, *CheckAppTemplateBindingReq) (*CheckAppTemplateBindingResp, error)
	ListTemplateBoundCounts(context.Context, *ListTemplateBoundCountsReq) (*ListTemplateBoundCountsResp, error)
	ListTemplateRevisionBoundCounts(context.Context, *ListTemplateRevisionBoundCountsReq) (*ListTemplateRevisionBoundCountsResp, error)
	ListTemplateSetBoundCounts(context.Context, *ListTemplateSetBoundCountsReq) (*ListTemplateSetBoundCountsResp, error)
	ListTemplateBoundUnnamedAppDetails(context.Context, *ListTemplateBoundUnnamedAppDetailsReq) (*ListTemplateBoundUnnamedAppDetailsResp, error)
	ListTemplateBoundNamedAppDetails(context.Context, *ListTemplateBoundNamedAppDetailsReq) (*ListTemplateBoundNamedAppDetailsResp, error)
	ListTemplateBoundTemplateSetDetails(context.Context, *ListTemplateBoundTemplateSetDetailsReq) (*ListTemplateBoundTemplateSetDetailsResp, error)
	ListMultiTemplateBoundTemplateSetDetails(context.Context, *ListMultiTemplateBoundTemplateSetDetailsReq) (*ListMultiTemplateBoundTemplateSetDetailsResp, error)
	ListTemplateRevisionBoundUnnamedAppDetails(context.Context, *ListTemplateRevisionBoundUnnamedAppDetailsReq) (*ListTemplateRevisionBoundUnnamedAppDetailsResp, error)
	ListTemplateRevisionBoundNamedAppDetails(context.Context, *ListTemplateRevisionBoundNamedAppDetailsReq) (*ListTemplateRevisionBoundNamedAppDetailsResp, error)
	ListTemplateSetBoundUnnamedAppDetails(context.Context, *ListTemplateSetBoundUnnamedAppDetailsReq) (*ListTemplateSetBoundUnnamedAppDetailsResp, error)
	ListMultiTemplateSetBoundUnnamedAppDetails(context.Context, *ListMultiTemplateSetBoundUnnamedAppDetailsReq) (*ListMultiTemplateSetBoundUnnamedAppDetailsResp, error)
	ListTemplateSetBoundNamedAppDetails(context.Context, *ListTemplateSetBoundNamedAppDetailsReq) (*ListTemplateSetBoundNamedAppDetailsResp, error)
	ListLatestTemplateBoundUnnamedAppDetails(context.Context, *ListLatestTemplateBoundUnnamedAppDetailsReq) (*ListLatestTemplateBoundUnnamedAppDetailsResp, error)
	CreateTemplateVariable(context.Context, *CreateTemplateVariableReq) (*CreateTemplateVariableResp, error)
	DeleteTemplateVariable(context.Context, *DeleteTemplateVariableReq) (*DeleteTemplateVariableResp, error)
	UpdateTemplateVariable(context.Context, *UpdateTemplateVariableReq) (*UpdateTemplateVariableResp, error)
	ListTemplateVariables(context.Context, *ListTemplateVariablesReq) (*ListTemplateVariablesResp, error)
	ExtractAppTemplateVariables(context.Context, *ExtractAppTemplateVariablesReq) (*ExtractAppTemplateVariablesResp, error)
	GetAppTemplateVariableReferences(context.Context, *GetAppTemplateVariableReferencesReq) (*GetAppTemplateVariableReferencesResp, error)
	GetReleasedAppTemplateVariableReferences(context.Context, *GetReleasedAppTemplateVariableReferencesReq) (*GetReleasedAppTemplateVariableReferencesResp, error)
	UpdateAppTemplateVariables(context.Context, *UpdateAppTemplateVariablesReq) (*UpdateAppTemplateVariablesResp, error)
	ListAppTemplateVariables(context.Context, *ListAppTemplateVariablesReq) (*ListAppTemplateVariablesResp, error)
	ListReleasedAppTemplateVariables(context.Context, *ListReleasedAppTemplateVariablesReq) (*ListReleasedAppTemplateVariablesResp, error)
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error)
	DeleteGroup(context.Context, *DeleteGroupReq) (*DeleteGroupResp, error)
	UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupResp, error)
	ListAllGroups(context.Context, *ListAllGroupsReq) (*ListAllGroupsResp, error)
	ListAppGroups(context.Context, *ListAppGroupsReq) (*ListAppGroupsResp, error)
	ListGroupReleasedApps(context.Context, *ListGroupReleasedAppsReq) (*ListGroupReleasedAppsResp, error)
	GetGroupByName(context.Context, *GetGroupByNameReq) (*group.Group, error)
	Publish(context.Context, *PublishReq) (*PublishResp, error)
	GenerateReleaseAndPublish(context.Context, *GenerateReleaseAndPublishReq) (*PublishResp, error)
	CreateCredentials(context.Context, *CreateCredentialReq) (*CreateCredentialResp, error)
	ListCredentials(context.Context, *ListCredentialsReq) (*ListCredentialsResp, error)
	DeleteCredential(context.Context, *DeleteCredentialsReq) (*DeleteCredentialsResp, error)
	UpdateCredential(context.Context, *UpdateCredentialsReq) (*UpdateCredentialsResp, error)
	ListCredentialScopes(context.Context, *ListCredentialScopesReq) (*ListCredentialScopesResp, error)
	UpdateCredentialScope(context.Context, *UpdateCredentialScopeReq) (*UpdateCredentialScopeResp, error)
}

// UnimplementedConfigServer should be embedded to have forward compatible implementations.
type UnimplementedConfigServer struct {
}

func (UnimplementedConfigServer) CreateApp(context.Context, *CreateAppReq) (*CreateAppResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedConfigServer) UpdateApp(context.Context, *UpdateAppReq) (*UpdateAppResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedConfigServer) DeleteApp(context.Context, *DeleteAppReq) (*DeleteAppResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedConfigServer) GetApp(context.Context, *GetAppReq) (*app.App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApp not implemented")
}
func (UnimplementedConfigServer) GetAppByName(context.Context, *GetAppByNameReq) (*app.App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppByName not implemented")
}
func (UnimplementedConfigServer) ListAppsRest(context.Context, *ListAppsRestReq) (*ListAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppsRest not implemented")
}
func (UnimplementedConfigServer) ListAppsBySpaceRest(context.Context, *ListAppsBySpaceRestReq) (*ListAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppsBySpaceRest not implemented")
}
func (UnimplementedConfigServer) CreateConfigItem(context.Context, *CreateConfigItemReq) (*CreateConfigItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfigItem not implemented")
}
func (UnimplementedConfigServer) BatchUpsertConfigItems(context.Context, *BatchUpsertConfigItemsReq) (*BatchUpsertConfigItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpsertConfigItems not implemented")
}
func (UnimplementedConfigServer) UpdateConfigItem(context.Context, *UpdateConfigItemReq) (*UpdateConfigItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigItem not implemented")
}
func (UnimplementedConfigServer) DeleteConfigItem(context.Context, *DeleteConfigItemReq) (*DeleteConfigItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigItem not implemented")
}
func (UnimplementedConfigServer) GetConfigItem(context.Context, *GetConfigItemReq) (*GetConfigItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigItem not implemented")
}
func (UnimplementedConfigServer) ListConfigItems(context.Context, *ListConfigItemsReq) (*ListConfigItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigItems not implemented")
}
func (UnimplementedConfigServer) ListConfigItemCount(context.Context, *ListConfigItemCountReq) (*ListConfigItemCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigItemCount not implemented")
}
func (UnimplementedConfigServer) UpdateConfigHook(context.Context, *UpdateConfigHookReq) (*UpdateConfigHookResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigHook not implemented")
}
func (UnimplementedConfigServer) CreateRelease(context.Context, *CreateReleaseReq) (*CreateReleaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelease not implemented")
}
func (UnimplementedConfigServer) ListReleases(context.Context, *ListReleasesReq) (*ListReleasesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleases not implemented")
}
func (UnimplementedConfigServer) GetReleaseByName(context.Context, *GetReleaseByNameReq) (*release.Release, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleaseByName not implemented")
}
func (UnimplementedConfigServer) CreateHook(context.Context, *CreateHookReq) (*CreateHookResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHook not implemented")
}
func (UnimplementedConfigServer) DeleteHook(context.Context, *DeleteHookReq) (*DeleteHookResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHook not implemented")
}
func (UnimplementedConfigServer) ListHooks(context.Context, *ListHooksReq) (*ListHooksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHooks not implemented")
}
func (UnimplementedConfigServer) ListHookTags(context.Context, *ListHookTagsReq) (*ListHookTagsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHookTags not implemented")
}
func (UnimplementedConfigServer) GetHook(context.Context, *GetHookReq) (*GetHookResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHook not implemented")
}
func (UnimplementedConfigServer) CreateHookRevision(context.Context, *CreateHookRevisionReq) (*CreateHookRevisionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHookRevision not implemented")
}
func (UnimplementedConfigServer) ListHookRevisions(context.Context, *ListHookRevisionsReq) (*ListHookRevisionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHookRevisions not implemented")
}
func (UnimplementedConfigServer) DeleteHookRevision(context.Context, *DeleteHookRevisionReq) (*DeleteHookRevisionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHookRevision not implemented")
}
func (UnimplementedConfigServer) PublishHookRevision(context.Context, *PublishHookRevisionReq) (*PublishHookRevisionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishHookRevision not implemented")
}
func (UnimplementedConfigServer) GetHookRevision(context.Context, *GetHookRevisionReq) (*hook_revision.HookRevision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHookRevision not implemented")
}
func (UnimplementedConfigServer) UpdateHookRevision(context.Context, *UpdateHookRevisionReq) (*UpdateHookRevisionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHookRevision not implemented")
}
func (UnimplementedConfigServer) ListHookReferences(context.Context, *ListHookReferencesReq) (*ListHookReferencesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHookReferences not implemented")
}
func (UnimplementedConfigServer) ListHookRevisionReferences(context.Context, *ListHookRevisionReferencesReq) (*ListHookRevisionReferencesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHookRevisionReferences not implemented")
}
func (UnimplementedConfigServer) GetReleaseHook(context.Context, *GetReleaseHookReq) (*GetReleaseHookResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleaseHook not implemented")
}
func (UnimplementedConfigServer) CreateTemplateSpace(context.Context, *CreateTemplateSpaceReq) (*CreateTemplateSpaceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplateSpace not implemented")
}
func (UnimplementedConfigServer) DeleteTemplateSpace(context.Context, *DeleteTemplateSpaceReq) (*DeleteTemplateSpaceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplateSpace not implemented")
}
func (UnimplementedConfigServer) UpdateTemplateSpace(context.Context, *UpdateTemplateSpaceReq) (*UpdateTemplateSpaceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplateSpace not implemented")
}
func (UnimplementedConfigServer) ListTemplateSpaces(context.Context, *ListTemplateSpacesReq) (*ListTemplateSpacesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateSpaces not implemented")
}
func (UnimplementedConfigServer) GetAllBizsOfTemplateSpaces(context.Context, *base.EmptyReq) (*GetAllBizsOfTemplateSpacesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBizsOfTemplateSpaces not implemented")
}
func (UnimplementedConfigServer) CreateDefaultTemplateSpace(context.Context, *CreateDefaultTemplateSpaceReq) (*CreateDefaultTemplateSpaceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDefaultTemplateSpace not implemented")
}
func (UnimplementedConfigServer) ListTemplateSpacesByIDs(context.Context, *ListTemplateSpacesByIDsReq) (*ListTemplateSpacesByIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateSpacesByIDs not implemented")
}
func (UnimplementedConfigServer) CreateTemplate(context.Context, *CreateTemplateReq) (*CreateTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (UnimplementedConfigServer) DeleteTemplate(context.Context, *DeleteTemplateReq) (*DeleteTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (UnimplementedConfigServer) BatchDeleteTemplate(context.Context, *BatchDeleteTemplateReq) (*BatchDeleteTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteTemplate not implemented")
}
func (UnimplementedConfigServer) UpdateTemplate(context.Context, *UpdateTemplateReq) (*UpdateTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (UnimplementedConfigServer) ListTemplates(context.Context, *ListTemplatesReq) (*ListTemplatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedConfigServer) AddTemplatesToTemplateSets(context.Context, *AddTemplatesToTemplateSetsReq) (*AddTemplatesToTemplateSetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTemplatesToTemplateSets not implemented")
}
func (UnimplementedConfigServer) DeleteTemplatesFromTemplateSets(context.Context, *DeleteTemplatesFromTemplateSetsReq) (*DeleteTemplatesFromTemplateSetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplatesFromTemplateSets not implemented")
}
func (UnimplementedConfigServer) ListTemplatesByIDs(context.Context, *ListTemplatesByIDsReq) (*ListTemplatesByIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplatesByIDs not implemented")
}
func (UnimplementedConfigServer) ListTemplatesNotBound(context.Context, *ListTemplatesNotBoundReq) (*ListTemplatesNotBoundResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplatesNotBound not implemented")
}
func (UnimplementedConfigServer) ListTemplatesOfTemplateSet(context.Context, *ListTemplatesOfTemplateSetReq) (*ListTemplatesOfTemplateSetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplatesOfTemplateSet not implemented")
}
func (UnimplementedConfigServer) CreateTemplateRevision(context.Context, *CreateTemplateRevisionReq) (*CreateTemplateRevisionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplateRevision not implemented")
}
func (UnimplementedConfigServer) ListTemplateRevisions(context.Context, *ListTemplateRevisionsReq) (*ListTemplateRevisionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateRevisions not implemented")
}
func (UnimplementedConfigServer) ListTemplateRevisionsByIDs(context.Context, *ListTemplateRevisionsByIDsReq) (*ListTemplateRevisionsByIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateRevisionsByIDs not implemented")
}
func (UnimplementedConfigServer) ListTemplateRevisionNamesByTemplateIDs(context.Context, *ListTemplateRevisionNamesByTemplateIDsReq) (*ListTemplateRevisionNamesByTemplateIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateRevisionNamesByTemplateIDs not implemented")
}
func (UnimplementedConfigServer) CreateTemplateSet(context.Context, *CreateTemplateSetReq) (*CreateTemplateSetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplateSet not implemented")
}
func (UnimplementedConfigServer) DeleteTemplateSet(context.Context, *DeleteTemplateSetReq) (*DeleteTemplateSetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplateSet not implemented")
}
func (UnimplementedConfigServer) UpdateTemplateSet(context.Context, *UpdateTemplateSetReq) (*UpdateTemplateSetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplateSet not implemented")
}
func (UnimplementedConfigServer) ListTemplateSets(context.Context, *ListTemplateSetsReq) (*ListTemplateSetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateSets not implemented")
}
func (UnimplementedConfigServer) ListAppTemplateSets(context.Context, *ListAppTemplateSetsReq) (*ListAppTemplateSetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppTemplateSets not implemented")
}
func (UnimplementedConfigServer) ListTemplateSetsByIDs(context.Context, *ListTemplateSetsByIDsReq) (*ListTemplateSetsByIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateSetsByIDs not implemented")
}
func (UnimplementedConfigServer) ListTemplateSetsOfBiz(context.Context, *ListTemplateSetsOfBizReq) (*ListTemplateSetsOfBizResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateSetsOfBiz not implemented")
}
func (UnimplementedConfigServer) CreateAppTemplateBinding(context.Context, *CreateAppTemplateBindingReq) (*CreateAppTemplateBindingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppTemplateBinding not implemented")
}
func (UnimplementedConfigServer) DeleteAppTemplateBinding(context.Context, *DeleteAppTemplateBindingReq) (*DeleteAppTemplateBindingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppTemplateBinding not implemented")
}
func (UnimplementedConfigServer) UpdateAppTemplateBinding(context.Context, *UpdateAppTemplateBindingReq) (*UpdateAppTemplateBindingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppTemplateBinding not implemented")
}
func (UnimplementedConfigServer) ListAppTemplateBindings(context.Context, *ListAppTemplateBindingsReq) (*ListAppTemplateBindingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppTemplateBindings not implemented")
}
func (UnimplementedConfigServer) ListAppBoundTemplateRevisions(context.Context, *ListAppBoundTemplateRevisionsReq) (*ListAppBoundTemplateRevisionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppBoundTemplateRevisions not implemented")
}
func (UnimplementedConfigServer) ListReleasedAppBoundTemplateRevisions(context.Context, *ListReleasedAppBoundTemplateRevisionsReq) (*ListReleasedAppBoundTemplateRevisionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleasedAppBoundTemplateRevisions not implemented")
}
func (UnimplementedConfigServer) UpdateAppBoundTemplateRevisions(context.Context, *UpdateAppBoundTemplateRevisionsReq) (*UpdateAppBoundTemplateRevisionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppBoundTemplateRevisions not implemented")
}
func (UnimplementedConfigServer) DeleteAppBoundTemplateSets(context.Context, *DeleteAppBoundTemplateSetsReq) (*DeleteAppBoundTemplateSetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppBoundTemplateSets not implemented")
}
func (UnimplementedConfigServer) CheckAppTemplateBinding(context.Context, *CheckAppTemplateBindingReq) (*CheckAppTemplateBindingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAppTemplateBinding not implemented")
}
func (UnimplementedConfigServer) ListTemplateBoundCounts(context.Context, *ListTemplateBoundCountsReq) (*ListTemplateBoundCountsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateBoundCounts not implemented")
}
func (UnimplementedConfigServer) ListTemplateRevisionBoundCounts(context.Context, *ListTemplateRevisionBoundCountsReq) (*ListTemplateRevisionBoundCountsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateRevisionBoundCounts not implemented")
}
func (UnimplementedConfigServer) ListTemplateSetBoundCounts(context.Context, *ListTemplateSetBoundCountsReq) (*ListTemplateSetBoundCountsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateSetBoundCounts not implemented")
}
func (UnimplementedConfigServer) ListTemplateBoundUnnamedAppDetails(context.Context, *ListTemplateBoundUnnamedAppDetailsReq) (*ListTemplateBoundUnnamedAppDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateBoundUnnamedAppDetails not implemented")
}
func (UnimplementedConfigServer) ListTemplateBoundNamedAppDetails(context.Context, *ListTemplateBoundNamedAppDetailsReq) (*ListTemplateBoundNamedAppDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateBoundNamedAppDetails not implemented")
}
func (UnimplementedConfigServer) ListTemplateBoundTemplateSetDetails(context.Context, *ListTemplateBoundTemplateSetDetailsReq) (*ListTemplateBoundTemplateSetDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateBoundTemplateSetDetails not implemented")
}
func (UnimplementedConfigServer) ListMultiTemplateBoundTemplateSetDetails(context.Context, *ListMultiTemplateBoundTemplateSetDetailsReq) (*ListMultiTemplateBoundTemplateSetDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMultiTemplateBoundTemplateSetDetails not implemented")
}
func (UnimplementedConfigServer) ListTemplateRevisionBoundUnnamedAppDetails(context.Context, *ListTemplateRevisionBoundUnnamedAppDetailsReq) (*ListTemplateRevisionBoundUnnamedAppDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateRevisionBoundUnnamedAppDetails not implemented")
}
func (UnimplementedConfigServer) ListTemplateRevisionBoundNamedAppDetails(context.Context, *ListTemplateRevisionBoundNamedAppDetailsReq) (*ListTemplateRevisionBoundNamedAppDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateRevisionBoundNamedAppDetails not implemented")
}
func (UnimplementedConfigServer) ListTemplateSetBoundUnnamedAppDetails(context.Context, *ListTemplateSetBoundUnnamedAppDetailsReq) (*ListTemplateSetBoundUnnamedAppDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateSetBoundUnnamedAppDetails not implemented")
}
func (UnimplementedConfigServer) ListMultiTemplateSetBoundUnnamedAppDetails(context.Context, *ListMultiTemplateSetBoundUnnamedAppDetailsReq) (*ListMultiTemplateSetBoundUnnamedAppDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMultiTemplateSetBoundUnnamedAppDetails not implemented")
}
func (UnimplementedConfigServer) ListTemplateSetBoundNamedAppDetails(context.Context, *ListTemplateSetBoundNamedAppDetailsReq) (*ListTemplateSetBoundNamedAppDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateSetBoundNamedAppDetails not implemented")
}
func (UnimplementedConfigServer) ListLatestTemplateBoundUnnamedAppDetails(context.Context, *ListLatestTemplateBoundUnnamedAppDetailsReq) (*ListLatestTemplateBoundUnnamedAppDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLatestTemplateBoundUnnamedAppDetails not implemented")
}
func (UnimplementedConfigServer) CreateTemplateVariable(context.Context, *CreateTemplateVariableReq) (*CreateTemplateVariableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplateVariable not implemented")
}
func (UnimplementedConfigServer) DeleteTemplateVariable(context.Context, *DeleteTemplateVariableReq) (*DeleteTemplateVariableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplateVariable not implemented")
}
func (UnimplementedConfigServer) UpdateTemplateVariable(context.Context, *UpdateTemplateVariableReq) (*UpdateTemplateVariableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplateVariable not implemented")
}
func (UnimplementedConfigServer) ListTemplateVariables(context.Context, *ListTemplateVariablesReq) (*ListTemplateVariablesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateVariables not implemented")
}
func (UnimplementedConfigServer) ExtractAppTemplateVariables(context.Context, *ExtractAppTemplateVariablesReq) (*ExtractAppTemplateVariablesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractAppTemplateVariables not implemented")
}
func (UnimplementedConfigServer) GetAppTemplateVariableReferences(context.Context, *GetAppTemplateVariableReferencesReq) (*GetAppTemplateVariableReferencesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppTemplateVariableReferences not implemented")
}
func (UnimplementedConfigServer) GetReleasedAppTemplateVariableReferences(context.Context, *GetReleasedAppTemplateVariableReferencesReq) (*GetReleasedAppTemplateVariableReferencesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleasedAppTemplateVariableReferences not implemented")
}
func (UnimplementedConfigServer) UpdateAppTemplateVariables(context.Context, *UpdateAppTemplateVariablesReq) (*UpdateAppTemplateVariablesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppTemplateVariables not implemented")
}
func (UnimplementedConfigServer) ListAppTemplateVariables(context.Context, *ListAppTemplateVariablesReq) (*ListAppTemplateVariablesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppTemplateVariables not implemented")
}
func (UnimplementedConfigServer) ListReleasedAppTemplateVariables(context.Context, *ListReleasedAppTemplateVariablesReq) (*ListReleasedAppTemplateVariablesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleasedAppTemplateVariables not implemented")
}
func (UnimplementedConfigServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedConfigServer) DeleteGroup(context.Context, *DeleteGroupReq) (*DeleteGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedConfigServer) UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedConfigServer) ListAllGroups(context.Context, *ListAllGroupsReq) (*ListAllGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllGroups not implemented")
}
func (UnimplementedConfigServer) ListAppGroups(context.Context, *ListAppGroupsReq) (*ListAppGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppGroups not implemented")
}
func (UnimplementedConfigServer) ListGroupReleasedApps(context.Context, *ListGroupReleasedAppsReq) (*ListGroupReleasedAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupReleasedApps not implemented")
}
func (UnimplementedConfigServer) GetGroupByName(context.Context, *GetGroupByNameReq) (*group.Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupByName not implemented")
}
func (UnimplementedConfigServer) Publish(context.Context, *PublishReq) (*PublishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedConfigServer) GenerateReleaseAndPublish(context.Context, *GenerateReleaseAndPublishReq) (*PublishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateReleaseAndPublish not implemented")
}
func (UnimplementedConfigServer) CreateCredentials(context.Context, *CreateCredentialReq) (*CreateCredentialResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredentials not implemented")
}
func (UnimplementedConfigServer) ListCredentials(context.Context, *ListCredentialsReq) (*ListCredentialsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredentials not implemented")
}
func (UnimplementedConfigServer) DeleteCredential(context.Context, *DeleteCredentialsReq) (*DeleteCredentialsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (UnimplementedConfigServer) UpdateCredential(context.Context, *UpdateCredentialsReq) (*UpdateCredentialsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredential not implemented")
}
func (UnimplementedConfigServer) ListCredentialScopes(context.Context, *ListCredentialScopesReq) (*ListCredentialScopesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredentialScopes not implemented")
}
func (UnimplementedConfigServer) UpdateCredentialScope(context.Context, *UpdateCredentialScopeReq) (*UpdateCredentialScopeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredentialScope not implemented")
}

// UnsafeConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServer will
// result in compilation errors.
type UnsafeConfigServer interface {
	mustEmbedUnimplementedConfigServer()
}

func RegisterConfigServer(s grpc.ServiceRegistrar, srv ConfigServer) {
	s.RegisterService(&Config_ServiceDesc, srv)
}

func _Config_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateApp(ctx, req.(*CreateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateApp(ctx, req.(*UpdateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteApp(ctx, req.(*DeleteAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetApp(ctx, req.(*GetAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetAppByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetAppByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetAppByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetAppByName(ctx, req.(*GetAppByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListAppsRest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListAppsRest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListAppsRest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListAppsRest(ctx, req.(*ListAppsRestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListAppsBySpaceRest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsBySpaceRestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListAppsBySpaceRest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListAppsBySpaceRest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListAppsBySpaceRest(ctx, req.(*ListAppsBySpaceRestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateConfigItem(ctx, req.(*CreateConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_BatchUpsertConfigItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpsertConfigItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).BatchUpsertConfigItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_BatchUpsertConfigItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).BatchUpsertConfigItems(ctx, req.(*BatchUpsertConfigItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateConfigItem(ctx, req.(*UpdateConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteConfigItem(ctx, req.(*DeleteConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetConfigItem(ctx, req.(*GetConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListConfigItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListConfigItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListConfigItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListConfigItems(ctx, req.(*ListConfigItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListConfigItemCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigItemCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListConfigItemCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListConfigItemCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListConfigItemCount(ctx, req.(*ListConfigItemCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateConfigHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateConfigHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateConfigHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateConfigHook(ctx, req.(*UpdateConfigHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateRelease(ctx, req.(*CreateReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListReleases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListReleases(ctx, req.(*ListReleasesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetReleaseByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetReleaseByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetReleaseByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetReleaseByName(ctx, req.(*GetReleaseByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateHook(ctx, req.(*CreateHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteHook(ctx, req.(*DeleteHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHooksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListHooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListHooks(ctx, req.(*ListHooksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListHookTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHookTagsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListHookTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListHookTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListHookTags(ctx, req.(*ListHookTagsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetHook(ctx, req.(*GetHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateHookRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHookRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateHookRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateHookRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateHookRevision(ctx, req.(*CreateHookRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListHookRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHookRevisionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListHookRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListHookRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListHookRevisions(ctx, req.(*ListHookRevisionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteHookRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHookRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteHookRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteHookRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteHookRevision(ctx, req.(*DeleteHookRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_PublishHookRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishHookRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).PublishHookRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_PublishHookRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).PublishHookRevision(ctx, req.(*PublishHookRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetHookRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHookRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetHookRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetHookRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetHookRevision(ctx, req.(*GetHookRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateHookRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHookRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateHookRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateHookRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateHookRevision(ctx, req.(*UpdateHookRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListHookReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHookReferencesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListHookReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListHookReferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListHookReferences(ctx, req.(*ListHookReferencesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListHookRevisionReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHookRevisionReferencesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListHookRevisionReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListHookRevisionReferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListHookRevisionReferences(ctx, req.(*ListHookRevisionReferencesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetReleaseHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetReleaseHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetReleaseHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetReleaseHook(ctx, req.(*GetReleaseHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateTemplateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateTemplateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateTemplateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateTemplateSpace(ctx, req.(*CreateTemplateSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteTemplateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteTemplateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteTemplateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteTemplateSpace(ctx, req.(*DeleteTemplateSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateTemplateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateTemplateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateTemplateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateTemplateSpace(ctx, req.(*UpdateTemplateSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateSpacesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateSpaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateSpaces(ctx, req.(*ListTemplateSpacesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetAllBizsOfTemplateSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetAllBizsOfTemplateSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetAllBizsOfTemplateSpaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetAllBizsOfTemplateSpaces(ctx, req.(*base.EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateDefaultTemplateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDefaultTemplateSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateDefaultTemplateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateDefaultTemplateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateDefaultTemplateSpace(ctx, req.(*CreateDefaultTemplateSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateSpacesByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateSpacesByIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateSpacesByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateSpacesByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateSpacesByIDs(ctx, req.(*ListTemplateSpacesByIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateTemplate(ctx, req.(*CreateTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteTemplate(ctx, req.(*DeleteTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_BatchDeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).BatchDeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_BatchDeleteTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).BatchDeleteTemplate(ctx, req.(*BatchDeleteTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateTemplate(ctx, req.(*UpdateTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplates(ctx, req.(*ListTemplatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_AddTemplatesToTemplateSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTemplatesToTemplateSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).AddTemplatesToTemplateSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_AddTemplatesToTemplateSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).AddTemplatesToTemplateSets(ctx, req.(*AddTemplatesToTemplateSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteTemplatesFromTemplateSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplatesFromTemplateSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteTemplatesFromTemplateSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteTemplatesFromTemplateSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteTemplatesFromTemplateSets(ctx, req.(*DeleteTemplatesFromTemplateSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplatesByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesByIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplatesByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplatesByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplatesByIDs(ctx, req.(*ListTemplatesByIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplatesNotBound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesNotBoundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplatesNotBound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplatesNotBound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplatesNotBound(ctx, req.(*ListTemplatesNotBoundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplatesOfTemplateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesOfTemplateSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplatesOfTemplateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplatesOfTemplateSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplatesOfTemplateSet(ctx, req.(*ListTemplatesOfTemplateSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateTemplateRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateTemplateRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateTemplateRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateTemplateRevision(ctx, req.(*CreateTemplateRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateRevisionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateRevisions(ctx, req.(*ListTemplateRevisionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateRevisionsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateRevisionsByIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateRevisionsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateRevisionsByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateRevisionsByIDs(ctx, req.(*ListTemplateRevisionsByIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateRevisionNamesByTemplateIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateRevisionNamesByTemplateIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateRevisionNamesByTemplateIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateRevisionNamesByTemplateIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateRevisionNamesByTemplateIDs(ctx, req.(*ListTemplateRevisionNamesByTemplateIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateTemplateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateTemplateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateTemplateSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateTemplateSet(ctx, req.(*CreateTemplateSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteTemplateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteTemplateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteTemplateSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteTemplateSet(ctx, req.(*DeleteTemplateSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateTemplateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateTemplateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateTemplateSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateTemplateSet(ctx, req.(*UpdateTemplateSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateSets(ctx, req.(*ListTemplateSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListAppTemplateSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppTemplateSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListAppTemplateSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListAppTemplateSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListAppTemplateSets(ctx, req.(*ListAppTemplateSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateSetsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateSetsByIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateSetsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateSetsByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateSetsByIDs(ctx, req.(*ListTemplateSetsByIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateSetsOfBiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateSetsOfBizReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateSetsOfBiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateSetsOfBiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateSetsOfBiz(ctx, req.(*ListTemplateSetsOfBizReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateAppTemplateBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppTemplateBindingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateAppTemplateBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateAppTemplateBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateAppTemplateBinding(ctx, req.(*CreateAppTemplateBindingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteAppTemplateBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppTemplateBindingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteAppTemplateBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteAppTemplateBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteAppTemplateBinding(ctx, req.(*DeleteAppTemplateBindingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateAppTemplateBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppTemplateBindingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateAppTemplateBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateAppTemplateBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateAppTemplateBinding(ctx, req.(*UpdateAppTemplateBindingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListAppTemplateBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppTemplateBindingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListAppTemplateBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListAppTemplateBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListAppTemplateBindings(ctx, req.(*ListAppTemplateBindingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListAppBoundTemplateRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppBoundTemplateRevisionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListAppBoundTemplateRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListAppBoundTemplateRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListAppBoundTemplateRevisions(ctx, req.(*ListAppBoundTemplateRevisionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListReleasedAppBoundTemplateRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasedAppBoundTemplateRevisionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListReleasedAppBoundTemplateRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListReleasedAppBoundTemplateRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListReleasedAppBoundTemplateRevisions(ctx, req.(*ListReleasedAppBoundTemplateRevisionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateAppBoundTemplateRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppBoundTemplateRevisionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateAppBoundTemplateRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateAppBoundTemplateRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateAppBoundTemplateRevisions(ctx, req.(*UpdateAppBoundTemplateRevisionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteAppBoundTemplateSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppBoundTemplateSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteAppBoundTemplateSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteAppBoundTemplateSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteAppBoundTemplateSets(ctx, req.(*DeleteAppBoundTemplateSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CheckAppTemplateBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAppTemplateBindingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CheckAppTemplateBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CheckAppTemplateBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CheckAppTemplateBinding(ctx, req.(*CheckAppTemplateBindingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateBoundCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateBoundCountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateBoundCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateBoundCounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateBoundCounts(ctx, req.(*ListTemplateBoundCountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateRevisionBoundCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateRevisionBoundCountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateRevisionBoundCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateRevisionBoundCounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateRevisionBoundCounts(ctx, req.(*ListTemplateRevisionBoundCountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateSetBoundCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateSetBoundCountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateSetBoundCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateSetBoundCounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateSetBoundCounts(ctx, req.(*ListTemplateSetBoundCountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateBoundUnnamedAppDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateBoundUnnamedAppDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateBoundUnnamedAppDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateBoundUnnamedAppDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateBoundUnnamedAppDetails(ctx, req.(*ListTemplateBoundUnnamedAppDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateBoundNamedAppDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateBoundNamedAppDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateBoundNamedAppDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateBoundNamedAppDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateBoundNamedAppDetails(ctx, req.(*ListTemplateBoundNamedAppDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateBoundTemplateSetDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateBoundTemplateSetDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateBoundTemplateSetDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateBoundTemplateSetDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateBoundTemplateSetDetails(ctx, req.(*ListTemplateBoundTemplateSetDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListMultiTemplateBoundTemplateSetDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMultiTemplateBoundTemplateSetDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListMultiTemplateBoundTemplateSetDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListMultiTemplateBoundTemplateSetDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListMultiTemplateBoundTemplateSetDetails(ctx, req.(*ListMultiTemplateBoundTemplateSetDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateRevisionBoundUnnamedAppDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateRevisionBoundUnnamedAppDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateRevisionBoundUnnamedAppDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateRevisionBoundUnnamedAppDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateRevisionBoundUnnamedAppDetails(ctx, req.(*ListTemplateRevisionBoundUnnamedAppDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateRevisionBoundNamedAppDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateRevisionBoundNamedAppDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateRevisionBoundNamedAppDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateRevisionBoundNamedAppDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateRevisionBoundNamedAppDetails(ctx, req.(*ListTemplateRevisionBoundNamedAppDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateSetBoundUnnamedAppDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateSetBoundUnnamedAppDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateSetBoundUnnamedAppDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateSetBoundUnnamedAppDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateSetBoundUnnamedAppDetails(ctx, req.(*ListTemplateSetBoundUnnamedAppDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListMultiTemplateSetBoundUnnamedAppDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMultiTemplateSetBoundUnnamedAppDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListMultiTemplateSetBoundUnnamedAppDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListMultiTemplateSetBoundUnnamedAppDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListMultiTemplateSetBoundUnnamedAppDetails(ctx, req.(*ListMultiTemplateSetBoundUnnamedAppDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateSetBoundNamedAppDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateSetBoundNamedAppDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateSetBoundNamedAppDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateSetBoundNamedAppDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateSetBoundNamedAppDetails(ctx, req.(*ListTemplateSetBoundNamedAppDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListLatestTemplateBoundUnnamedAppDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLatestTemplateBoundUnnamedAppDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListLatestTemplateBoundUnnamedAppDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListLatestTemplateBoundUnnamedAppDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListLatestTemplateBoundUnnamedAppDetails(ctx, req.(*ListLatestTemplateBoundUnnamedAppDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateTemplateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateTemplateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateTemplateVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateTemplateVariable(ctx, req.(*CreateTemplateVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteTemplateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteTemplateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteTemplateVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteTemplateVariable(ctx, req.(*DeleteTemplateVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateTemplateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateTemplateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateTemplateVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateTemplateVariable(ctx, req.(*UpdateTemplateVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateVariablesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateVariables(ctx, req.(*ListTemplateVariablesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ExtractAppTemplateVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractAppTemplateVariablesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ExtractAppTemplateVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ExtractAppTemplateVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ExtractAppTemplateVariables(ctx, req.(*ExtractAppTemplateVariablesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetAppTemplateVariableReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppTemplateVariableReferencesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetAppTemplateVariableReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetAppTemplateVariableReferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetAppTemplateVariableReferences(ctx, req.(*GetAppTemplateVariableReferencesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetReleasedAppTemplateVariableReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleasedAppTemplateVariableReferencesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetReleasedAppTemplateVariableReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetReleasedAppTemplateVariableReferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetReleasedAppTemplateVariableReferences(ctx, req.(*GetReleasedAppTemplateVariableReferencesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateAppTemplateVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppTemplateVariablesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateAppTemplateVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateAppTemplateVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateAppTemplateVariables(ctx, req.(*UpdateAppTemplateVariablesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListAppTemplateVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppTemplateVariablesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListAppTemplateVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListAppTemplateVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListAppTemplateVariables(ctx, req.(*ListAppTemplateVariablesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListReleasedAppTemplateVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasedAppTemplateVariablesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListReleasedAppTemplateVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListReleasedAppTemplateVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListReleasedAppTemplateVariables(ctx, req.(*ListReleasedAppTemplateVariablesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteGroup(ctx, req.(*DeleteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateGroup(ctx, req.(*UpdateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListAllGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListAllGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListAllGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListAllGroups(ctx, req.(*ListAllGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListAppGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListAppGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListAppGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListAppGroups(ctx, req.(*ListAppGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListGroupReleasedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupReleasedAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListGroupReleasedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListGroupReleasedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListGroupReleasedApps(ctx, req.(*ListGroupReleasedAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetGroupByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetGroupByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetGroupByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetGroupByName(ctx, req.(*GetGroupByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).Publish(ctx, req.(*PublishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GenerateReleaseAndPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateReleaseAndPublishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GenerateReleaseAndPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GenerateReleaseAndPublish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GenerateReleaseAndPublish(ctx, req.(*GenerateReleaseAndPublishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateCredentials(ctx, req.(*CreateCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListCredentials(ctx, req.(*ListCredentialsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCredentialsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteCredential(ctx, req.(*DeleteCredentialsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCredentialsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateCredential(ctx, req.(*UpdateCredentialsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListCredentialScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialScopesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListCredentialScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListCredentialScopes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListCredentialScopes(ctx, req.(*ListCredentialScopesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateCredentialScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCredentialScopeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateCredentialScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateCredentialScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateCredentialScope(ctx, req.(*UpdateCredentialScopeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Config_ServiceDesc is the grpc.ServiceDesc for Config service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Config_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbcs.Config",
	HandlerType: (*ConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApp",
			Handler:    _Config_CreateApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _Config_UpdateApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _Config_DeleteApp_Handler,
		},
		{
			MethodName: "GetApp",
			Handler:    _Config_GetApp_Handler,
		},
		{
			MethodName: "GetAppByName",
			Handler:    _Config_GetAppByName_Handler,
		},
		{
			MethodName: "ListAppsRest",
			Handler:    _Config_ListAppsRest_Handler,
		},
		{
			MethodName: "ListAppsBySpaceRest",
			Handler:    _Config_ListAppsBySpaceRest_Handler,
		},
		{
			MethodName: "CreateConfigItem",
			Handler:    _Config_CreateConfigItem_Handler,
		},
		{
			MethodName: "BatchUpsertConfigItems",
			Handler:    _Config_BatchUpsertConfigItems_Handler,
		},
		{
			MethodName: "UpdateConfigItem",
			Handler:    _Config_UpdateConfigItem_Handler,
		},
		{
			MethodName: "DeleteConfigItem",
			Handler:    _Config_DeleteConfigItem_Handler,
		},
		{
			MethodName: "GetConfigItem",
			Handler:    _Config_GetConfigItem_Handler,
		},
		{
			MethodName: "ListConfigItems",
			Handler:    _Config_ListConfigItems_Handler,
		},
		{
			MethodName: "ListConfigItemCount",
			Handler:    _Config_ListConfigItemCount_Handler,
		},
		{
			MethodName: "UpdateConfigHook",
			Handler:    _Config_UpdateConfigHook_Handler,
		},
		{
			MethodName: "CreateRelease",
			Handler:    _Config_CreateRelease_Handler,
		},
		{
			MethodName: "ListReleases",
			Handler:    _Config_ListReleases_Handler,
		},
		{
			MethodName: "GetReleaseByName",
			Handler:    _Config_GetReleaseByName_Handler,
		},
		{
			MethodName: "CreateHook",
			Handler:    _Config_CreateHook_Handler,
		},
		{
			MethodName: "DeleteHook",
			Handler:    _Config_DeleteHook_Handler,
		},
		{
			MethodName: "ListHooks",
			Handler:    _Config_ListHooks_Handler,
		},
		{
			MethodName: "ListHookTags",
			Handler:    _Config_ListHookTags_Handler,
		},
		{
			MethodName: "GetHook",
			Handler:    _Config_GetHook_Handler,
		},
		{
			MethodName: "CreateHookRevision",
			Handler:    _Config_CreateHookRevision_Handler,
		},
		{
			MethodName: "ListHookRevisions",
			Handler:    _Config_ListHookRevisions_Handler,
		},
		{
			MethodName: "DeleteHookRevision",
			Handler:    _Config_DeleteHookRevision_Handler,
		},
		{
			MethodName: "PublishHookRevision",
			Handler:    _Config_PublishHookRevision_Handler,
		},
		{
			MethodName: "GetHookRevision",
			Handler:    _Config_GetHookRevision_Handler,
		},
		{
			MethodName: "UpdateHookRevision",
			Handler:    _Config_UpdateHookRevision_Handler,
		},
		{
			MethodName: "ListHookReferences",
			Handler:    _Config_ListHookReferences_Handler,
		},
		{
			MethodName: "ListHookRevisionReferences",
			Handler:    _Config_ListHookRevisionReferences_Handler,
		},
		{
			MethodName: "GetReleaseHook",
			Handler:    _Config_GetReleaseHook_Handler,
		},
		{
			MethodName: "CreateTemplateSpace",
			Handler:    _Config_CreateTemplateSpace_Handler,
		},
		{
			MethodName: "DeleteTemplateSpace",
			Handler:    _Config_DeleteTemplateSpace_Handler,
		},
		{
			MethodName: "UpdateTemplateSpace",
			Handler:    _Config_UpdateTemplateSpace_Handler,
		},
		{
			MethodName: "ListTemplateSpaces",
			Handler:    _Config_ListTemplateSpaces_Handler,
		},
		{
			MethodName: "GetAllBizsOfTemplateSpaces",
			Handler:    _Config_GetAllBizsOfTemplateSpaces_Handler,
		},
		{
			MethodName: "CreateDefaultTemplateSpace",
			Handler:    _Config_CreateDefaultTemplateSpace_Handler,
		},
		{
			MethodName: "ListTemplateSpacesByIDs",
			Handler:    _Config_ListTemplateSpacesByIDs_Handler,
		},
		{
			MethodName: "CreateTemplate",
			Handler:    _Config_CreateTemplate_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _Config_DeleteTemplate_Handler,
		},
		{
			MethodName: "BatchDeleteTemplate",
			Handler:    _Config_BatchDeleteTemplate_Handler,
		},
		{
			MethodName: "UpdateTemplate",
			Handler:    _Config_UpdateTemplate_Handler,
		},
		{
			MethodName: "ListTemplates",
			Handler:    _Config_ListTemplates_Handler,
		},
		{
			MethodName: "AddTemplatesToTemplateSets",
			Handler:    _Config_AddTemplatesToTemplateSets_Handler,
		},
		{
			MethodName: "DeleteTemplatesFromTemplateSets",
			Handler:    _Config_DeleteTemplatesFromTemplateSets_Handler,
		},
		{
			MethodName: "ListTemplatesByIDs",
			Handler:    _Config_ListTemplatesByIDs_Handler,
		},
		{
			MethodName: "ListTemplatesNotBound",
			Handler:    _Config_ListTemplatesNotBound_Handler,
		},
		{
			MethodName: "ListTemplatesOfTemplateSet",
			Handler:    _Config_ListTemplatesOfTemplateSet_Handler,
		},
		{
			MethodName: "CreateTemplateRevision",
			Handler:    _Config_CreateTemplateRevision_Handler,
		},
		{
			MethodName: "ListTemplateRevisions",
			Handler:    _Config_ListTemplateRevisions_Handler,
		},
		{
			MethodName: "ListTemplateRevisionsByIDs",
			Handler:    _Config_ListTemplateRevisionsByIDs_Handler,
		},
		{
			MethodName: "ListTemplateRevisionNamesByTemplateIDs",
			Handler:    _Config_ListTemplateRevisionNamesByTemplateIDs_Handler,
		},
		{
			MethodName: "CreateTemplateSet",
			Handler:    _Config_CreateTemplateSet_Handler,
		},
		{
			MethodName: "DeleteTemplateSet",
			Handler:    _Config_DeleteTemplateSet_Handler,
		},
		{
			MethodName: "UpdateTemplateSet",
			Handler:    _Config_UpdateTemplateSet_Handler,
		},
		{
			MethodName: "ListTemplateSets",
			Handler:    _Config_ListTemplateSets_Handler,
		},
		{
			MethodName: "ListAppTemplateSets",
			Handler:    _Config_ListAppTemplateSets_Handler,
		},
		{
			MethodName: "ListTemplateSetsByIDs",
			Handler:    _Config_ListTemplateSetsByIDs_Handler,
		},
		{
			MethodName: "ListTemplateSetsOfBiz",
			Handler:    _Config_ListTemplateSetsOfBiz_Handler,
		},
		{
			MethodName: "CreateAppTemplateBinding",
			Handler:    _Config_CreateAppTemplateBinding_Handler,
		},
		{
			MethodName: "DeleteAppTemplateBinding",
			Handler:    _Config_DeleteAppTemplateBinding_Handler,
		},
		{
			MethodName: "UpdateAppTemplateBinding",
			Handler:    _Config_UpdateAppTemplateBinding_Handler,
		},
		{
			MethodName: "ListAppTemplateBindings",
			Handler:    _Config_ListAppTemplateBindings_Handler,
		},
		{
			MethodName: "ListAppBoundTemplateRevisions",
			Handler:    _Config_ListAppBoundTemplateRevisions_Handler,
		},
		{
			MethodName: "ListReleasedAppBoundTemplateRevisions",
			Handler:    _Config_ListReleasedAppBoundTemplateRevisions_Handler,
		},
		{
			MethodName: "UpdateAppBoundTemplateRevisions",
			Handler:    _Config_UpdateAppBoundTemplateRevisions_Handler,
		},
		{
			MethodName: "DeleteAppBoundTemplateSets",
			Handler:    _Config_DeleteAppBoundTemplateSets_Handler,
		},
		{
			MethodName: "CheckAppTemplateBinding",
			Handler:    _Config_CheckAppTemplateBinding_Handler,
		},
		{
			MethodName: "ListTemplateBoundCounts",
			Handler:    _Config_ListTemplateBoundCounts_Handler,
		},
		{
			MethodName: "ListTemplateRevisionBoundCounts",
			Handler:    _Config_ListTemplateRevisionBoundCounts_Handler,
		},
		{
			MethodName: "ListTemplateSetBoundCounts",
			Handler:    _Config_ListTemplateSetBoundCounts_Handler,
		},
		{
			MethodName: "ListTemplateBoundUnnamedAppDetails",
			Handler:    _Config_ListTemplateBoundUnnamedAppDetails_Handler,
		},
		{
			MethodName: "ListTemplateBoundNamedAppDetails",
			Handler:    _Config_ListTemplateBoundNamedAppDetails_Handler,
		},
		{
			MethodName: "ListTemplateBoundTemplateSetDetails",
			Handler:    _Config_ListTemplateBoundTemplateSetDetails_Handler,
		},
		{
			MethodName: "ListMultiTemplateBoundTemplateSetDetails",
			Handler:    _Config_ListMultiTemplateBoundTemplateSetDetails_Handler,
		},
		{
			MethodName: "ListTemplateRevisionBoundUnnamedAppDetails",
			Handler:    _Config_ListTemplateRevisionBoundUnnamedAppDetails_Handler,
		},
		{
			MethodName: "ListTemplateRevisionBoundNamedAppDetails",
			Handler:    _Config_ListTemplateRevisionBoundNamedAppDetails_Handler,
		},
		{
			MethodName: "ListTemplateSetBoundUnnamedAppDetails",
			Handler:    _Config_ListTemplateSetBoundUnnamedAppDetails_Handler,
		},
		{
			MethodName: "ListMultiTemplateSetBoundUnnamedAppDetails",
			Handler:    _Config_ListMultiTemplateSetBoundUnnamedAppDetails_Handler,
		},
		{
			MethodName: "ListTemplateSetBoundNamedAppDetails",
			Handler:    _Config_ListTemplateSetBoundNamedAppDetails_Handler,
		},
		{
			MethodName: "ListLatestTemplateBoundUnnamedAppDetails",
			Handler:    _Config_ListLatestTemplateBoundUnnamedAppDetails_Handler,
		},
		{
			MethodName: "CreateTemplateVariable",
			Handler:    _Config_CreateTemplateVariable_Handler,
		},
		{
			MethodName: "DeleteTemplateVariable",
			Handler:    _Config_DeleteTemplateVariable_Handler,
		},
		{
			MethodName: "UpdateTemplateVariable",
			Handler:    _Config_UpdateTemplateVariable_Handler,
		},
		{
			MethodName: "ListTemplateVariables",
			Handler:    _Config_ListTemplateVariables_Handler,
		},
		{
			MethodName: "ExtractAppTemplateVariables",
			Handler:    _Config_ExtractAppTemplateVariables_Handler,
		},
		{
			MethodName: "GetAppTemplateVariableReferences",
			Handler:    _Config_GetAppTemplateVariableReferences_Handler,
		},
		{
			MethodName: "GetReleasedAppTemplateVariableReferences",
			Handler:    _Config_GetReleasedAppTemplateVariableReferences_Handler,
		},
		{
			MethodName: "UpdateAppTemplateVariables",
			Handler:    _Config_UpdateAppTemplateVariables_Handler,
		},
		{
			MethodName: "ListAppTemplateVariables",
			Handler:    _Config_ListAppTemplateVariables_Handler,
		},
		{
			MethodName: "ListReleasedAppTemplateVariables",
			Handler:    _Config_ListReleasedAppTemplateVariables_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Config_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Config_DeleteGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _Config_UpdateGroup_Handler,
		},
		{
			MethodName: "ListAllGroups",
			Handler:    _Config_ListAllGroups_Handler,
		},
		{
			MethodName: "ListAppGroups",
			Handler:    _Config_ListAppGroups_Handler,
		},
		{
			MethodName: "ListGroupReleasedApps",
			Handler:    _Config_ListGroupReleasedApps_Handler,
		},
		{
			MethodName: "GetGroupByName",
			Handler:    _Config_GetGroupByName_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _Config_Publish_Handler,
		},
		{
			MethodName: "GenerateReleaseAndPublish",
			Handler:    _Config_GenerateReleaseAndPublish_Handler,
		},
		{
			MethodName: "CreateCredentials",
			Handler:    _Config_CreateCredentials_Handler,
		},
		{
			MethodName: "ListCredentials",
			Handler:    _Config_ListCredentials_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _Config_DeleteCredential_Handler,
		},
		{
			MethodName: "UpdateCredential",
			Handler:    _Config_UpdateCredential_Handler,
		},
		{
			MethodName: "ListCredentialScopes",
			Handler:    _Config_ListCredentialScopes_Handler,
		},
		{
			MethodName: "UpdateCredentialScope",
			Handler:    _Config_UpdateCredentialScope_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config_service.proto",
}
