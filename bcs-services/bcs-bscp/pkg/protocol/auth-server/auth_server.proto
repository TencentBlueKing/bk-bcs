syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

package pbas;

option go_package = "bscp.io/pkg/protocol/auth-server;pbas";

service Auth {
    // init auth center's auth model.
    rpc InitAuthCenter(InitAuthCenterReq) returns (InitAuthCenterResp) {
        option (google.api.http) = {
            post : "/api/v1/auth/init/authcenter"
            body : "*"
        };
    }

    // 获取用户鉴权信息
    rpc GetUserInfo(UserCredentialReq) returns (UserInfoResp) {
        option (google.api.http) = {
            get : "/api/v1/auth/user/info"
        };
    }

    rpc ListUserSpace(ListUserSpaceReq) returns (ListUserSpaceResp) {
        option (google.api.http) = {
            get : "/api/v1/auth/user/spaces"
        };
    }

    // 通过 AppID 查询 Space 信息
    rpc QuerySpaceByAppID(QuerySpaceByAppIDReq) returns (Space) {}

    // iam pull resource callback.
    rpc PullResource(PullResourceReq) returns (PullResourceResp) {
        option (google.api.http) = {
            post : "/api/v1/auth/iam/find/resource"
            body : "*"
        };
    }

    // 权限中心权限检测
    rpc CheckPermission(ResourceAttribute) returns (CheckPermissionResp) {
        option (google.api.http) = {
            post : "/api/v1/auth/iam/permission/check"
            body : "*"
        };
    }

    // authorize resource batch.
    rpc AuthorizeBatch(AuthorizeBatchReq) returns (AuthorizeBatchResp) {}

    // get iam permission to apply.
    rpc GetPermissionToApply(GetPermissionToApplyReq) returns (GetPermissionToApplyResp) {}

    rpc QuerySpace(QuerySpaceReq) returns (QuerySpaceResp) {}

    // auth login conf
    rpc GetAuthLoginConf(GetAuthLoginConfReq) returns (GetAuthLoginConfResp) {}
}

message InitAuthCenterReq {
    string host = 1;
}

message InitAuthCenterResp {}

message GetAuthLoginConfReq {}

message GetAuthLoginConfResp {
    string host       = 1;
    string inner_host = 2;
    string provider   = 3;
    string gw_pubkey  = 4;
}

message PullResourceReq {
    string type                   = 1;
    string method                 = 2;
    google.protobuf.Struct filter = 3;
    Page page                     = 4;
}

message PullResourceResp {
    google.protobuf.Struct data = 1;
}

message CheckPermissionResp {
    bool is_allowed                = 1;
    string apply_url               = 2;
    repeated BasicDetail resources = 3;
}

message Page {
    uint32 limit  = 1;
    uint32 offset = 2;
}

message AuthorizeBatchReq {
    UserInfo user                        = 1;
    repeated ResourceAttribute resources = 2;
}

message UserInfo {
    string user_name = 1;
}

message ResourceAttribute {
    Basic basic        = 1;
    uint32 biz_id      = 2;
    bool gen_apply_url = 3;
}

message Basic {
    string type        = 1;
    string action      = 2;
    uint32 resource_id = 3;
}

message BasicDetail {
    string type          = 1;
    string type_name     = 2;
    string action        = 3;
    string action_name   = 4;
    string resource_id   = 5;
    string resource_name = 6;
}

message ApplyDetail {
    string apply_url               = 1;
    repeated BasicDetail resources = 2;
}

message AuthorizeBatchResp {
    repeated Decision decisions = 1;
}

message Decision {
    bool authorized = 1;
}

message GetPermissionToApplyReq {
    repeated ResourceAttribute resources = 1;
}

message GetPermissionToApplyResp {
    IamPermission permission = 1;
}

message IamPermission {
    string system_id           = 1;
    string system_name         = 2;
    repeated IamAction actions = 3;
}

message IamAction {
    string id                                       = 1;
    string name                                     = 2;
    repeated IamResourceType related_resource_types = 3;
}

message IamResourceType {
    string system_id                         = 1;
    string system_name                       = 2;
    string type                              = 3;
    string type_name                         = 4;
    repeated IamResourceInstances instances  = 5;
    repeated IamResourceAttribute attributes = 6;
}

message IamResourceInstances {
    repeated IamResourceInstance instances = 1;
}

message IamResourceInstance {
    string type      = 1;
    string type_name = 2;
    string id        = 3;
    string name      = 4;
}

message IamResourceAttribute {
    string id                                 = 1;
    repeated IamResourceAttributeValue values = 2;
}

message IamResourceAttributeValue {
    string id = 1;
}

message UserCredentialReq {
    string uid   = 2;
    string token = 3;
}

message UserInfoResp {
    string username   = 1;
    string avatar_url = 2;
}

message ListUserSpaceReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema : {
            title : "ListUserSpaceReq"
            description : "查询用户有权限的空间列表, 含业务和BCS项目"
        }
    };
}

// Space 项目空间，可同时兼容bk-cmdb, bcs project_code等
message Space {
    string space_id        = 1;
    string space_name      = 2;
    string space_type_id   = 3;
    string space_type_name = 4;
    string space_uid       = 5;
}

message ListUserSpaceResp {
    repeated Space items = 1;
}

message QuerySpaceReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema : {
            title : "QuerySpace"
            description : "查询用户Space空间信息"
        }
    };
    repeated string space_uid = 1;
}

message QuerySpaceResp {
    repeated Space items = 1;
}

message QuerySpaceByAppIDReq {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema : {
            title : "QuerySpaceByAppID"
            description : "通过 app_id 查询 Space"
        }
    };
    uint32 app_id = 1;
}