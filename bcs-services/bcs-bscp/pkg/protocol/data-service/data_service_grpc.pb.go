// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: data_service.proto

package pbds

import (
	app "bscp.io/pkg/protocol/core/app"
	base "bscp.io/pkg/protocol/core/base"
	commit "bscp.io/pkg/protocol/core/commit"
	config_item "bscp.io/pkg/protocol/core/config-item"
	content "bscp.io/pkg/protocol/core/content"
	released_ci "bscp.io/pkg/protocol/core/released-ci"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Data_CreateApp_FullMethodName                      = "/pbds.Data/CreateApp"
	Data_UpdateApp_FullMethodName                      = "/pbds.Data/UpdateApp"
	Data_DeleteApp_FullMethodName                      = "/pbds.Data/DeleteApp"
	Data_GetApp_FullMethodName                         = "/pbds.Data/GetApp"
	Data_GetAppByID_FullMethodName                     = "/pbds.Data/GetAppByID"
	Data_ListApps_FullMethodName                       = "/pbds.Data/ListApps"
	Data_ListAppsRest_FullMethodName                   = "/pbds.Data/ListAppsRest"
	Data_CreateConfigItem_FullMethodName               = "/pbds.Data/CreateConfigItem"
	Data_UpdateConfigItem_FullMethodName               = "/pbds.Data/UpdateConfigItem"
	Data_DeleteConfigItem_FullMethodName               = "/pbds.Data/DeleteConfigItem"
	Data_GetConfigItem_FullMethodName                  = "/pbds.Data/GetConfigItem"
	Data_ListConfigItems_FullMethodName                = "/pbds.Data/ListConfigItems"
	Data_CreateContent_FullMethodName                  = "/pbds.Data/CreateContent"
	Data_GetContent_FullMethodName                     = "/pbds.Data/GetContent"
	Data_ListContents_FullMethodName                   = "/pbds.Data/ListContents"
	Data_CreateCommit_FullMethodName                   = "/pbds.Data/CreateCommit"
	Data_GetLatestCommit_FullMethodName                = "/pbds.Data/GetLatestCommit"
	Data_ListCommits_FullMethodName                    = "/pbds.Data/ListCommits"
	Data_CreateRelease_FullMethodName                  = "/pbds.Data/CreateRelease"
	Data_ListReleases_FullMethodName                   = "/pbds.Data/ListReleases"
	Data_GetReleasedConfigItem_FullMethodName          = "/pbds.Data/GetReleasedConfigItem"
	Data_ListReleasedConfigItems_FullMethodName        = "/pbds.Data/ListReleasedConfigItems"
	Data_CreateStrategySet_FullMethodName              = "/pbds.Data/CreateStrategySet"
	Data_ListStrategySets_FullMethodName               = "/pbds.Data/ListStrategySets"
	Data_UpdateStrategySet_FullMethodName              = "/pbds.Data/UpdateStrategySet"
	Data_DeleteStrategySet_FullMethodName              = "/pbds.Data/DeleteStrategySet"
	Data_CreateStrategy_FullMethodName                 = "/pbds.Data/CreateStrategy"
	Data_ListStrategies_FullMethodName                 = "/pbds.Data/ListStrategies"
	Data_UpdateStrategy_FullMethodName                 = "/pbds.Data/UpdateStrategy"
	Data_DeleteStrategy_FullMethodName                 = "/pbds.Data/DeleteStrategy"
	Data_CreateHook_FullMethodName                     = "/pbds.Data/CreateHook"
	Data_ListHooks_FullMethodName                      = "/pbds.Data/ListHooks"
	Data_UpdateHook_FullMethodName                     = "/pbds.Data/UpdateHook"
	Data_DeleteHook_FullMethodName                     = "/pbds.Data/DeleteHook"
	Data_CreateGroup_FullMethodName                    = "/pbds.Data/CreateGroup"
	Data_ListGroups_FullMethodName                     = "/pbds.Data/ListGroups"
	Data_UpdateGroup_FullMethodName                    = "/pbds.Data/UpdateGroup"
	Data_DeleteGroup_FullMethodName                    = "/pbds.Data/DeleteGroup"
	Data_CreateGroupCategory_FullMethodName            = "/pbds.Data/CreateGroupCategory"
	Data_ListGroupCategories_FullMethodName            = "/pbds.Data/ListGroupCategories"
	Data_DeleteGroupCategory_FullMethodName            = "/pbds.Data/DeleteGroupCategory"
	Data_Publish_FullMethodName                        = "/pbds.Data/Publish"
	Data_FinishPublish_FullMethodName                  = "/pbds.Data/FinishPublish"
	Data_ListPublishedStrategyHistories_FullMethodName = "/pbds.Data/ListPublishedStrategyHistories"
	Data_CreateCRInstance_FullMethodName               = "/pbds.Data/CreateCRInstance"
	Data_ListCRInstances_FullMethodName                = "/pbds.Data/ListCRInstances"
	Data_DeleteCRInstance_FullMethodName               = "/pbds.Data/DeleteCRInstance"
	Data_ListInstances_FullMethodName                  = "/pbds.Data/ListInstances"
	Data_Ping_FullMethodName                           = "/pbds.Data/Ping"
)

// DataClient is the client API for Data service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataClient interface {
	// app related interface.
	CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateResp, error)
	UpdateApp(ctx context.Context, in *UpdateAppReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	GetApp(ctx context.Context, in *GetAppReq, opts ...grpc.CallOption) (*app.App, error)
	GetAppByID(ctx context.Context, in *GetAppByIDReq, opts ...grpc.CallOption) (*app.App, error)
	ListApps(ctx context.Context, in *ListAppsReq, opts ...grpc.CallOption) (*ListAppsResp, error)
	ListAppsRest(ctx context.Context, in *ListAppsRestReq, opts ...grpc.CallOption) (*ListAppsResp, error)
	// config item related interface.
	CreateConfigItem(ctx context.Context, in *CreateConfigItemReq, opts ...grpc.CallOption) (*CreateResp, error)
	UpdateConfigItem(ctx context.Context, in *UpdateConfigItemReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	DeleteConfigItem(ctx context.Context, in *DeleteConfigItemReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	GetConfigItem(ctx context.Context, in *GetConfigItemReq, opts ...grpc.CallOption) (*config_item.ConfigItem, error)
	ListConfigItems(ctx context.Context, in *ListConfigItemsReq, opts ...grpc.CallOption) (*ListConfigItemsResp, error)
	// content related interface.
	CreateContent(ctx context.Context, in *CreateContentReq, opts ...grpc.CallOption) (*CreateResp, error)
	GetContent(ctx context.Context, in *GetContentReq, opts ...grpc.CallOption) (*content.Content, error)
	ListContents(ctx context.Context, in *ListContentsReq, opts ...grpc.CallOption) (*ListContentsResp, error)
	// commit related interface.
	CreateCommit(ctx context.Context, in *CreateCommitReq, opts ...grpc.CallOption) (*CreateResp, error)
	GetLatestCommit(ctx context.Context, in *GetLatestCommitReq, opts ...grpc.CallOption) (*commit.Commit, error)
	ListCommits(ctx context.Context, in *ListCommitsReq, opts ...grpc.CallOption) (*ListCommitsResp, error)
	// release related interface.
	CreateRelease(ctx context.Context, in *CreateReleaseReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListReleases(ctx context.Context, in *ListReleasesReq, opts ...grpc.CallOption) (*ListReleasesResp, error)
	// released config item related interface.
	GetReleasedConfigItem(ctx context.Context, in *GetReleasedCIReq, opts ...grpc.CallOption) (*released_ci.ReleasedConfigItem, error)
	ListReleasedConfigItems(ctx context.Context, in *ListReleasedCIsReq, opts ...grpc.CallOption) (*ListReleasedCIsResp, error)
	// strategy set related interface.
	CreateStrategySet(ctx context.Context, in *CreateStrategySetReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListStrategySets(ctx context.Context, in *ListStrategySetsReq, opts ...grpc.CallOption) (*ListStrategySetsResp, error)
	UpdateStrategySet(ctx context.Context, in *UpdateStrategySetReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	DeleteStrategySet(ctx context.Context, in *DeleteStrategySetReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	// strategy related interface.
	CreateStrategy(ctx context.Context, in *CreateStrategyReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListStrategies(ctx context.Context, in *ListStrategiesReq, opts ...grpc.CallOption) (*ListStrategiesResp, error)
	UpdateStrategy(ctx context.Context, in *UpdateStrategyReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	DeleteStrategy(ctx context.Context, in *DeleteStrategyReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	// hook related interface.
	CreateHook(ctx context.Context, in *CreateHookReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListHooks(ctx context.Context, in *ListHooksReq, opts ...grpc.CallOption) (*ListHooksResp, error)
	UpdateHook(ctx context.Context, in *UpdateHookReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	DeleteHook(ctx context.Context, in *DeleteHookReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	// group related interface.
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListGroups(ctx context.Context, in *ListGroupsReq, opts ...grpc.CallOption) (*ListGroupsResp, error)
	UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	// group category related interface.
	CreateGroupCategory(ctx context.Context, in *CreateGroupCategoryReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListGroupCategories(ctx context.Context, in *ListGroupCategoriesReq, opts ...grpc.CallOption) (*ListGroupCategoriesResp, error)
	DeleteGroupCategory(ctx context.Context, in *DeleteGroupCategoryReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	// publish related interface.
	Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishResp, error)
	FinishPublish(ctx context.Context, in *FinishPublishReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	ListPublishedStrategyHistories(ctx context.Context, in *ListPubStrategyHistoriesReq, opts ...grpc.CallOption) (*ListPubStrategyHistoriesResp, error)
	// current released instance related interface.
	CreateCRInstance(ctx context.Context, in *CreateCRInstanceReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListCRInstances(ctx context.Context, in *ListCRInstancesReq, opts ...grpc.CallOption) (*ListCRInstancesResp, error)
	DeleteCRInstance(ctx context.Context, in *DeleteCRInstanceReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	// used iam pull resource callback.
	ListInstances(ctx context.Context, in *ListInstancesReq, opts ...grpc.CallOption) (*ListInstancesResp, error)
	// Ping verifies if the grpc connection is still alive.
	Ping(ctx context.Context, in *PingMsg, opts ...grpc.CallOption) (*PingMsg, error)
}

type dataClient struct {
	cc grpc.ClientConnInterface
}

func NewDataClient(cc grpc.ClientConnInterface) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateApp(ctx context.Context, in *UpdateAppReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetApp(ctx context.Context, in *GetAppReq, opts ...grpc.CallOption) (*app.App, error) {
	out := new(app.App)
	err := c.cc.Invoke(ctx, Data_GetApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetAppByID(ctx context.Context, in *GetAppByIDReq, opts ...grpc.CallOption) (*app.App, error) {
	out := new(app.App)
	err := c.cc.Invoke(ctx, Data_GetAppByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListApps(ctx context.Context, in *ListAppsReq, opts ...grpc.CallOption) (*ListAppsResp, error) {
	out := new(ListAppsResp)
	err := c.cc.Invoke(ctx, Data_ListApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListAppsRest(ctx context.Context, in *ListAppsRestReq, opts ...grpc.CallOption) (*ListAppsResp, error) {
	out := new(ListAppsResp)
	err := c.cc.Invoke(ctx, Data_ListAppsRest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateConfigItem(ctx context.Context, in *CreateConfigItemReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateConfigItem(ctx context.Context, in *UpdateConfigItemReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteConfigItem(ctx context.Context, in *DeleteConfigItemReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetConfigItem(ctx context.Context, in *GetConfigItemReq, opts ...grpc.CallOption) (*config_item.ConfigItem, error) {
	out := new(config_item.ConfigItem)
	err := c.cc.Invoke(ctx, Data_GetConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListConfigItems(ctx context.Context, in *ListConfigItemsReq, opts ...grpc.CallOption) (*ListConfigItemsResp, error) {
	out := new(ListConfigItemsResp)
	err := c.cc.Invoke(ctx, Data_ListConfigItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateContent(ctx context.Context, in *CreateContentReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetContent(ctx context.Context, in *GetContentReq, opts ...grpc.CallOption) (*content.Content, error) {
	out := new(content.Content)
	err := c.cc.Invoke(ctx, Data_GetContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListContents(ctx context.Context, in *ListContentsReq, opts ...grpc.CallOption) (*ListContentsResp, error) {
	out := new(ListContentsResp)
	err := c.cc.Invoke(ctx, Data_ListContents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateCommit(ctx context.Context, in *CreateCommitReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateCommit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetLatestCommit(ctx context.Context, in *GetLatestCommitReq, opts ...grpc.CallOption) (*commit.Commit, error) {
	out := new(commit.Commit)
	err := c.cc.Invoke(ctx, Data_GetLatestCommit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListCommits(ctx context.Context, in *ListCommitsReq, opts ...grpc.CallOption) (*ListCommitsResp, error) {
	out := new(ListCommitsResp)
	err := c.cc.Invoke(ctx, Data_ListCommits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateRelease(ctx context.Context, in *CreateReleaseReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListReleases(ctx context.Context, in *ListReleasesReq, opts ...grpc.CallOption) (*ListReleasesResp, error) {
	out := new(ListReleasesResp)
	err := c.cc.Invoke(ctx, Data_ListReleases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetReleasedConfigItem(ctx context.Context, in *GetReleasedCIReq, opts ...grpc.CallOption) (*released_ci.ReleasedConfigItem, error) {
	out := new(released_ci.ReleasedConfigItem)
	err := c.cc.Invoke(ctx, Data_GetReleasedConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListReleasedConfigItems(ctx context.Context, in *ListReleasedCIsReq, opts ...grpc.CallOption) (*ListReleasedCIsResp, error) {
	out := new(ListReleasedCIsResp)
	err := c.cc.Invoke(ctx, Data_ListReleasedConfigItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateStrategySet(ctx context.Context, in *CreateStrategySetReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateStrategySet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListStrategySets(ctx context.Context, in *ListStrategySetsReq, opts ...grpc.CallOption) (*ListStrategySetsResp, error) {
	out := new(ListStrategySetsResp)
	err := c.cc.Invoke(ctx, Data_ListStrategySets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateStrategySet(ctx context.Context, in *UpdateStrategySetReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateStrategySet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteStrategySet(ctx context.Context, in *DeleteStrategySetReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteStrategySet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateStrategy(ctx context.Context, in *CreateStrategyReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateStrategy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListStrategies(ctx context.Context, in *ListStrategiesReq, opts ...grpc.CallOption) (*ListStrategiesResp, error) {
	out := new(ListStrategiesResp)
	err := c.cc.Invoke(ctx, Data_ListStrategies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateStrategy(ctx context.Context, in *UpdateStrategyReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateStrategy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteStrategy(ctx context.Context, in *DeleteStrategyReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteStrategy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateHook(ctx context.Context, in *CreateHookReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListHooks(ctx context.Context, in *ListHooksReq, opts ...grpc.CallOption) (*ListHooksResp, error) {
	out := new(ListHooksResp)
	err := c.cc.Invoke(ctx, Data_ListHooks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateHook(ctx context.Context, in *UpdateHookReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteHook(ctx context.Context, in *DeleteHookReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListGroups(ctx context.Context, in *ListGroupsReq, opts ...grpc.CallOption) (*ListGroupsResp, error) {
	out := new(ListGroupsResp)
	err := c.cc.Invoke(ctx, Data_ListGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateGroupCategory(ctx context.Context, in *CreateGroupCategoryReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateGroupCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListGroupCategories(ctx context.Context, in *ListGroupCategoriesReq, opts ...grpc.CallOption) (*ListGroupCategoriesResp, error) {
	out := new(ListGroupCategoriesResp)
	err := c.cc.Invoke(ctx, Data_ListGroupCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteGroupCategory(ctx context.Context, in *DeleteGroupCategoryReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteGroupCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishResp, error) {
	out := new(PublishResp)
	err := c.cc.Invoke(ctx, Data_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) FinishPublish(ctx context.Context, in *FinishPublishReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_FinishPublish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListPublishedStrategyHistories(ctx context.Context, in *ListPubStrategyHistoriesReq, opts ...grpc.CallOption) (*ListPubStrategyHistoriesResp, error) {
	out := new(ListPubStrategyHistoriesResp)
	err := c.cc.Invoke(ctx, Data_ListPublishedStrategyHistories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateCRInstance(ctx context.Context, in *CreateCRInstanceReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateCRInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListCRInstances(ctx context.Context, in *ListCRInstancesReq, opts ...grpc.CallOption) (*ListCRInstancesResp, error) {
	out := new(ListCRInstancesResp)
	err := c.cc.Invoke(ctx, Data_ListCRInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteCRInstance(ctx context.Context, in *DeleteCRInstanceReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteCRInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListInstances(ctx context.Context, in *ListInstancesReq, opts ...grpc.CallOption) (*ListInstancesResp, error) {
	out := new(ListInstancesResp)
	err := c.cc.Invoke(ctx, Data_ListInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) Ping(ctx context.Context, in *PingMsg, opts ...grpc.CallOption) (*PingMsg, error) {
	out := new(PingMsg)
	err := c.cc.Invoke(ctx, Data_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServer is the server API for Data service.
// All implementations should embed UnimplementedDataServer
// for forward compatibility
type DataServer interface {
	// app related interface.
	CreateApp(context.Context, *CreateAppReq) (*CreateResp, error)
	UpdateApp(context.Context, *UpdateAppReq) (*base.EmptyResp, error)
	DeleteApp(context.Context, *DeleteAppReq) (*base.EmptyResp, error)
	GetApp(context.Context, *GetAppReq) (*app.App, error)
	GetAppByID(context.Context, *GetAppByIDReq) (*app.App, error)
	ListApps(context.Context, *ListAppsReq) (*ListAppsResp, error)
	ListAppsRest(context.Context, *ListAppsRestReq) (*ListAppsResp, error)
	// config item related interface.
	CreateConfigItem(context.Context, *CreateConfigItemReq) (*CreateResp, error)
	UpdateConfigItem(context.Context, *UpdateConfigItemReq) (*base.EmptyResp, error)
	DeleteConfigItem(context.Context, *DeleteConfigItemReq) (*base.EmptyResp, error)
	GetConfigItem(context.Context, *GetConfigItemReq) (*config_item.ConfigItem, error)
	ListConfigItems(context.Context, *ListConfigItemsReq) (*ListConfigItemsResp, error)
	// content related interface.
	CreateContent(context.Context, *CreateContentReq) (*CreateResp, error)
	GetContent(context.Context, *GetContentReq) (*content.Content, error)
	ListContents(context.Context, *ListContentsReq) (*ListContentsResp, error)
	// commit related interface.
	CreateCommit(context.Context, *CreateCommitReq) (*CreateResp, error)
	GetLatestCommit(context.Context, *GetLatestCommitReq) (*commit.Commit, error)
	ListCommits(context.Context, *ListCommitsReq) (*ListCommitsResp, error)
	// release related interface.
	CreateRelease(context.Context, *CreateReleaseReq) (*CreateResp, error)
	ListReleases(context.Context, *ListReleasesReq) (*ListReleasesResp, error)
	// released config item related interface.
	GetReleasedConfigItem(context.Context, *GetReleasedCIReq) (*released_ci.ReleasedConfigItem, error)
	ListReleasedConfigItems(context.Context, *ListReleasedCIsReq) (*ListReleasedCIsResp, error)
	// strategy set related interface.
	CreateStrategySet(context.Context, *CreateStrategySetReq) (*CreateResp, error)
	ListStrategySets(context.Context, *ListStrategySetsReq) (*ListStrategySetsResp, error)
	UpdateStrategySet(context.Context, *UpdateStrategySetReq) (*base.EmptyResp, error)
	DeleteStrategySet(context.Context, *DeleteStrategySetReq) (*base.EmptyResp, error)
	// strategy related interface.
	CreateStrategy(context.Context, *CreateStrategyReq) (*CreateResp, error)
	ListStrategies(context.Context, *ListStrategiesReq) (*ListStrategiesResp, error)
	UpdateStrategy(context.Context, *UpdateStrategyReq) (*base.EmptyResp, error)
	DeleteStrategy(context.Context, *DeleteStrategyReq) (*base.EmptyResp, error)
	// hook related interface.
	CreateHook(context.Context, *CreateHookReq) (*CreateResp, error)
	ListHooks(context.Context, *ListHooksReq) (*ListHooksResp, error)
	UpdateHook(context.Context, *UpdateHookReq) (*base.EmptyResp, error)
	DeleteHook(context.Context, *DeleteHookReq) (*base.EmptyResp, error)
	// group related interface.
	CreateGroup(context.Context, *CreateGroupReq) (*CreateResp, error)
	ListGroups(context.Context, *ListGroupsReq) (*ListGroupsResp, error)
	UpdateGroup(context.Context, *UpdateGroupReq) (*base.EmptyResp, error)
	DeleteGroup(context.Context, *DeleteGroupReq) (*base.EmptyResp, error)
	// group category related interface.
	CreateGroupCategory(context.Context, *CreateGroupCategoryReq) (*CreateResp, error)
	ListGroupCategories(context.Context, *ListGroupCategoriesReq) (*ListGroupCategoriesResp, error)
	DeleteGroupCategory(context.Context, *DeleteGroupCategoryReq) (*base.EmptyResp, error)
	// publish related interface.
	Publish(context.Context, *PublishReq) (*PublishResp, error)
	FinishPublish(context.Context, *FinishPublishReq) (*base.EmptyResp, error)
	ListPublishedStrategyHistories(context.Context, *ListPubStrategyHistoriesReq) (*ListPubStrategyHistoriesResp, error)
	// current released instance related interface.
	CreateCRInstance(context.Context, *CreateCRInstanceReq) (*CreateResp, error)
	ListCRInstances(context.Context, *ListCRInstancesReq) (*ListCRInstancesResp, error)
	DeleteCRInstance(context.Context, *DeleteCRInstanceReq) (*base.EmptyResp, error)
	// used iam pull resource callback.
	ListInstances(context.Context, *ListInstancesReq) (*ListInstancesResp, error)
	// Ping verifies if the grpc connection is still alive.
	Ping(context.Context, *PingMsg) (*PingMsg, error)
}

// UnimplementedDataServer should be embedded to have forward compatible implementations.
type UnimplementedDataServer struct {
}

func (UnimplementedDataServer) CreateApp(context.Context, *CreateAppReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedDataServer) UpdateApp(context.Context, *UpdateAppReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedDataServer) DeleteApp(context.Context, *DeleteAppReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedDataServer) GetApp(context.Context, *GetAppReq) (*app.App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApp not implemented")
}
func (UnimplementedDataServer) GetAppByID(context.Context, *GetAppByIDReq) (*app.App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppByID not implemented")
}
func (UnimplementedDataServer) ListApps(context.Context, *ListAppsReq) (*ListAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedDataServer) ListAppsRest(context.Context, *ListAppsRestReq) (*ListAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppsRest not implemented")
}
func (UnimplementedDataServer) CreateConfigItem(context.Context, *CreateConfigItemReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfigItem not implemented")
}
func (UnimplementedDataServer) UpdateConfigItem(context.Context, *UpdateConfigItemReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigItem not implemented")
}
func (UnimplementedDataServer) DeleteConfigItem(context.Context, *DeleteConfigItemReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigItem not implemented")
}
func (UnimplementedDataServer) GetConfigItem(context.Context, *GetConfigItemReq) (*config_item.ConfigItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigItem not implemented")
}
func (UnimplementedDataServer) ListConfigItems(context.Context, *ListConfigItemsReq) (*ListConfigItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigItems not implemented")
}
func (UnimplementedDataServer) CreateContent(context.Context, *CreateContentReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContent not implemented")
}
func (UnimplementedDataServer) GetContent(context.Context, *GetContentReq) (*content.Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContent not implemented")
}
func (UnimplementedDataServer) ListContents(context.Context, *ListContentsReq) (*ListContentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContents not implemented")
}
func (UnimplementedDataServer) CreateCommit(context.Context, *CreateCommitReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommit not implemented")
}
func (UnimplementedDataServer) GetLatestCommit(context.Context, *GetLatestCommitReq) (*commit.Commit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestCommit not implemented")
}
func (UnimplementedDataServer) ListCommits(context.Context, *ListCommitsReq) (*ListCommitsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommits not implemented")
}
func (UnimplementedDataServer) CreateRelease(context.Context, *CreateReleaseReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelease not implemented")
}
func (UnimplementedDataServer) ListReleases(context.Context, *ListReleasesReq) (*ListReleasesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleases not implemented")
}
func (UnimplementedDataServer) GetReleasedConfigItem(context.Context, *GetReleasedCIReq) (*released_ci.ReleasedConfigItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleasedConfigItem not implemented")
}
func (UnimplementedDataServer) ListReleasedConfigItems(context.Context, *ListReleasedCIsReq) (*ListReleasedCIsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleasedConfigItems not implemented")
}
func (UnimplementedDataServer) CreateStrategySet(context.Context, *CreateStrategySetReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStrategySet not implemented")
}
func (UnimplementedDataServer) ListStrategySets(context.Context, *ListStrategySetsReq) (*ListStrategySetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStrategySets not implemented")
}
func (UnimplementedDataServer) UpdateStrategySet(context.Context, *UpdateStrategySetReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStrategySet not implemented")
}
func (UnimplementedDataServer) DeleteStrategySet(context.Context, *DeleteStrategySetReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStrategySet not implemented")
}
func (UnimplementedDataServer) CreateStrategy(context.Context, *CreateStrategyReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStrategy not implemented")
}
func (UnimplementedDataServer) ListStrategies(context.Context, *ListStrategiesReq) (*ListStrategiesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStrategies not implemented")
}
func (UnimplementedDataServer) UpdateStrategy(context.Context, *UpdateStrategyReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStrategy not implemented")
}
func (UnimplementedDataServer) DeleteStrategy(context.Context, *DeleteStrategyReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStrategy not implemented")
}
func (UnimplementedDataServer) CreateHook(context.Context, *CreateHookReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHook not implemented")
}
func (UnimplementedDataServer) ListHooks(context.Context, *ListHooksReq) (*ListHooksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHooks not implemented")
}
func (UnimplementedDataServer) UpdateHook(context.Context, *UpdateHookReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHook not implemented")
}
func (UnimplementedDataServer) DeleteHook(context.Context, *DeleteHookReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHook not implemented")
}
func (UnimplementedDataServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedDataServer) ListGroups(context.Context, *ListGroupsReq) (*ListGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (UnimplementedDataServer) UpdateGroup(context.Context, *UpdateGroupReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedDataServer) DeleteGroup(context.Context, *DeleteGroupReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedDataServer) CreateGroupCategory(context.Context, *CreateGroupCategoryReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupCategory not implemented")
}
func (UnimplementedDataServer) ListGroupCategories(context.Context, *ListGroupCategoriesReq) (*ListGroupCategoriesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupCategories not implemented")
}
func (UnimplementedDataServer) DeleteGroupCategory(context.Context, *DeleteGroupCategoryReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupCategory not implemented")
}
func (UnimplementedDataServer) Publish(context.Context, *PublishReq) (*PublishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedDataServer) FinishPublish(context.Context, *FinishPublishReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishPublish not implemented")
}
func (UnimplementedDataServer) ListPublishedStrategyHistories(context.Context, *ListPubStrategyHistoriesReq) (*ListPubStrategyHistoriesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublishedStrategyHistories not implemented")
}
func (UnimplementedDataServer) CreateCRInstance(context.Context, *CreateCRInstanceReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCRInstance not implemented")
}
func (UnimplementedDataServer) ListCRInstances(context.Context, *ListCRInstancesReq) (*ListCRInstancesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCRInstances not implemented")
}
func (UnimplementedDataServer) DeleteCRInstance(context.Context, *DeleteCRInstanceReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCRInstance not implemented")
}
func (UnimplementedDataServer) ListInstances(context.Context, *ListInstancesReq) (*ListInstancesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstances not implemented")
}
func (UnimplementedDataServer) Ping(context.Context, *PingMsg) (*PingMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

// UnsafeDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServer will
// result in compilation errors.
type UnsafeDataServer interface {
	mustEmbedUnimplementedDataServer()
}

func RegisterDataServer(s grpc.ServiceRegistrar, srv DataServer) {
	s.RegisterService(&Data_ServiceDesc, srv)
}

func _Data_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateApp(ctx, req.(*CreateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateApp(ctx, req.(*UpdateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteApp(ctx, req.(*DeleteAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetApp(ctx, req.(*GetAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetAppByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetAppByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetAppByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetAppByID(ctx, req.(*GetAppByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListApps(ctx, req.(*ListAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListAppsRest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListAppsRest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListAppsRest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListAppsRest(ctx, req.(*ListAppsRestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateConfigItem(ctx, req.(*CreateConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateConfigItem(ctx, req.(*UpdateConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteConfigItem(ctx, req.(*DeleteConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetConfigItem(ctx, req.(*GetConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListConfigItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListConfigItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListConfigItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListConfigItems(ctx, req.(*ListConfigItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateContent(ctx, req.(*CreateContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetContent(ctx, req.(*GetContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListContents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListContents(ctx, req.(*ListContentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateCommit(ctx, req.(*CreateCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetLatestCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetLatestCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetLatestCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetLatestCommit(ctx, req.(*GetLatestCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListCommits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListCommits(ctx, req.(*ListCommitsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateRelease(ctx, req.(*CreateReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListReleases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListReleases(ctx, req.(*ListReleasesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetReleasedConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleasedCIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetReleasedConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetReleasedConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetReleasedConfigItem(ctx, req.(*GetReleasedCIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListReleasedConfigItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasedCIsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListReleasedConfigItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListReleasedConfigItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListReleasedConfigItems(ctx, req.(*ListReleasedCIsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateStrategySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStrategySetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateStrategySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateStrategySet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateStrategySet(ctx, req.(*CreateStrategySetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListStrategySets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStrategySetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListStrategySets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListStrategySets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListStrategySets(ctx, req.(*ListStrategySetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateStrategySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStrategySetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateStrategySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateStrategySet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateStrategySet(ctx, req.(*UpdateStrategySetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteStrategySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStrategySetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteStrategySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteStrategySet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteStrategySet(ctx, req.(*DeleteStrategySetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStrategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateStrategy(ctx, req.(*CreateStrategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListStrategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStrategiesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListStrategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListStrategies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListStrategies(ctx, req.(*ListStrategiesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStrategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateStrategy(ctx, req.(*UpdateStrategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStrategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteStrategy(ctx, req.(*DeleteStrategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateHook(ctx, req.(*CreateHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHooksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListHooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListHooks(ctx, req.(*ListHooksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateHook(ctx, req.(*UpdateHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteHook(ctx, req.(*DeleteHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListGroups(ctx, req.(*ListGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateGroup(ctx, req.(*UpdateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteGroup(ctx, req.(*DeleteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateGroupCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateGroupCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateGroupCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateGroupCategory(ctx, req.(*CreateGroupCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListGroupCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupCategoriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListGroupCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListGroupCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListGroupCategories(ctx, req.(*ListGroupCategoriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteGroupCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteGroupCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteGroupCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteGroupCategory(ctx, req.(*DeleteGroupCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).Publish(ctx, req.(*PublishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_FinishPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishPublishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).FinishPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_FinishPublish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).FinishPublish(ctx, req.(*FinishPublishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListPublishedStrategyHistories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPubStrategyHistoriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListPublishedStrategyHistories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListPublishedStrategyHistories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListPublishedStrategyHistories(ctx, req.(*ListPubStrategyHistoriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateCRInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCRInstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateCRInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateCRInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateCRInstance(ctx, req.(*CreateCRInstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListCRInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCRInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListCRInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListCRInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListCRInstances(ctx, req.(*ListCRInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteCRInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCRInstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteCRInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteCRInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteCRInstance(ctx, req.(*DeleteCRInstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListInstances(ctx, req.(*ListInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).Ping(ctx, req.(*PingMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Data_ServiceDesc is the grpc.ServiceDesc for Data service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Data_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbds.Data",
	HandlerType: (*DataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApp",
			Handler:    _Data_CreateApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _Data_UpdateApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _Data_DeleteApp_Handler,
		},
		{
			MethodName: "GetApp",
			Handler:    _Data_GetApp_Handler,
		},
		{
			MethodName: "GetAppByID",
			Handler:    _Data_GetAppByID_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _Data_ListApps_Handler,
		},
		{
			MethodName: "ListAppsRest",
			Handler:    _Data_ListAppsRest_Handler,
		},
		{
			MethodName: "CreateConfigItem",
			Handler:    _Data_CreateConfigItem_Handler,
		},
		{
			MethodName: "UpdateConfigItem",
			Handler:    _Data_UpdateConfigItem_Handler,
		},
		{
			MethodName: "DeleteConfigItem",
			Handler:    _Data_DeleteConfigItem_Handler,
		},
		{
			MethodName: "GetConfigItem",
			Handler:    _Data_GetConfigItem_Handler,
		},
		{
			MethodName: "ListConfigItems",
			Handler:    _Data_ListConfigItems_Handler,
		},
		{
			MethodName: "CreateContent",
			Handler:    _Data_CreateContent_Handler,
		},
		{
			MethodName: "GetContent",
			Handler:    _Data_GetContent_Handler,
		},
		{
			MethodName: "ListContents",
			Handler:    _Data_ListContents_Handler,
		},
		{
			MethodName: "CreateCommit",
			Handler:    _Data_CreateCommit_Handler,
		},
		{
			MethodName: "GetLatestCommit",
			Handler:    _Data_GetLatestCommit_Handler,
		},
		{
			MethodName: "ListCommits",
			Handler:    _Data_ListCommits_Handler,
		},
		{
			MethodName: "CreateRelease",
			Handler:    _Data_CreateRelease_Handler,
		},
		{
			MethodName: "ListReleases",
			Handler:    _Data_ListReleases_Handler,
		},
		{
			MethodName: "GetReleasedConfigItem",
			Handler:    _Data_GetReleasedConfigItem_Handler,
		},
		{
			MethodName: "ListReleasedConfigItems",
			Handler:    _Data_ListReleasedConfigItems_Handler,
		},
		{
			MethodName: "CreateStrategySet",
			Handler:    _Data_CreateStrategySet_Handler,
		},
		{
			MethodName: "ListStrategySets",
			Handler:    _Data_ListStrategySets_Handler,
		},
		{
			MethodName: "UpdateStrategySet",
			Handler:    _Data_UpdateStrategySet_Handler,
		},
		{
			MethodName: "DeleteStrategySet",
			Handler:    _Data_DeleteStrategySet_Handler,
		},
		{
			MethodName: "CreateStrategy",
			Handler:    _Data_CreateStrategy_Handler,
		},
		{
			MethodName: "ListStrategies",
			Handler:    _Data_ListStrategies_Handler,
		},
		{
			MethodName: "UpdateStrategy",
			Handler:    _Data_UpdateStrategy_Handler,
		},
		{
			MethodName: "DeleteStrategy",
			Handler:    _Data_DeleteStrategy_Handler,
		},
		{
			MethodName: "CreateHook",
			Handler:    _Data_CreateHook_Handler,
		},
		{
			MethodName: "ListHooks",
			Handler:    _Data_ListHooks_Handler,
		},
		{
			MethodName: "UpdateHook",
			Handler:    _Data_UpdateHook_Handler,
		},
		{
			MethodName: "DeleteHook",
			Handler:    _Data_DeleteHook_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Data_CreateGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _Data_ListGroups_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _Data_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Data_DeleteGroup_Handler,
		},
		{
			MethodName: "CreateGroupCategory",
			Handler:    _Data_CreateGroupCategory_Handler,
		},
		{
			MethodName: "ListGroupCategories",
			Handler:    _Data_ListGroupCategories_Handler,
		},
		{
			MethodName: "DeleteGroupCategory",
			Handler:    _Data_DeleteGroupCategory_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _Data_Publish_Handler,
		},
		{
			MethodName: "FinishPublish",
			Handler:    _Data_FinishPublish_Handler,
		},
		{
			MethodName: "ListPublishedStrategyHistories",
			Handler:    _Data_ListPublishedStrategyHistories_Handler,
		},
		{
			MethodName: "CreateCRInstance",
			Handler:    _Data_CreateCRInstance_Handler,
		},
		{
			MethodName: "ListCRInstances",
			Handler:    _Data_ListCRInstances_Handler,
		},
		{
			MethodName: "DeleteCRInstance",
			Handler:    _Data_DeleteCRInstance_Handler,
		},
		{
			MethodName: "ListInstances",
			Handler:    _Data_ListInstances_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Data_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data_service.proto",
}
