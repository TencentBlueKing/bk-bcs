// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: data_service.proto

package pbds

import (
	app "bscp.io/pkg/protocol/core/app"
	base "bscp.io/pkg/protocol/core/base"
	commit "bscp.io/pkg/protocol/core/commit"
	config_item "bscp.io/pkg/protocol/core/config-item"
	content "bscp.io/pkg/protocol/core/content"
	released_ci "bscp.io/pkg/protocol/core/released-ci"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Data_CreateApp_FullMethodName                 = "/pbds.Data/CreateApp"
	Data_UpdateApp_FullMethodName                 = "/pbds.Data/UpdateApp"
	Data_DeleteApp_FullMethodName                 = "/pbds.Data/DeleteApp"
	Data_GetApp_FullMethodName                    = "/pbds.Data/GetApp"
	Data_GetAppByID_FullMethodName                = "/pbds.Data/GetAppByID"
	Data_GetAppByName_FullMethodName              = "/pbds.Data/GetAppByName"
	Data_ListAppsRest_FullMethodName              = "/pbds.Data/ListAppsRest"
	Data_ListAppsByIDs_FullMethodName             = "/pbds.Data/ListAppsByIDs"
	Data_CreateConfigItem_FullMethodName          = "/pbds.Data/CreateConfigItem"
	Data_BatchUpsertConfigItems_FullMethodName    = "/pbds.Data/BatchUpsertConfigItems"
	Data_UpdateConfigItem_FullMethodName          = "/pbds.Data/UpdateConfigItem"
	Data_DeleteConfigItem_FullMethodName          = "/pbds.Data/DeleteConfigItem"
	Data_GetConfigItem_FullMethodName             = "/pbds.Data/GetConfigItem"
	Data_ListConfigItems_FullMethodName           = "/pbds.Data/ListConfigItems"
	Data_ListConfigItemCount_FullMethodName       = "/pbds.Data/ListConfigItemCount"
	Data_CreateContent_FullMethodName             = "/pbds.Data/CreateContent"
	Data_GetContent_FullMethodName                = "/pbds.Data/GetContent"
	Data_ListContents_FullMethodName              = "/pbds.Data/ListContents"
	Data_CreateCommit_FullMethodName              = "/pbds.Data/CreateCommit"
	Data_GetLatestCommit_FullMethodName           = "/pbds.Data/GetLatestCommit"
	Data_ListCommits_FullMethodName               = "/pbds.Data/ListCommits"
	Data_CreateRelease_FullMethodName             = "/pbds.Data/CreateRelease"
	Data_ListReleases_FullMethodName              = "/pbds.Data/ListReleases"
	Data_GetReleasedConfigItem_FullMethodName     = "/pbds.Data/GetReleasedConfigItem"
	Data_ListReleasedConfigItems_FullMethodName   = "/pbds.Data/ListReleasedConfigItems"
	Data_CreateHook_FullMethodName                = "/pbds.Data/CreateHook"
	Data_ListHooks_FullMethodName                 = "/pbds.Data/ListHooks"
	Data_UpdateHook_FullMethodName                = "/pbds.Data/UpdateHook"
	Data_DeleteHook_FullMethodName                = "/pbds.Data/DeleteHook"
	Data_CreateTemplateSpace_FullMethodName       = "/pbds.Data/CreateTemplateSpace"
	Data_ListTemplateSpaces_FullMethodName        = "/pbds.Data/ListTemplateSpaces"
	Data_UpdateTemplateSpace_FullMethodName       = "/pbds.Data/UpdateTemplateSpace"
	Data_DeleteTemplateSpace_FullMethodName       = "/pbds.Data/DeleteTemplateSpace"
	Data_CreateTemplate_FullMethodName            = "/pbds.Data/CreateTemplate"
	Data_ListTemplates_FullMethodName             = "/pbds.Data/ListTemplates"
	Data_UpdateTemplate_FullMethodName            = "/pbds.Data/UpdateTemplate"
	Data_DeleteTemplate_FullMethodName            = "/pbds.Data/DeleteTemplate"
	Data_CreateTemplateRelease_FullMethodName     = "/pbds.Data/CreateTemplateRelease"
	Data_ListTemplateReleases_FullMethodName      = "/pbds.Data/ListTemplateReleases"
	Data_DeleteTemplateRelease_FullMethodName     = "/pbds.Data/DeleteTemplateRelease"
	Data_CreateGroup_FullMethodName               = "/pbds.Data/CreateGroup"
	Data_ListGroups_FullMethodName                = "/pbds.Data/ListGroups"
	Data_ListAppGroups_FullMethodName             = "/pbds.Data/ListAppGroups"
	Data_UpdateGroup_FullMethodName               = "/pbds.Data/UpdateGroup"
	Data_DeleteGroup_FullMethodName               = "/pbds.Data/DeleteGroup"
	Data_CountGroupsReleasedApps_FullMethodName   = "/pbds.Data/CountGroupsReleasedApps"
	Data_ListGroupRleasesdApps_FullMethodName     = "/pbds.Data/ListGroupRleasesdApps"
	Data_Publish_FullMethodName                   = "/pbds.Data/Publish"
	Data_GenerateReleaseAndPublish_FullMethodName = "/pbds.Data/GenerateReleaseAndPublish"
	Data_CreateCredential_FullMethodName          = "/pbds.Data/CreateCredential"
	Data_ListCredentials_FullMethodName           = "/pbds.Data/ListCredentials"
	Data_DeleteCredential_FullMethodName          = "/pbds.Data/DeleteCredential"
	Data_UpdateCredential_FullMethodName          = "/pbds.Data/UpdateCredential"
	Data_ListCredentialScopes_FullMethodName      = "/pbds.Data/ListCredentialScopes"
	Data_UpdateCredentialScopes_FullMethodName    = "/pbds.Data/UpdateCredentialScopes"
	Data_ListInstances_FullMethodName             = "/pbds.Data/ListInstances"
	Data_Ping_FullMethodName                      = "/pbds.Data/Ping"
)

// DataClient is the client API for Data service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataClient interface {
	// app related interface.
	CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateResp, error)
	UpdateApp(ctx context.Context, in *UpdateAppReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	GetApp(ctx context.Context, in *GetAppReq, opts ...grpc.CallOption) (*app.App, error)
	GetAppByID(ctx context.Context, in *GetAppByIDReq, opts ...grpc.CallOption) (*app.App, error)
	GetAppByName(ctx context.Context, in *GetAppByNameReq, opts ...grpc.CallOption) (*app.App, error)
	ListAppsRest(ctx context.Context, in *ListAppsRestReq, opts ...grpc.CallOption) (*ListAppsResp, error)
	ListAppsByIDs(ctx context.Context, in *ListAppsByIDsReq, opts ...grpc.CallOption) (*ListAppsByIDsResp, error)
	// config item related interface.
	CreateConfigItem(ctx context.Context, in *CreateConfigItemReq, opts ...grpc.CallOption) (*CreateResp, error)
	BatchUpsertConfigItems(ctx context.Context, in *BatchUpsertConfigItemsReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	UpdateConfigItem(ctx context.Context, in *UpdateConfigItemReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	DeleteConfigItem(ctx context.Context, in *DeleteConfigItemReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	GetConfigItem(ctx context.Context, in *GetConfigItemReq, opts ...grpc.CallOption) (*config_item.ConfigItem, error)
	ListConfigItems(ctx context.Context, in *ListConfigItemsReq, opts ...grpc.CallOption) (*ListConfigItemsResp, error)
	ListConfigItemCount(ctx context.Context, in *ListConfigItemCountReq, opts ...grpc.CallOption) (*ListConfigItemCountResp, error)
	// content related interface.
	CreateContent(ctx context.Context, in *CreateContentReq, opts ...grpc.CallOption) (*CreateResp, error)
	GetContent(ctx context.Context, in *GetContentReq, opts ...grpc.CallOption) (*content.Content, error)
	ListContents(ctx context.Context, in *ListContentsReq, opts ...grpc.CallOption) (*ListContentsResp, error)
	// commit related interface.
	CreateCommit(ctx context.Context, in *CreateCommitReq, opts ...grpc.CallOption) (*CreateResp, error)
	GetLatestCommit(ctx context.Context, in *GetLatestCommitReq, opts ...grpc.CallOption) (*commit.Commit, error)
	ListCommits(ctx context.Context, in *ListCommitsReq, opts ...grpc.CallOption) (*ListCommitsResp, error)
	// release related interface.
	CreateRelease(ctx context.Context, in *CreateReleaseReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListReleases(ctx context.Context, in *ListReleasesReq, opts ...grpc.CallOption) (*ListReleasesResp, error)
	// released config item related interface.
	GetReleasedConfigItem(ctx context.Context, in *GetReleasedCIReq, opts ...grpc.CallOption) (*released_ci.ReleasedConfigItem, error)
	ListReleasedConfigItems(ctx context.Context, in *ListReleasedCIsReq, opts ...grpc.CallOption) (*ListReleasedCIsResp, error)
	// hook related interface.
	CreateHook(ctx context.Context, in *CreateHookReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListHooks(ctx context.Context, in *ListHooksReq, opts ...grpc.CallOption) (*ListHooksResp, error)
	UpdateHook(ctx context.Context, in *UpdateHookReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	DeleteHook(ctx context.Context, in *DeleteHookReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	// template space related interface.
	CreateTemplateSpace(ctx context.Context, in *CreateTemplateSpaceReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListTemplateSpaces(ctx context.Context, in *ListTemplateSpacesReq, opts ...grpc.CallOption) (*ListTemplateSpacesResp, error)
	UpdateTemplateSpace(ctx context.Context, in *UpdateTemplateSpaceReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	DeleteTemplateSpace(ctx context.Context, in *DeleteTemplateSpaceReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	// template related interface.
	CreateTemplate(ctx context.Context, in *CreateTemplateReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListTemplates(ctx context.Context, in *ListTemplatesReq, opts ...grpc.CallOption) (*ListTemplatesResp, error)
	UpdateTemplate(ctx context.Context, in *UpdateTemplateReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	DeleteTemplate(ctx context.Context, in *DeleteTemplateReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	// template release related interface.
	CreateTemplateRelease(ctx context.Context, in *CreateTemplateReleaseReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListTemplateReleases(ctx context.Context, in *ListTemplateReleasesReq, opts ...grpc.CallOption) (*ListTemplateReleasesResp, error)
	DeleteTemplateRelease(ctx context.Context, in *DeleteTemplateReleaseReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	// group related interface.
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListGroups(ctx context.Context, in *ListGroupsReq, opts ...grpc.CallOption) (*ListGroupsResp, error)
	ListAppGroups(ctx context.Context, in *ListAppGroupsReq, opts ...grpc.CallOption) (*ListAppGroupsResp, error)
	UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	// group current release related interface.
	CountGroupsReleasedApps(ctx context.Context, in *CountGroupsReleasedAppsReq, opts ...grpc.CallOption) (*CountGroupsReleasedAppsResp, error)
	ListGroupRleasesdApps(ctx context.Context, in *ListGroupRleasesdAppsReq, opts ...grpc.CallOption) (*ListGroupRleasesdAppsResp, error)
	// publish related interface.
	Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishResp, error)
	GenerateReleaseAndPublish(ctx context.Context, in *GenerateReleaseAndPublishReq, opts ...grpc.CallOption) (*PublishResp, error)
	// credential related interface
	CreateCredential(ctx context.Context, in *CreateCredentialReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListCredentials(ctx context.Context, in *ListCredentialReq, opts ...grpc.CallOption) (*ListCredentialResp, error)
	DeleteCredential(ctx context.Context, in *DeleteCredentialReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	UpdateCredential(ctx context.Context, in *UpdateCredentialReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	// credential scope related interface
	ListCredentialScopes(ctx context.Context, in *ListCredentialScopesReq, opts ...grpc.CallOption) (*ListCredentialScopesResp, error)
	UpdateCredentialScopes(ctx context.Context, in *UpdateCredentialScopesReq, opts ...grpc.CallOption) (*UpdateCredentialScopesResp, error)
	// used iam pull resource callback.
	ListInstances(ctx context.Context, in *ListInstancesReq, opts ...grpc.CallOption) (*ListInstancesResp, error)
	// Ping verifies if the grpc connection is still alive.
	Ping(ctx context.Context, in *PingMsg, opts ...grpc.CallOption) (*PingMsg, error)
}

type dataClient struct {
	cc grpc.ClientConnInterface
}

func NewDataClient(cc grpc.ClientConnInterface) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateApp(ctx context.Context, in *UpdateAppReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetApp(ctx context.Context, in *GetAppReq, opts ...grpc.CallOption) (*app.App, error) {
	out := new(app.App)
	err := c.cc.Invoke(ctx, Data_GetApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetAppByID(ctx context.Context, in *GetAppByIDReq, opts ...grpc.CallOption) (*app.App, error) {
	out := new(app.App)
	err := c.cc.Invoke(ctx, Data_GetAppByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetAppByName(ctx context.Context, in *GetAppByNameReq, opts ...grpc.CallOption) (*app.App, error) {
	out := new(app.App)
	err := c.cc.Invoke(ctx, Data_GetAppByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListAppsRest(ctx context.Context, in *ListAppsRestReq, opts ...grpc.CallOption) (*ListAppsResp, error) {
	out := new(ListAppsResp)
	err := c.cc.Invoke(ctx, Data_ListAppsRest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListAppsByIDs(ctx context.Context, in *ListAppsByIDsReq, opts ...grpc.CallOption) (*ListAppsByIDsResp, error) {
	out := new(ListAppsByIDsResp)
	err := c.cc.Invoke(ctx, Data_ListAppsByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateConfigItem(ctx context.Context, in *CreateConfigItemReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) BatchUpsertConfigItems(ctx context.Context, in *BatchUpsertConfigItemsReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_BatchUpsertConfigItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateConfigItem(ctx context.Context, in *UpdateConfigItemReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteConfigItem(ctx context.Context, in *DeleteConfigItemReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetConfigItem(ctx context.Context, in *GetConfigItemReq, opts ...grpc.CallOption) (*config_item.ConfigItem, error) {
	out := new(config_item.ConfigItem)
	err := c.cc.Invoke(ctx, Data_GetConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListConfigItems(ctx context.Context, in *ListConfigItemsReq, opts ...grpc.CallOption) (*ListConfigItemsResp, error) {
	out := new(ListConfigItemsResp)
	err := c.cc.Invoke(ctx, Data_ListConfigItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListConfigItemCount(ctx context.Context, in *ListConfigItemCountReq, opts ...grpc.CallOption) (*ListConfigItemCountResp, error) {
	out := new(ListConfigItemCountResp)
	err := c.cc.Invoke(ctx, Data_ListConfigItemCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateContent(ctx context.Context, in *CreateContentReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetContent(ctx context.Context, in *GetContentReq, opts ...grpc.CallOption) (*content.Content, error) {
	out := new(content.Content)
	err := c.cc.Invoke(ctx, Data_GetContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListContents(ctx context.Context, in *ListContentsReq, opts ...grpc.CallOption) (*ListContentsResp, error) {
	out := new(ListContentsResp)
	err := c.cc.Invoke(ctx, Data_ListContents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateCommit(ctx context.Context, in *CreateCommitReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateCommit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetLatestCommit(ctx context.Context, in *GetLatestCommitReq, opts ...grpc.CallOption) (*commit.Commit, error) {
	out := new(commit.Commit)
	err := c.cc.Invoke(ctx, Data_GetLatestCommit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListCommits(ctx context.Context, in *ListCommitsReq, opts ...grpc.CallOption) (*ListCommitsResp, error) {
	out := new(ListCommitsResp)
	err := c.cc.Invoke(ctx, Data_ListCommits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateRelease(ctx context.Context, in *CreateReleaseReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListReleases(ctx context.Context, in *ListReleasesReq, opts ...grpc.CallOption) (*ListReleasesResp, error) {
	out := new(ListReleasesResp)
	err := c.cc.Invoke(ctx, Data_ListReleases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetReleasedConfigItem(ctx context.Context, in *GetReleasedCIReq, opts ...grpc.CallOption) (*released_ci.ReleasedConfigItem, error) {
	out := new(released_ci.ReleasedConfigItem)
	err := c.cc.Invoke(ctx, Data_GetReleasedConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListReleasedConfigItems(ctx context.Context, in *ListReleasedCIsReq, opts ...grpc.CallOption) (*ListReleasedCIsResp, error) {
	out := new(ListReleasedCIsResp)
	err := c.cc.Invoke(ctx, Data_ListReleasedConfigItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateHook(ctx context.Context, in *CreateHookReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListHooks(ctx context.Context, in *ListHooksReq, opts ...grpc.CallOption) (*ListHooksResp, error) {
	out := new(ListHooksResp)
	err := c.cc.Invoke(ctx, Data_ListHooks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateHook(ctx context.Context, in *UpdateHookReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteHook(ctx context.Context, in *DeleteHookReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateTemplateSpace(ctx context.Context, in *CreateTemplateSpaceReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateTemplateSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTemplateSpaces(ctx context.Context, in *ListTemplateSpacesReq, opts ...grpc.CallOption) (*ListTemplateSpacesResp, error) {
	out := new(ListTemplateSpacesResp)
	err := c.cc.Invoke(ctx, Data_ListTemplateSpaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateTemplateSpace(ctx context.Context, in *UpdateTemplateSpaceReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateTemplateSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteTemplateSpace(ctx context.Context, in *DeleteTemplateSpaceReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteTemplateSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateTemplate(ctx context.Context, in *CreateTemplateReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTemplates(ctx context.Context, in *ListTemplatesReq, opts ...grpc.CallOption) (*ListTemplatesResp, error) {
	out := new(ListTemplatesResp)
	err := c.cc.Invoke(ctx, Data_ListTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateTemplate(ctx context.Context, in *UpdateTemplateReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteTemplate(ctx context.Context, in *DeleteTemplateReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateTemplateRelease(ctx context.Context, in *CreateTemplateReleaseReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateTemplateRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTemplateReleases(ctx context.Context, in *ListTemplateReleasesReq, opts ...grpc.CallOption) (*ListTemplateReleasesResp, error) {
	out := new(ListTemplateReleasesResp)
	err := c.cc.Invoke(ctx, Data_ListTemplateReleases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteTemplateRelease(ctx context.Context, in *DeleteTemplateReleaseReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteTemplateRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListGroups(ctx context.Context, in *ListGroupsReq, opts ...grpc.CallOption) (*ListGroupsResp, error) {
	out := new(ListGroupsResp)
	err := c.cc.Invoke(ctx, Data_ListGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListAppGroups(ctx context.Context, in *ListAppGroupsReq, opts ...grpc.CallOption) (*ListAppGroupsResp, error) {
	out := new(ListAppGroupsResp)
	err := c.cc.Invoke(ctx, Data_ListAppGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CountGroupsReleasedApps(ctx context.Context, in *CountGroupsReleasedAppsReq, opts ...grpc.CallOption) (*CountGroupsReleasedAppsResp, error) {
	out := new(CountGroupsReleasedAppsResp)
	err := c.cc.Invoke(ctx, Data_CountGroupsReleasedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListGroupRleasesdApps(ctx context.Context, in *ListGroupRleasesdAppsReq, opts ...grpc.CallOption) (*ListGroupRleasesdAppsResp, error) {
	out := new(ListGroupRleasesdAppsResp)
	err := c.cc.Invoke(ctx, Data_ListGroupRleasesdApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishResp, error) {
	out := new(PublishResp)
	err := c.cc.Invoke(ctx, Data_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GenerateReleaseAndPublish(ctx context.Context, in *GenerateReleaseAndPublishReq, opts ...grpc.CallOption) (*PublishResp, error) {
	out := new(PublishResp)
	err := c.cc.Invoke(ctx, Data_GenerateReleaseAndPublish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateCredential(ctx context.Context, in *CreateCredentialReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListCredentials(ctx context.Context, in *ListCredentialReq, opts ...grpc.CallOption) (*ListCredentialResp, error) {
	out := new(ListCredentialResp)
	err := c.cc.Invoke(ctx, Data_ListCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteCredential(ctx context.Context, in *DeleteCredentialReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateCredential(ctx context.Context, in *UpdateCredentialReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListCredentialScopes(ctx context.Context, in *ListCredentialScopesReq, opts ...grpc.CallOption) (*ListCredentialScopesResp, error) {
	out := new(ListCredentialScopesResp)
	err := c.cc.Invoke(ctx, Data_ListCredentialScopes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateCredentialScopes(ctx context.Context, in *UpdateCredentialScopesReq, opts ...grpc.CallOption) (*UpdateCredentialScopesResp, error) {
	out := new(UpdateCredentialScopesResp)
	err := c.cc.Invoke(ctx, Data_UpdateCredentialScopes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListInstances(ctx context.Context, in *ListInstancesReq, opts ...grpc.CallOption) (*ListInstancesResp, error) {
	out := new(ListInstancesResp)
	err := c.cc.Invoke(ctx, Data_ListInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) Ping(ctx context.Context, in *PingMsg, opts ...grpc.CallOption) (*PingMsg, error) {
	out := new(PingMsg)
	err := c.cc.Invoke(ctx, Data_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServer is the server API for Data service.
// All implementations should embed UnimplementedDataServer
// for forward compatibility
type DataServer interface {
	// app related interface.
	CreateApp(context.Context, *CreateAppReq) (*CreateResp, error)
	UpdateApp(context.Context, *UpdateAppReq) (*base.EmptyResp, error)
	DeleteApp(context.Context, *DeleteAppReq) (*base.EmptyResp, error)
	GetApp(context.Context, *GetAppReq) (*app.App, error)
	GetAppByID(context.Context, *GetAppByIDReq) (*app.App, error)
	GetAppByName(context.Context, *GetAppByNameReq) (*app.App, error)
	ListAppsRest(context.Context, *ListAppsRestReq) (*ListAppsResp, error)
	ListAppsByIDs(context.Context, *ListAppsByIDsReq) (*ListAppsByIDsResp, error)
	// config item related interface.
	CreateConfigItem(context.Context, *CreateConfigItemReq) (*CreateResp, error)
	BatchUpsertConfigItems(context.Context, *BatchUpsertConfigItemsReq) (*base.EmptyResp, error)
	UpdateConfigItem(context.Context, *UpdateConfigItemReq) (*base.EmptyResp, error)
	DeleteConfigItem(context.Context, *DeleteConfigItemReq) (*base.EmptyResp, error)
	GetConfigItem(context.Context, *GetConfigItemReq) (*config_item.ConfigItem, error)
	ListConfigItems(context.Context, *ListConfigItemsReq) (*ListConfigItemsResp, error)
	ListConfigItemCount(context.Context, *ListConfigItemCountReq) (*ListConfigItemCountResp, error)
	// content related interface.
	CreateContent(context.Context, *CreateContentReq) (*CreateResp, error)
	GetContent(context.Context, *GetContentReq) (*content.Content, error)
	ListContents(context.Context, *ListContentsReq) (*ListContentsResp, error)
	// commit related interface.
	CreateCommit(context.Context, *CreateCommitReq) (*CreateResp, error)
	GetLatestCommit(context.Context, *GetLatestCommitReq) (*commit.Commit, error)
	ListCommits(context.Context, *ListCommitsReq) (*ListCommitsResp, error)
	// release related interface.
	CreateRelease(context.Context, *CreateReleaseReq) (*CreateResp, error)
	ListReleases(context.Context, *ListReleasesReq) (*ListReleasesResp, error)
	// released config item related interface.
	GetReleasedConfigItem(context.Context, *GetReleasedCIReq) (*released_ci.ReleasedConfigItem, error)
	ListReleasedConfigItems(context.Context, *ListReleasedCIsReq) (*ListReleasedCIsResp, error)
	// hook related interface.
	CreateHook(context.Context, *CreateHookReq) (*CreateResp, error)
	ListHooks(context.Context, *ListHooksReq) (*ListHooksResp, error)
	UpdateHook(context.Context, *UpdateHookReq) (*base.EmptyResp, error)
	DeleteHook(context.Context, *DeleteHookReq) (*base.EmptyResp, error)
	// template space related interface.
	CreateTemplateSpace(context.Context, *CreateTemplateSpaceReq) (*CreateResp, error)
	ListTemplateSpaces(context.Context, *ListTemplateSpacesReq) (*ListTemplateSpacesResp, error)
	UpdateTemplateSpace(context.Context, *UpdateTemplateSpaceReq) (*base.EmptyResp, error)
	DeleteTemplateSpace(context.Context, *DeleteTemplateSpaceReq) (*base.EmptyResp, error)
	// template related interface.
	CreateTemplate(context.Context, *CreateTemplateReq) (*CreateResp, error)
	ListTemplates(context.Context, *ListTemplatesReq) (*ListTemplatesResp, error)
	UpdateTemplate(context.Context, *UpdateTemplateReq) (*base.EmptyResp, error)
	DeleteTemplate(context.Context, *DeleteTemplateReq) (*base.EmptyResp, error)
	// template release related interface.
	CreateTemplateRelease(context.Context, *CreateTemplateReleaseReq) (*CreateResp, error)
	ListTemplateReleases(context.Context, *ListTemplateReleasesReq) (*ListTemplateReleasesResp, error)
	DeleteTemplateRelease(context.Context, *DeleteTemplateReleaseReq) (*base.EmptyResp, error)
	// group related interface.
	CreateGroup(context.Context, *CreateGroupReq) (*CreateResp, error)
	ListGroups(context.Context, *ListGroupsReq) (*ListGroupsResp, error)
	ListAppGroups(context.Context, *ListAppGroupsReq) (*ListAppGroupsResp, error)
	UpdateGroup(context.Context, *UpdateGroupReq) (*base.EmptyResp, error)
	DeleteGroup(context.Context, *DeleteGroupReq) (*base.EmptyResp, error)
	// group current release related interface.
	CountGroupsReleasedApps(context.Context, *CountGroupsReleasedAppsReq) (*CountGroupsReleasedAppsResp, error)
	ListGroupRleasesdApps(context.Context, *ListGroupRleasesdAppsReq) (*ListGroupRleasesdAppsResp, error)
	// publish related interface.
	Publish(context.Context, *PublishReq) (*PublishResp, error)
	GenerateReleaseAndPublish(context.Context, *GenerateReleaseAndPublishReq) (*PublishResp, error)
	// credential related interface
	CreateCredential(context.Context, *CreateCredentialReq) (*CreateResp, error)
	ListCredentials(context.Context, *ListCredentialReq) (*ListCredentialResp, error)
	DeleteCredential(context.Context, *DeleteCredentialReq) (*base.EmptyResp, error)
	UpdateCredential(context.Context, *UpdateCredentialReq) (*base.EmptyResp, error)
	// credential scope related interface
	ListCredentialScopes(context.Context, *ListCredentialScopesReq) (*ListCredentialScopesResp, error)
	UpdateCredentialScopes(context.Context, *UpdateCredentialScopesReq) (*UpdateCredentialScopesResp, error)
	// used iam pull resource callback.
	ListInstances(context.Context, *ListInstancesReq) (*ListInstancesResp, error)
	// Ping verifies if the grpc connection is still alive.
	Ping(context.Context, *PingMsg) (*PingMsg, error)
}

// UnimplementedDataServer should be embedded to have forward compatible implementations.
type UnimplementedDataServer struct {
}

func (UnimplementedDataServer) CreateApp(context.Context, *CreateAppReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedDataServer) UpdateApp(context.Context, *UpdateAppReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedDataServer) DeleteApp(context.Context, *DeleteAppReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedDataServer) GetApp(context.Context, *GetAppReq) (*app.App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApp not implemented")
}
func (UnimplementedDataServer) GetAppByID(context.Context, *GetAppByIDReq) (*app.App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppByID not implemented")
}
func (UnimplementedDataServer) GetAppByName(context.Context, *GetAppByNameReq) (*app.App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppByName not implemented")
}
func (UnimplementedDataServer) ListAppsRest(context.Context, *ListAppsRestReq) (*ListAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppsRest not implemented")
}
func (UnimplementedDataServer) ListAppsByIDs(context.Context, *ListAppsByIDsReq) (*ListAppsByIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppsByIDs not implemented")
}
func (UnimplementedDataServer) CreateConfigItem(context.Context, *CreateConfigItemReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfigItem not implemented")
}
func (UnimplementedDataServer) BatchUpsertConfigItems(context.Context, *BatchUpsertConfigItemsReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpsertConfigItems not implemented")
}
func (UnimplementedDataServer) UpdateConfigItem(context.Context, *UpdateConfigItemReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigItem not implemented")
}
func (UnimplementedDataServer) DeleteConfigItem(context.Context, *DeleteConfigItemReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigItem not implemented")
}
func (UnimplementedDataServer) GetConfigItem(context.Context, *GetConfigItemReq) (*config_item.ConfigItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigItem not implemented")
}
func (UnimplementedDataServer) ListConfigItems(context.Context, *ListConfigItemsReq) (*ListConfigItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigItems not implemented")
}
func (UnimplementedDataServer) ListConfigItemCount(context.Context, *ListConfigItemCountReq) (*ListConfigItemCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigItemCount not implemented")
}
func (UnimplementedDataServer) CreateContent(context.Context, *CreateContentReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContent not implemented")
}
func (UnimplementedDataServer) GetContent(context.Context, *GetContentReq) (*content.Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContent not implemented")
}
func (UnimplementedDataServer) ListContents(context.Context, *ListContentsReq) (*ListContentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContents not implemented")
}
func (UnimplementedDataServer) CreateCommit(context.Context, *CreateCommitReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommit not implemented")
}
func (UnimplementedDataServer) GetLatestCommit(context.Context, *GetLatestCommitReq) (*commit.Commit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestCommit not implemented")
}
func (UnimplementedDataServer) ListCommits(context.Context, *ListCommitsReq) (*ListCommitsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommits not implemented")
}
func (UnimplementedDataServer) CreateRelease(context.Context, *CreateReleaseReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelease not implemented")
}
func (UnimplementedDataServer) ListReleases(context.Context, *ListReleasesReq) (*ListReleasesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleases not implemented")
}
func (UnimplementedDataServer) GetReleasedConfigItem(context.Context, *GetReleasedCIReq) (*released_ci.ReleasedConfigItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleasedConfigItem not implemented")
}
func (UnimplementedDataServer) ListReleasedConfigItems(context.Context, *ListReleasedCIsReq) (*ListReleasedCIsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleasedConfigItems not implemented")
}
func (UnimplementedDataServer) CreateHook(context.Context, *CreateHookReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHook not implemented")
}
func (UnimplementedDataServer) ListHooks(context.Context, *ListHooksReq) (*ListHooksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHooks not implemented")
}
func (UnimplementedDataServer) UpdateHook(context.Context, *UpdateHookReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHook not implemented")
}
func (UnimplementedDataServer) DeleteHook(context.Context, *DeleteHookReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHook not implemented")
}
func (UnimplementedDataServer) CreateTemplateSpace(context.Context, *CreateTemplateSpaceReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplateSpace not implemented")
}
func (UnimplementedDataServer) ListTemplateSpaces(context.Context, *ListTemplateSpacesReq) (*ListTemplateSpacesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateSpaces not implemented")
}
func (UnimplementedDataServer) UpdateTemplateSpace(context.Context, *UpdateTemplateSpaceReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplateSpace not implemented")
}
func (UnimplementedDataServer) DeleteTemplateSpace(context.Context, *DeleteTemplateSpaceReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplateSpace not implemented")
}
func (UnimplementedDataServer) CreateTemplate(context.Context, *CreateTemplateReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (UnimplementedDataServer) ListTemplates(context.Context, *ListTemplatesReq) (*ListTemplatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedDataServer) UpdateTemplate(context.Context, *UpdateTemplateReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (UnimplementedDataServer) DeleteTemplate(context.Context, *DeleteTemplateReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (UnimplementedDataServer) CreateTemplateRelease(context.Context, *CreateTemplateReleaseReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplateRelease not implemented")
}
func (UnimplementedDataServer) ListTemplateReleases(context.Context, *ListTemplateReleasesReq) (*ListTemplateReleasesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateReleases not implemented")
}
func (UnimplementedDataServer) DeleteTemplateRelease(context.Context, *DeleteTemplateReleaseReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplateRelease not implemented")
}
func (UnimplementedDataServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedDataServer) ListGroups(context.Context, *ListGroupsReq) (*ListGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (UnimplementedDataServer) ListAppGroups(context.Context, *ListAppGroupsReq) (*ListAppGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppGroups not implemented")
}
func (UnimplementedDataServer) UpdateGroup(context.Context, *UpdateGroupReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedDataServer) DeleteGroup(context.Context, *DeleteGroupReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedDataServer) CountGroupsReleasedApps(context.Context, *CountGroupsReleasedAppsReq) (*CountGroupsReleasedAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountGroupsReleasedApps not implemented")
}
func (UnimplementedDataServer) ListGroupRleasesdApps(context.Context, *ListGroupRleasesdAppsReq) (*ListGroupRleasesdAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupRleasesdApps not implemented")
}
func (UnimplementedDataServer) Publish(context.Context, *PublishReq) (*PublishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedDataServer) GenerateReleaseAndPublish(context.Context, *GenerateReleaseAndPublishReq) (*PublishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateReleaseAndPublish not implemented")
}
func (UnimplementedDataServer) CreateCredential(context.Context, *CreateCredentialReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredential not implemented")
}
func (UnimplementedDataServer) ListCredentials(context.Context, *ListCredentialReq) (*ListCredentialResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredentials not implemented")
}
func (UnimplementedDataServer) DeleteCredential(context.Context, *DeleteCredentialReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (UnimplementedDataServer) UpdateCredential(context.Context, *UpdateCredentialReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredential not implemented")
}
func (UnimplementedDataServer) ListCredentialScopes(context.Context, *ListCredentialScopesReq) (*ListCredentialScopesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredentialScopes not implemented")
}
func (UnimplementedDataServer) UpdateCredentialScopes(context.Context, *UpdateCredentialScopesReq) (*UpdateCredentialScopesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredentialScopes not implemented")
}
func (UnimplementedDataServer) ListInstances(context.Context, *ListInstancesReq) (*ListInstancesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstances not implemented")
}
func (UnimplementedDataServer) Ping(context.Context, *PingMsg) (*PingMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

// UnsafeDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServer will
// result in compilation errors.
type UnsafeDataServer interface {
	mustEmbedUnimplementedDataServer()
}

func RegisterDataServer(s grpc.ServiceRegistrar, srv DataServer) {
	s.RegisterService(&Data_ServiceDesc, srv)
}

func _Data_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateApp(ctx, req.(*CreateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateApp(ctx, req.(*UpdateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteApp(ctx, req.(*DeleteAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetApp(ctx, req.(*GetAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetAppByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetAppByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetAppByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetAppByID(ctx, req.(*GetAppByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetAppByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetAppByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetAppByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetAppByName(ctx, req.(*GetAppByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListAppsRest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListAppsRest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListAppsRest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListAppsRest(ctx, req.(*ListAppsRestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListAppsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsByIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListAppsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListAppsByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListAppsByIDs(ctx, req.(*ListAppsByIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateConfigItem(ctx, req.(*CreateConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_BatchUpsertConfigItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpsertConfigItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).BatchUpsertConfigItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_BatchUpsertConfigItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).BatchUpsertConfigItems(ctx, req.(*BatchUpsertConfigItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateConfigItem(ctx, req.(*UpdateConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteConfigItem(ctx, req.(*DeleteConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetConfigItem(ctx, req.(*GetConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListConfigItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListConfigItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListConfigItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListConfigItems(ctx, req.(*ListConfigItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListConfigItemCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigItemCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListConfigItemCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListConfigItemCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListConfigItemCount(ctx, req.(*ListConfigItemCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateContent(ctx, req.(*CreateContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetContent(ctx, req.(*GetContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListContents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListContents(ctx, req.(*ListContentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateCommit(ctx, req.(*CreateCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetLatestCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetLatestCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetLatestCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetLatestCommit(ctx, req.(*GetLatestCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListCommits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListCommits(ctx, req.(*ListCommitsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateRelease(ctx, req.(*CreateReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListReleases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListReleases(ctx, req.(*ListReleasesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetReleasedConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleasedCIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetReleasedConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetReleasedConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetReleasedConfigItem(ctx, req.(*GetReleasedCIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListReleasedConfigItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasedCIsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListReleasedConfigItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListReleasedConfigItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListReleasedConfigItems(ctx, req.(*ListReleasedCIsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateHook(ctx, req.(*CreateHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHooksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListHooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListHooks(ctx, req.(*ListHooksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateHook(ctx, req.(*UpdateHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteHook(ctx, req.(*DeleteHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateTemplateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateTemplateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateTemplateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateTemplateSpace(ctx, req.(*CreateTemplateSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTemplateSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateSpacesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTemplateSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTemplateSpaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTemplateSpaces(ctx, req.(*ListTemplateSpacesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateTemplateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateTemplateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateTemplateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateTemplateSpace(ctx, req.(*UpdateTemplateSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteTemplateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteTemplateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteTemplateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteTemplateSpace(ctx, req.(*DeleteTemplateSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateTemplate(ctx, req.(*CreateTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTemplates(ctx, req.(*ListTemplatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateTemplate(ctx, req.(*UpdateTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteTemplate(ctx, req.(*DeleteTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateTemplateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateTemplateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateTemplateRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateTemplateRelease(ctx, req.(*CreateTemplateReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTemplateReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateReleasesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTemplateReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTemplateReleases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTemplateReleases(ctx, req.(*ListTemplateReleasesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteTemplateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteTemplateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteTemplateRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteTemplateRelease(ctx, req.(*DeleteTemplateReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListGroups(ctx, req.(*ListGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListAppGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListAppGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListAppGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListAppGroups(ctx, req.(*ListAppGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateGroup(ctx, req.(*UpdateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteGroup(ctx, req.(*DeleteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CountGroupsReleasedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountGroupsReleasedAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CountGroupsReleasedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CountGroupsReleasedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CountGroupsReleasedApps(ctx, req.(*CountGroupsReleasedAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListGroupRleasesdApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupRleasesdAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListGroupRleasesdApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListGroupRleasesdApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListGroupRleasesdApps(ctx, req.(*ListGroupRleasesdAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).Publish(ctx, req.(*PublishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GenerateReleaseAndPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateReleaseAndPublishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GenerateReleaseAndPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GenerateReleaseAndPublish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GenerateReleaseAndPublish(ctx, req.(*GenerateReleaseAndPublishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateCredential(ctx, req.(*CreateCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListCredentials(ctx, req.(*ListCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteCredential(ctx, req.(*DeleteCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateCredential(ctx, req.(*UpdateCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListCredentialScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialScopesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListCredentialScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListCredentialScopes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListCredentialScopes(ctx, req.(*ListCredentialScopesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateCredentialScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCredentialScopesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateCredentialScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateCredentialScopes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateCredentialScopes(ctx, req.(*UpdateCredentialScopesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListInstances(ctx, req.(*ListInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).Ping(ctx, req.(*PingMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Data_ServiceDesc is the grpc.ServiceDesc for Data service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Data_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbds.Data",
	HandlerType: (*DataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApp",
			Handler:    _Data_CreateApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _Data_UpdateApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _Data_DeleteApp_Handler,
		},
		{
			MethodName: "GetApp",
			Handler:    _Data_GetApp_Handler,
		},
		{
			MethodName: "GetAppByID",
			Handler:    _Data_GetAppByID_Handler,
		},
		{
			MethodName: "GetAppByName",
			Handler:    _Data_GetAppByName_Handler,
		},
		{
			MethodName: "ListAppsRest",
			Handler:    _Data_ListAppsRest_Handler,
		},
		{
			MethodName: "ListAppsByIDs",
			Handler:    _Data_ListAppsByIDs_Handler,
		},
		{
			MethodName: "CreateConfigItem",
			Handler:    _Data_CreateConfigItem_Handler,
		},
		{
			MethodName: "BatchUpsertConfigItems",
			Handler:    _Data_BatchUpsertConfigItems_Handler,
		},
		{
			MethodName: "UpdateConfigItem",
			Handler:    _Data_UpdateConfigItem_Handler,
		},
		{
			MethodName: "DeleteConfigItem",
			Handler:    _Data_DeleteConfigItem_Handler,
		},
		{
			MethodName: "GetConfigItem",
			Handler:    _Data_GetConfigItem_Handler,
		},
		{
			MethodName: "ListConfigItems",
			Handler:    _Data_ListConfigItems_Handler,
		},
		{
			MethodName: "ListConfigItemCount",
			Handler:    _Data_ListConfigItemCount_Handler,
		},
		{
			MethodName: "CreateContent",
			Handler:    _Data_CreateContent_Handler,
		},
		{
			MethodName: "GetContent",
			Handler:    _Data_GetContent_Handler,
		},
		{
			MethodName: "ListContents",
			Handler:    _Data_ListContents_Handler,
		},
		{
			MethodName: "CreateCommit",
			Handler:    _Data_CreateCommit_Handler,
		},
		{
			MethodName: "GetLatestCommit",
			Handler:    _Data_GetLatestCommit_Handler,
		},
		{
			MethodName: "ListCommits",
			Handler:    _Data_ListCommits_Handler,
		},
		{
			MethodName: "CreateRelease",
			Handler:    _Data_CreateRelease_Handler,
		},
		{
			MethodName: "ListReleases",
			Handler:    _Data_ListReleases_Handler,
		},
		{
			MethodName: "GetReleasedConfigItem",
			Handler:    _Data_GetReleasedConfigItem_Handler,
		},
		{
			MethodName: "ListReleasedConfigItems",
			Handler:    _Data_ListReleasedConfigItems_Handler,
		},
		{
			MethodName: "CreateHook",
			Handler:    _Data_CreateHook_Handler,
		},
		{
			MethodName: "ListHooks",
			Handler:    _Data_ListHooks_Handler,
		},
		{
			MethodName: "UpdateHook",
			Handler:    _Data_UpdateHook_Handler,
		},
		{
			MethodName: "DeleteHook",
			Handler:    _Data_DeleteHook_Handler,
		},
		{
			MethodName: "CreateTemplateSpace",
			Handler:    _Data_CreateTemplateSpace_Handler,
		},
		{
			MethodName: "ListTemplateSpaces",
			Handler:    _Data_ListTemplateSpaces_Handler,
		},
		{
			MethodName: "UpdateTemplateSpace",
			Handler:    _Data_UpdateTemplateSpace_Handler,
		},
		{
			MethodName: "DeleteTemplateSpace",
			Handler:    _Data_DeleteTemplateSpace_Handler,
		},
		{
			MethodName: "CreateTemplate",
			Handler:    _Data_CreateTemplate_Handler,
		},
		{
			MethodName: "ListTemplates",
			Handler:    _Data_ListTemplates_Handler,
		},
		{
			MethodName: "UpdateTemplate",
			Handler:    _Data_UpdateTemplate_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _Data_DeleteTemplate_Handler,
		},
		{
			MethodName: "CreateTemplateRelease",
			Handler:    _Data_CreateTemplateRelease_Handler,
		},
		{
			MethodName: "ListTemplateReleases",
			Handler:    _Data_ListTemplateReleases_Handler,
		},
		{
			MethodName: "DeleteTemplateRelease",
			Handler:    _Data_DeleteTemplateRelease_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Data_CreateGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _Data_ListGroups_Handler,
		},
		{
			MethodName: "ListAppGroups",
			Handler:    _Data_ListAppGroups_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _Data_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Data_DeleteGroup_Handler,
		},
		{
			MethodName: "CountGroupsReleasedApps",
			Handler:    _Data_CountGroupsReleasedApps_Handler,
		},
		{
			MethodName: "ListGroupRleasesdApps",
			Handler:    _Data_ListGroupRleasesdApps_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _Data_Publish_Handler,
		},
		{
			MethodName: "GenerateReleaseAndPublish",
			Handler:    _Data_GenerateReleaseAndPublish_Handler,
		},
		{
			MethodName: "CreateCredential",
			Handler:    _Data_CreateCredential_Handler,
		},
		{
			MethodName: "ListCredentials",
			Handler:    _Data_ListCredentials_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _Data_DeleteCredential_Handler,
		},
		{
			MethodName: "UpdateCredential",
			Handler:    _Data_UpdateCredential_Handler,
		},
		{
			MethodName: "ListCredentialScopes",
			Handler:    _Data_ListCredentialScopes_Handler,
		},
		{
			MethodName: "UpdateCredentialScopes",
			Handler:    _Data_UpdateCredentialScopes_Handler,
		},
		{
			MethodName: "ListInstances",
			Handler:    _Data_ListInstances_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Data_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data_service.proto",
}
