// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: data_service.proto

package pbds

import (
	context "context"
	app "github.com/TencentBlueking/bk-bcs/bcs-services/bcs-bscp/pkg/protocol/core/app"
	base "github.com/TencentBlueking/bk-bcs/bcs-services/bcs-bscp/pkg/protocol/core/base"
	commit "github.com/TencentBlueking/bk-bcs/bcs-services/bcs-bscp/pkg/protocol/core/commit"
	config_item "github.com/TencentBlueking/bk-bcs/bcs-services/bcs-bscp/pkg/protocol/core/config-item"
	content "github.com/TencentBlueking/bk-bcs/bcs-services/bcs-bscp/pkg/protocol/core/content"
	group "github.com/TencentBlueking/bk-bcs/bcs-services/bcs-bscp/pkg/protocol/core/group"
	hook_revision "github.com/TencentBlueking/bk-bcs/bcs-services/bcs-bscp/pkg/protocol/core/hook-revision"
	release "github.com/TencentBlueking/bk-bcs/bcs-services/bcs-bscp/pkg/protocol/core/release"
	released_ci "github.com/TencentBlueking/bk-bcs/bcs-services/bcs-bscp/pkg/protocol/core/released-ci"
	released_kv "github.com/TencentBlueking/bk-bcs/bcs-services/bcs-bscp/pkg/protocol/core/released-kv"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Data_CreateApp_FullMethodName                         = "/pbds.Data/CreateApp"
	Data_UpdateApp_FullMethodName                         = "/pbds.Data/UpdateApp"
	Data_DeleteApp_FullMethodName                         = "/pbds.Data/DeleteApp"
	Data_GetApp_FullMethodName                            = "/pbds.Data/GetApp"
	Data_GetAppByID_FullMethodName                        = "/pbds.Data/GetAppByID"
	Data_GetAppByName_FullMethodName                      = "/pbds.Data/GetAppByName"
	Data_ListAppsRest_FullMethodName                      = "/pbds.Data/ListAppsRest"
	Data_ListAppsByIDs_FullMethodName                     = "/pbds.Data/ListAppsByIDs"
	Data_CreateConfigItem_FullMethodName                  = "/pbds.Data/CreateConfigItem"
	Data_BatchUpsertConfigItems_FullMethodName            = "/pbds.Data/BatchUpsertConfigItems"
	Data_UpdateConfigItem_FullMethodName                  = "/pbds.Data/UpdateConfigItem"
	Data_DeleteConfigItem_FullMethodName                  = "/pbds.Data/DeleteConfigItem"
	Data_GetConfigItem_FullMethodName                     = "/pbds.Data/GetConfigItem"
	Data_ListConfigItems_FullMethodName                   = "/pbds.Data/ListConfigItems"
	Data_ListReleasedConfigItems_FullMethodName           = "/pbds.Data/ListReleasedConfigItems"
	Data_ListConfigItemCount_FullMethodName               = "/pbds.Data/ListConfigItemCount"
	Data_ListConfigItemByTuple_FullMethodName             = "/pbds.Data/ListConfigItemByTuple"
	Data_UpdateConfigHook_FullMethodName                  = "/pbds.Data/UpdateConfigHook"
	Data_CreateContent_FullMethodName                     = "/pbds.Data/CreateContent"
	Data_GetContent_FullMethodName                        = "/pbds.Data/GetContent"
	Data_CreateCommit_FullMethodName                      = "/pbds.Data/CreateCommit"
	Data_GetLatestCommit_FullMethodName                   = "/pbds.Data/GetLatestCommit"
	Data_CreateRelease_FullMethodName                     = "/pbds.Data/CreateRelease"
	Data_ListReleases_FullMethodName                      = "/pbds.Data/ListReleases"
	Data_GetReleaseByName_FullMethodName                  = "/pbds.Data/GetReleaseByName"
	Data_DeprecateRelease_FullMethodName                  = "/pbds.Data/DeprecateRelease"
	Data_UnDeprecateRelease_FullMethodName                = "/pbds.Data/UnDeprecateRelease"
	Data_DeleteRelease_FullMethodName                     = "/pbds.Data/DeleteRelease"
	Data_GetReleasedConfigItem_FullMethodName             = "/pbds.Data/GetReleasedConfigItem"
	Data_GetReleasedKv_FullMethodName                     = "/pbds.Data/GetReleasedKv"
	Data_ListReleasedKvs_FullMethodName                   = "/pbds.Data/ListReleasedKvs"
	Data_CreateHook_FullMethodName                        = "/pbds.Data/CreateHook"
	Data_ListHooks_FullMethodName                         = "/pbds.Data/ListHooks"
	Data_DeleteHook_FullMethodName                        = "/pbds.Data/DeleteHook"
	Data_ListHookTags_FullMethodName                      = "/pbds.Data/ListHookTags"
	Data_ListHookReferences_FullMethodName                = "/pbds.Data/ListHookReferences"
	Data_GetHook_FullMethodName                           = "/pbds.Data/GetHook"
	Data_CreateHookRevision_FullMethodName                = "/pbds.Data/CreateHookRevision"
	Data_ListHookRevisions_FullMethodName                 = "/pbds.Data/ListHookRevisions"
	Data_GetHookRevisionByID_FullMethodName               = "/pbds.Data/GetHookRevisionByID"
	Data_DeleteHookRevision_FullMethodName                = "/pbds.Data/DeleteHookRevision"
	Data_PublishHookRevision_FullMethodName               = "/pbds.Data/PublishHookRevision"
	Data_GetHookRevisionByPubState_FullMethodName         = "/pbds.Data/GetHookRevisionByPubState"
	Data_UpdateHookRevision_FullMethodName                = "/pbds.Data/UpdateHookRevision"
	Data_ListHookRevisionReferences_FullMethodName        = "/pbds.Data/ListHookRevisionReferences"
	Data_GetReleaseHook_FullMethodName                    = "/pbds.Data/GetReleaseHook"
	Data_CreateTemplateSpace_FullMethodName               = "/pbds.Data/CreateTemplateSpace"
	Data_ListTemplateSpaces_FullMethodName                = "/pbds.Data/ListTemplateSpaces"
	Data_UpdateTemplateSpace_FullMethodName               = "/pbds.Data/UpdateTemplateSpace"
	Data_DeleteTemplateSpace_FullMethodName               = "/pbds.Data/DeleteTemplateSpace"
	Data_GetAllBizsOfTmplSpaces_FullMethodName            = "/pbds.Data/GetAllBizsOfTmplSpaces"
	Data_CreateDefaultTmplSpace_FullMethodName            = "/pbds.Data/CreateDefaultTmplSpace"
	Data_ListTmplSpacesByIDs_FullMethodName               = "/pbds.Data/ListTmplSpacesByIDs"
	Data_CreateTemplate_FullMethodName                    = "/pbds.Data/CreateTemplate"
	Data_ListTemplates_FullMethodName                     = "/pbds.Data/ListTemplates"
	Data_UpdateTemplate_FullMethodName                    = "/pbds.Data/UpdateTemplate"
	Data_DeleteTemplate_FullMethodName                    = "/pbds.Data/DeleteTemplate"
	Data_BatchDeleteTemplate_FullMethodName               = "/pbds.Data/BatchDeleteTemplate"
	Data_AddTmplsToTmplSets_FullMethodName                = "/pbds.Data/AddTmplsToTmplSets"
	Data_DeleteTmplsFromTmplSets_FullMethodName           = "/pbds.Data/DeleteTmplsFromTmplSets"
	Data_ListTemplatesByIDs_FullMethodName                = "/pbds.Data/ListTemplatesByIDs"
	Data_ListTemplatesNotBound_FullMethodName             = "/pbds.Data/ListTemplatesNotBound"
	Data_ListTmplsOfTmplSet_FullMethodName                = "/pbds.Data/ListTmplsOfTmplSet"
	Data_ListTemplateByTuple_FullMethodName               = "/pbds.Data/ListTemplateByTuple"
	Data_BatchUpsertTemplates_FullMethodName              = "/pbds.Data/BatchUpsertTemplates"
	Data_CreateTemplateRevision_FullMethodName            = "/pbds.Data/CreateTemplateRevision"
	Data_ListTemplateRevisions_FullMethodName             = "/pbds.Data/ListTemplateRevisions"
	Data_DeleteTemplateRevision_FullMethodName            = "/pbds.Data/DeleteTemplateRevision"
	Data_ListTemplateRevisionsByIDs_FullMethodName        = "/pbds.Data/ListTemplateRevisionsByIDs"
	Data_ListTmplRevisionNamesByTmplIDs_FullMethodName    = "/pbds.Data/ListTmplRevisionNamesByTmplIDs"
	Data_CreateTemplateSet_FullMethodName                 = "/pbds.Data/CreateTemplateSet"
	Data_ListTemplateSets_FullMethodName                  = "/pbds.Data/ListTemplateSets"
	Data_UpdateTemplateSet_FullMethodName                 = "/pbds.Data/UpdateTemplateSet"
	Data_DeleteTemplateSet_FullMethodName                 = "/pbds.Data/DeleteTemplateSet"
	Data_ListAppTemplateSets_FullMethodName               = "/pbds.Data/ListAppTemplateSets"
	Data_ListTemplateSetsByIDs_FullMethodName             = "/pbds.Data/ListTemplateSetsByIDs"
	Data_ListTemplateSetBriefInfoByIDs_FullMethodName     = "/pbds.Data/ListTemplateSetBriefInfoByIDs"
	Data_ListTmplSetsOfBiz_FullMethodName                 = "/pbds.Data/ListTmplSetsOfBiz"
	Data_CreateAppTemplateBinding_FullMethodName          = "/pbds.Data/CreateAppTemplateBinding"
	Data_ListAppTemplateBindings_FullMethodName           = "/pbds.Data/ListAppTemplateBindings"
	Data_UpdateAppTemplateBinding_FullMethodName          = "/pbds.Data/UpdateAppTemplateBinding"
	Data_DeleteAppTemplateBinding_FullMethodName          = "/pbds.Data/DeleteAppTemplateBinding"
	Data_ListAppBoundTmplRevisions_FullMethodName         = "/pbds.Data/ListAppBoundTmplRevisions"
	Data_ListReleasedAppBoundTmplRevisions_FullMethodName = "/pbds.Data/ListReleasedAppBoundTmplRevisions"
	Data_GetReleasedAppBoundTmplRevision_FullMethodName   = "/pbds.Data/GetReleasedAppBoundTmplRevision"
	Data_CheckAppTemplateBinding_FullMethodName           = "/pbds.Data/CheckAppTemplateBinding"
	Data_ExtractAppTmplVariables_FullMethodName           = "/pbds.Data/ExtractAppTmplVariables"
	Data_GetAppTmplVariableRefs_FullMethodName            = "/pbds.Data/GetAppTmplVariableRefs"
	Data_GetReleasedAppTmplVariableRefs_FullMethodName    = "/pbds.Data/GetReleasedAppTmplVariableRefs"
	Data_UpdateAppTmplVariables_FullMethodName            = "/pbds.Data/UpdateAppTmplVariables"
	Data_ListAppTmplVariables_FullMethodName              = "/pbds.Data/ListAppTmplVariables"
	Data_ListReleasedAppTmplVariables_FullMethodName      = "/pbds.Data/ListReleasedAppTmplVariables"
	Data_ListTmplBoundCounts_FullMethodName               = "/pbds.Data/ListTmplBoundCounts"
	Data_ListTmplRevisionBoundCounts_FullMethodName       = "/pbds.Data/ListTmplRevisionBoundCounts"
	Data_ListTmplSetBoundCounts_FullMethodName            = "/pbds.Data/ListTmplSetBoundCounts"
	Data_ListTmplBoundUnnamedApps_FullMethodName          = "/pbds.Data/ListTmplBoundUnnamedApps"
	Data_ListTmplBoundNamedApps_FullMethodName            = "/pbds.Data/ListTmplBoundNamedApps"
	Data_ListTmplBoundTmplSets_FullMethodName             = "/pbds.Data/ListTmplBoundTmplSets"
	Data_ListMultiTmplBoundTmplSets_FullMethodName        = "/pbds.Data/ListMultiTmplBoundTmplSets"
	Data_ListTmplRevisionBoundUnnamedApps_FullMethodName  = "/pbds.Data/ListTmplRevisionBoundUnnamedApps"
	Data_ListTmplRevisionBoundNamedApps_FullMethodName    = "/pbds.Data/ListTmplRevisionBoundNamedApps"
	Data_ListTmplSetBoundUnnamedApps_FullMethodName       = "/pbds.Data/ListTmplSetBoundUnnamedApps"
	Data_ListMultiTmplSetBoundUnnamedApps_FullMethodName  = "/pbds.Data/ListMultiTmplSetBoundUnnamedApps"
	Data_ListTmplSetBoundNamedApps_FullMethodName         = "/pbds.Data/ListTmplSetBoundNamedApps"
	Data_ListLatestTmplBoundUnnamedApps_FullMethodName    = "/pbds.Data/ListLatestTmplBoundUnnamedApps"
	Data_CreateTemplateVariable_FullMethodName            = "/pbds.Data/CreateTemplateVariable"
	Data_ListTemplateVariables_FullMethodName             = "/pbds.Data/ListTemplateVariables"
	Data_UpdateTemplateVariable_FullMethodName            = "/pbds.Data/UpdateTemplateVariable"
	Data_DeleteTemplateVariable_FullMethodName            = "/pbds.Data/DeleteTemplateVariable"
	Data_ImportTemplateVariables_FullMethodName           = "/pbds.Data/ImportTemplateVariables"
	Data_CreateGroup_FullMethodName                       = "/pbds.Data/CreateGroup"
	Data_ListAllGroups_FullMethodName                     = "/pbds.Data/ListAllGroups"
	Data_ListAppGroups_FullMethodName                     = "/pbds.Data/ListAppGroups"
	Data_GetGroupByName_FullMethodName                    = "/pbds.Data/GetGroupByName"
	Data_UpdateGroup_FullMethodName                       = "/pbds.Data/UpdateGroup"
	Data_DeleteGroup_FullMethodName                       = "/pbds.Data/DeleteGroup"
	Data_CountGroupsReleasedApps_FullMethodName           = "/pbds.Data/CountGroupsReleasedApps"
	Data_ListGroupReleasedApps_FullMethodName             = "/pbds.Data/ListGroupReleasedApps"
	Data_Publish_FullMethodName                           = "/pbds.Data/Publish"
	Data_GenerateReleaseAndPublish_FullMethodName         = "/pbds.Data/GenerateReleaseAndPublish"
	Data_CreateCredential_FullMethodName                  = "/pbds.Data/CreateCredential"
	Data_ListCredentials_FullMethodName                   = "/pbds.Data/ListCredentials"
	Data_DeleteCredential_FullMethodName                  = "/pbds.Data/DeleteCredential"
	Data_UpdateCredential_FullMethodName                  = "/pbds.Data/UpdateCredential"
	Data_ListCredentialScopes_FullMethodName              = "/pbds.Data/ListCredentialScopes"
	Data_UpdateCredentialScopes_FullMethodName            = "/pbds.Data/UpdateCredentialScopes"
	Data_CreateKv_FullMethodName                          = "/pbds.Data/CreateKv"
	Data_UpdateKv_FullMethodName                          = "/pbds.Data/UpdateKv"
	Data_ListKvs_FullMethodName                           = "/pbds.Data/ListKvs"
	Data_DeleteKv_FullMethodName                          = "/pbds.Data/DeleteKv"
	Data_BatchUpsertKvs_FullMethodName                    = "/pbds.Data/BatchUpsertKvs"
	Data_UnDeleteKv_FullMethodName                        = "/pbds.Data/UnDeleteKv"
	Data_ListInstances_FullMethodName                     = "/pbds.Data/ListInstances"
	Data_FetchInstanceInfo_FullMethodName                 = "/pbds.Data/FetchInstanceInfo"
	Data_Ping_FullMethodName                              = "/pbds.Data/Ping"
)

// DataClient is the client API for Data service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataClient interface {
	// app related interface.
	CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateResp, error)
	UpdateApp(ctx context.Context, in *UpdateAppReq, opts ...grpc.CallOption) (*app.App, error)
	DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	GetApp(ctx context.Context, in *GetAppReq, opts ...grpc.CallOption) (*app.App, error)
	GetAppByID(ctx context.Context, in *GetAppByIDReq, opts ...grpc.CallOption) (*app.App, error)
	GetAppByName(ctx context.Context, in *GetAppByNameReq, opts ...grpc.CallOption) (*app.App, error)
	ListAppsRest(ctx context.Context, in *ListAppsRestReq, opts ...grpc.CallOption) (*ListAppsResp, error)
	ListAppsByIDs(ctx context.Context, in *ListAppsByIDsReq, opts ...grpc.CallOption) (*ListAppsByIDsResp, error)
	// config item related interface.
	CreateConfigItem(ctx context.Context, in *CreateConfigItemReq, opts ...grpc.CallOption) (*CreateResp, error)
	BatchUpsertConfigItems(ctx context.Context, in *BatchUpsertConfigItemsReq, opts ...grpc.CallOption) (*BatchUpsertConfigItemsResp, error)
	UpdateConfigItem(ctx context.Context, in *UpdateConfigItemReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	DeleteConfigItem(ctx context.Context, in *DeleteConfigItemReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	GetConfigItem(ctx context.Context, in *GetConfigItemReq, opts ...grpc.CallOption) (*config_item.ConfigItem, error)
	ListConfigItems(ctx context.Context, in *ListConfigItemsReq, opts ...grpc.CallOption) (*ListConfigItemsResp, error)
	ListReleasedConfigItems(ctx context.Context, in *ListReleasedConfigItemsReq, opts ...grpc.CallOption) (*ListReleasedConfigItemsResp, error)
	ListConfigItemCount(ctx context.Context, in *ListConfigItemCountReq, opts ...grpc.CallOption) (*ListConfigItemCountResp, error)
	ListConfigItemByTuple(ctx context.Context, in *ListConfigItemByTupleReq, opts ...grpc.CallOption) (*ListConfigItemByTupleResp, error)
	// config hook related interface.
	UpdateConfigHook(ctx context.Context, in *UpdateConfigHookReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	// content related interface.
	CreateContent(ctx context.Context, in *CreateContentReq, opts ...grpc.CallOption) (*CreateResp, error)
	GetContent(ctx context.Context, in *GetContentReq, opts ...grpc.CallOption) (*content.Content, error)
	// commit related interface.
	CreateCommit(ctx context.Context, in *CreateCommitReq, opts ...grpc.CallOption) (*CreateResp, error)
	GetLatestCommit(ctx context.Context, in *GetLatestCommitReq, opts ...grpc.CallOption) (*commit.Commit, error)
	// release related interface.
	CreateRelease(ctx context.Context, in *CreateReleaseReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListReleases(ctx context.Context, in *ListReleasesReq, opts ...grpc.CallOption) (*ListReleasesResp, error)
	GetReleaseByName(ctx context.Context, in *GetReleaseByNameReq, opts ...grpc.CallOption) (*release.Release, error)
	DeprecateRelease(ctx context.Context, in *DeprecateReleaseReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	UnDeprecateRelease(ctx context.Context, in *UnDeprecateReleaseReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	DeleteRelease(ctx context.Context, in *DeleteReleaseReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	// released config item related interface.
	GetReleasedConfigItem(ctx context.Context, in *GetReleasedCIReq, opts ...grpc.CallOption) (*released_ci.ReleasedConfigItem, error)
	// released kv related interface.
	GetReleasedKv(ctx context.Context, in *GetReleasedKvReq, opts ...grpc.CallOption) (*released_kv.ReleasedKv, error)
	ListReleasedKvs(ctx context.Context, in *ListReleasedKvReq, opts ...grpc.CallOption) (*ListReleasedKvResp, error)
	// hook related interface.
	CreateHook(ctx context.Context, in *CreateHookReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListHooks(ctx context.Context, in *ListHooksReq, opts ...grpc.CallOption) (*ListHooksResp, error)
	DeleteHook(ctx context.Context, in *DeleteHookReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	ListHookTags(ctx context.Context, in *ListHookTagReq, opts ...grpc.CallOption) (*ListHookTagResp, error)
	ListHookReferences(ctx context.Context, in *ListHookReferencesReq, opts ...grpc.CallOption) (*ListHookReferencesResp, error)
	GetHook(ctx context.Context, in *GetHookReq, opts ...grpc.CallOption) (*GetHookResp, error)
	// hook revision related interface.
	CreateHookRevision(ctx context.Context, in *CreateHookRevisionReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListHookRevisions(ctx context.Context, in *ListHookRevisionsReq, opts ...grpc.CallOption) (*ListHookRevisionsResp, error)
	GetHookRevisionByID(ctx context.Context, in *GetHookRevisionByIdReq, opts ...grpc.CallOption) (*hook_revision.HookRevision, error)
	DeleteHookRevision(ctx context.Context, in *DeleteHookRevisionReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	PublishHookRevision(ctx context.Context, in *PublishHookRevisionReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	GetHookRevisionByPubState(ctx context.Context, in *GetByPubStateReq, opts ...grpc.CallOption) (*hook_revision.HookRevision, error)
	UpdateHookRevision(ctx context.Context, in *UpdateHookRevisionReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	ListHookRevisionReferences(ctx context.Context, in *ListHookRevisionReferencesReq, opts ...grpc.CallOption) (*ListHookRevisionReferencesResp, error)
	GetReleaseHook(ctx context.Context, in *GetReleaseHookReq, opts ...grpc.CallOption) (*GetReleaseHookResp, error)
	// template space related interface.
	CreateTemplateSpace(ctx context.Context, in *CreateTemplateSpaceReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListTemplateSpaces(ctx context.Context, in *ListTemplateSpacesReq, opts ...grpc.CallOption) (*ListTemplateSpacesResp, error)
	UpdateTemplateSpace(ctx context.Context, in *UpdateTemplateSpaceReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	DeleteTemplateSpace(ctx context.Context, in *DeleteTemplateSpaceReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	GetAllBizsOfTmplSpaces(ctx context.Context, in *base.EmptyReq, opts ...grpc.CallOption) (*GetAllBizsOfTmplSpacesResp, error)
	CreateDefaultTmplSpace(ctx context.Context, in *CreateDefaultTmplSpaceReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListTmplSpacesByIDs(ctx context.Context, in *ListTmplSpacesByIDsReq, opts ...grpc.CallOption) (*ListTmplSpacesByIDsResp, error)
	// template related interface.
	CreateTemplate(ctx context.Context, in *CreateTemplateReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListTemplates(ctx context.Context, in *ListTemplatesReq, opts ...grpc.CallOption) (*ListTemplatesResp, error)
	UpdateTemplate(ctx context.Context, in *UpdateTemplateReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	DeleteTemplate(ctx context.Context, in *DeleteTemplateReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	BatchDeleteTemplate(ctx context.Context, in *BatchDeleteTemplateReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	AddTmplsToTmplSets(ctx context.Context, in *AddTmplsToTmplSetsReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	DeleteTmplsFromTmplSets(ctx context.Context, in *DeleteTmplsFromTmplSetsReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	ListTemplatesByIDs(ctx context.Context, in *ListTemplatesByIDsReq, opts ...grpc.CallOption) (*ListTemplatesByIDsResp, error)
	ListTemplatesNotBound(ctx context.Context, in *ListTemplatesNotBoundReq, opts ...grpc.CallOption) (*ListTemplatesNotBoundResp, error)
	ListTmplsOfTmplSet(ctx context.Context, in *ListTmplsOfTmplSetReq, opts ...grpc.CallOption) (*ListTmplsOfTmplSetResp, error)
	ListTemplateByTuple(ctx context.Context, in *ListTemplateByTupleReq, opts ...grpc.CallOption) (*ListTemplateByTupleReqResp, error)
	BatchUpsertTemplates(ctx context.Context, in *BatchUpsertTemplatesReq, opts ...grpc.CallOption) (*BatchUpsertTemplatesReqResp, error)
	// template release related interface.
	CreateTemplateRevision(ctx context.Context, in *CreateTemplateRevisionReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListTemplateRevisions(ctx context.Context, in *ListTemplateRevisionsReq, opts ...grpc.CallOption) (*ListTemplateRevisionsResp, error)
	DeleteTemplateRevision(ctx context.Context, in *DeleteTemplateRevisionReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	ListTemplateRevisionsByIDs(ctx context.Context, in *ListTemplateRevisionsByIDsReq, opts ...grpc.CallOption) (*ListTemplateRevisionsByIDsResp, error)
	ListTmplRevisionNamesByTmplIDs(ctx context.Context, in *ListTmplRevisionNamesByTmplIDsReq, opts ...grpc.CallOption) (*ListTmplRevisionNamesByTmplIDsResp, error)
	// template set related interface.
	CreateTemplateSet(ctx context.Context, in *CreateTemplateSetReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListTemplateSets(ctx context.Context, in *ListTemplateSetsReq, opts ...grpc.CallOption) (*ListTemplateSetsResp, error)
	UpdateTemplateSet(ctx context.Context, in *UpdateTemplateSetReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	DeleteTemplateSet(ctx context.Context, in *DeleteTemplateSetReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	ListAppTemplateSets(ctx context.Context, in *ListAppTemplateSetsReq, opts ...grpc.CallOption) (*ListAppTemplateSetsResp, error)
	ListTemplateSetsByIDs(ctx context.Context, in *ListTemplateSetsByIDsReq, opts ...grpc.CallOption) (*ListTemplateSetsByIDsResp, error)
	ListTemplateSetBriefInfoByIDs(ctx context.Context, in *ListTemplateSetBriefInfoByIDsReq, opts ...grpc.CallOption) (*ListTemplateSetBriefInfoByIDsResp, error)
	ListTmplSetsOfBiz(ctx context.Context, in *ListTmplSetsOfBizReq, opts ...grpc.CallOption) (*ListTmplSetsOfBizResp, error)
	// app template binding related interface.
	CreateAppTemplateBinding(ctx context.Context, in *CreateAppTemplateBindingReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListAppTemplateBindings(ctx context.Context, in *ListAppTemplateBindingsReq, opts ...grpc.CallOption) (*ListAppTemplateBindingsResp, error)
	UpdateAppTemplateBinding(ctx context.Context, in *UpdateAppTemplateBindingReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	DeleteAppTemplateBinding(ctx context.Context, in *DeleteAppTemplateBindingReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	ListAppBoundTmplRevisions(ctx context.Context, in *ListAppBoundTmplRevisionsReq, opts ...grpc.CallOption) (*ListAppBoundTmplRevisionsResp, error)
	ListReleasedAppBoundTmplRevisions(ctx context.Context, in *ListReleasedAppBoundTmplRevisionsReq, opts ...grpc.CallOption) (*ListReleasedAppBoundTmplRevisionsResp, error)
	GetReleasedAppBoundTmplRevision(ctx context.Context, in *GetReleasedAppBoundTmplRevisionReq, opts ...grpc.CallOption) (*GetReleasedAppBoundTmplRevisionResp, error)
	CheckAppTemplateBinding(ctx context.Context, in *CheckAppTemplateBindingReq, opts ...grpc.CallOption) (*CheckAppTemplateBindingResp, error)
	// app template variables related interface.
	ExtractAppTmplVariables(ctx context.Context, in *ExtractAppTmplVariablesReq, opts ...grpc.CallOption) (*ExtractAppTmplVariablesResp, error)
	GetAppTmplVariableRefs(ctx context.Context, in *GetAppTmplVariableRefsReq, opts ...grpc.CallOption) (*GetAppTmplVariableRefsResp, error)
	GetReleasedAppTmplVariableRefs(ctx context.Context, in *GetReleasedAppTmplVariableRefsReq, opts ...grpc.CallOption) (*GetReleasedAppTmplVariableRefsResp, error)
	UpdateAppTmplVariables(ctx context.Context, in *UpdateAppTmplVariablesReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	ListAppTmplVariables(ctx context.Context, in *ListAppTmplVariablesReq, opts ...grpc.CallOption) (*ListAppTmplVariablesResp, error)
	ListReleasedAppTmplVariables(ctx context.Context, in *ListReleasedAppTmplVariablesReq, opts ...grpc.CallOption) (*ListReleasedAppTmplVariablesResp, error)
	// template binding relation related interface.
	ListTmplBoundCounts(ctx context.Context, in *ListTmplBoundCountsReq, opts ...grpc.CallOption) (*ListTmplBoundCountsResp, error)
	ListTmplRevisionBoundCounts(ctx context.Context, in *ListTmplRevisionBoundCountsReq, opts ...grpc.CallOption) (*ListTmplRevisionBoundCountsResp, error)
	ListTmplSetBoundCounts(ctx context.Context, in *ListTmplSetBoundCountsReq, opts ...grpc.CallOption) (*ListTmplSetBoundCountsResp, error)
	ListTmplBoundUnnamedApps(ctx context.Context, in *ListTmplBoundUnnamedAppsReq, opts ...grpc.CallOption) (*ListTmplBoundUnnamedAppsResp, error)
	ListTmplBoundNamedApps(ctx context.Context, in *ListTmplBoundNamedAppsReq, opts ...grpc.CallOption) (*ListTmplBoundNamedAppsResp, error)
	ListTmplBoundTmplSets(ctx context.Context, in *ListTmplBoundTmplSetsReq, opts ...grpc.CallOption) (*ListTmplBoundTmplSetsResp, error)
	ListMultiTmplBoundTmplSets(ctx context.Context, in *ListMultiTmplBoundTmplSetsReq, opts ...grpc.CallOption) (*ListMultiTmplBoundTmplSetsResp, error)
	ListTmplRevisionBoundUnnamedApps(ctx context.Context, in *ListTmplRevisionBoundUnnamedAppsReq, opts ...grpc.CallOption) (*ListTmplRevisionBoundUnnamedAppsResp, error)
	ListTmplRevisionBoundNamedApps(ctx context.Context, in *ListTmplRevisionBoundNamedAppsReq, opts ...grpc.CallOption) (*ListTmplRevisionBoundNamedAppsResp, error)
	ListTmplSetBoundUnnamedApps(ctx context.Context, in *ListTmplSetBoundUnnamedAppsReq, opts ...grpc.CallOption) (*ListTmplSetBoundUnnamedAppsResp, error)
	ListMultiTmplSetBoundUnnamedApps(ctx context.Context, in *ListMultiTmplSetBoundUnnamedAppsReq, opts ...grpc.CallOption) (*ListMultiTmplSetBoundUnnamedAppsResp, error)
	ListTmplSetBoundNamedApps(ctx context.Context, in *ListTmplSetBoundNamedAppsReq, opts ...grpc.CallOption) (*ListTmplSetBoundNamedAppsResp, error)
	ListLatestTmplBoundUnnamedApps(ctx context.Context, in *ListLatestTmplBoundUnnamedAppsReq, opts ...grpc.CallOption) (*ListLatestTmplBoundUnnamedAppsResp, error)
	// template variable related interface.
	CreateTemplateVariable(ctx context.Context, in *CreateTemplateVariableReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListTemplateVariables(ctx context.Context, in *ListTemplateVariablesReq, opts ...grpc.CallOption) (*ListTemplateVariablesResp, error)
	UpdateTemplateVariable(ctx context.Context, in *UpdateTemplateVariableReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	DeleteTemplateVariable(ctx context.Context, in *DeleteTemplateVariableReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	ImportTemplateVariables(ctx context.Context, in *ImportTemplateVariablesReq, opts ...grpc.CallOption) (*ImportTemplateVariablesResp, error)
	// group related interface.
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListAllGroups(ctx context.Context, in *ListAllGroupsReq, opts ...grpc.CallOption) (*ListAllGroupsResp, error)
	ListAppGroups(ctx context.Context, in *ListAppGroupsReq, opts ...grpc.CallOption) (*ListAppGroupsResp, error)
	GetGroupByName(ctx context.Context, in *GetGroupByNameReq, opts ...grpc.CallOption) (*group.Group, error)
	UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	// group current release related interface.
	CountGroupsReleasedApps(ctx context.Context, in *CountGroupsReleasedAppsReq, opts ...grpc.CallOption) (*CountGroupsReleasedAppsResp, error)
	ListGroupReleasedApps(ctx context.Context, in *ListGroupReleasedAppsReq, opts ...grpc.CallOption) (*ListGroupReleasedAppsResp, error)
	// publish related interface.
	Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishResp, error)
	GenerateReleaseAndPublish(ctx context.Context, in *GenerateReleaseAndPublishReq, opts ...grpc.CallOption) (*PublishResp, error)
	// credential related interface
	CreateCredential(ctx context.Context, in *CreateCredentialReq, opts ...grpc.CallOption) (*CreateResp, error)
	ListCredentials(ctx context.Context, in *ListCredentialReq, opts ...grpc.CallOption) (*ListCredentialResp, error)
	DeleteCredential(ctx context.Context, in *DeleteCredentialReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	UpdateCredential(ctx context.Context, in *UpdateCredentialReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	// credential scope related interface
	ListCredentialScopes(ctx context.Context, in *ListCredentialScopesReq, opts ...grpc.CallOption) (*ListCredentialScopesResp, error)
	UpdateCredentialScopes(ctx context.Context, in *UpdateCredentialScopesReq, opts ...grpc.CallOption) (*UpdateCredentialScopesResp, error)
	// kv related interface
	CreateKv(ctx context.Context, in *CreateKvReq, opts ...grpc.CallOption) (*CreateResp, error)
	UpdateKv(ctx context.Context, in *UpdateKvReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	ListKvs(ctx context.Context, in *ListKvsReq, opts ...grpc.CallOption) (*ListKvsResp, error)
	DeleteKv(ctx context.Context, in *DeleteKvReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	BatchUpsertKvs(ctx context.Context, in *BatchUpsertKvsReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	UnDeleteKv(ctx context.Context, in *UnDeleteKvReq, opts ...grpc.CallOption) (*base.EmptyResp, error)
	// used iam pull resource callback.
	ListInstances(ctx context.Context, in *ListInstancesReq, opts ...grpc.CallOption) (*ListInstancesResp, error)
	FetchInstanceInfo(ctx context.Context, in *FetchInstanceInfoReq, opts ...grpc.CallOption) (*FetchInstanceInfoResp, error)
	// Ping verifies if the grpc connection is still alive.
	Ping(ctx context.Context, in *PingMsg, opts ...grpc.CallOption) (*PingMsg, error)
}

type dataClient struct {
	cc grpc.ClientConnInterface
}

func NewDataClient(cc grpc.ClientConnInterface) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateApp(ctx context.Context, in *UpdateAppReq, opts ...grpc.CallOption) (*app.App, error) {
	out := new(app.App)
	err := c.cc.Invoke(ctx, Data_UpdateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetApp(ctx context.Context, in *GetAppReq, opts ...grpc.CallOption) (*app.App, error) {
	out := new(app.App)
	err := c.cc.Invoke(ctx, Data_GetApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetAppByID(ctx context.Context, in *GetAppByIDReq, opts ...grpc.CallOption) (*app.App, error) {
	out := new(app.App)
	err := c.cc.Invoke(ctx, Data_GetAppByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetAppByName(ctx context.Context, in *GetAppByNameReq, opts ...grpc.CallOption) (*app.App, error) {
	out := new(app.App)
	err := c.cc.Invoke(ctx, Data_GetAppByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListAppsRest(ctx context.Context, in *ListAppsRestReq, opts ...grpc.CallOption) (*ListAppsResp, error) {
	out := new(ListAppsResp)
	err := c.cc.Invoke(ctx, Data_ListAppsRest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListAppsByIDs(ctx context.Context, in *ListAppsByIDsReq, opts ...grpc.CallOption) (*ListAppsByIDsResp, error) {
	out := new(ListAppsByIDsResp)
	err := c.cc.Invoke(ctx, Data_ListAppsByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateConfigItem(ctx context.Context, in *CreateConfigItemReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) BatchUpsertConfigItems(ctx context.Context, in *BatchUpsertConfigItemsReq, opts ...grpc.CallOption) (*BatchUpsertConfigItemsResp, error) {
	out := new(BatchUpsertConfigItemsResp)
	err := c.cc.Invoke(ctx, Data_BatchUpsertConfigItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateConfigItem(ctx context.Context, in *UpdateConfigItemReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteConfigItem(ctx context.Context, in *DeleteConfigItemReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetConfigItem(ctx context.Context, in *GetConfigItemReq, opts ...grpc.CallOption) (*config_item.ConfigItem, error) {
	out := new(config_item.ConfigItem)
	err := c.cc.Invoke(ctx, Data_GetConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListConfigItems(ctx context.Context, in *ListConfigItemsReq, opts ...grpc.CallOption) (*ListConfigItemsResp, error) {
	out := new(ListConfigItemsResp)
	err := c.cc.Invoke(ctx, Data_ListConfigItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListReleasedConfigItems(ctx context.Context, in *ListReleasedConfigItemsReq, opts ...grpc.CallOption) (*ListReleasedConfigItemsResp, error) {
	out := new(ListReleasedConfigItemsResp)
	err := c.cc.Invoke(ctx, Data_ListReleasedConfigItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListConfigItemCount(ctx context.Context, in *ListConfigItemCountReq, opts ...grpc.CallOption) (*ListConfigItemCountResp, error) {
	out := new(ListConfigItemCountResp)
	err := c.cc.Invoke(ctx, Data_ListConfigItemCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListConfigItemByTuple(ctx context.Context, in *ListConfigItemByTupleReq, opts ...grpc.CallOption) (*ListConfigItemByTupleResp, error) {
	out := new(ListConfigItemByTupleResp)
	err := c.cc.Invoke(ctx, Data_ListConfigItemByTuple_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateConfigHook(ctx context.Context, in *UpdateConfigHookReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateConfigHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateContent(ctx context.Context, in *CreateContentReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetContent(ctx context.Context, in *GetContentReq, opts ...grpc.CallOption) (*content.Content, error) {
	out := new(content.Content)
	err := c.cc.Invoke(ctx, Data_GetContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateCommit(ctx context.Context, in *CreateCommitReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateCommit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetLatestCommit(ctx context.Context, in *GetLatestCommitReq, opts ...grpc.CallOption) (*commit.Commit, error) {
	out := new(commit.Commit)
	err := c.cc.Invoke(ctx, Data_GetLatestCommit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateRelease(ctx context.Context, in *CreateReleaseReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListReleases(ctx context.Context, in *ListReleasesReq, opts ...grpc.CallOption) (*ListReleasesResp, error) {
	out := new(ListReleasesResp)
	err := c.cc.Invoke(ctx, Data_ListReleases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetReleaseByName(ctx context.Context, in *GetReleaseByNameReq, opts ...grpc.CallOption) (*release.Release, error) {
	out := new(release.Release)
	err := c.cc.Invoke(ctx, Data_GetReleaseByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeprecateRelease(ctx context.Context, in *DeprecateReleaseReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeprecateRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UnDeprecateRelease(ctx context.Context, in *UnDeprecateReleaseReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UnDeprecateRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteRelease(ctx context.Context, in *DeleteReleaseReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetReleasedConfigItem(ctx context.Context, in *GetReleasedCIReq, opts ...grpc.CallOption) (*released_ci.ReleasedConfigItem, error) {
	out := new(released_ci.ReleasedConfigItem)
	err := c.cc.Invoke(ctx, Data_GetReleasedConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetReleasedKv(ctx context.Context, in *GetReleasedKvReq, opts ...grpc.CallOption) (*released_kv.ReleasedKv, error) {
	out := new(released_kv.ReleasedKv)
	err := c.cc.Invoke(ctx, Data_GetReleasedKv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListReleasedKvs(ctx context.Context, in *ListReleasedKvReq, opts ...grpc.CallOption) (*ListReleasedKvResp, error) {
	out := new(ListReleasedKvResp)
	err := c.cc.Invoke(ctx, Data_ListReleasedKvs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateHook(ctx context.Context, in *CreateHookReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListHooks(ctx context.Context, in *ListHooksReq, opts ...grpc.CallOption) (*ListHooksResp, error) {
	out := new(ListHooksResp)
	err := c.cc.Invoke(ctx, Data_ListHooks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteHook(ctx context.Context, in *DeleteHookReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListHookTags(ctx context.Context, in *ListHookTagReq, opts ...grpc.CallOption) (*ListHookTagResp, error) {
	out := new(ListHookTagResp)
	err := c.cc.Invoke(ctx, Data_ListHookTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListHookReferences(ctx context.Context, in *ListHookReferencesReq, opts ...grpc.CallOption) (*ListHookReferencesResp, error) {
	out := new(ListHookReferencesResp)
	err := c.cc.Invoke(ctx, Data_ListHookReferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetHook(ctx context.Context, in *GetHookReq, opts ...grpc.CallOption) (*GetHookResp, error) {
	out := new(GetHookResp)
	err := c.cc.Invoke(ctx, Data_GetHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateHookRevision(ctx context.Context, in *CreateHookRevisionReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateHookRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListHookRevisions(ctx context.Context, in *ListHookRevisionsReq, opts ...grpc.CallOption) (*ListHookRevisionsResp, error) {
	out := new(ListHookRevisionsResp)
	err := c.cc.Invoke(ctx, Data_ListHookRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetHookRevisionByID(ctx context.Context, in *GetHookRevisionByIdReq, opts ...grpc.CallOption) (*hook_revision.HookRevision, error) {
	out := new(hook_revision.HookRevision)
	err := c.cc.Invoke(ctx, Data_GetHookRevisionByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteHookRevision(ctx context.Context, in *DeleteHookRevisionReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteHookRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) PublishHookRevision(ctx context.Context, in *PublishHookRevisionReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_PublishHookRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetHookRevisionByPubState(ctx context.Context, in *GetByPubStateReq, opts ...grpc.CallOption) (*hook_revision.HookRevision, error) {
	out := new(hook_revision.HookRevision)
	err := c.cc.Invoke(ctx, Data_GetHookRevisionByPubState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateHookRevision(ctx context.Context, in *UpdateHookRevisionReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateHookRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListHookRevisionReferences(ctx context.Context, in *ListHookRevisionReferencesReq, opts ...grpc.CallOption) (*ListHookRevisionReferencesResp, error) {
	out := new(ListHookRevisionReferencesResp)
	err := c.cc.Invoke(ctx, Data_ListHookRevisionReferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetReleaseHook(ctx context.Context, in *GetReleaseHookReq, opts ...grpc.CallOption) (*GetReleaseHookResp, error) {
	out := new(GetReleaseHookResp)
	err := c.cc.Invoke(ctx, Data_GetReleaseHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateTemplateSpace(ctx context.Context, in *CreateTemplateSpaceReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateTemplateSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTemplateSpaces(ctx context.Context, in *ListTemplateSpacesReq, opts ...grpc.CallOption) (*ListTemplateSpacesResp, error) {
	out := new(ListTemplateSpacesResp)
	err := c.cc.Invoke(ctx, Data_ListTemplateSpaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateTemplateSpace(ctx context.Context, in *UpdateTemplateSpaceReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateTemplateSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteTemplateSpace(ctx context.Context, in *DeleteTemplateSpaceReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteTemplateSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetAllBizsOfTmplSpaces(ctx context.Context, in *base.EmptyReq, opts ...grpc.CallOption) (*GetAllBizsOfTmplSpacesResp, error) {
	out := new(GetAllBizsOfTmplSpacesResp)
	err := c.cc.Invoke(ctx, Data_GetAllBizsOfTmplSpaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateDefaultTmplSpace(ctx context.Context, in *CreateDefaultTmplSpaceReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateDefaultTmplSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTmplSpacesByIDs(ctx context.Context, in *ListTmplSpacesByIDsReq, opts ...grpc.CallOption) (*ListTmplSpacesByIDsResp, error) {
	out := new(ListTmplSpacesByIDsResp)
	err := c.cc.Invoke(ctx, Data_ListTmplSpacesByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateTemplate(ctx context.Context, in *CreateTemplateReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTemplates(ctx context.Context, in *ListTemplatesReq, opts ...grpc.CallOption) (*ListTemplatesResp, error) {
	out := new(ListTemplatesResp)
	err := c.cc.Invoke(ctx, Data_ListTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateTemplate(ctx context.Context, in *UpdateTemplateReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteTemplate(ctx context.Context, in *DeleteTemplateReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) BatchDeleteTemplate(ctx context.Context, in *BatchDeleteTemplateReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_BatchDeleteTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) AddTmplsToTmplSets(ctx context.Context, in *AddTmplsToTmplSetsReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_AddTmplsToTmplSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteTmplsFromTmplSets(ctx context.Context, in *DeleteTmplsFromTmplSetsReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteTmplsFromTmplSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTemplatesByIDs(ctx context.Context, in *ListTemplatesByIDsReq, opts ...grpc.CallOption) (*ListTemplatesByIDsResp, error) {
	out := new(ListTemplatesByIDsResp)
	err := c.cc.Invoke(ctx, Data_ListTemplatesByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTemplatesNotBound(ctx context.Context, in *ListTemplatesNotBoundReq, opts ...grpc.CallOption) (*ListTemplatesNotBoundResp, error) {
	out := new(ListTemplatesNotBoundResp)
	err := c.cc.Invoke(ctx, Data_ListTemplatesNotBound_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTmplsOfTmplSet(ctx context.Context, in *ListTmplsOfTmplSetReq, opts ...grpc.CallOption) (*ListTmplsOfTmplSetResp, error) {
	out := new(ListTmplsOfTmplSetResp)
	err := c.cc.Invoke(ctx, Data_ListTmplsOfTmplSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTemplateByTuple(ctx context.Context, in *ListTemplateByTupleReq, opts ...grpc.CallOption) (*ListTemplateByTupleReqResp, error) {
	out := new(ListTemplateByTupleReqResp)
	err := c.cc.Invoke(ctx, Data_ListTemplateByTuple_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) BatchUpsertTemplates(ctx context.Context, in *BatchUpsertTemplatesReq, opts ...grpc.CallOption) (*BatchUpsertTemplatesReqResp, error) {
	out := new(BatchUpsertTemplatesReqResp)
	err := c.cc.Invoke(ctx, Data_BatchUpsertTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateTemplateRevision(ctx context.Context, in *CreateTemplateRevisionReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateTemplateRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTemplateRevisions(ctx context.Context, in *ListTemplateRevisionsReq, opts ...grpc.CallOption) (*ListTemplateRevisionsResp, error) {
	out := new(ListTemplateRevisionsResp)
	err := c.cc.Invoke(ctx, Data_ListTemplateRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteTemplateRevision(ctx context.Context, in *DeleteTemplateRevisionReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteTemplateRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTemplateRevisionsByIDs(ctx context.Context, in *ListTemplateRevisionsByIDsReq, opts ...grpc.CallOption) (*ListTemplateRevisionsByIDsResp, error) {
	out := new(ListTemplateRevisionsByIDsResp)
	err := c.cc.Invoke(ctx, Data_ListTemplateRevisionsByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTmplRevisionNamesByTmplIDs(ctx context.Context, in *ListTmplRevisionNamesByTmplIDsReq, opts ...grpc.CallOption) (*ListTmplRevisionNamesByTmplIDsResp, error) {
	out := new(ListTmplRevisionNamesByTmplIDsResp)
	err := c.cc.Invoke(ctx, Data_ListTmplRevisionNamesByTmplIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateTemplateSet(ctx context.Context, in *CreateTemplateSetReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateTemplateSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTemplateSets(ctx context.Context, in *ListTemplateSetsReq, opts ...grpc.CallOption) (*ListTemplateSetsResp, error) {
	out := new(ListTemplateSetsResp)
	err := c.cc.Invoke(ctx, Data_ListTemplateSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateTemplateSet(ctx context.Context, in *UpdateTemplateSetReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateTemplateSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteTemplateSet(ctx context.Context, in *DeleteTemplateSetReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteTemplateSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListAppTemplateSets(ctx context.Context, in *ListAppTemplateSetsReq, opts ...grpc.CallOption) (*ListAppTemplateSetsResp, error) {
	out := new(ListAppTemplateSetsResp)
	err := c.cc.Invoke(ctx, Data_ListAppTemplateSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTemplateSetsByIDs(ctx context.Context, in *ListTemplateSetsByIDsReq, opts ...grpc.CallOption) (*ListTemplateSetsByIDsResp, error) {
	out := new(ListTemplateSetsByIDsResp)
	err := c.cc.Invoke(ctx, Data_ListTemplateSetsByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTemplateSetBriefInfoByIDs(ctx context.Context, in *ListTemplateSetBriefInfoByIDsReq, opts ...grpc.CallOption) (*ListTemplateSetBriefInfoByIDsResp, error) {
	out := new(ListTemplateSetBriefInfoByIDsResp)
	err := c.cc.Invoke(ctx, Data_ListTemplateSetBriefInfoByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTmplSetsOfBiz(ctx context.Context, in *ListTmplSetsOfBizReq, opts ...grpc.CallOption) (*ListTmplSetsOfBizResp, error) {
	out := new(ListTmplSetsOfBizResp)
	err := c.cc.Invoke(ctx, Data_ListTmplSetsOfBiz_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateAppTemplateBinding(ctx context.Context, in *CreateAppTemplateBindingReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateAppTemplateBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListAppTemplateBindings(ctx context.Context, in *ListAppTemplateBindingsReq, opts ...grpc.CallOption) (*ListAppTemplateBindingsResp, error) {
	out := new(ListAppTemplateBindingsResp)
	err := c.cc.Invoke(ctx, Data_ListAppTemplateBindings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateAppTemplateBinding(ctx context.Context, in *UpdateAppTemplateBindingReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateAppTemplateBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteAppTemplateBinding(ctx context.Context, in *DeleteAppTemplateBindingReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteAppTemplateBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListAppBoundTmplRevisions(ctx context.Context, in *ListAppBoundTmplRevisionsReq, opts ...grpc.CallOption) (*ListAppBoundTmplRevisionsResp, error) {
	out := new(ListAppBoundTmplRevisionsResp)
	err := c.cc.Invoke(ctx, Data_ListAppBoundTmplRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListReleasedAppBoundTmplRevisions(ctx context.Context, in *ListReleasedAppBoundTmplRevisionsReq, opts ...grpc.CallOption) (*ListReleasedAppBoundTmplRevisionsResp, error) {
	out := new(ListReleasedAppBoundTmplRevisionsResp)
	err := c.cc.Invoke(ctx, Data_ListReleasedAppBoundTmplRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetReleasedAppBoundTmplRevision(ctx context.Context, in *GetReleasedAppBoundTmplRevisionReq, opts ...grpc.CallOption) (*GetReleasedAppBoundTmplRevisionResp, error) {
	out := new(GetReleasedAppBoundTmplRevisionResp)
	err := c.cc.Invoke(ctx, Data_GetReleasedAppBoundTmplRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CheckAppTemplateBinding(ctx context.Context, in *CheckAppTemplateBindingReq, opts ...grpc.CallOption) (*CheckAppTemplateBindingResp, error) {
	out := new(CheckAppTemplateBindingResp)
	err := c.cc.Invoke(ctx, Data_CheckAppTemplateBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ExtractAppTmplVariables(ctx context.Context, in *ExtractAppTmplVariablesReq, opts ...grpc.CallOption) (*ExtractAppTmplVariablesResp, error) {
	out := new(ExtractAppTmplVariablesResp)
	err := c.cc.Invoke(ctx, Data_ExtractAppTmplVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetAppTmplVariableRefs(ctx context.Context, in *GetAppTmplVariableRefsReq, opts ...grpc.CallOption) (*GetAppTmplVariableRefsResp, error) {
	out := new(GetAppTmplVariableRefsResp)
	err := c.cc.Invoke(ctx, Data_GetAppTmplVariableRefs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetReleasedAppTmplVariableRefs(ctx context.Context, in *GetReleasedAppTmplVariableRefsReq, opts ...grpc.CallOption) (*GetReleasedAppTmplVariableRefsResp, error) {
	out := new(GetReleasedAppTmplVariableRefsResp)
	err := c.cc.Invoke(ctx, Data_GetReleasedAppTmplVariableRefs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateAppTmplVariables(ctx context.Context, in *UpdateAppTmplVariablesReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateAppTmplVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListAppTmplVariables(ctx context.Context, in *ListAppTmplVariablesReq, opts ...grpc.CallOption) (*ListAppTmplVariablesResp, error) {
	out := new(ListAppTmplVariablesResp)
	err := c.cc.Invoke(ctx, Data_ListAppTmplVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListReleasedAppTmplVariables(ctx context.Context, in *ListReleasedAppTmplVariablesReq, opts ...grpc.CallOption) (*ListReleasedAppTmplVariablesResp, error) {
	out := new(ListReleasedAppTmplVariablesResp)
	err := c.cc.Invoke(ctx, Data_ListReleasedAppTmplVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTmplBoundCounts(ctx context.Context, in *ListTmplBoundCountsReq, opts ...grpc.CallOption) (*ListTmplBoundCountsResp, error) {
	out := new(ListTmplBoundCountsResp)
	err := c.cc.Invoke(ctx, Data_ListTmplBoundCounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTmplRevisionBoundCounts(ctx context.Context, in *ListTmplRevisionBoundCountsReq, opts ...grpc.CallOption) (*ListTmplRevisionBoundCountsResp, error) {
	out := new(ListTmplRevisionBoundCountsResp)
	err := c.cc.Invoke(ctx, Data_ListTmplRevisionBoundCounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTmplSetBoundCounts(ctx context.Context, in *ListTmplSetBoundCountsReq, opts ...grpc.CallOption) (*ListTmplSetBoundCountsResp, error) {
	out := new(ListTmplSetBoundCountsResp)
	err := c.cc.Invoke(ctx, Data_ListTmplSetBoundCounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTmplBoundUnnamedApps(ctx context.Context, in *ListTmplBoundUnnamedAppsReq, opts ...grpc.CallOption) (*ListTmplBoundUnnamedAppsResp, error) {
	out := new(ListTmplBoundUnnamedAppsResp)
	err := c.cc.Invoke(ctx, Data_ListTmplBoundUnnamedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTmplBoundNamedApps(ctx context.Context, in *ListTmplBoundNamedAppsReq, opts ...grpc.CallOption) (*ListTmplBoundNamedAppsResp, error) {
	out := new(ListTmplBoundNamedAppsResp)
	err := c.cc.Invoke(ctx, Data_ListTmplBoundNamedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTmplBoundTmplSets(ctx context.Context, in *ListTmplBoundTmplSetsReq, opts ...grpc.CallOption) (*ListTmplBoundTmplSetsResp, error) {
	out := new(ListTmplBoundTmplSetsResp)
	err := c.cc.Invoke(ctx, Data_ListTmplBoundTmplSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListMultiTmplBoundTmplSets(ctx context.Context, in *ListMultiTmplBoundTmplSetsReq, opts ...grpc.CallOption) (*ListMultiTmplBoundTmplSetsResp, error) {
	out := new(ListMultiTmplBoundTmplSetsResp)
	err := c.cc.Invoke(ctx, Data_ListMultiTmplBoundTmplSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTmplRevisionBoundUnnamedApps(ctx context.Context, in *ListTmplRevisionBoundUnnamedAppsReq, opts ...grpc.CallOption) (*ListTmplRevisionBoundUnnamedAppsResp, error) {
	out := new(ListTmplRevisionBoundUnnamedAppsResp)
	err := c.cc.Invoke(ctx, Data_ListTmplRevisionBoundUnnamedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTmplRevisionBoundNamedApps(ctx context.Context, in *ListTmplRevisionBoundNamedAppsReq, opts ...grpc.CallOption) (*ListTmplRevisionBoundNamedAppsResp, error) {
	out := new(ListTmplRevisionBoundNamedAppsResp)
	err := c.cc.Invoke(ctx, Data_ListTmplRevisionBoundNamedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTmplSetBoundUnnamedApps(ctx context.Context, in *ListTmplSetBoundUnnamedAppsReq, opts ...grpc.CallOption) (*ListTmplSetBoundUnnamedAppsResp, error) {
	out := new(ListTmplSetBoundUnnamedAppsResp)
	err := c.cc.Invoke(ctx, Data_ListTmplSetBoundUnnamedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListMultiTmplSetBoundUnnamedApps(ctx context.Context, in *ListMultiTmplSetBoundUnnamedAppsReq, opts ...grpc.CallOption) (*ListMultiTmplSetBoundUnnamedAppsResp, error) {
	out := new(ListMultiTmplSetBoundUnnamedAppsResp)
	err := c.cc.Invoke(ctx, Data_ListMultiTmplSetBoundUnnamedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTmplSetBoundNamedApps(ctx context.Context, in *ListTmplSetBoundNamedAppsReq, opts ...grpc.CallOption) (*ListTmplSetBoundNamedAppsResp, error) {
	out := new(ListTmplSetBoundNamedAppsResp)
	err := c.cc.Invoke(ctx, Data_ListTmplSetBoundNamedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListLatestTmplBoundUnnamedApps(ctx context.Context, in *ListLatestTmplBoundUnnamedAppsReq, opts ...grpc.CallOption) (*ListLatestTmplBoundUnnamedAppsResp, error) {
	out := new(ListLatestTmplBoundUnnamedAppsResp)
	err := c.cc.Invoke(ctx, Data_ListLatestTmplBoundUnnamedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateTemplateVariable(ctx context.Context, in *CreateTemplateVariableReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateTemplateVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListTemplateVariables(ctx context.Context, in *ListTemplateVariablesReq, opts ...grpc.CallOption) (*ListTemplateVariablesResp, error) {
	out := new(ListTemplateVariablesResp)
	err := c.cc.Invoke(ctx, Data_ListTemplateVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateTemplateVariable(ctx context.Context, in *UpdateTemplateVariableReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateTemplateVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteTemplateVariable(ctx context.Context, in *DeleteTemplateVariableReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteTemplateVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ImportTemplateVariables(ctx context.Context, in *ImportTemplateVariablesReq, opts ...grpc.CallOption) (*ImportTemplateVariablesResp, error) {
	out := new(ImportTemplateVariablesResp)
	err := c.cc.Invoke(ctx, Data_ImportTemplateVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListAllGroups(ctx context.Context, in *ListAllGroupsReq, opts ...grpc.CallOption) (*ListAllGroupsResp, error) {
	out := new(ListAllGroupsResp)
	err := c.cc.Invoke(ctx, Data_ListAllGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListAppGroups(ctx context.Context, in *ListAppGroupsReq, opts ...grpc.CallOption) (*ListAppGroupsResp, error) {
	out := new(ListAppGroupsResp)
	err := c.cc.Invoke(ctx, Data_ListAppGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GetGroupByName(ctx context.Context, in *GetGroupByNameReq, opts ...grpc.CallOption) (*group.Group, error) {
	out := new(group.Group)
	err := c.cc.Invoke(ctx, Data_GetGroupByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CountGroupsReleasedApps(ctx context.Context, in *CountGroupsReleasedAppsReq, opts ...grpc.CallOption) (*CountGroupsReleasedAppsResp, error) {
	out := new(CountGroupsReleasedAppsResp)
	err := c.cc.Invoke(ctx, Data_CountGroupsReleasedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListGroupReleasedApps(ctx context.Context, in *ListGroupReleasedAppsReq, opts ...grpc.CallOption) (*ListGroupReleasedAppsResp, error) {
	out := new(ListGroupReleasedAppsResp)
	err := c.cc.Invoke(ctx, Data_ListGroupReleasedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishResp, error) {
	out := new(PublishResp)
	err := c.cc.Invoke(ctx, Data_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) GenerateReleaseAndPublish(ctx context.Context, in *GenerateReleaseAndPublishReq, opts ...grpc.CallOption) (*PublishResp, error) {
	out := new(PublishResp)
	err := c.cc.Invoke(ctx, Data_GenerateReleaseAndPublish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateCredential(ctx context.Context, in *CreateCredentialReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListCredentials(ctx context.Context, in *ListCredentialReq, opts ...grpc.CallOption) (*ListCredentialResp, error) {
	out := new(ListCredentialResp)
	err := c.cc.Invoke(ctx, Data_ListCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteCredential(ctx context.Context, in *DeleteCredentialReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateCredential(ctx context.Context, in *UpdateCredentialReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListCredentialScopes(ctx context.Context, in *ListCredentialScopesReq, opts ...grpc.CallOption) (*ListCredentialScopesResp, error) {
	out := new(ListCredentialScopesResp)
	err := c.cc.Invoke(ctx, Data_ListCredentialScopes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateCredentialScopes(ctx context.Context, in *UpdateCredentialScopesReq, opts ...grpc.CallOption) (*UpdateCredentialScopesResp, error) {
	out := new(UpdateCredentialScopesResp)
	err := c.cc.Invoke(ctx, Data_UpdateCredentialScopes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) CreateKv(ctx context.Context, in *CreateKvReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Data_CreateKv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UpdateKv(ctx context.Context, in *UpdateKvReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UpdateKv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListKvs(ctx context.Context, in *ListKvsReq, opts ...grpc.CallOption) (*ListKvsResp, error) {
	out := new(ListKvsResp)
	err := c.cc.Invoke(ctx, Data_ListKvs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) DeleteKv(ctx context.Context, in *DeleteKvReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_DeleteKv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) BatchUpsertKvs(ctx context.Context, in *BatchUpsertKvsReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_BatchUpsertKvs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) UnDeleteKv(ctx context.Context, in *UnDeleteKvReq, opts ...grpc.CallOption) (*base.EmptyResp, error) {
	out := new(base.EmptyResp)
	err := c.cc.Invoke(ctx, Data_UnDeleteKv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ListInstances(ctx context.Context, in *ListInstancesReq, opts ...grpc.CallOption) (*ListInstancesResp, error) {
	out := new(ListInstancesResp)
	err := c.cc.Invoke(ctx, Data_ListInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) FetchInstanceInfo(ctx context.Context, in *FetchInstanceInfoReq, opts ...grpc.CallOption) (*FetchInstanceInfoResp, error) {
	out := new(FetchInstanceInfoResp)
	err := c.cc.Invoke(ctx, Data_FetchInstanceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) Ping(ctx context.Context, in *PingMsg, opts ...grpc.CallOption) (*PingMsg, error) {
	out := new(PingMsg)
	err := c.cc.Invoke(ctx, Data_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServer is the server API for Data service.
// All implementations should embed UnimplementedDataServer
// for forward compatibility
type DataServer interface {
	// app related interface.
	CreateApp(context.Context, *CreateAppReq) (*CreateResp, error)
	UpdateApp(context.Context, *UpdateAppReq) (*app.App, error)
	DeleteApp(context.Context, *DeleteAppReq) (*base.EmptyResp, error)
	GetApp(context.Context, *GetAppReq) (*app.App, error)
	GetAppByID(context.Context, *GetAppByIDReq) (*app.App, error)
	GetAppByName(context.Context, *GetAppByNameReq) (*app.App, error)
	ListAppsRest(context.Context, *ListAppsRestReq) (*ListAppsResp, error)
	ListAppsByIDs(context.Context, *ListAppsByIDsReq) (*ListAppsByIDsResp, error)
	// config item related interface.
	CreateConfigItem(context.Context, *CreateConfigItemReq) (*CreateResp, error)
	BatchUpsertConfigItems(context.Context, *BatchUpsertConfigItemsReq) (*BatchUpsertConfigItemsResp, error)
	UpdateConfigItem(context.Context, *UpdateConfigItemReq) (*base.EmptyResp, error)
	DeleteConfigItem(context.Context, *DeleteConfigItemReq) (*base.EmptyResp, error)
	GetConfigItem(context.Context, *GetConfigItemReq) (*config_item.ConfigItem, error)
	ListConfigItems(context.Context, *ListConfigItemsReq) (*ListConfigItemsResp, error)
	ListReleasedConfigItems(context.Context, *ListReleasedConfigItemsReq) (*ListReleasedConfigItemsResp, error)
	ListConfigItemCount(context.Context, *ListConfigItemCountReq) (*ListConfigItemCountResp, error)
	ListConfigItemByTuple(context.Context, *ListConfigItemByTupleReq) (*ListConfigItemByTupleResp, error)
	// config hook related interface.
	UpdateConfigHook(context.Context, *UpdateConfigHookReq) (*base.EmptyResp, error)
	// content related interface.
	CreateContent(context.Context, *CreateContentReq) (*CreateResp, error)
	GetContent(context.Context, *GetContentReq) (*content.Content, error)
	// commit related interface.
	CreateCommit(context.Context, *CreateCommitReq) (*CreateResp, error)
	GetLatestCommit(context.Context, *GetLatestCommitReq) (*commit.Commit, error)
	// release related interface.
	CreateRelease(context.Context, *CreateReleaseReq) (*CreateResp, error)
	ListReleases(context.Context, *ListReleasesReq) (*ListReleasesResp, error)
	GetReleaseByName(context.Context, *GetReleaseByNameReq) (*release.Release, error)
	DeprecateRelease(context.Context, *DeprecateReleaseReq) (*base.EmptyResp, error)
	UnDeprecateRelease(context.Context, *UnDeprecateReleaseReq) (*base.EmptyResp, error)
	DeleteRelease(context.Context, *DeleteReleaseReq) (*base.EmptyResp, error)
	// released config item related interface.
	GetReleasedConfigItem(context.Context, *GetReleasedCIReq) (*released_ci.ReleasedConfigItem, error)
	// released kv related interface.
	GetReleasedKv(context.Context, *GetReleasedKvReq) (*released_kv.ReleasedKv, error)
	ListReleasedKvs(context.Context, *ListReleasedKvReq) (*ListReleasedKvResp, error)
	// hook related interface.
	CreateHook(context.Context, *CreateHookReq) (*CreateResp, error)
	ListHooks(context.Context, *ListHooksReq) (*ListHooksResp, error)
	DeleteHook(context.Context, *DeleteHookReq) (*base.EmptyResp, error)
	ListHookTags(context.Context, *ListHookTagReq) (*ListHookTagResp, error)
	ListHookReferences(context.Context, *ListHookReferencesReq) (*ListHookReferencesResp, error)
	GetHook(context.Context, *GetHookReq) (*GetHookResp, error)
	// hook revision related interface.
	CreateHookRevision(context.Context, *CreateHookRevisionReq) (*CreateResp, error)
	ListHookRevisions(context.Context, *ListHookRevisionsReq) (*ListHookRevisionsResp, error)
	GetHookRevisionByID(context.Context, *GetHookRevisionByIdReq) (*hook_revision.HookRevision, error)
	DeleteHookRevision(context.Context, *DeleteHookRevisionReq) (*base.EmptyResp, error)
	PublishHookRevision(context.Context, *PublishHookRevisionReq) (*base.EmptyResp, error)
	GetHookRevisionByPubState(context.Context, *GetByPubStateReq) (*hook_revision.HookRevision, error)
	UpdateHookRevision(context.Context, *UpdateHookRevisionReq) (*base.EmptyResp, error)
	ListHookRevisionReferences(context.Context, *ListHookRevisionReferencesReq) (*ListHookRevisionReferencesResp, error)
	GetReleaseHook(context.Context, *GetReleaseHookReq) (*GetReleaseHookResp, error)
	// template space related interface.
	CreateTemplateSpace(context.Context, *CreateTemplateSpaceReq) (*CreateResp, error)
	ListTemplateSpaces(context.Context, *ListTemplateSpacesReq) (*ListTemplateSpacesResp, error)
	UpdateTemplateSpace(context.Context, *UpdateTemplateSpaceReq) (*base.EmptyResp, error)
	DeleteTemplateSpace(context.Context, *DeleteTemplateSpaceReq) (*base.EmptyResp, error)
	GetAllBizsOfTmplSpaces(context.Context, *base.EmptyReq) (*GetAllBizsOfTmplSpacesResp, error)
	CreateDefaultTmplSpace(context.Context, *CreateDefaultTmplSpaceReq) (*CreateResp, error)
	ListTmplSpacesByIDs(context.Context, *ListTmplSpacesByIDsReq) (*ListTmplSpacesByIDsResp, error)
	// template related interface.
	CreateTemplate(context.Context, *CreateTemplateReq) (*CreateResp, error)
	ListTemplates(context.Context, *ListTemplatesReq) (*ListTemplatesResp, error)
	UpdateTemplate(context.Context, *UpdateTemplateReq) (*base.EmptyResp, error)
	DeleteTemplate(context.Context, *DeleteTemplateReq) (*base.EmptyResp, error)
	BatchDeleteTemplate(context.Context, *BatchDeleteTemplateReq) (*base.EmptyResp, error)
	AddTmplsToTmplSets(context.Context, *AddTmplsToTmplSetsReq) (*base.EmptyResp, error)
	DeleteTmplsFromTmplSets(context.Context, *DeleteTmplsFromTmplSetsReq) (*base.EmptyResp, error)
	ListTemplatesByIDs(context.Context, *ListTemplatesByIDsReq) (*ListTemplatesByIDsResp, error)
	ListTemplatesNotBound(context.Context, *ListTemplatesNotBoundReq) (*ListTemplatesNotBoundResp, error)
	ListTmplsOfTmplSet(context.Context, *ListTmplsOfTmplSetReq) (*ListTmplsOfTmplSetResp, error)
	ListTemplateByTuple(context.Context, *ListTemplateByTupleReq) (*ListTemplateByTupleReqResp, error)
	BatchUpsertTemplates(context.Context, *BatchUpsertTemplatesReq) (*BatchUpsertTemplatesReqResp, error)
	// template release related interface.
	CreateTemplateRevision(context.Context, *CreateTemplateRevisionReq) (*CreateResp, error)
	ListTemplateRevisions(context.Context, *ListTemplateRevisionsReq) (*ListTemplateRevisionsResp, error)
	DeleteTemplateRevision(context.Context, *DeleteTemplateRevisionReq) (*base.EmptyResp, error)
	ListTemplateRevisionsByIDs(context.Context, *ListTemplateRevisionsByIDsReq) (*ListTemplateRevisionsByIDsResp, error)
	ListTmplRevisionNamesByTmplIDs(context.Context, *ListTmplRevisionNamesByTmplIDsReq) (*ListTmplRevisionNamesByTmplIDsResp, error)
	// template set related interface.
	CreateTemplateSet(context.Context, *CreateTemplateSetReq) (*CreateResp, error)
	ListTemplateSets(context.Context, *ListTemplateSetsReq) (*ListTemplateSetsResp, error)
	UpdateTemplateSet(context.Context, *UpdateTemplateSetReq) (*base.EmptyResp, error)
	DeleteTemplateSet(context.Context, *DeleteTemplateSetReq) (*base.EmptyResp, error)
	ListAppTemplateSets(context.Context, *ListAppTemplateSetsReq) (*ListAppTemplateSetsResp, error)
	ListTemplateSetsByIDs(context.Context, *ListTemplateSetsByIDsReq) (*ListTemplateSetsByIDsResp, error)
	ListTemplateSetBriefInfoByIDs(context.Context, *ListTemplateSetBriefInfoByIDsReq) (*ListTemplateSetBriefInfoByIDsResp, error)
	ListTmplSetsOfBiz(context.Context, *ListTmplSetsOfBizReq) (*ListTmplSetsOfBizResp, error)
	// app template binding related interface.
	CreateAppTemplateBinding(context.Context, *CreateAppTemplateBindingReq) (*CreateResp, error)
	ListAppTemplateBindings(context.Context, *ListAppTemplateBindingsReq) (*ListAppTemplateBindingsResp, error)
	UpdateAppTemplateBinding(context.Context, *UpdateAppTemplateBindingReq) (*base.EmptyResp, error)
	DeleteAppTemplateBinding(context.Context, *DeleteAppTemplateBindingReq) (*base.EmptyResp, error)
	ListAppBoundTmplRevisions(context.Context, *ListAppBoundTmplRevisionsReq) (*ListAppBoundTmplRevisionsResp, error)
	ListReleasedAppBoundTmplRevisions(context.Context, *ListReleasedAppBoundTmplRevisionsReq) (*ListReleasedAppBoundTmplRevisionsResp, error)
	GetReleasedAppBoundTmplRevision(context.Context, *GetReleasedAppBoundTmplRevisionReq) (*GetReleasedAppBoundTmplRevisionResp, error)
	CheckAppTemplateBinding(context.Context, *CheckAppTemplateBindingReq) (*CheckAppTemplateBindingResp, error)
	// app template variables related interface.
	ExtractAppTmplVariables(context.Context, *ExtractAppTmplVariablesReq) (*ExtractAppTmplVariablesResp, error)
	GetAppTmplVariableRefs(context.Context, *GetAppTmplVariableRefsReq) (*GetAppTmplVariableRefsResp, error)
	GetReleasedAppTmplVariableRefs(context.Context, *GetReleasedAppTmplVariableRefsReq) (*GetReleasedAppTmplVariableRefsResp, error)
	UpdateAppTmplVariables(context.Context, *UpdateAppTmplVariablesReq) (*base.EmptyResp, error)
	ListAppTmplVariables(context.Context, *ListAppTmplVariablesReq) (*ListAppTmplVariablesResp, error)
	ListReleasedAppTmplVariables(context.Context, *ListReleasedAppTmplVariablesReq) (*ListReleasedAppTmplVariablesResp, error)
	// template binding relation related interface.
	ListTmplBoundCounts(context.Context, *ListTmplBoundCountsReq) (*ListTmplBoundCountsResp, error)
	ListTmplRevisionBoundCounts(context.Context, *ListTmplRevisionBoundCountsReq) (*ListTmplRevisionBoundCountsResp, error)
	ListTmplSetBoundCounts(context.Context, *ListTmplSetBoundCountsReq) (*ListTmplSetBoundCountsResp, error)
	ListTmplBoundUnnamedApps(context.Context, *ListTmplBoundUnnamedAppsReq) (*ListTmplBoundUnnamedAppsResp, error)
	ListTmplBoundNamedApps(context.Context, *ListTmplBoundNamedAppsReq) (*ListTmplBoundNamedAppsResp, error)
	ListTmplBoundTmplSets(context.Context, *ListTmplBoundTmplSetsReq) (*ListTmplBoundTmplSetsResp, error)
	ListMultiTmplBoundTmplSets(context.Context, *ListMultiTmplBoundTmplSetsReq) (*ListMultiTmplBoundTmplSetsResp, error)
	ListTmplRevisionBoundUnnamedApps(context.Context, *ListTmplRevisionBoundUnnamedAppsReq) (*ListTmplRevisionBoundUnnamedAppsResp, error)
	ListTmplRevisionBoundNamedApps(context.Context, *ListTmplRevisionBoundNamedAppsReq) (*ListTmplRevisionBoundNamedAppsResp, error)
	ListTmplSetBoundUnnamedApps(context.Context, *ListTmplSetBoundUnnamedAppsReq) (*ListTmplSetBoundUnnamedAppsResp, error)
	ListMultiTmplSetBoundUnnamedApps(context.Context, *ListMultiTmplSetBoundUnnamedAppsReq) (*ListMultiTmplSetBoundUnnamedAppsResp, error)
	ListTmplSetBoundNamedApps(context.Context, *ListTmplSetBoundNamedAppsReq) (*ListTmplSetBoundNamedAppsResp, error)
	ListLatestTmplBoundUnnamedApps(context.Context, *ListLatestTmplBoundUnnamedAppsReq) (*ListLatestTmplBoundUnnamedAppsResp, error)
	// template variable related interface.
	CreateTemplateVariable(context.Context, *CreateTemplateVariableReq) (*CreateResp, error)
	ListTemplateVariables(context.Context, *ListTemplateVariablesReq) (*ListTemplateVariablesResp, error)
	UpdateTemplateVariable(context.Context, *UpdateTemplateVariableReq) (*base.EmptyResp, error)
	DeleteTemplateVariable(context.Context, *DeleteTemplateVariableReq) (*base.EmptyResp, error)
	ImportTemplateVariables(context.Context, *ImportTemplateVariablesReq) (*ImportTemplateVariablesResp, error)
	// group related interface.
	CreateGroup(context.Context, *CreateGroupReq) (*CreateResp, error)
	ListAllGroups(context.Context, *ListAllGroupsReq) (*ListAllGroupsResp, error)
	ListAppGroups(context.Context, *ListAppGroupsReq) (*ListAppGroupsResp, error)
	GetGroupByName(context.Context, *GetGroupByNameReq) (*group.Group, error)
	UpdateGroup(context.Context, *UpdateGroupReq) (*base.EmptyResp, error)
	DeleteGroup(context.Context, *DeleteGroupReq) (*base.EmptyResp, error)
	// group current release related interface.
	CountGroupsReleasedApps(context.Context, *CountGroupsReleasedAppsReq) (*CountGroupsReleasedAppsResp, error)
	ListGroupReleasedApps(context.Context, *ListGroupReleasedAppsReq) (*ListGroupReleasedAppsResp, error)
	// publish related interface.
	Publish(context.Context, *PublishReq) (*PublishResp, error)
	GenerateReleaseAndPublish(context.Context, *GenerateReleaseAndPublishReq) (*PublishResp, error)
	// credential related interface
	CreateCredential(context.Context, *CreateCredentialReq) (*CreateResp, error)
	ListCredentials(context.Context, *ListCredentialReq) (*ListCredentialResp, error)
	DeleteCredential(context.Context, *DeleteCredentialReq) (*base.EmptyResp, error)
	UpdateCredential(context.Context, *UpdateCredentialReq) (*base.EmptyResp, error)
	// credential scope related interface
	ListCredentialScopes(context.Context, *ListCredentialScopesReq) (*ListCredentialScopesResp, error)
	UpdateCredentialScopes(context.Context, *UpdateCredentialScopesReq) (*UpdateCredentialScopesResp, error)
	// kv related interface
	CreateKv(context.Context, *CreateKvReq) (*CreateResp, error)
	UpdateKv(context.Context, *UpdateKvReq) (*base.EmptyResp, error)
	ListKvs(context.Context, *ListKvsReq) (*ListKvsResp, error)
	DeleteKv(context.Context, *DeleteKvReq) (*base.EmptyResp, error)
	BatchUpsertKvs(context.Context, *BatchUpsertKvsReq) (*base.EmptyResp, error)
	UnDeleteKv(context.Context, *UnDeleteKvReq) (*base.EmptyResp, error)
	// used iam pull resource callback.
	ListInstances(context.Context, *ListInstancesReq) (*ListInstancesResp, error)
	FetchInstanceInfo(context.Context, *FetchInstanceInfoReq) (*FetchInstanceInfoResp, error)
	// Ping verifies if the grpc connection is still alive.
	Ping(context.Context, *PingMsg) (*PingMsg, error)
}

// UnimplementedDataServer should be embedded to have forward compatible implementations.
type UnimplementedDataServer struct {
}

func (UnimplementedDataServer) CreateApp(context.Context, *CreateAppReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedDataServer) UpdateApp(context.Context, *UpdateAppReq) (*app.App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedDataServer) DeleteApp(context.Context, *DeleteAppReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedDataServer) GetApp(context.Context, *GetAppReq) (*app.App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApp not implemented")
}
func (UnimplementedDataServer) GetAppByID(context.Context, *GetAppByIDReq) (*app.App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppByID not implemented")
}
func (UnimplementedDataServer) GetAppByName(context.Context, *GetAppByNameReq) (*app.App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppByName not implemented")
}
func (UnimplementedDataServer) ListAppsRest(context.Context, *ListAppsRestReq) (*ListAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppsRest not implemented")
}
func (UnimplementedDataServer) ListAppsByIDs(context.Context, *ListAppsByIDsReq) (*ListAppsByIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppsByIDs not implemented")
}
func (UnimplementedDataServer) CreateConfigItem(context.Context, *CreateConfigItemReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfigItem not implemented")
}
func (UnimplementedDataServer) BatchUpsertConfigItems(context.Context, *BatchUpsertConfigItemsReq) (*BatchUpsertConfigItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpsertConfigItems not implemented")
}
func (UnimplementedDataServer) UpdateConfigItem(context.Context, *UpdateConfigItemReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigItem not implemented")
}
func (UnimplementedDataServer) DeleteConfigItem(context.Context, *DeleteConfigItemReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigItem not implemented")
}
func (UnimplementedDataServer) GetConfigItem(context.Context, *GetConfigItemReq) (*config_item.ConfigItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigItem not implemented")
}
func (UnimplementedDataServer) ListConfigItems(context.Context, *ListConfigItemsReq) (*ListConfigItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigItems not implemented")
}
func (UnimplementedDataServer) ListReleasedConfigItems(context.Context, *ListReleasedConfigItemsReq) (*ListReleasedConfigItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleasedConfigItems not implemented")
}
func (UnimplementedDataServer) ListConfigItemCount(context.Context, *ListConfigItemCountReq) (*ListConfigItemCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigItemCount not implemented")
}
func (UnimplementedDataServer) ListConfigItemByTuple(context.Context, *ListConfigItemByTupleReq) (*ListConfigItemByTupleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigItemByTuple not implemented")
}
func (UnimplementedDataServer) UpdateConfigHook(context.Context, *UpdateConfigHookReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigHook not implemented")
}
func (UnimplementedDataServer) CreateContent(context.Context, *CreateContentReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContent not implemented")
}
func (UnimplementedDataServer) GetContent(context.Context, *GetContentReq) (*content.Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContent not implemented")
}
func (UnimplementedDataServer) CreateCommit(context.Context, *CreateCommitReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommit not implemented")
}
func (UnimplementedDataServer) GetLatestCommit(context.Context, *GetLatestCommitReq) (*commit.Commit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestCommit not implemented")
}
func (UnimplementedDataServer) CreateRelease(context.Context, *CreateReleaseReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelease not implemented")
}
func (UnimplementedDataServer) ListReleases(context.Context, *ListReleasesReq) (*ListReleasesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleases not implemented")
}
func (UnimplementedDataServer) GetReleaseByName(context.Context, *GetReleaseByNameReq) (*release.Release, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleaseByName not implemented")
}
func (UnimplementedDataServer) DeprecateRelease(context.Context, *DeprecateReleaseReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeprecateRelease not implemented")
}
func (UnimplementedDataServer) UnDeprecateRelease(context.Context, *UnDeprecateReleaseReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnDeprecateRelease not implemented")
}
func (UnimplementedDataServer) DeleteRelease(context.Context, *DeleteReleaseReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelease not implemented")
}
func (UnimplementedDataServer) GetReleasedConfigItem(context.Context, *GetReleasedCIReq) (*released_ci.ReleasedConfigItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleasedConfigItem not implemented")
}
func (UnimplementedDataServer) GetReleasedKv(context.Context, *GetReleasedKvReq) (*released_kv.ReleasedKv, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleasedKv not implemented")
}
func (UnimplementedDataServer) ListReleasedKvs(context.Context, *ListReleasedKvReq) (*ListReleasedKvResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleasedKvs not implemented")
}
func (UnimplementedDataServer) CreateHook(context.Context, *CreateHookReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHook not implemented")
}
func (UnimplementedDataServer) ListHooks(context.Context, *ListHooksReq) (*ListHooksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHooks not implemented")
}
func (UnimplementedDataServer) DeleteHook(context.Context, *DeleteHookReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHook not implemented")
}
func (UnimplementedDataServer) ListHookTags(context.Context, *ListHookTagReq) (*ListHookTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHookTags not implemented")
}
func (UnimplementedDataServer) ListHookReferences(context.Context, *ListHookReferencesReq) (*ListHookReferencesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHookReferences not implemented")
}
func (UnimplementedDataServer) GetHook(context.Context, *GetHookReq) (*GetHookResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHook not implemented")
}
func (UnimplementedDataServer) CreateHookRevision(context.Context, *CreateHookRevisionReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHookRevision not implemented")
}
func (UnimplementedDataServer) ListHookRevisions(context.Context, *ListHookRevisionsReq) (*ListHookRevisionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHookRevisions not implemented")
}
func (UnimplementedDataServer) GetHookRevisionByID(context.Context, *GetHookRevisionByIdReq) (*hook_revision.HookRevision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHookRevisionByID not implemented")
}
func (UnimplementedDataServer) DeleteHookRevision(context.Context, *DeleteHookRevisionReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHookRevision not implemented")
}
func (UnimplementedDataServer) PublishHookRevision(context.Context, *PublishHookRevisionReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishHookRevision not implemented")
}
func (UnimplementedDataServer) GetHookRevisionByPubState(context.Context, *GetByPubStateReq) (*hook_revision.HookRevision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHookRevisionByPubState not implemented")
}
func (UnimplementedDataServer) UpdateHookRevision(context.Context, *UpdateHookRevisionReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHookRevision not implemented")
}
func (UnimplementedDataServer) ListHookRevisionReferences(context.Context, *ListHookRevisionReferencesReq) (*ListHookRevisionReferencesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHookRevisionReferences not implemented")
}
func (UnimplementedDataServer) GetReleaseHook(context.Context, *GetReleaseHookReq) (*GetReleaseHookResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleaseHook not implemented")
}
func (UnimplementedDataServer) CreateTemplateSpace(context.Context, *CreateTemplateSpaceReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplateSpace not implemented")
}
func (UnimplementedDataServer) ListTemplateSpaces(context.Context, *ListTemplateSpacesReq) (*ListTemplateSpacesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateSpaces not implemented")
}
func (UnimplementedDataServer) UpdateTemplateSpace(context.Context, *UpdateTemplateSpaceReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplateSpace not implemented")
}
func (UnimplementedDataServer) DeleteTemplateSpace(context.Context, *DeleteTemplateSpaceReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplateSpace not implemented")
}
func (UnimplementedDataServer) GetAllBizsOfTmplSpaces(context.Context, *base.EmptyReq) (*GetAllBizsOfTmplSpacesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBizsOfTmplSpaces not implemented")
}
func (UnimplementedDataServer) CreateDefaultTmplSpace(context.Context, *CreateDefaultTmplSpaceReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDefaultTmplSpace not implemented")
}
func (UnimplementedDataServer) ListTmplSpacesByIDs(context.Context, *ListTmplSpacesByIDsReq) (*ListTmplSpacesByIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplSpacesByIDs not implemented")
}
func (UnimplementedDataServer) CreateTemplate(context.Context, *CreateTemplateReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (UnimplementedDataServer) ListTemplates(context.Context, *ListTemplatesReq) (*ListTemplatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedDataServer) UpdateTemplate(context.Context, *UpdateTemplateReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (UnimplementedDataServer) DeleteTemplate(context.Context, *DeleteTemplateReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (UnimplementedDataServer) BatchDeleteTemplate(context.Context, *BatchDeleteTemplateReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteTemplate not implemented")
}
func (UnimplementedDataServer) AddTmplsToTmplSets(context.Context, *AddTmplsToTmplSetsReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTmplsToTmplSets not implemented")
}
func (UnimplementedDataServer) DeleteTmplsFromTmplSets(context.Context, *DeleteTmplsFromTmplSetsReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTmplsFromTmplSets not implemented")
}
func (UnimplementedDataServer) ListTemplatesByIDs(context.Context, *ListTemplatesByIDsReq) (*ListTemplatesByIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplatesByIDs not implemented")
}
func (UnimplementedDataServer) ListTemplatesNotBound(context.Context, *ListTemplatesNotBoundReq) (*ListTemplatesNotBoundResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplatesNotBound not implemented")
}
func (UnimplementedDataServer) ListTmplsOfTmplSet(context.Context, *ListTmplsOfTmplSetReq) (*ListTmplsOfTmplSetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplsOfTmplSet not implemented")
}
func (UnimplementedDataServer) ListTemplateByTuple(context.Context, *ListTemplateByTupleReq) (*ListTemplateByTupleReqResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateByTuple not implemented")
}
func (UnimplementedDataServer) BatchUpsertTemplates(context.Context, *BatchUpsertTemplatesReq) (*BatchUpsertTemplatesReqResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpsertTemplates not implemented")
}
func (UnimplementedDataServer) CreateTemplateRevision(context.Context, *CreateTemplateRevisionReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplateRevision not implemented")
}
func (UnimplementedDataServer) ListTemplateRevisions(context.Context, *ListTemplateRevisionsReq) (*ListTemplateRevisionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateRevisions not implemented")
}
func (UnimplementedDataServer) DeleteTemplateRevision(context.Context, *DeleteTemplateRevisionReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplateRevision not implemented")
}
func (UnimplementedDataServer) ListTemplateRevisionsByIDs(context.Context, *ListTemplateRevisionsByIDsReq) (*ListTemplateRevisionsByIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateRevisionsByIDs not implemented")
}
func (UnimplementedDataServer) ListTmplRevisionNamesByTmplIDs(context.Context, *ListTmplRevisionNamesByTmplIDsReq) (*ListTmplRevisionNamesByTmplIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplRevisionNamesByTmplIDs not implemented")
}
func (UnimplementedDataServer) CreateTemplateSet(context.Context, *CreateTemplateSetReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplateSet not implemented")
}
func (UnimplementedDataServer) ListTemplateSets(context.Context, *ListTemplateSetsReq) (*ListTemplateSetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateSets not implemented")
}
func (UnimplementedDataServer) UpdateTemplateSet(context.Context, *UpdateTemplateSetReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplateSet not implemented")
}
func (UnimplementedDataServer) DeleteTemplateSet(context.Context, *DeleteTemplateSetReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplateSet not implemented")
}
func (UnimplementedDataServer) ListAppTemplateSets(context.Context, *ListAppTemplateSetsReq) (*ListAppTemplateSetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppTemplateSets not implemented")
}
func (UnimplementedDataServer) ListTemplateSetsByIDs(context.Context, *ListTemplateSetsByIDsReq) (*ListTemplateSetsByIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateSetsByIDs not implemented")
}
func (UnimplementedDataServer) ListTemplateSetBriefInfoByIDs(context.Context, *ListTemplateSetBriefInfoByIDsReq) (*ListTemplateSetBriefInfoByIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateSetBriefInfoByIDs not implemented")
}
func (UnimplementedDataServer) ListTmplSetsOfBiz(context.Context, *ListTmplSetsOfBizReq) (*ListTmplSetsOfBizResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplSetsOfBiz not implemented")
}
func (UnimplementedDataServer) CreateAppTemplateBinding(context.Context, *CreateAppTemplateBindingReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppTemplateBinding not implemented")
}
func (UnimplementedDataServer) ListAppTemplateBindings(context.Context, *ListAppTemplateBindingsReq) (*ListAppTemplateBindingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppTemplateBindings not implemented")
}
func (UnimplementedDataServer) UpdateAppTemplateBinding(context.Context, *UpdateAppTemplateBindingReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppTemplateBinding not implemented")
}
func (UnimplementedDataServer) DeleteAppTemplateBinding(context.Context, *DeleteAppTemplateBindingReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppTemplateBinding not implemented")
}
func (UnimplementedDataServer) ListAppBoundTmplRevisions(context.Context, *ListAppBoundTmplRevisionsReq) (*ListAppBoundTmplRevisionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppBoundTmplRevisions not implemented")
}
func (UnimplementedDataServer) ListReleasedAppBoundTmplRevisions(context.Context, *ListReleasedAppBoundTmplRevisionsReq) (*ListReleasedAppBoundTmplRevisionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleasedAppBoundTmplRevisions not implemented")
}
func (UnimplementedDataServer) GetReleasedAppBoundTmplRevision(context.Context, *GetReleasedAppBoundTmplRevisionReq) (*GetReleasedAppBoundTmplRevisionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleasedAppBoundTmplRevision not implemented")
}
func (UnimplementedDataServer) CheckAppTemplateBinding(context.Context, *CheckAppTemplateBindingReq) (*CheckAppTemplateBindingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAppTemplateBinding not implemented")
}
func (UnimplementedDataServer) ExtractAppTmplVariables(context.Context, *ExtractAppTmplVariablesReq) (*ExtractAppTmplVariablesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractAppTmplVariables not implemented")
}
func (UnimplementedDataServer) GetAppTmplVariableRefs(context.Context, *GetAppTmplVariableRefsReq) (*GetAppTmplVariableRefsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppTmplVariableRefs not implemented")
}
func (UnimplementedDataServer) GetReleasedAppTmplVariableRefs(context.Context, *GetReleasedAppTmplVariableRefsReq) (*GetReleasedAppTmplVariableRefsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleasedAppTmplVariableRefs not implemented")
}
func (UnimplementedDataServer) UpdateAppTmplVariables(context.Context, *UpdateAppTmplVariablesReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppTmplVariables not implemented")
}
func (UnimplementedDataServer) ListAppTmplVariables(context.Context, *ListAppTmplVariablesReq) (*ListAppTmplVariablesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppTmplVariables not implemented")
}
func (UnimplementedDataServer) ListReleasedAppTmplVariables(context.Context, *ListReleasedAppTmplVariablesReq) (*ListReleasedAppTmplVariablesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleasedAppTmplVariables not implemented")
}
func (UnimplementedDataServer) ListTmplBoundCounts(context.Context, *ListTmplBoundCountsReq) (*ListTmplBoundCountsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplBoundCounts not implemented")
}
func (UnimplementedDataServer) ListTmplRevisionBoundCounts(context.Context, *ListTmplRevisionBoundCountsReq) (*ListTmplRevisionBoundCountsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplRevisionBoundCounts not implemented")
}
func (UnimplementedDataServer) ListTmplSetBoundCounts(context.Context, *ListTmplSetBoundCountsReq) (*ListTmplSetBoundCountsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplSetBoundCounts not implemented")
}
func (UnimplementedDataServer) ListTmplBoundUnnamedApps(context.Context, *ListTmplBoundUnnamedAppsReq) (*ListTmplBoundUnnamedAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplBoundUnnamedApps not implemented")
}
func (UnimplementedDataServer) ListTmplBoundNamedApps(context.Context, *ListTmplBoundNamedAppsReq) (*ListTmplBoundNamedAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplBoundNamedApps not implemented")
}
func (UnimplementedDataServer) ListTmplBoundTmplSets(context.Context, *ListTmplBoundTmplSetsReq) (*ListTmplBoundTmplSetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplBoundTmplSets not implemented")
}
func (UnimplementedDataServer) ListMultiTmplBoundTmplSets(context.Context, *ListMultiTmplBoundTmplSetsReq) (*ListMultiTmplBoundTmplSetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMultiTmplBoundTmplSets not implemented")
}
func (UnimplementedDataServer) ListTmplRevisionBoundUnnamedApps(context.Context, *ListTmplRevisionBoundUnnamedAppsReq) (*ListTmplRevisionBoundUnnamedAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplRevisionBoundUnnamedApps not implemented")
}
func (UnimplementedDataServer) ListTmplRevisionBoundNamedApps(context.Context, *ListTmplRevisionBoundNamedAppsReq) (*ListTmplRevisionBoundNamedAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplRevisionBoundNamedApps not implemented")
}
func (UnimplementedDataServer) ListTmplSetBoundUnnamedApps(context.Context, *ListTmplSetBoundUnnamedAppsReq) (*ListTmplSetBoundUnnamedAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplSetBoundUnnamedApps not implemented")
}
func (UnimplementedDataServer) ListMultiTmplSetBoundUnnamedApps(context.Context, *ListMultiTmplSetBoundUnnamedAppsReq) (*ListMultiTmplSetBoundUnnamedAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMultiTmplSetBoundUnnamedApps not implemented")
}
func (UnimplementedDataServer) ListTmplSetBoundNamedApps(context.Context, *ListTmplSetBoundNamedAppsReq) (*ListTmplSetBoundNamedAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplSetBoundNamedApps not implemented")
}
func (UnimplementedDataServer) ListLatestTmplBoundUnnamedApps(context.Context, *ListLatestTmplBoundUnnamedAppsReq) (*ListLatestTmplBoundUnnamedAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLatestTmplBoundUnnamedApps not implemented")
}
func (UnimplementedDataServer) CreateTemplateVariable(context.Context, *CreateTemplateVariableReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplateVariable not implemented")
}
func (UnimplementedDataServer) ListTemplateVariables(context.Context, *ListTemplateVariablesReq) (*ListTemplateVariablesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateVariables not implemented")
}
func (UnimplementedDataServer) UpdateTemplateVariable(context.Context, *UpdateTemplateVariableReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplateVariable not implemented")
}
func (UnimplementedDataServer) DeleteTemplateVariable(context.Context, *DeleteTemplateVariableReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplateVariable not implemented")
}
func (UnimplementedDataServer) ImportTemplateVariables(context.Context, *ImportTemplateVariablesReq) (*ImportTemplateVariablesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportTemplateVariables not implemented")
}
func (UnimplementedDataServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedDataServer) ListAllGroups(context.Context, *ListAllGroupsReq) (*ListAllGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllGroups not implemented")
}
func (UnimplementedDataServer) ListAppGroups(context.Context, *ListAppGroupsReq) (*ListAppGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppGroups not implemented")
}
func (UnimplementedDataServer) GetGroupByName(context.Context, *GetGroupByNameReq) (*group.Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupByName not implemented")
}
func (UnimplementedDataServer) UpdateGroup(context.Context, *UpdateGroupReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedDataServer) DeleteGroup(context.Context, *DeleteGroupReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedDataServer) CountGroupsReleasedApps(context.Context, *CountGroupsReleasedAppsReq) (*CountGroupsReleasedAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountGroupsReleasedApps not implemented")
}
func (UnimplementedDataServer) ListGroupReleasedApps(context.Context, *ListGroupReleasedAppsReq) (*ListGroupReleasedAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupReleasedApps not implemented")
}
func (UnimplementedDataServer) Publish(context.Context, *PublishReq) (*PublishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedDataServer) GenerateReleaseAndPublish(context.Context, *GenerateReleaseAndPublishReq) (*PublishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateReleaseAndPublish not implemented")
}
func (UnimplementedDataServer) CreateCredential(context.Context, *CreateCredentialReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredential not implemented")
}
func (UnimplementedDataServer) ListCredentials(context.Context, *ListCredentialReq) (*ListCredentialResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredentials not implemented")
}
func (UnimplementedDataServer) DeleteCredential(context.Context, *DeleteCredentialReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (UnimplementedDataServer) UpdateCredential(context.Context, *UpdateCredentialReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredential not implemented")
}
func (UnimplementedDataServer) ListCredentialScopes(context.Context, *ListCredentialScopesReq) (*ListCredentialScopesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredentialScopes not implemented")
}
func (UnimplementedDataServer) UpdateCredentialScopes(context.Context, *UpdateCredentialScopesReq) (*UpdateCredentialScopesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredentialScopes not implemented")
}
func (UnimplementedDataServer) CreateKv(context.Context, *CreateKvReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKv not implemented")
}
func (UnimplementedDataServer) UpdateKv(context.Context, *UpdateKvReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKv not implemented")
}
func (UnimplementedDataServer) ListKvs(context.Context, *ListKvsReq) (*ListKvsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKvs not implemented")
}
func (UnimplementedDataServer) DeleteKv(context.Context, *DeleteKvReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKv not implemented")
}
func (UnimplementedDataServer) BatchUpsertKvs(context.Context, *BatchUpsertKvsReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpsertKvs not implemented")
}
func (UnimplementedDataServer) UnDeleteKv(context.Context, *UnDeleteKvReq) (*base.EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnDeleteKv not implemented")
}
func (UnimplementedDataServer) ListInstances(context.Context, *ListInstancesReq) (*ListInstancesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstances not implemented")
}
func (UnimplementedDataServer) FetchInstanceInfo(context.Context, *FetchInstanceInfoReq) (*FetchInstanceInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchInstanceInfo not implemented")
}
func (UnimplementedDataServer) Ping(context.Context, *PingMsg) (*PingMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

// UnsafeDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServer will
// result in compilation errors.
type UnsafeDataServer interface {
	mustEmbedUnimplementedDataServer()
}

func RegisterDataServer(s grpc.ServiceRegistrar, srv DataServer) {
	s.RegisterService(&Data_ServiceDesc, srv)
}

func _Data_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateApp(ctx, req.(*CreateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateApp(ctx, req.(*UpdateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteApp(ctx, req.(*DeleteAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetApp(ctx, req.(*GetAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetAppByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetAppByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetAppByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetAppByID(ctx, req.(*GetAppByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetAppByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetAppByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetAppByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetAppByName(ctx, req.(*GetAppByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListAppsRest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListAppsRest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListAppsRest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListAppsRest(ctx, req.(*ListAppsRestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListAppsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsByIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListAppsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListAppsByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListAppsByIDs(ctx, req.(*ListAppsByIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateConfigItem(ctx, req.(*CreateConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_BatchUpsertConfigItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpsertConfigItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).BatchUpsertConfigItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_BatchUpsertConfigItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).BatchUpsertConfigItems(ctx, req.(*BatchUpsertConfigItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateConfigItem(ctx, req.(*UpdateConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteConfigItem(ctx, req.(*DeleteConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetConfigItem(ctx, req.(*GetConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListConfigItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListConfigItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListConfigItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListConfigItems(ctx, req.(*ListConfigItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListReleasedConfigItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasedConfigItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListReleasedConfigItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListReleasedConfigItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListReleasedConfigItems(ctx, req.(*ListReleasedConfigItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListConfigItemCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigItemCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListConfigItemCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListConfigItemCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListConfigItemCount(ctx, req.(*ListConfigItemCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListConfigItemByTuple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigItemByTupleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListConfigItemByTuple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListConfigItemByTuple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListConfigItemByTuple(ctx, req.(*ListConfigItemByTupleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateConfigHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateConfigHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateConfigHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateConfigHook(ctx, req.(*UpdateConfigHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateContent(ctx, req.(*CreateContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetContent(ctx, req.(*GetContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateCommit(ctx, req.(*CreateCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetLatestCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetLatestCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetLatestCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetLatestCommit(ctx, req.(*GetLatestCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateRelease(ctx, req.(*CreateReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListReleases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListReleases(ctx, req.(*ListReleasesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetReleaseByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetReleaseByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetReleaseByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetReleaseByName(ctx, req.(*GetReleaseByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeprecateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeprecateReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeprecateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeprecateRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeprecateRelease(ctx, req.(*DeprecateReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UnDeprecateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnDeprecateReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UnDeprecateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UnDeprecateRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UnDeprecateRelease(ctx, req.(*UnDeprecateReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteRelease(ctx, req.(*DeleteReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetReleasedConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleasedCIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetReleasedConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetReleasedConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetReleasedConfigItem(ctx, req.(*GetReleasedCIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetReleasedKv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleasedKvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetReleasedKv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetReleasedKv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetReleasedKv(ctx, req.(*GetReleasedKvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListReleasedKvs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasedKvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListReleasedKvs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListReleasedKvs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListReleasedKvs(ctx, req.(*ListReleasedKvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateHook(ctx, req.(*CreateHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHooksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListHooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListHooks(ctx, req.(*ListHooksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteHook(ctx, req.(*DeleteHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListHookTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHookTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListHookTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListHookTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListHookTags(ctx, req.(*ListHookTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListHookReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHookReferencesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListHookReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListHookReferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListHookReferences(ctx, req.(*ListHookReferencesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetHook(ctx, req.(*GetHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateHookRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHookRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateHookRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateHookRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateHookRevision(ctx, req.(*CreateHookRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListHookRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHookRevisionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListHookRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListHookRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListHookRevisions(ctx, req.(*ListHookRevisionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetHookRevisionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHookRevisionByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetHookRevisionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetHookRevisionByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetHookRevisionByID(ctx, req.(*GetHookRevisionByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteHookRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHookRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteHookRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteHookRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteHookRevision(ctx, req.(*DeleteHookRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_PublishHookRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishHookRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).PublishHookRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_PublishHookRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).PublishHookRevision(ctx, req.(*PublishHookRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetHookRevisionByPubState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByPubStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetHookRevisionByPubState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetHookRevisionByPubState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetHookRevisionByPubState(ctx, req.(*GetByPubStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateHookRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHookRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateHookRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateHookRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateHookRevision(ctx, req.(*UpdateHookRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListHookRevisionReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHookRevisionReferencesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListHookRevisionReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListHookRevisionReferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListHookRevisionReferences(ctx, req.(*ListHookRevisionReferencesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetReleaseHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetReleaseHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetReleaseHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetReleaseHook(ctx, req.(*GetReleaseHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateTemplateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateTemplateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateTemplateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateTemplateSpace(ctx, req.(*CreateTemplateSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTemplateSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateSpacesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTemplateSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTemplateSpaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTemplateSpaces(ctx, req.(*ListTemplateSpacesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateTemplateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateTemplateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateTemplateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateTemplateSpace(ctx, req.(*UpdateTemplateSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteTemplateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteTemplateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteTemplateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteTemplateSpace(ctx, req.(*DeleteTemplateSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetAllBizsOfTmplSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetAllBizsOfTmplSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetAllBizsOfTmplSpaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetAllBizsOfTmplSpaces(ctx, req.(*base.EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateDefaultTmplSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDefaultTmplSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateDefaultTmplSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateDefaultTmplSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateDefaultTmplSpace(ctx, req.(*CreateDefaultTmplSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTmplSpacesByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplSpacesByIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTmplSpacesByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTmplSpacesByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTmplSpacesByIDs(ctx, req.(*ListTmplSpacesByIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateTemplate(ctx, req.(*CreateTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTemplates(ctx, req.(*ListTemplatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateTemplate(ctx, req.(*UpdateTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteTemplate(ctx, req.(*DeleteTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_BatchDeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).BatchDeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_BatchDeleteTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).BatchDeleteTemplate(ctx, req.(*BatchDeleteTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_AddTmplsToTmplSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTmplsToTmplSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).AddTmplsToTmplSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_AddTmplsToTmplSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).AddTmplsToTmplSets(ctx, req.(*AddTmplsToTmplSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteTmplsFromTmplSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTmplsFromTmplSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteTmplsFromTmplSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteTmplsFromTmplSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteTmplsFromTmplSets(ctx, req.(*DeleteTmplsFromTmplSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTemplatesByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesByIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTemplatesByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTemplatesByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTemplatesByIDs(ctx, req.(*ListTemplatesByIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTemplatesNotBound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesNotBoundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTemplatesNotBound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTemplatesNotBound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTemplatesNotBound(ctx, req.(*ListTemplatesNotBoundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTmplsOfTmplSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplsOfTmplSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTmplsOfTmplSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTmplsOfTmplSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTmplsOfTmplSet(ctx, req.(*ListTmplsOfTmplSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTemplateByTuple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateByTupleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTemplateByTuple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTemplateByTuple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTemplateByTuple(ctx, req.(*ListTemplateByTupleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_BatchUpsertTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpsertTemplatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).BatchUpsertTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_BatchUpsertTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).BatchUpsertTemplates(ctx, req.(*BatchUpsertTemplatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateTemplateRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateTemplateRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateTemplateRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateTemplateRevision(ctx, req.(*CreateTemplateRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTemplateRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateRevisionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTemplateRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTemplateRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTemplateRevisions(ctx, req.(*ListTemplateRevisionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteTemplateRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteTemplateRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteTemplateRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteTemplateRevision(ctx, req.(*DeleteTemplateRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTemplateRevisionsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateRevisionsByIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTemplateRevisionsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTemplateRevisionsByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTemplateRevisionsByIDs(ctx, req.(*ListTemplateRevisionsByIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTmplRevisionNamesByTmplIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplRevisionNamesByTmplIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTmplRevisionNamesByTmplIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTmplRevisionNamesByTmplIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTmplRevisionNamesByTmplIDs(ctx, req.(*ListTmplRevisionNamesByTmplIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateTemplateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateTemplateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateTemplateSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateTemplateSet(ctx, req.(*CreateTemplateSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTemplateSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTemplateSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTemplateSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTemplateSets(ctx, req.(*ListTemplateSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateTemplateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateTemplateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateTemplateSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateTemplateSet(ctx, req.(*UpdateTemplateSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteTemplateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteTemplateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteTemplateSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteTemplateSet(ctx, req.(*DeleteTemplateSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListAppTemplateSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppTemplateSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListAppTemplateSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListAppTemplateSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListAppTemplateSets(ctx, req.(*ListAppTemplateSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTemplateSetsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateSetsByIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTemplateSetsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTemplateSetsByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTemplateSetsByIDs(ctx, req.(*ListTemplateSetsByIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTemplateSetBriefInfoByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateSetBriefInfoByIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTemplateSetBriefInfoByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTemplateSetBriefInfoByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTemplateSetBriefInfoByIDs(ctx, req.(*ListTemplateSetBriefInfoByIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTmplSetsOfBiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplSetsOfBizReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTmplSetsOfBiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTmplSetsOfBiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTmplSetsOfBiz(ctx, req.(*ListTmplSetsOfBizReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateAppTemplateBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppTemplateBindingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateAppTemplateBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateAppTemplateBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateAppTemplateBinding(ctx, req.(*CreateAppTemplateBindingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListAppTemplateBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppTemplateBindingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListAppTemplateBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListAppTemplateBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListAppTemplateBindings(ctx, req.(*ListAppTemplateBindingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateAppTemplateBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppTemplateBindingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateAppTemplateBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateAppTemplateBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateAppTemplateBinding(ctx, req.(*UpdateAppTemplateBindingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteAppTemplateBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppTemplateBindingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteAppTemplateBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteAppTemplateBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteAppTemplateBinding(ctx, req.(*DeleteAppTemplateBindingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListAppBoundTmplRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppBoundTmplRevisionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListAppBoundTmplRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListAppBoundTmplRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListAppBoundTmplRevisions(ctx, req.(*ListAppBoundTmplRevisionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListReleasedAppBoundTmplRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasedAppBoundTmplRevisionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListReleasedAppBoundTmplRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListReleasedAppBoundTmplRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListReleasedAppBoundTmplRevisions(ctx, req.(*ListReleasedAppBoundTmplRevisionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetReleasedAppBoundTmplRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleasedAppBoundTmplRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetReleasedAppBoundTmplRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetReleasedAppBoundTmplRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetReleasedAppBoundTmplRevision(ctx, req.(*GetReleasedAppBoundTmplRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CheckAppTemplateBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAppTemplateBindingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CheckAppTemplateBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CheckAppTemplateBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CheckAppTemplateBinding(ctx, req.(*CheckAppTemplateBindingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ExtractAppTmplVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractAppTmplVariablesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ExtractAppTmplVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ExtractAppTmplVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ExtractAppTmplVariables(ctx, req.(*ExtractAppTmplVariablesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetAppTmplVariableRefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppTmplVariableRefsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetAppTmplVariableRefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetAppTmplVariableRefs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetAppTmplVariableRefs(ctx, req.(*GetAppTmplVariableRefsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetReleasedAppTmplVariableRefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleasedAppTmplVariableRefsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetReleasedAppTmplVariableRefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetReleasedAppTmplVariableRefs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetReleasedAppTmplVariableRefs(ctx, req.(*GetReleasedAppTmplVariableRefsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateAppTmplVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppTmplVariablesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateAppTmplVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateAppTmplVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateAppTmplVariables(ctx, req.(*UpdateAppTmplVariablesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListAppTmplVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppTmplVariablesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListAppTmplVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListAppTmplVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListAppTmplVariables(ctx, req.(*ListAppTmplVariablesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListReleasedAppTmplVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasedAppTmplVariablesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListReleasedAppTmplVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListReleasedAppTmplVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListReleasedAppTmplVariables(ctx, req.(*ListReleasedAppTmplVariablesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTmplBoundCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplBoundCountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTmplBoundCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTmplBoundCounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTmplBoundCounts(ctx, req.(*ListTmplBoundCountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTmplRevisionBoundCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplRevisionBoundCountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTmplRevisionBoundCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTmplRevisionBoundCounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTmplRevisionBoundCounts(ctx, req.(*ListTmplRevisionBoundCountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTmplSetBoundCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplSetBoundCountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTmplSetBoundCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTmplSetBoundCounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTmplSetBoundCounts(ctx, req.(*ListTmplSetBoundCountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTmplBoundUnnamedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplBoundUnnamedAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTmplBoundUnnamedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTmplBoundUnnamedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTmplBoundUnnamedApps(ctx, req.(*ListTmplBoundUnnamedAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTmplBoundNamedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplBoundNamedAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTmplBoundNamedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTmplBoundNamedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTmplBoundNamedApps(ctx, req.(*ListTmplBoundNamedAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTmplBoundTmplSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplBoundTmplSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTmplBoundTmplSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTmplBoundTmplSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTmplBoundTmplSets(ctx, req.(*ListTmplBoundTmplSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListMultiTmplBoundTmplSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMultiTmplBoundTmplSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListMultiTmplBoundTmplSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListMultiTmplBoundTmplSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListMultiTmplBoundTmplSets(ctx, req.(*ListMultiTmplBoundTmplSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTmplRevisionBoundUnnamedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplRevisionBoundUnnamedAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTmplRevisionBoundUnnamedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTmplRevisionBoundUnnamedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTmplRevisionBoundUnnamedApps(ctx, req.(*ListTmplRevisionBoundUnnamedAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTmplRevisionBoundNamedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplRevisionBoundNamedAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTmplRevisionBoundNamedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTmplRevisionBoundNamedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTmplRevisionBoundNamedApps(ctx, req.(*ListTmplRevisionBoundNamedAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTmplSetBoundUnnamedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplSetBoundUnnamedAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTmplSetBoundUnnamedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTmplSetBoundUnnamedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTmplSetBoundUnnamedApps(ctx, req.(*ListTmplSetBoundUnnamedAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListMultiTmplSetBoundUnnamedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMultiTmplSetBoundUnnamedAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListMultiTmplSetBoundUnnamedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListMultiTmplSetBoundUnnamedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListMultiTmplSetBoundUnnamedApps(ctx, req.(*ListMultiTmplSetBoundUnnamedAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTmplSetBoundNamedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplSetBoundNamedAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTmplSetBoundNamedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTmplSetBoundNamedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTmplSetBoundNamedApps(ctx, req.(*ListTmplSetBoundNamedAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListLatestTmplBoundUnnamedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLatestTmplBoundUnnamedAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListLatestTmplBoundUnnamedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListLatestTmplBoundUnnamedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListLatestTmplBoundUnnamedApps(ctx, req.(*ListLatestTmplBoundUnnamedAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateTemplateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateTemplateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateTemplateVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateTemplateVariable(ctx, req.(*CreateTemplateVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListTemplateVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateVariablesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListTemplateVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListTemplateVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListTemplateVariables(ctx, req.(*ListTemplateVariablesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateTemplateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateTemplateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateTemplateVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateTemplateVariable(ctx, req.(*UpdateTemplateVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteTemplateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteTemplateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteTemplateVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteTemplateVariable(ctx, req.(*DeleteTemplateVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ImportTemplateVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportTemplateVariablesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ImportTemplateVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ImportTemplateVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ImportTemplateVariables(ctx, req.(*ImportTemplateVariablesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListAllGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListAllGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListAllGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListAllGroups(ctx, req.(*ListAllGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListAppGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListAppGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListAppGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListAppGroups(ctx, req.(*ListAppGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GetGroupByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetGroupByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GetGroupByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetGroupByName(ctx, req.(*GetGroupByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateGroup(ctx, req.(*UpdateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteGroup(ctx, req.(*DeleteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CountGroupsReleasedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountGroupsReleasedAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CountGroupsReleasedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CountGroupsReleasedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CountGroupsReleasedApps(ctx, req.(*CountGroupsReleasedAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListGroupReleasedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupReleasedAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListGroupReleasedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListGroupReleasedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListGroupReleasedApps(ctx, req.(*ListGroupReleasedAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).Publish(ctx, req.(*PublishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_GenerateReleaseAndPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateReleaseAndPublishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GenerateReleaseAndPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_GenerateReleaseAndPublish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GenerateReleaseAndPublish(ctx, req.(*GenerateReleaseAndPublishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateCredential(ctx, req.(*CreateCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListCredentials(ctx, req.(*ListCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteCredential(ctx, req.(*DeleteCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateCredential(ctx, req.(*UpdateCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListCredentialScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialScopesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListCredentialScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListCredentialScopes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListCredentialScopes(ctx, req.(*ListCredentialScopesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateCredentialScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCredentialScopesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateCredentialScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateCredentialScopes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateCredentialScopes(ctx, req.(*UpdateCredentialScopesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_CreateKv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).CreateKv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_CreateKv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).CreateKv(ctx, req.(*CreateKvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UpdateKv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UpdateKv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UpdateKv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UpdateKv(ctx, req.(*UpdateKvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListKvs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKvsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListKvs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListKvs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListKvs(ctx, req.(*ListKvsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_DeleteKv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).DeleteKv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_DeleteKv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).DeleteKv(ctx, req.(*DeleteKvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_BatchUpsertKvs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpsertKvsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).BatchUpsertKvs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_BatchUpsertKvs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).BatchUpsertKvs(ctx, req.(*BatchUpsertKvsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_UnDeleteKv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnDeleteKvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).UnDeleteKv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_UnDeleteKv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).UnDeleteKv(ctx, req.(*UnDeleteKvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ListInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ListInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ListInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ListInstances(ctx, req.(*ListInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_FetchInstanceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchInstanceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).FetchInstanceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_FetchInstanceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).FetchInstanceInfo(ctx, req.(*FetchInstanceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).Ping(ctx, req.(*PingMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Data_ServiceDesc is the grpc.ServiceDesc for Data service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Data_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbds.Data",
	HandlerType: (*DataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApp",
			Handler:    _Data_CreateApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _Data_UpdateApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _Data_DeleteApp_Handler,
		},
		{
			MethodName: "GetApp",
			Handler:    _Data_GetApp_Handler,
		},
		{
			MethodName: "GetAppByID",
			Handler:    _Data_GetAppByID_Handler,
		},
		{
			MethodName: "GetAppByName",
			Handler:    _Data_GetAppByName_Handler,
		},
		{
			MethodName: "ListAppsRest",
			Handler:    _Data_ListAppsRest_Handler,
		},
		{
			MethodName: "ListAppsByIDs",
			Handler:    _Data_ListAppsByIDs_Handler,
		},
		{
			MethodName: "CreateConfigItem",
			Handler:    _Data_CreateConfigItem_Handler,
		},
		{
			MethodName: "BatchUpsertConfigItems",
			Handler:    _Data_BatchUpsertConfigItems_Handler,
		},
		{
			MethodName: "UpdateConfigItem",
			Handler:    _Data_UpdateConfigItem_Handler,
		},
		{
			MethodName: "DeleteConfigItem",
			Handler:    _Data_DeleteConfigItem_Handler,
		},
		{
			MethodName: "GetConfigItem",
			Handler:    _Data_GetConfigItem_Handler,
		},
		{
			MethodName: "ListConfigItems",
			Handler:    _Data_ListConfigItems_Handler,
		},
		{
			MethodName: "ListReleasedConfigItems",
			Handler:    _Data_ListReleasedConfigItems_Handler,
		},
		{
			MethodName: "ListConfigItemCount",
			Handler:    _Data_ListConfigItemCount_Handler,
		},
		{
			MethodName: "ListConfigItemByTuple",
			Handler:    _Data_ListConfigItemByTuple_Handler,
		},
		{
			MethodName: "UpdateConfigHook",
			Handler:    _Data_UpdateConfigHook_Handler,
		},
		{
			MethodName: "CreateContent",
			Handler:    _Data_CreateContent_Handler,
		},
		{
			MethodName: "GetContent",
			Handler:    _Data_GetContent_Handler,
		},
		{
			MethodName: "CreateCommit",
			Handler:    _Data_CreateCommit_Handler,
		},
		{
			MethodName: "GetLatestCommit",
			Handler:    _Data_GetLatestCommit_Handler,
		},
		{
			MethodName: "CreateRelease",
			Handler:    _Data_CreateRelease_Handler,
		},
		{
			MethodName: "ListReleases",
			Handler:    _Data_ListReleases_Handler,
		},
		{
			MethodName: "GetReleaseByName",
			Handler:    _Data_GetReleaseByName_Handler,
		},
		{
			MethodName: "DeprecateRelease",
			Handler:    _Data_DeprecateRelease_Handler,
		},
		{
			MethodName: "UnDeprecateRelease",
			Handler:    _Data_UnDeprecateRelease_Handler,
		},
		{
			MethodName: "DeleteRelease",
			Handler:    _Data_DeleteRelease_Handler,
		},
		{
			MethodName: "GetReleasedConfigItem",
			Handler:    _Data_GetReleasedConfigItem_Handler,
		},
		{
			MethodName: "GetReleasedKv",
			Handler:    _Data_GetReleasedKv_Handler,
		},
		{
			MethodName: "ListReleasedKvs",
			Handler:    _Data_ListReleasedKvs_Handler,
		},
		{
			MethodName: "CreateHook",
			Handler:    _Data_CreateHook_Handler,
		},
		{
			MethodName: "ListHooks",
			Handler:    _Data_ListHooks_Handler,
		},
		{
			MethodName: "DeleteHook",
			Handler:    _Data_DeleteHook_Handler,
		},
		{
			MethodName: "ListHookTags",
			Handler:    _Data_ListHookTags_Handler,
		},
		{
			MethodName: "ListHookReferences",
			Handler:    _Data_ListHookReferences_Handler,
		},
		{
			MethodName: "GetHook",
			Handler:    _Data_GetHook_Handler,
		},
		{
			MethodName: "CreateHookRevision",
			Handler:    _Data_CreateHookRevision_Handler,
		},
		{
			MethodName: "ListHookRevisions",
			Handler:    _Data_ListHookRevisions_Handler,
		},
		{
			MethodName: "GetHookRevisionByID",
			Handler:    _Data_GetHookRevisionByID_Handler,
		},
		{
			MethodName: "DeleteHookRevision",
			Handler:    _Data_DeleteHookRevision_Handler,
		},
		{
			MethodName: "PublishHookRevision",
			Handler:    _Data_PublishHookRevision_Handler,
		},
		{
			MethodName: "GetHookRevisionByPubState",
			Handler:    _Data_GetHookRevisionByPubState_Handler,
		},
		{
			MethodName: "UpdateHookRevision",
			Handler:    _Data_UpdateHookRevision_Handler,
		},
		{
			MethodName: "ListHookRevisionReferences",
			Handler:    _Data_ListHookRevisionReferences_Handler,
		},
		{
			MethodName: "GetReleaseHook",
			Handler:    _Data_GetReleaseHook_Handler,
		},
		{
			MethodName: "CreateTemplateSpace",
			Handler:    _Data_CreateTemplateSpace_Handler,
		},
		{
			MethodName: "ListTemplateSpaces",
			Handler:    _Data_ListTemplateSpaces_Handler,
		},
		{
			MethodName: "UpdateTemplateSpace",
			Handler:    _Data_UpdateTemplateSpace_Handler,
		},
		{
			MethodName: "DeleteTemplateSpace",
			Handler:    _Data_DeleteTemplateSpace_Handler,
		},
		{
			MethodName: "GetAllBizsOfTmplSpaces",
			Handler:    _Data_GetAllBizsOfTmplSpaces_Handler,
		},
		{
			MethodName: "CreateDefaultTmplSpace",
			Handler:    _Data_CreateDefaultTmplSpace_Handler,
		},
		{
			MethodName: "ListTmplSpacesByIDs",
			Handler:    _Data_ListTmplSpacesByIDs_Handler,
		},
		{
			MethodName: "CreateTemplate",
			Handler:    _Data_CreateTemplate_Handler,
		},
		{
			MethodName: "ListTemplates",
			Handler:    _Data_ListTemplates_Handler,
		},
		{
			MethodName: "UpdateTemplate",
			Handler:    _Data_UpdateTemplate_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _Data_DeleteTemplate_Handler,
		},
		{
			MethodName: "BatchDeleteTemplate",
			Handler:    _Data_BatchDeleteTemplate_Handler,
		},
		{
			MethodName: "AddTmplsToTmplSets",
			Handler:    _Data_AddTmplsToTmplSets_Handler,
		},
		{
			MethodName: "DeleteTmplsFromTmplSets",
			Handler:    _Data_DeleteTmplsFromTmplSets_Handler,
		},
		{
			MethodName: "ListTemplatesByIDs",
			Handler:    _Data_ListTemplatesByIDs_Handler,
		},
		{
			MethodName: "ListTemplatesNotBound",
			Handler:    _Data_ListTemplatesNotBound_Handler,
		},
		{
			MethodName: "ListTmplsOfTmplSet",
			Handler:    _Data_ListTmplsOfTmplSet_Handler,
		},
		{
			MethodName: "ListTemplateByTuple",
			Handler:    _Data_ListTemplateByTuple_Handler,
		},
		{
			MethodName: "BatchUpsertTemplates",
			Handler:    _Data_BatchUpsertTemplates_Handler,
		},
		{
			MethodName: "CreateTemplateRevision",
			Handler:    _Data_CreateTemplateRevision_Handler,
		},
		{
			MethodName: "ListTemplateRevisions",
			Handler:    _Data_ListTemplateRevisions_Handler,
		},
		{
			MethodName: "DeleteTemplateRevision",
			Handler:    _Data_DeleteTemplateRevision_Handler,
		},
		{
			MethodName: "ListTemplateRevisionsByIDs",
			Handler:    _Data_ListTemplateRevisionsByIDs_Handler,
		},
		{
			MethodName: "ListTmplRevisionNamesByTmplIDs",
			Handler:    _Data_ListTmplRevisionNamesByTmplIDs_Handler,
		},
		{
			MethodName: "CreateTemplateSet",
			Handler:    _Data_CreateTemplateSet_Handler,
		},
		{
			MethodName: "ListTemplateSets",
			Handler:    _Data_ListTemplateSets_Handler,
		},
		{
			MethodName: "UpdateTemplateSet",
			Handler:    _Data_UpdateTemplateSet_Handler,
		},
		{
			MethodName: "DeleteTemplateSet",
			Handler:    _Data_DeleteTemplateSet_Handler,
		},
		{
			MethodName: "ListAppTemplateSets",
			Handler:    _Data_ListAppTemplateSets_Handler,
		},
		{
			MethodName: "ListTemplateSetsByIDs",
			Handler:    _Data_ListTemplateSetsByIDs_Handler,
		},
		{
			MethodName: "ListTemplateSetBriefInfoByIDs",
			Handler:    _Data_ListTemplateSetBriefInfoByIDs_Handler,
		},
		{
			MethodName: "ListTmplSetsOfBiz",
			Handler:    _Data_ListTmplSetsOfBiz_Handler,
		},
		{
			MethodName: "CreateAppTemplateBinding",
			Handler:    _Data_CreateAppTemplateBinding_Handler,
		},
		{
			MethodName: "ListAppTemplateBindings",
			Handler:    _Data_ListAppTemplateBindings_Handler,
		},
		{
			MethodName: "UpdateAppTemplateBinding",
			Handler:    _Data_UpdateAppTemplateBinding_Handler,
		},
		{
			MethodName: "DeleteAppTemplateBinding",
			Handler:    _Data_DeleteAppTemplateBinding_Handler,
		},
		{
			MethodName: "ListAppBoundTmplRevisions",
			Handler:    _Data_ListAppBoundTmplRevisions_Handler,
		},
		{
			MethodName: "ListReleasedAppBoundTmplRevisions",
			Handler:    _Data_ListReleasedAppBoundTmplRevisions_Handler,
		},
		{
			MethodName: "GetReleasedAppBoundTmplRevision",
			Handler:    _Data_GetReleasedAppBoundTmplRevision_Handler,
		},
		{
			MethodName: "CheckAppTemplateBinding",
			Handler:    _Data_CheckAppTemplateBinding_Handler,
		},
		{
			MethodName: "ExtractAppTmplVariables",
			Handler:    _Data_ExtractAppTmplVariables_Handler,
		},
		{
			MethodName: "GetAppTmplVariableRefs",
			Handler:    _Data_GetAppTmplVariableRefs_Handler,
		},
		{
			MethodName: "GetReleasedAppTmplVariableRefs",
			Handler:    _Data_GetReleasedAppTmplVariableRefs_Handler,
		},
		{
			MethodName: "UpdateAppTmplVariables",
			Handler:    _Data_UpdateAppTmplVariables_Handler,
		},
		{
			MethodName: "ListAppTmplVariables",
			Handler:    _Data_ListAppTmplVariables_Handler,
		},
		{
			MethodName: "ListReleasedAppTmplVariables",
			Handler:    _Data_ListReleasedAppTmplVariables_Handler,
		},
		{
			MethodName: "ListTmplBoundCounts",
			Handler:    _Data_ListTmplBoundCounts_Handler,
		},
		{
			MethodName: "ListTmplRevisionBoundCounts",
			Handler:    _Data_ListTmplRevisionBoundCounts_Handler,
		},
		{
			MethodName: "ListTmplSetBoundCounts",
			Handler:    _Data_ListTmplSetBoundCounts_Handler,
		},
		{
			MethodName: "ListTmplBoundUnnamedApps",
			Handler:    _Data_ListTmplBoundUnnamedApps_Handler,
		},
		{
			MethodName: "ListTmplBoundNamedApps",
			Handler:    _Data_ListTmplBoundNamedApps_Handler,
		},
		{
			MethodName: "ListTmplBoundTmplSets",
			Handler:    _Data_ListTmplBoundTmplSets_Handler,
		},
		{
			MethodName: "ListMultiTmplBoundTmplSets",
			Handler:    _Data_ListMultiTmplBoundTmplSets_Handler,
		},
		{
			MethodName: "ListTmplRevisionBoundUnnamedApps",
			Handler:    _Data_ListTmplRevisionBoundUnnamedApps_Handler,
		},
		{
			MethodName: "ListTmplRevisionBoundNamedApps",
			Handler:    _Data_ListTmplRevisionBoundNamedApps_Handler,
		},
		{
			MethodName: "ListTmplSetBoundUnnamedApps",
			Handler:    _Data_ListTmplSetBoundUnnamedApps_Handler,
		},
		{
			MethodName: "ListMultiTmplSetBoundUnnamedApps",
			Handler:    _Data_ListMultiTmplSetBoundUnnamedApps_Handler,
		},
		{
			MethodName: "ListTmplSetBoundNamedApps",
			Handler:    _Data_ListTmplSetBoundNamedApps_Handler,
		},
		{
			MethodName: "ListLatestTmplBoundUnnamedApps",
			Handler:    _Data_ListLatestTmplBoundUnnamedApps_Handler,
		},
		{
			MethodName: "CreateTemplateVariable",
			Handler:    _Data_CreateTemplateVariable_Handler,
		},
		{
			MethodName: "ListTemplateVariables",
			Handler:    _Data_ListTemplateVariables_Handler,
		},
		{
			MethodName: "UpdateTemplateVariable",
			Handler:    _Data_UpdateTemplateVariable_Handler,
		},
		{
			MethodName: "DeleteTemplateVariable",
			Handler:    _Data_DeleteTemplateVariable_Handler,
		},
		{
			MethodName: "ImportTemplateVariables",
			Handler:    _Data_ImportTemplateVariables_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Data_CreateGroup_Handler,
		},
		{
			MethodName: "ListAllGroups",
			Handler:    _Data_ListAllGroups_Handler,
		},
		{
			MethodName: "ListAppGroups",
			Handler:    _Data_ListAppGroups_Handler,
		},
		{
			MethodName: "GetGroupByName",
			Handler:    _Data_GetGroupByName_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _Data_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Data_DeleteGroup_Handler,
		},
		{
			MethodName: "CountGroupsReleasedApps",
			Handler:    _Data_CountGroupsReleasedApps_Handler,
		},
		{
			MethodName: "ListGroupReleasedApps",
			Handler:    _Data_ListGroupReleasedApps_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _Data_Publish_Handler,
		},
		{
			MethodName: "GenerateReleaseAndPublish",
			Handler:    _Data_GenerateReleaseAndPublish_Handler,
		},
		{
			MethodName: "CreateCredential",
			Handler:    _Data_CreateCredential_Handler,
		},
		{
			MethodName: "ListCredentials",
			Handler:    _Data_ListCredentials_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _Data_DeleteCredential_Handler,
		},
		{
			MethodName: "UpdateCredential",
			Handler:    _Data_UpdateCredential_Handler,
		},
		{
			MethodName: "ListCredentialScopes",
			Handler:    _Data_ListCredentialScopes_Handler,
		},
		{
			MethodName: "UpdateCredentialScopes",
			Handler:    _Data_UpdateCredentialScopes_Handler,
		},
		{
			MethodName: "CreateKv",
			Handler:    _Data_CreateKv_Handler,
		},
		{
			MethodName: "UpdateKv",
			Handler:    _Data_UpdateKv_Handler,
		},
		{
			MethodName: "ListKvs",
			Handler:    _Data_ListKvs_Handler,
		},
		{
			MethodName: "DeleteKv",
			Handler:    _Data_DeleteKv_Handler,
		},
		{
			MethodName: "BatchUpsertKvs",
			Handler:    _Data_BatchUpsertKvs_Handler,
		},
		{
			MethodName: "UnDeleteKv",
			Handler:    _Data_UnDeleteKv_Handler,
		},
		{
			MethodName: "ListInstances",
			Handler:    _Data_ListInstances_Handler,
		},
		{
			MethodName: "FetchInstanceInfo",
			Handler:    _Data_FetchInstanceInfo_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Data_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data_service.proto",
}
