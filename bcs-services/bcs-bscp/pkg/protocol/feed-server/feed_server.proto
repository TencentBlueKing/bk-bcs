syntax = "proto3";

import "bscp.io/pkg/protocol/core/base/base.proto";

package pbfs;

option go_package = "bscp.io/pkg/protocol/feed-server;pbfs";

service Upstream {
    // APIs for sidecar.
    rpc Handshake(HandshakeMessage) returns (HandshakeResp) {}
    rpc Watch(SideWatchMeta) returns (stream FeedWatchMessage) {}
    rpc Messaging(MessagingMeta) returns (MessagingResp) {}
}

// HandshakeMessage defines the handshake message from sidecar to feed server.
message HandshakeMessage {
    pbbase.Versioning api_version = 1;
    SidecarSpec spec              = 2;
}

// SidecarSpec defines a sidecar's specifics.
message SidecarSpec {
    uint32 biz_id = 1;
    // version is sidecar's version
    pbbase.Versioning version     = 2;
    repeated SidecarAppMeta metas = 3;
}

// SidecarMeta define a sidecar's basic metadata information.
message SidecarAppMeta {
    uint32 app_id = 1;
    string uid    = 2;
}

// HandshakeResp defines handshake resp.
message HandshakeResp {
    pbbase.Versioning api_version = 1;
    // payload is the message's details information which is a json raw bytes.
    bytes payload = 2;
}

// SideWatchMeta defines watch messages send from sidecar to feed server.
message SideWatchMeta {
    // version defines message's protocol version from sidecar
    pbbase.Versioning api_version = 1;
    // payload is the message's details information which is a json raw bytes.
    // refer to sfs.SideWatchPayload.
    bytes payload = 2;
}

// FeedWatchMessage defines watch messages send from feed server to sidecar.
message FeedWatchMessage {
    // version defines message's protocol version from feed server
    pbbase.Versioning api_version = 1;
    // rid is the message's request id
    string rid = 2;
    // type is an enum type, it's an substitute of sfs.FeedMessageType.
    uint32 type = 3;
    // payload is the message's details information which is a json raw bytes.
    bytes payload = 4;
}

// MessagingMeta defines the message metadata send from sidecar to upstream server.
message MessagingMeta {
    // version defines message's protocol version from feed server
    pbbase.Versioning api_version = 1;
    // rid is the message's request id
    string rid = 2;
    // type is an enum type, it's an substitute of scs.MessagingType.
    uint32 type = 3;
    // payload is the message's details information which is a json raw bytes.
    bytes payload = 4;
}

// MessagingResp defines response from upstream server to sidecar,
// which is empty.
message MessagingResp {}
