syntax = "proto3";

package pbfs;

import "pkg/protocol/core/base/base.proto";
import "pkg/protocol/core/commit/commit.proto";
import "pkg/protocol/core/config-item/config_item.proto";
import "pkg/protocol/core/hook/hook.proto";
import "pkg/protocol/core/kv/kvs.proto";
import "pkg/protocol/core/content/content.proto";
import "google/api/annotations.proto";

option go_package = "github.com/TencentBlueKing/bk-bcs/bcs-services/bcs-bscp/pkg/protocol/feed-server;pbfs";

service Upstream {
  // APIs for sidecar.
  rpc Handshake(HandshakeMessage) returns (HandshakeResp) {}
  rpc Messaging(MessagingMeta) returns (MessagingResp) {}
  rpc Watch(SideWatchMeta) returns (stream FeedWatchMessage) {}
  rpc PullAppFileMeta(PullAppFileMetaReq) returns (PullAppFileMetaResp) {}
  rpc GetDownloadURL(GetDownloadURLReq) returns (GetDownloadURLResp) {}
  rpc PullKvMeta(PullKvMetaReq) returns (PullKvMetaResp) {
    option (google.api.http) = {
      post: "/api/v1/feed/biz/{biz_id}/kvs/metadata"
      body: "*"
    };
  }
  rpc GetKvValue(GetKvValueReq) returns (GetKvValueResp) {
    option (google.api.http) = {
      post: "/api/v1/feed/biz/{biz_id}/kvs/data/{key}"
      body: "*"
    };
  }
  rpc ListApps(ListAppsReq) returns (ListAppsResp) {}
  rpc AsyncDownload(AsyncDownloadReq) returns (AsyncDownloadResp) {}
  rpc AsyncDownloadStatus(AsyncDownloadStatusReq) returns (AsyncDownloadStatusResp) {}
}

// SidecarSpec defines a sidecar's specifics.
message SidecarSpec {
  uint32 biz_id = 1;
  // version is sidecar's version
  pbbase.Versioning version = 2;
}

// HandshakeMessage defines the handshake message from sidecar to feed server.
message HandshakeMessage {
  pbbase.Versioning api_version = 1;
  SidecarSpec spec = 2;
}

// HandshakeResp defines handshake resp.
message HandshakeResp {
  pbbase.Versioning api_version = 1;
  // payload is the message's details information which is a json raw bytes.
  bytes payload = 2;
}

// MessagingMeta defines the message metadata send from sdk to upstream server.
message MessagingMeta {
  // version defines message's protocol version from feed server
  pbbase.Versioning api_version = 1;
  // rid is the message's request id
  string rid = 2;
  // type is an enum type, it's an substitute of scs.MessagingType.
  uint32 type = 3;
  // payload is the message's details information which is a json raw bytes.
  bytes payload = 4;
}

// MessagingResp defines response from upstream server to sdk,
// which is empty.
message MessagingResp {}

// SideWatchMeta defines watch messages send from sidecar to feed server.
message SideWatchMeta {
  // version defines message's protocol version from sidecar
  pbbase.Versioning api_version = 1;
  // payload is the message's details information which is a json raw bytes.
  // refer to sfs.SideWatchPayload.
  bytes payload = 2;
}

// FeedWatchMessage defines watch messages send from feed server to sdk.
message FeedWatchMessage {
  // version defines message's protocol version from feed server
  pbbase.Versioning api_version = 1;
  // rid is the message's request id
  string rid = 2;
  // type is an enum type, it's an substitute of sfs.FeedMessageType.
  uint32 type = 3;
  // payload is the message's details information which is a json raw bytes.
  bytes payload = 4;
}

message AppMeta {
  string app = 1;
  string uid = 2;
  map<string, string> labels = 3;
}

message Repository {
  string root = 1;
}

message RepositorySpec {
  string path = 1;
}

message FileMeta {
  uint32 id = 1;
  uint32 commit_id = 2;
  pbcommit.CommitSpec commit_spec = 3;
  pbci.ConfigItemSpec config_item_spec = 4;
  pbci.ConfigItemAttachment config_item_attachment = 5;
  RepositorySpec repository_spec = 6;
  pbbase.Revision config_item_revision = 7;
}

message PullAppFileMetaReq {
  // version defines message's protocol version from sidecar
  pbbase.Versioning api_version = 1;
  // payload is the message's details information which is a json raw bytes.
  // refer to sfs.SideWatchPayload.
  uint32 biz_id = 2;
  AppMeta app_meta = 3;
  string token = 4;
  string key = 5;
  repeated string match = 6;
}

message PullAppFileMetaResp {
  uint32 release_id = 1;
  string release_name = 6;
  Repository repository = 2;
  repeated FileMeta file_metas = 3;
  pbhook.HookSpec pre_hook = 4;
  pbhook.HookSpec post_hook = 5;
}

message GetDownloadURLReq {
  // version defines message's protocol version from sidecar
  pbbase.Versioning api_version = 1;
  uint32 biz_id = 2;
  FileMeta file_meta = 3;
  string token = 4;
}

message GetDownloadURLResp {
  string url = 1;
  int64 wait_time_mil = 2;  // the time(milliseconds) that the client should wait before downloading file
}

// App 对外简单版本
message App {
  uint32 id = 1;
  string name = 2;
  string config_type = 3;
  pbbase.Revision revision = 4;
}

message ListAppsReq {
  uint32 biz_id = 1;
  repeated string match = 2;
}

message ListAppsResp {
  repeated App apps = 1;
}

message PullKvMetaReq {
  uint32 biz_id = 1;
  AppMeta app_meta = 2;
  repeated string match = 3;
}

message PullKvMetaResp {
  uint32 release_id = 1;
  repeated KvMeta kv_metas = 3;
}

message KvMeta {
  string key = 1;
  string kv_type = 2;
  pbbase.Revision revision = 3;
  pbkv.KvAttachment kv_attachment = 4;
  pbcontent.ContentSpec content_spec = 5;
}

message GetKvValueReq {
  uint32 biz_id = 1;
  AppMeta app_meta = 2;
  string key = 3;
}

message GetKvValueResp {
  string kv_type = 1;
  string value = 2;
}

message AsyncDownloadReq {
  uint32 biz_id = 1;
  string bk_agent_id = 2;
  string cluster_id = 3;
  string pod_id = 4;
  string container_name = 5;
  FileMeta file_meta = 6;
  // file_dir is the client/agent directory where the file will be downloaded to.
  string file_dir = 7;
}

message AsyncDownloadResp {
  string task_id = 1;
}

message AsyncDownloadStatusReq {
  uint32 biz_id = 1;
  string task_id = 2;
}

message AsyncDownloadStatusResp {
  AsyncDownloadStatus status = 1;
}

enum AsyncDownloadStatus {
  SUCCESS = 0;
  DOWNLOADING = 1;
  FAILED = 2;
}