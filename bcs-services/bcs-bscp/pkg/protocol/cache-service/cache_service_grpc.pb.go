// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: cache_service.proto

package pbcs

import (
	base "bscp.io/pkg/protocol/core/base"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cache_GetAppMeta_FullMethodName               = "/pbcs.Cache/GetAppMeta"
	Cache_GetReleasedCI_FullMethodName            = "/pbcs.Cache/GetReleasedCI"
	Cache_GetAppInstanceRelease_FullMethodName    = "/pbcs.Cache/GetAppInstanceRelease"
	Cache_GetAppReleasedStrategy_FullMethodName   = "/pbcs.Cache/GetAppReleasedStrategy"
	Cache_GetAppCpsID_FullMethodName              = "/pbcs.Cache/GetAppCpsID"
	Cache_GetCurrentCursorReminder_FullMethodName = "/pbcs.Cache/GetCurrentCursorReminder"
	Cache_ListEventsMeta_FullMethodName           = "/pbcs.Cache/ListEventsMeta"
	Cache_BenchAppMeta_FullMethodName             = "/pbcs.Cache/BenchAppMeta"
	Cache_BenchAppCRIMeta_FullMethodName          = "/pbcs.Cache/BenchAppCRIMeta"
	Cache_BenchReleasedCI_FullMethodName          = "/pbcs.Cache/BenchReleasedCI"
	Cache_BenchAppCPS_FullMethodName              = "/pbcs.Cache/BenchAppCPS"
)

// CacheClient is the client API for Cache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheClient interface {
	GetAppMeta(ctx context.Context, in *GetAppMetaReq, opts ...grpc.CallOption) (*JsonRawResp, error)
	GetReleasedCI(ctx context.Context, in *GetReleasedCIReq, opts ...grpc.CallOption) (*JsonRawResp, error)
	GetAppInstanceRelease(ctx context.Context, in *GetAppInstanceReleaseReq, opts ...grpc.CallOption) (*GetAppInstanceReleaseResp, error)
	GetAppReleasedStrategy(ctx context.Context, in *GetAppReleasedStrategyReq, opts ...grpc.CallOption) (*JsonArrayRawResp, error)
	GetAppCpsID(ctx context.Context, in *GetAppCpsIDReq, opts ...grpc.CallOption) (*GetAppCpsIDResp, error)
	GetCurrentCursorReminder(ctx context.Context, in *base.EmptyReq, opts ...grpc.CallOption) (*CurrentCursorReminderResp, error)
	ListEventsMeta(ctx context.Context, in *ListEventsReq, opts ...grpc.CallOption) (*ListEventsResp, error)
	// only stress test use.
	BenchAppMeta(ctx context.Context, in *BenchAppMetaReq, opts ...grpc.CallOption) (*BenchAppMetaResp, error)
	BenchAppCRIMeta(ctx context.Context, in *BenchAppCRIMetaReq, opts ...grpc.CallOption) (*BenchAppCRIMetaResp, error)
	BenchReleasedCI(ctx context.Context, in *BenchReleasedCIReq, opts ...grpc.CallOption) (*BenchReleasedCIResp, error)
	BenchAppCPS(ctx context.Context, in *BenchAppCPSReq, opts ...grpc.CallOption) (*BenchAppCPSResp, error)
}

type cacheClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheClient(cc grpc.ClientConnInterface) CacheClient {
	return &cacheClient{cc}
}

func (c *cacheClient) GetAppMeta(ctx context.Context, in *GetAppMetaReq, opts ...grpc.CallOption) (*JsonRawResp, error) {
	out := new(JsonRawResp)
	err := c.cc.Invoke(ctx, Cache_GetAppMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) GetReleasedCI(ctx context.Context, in *GetReleasedCIReq, opts ...grpc.CallOption) (*JsonRawResp, error) {
	out := new(JsonRawResp)
	err := c.cc.Invoke(ctx, Cache_GetReleasedCI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) GetAppInstanceRelease(ctx context.Context, in *GetAppInstanceReleaseReq, opts ...grpc.CallOption) (*GetAppInstanceReleaseResp, error) {
	out := new(GetAppInstanceReleaseResp)
	err := c.cc.Invoke(ctx, Cache_GetAppInstanceRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) GetAppReleasedStrategy(ctx context.Context, in *GetAppReleasedStrategyReq, opts ...grpc.CallOption) (*JsonArrayRawResp, error) {
	out := new(JsonArrayRawResp)
	err := c.cc.Invoke(ctx, Cache_GetAppReleasedStrategy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) GetAppCpsID(ctx context.Context, in *GetAppCpsIDReq, opts ...grpc.CallOption) (*GetAppCpsIDResp, error) {
	out := new(GetAppCpsIDResp)
	err := c.cc.Invoke(ctx, Cache_GetAppCpsID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) GetCurrentCursorReminder(ctx context.Context, in *base.EmptyReq, opts ...grpc.CallOption) (*CurrentCursorReminderResp, error) {
	out := new(CurrentCursorReminderResp)
	err := c.cc.Invoke(ctx, Cache_GetCurrentCursorReminder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) ListEventsMeta(ctx context.Context, in *ListEventsReq, opts ...grpc.CallOption) (*ListEventsResp, error) {
	out := new(ListEventsResp)
	err := c.cc.Invoke(ctx, Cache_ListEventsMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) BenchAppMeta(ctx context.Context, in *BenchAppMetaReq, opts ...grpc.CallOption) (*BenchAppMetaResp, error) {
	out := new(BenchAppMetaResp)
	err := c.cc.Invoke(ctx, Cache_BenchAppMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) BenchAppCRIMeta(ctx context.Context, in *BenchAppCRIMetaReq, opts ...grpc.CallOption) (*BenchAppCRIMetaResp, error) {
	out := new(BenchAppCRIMetaResp)
	err := c.cc.Invoke(ctx, Cache_BenchAppCRIMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) BenchReleasedCI(ctx context.Context, in *BenchReleasedCIReq, opts ...grpc.CallOption) (*BenchReleasedCIResp, error) {
	out := new(BenchReleasedCIResp)
	err := c.cc.Invoke(ctx, Cache_BenchReleasedCI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) BenchAppCPS(ctx context.Context, in *BenchAppCPSReq, opts ...grpc.CallOption) (*BenchAppCPSResp, error) {
	out := new(BenchAppCPSResp)
	err := c.cc.Invoke(ctx, Cache_BenchAppCPS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheServer is the server API for Cache service.
// All implementations should embed UnimplementedCacheServer
// for forward compatibility
type CacheServer interface {
	GetAppMeta(context.Context, *GetAppMetaReq) (*JsonRawResp, error)
	GetReleasedCI(context.Context, *GetReleasedCIReq) (*JsonRawResp, error)
	GetAppInstanceRelease(context.Context, *GetAppInstanceReleaseReq) (*GetAppInstanceReleaseResp, error)
	GetAppReleasedStrategy(context.Context, *GetAppReleasedStrategyReq) (*JsonArrayRawResp, error)
	GetAppCpsID(context.Context, *GetAppCpsIDReq) (*GetAppCpsIDResp, error)
	GetCurrentCursorReminder(context.Context, *base.EmptyReq) (*CurrentCursorReminderResp, error)
	ListEventsMeta(context.Context, *ListEventsReq) (*ListEventsResp, error)
	// only stress test use.
	BenchAppMeta(context.Context, *BenchAppMetaReq) (*BenchAppMetaResp, error)
	BenchAppCRIMeta(context.Context, *BenchAppCRIMetaReq) (*BenchAppCRIMetaResp, error)
	BenchReleasedCI(context.Context, *BenchReleasedCIReq) (*BenchReleasedCIResp, error)
	BenchAppCPS(context.Context, *BenchAppCPSReq) (*BenchAppCPSResp, error)
}

// UnimplementedCacheServer should be embedded to have forward compatible implementations.
type UnimplementedCacheServer struct {
}

func (UnimplementedCacheServer) GetAppMeta(context.Context, *GetAppMetaReq) (*JsonRawResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppMeta not implemented")
}
func (UnimplementedCacheServer) GetReleasedCI(context.Context, *GetReleasedCIReq) (*JsonRawResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleasedCI not implemented")
}
func (UnimplementedCacheServer) GetAppInstanceRelease(context.Context, *GetAppInstanceReleaseReq) (*GetAppInstanceReleaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppInstanceRelease not implemented")
}
func (UnimplementedCacheServer) GetAppReleasedStrategy(context.Context, *GetAppReleasedStrategyReq) (*JsonArrayRawResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppReleasedStrategy not implemented")
}
func (UnimplementedCacheServer) GetAppCpsID(context.Context, *GetAppCpsIDReq) (*GetAppCpsIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppCpsID not implemented")
}
func (UnimplementedCacheServer) GetCurrentCursorReminder(context.Context, *base.EmptyReq) (*CurrentCursorReminderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentCursorReminder not implemented")
}
func (UnimplementedCacheServer) ListEventsMeta(context.Context, *ListEventsReq) (*ListEventsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventsMeta not implemented")
}
func (UnimplementedCacheServer) BenchAppMeta(context.Context, *BenchAppMetaReq) (*BenchAppMetaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BenchAppMeta not implemented")
}
func (UnimplementedCacheServer) BenchAppCRIMeta(context.Context, *BenchAppCRIMetaReq) (*BenchAppCRIMetaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BenchAppCRIMeta not implemented")
}
func (UnimplementedCacheServer) BenchReleasedCI(context.Context, *BenchReleasedCIReq) (*BenchReleasedCIResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BenchReleasedCI not implemented")
}
func (UnimplementedCacheServer) BenchAppCPS(context.Context, *BenchAppCPSReq) (*BenchAppCPSResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BenchAppCPS not implemented")
}

// UnsafeCacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheServer will
// result in compilation errors.
type UnsafeCacheServer interface {
	mustEmbedUnimplementedCacheServer()
}

func RegisterCacheServer(s grpc.ServiceRegistrar, srv CacheServer) {
	s.RegisterService(&Cache_ServiceDesc, srv)
}

func _Cache_GetAppMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppMetaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).GetAppMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_GetAppMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).GetAppMeta(ctx, req.(*GetAppMetaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_GetReleasedCI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleasedCIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).GetReleasedCI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_GetReleasedCI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).GetReleasedCI(ctx, req.(*GetReleasedCIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_GetAppInstanceRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppInstanceReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).GetAppInstanceRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_GetAppInstanceRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).GetAppInstanceRelease(ctx, req.(*GetAppInstanceReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_GetAppReleasedStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppReleasedStrategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).GetAppReleasedStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_GetAppReleasedStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).GetAppReleasedStrategy(ctx, req.(*GetAppReleasedStrategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_GetAppCpsID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppCpsIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).GetAppCpsID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_GetAppCpsID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).GetAppCpsID(ctx, req.(*GetAppCpsIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_GetCurrentCursorReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).GetCurrentCursorReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_GetCurrentCursorReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).GetCurrentCursorReminder(ctx, req.(*base.EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_ListEventsMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).ListEventsMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_ListEventsMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).ListEventsMeta(ctx, req.(*ListEventsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_BenchAppMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BenchAppMetaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).BenchAppMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_BenchAppMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).BenchAppMeta(ctx, req.(*BenchAppMetaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_BenchAppCRIMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BenchAppCRIMetaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).BenchAppCRIMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_BenchAppCRIMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).BenchAppCRIMeta(ctx, req.(*BenchAppCRIMetaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_BenchReleasedCI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BenchReleasedCIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).BenchReleasedCI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_BenchReleasedCI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).BenchReleasedCI(ctx, req.(*BenchReleasedCIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_BenchAppCPS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BenchAppCPSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).BenchAppCPS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_BenchAppCPS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).BenchAppCPS(ctx, req.(*BenchAppCPSReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Cache_ServiceDesc is the grpc.ServiceDesc for Cache service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cache_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbcs.Cache",
	HandlerType: (*CacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAppMeta",
			Handler:    _Cache_GetAppMeta_Handler,
		},
		{
			MethodName: "GetReleasedCI",
			Handler:    _Cache_GetReleasedCI_Handler,
		},
		{
			MethodName: "GetAppInstanceRelease",
			Handler:    _Cache_GetAppInstanceRelease_Handler,
		},
		{
			MethodName: "GetAppReleasedStrategy",
			Handler:    _Cache_GetAppReleasedStrategy_Handler,
		},
		{
			MethodName: "GetAppCpsID",
			Handler:    _Cache_GetAppCpsID_Handler,
		},
		{
			MethodName: "GetCurrentCursorReminder",
			Handler:    _Cache_GetCurrentCursorReminder_Handler,
		},
		{
			MethodName: "ListEventsMeta",
			Handler:    _Cache_ListEventsMeta_Handler,
		},
		{
			MethodName: "BenchAppMeta",
			Handler:    _Cache_BenchAppMeta_Handler,
		},
		{
			MethodName: "BenchAppCRIMeta",
			Handler:    _Cache_BenchAppCRIMeta_Handler,
		},
		{
			MethodName: "BenchReleasedCI",
			Handler:    _Cache_BenchReleasedCI_Handler,
		},
		{
			MethodName: "BenchAppCPS",
			Handler:    _Cache_BenchAppCPS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cache_service.proto",
}
