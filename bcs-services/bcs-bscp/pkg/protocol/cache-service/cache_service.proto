syntax = "proto3";

import "bscp.io/pkg/protocol/core/released-ci/released_ci.proto";
import "bscp.io/pkg/protocol/core/strategy/strategy.proto";
import "bscp.io/pkg/protocol/core/event/event.proto";
import "bscp.io/pkg/protocol/core/base/base.proto";
import "bscp.io/pkg/protocol/core/app/app.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

package pbcs;

option go_package = "bscp.io/pkg/protocol/cache-service;pbcs";

service Cache {
    rpc GetAppMeta(GetAppMetaReq) returns (JsonRawResp) {
        // response data reference pkg/types/cache.go/AppCacheMeta
        option (google.api.http) = {
            post: "/api/v1/cache/app/app/meta/biz_id/{biz_id}"
            body: "*"
        };
    }

    rpc GetReleasedCI(GetReleasedCIReq) returns (JsonRawResp) {
        // response data is a json array raw of RCI(released config item)
        // reference pkg/dal/table/released_ci.go/ReleasedConfigItem
        option (google.api.http) = {
            post: "/api/v1/cache/ci/released/biz_id/{biz_id}"
            body: "*"
        };
    }

    rpc GetAppInstanceRelease(GetAppInstanceReleaseReq) returns (GetAppInstanceReleaseResp) {
        // get the app instance's specific release if it has been configured with.
        option (google.api.http) = {
            post: "/api/v1/cache/instance/instance/released/biz_id/{biz_id}"
            body: "*"
        };
    }

    rpc GetAppReleasedStrategy(GetAppReleasedStrategyReq) returns (JsonArrayRawResp) {
        // get the app's current latest released strategies with namespace or not.
        option (google.api.http) = {
            post: "/api/v1/cache/strategy/released/latest/biz_id/{biz_id}"
            body: "*"
        };
    }

    rpc GetAppCpsID(GetAppCpsIDReq) returns (GetAppCpsIDResp) {
        // get the app's current latest released strategies with namespace or not.
        // returns with the json array raw of pkg/types/cache.PublishedStrategyCache
        option (google.api.http) = {
            post: "/api/v1/cache/list/strategy/id/latest/biz_id/{biz_id}"
            body: "*"
        };
    }

    rpc GetCurrentCursorReminder(pbbase.EmptyReq) returns (CurrentCursorReminderResp) {
        // get the current consumed event's id, which is the cursor reminder's resource id.
        option (google.api.http) = {
            post: "/api/v1/cache/list/event/reminder/current"
            body: "*"
        };
    }

    rpc ListEventsMeta(ListEventsReq) returns (ListEventsResp) {
        // list event's meta with filter
        option (google.api.http) = {
            post: "/api/v1/cache/list/event/event/meta"
            body: "*"
        };
    }

    // only stress test use.
    rpc BenchAppMeta(BenchAppMetaReq) returns (BenchAppMetaResp) {}
    rpc BenchAppCRIMeta(BenchAppCRIMetaReq) returns (BenchAppCRIMetaResp) {}
    rpc BenchReleasedCI(BenchReleasedCIReq) returns (BenchReleasedCIResp) {}
    rpc BenchAppCPS(BenchAppCPSReq) returns (BenchAppCPSResp) {}
}

message JsonRawResp {
    string json_raw = 1;
}

message GetAppMetaReq {
    uint32 biz_id = 1;
    uint32 app_id = 2;
}

message GetReleasedCIReq {
    uint32 biz_id     = 1;
    uint32 release_id = 2;
}

message GetAppInstanceReleaseReq {
    uint32 biz_id = 1;
    uint32 app_id = 2;
    string uid    = 3;
}

message GetAppInstanceReleaseResp {
    // if the returned release id is > 0, then it means this instance has
    // a specific release, if <= 0, then no specific release is configured
    // for this app instance.
    uint32 release_id = 1;
}

message GetAppReleasedStrategyReq {
    uint32 biz_id          = 1;
    uint32 app_id          = 2;
    repeated uint32 cps_id = 3;
}

message JsonArrayRawResp {
    repeated string json_raw = 1;
}

message GetAppCpsIDReq {
    uint32 biz_id    = 1;
    uint32 app_id    = 2;
    string namespace = 3;
}

message GetAppCpsIDResp {
    repeated uint32 cps_id = 1;
}

message BenchAppMetaReq {
    uint32 biz_id           = 1;
    repeated uint32 app_ids = 2;
}

message BenchAppMetaResp {
    map<uint32, AppMeta> meta = 1;
}

message AppMeta {
    string cft          = 1;
    string dpt          = 2;
    string mod          = 3;
    pbapp.Reload reload = 4;
}

message BenchAppCRIMetaReq {
    uint32 biz_id = 1;
    uint32 app_id = 2;
}

message BenchAppCRIMetaResp {
    repeated AppCRIMeta meta = 1;
}

message AppCRIMeta {
    string uid        = 1;
    uint32 release_id = 2;
}

message BenchReleasedCIReq {
    uint32 biz_id     = 1;
    uint32 release_id = 2;
}

message BenchReleasedCIResp {
    repeated pbrci.ReleasedConfigItem meta = 1;
}

message BenchAppCPSReq {
    uint32 biz_id = 1;
    uint32 app_id = 2;
}

message BenchAppCPSResp {
    repeated PublishedStrategy meta = 1;
}

message PublishedStrategy {
    uint32 strategy_id             = 1;
    uint32 release_id              = 2;
    bool as_default                = 3;
    pbstrategy.ScopeSelector scope = 4;
    string mode                    = 5;
    string namespace               = 6;
}

// the current consumed event's cursor which is also event's id.
message CurrentCursorReminderResp {
    uint32 cursor = 1;
}

message ListEventsReq {
    google.protobuf.Struct filter = 1;
    // max page limit is 200
    pbbase.BasePage page = 2;
}

message ListEventsResp {
    repeated EventMeta list = 1;
}

message EventMeta {
    uint32 id                          = 1;
    pbevent.EventSpec spec             = 2;
    pbevent.EventAttachment attachment = 3;
}
