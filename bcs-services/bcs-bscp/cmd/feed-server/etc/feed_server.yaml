# defines all the network related options.
network:
  # bindIP is ip where server working on.
  bindIP:
  # rpcPort is port where server listen to rpc port.
  rpcPort: 9510
  # httpPort is port where server listen to http port.
  httpPort: 9610
  # defines tls related options.
  tls:
    # server should be accessed without verifying the TLS certificate.
    insecureSkipVerify: 
    # server requires TLS client certificate authentication.
    certFile:
    # server requires TLS client certificate authentication.
    keyFile:
    # trusted root certificates for server.
    caFile:
    # the password to decrypt the certificate.
    password:

# defines all the repo related settings.
repository:
  # defines storage type s3 , bkRepo
  storageType: bkRepo
  s3:
    endpoint: http://127.0.0.1:2379
    accessKeyID: xxxxx
    secretAccessKey: xxxxx
    useSSL: true
    bucketName: xxxxx
  bkRepo:
    # endpoints is a list of URLs, format: scheme://addr. e.g: http://127.0.0.1.
    endpoints:
      - http://127.0.0.1:2379
    # token plat authority authentication of repo.
    token:
    # project bscp project name in repo.
    project: bk_bscp
    # user bscp project admin user in repo.
    user: bk_bscp
    # defines tls related options.
    tls:
      # server should be accessed without verifying the TLS certificate.
      insecureSkipVerify:
      # server requires TLS client certificate authentication.
      certFile:
      # server requires TLS client certificate authentication.
      keyFile:
      # trusted root certificates for server.
      caFile:
      # the password to decrypt the certificate.
      password:

# defines service related settings.
service:
  # defines etcd related settings
  etcd:
    # endpoints is a list of URLs.
    endpoints:
      - 127.0.0.1:2379
    # dialTimeoutMS is the timeout milliseconds for failing to establish a connection.
    dialTimeoutMS:
    # username is a user's name for authentication.
    username:
    # password is a password for authentication.
    password:
    # defines tls related options.
    tls:
      # server should be accessed without verifying the TLS certificate.
      insecureSkipVerify: 
      # server requires TLS client certificate authentication.
      certFile:
      # server requires TLS client certificate authentication.
      keyFile:
      # trusted root certificates for server.
      caFile:
      # the password to decrypt the certificate.
      password:

# feed server' down stream related settings.
downstream:
  # bounceIntervalHour defines the maximum connect time of sidecar and feed server. feed server will send
  # this parameter to sidecar. if the connection between sidecar and feed server reaches this interval,
  # sidecar will re-select the feed server instance to establish the connection. unit is hour, the
  # minimum bounceIntervalHour is 1, the maximum bounceIntervalHour is 48, and the default bounceIntervalHour is 1.
  bounceIntervalHour: 60
  # notifyMaxLimit is the concurrent number of goroutines which are used to broadcast app release messages to
  #	sidecars, which are connnected to one feed server, when new app releases are published. The larger of it,
  #	the more CPU and Mem will be costed.the minimum notifyMaxLimit is 10, the default notifyMaxLimit is 50.
  notifyMaxLimit: 50
  # matchReleaseLimiter limit the incoming request frequency to match release, and each feed server instance
  # have the independent request limitation.
  matchReleaseLimiter:
    qps: 500
    burst: 500
    waitTimeMil: 50

# feed server's local cache related settings.
# Note: 
# 1. These configurations depend on you host's in-memory cache size, the larger the value of these 
# configuration values, the more cache it will take.
# 2. If you do not configure these values, the default value will be used.
fsLocalCache:
  # appCacheSize defines how many app info can be cached.
  appCacheSize: 1000
  # appCacheTTLSec defines how long will this app can be cached in seconds. these cached apps meta info is 
  # unchangeable static data, so it can be cached for a long time.
  appCacheTTLSec: 1800
  # releasedInstanceCacheSize defines how many released instance can be cached.
  releasedInstanceCacheSize: 1000
  # releasedInstanceCacheTTLSec defines how long will this released instance can be cached in seconds.
  # the large of the value, the longer it will take for the published instance take effected. should <= 600.
  releasedInstanceCacheTTLSec: 120
  # releasedCICacheSize defines how many released configuration items can be cached.
  releasedCICacheSize: 1000
  # releasedCICacheTTLSec defines how long will this released configuration items can be cached in seconds.
  releasedCICacheTTLSec: 120
  # publishedStrategyCacheSize defines how many published strategies can be cached.
  publishedStrategyCacheSize: 1000
  # publishedStrategyCacheTTLSec defines how long will this published strategy can be cached in seconds.
  # the large of value, the longer it takes for the published app strategy take effected. should <= 600.
  publishedStrategyCacheTTLSec: 120
  # authCacheSize defines how many auth results can be cached. should >= 100.
  authCacheSize: 1000
  # authCacheTTLSec defines how long this auth result with permission can be cached in seconds.
  # user's permission will last for a long time after they applied, so it can be cached for a long time. should >= 60.
  authCacheTTLSec: 300

# defines log's related configuration
log:
  # log storage directory.
  logDir: ./log
  # per file max size, uint: MB.
  maxPerFileSizeMB: 1024
  # per line max size, uint: KB.
  maxPerLineSizeKB: 2
  # log file max storage number.
  maxFileNum: 5
  # whether the restart service log is appended to the latest log file, or whether a new log file is created.
  logAppend: false
  # log the log to std err only, it can not be used with AlsoToStdErr at the same time.
  toStdErr: false
  # log the log to file and also to std err. it can not be used with ToStdErr at the same time.
  alsoToStdErr: false
  # log level.
  verbosity: 0
