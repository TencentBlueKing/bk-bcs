#!/bin/bash

#######################################
# Tencent is pleased to support the open source community by making Blueking Container Service available.
# Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
# Licensed under the MIT License (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# http://opensource.org/licenses/MIT
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing permissions and
# limitations under the License.
#######################################

set -euo pipefail

SELF_DIR=$(dirname "$(readlink -f "$0")")
ROOT_DIR="${SELF_DIR}/.."

safe_source() {
  local source_file=$1
  if [[ -f ${source_file} ]]; then
    #shellcheck source=/dev/null
    source "${source_file}"
  else
    echo "[ERROR]: FAIL to source, missing ${source_file}"
    exit 1
  fi
}

usage_and_exit() {
  cat <<EOF
Usage:
    $PROGRAM
      [ -h --help -?  show usage ]
      [ apply ]
      [ delete ]
EOF
  exit "$1"
}

check_k8s_status() {
  if ! command -v kubectl &>/dev/null; then
    utils::log "FATAL" "can not find kubectl"
  fi

  if ! kubectl cluster-info 2>/dev/null; then
    utils::log "FATAL" "fail to get k8s cluster info"
  fi
  return 0
}

op_kubevip() {
  check_k8s_status
  action=$1
  if [[ -z ${BK_PUBLIC_REPO} ]]; then
    kubevip_image="ghcr.io/kube-vip/kube-vip:${KUBE_VIP_VERSION}"
    utils::log "ERROR" "${action} kube-vip failed, empty BK_PUBLIC_REPO or KUBE_VIP_VERSION"
  else
    kubevip_image="${BK_PUBLIC_REPO}/kube-vip/kube-vip:${KUBE_VIP_VERSION}"
  fi
  utils::log "INFO" "${action}ing kube-vip"
  case $action in
    apply)
      cat <<EOF >/etc/kubernetes/manifests/kube-vip.yaml
apiVersion: v1
kind: Pod
metadata:
  name: kube-vip
  namespace: kube-system
spec:
  containers:
  - args:
    - manager
    env:
    - name: vip_arp
      value: "true"
    - name: port
      value: "6443"
    - name: vip_interface
      value: ${BIND_INTERFACE}
    - name: vip_subnet
      value: /${VIP_CIDR}
    - name: cp_enable
      value: "true"
    - name: cp_namespace
      value: kube-system
    - name: vip_ddns
      value: "false"
    - name: svc_enable
      value: "true"
    - name: vip_leaderelection
      value: "true"
    - name: vip_leaseduration
      value: "5"
    - name: vip_renewdeadline
      value: "3"
    - name: vip_retryperiod
      value: "1"
    - name: vip_address
      value: ${VIP}
    - name: prometheus_server
      value: :2112
    image: ${kubevip_image}
    imagePullPolicy: Always
    name: kube-vip
    resources: {}
    securityContext:
      capabilities:
        add:
        - NET_ADMIN
        - NET_RAW
    volumeMounts:
    - mountPath: /etc/kubernetes/admin.conf
      name: kubeconfig
  hostAliases:
  - hostnames:
    - kubernetes
    ip: 127.0.0.1
  hostNetwork: true
  volumes:
  - hostPath:
      path: /etc/kubernetes/admin.conf
    name: kubeconfig
EOF
      ;;
    delete)
      rm -f /etc/kubernetes/manifests/kube-vip.yaml
      ;;
  esac
  utils::log "OK" "${action} kube-vip success"
}

main() {
  local source_files
  source_files=("${ROOT_DIR}/functions/utils.sh" "${ROOT_DIR}/env/bcs.env")
  for file in "${source_files[@]}"; do
    safe_source "$file"
  done

  (($# == 0)) && usage_and_exit 1

  while (($# > 0)); do
    case "$1" in
      --help | -h | '-?')
        usage_and_exit 0
        ;;
      apply)
        op_kubevip "apply"
        break
        ;;
      delete)
        op_kubevip "delete"
        break
        ;;
      -*)
        # ToDo: Unified standard error code
        export ERR_CODE=1
        utils::log "ERROR" "unkown para: $1"
        ;;
      *)
        export ERR_CODE=1
        utils::log "ERROR" "unkown command: $1"
        break
        ;;
    esac
    shift
  done
}

main "$@"
