#! /bin/bash

#######################################
# Tencent is pleased to support the open source community by making Blueking Container Service available.
# Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
# Licensed under the MIT License (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# http://opensource.org/licenses/MIT
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing permissions and
# limitations under the License.
#######################################

set -euo pipefail
# apply or delete mutuls

PROGRAM="$(basename "$0")"
MULTUS_VERSION="snap"
SELF_DIR=$(dirname "$(readlink -f "$0")")
ROOT_DIR="${SELF_DIR}/.."

readonly PROGRAM SELF_DIR ROOT_DIR

usage_and_exit() {
  cat <<EOF
Usage:
    $PROGRAM
      [ -h --help -?  show usage ]
      [ -v -V --version show script version]
      [ apply ]
      [ delete ]
EOF
  return "$1"
}

version() {
  echo "$PROGRAM version $MULTUS_VERSION"
}

safe_source() {
  local source_file=$1
  if [[ -f ${source_file} ]]; then
    #shellcheck source=/dev/null
    source "${source_file}"
  else
    echo "[ERROR]: FAIL to source, missing ${source_file}"
    exit 1
  fi
}

check_k8s_status() {
  if ! command -v kubectl &>/dev/null; then
    utils::log "FATAL" "can not find kubectl"
  fi

  if ! kubectl cluster-info 2>/dev/null; then
    utils::log "FATAL" "fail to get k8s cluster info"
  fi
  return 0
}

check_envsubst() {
  if ! command -v envsubst &>/dev/null; then
    utils:log "WARN" "command 'envsubst' not install, will be installed"
    yum install gettext -y -q
  fi
}

op_multus() {
  check_k8s_status
  check_envsubst
  local multus_image
  ipv6_status=${K8S_IPv6_STATUS:-"Disable"}
  ipv6_status=${ipv6_status,,}
  action=$1
  if [[ -z ${BK_PUBLIC_REPO} ]]; then
    multus_image="ghcr.io/k8snetworkplumbingwg/multus-cni:${MULTUS_VERSION}"
  else
    multus_image="${BK_PUBLIC_REPO}/k8snetworkplumbingwg/multus-cni:${MULTUS_VERSION}"
  fi

  utils::log "INFO" "${action}ing multus"
  export MULTUS_IMAGE=${multus_image}
  # shellcheck disable=SC2002
  cat "${ROOT_DIR}"/k8s/component_multus.yaml | envsubst | kubectl "${action}" -f -
  utils::log "OK" "multus installed"
}

main() {
  local source_files
  source_files=("${ROOT_DIR}/functions/utils.sh" "${ROOT_DIR}/env/bcs.env")
  for file in "${source_files[@]}"; do
    safe_source "$file"
  done

  (($# == 0)) && usage_and_exit 1

  while (($# > 0)); do
    case "$1" in
      --help | -h | '-?')
        usage_and_exit 0
        ;;
      --version | -v | -V)
        version
        exit 0
        ;;
      apply)
        op_multus "apply"
        break
        ;;
      delete)
        op_multus "delete"
        break
        ;;
      -*)
        # ToDo: Unified standard error code
        export ERR_CODE=1
        utils::log "ERROR" "unkown para: $1"
        ;;
      *)
        export ERR_CODE=1
        utils::log "ERROR" "unkown command: $1"
        break
        ;;
    esac
    shift
  done

}

main "$@"
