#!/bin/bash

#######################################
# Tencent is pleased to support the open source community by making Blueking Container Service available.
# Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
# Licensed under the MIT License (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# http://opensource.org/licenses/MIT
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing permissions and
# limitations under the License.
#######################################

set -euo pipefail

SELF_DIR=$(dirname "$(readlink -f "$0")")
ROOT_DIR="${SELF_DIR}/.."

safe_source() {
  local source_file=$1
  if [[ -f ${source_file} ]]; then
    #shellcheck source=/dev/null
    source "${source_file}"
  else
    echo "[ERROR]: FAIL to source, missing ${source_file}"
    exit 1
  fi
}

# 修改kube-proxy配置,添加vip白名单防止kube-proxy删除自定义的ipvs规则，并重启kube-proxy所有pod
exclude_cidr_kube_proxy() {
  if ! kubectl get cm -n kube-system kube-proxy -oyaml | grep -q "${VIP}"; then
    kubectl get cm -n kube-system kube-proxy -oyaml \
      | sed -e "s/      excludeCIDRs: null/      excludeCIDRs:/" \
        -e "s/      excludeCIDRs:/      excludeCIDRs:\n      - ${VIP}\/32/" -e '/resourceVersion/d' \
      | kubectl apply -f - \
      || utils::log "ERROR" "failed to add excludeCIDRs for kube-proxy"
    kubectl rollout restart daemonset -n kube-system kube-proxy
    utils::log "INFO" "excluded cidr ${VIP}/32 for kube-proxy success"
  else
    utils::log "INFO" "cidr ${VIP}/32 already exists in kube-proxy config"
  fi
}

usage_and_exit() {
  cat <<EOF
Usage:
    $PROGRAM
      [ -h --help -?  show usage ]
      [ apply ]
      [ delete ]
EOF
  exit "$1"
}

check_k8s_status() {
  if ! command -v kubectl &>/dev/null; then
    utils::log "FATAL" "can not find kubectl"
  fi

  if ! kubectl cluster-info 2>/dev/null; then
    utils::log "FATAL" "fail to get k8s cluster info"
  fi
  return 0
}

op_bap() {
  check_k8s_status
  action=$1
  if [[ -z ${BK_PUBLIC_REPO} ]]; then
    utils::log "ERROR" "${action} bcs-apiserver-proxy failed, empty BK_PUBLIC_REPO"
  else
    bap_image="${BK_PUBLIC_REPO}/blueking/bcs-apiserver-proxy:${APISERVER_PROXY_VERSION}"
  fi

  utils::log "INFO" "${action}ing bcs-apiserver-proxy"
  cat <<EOF | kubectl "${action}" -f -
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: bcs-apiserver-proxy
  namespace: kube-system
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: bcs-apiserver-proxy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: bcs-apiserver-proxy
subjects:
  - kind: ServiceAccount
    name: bcs-apiserver-proxy
    namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: bcs-apiserver-proxy
rules:
  - apiGroups: [""]
    resources:
      - endpoints
      - nodes
    verbs:
      - get
      - list
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: bcs-apiserver-proxy
  namespace: kube-system
  labels:
    app: bcs-apiserver-proxy
spec:
  selector:
    matchLabels:
      app: bcs-apiserver-proxy
  template:
    metadata:
      labels:
        app: bcs-apiserver-proxy
    spec:
      containers:
        - args:
            - -f
            - /data/bcs/bcs-apiserver-proxy/bcs-apiserver-proxy.json
          command:
            - /data/bcs/bcs-apiserver-proxy/container-start.sh
          env:
            - name: localIp
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: bcsApiserverProxyPort
              value: "8004"
            - name: log_dir
              value: "/data/bcs/logs/bcs"
            - name: pid_dir
              value: ./
            - name: alsotostderr
              value: "true"
            - name: log_level
              value: "${LOG_LEVEL}"
            - name: bcsApiserverProxyDebug
              value: "${DEBUG_MODE}"
            - name: ipvsPersistDir
              value: "${PERSIST_DIR}"
            - name: virtualAddress
              value: "${VIP}:${VS_PORT}"
            - name: lvsScheduler
              value: "${LVS_SCHEDULER}"
            - name: healthScheme
              value: "https"
            - name: healthPath
              value: "/healthz"
            - name: kubeMaster
              value: ""
            - name: kubeConfig
              value: ""
            - name: managerInterval
              value: "${MANAGER_INTERVAL}"
            - name: BCS_CONFIG_TYPE
              value: render
          image: ${bap_image}
          imagePullPolicy: IfNotPresent
          name: bcs-apiserver-proxy
          resources: {}
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
            - mountPath: "${PERSIST_DIR}"
              name: bcs-config
      terminationGracePeriodSeconds: 30
      restartPolicy: Always
      hostNetwork: true
      serviceAccount: bcs-apiserver-proxy
      serviceAccountName: bcs-apiserver-proxy
      dnsPolicy: ClusterFirstWithHostNet
      priorityClassName: system-node-critical
      volumes:
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
        - hostPath:
            path: "${PERSIST_DIR}"
          name: bcs-config
EOF
  utils::log "OK" "${action} bcs-apiserver-proxy success"
}

main() {
  local source_files
  source_files=("${ROOT_DIR}/functions/utils.sh" "${ROOT_DIR}/env/bcs.env")
  for file in "${source_files[@]}"; do
    safe_source "$file"
  done

  (($# == 0)) && usage_and_exit 1

  while (($# > 0)); do
    case "$1" in
      --help | -h | '-?')
        usage_and_exit 0
        ;;
      apply)
        op_bap "apply"
        exclude_cidr_kube_proxy
        break
        ;;
      delete)
        op_bap "delete"
        break
        ;;
      -*)
        # ToDo: Unified standard error code
        export ERR_CODE=1
        utils::log "ERROR" "unkown para: $1"
        ;;
      *)
        export ERR_CODE=1
        utils::log "ERROR" "unkown command: $1"
        break
        ;;
    esac
    shift
  done
}

main "$@"
