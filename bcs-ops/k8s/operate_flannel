#! /bin/bash

#######################################
# Tencent is pleased to support the open source community by making Blueking Container Service available.
# Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
# Licensed under the MIT License (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# http://opensource.org/licenses/MIT
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing permissions and
# limitations under the License.
#######################################

set -euo pipefail
# apply or delete flannel

PROGRAM="$(basename "$0")"
FLANNEL_VER="v0.22.0"
FLANNELCNI_VER="v1.1.2"
SELF_DIR=$(dirname "$(readlink -f "$0")")
ROOT_DIR="${SELF_DIR}/.."

readonly PROGRAM FLANNEL_VER FLANNELCNI_VER SELF_DIR ROOT_DIR

usage_and_exit() {
  cat <<EOF
Usage:
    $PROGRAM
      [ -h --help -?  show usage ]
      [ -v -V --version show script version]
      [ apply ]
      [ delete ]
EOF
  exit "$1"
}

version() {
  echo "$PROGRAM version $FLANNEL_VER"
}

safe_source() {
  local source_file=$1
  if [[ -f ${source_file} ]]; then
    #shellcheck source=/dev/null
    source "${source_file}"
  else
    echo "[ERROR]: FAIL to source, missing ${source_file}"
    exit 1
  fi
}

check_k8s_status() {
  if ! command -v kubectl &>/dev/null; then
    utils::log "FATAL" "can not find kubectl"
  fi

  if ! kubectl cluster-info 2>/dev/null; then
    utils::log "FATAL" "fail to get k8s cluster info"
  fi
  return 0
}

op_flannel() {
  check_k8s_status
  local flannel_image flannelcni_image action ipv6_status
  ipv6_status=${K8S_IPv6_STATUS:-"Disable"}
  ipv6_status=${ipv6_status,,}
  action=$1
  if [[ -z ${BK_PUBLIC_REPO} ]]; then
    flannel_image="docker.io/flannel/flannel:${FLANNEL_VER}"
    flannelcni_image="docker.io/flannel/flannel-cni-plugin:${FLANNELCNI_VER}"
  else
    flannel_image="${BK_PUBLIC_REPO}/flannel/flannel:${FLANNEL_VER}"
    flannelcni_image="${BK_PUBLIC_REPO}/flannel/flannel-cni-plugin:${FLANNELCNI_VER}"
  fi

  utils::log "INFO" "${action}ing flannel"
  cat <<EOF | kubectl "${action}" -f -
---
kind: Namespace
apiVersion: v1
metadata:
  name: kube-flannel
  labels:
    k8s-app: flannel
    pod-security.kubernetes.io/enforce: privileged
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    k8s-app: flannel
  name: flannel
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - networking.k8s.io
  resources:
  - clustercidrs
  verbs:
  - list
  - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    k8s-app: flannel
  name: flannel
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flannel
subjects:
- kind: ServiceAccount
  name: flannel
  namespace: kube-flannel
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: flannel
  name: flannel
  namespace: kube-flannel
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: kube-flannel-cfg
  namespace: kube-flannel
  labels:
    tier: node
    k8s-app: flannel
    app: flannel
data:
  cni-conf.json: |
    {
      "name": "cbr0",
      "cniVersion": "0.3.1",
      "plugins": [
        {
          "type": "flannel",
          "delegate": {
            "hairpinMode": true,
            "isDefaultGateway": true
          }
        },
        {
          "type": "portmap",
          "capabilities": {
            "portMappings": true
          }
        }
      ]
    }
  net-conf.json: |
    {
$(
    case "${ipv6_status}" in
      "disable")
        cat <<IPv6EOF
      "Network": "$K8S_POD_CIDR",
IPv6EOF
        ;;
      "singlestack")
        cat <<IPv6EOF
      "EnableIPv4": false,
      "IPv6Network": "$K8S_POD_CIDR",
      "IPv6SubnetLen": $K8S_IPv6_MASK,
      "EnableIPv6": true,
IPv6EOF
        ;;
      "dualstack")
        cat <<IPv6EOF
      "Network": "$K8S_POD_CIDR",
      "IPv6Network": "$K8S_POD_CIDRv6",
      "IPv6SubnetLen": 120,
      "EnableIPv6": true,
IPv6EOF
        ;;
    esac
  )
      "Backend": {
        "Type": "vxlan"
      }
    }
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-flannel-ds
  namespace: kube-flannel
  labels:
    tier: node
    app: flannel
    k8s-app: flannel
spec:
  selector:
    matchLabels:
      app: flannel
  template:
    metadata:
      labels:
        tier: node
        app: flannel
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      hostNetwork: true
      priorityClassName: system-node-critical
      tolerations:
      - operator: Exists
        effect: NoSchedule
      serviceAccountName: flannel
      initContainers:
      - name: install-cni-plugin
        image: ${flannelcni_image}
        command:
        - cp
        args:
        - -f
        - /flannel
        - /opt/cni/bin/flannel
        volumeMounts:
        - name: cni-plugin
          mountPath: /opt/cni/bin
      - name: install-cni
        image: ${flannel_image}
        command:
        - cp
        args:
        - -f
        - /etc/kube-flannel/cni-conf.json
        - /etc/cni/net.d/10-flannel.conflist
        volumeMounts:
        - name: cni
          mountPath: /etc/cni/net.d
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      containers:
      - name: kube-flannel
        image: ${flannel_image}
        command:
        - /opt/bin/flanneld
        args:
        - --ip-masq
        - --kube-subnet-mgr
        resources:
          requests:
            cpu: "100m"
            memory: "50Mi"
          limits:
            cpu: "100m"
            memory: "50Mi"
        securityContext:
          privileged: false
          capabilities:
            add: ["NET_ADMIN", "NET_RAW"]
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: EVENT_QUEUE_DEPTH
          value: "5000"
        volumeMounts:
        - name: run
          mountPath: /run/flannel
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
        - name: xtables-lock
          mountPath: /run/xtables.lock
      volumes:
      - name: run
        hostPath:
          path: /run/flannel
      - name: cni-plugin
        hostPath:
          path: /opt/cni/bin
      - name: cni
        hostPath:
          path: /etc/cni/net.d
      - name: flannel-cfg
        configMap:
          name: kube-flannel-cfg
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
EOF
  utils::log "OK" "${action} flannel success"
}

main() {
  local source_files
  source_files=("${ROOT_DIR}/functions/utils.sh" "${ROOT_DIR}/env/bcs.env")
  for file in "${source_files[@]}"; do
    safe_source "$file"
  done

  (($# == 0)) && usage_and_exit 1

  while (($# > 0)); do
    case "$1" in
      --help | -h | '-?')
        usage_and_exit 0
        ;;
      --version | -v | -V)
        version
        exit 0
        ;;
      apply)
        op_flannel "apply"
        break
        ;;
      delete)
        op_flannel "delete"
        break
        ;;
      -*)
        # ToDo: Unified standard error code
        export ERR_CODE=1
        utils::log "ERROR" "unkown para: $1"
        ;;
      *)
        export ERR_CODE=1
        utils::log "ERROR" "unkown command: $1"
        break
        ;;
    esac
    shift
  done

}

main "$@"
