#!/bin/bash

#######################################
# Tencent is pleased to support the open source community by making Blueking Container Service available.
# Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
# Licensed under the MIT License (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# http://opensource.org/licenses/MIT
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing permissions and
# limitations under the License.
#######################################

set -euo pipefail

SELF_DIR=$(dirname "$(readlink -f "$0")")
ROOT_DIR="${SELF_DIR}/.."

safe_source() {
  local source_file=$1
  if [[ -f ${source_file} ]]; then
    #shellcheck source=/dev/null
    source "${source_file}"
  else
    echo "[ERROR]: FAIL to source, missing ${source_file}" >&2
    exit 1
  fi
  return 0
}

_yum_containerd() {
  trap "utils::on_ERR;" ERR

  local yum_repo repo_file
  repo_file="${ROOT_DIR}/docker-ce.repo"
  if [[ -n "${MIRROR_URL:-}" ]]; then
    yum_repo="${MIRROR_URL}/docker-ce/linux/centos/docker-ce.repo"
    curl -fsSL "$yum_repo" \
      | sed "s#https://download.docker.com#${MIRROR_URL}/docker-ce#g" \
      | tee "${repo_file}"
    if [[ -f /etc/tlinux-release ]];then
      if grep "TencentOS Server 3.[0-9]*" /etc/tlinux-release;then
        sed -i "s/\$releasever/8/g" "$ROOT_DIR/docker-ce.repo"
      elif grep "TencentOS Server 2.[0-9]*" /etc/tlinux-release;then
        sed -i "s/\$releasever/7/g" "$ROOT_DIR/docker-ce.repo"
      fi
    fi
  else
    yum_repo="https://download.docker.com/linux/centos/docker-ce.repo"
    curl -fsSL "$yum_repo" -O "${repo_file}"
  fi
  utils::log "DEBUG" "containerd yum repo: ${yum_repo}"

  [[ ! -f /etc/yum.repos.d/tlinux-docker-ce.repo ]] \
    || mv /etc/yum.repos.d/tlinux-docker-ce.repo /etc/yum.repos.d/tlinux-docker-ce.repo.bak

  yum install -y -q yum-utils
  yum-config-manager --add-repo "${repo_file}"
  yum clean all
  yum makecache fast || yum makecache

  local pkg_pat pkg_ver
  pkg_pat="${CONTAINERD_VER//-/.*}.*el"
  pkg_ver="$(yum list containerd.io --showduplicates \
    | awk '/'"$pkg_pat"'/{last=$2} END{sub(/.*:/,"",last);print last}')"
  [[ -n $pkg_ver ]] \
    || utils::log "ERROR" "${CONTAINERD_VER} not found amongst yum list results"

  yum -y install containerd.io-"$pkg_ver" \
    || utils::log "ERROR" "fail to yum install containerd"
  "${ROOT_DIR}"/k8s/operate_completion ctr
  return 0
}

_curl_containerd() {
  local bin_path name ver file url
  bin_path=${ROOT_DIR}/version-${K8S_VER}/bin-tools/
  mkdir -p "$bin_path"

  name="containerd"
  ver=$(awk '/version: \"'"${K8S_VER}"'\"/{f=1;next} f && /'"${name}"':/{gsub("\"","",$2);print $2;exit}' "${ROOT_DIR}"/env/offline-manifest.yaml)
  file="${name}-${ver}.tgz"
  url=${REPO_URL}/${file}
  if curl -sSfL "${url}" -o "${bin_path}/${file}" -m "360"; then
    utils::log "INFO" "Downloaded ${url}"
  else
    utils::log "ERROR" "fail to download ${url}"
  fi

  name="runc"
  ver=$(awk '/version: \"'"${K8S_VER}"'\"/{f=1;next} f && /'"${name}"':/{gsub("\"","",$2);print $2;exit}' "${ROOT_DIR}"/env/offline-manifest.yaml)
  file="${name}-${ver}.tgz"
  url="${REPO_URL}/${file}"
  if curl -sSfL "${url}" -o "${bin_path}/${file}" -m "360"; then
    utils::log "INFO" "Downloaded ${url}"
  else
    utils::log "ERROR" "fail to download ${url}"
  fi

  _offline_containerd
}

_offline_containerd() {
  local bin_path tar_name
  bin_path=${ROOT_DIR}/version-${K8S_VER}/bin-tools/

  tar_name=$(find "$bin_path" -iname "containerd-*.tgz" -type f | head -1)
  if [[ -z ${tar_name} ]]; then
    utils::log "FATAL" "can't find docker installation package in ${bin_path}"
  else
    tar xvzf "${tar_name}" -C /usr/local/bin/ --strip-components=1 bin/
    tar xvzf "${tar_name}" -C /etc/systemd/system/ --strip-components=1 systemd/
  fi

  tar_name=$(find "$bin_path" -iname "runc-*.tgz" -type f | head -1)
  if [[ -z ${tar_name} ]]; then
    utils::log "FATAL" "can't find docker installation package in ${bin_path}"
  else
    tar xvzf "${tar_name}" -C /usr/bin/ --strip-components=1 bin/
  fi
}

# ToDo: config separte
render_containerd() {
  trap "utils::on_ERR;" ERR

  local config_path img_mirrors_path
  config_path="/etc/containerd/config.toml"
  img_mirrors_path="/etc/containerd/certs.d/docker.io/hosts.yaml"

  install -dv "${CONTAINERD_LIB}" "/etc/containerd/certs.d/docker.io"

  if [[ -s "${config_path}" ]] \
    && [[ ! -f "${config_path}.bcs.bak" ]]; then
    utils::log "WARN" "${config_path} exist, backing up"
    cp -av "${config_path}"{,.bcs.bak} || utils::log "ERROR" "fail to backup ${config_path}"
  fi
  utils::log "INFO" "init containerd config:"

  local sandbox_img_url
  if [[ -n ${BK_PUBLIC_REPO:-} ]]; then
    sandbox_img_url="${BK_PUBLIC_REPO}/registry.k8s.io/pause:3.6"
  else
    sandbox_img_url="registry.k8s.io/pause:3.6"
  fi

  cat <<EOF | tee ${config_path}
version = 2
# persistent data location
root = "${CONTAINERD_LIB}"
# set lower OOM score, make containerd can be killable
oom_score = -999
# debug config
[debug]
level = "info"

# sandbox image
[plugins."io.containerd.grpc.v1.cri"]
sandbox_image = "${sandbox_img_url}"

# set storage-driver
[plugins."io.containerd.grpc.v1.cri".containerd]
  snapshotter = "overlayfs"
  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
    runtime_type = "io.containerd.runc.v2"
    [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
      SystemdCgroup = true
# set registry root dir
[plugins."io.containerd.grpc.v1.cri".registry]
  config_path = "/etc/containerd/certs.d"
EOF

  if [[ -s ${img_mirrors_path} ]] && [[ ! -f ${img_mirrors_path}.bcs.bak ]]; then
    utils::log "WARN" "${img_mirrors_path} exist, backing up"
    cp -av "${img_mirrors_path}"{,.bcs.bak} \
      || utils::log "ERROR" "fail to backup ${img_mirrors_path}"
  fi
  cat <<EOF >/etc/containerd/certs.d/docker.io/hosts.toml
server = "https://docker.io"
[host."${REPO_MIRRORS}"]
  capabilities = ["pull", "resolve"]
EOF

  utils::log "INFO" "Render containerd config complete"
}

main() {
  trap "utils::on_ERR;" ERR

  local source_files
  source_files=("${ROOT_DIR}/functions/utils.sh" "${ROOT_DIR}/env/bcs.env")
  for file in "${source_files[@]}"; do
    safe_source "$file"
  done

  if ctr version &>/dev/null; then
    utils::log "WARN" "containerd installed, $(ctr -v)"
  else
    if [[ -n ${BCS_OFFLINE:-} ]]; then
      _offline_containerd
    else
      case ${INSTALL_METHOD} in
        "yum")
          _yum_containerd
          ;;
        "curl")
          _curl_containerd
          ;;
        *)
          utils::log "ERROR" "unkown ${INSTALL_METHOD} to exec download containerd"
          ;;
      esac
    fi
  fi

  render_containerd
  systemctl daemon-reload
  systemctl enable --now containerd
  systemctl restart containerd

  # install testing
  if ! ctr --version; then
    utils::log "ERROR" "Did containerd get installed?"
  fi

  # add insecure_registry
  if [[ -n ${INSECURE_REGISTRY:-} ]]; then
    "${ROOT_DIR}"/k8s/insecure_registry.sh -c containerd -a "${INSECURE_REGISTRY}"
  fi

  if [[ -n ${BCS_OFFLINE:-} ]]; then
    find "${ROOT_DIR}"/version-"${K8S_VER}"/images -name '*.tar' -type f -print0 \
      | xargs -0 -I {} ctr -n k8s.io image import {}
  fi

  # function testing
  local test_img_url
  test_img_url=${BK_PUBLIC_REPO:-"docker.io"}/library/hello-world:latest
  utils::log "DEBUG" "hello-world: ${test_img_url}"

  if ! ctr -n k8s.io i list|grep ${test_img_url};then
    if ! (ctr -n k8s.io i pull --hosts-dir "/etc/containerd/certs.d" "$test_img_url" \
    && ctr -n k8s.io run --rm "$test_img_url" hello-world."$(date +%s)"); then
      utils::log "ERROR" "Could not get containerd to run ${test_img_url}"
    fi
  fi
  return 0
}
main
