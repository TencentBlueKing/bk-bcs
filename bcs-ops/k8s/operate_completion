#!/bin/bash

#######################################
# Tencent is pleased to support the open source community by making Blueking Container Service available.
# Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
# Licensed under the MIT License (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# http://opensource.org/licenses/MIT
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing permissions and
# limitations under the License.
#######################################

set -euo pipefail

# command completion
VERSION="1.0.0"
PROGRAM="$(basename "$0")"
SELF_DIR=$(dirname "$(readlink -f "$0")")
ROOT_DIR="${SELF_DIR}/.."

RC_FILE="/etc/bash_completion.d/bcs.bash"

PROJECTS=(kubeadm kubectl helm ctr)
readonly SELF_DIR ROOT_DIR RC_FILE PROJECTS

usage_and_exit() {
  cat <<EOF
Usage:
    $PROGRAM
      [ -h --help -?  show usage ]
      [ -v -V --version show script version]
      [ ${PROJECTS[*]} ]
      [ clean ]
EOF
  exit "$1"
}

version() {
  echo "$PROGRAM version $VERSION"
}

check_completion() {
  if ! type -a complete &>/dev/null; then
    utils::log "INFO" "installing bash-completion"
    if [[ -n ${BCS_OFFLINE:-} ]]; then
      # ToDo helm image offline install
      true
    else
      yum install -y bash-completion \
        || utils::log "FATAL" "fail to install bash-completion"
    fi
  fi
  touch ${RC_FILE}
  return 0
}

completion_ctr() {
  check_completion
  sed -ri \
    '/bcs config begin for ctr/,/bcs config end for ctr/d' ${RC_FILE}

  cat >>"$RC_FILE" <<'EOF'
# bcs config begin for ctr
# ctr command completion
_ctr_bash_autocomplete() {
  if [[ "${COMP_WORDS[0]}" != "source" ]]; then
    local cur opts base
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    if [[ "$cur" == "-"* ]]; then
      opts=$(${COMP_WORDS[@]:0:$COMP_CWORD} ${cur} --generate-bash-completion)
    else
      opts=$(${COMP_WORDS[@]:0:$COMP_CWORD} --generate-bash-completion)
    fi
    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    return 0
  fi
}

complete -o bashdefault -o default -o nospace -F _ctr_bash_autocomplete ctr
# bcs config end for ctr
EOF
}

completion_helm() {
  check_completion
  sed -ri \
    '/bcs config begin for helm/,/bcs config end for helm/d' ${RC_FILE}
  cat >>"$RC_FILE" <<'EOF'
# bcs config begin for helm
# helm 命令补全
source <(helm completion bash)
# bcs config end for helm
EOF
}

completion_clean() {
  rm -f ${RC_FILE}
}

completion_kubectl() {
  check_completion
  sed -ri \
    '/bcs config begin for kubectl/,/bcs config end for kubectl/d' ${RC_FILE}
  cat >>"$RC_FILE" <<'EOF'
# bcs config begin for kubectl
# kubectl 命令补全
source <(kubectl completion bash)
# bcs config end for kubectl
EOF
}

completion_kubeadm() {
  check_completion
  sed -ri \
    '/bcs config begin for kubeadm/,/bcs config end for kubeadm/d' ${RC_FILE}
  cat >>"$RC_FILE" <<'EOF'
# bcs config begin for kubeadm
# kubeadm 命令补全
source <(kubeadm completion bash)
# bcs config end for kubeadm
EOF
}

safe_source() {
  local source_file=$1
  if [[ -f ${source_file} ]]; then
    #shellcheck source=/dev/null
    source "${source_file}"
  else
    echo "[ERROR]: FAIL to source, missing ${source_file}"
    exit 1
  fi
}

main() {
  local source_files
  source_files=("${ROOT_DIR}/functions/utils.sh")
  for file in "${source_files[@]}"; do
    safe_source "$file"
  done

  local op_type project

  (($# == 0)) && usage_and_exit 1
  while (($# > 0)); do
    case "$1" in
      --help | -h | '-?')
        usage_and_exit 0
        ;;
      --version | -v | -V)
        version
        exit 0
        ;;
      -*)
        # ToDo: Unified standard error code
        export ERR_CODE=1
        utils::log "ERROR" "unkown para: $1"
        ;;
      *)
        op_type="completion"
        project="$1"
        utils::check_op "${op_type}" "${project}"
        "${op_type}_${project}"
        utils::log "OK" "command complete ${project}"
        break
        ;;
    esac
    shift
  done
  return 0
}

main "$@"
