#!/bin/bash

#######################################
# Tencent is pleased to support the open source community by making Blueking Container Service available.
# Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
# Licensed under the MIT License (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# http://opensource.org/licenses/MIT
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing permissions and
# limitations under the License.
#######################################

set -euo pipefail

# bcs self-built k8s cluster entry script

VERSION=0.1.0
PROGRAM="$(basename "$0")"
SELF_DIR=$(dirname "$(readlink -f "$0")")
ROOT_DIR=${SELF_DIR}
readonly VERSION PROGRAM SELF_DIR ROOT_DIR

INSTALL_PROJECTS=(master node helm op)
RENDER_PROJECTS=(bcsenv kubeadm joincmd)
CLEAN_PROJECTS=(master node bcsenv op)
readonly INSTALL_PROJECTS CLEAN_PROJECTS RENDER_PROJECTS

usage_and_exit() {
  cat <<EOF
Usage:
  $PROGRAM
    [ -h --help -?     show usage ]
    [ -v -V --version  show script version]
    [ -i --install     support: ${INSTALL_PROJECTS[*]}]
    [ -r --render      suppport: ${RENDER_PROJECTS[*]}]
    [ -c --clean       support: ${CLEAN_PROJECTS[*]}]
EOF
  return "$1"
}

version() {
  echo "$PROGRAM version $VERSION"
}

#######################################
# check file and source
# Arguments:
# $1: source_file
# Return:
# if file exists, source return 0; else exit 1
#######################################
safe_source() {
  local source_file=$1
  if [[ -f ${source_file} ]]; then
    #shellcheck source=/dev/null
    source "${source_file}"
  else
    echo "[ERROR]: FAIL to source, missing ${source_file}"
    exit 1
  fi
  return 0
}

install_master() {
  "${ROOT_DIR}"/install_master.sh
}

install_node() {
  "${ROOT_DIR}"/install_node.sh
}

install_op() {
  "${ROOT_DIR}"/install_op.sh
}

install_helm() {
  "${ROOT_DIR}"/k8s/install_helm
}

install_localpv() {
  "${ROOT_DIR}"/k8s/install_localpv
}

install_metrics_server() {
  "${ROOT_DIR}"/k8s/operate_metric_server apply
}

render_bcsenv() {
  "${ROOT_DIR}"/system/config_envfile.sh init
}

render_kubeadm() {
  "${ROOT_DIR}"/k8s/render_kubeadm
}

render_joincmd() {
  "${ROOT_DIR}"/k8s/render_k8s_joincmd
}

clean_master() {
  "${ROOT_DIR}"/clean_master.sh
}

clean_node() {
  "${ROOT_DIR}"/clean_node.sh
}

clean_bcsenv() {
  "${ROOT_DIR}"/system/config_envfile.sh -c clean
}

clean_op() {
  "${ROOT_DIR}"/k8s/operate_completion clean
}

main() {
  local source_files
  source_files=("${ROOT_DIR}"/functions/utils.sh)
  for file in "${source_files[@]}"; do
    safe_source "$file"
  done

  local op_type project

  (($# == 0)) && usage_and_exit 1
  while (($# > 0)); do
    case "$1" in
      --help | -h | '-?')
        usage_and_exit 0
        ;;
      --version | -v | -V)
        version
        exit 0
        ;;
      --install | -i)
        shift
        op_type=install
        project="$1"
        break
        ;;
      --render | -r)
        shift
        op_type=render
        project="$1"
        break
        ;;
      --clean | -c)
        shift
        op_type=clean
        project="$1"
        break
        ;;
      *)
        utils::log "ERROR" "unkown para: $1"
        ;;
    esac
  done
  utils::check_op "${op_type}" "${project}"
  "${op_type}_${project}"
  return 0
}

main "$@"
