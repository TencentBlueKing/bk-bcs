#!/bin/bash

#######################################
# Tencent is pleased to support the open source community by making Blueking Container Service available.
# Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
# Licensed under the MIT License (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# http://opensource.org/licenses/MIT
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing permissions and
# limitations under the License.
#######################################

set -euo pipefail

# config /etc/hosts entry between START_TAG and END_TAG
VERSION="1.0.0"
PROGRAM="$(basename "$0")"

SELF_DIR=$(dirname "$(readlink -f "$0")")
ROOT_DIR="${SELF_DIR}/.."

HOST_FILE="/etc/hosts"
TMP_FILE="/tmp/bcs_hosts-$(date +%s)"
START_TAG="#bcs host begin for bcs#"
END_TAG="#bcs host end for bcs#"

readonly VERSION PROGRAM SELF_DIR ROOT_DIR HOST_FILE TMP_FILE START_TAG END_TAG

usage_and_exit() {
  cat <<EOF
Usage:
    $PROGRAM
      [ -h --help -? , show usage ]
      [ -v -V --version , show script version]
	  [ -a --add , add host entry, IP HOST ]
	  [ -u --update, update host entry, IP HOST]
	  [ -d --del , del host entry, HOST]
	  [ -c --clean, clean bcs dns entry in /etc/hosts]
	  [ -l --list , show bcs dns entry]

EOF
  exit "$1"
}

version() {
  echo "$PROGRAM version $VERSION"
}

#######################################
# backup host_file
# input:
# $1: save_flag, # if save_flag=1, backup file
# return:
# return 0
#######################################
save_and_list() {
  local save_flag=$1
  if ((save_flag == 1)); then
    sed -ri.bcs-"$(date +%s)".bak "/${START_TAG}/,/${END_TAG}/d" "${HOST_FILE}"
    cat "$TMP_FILE" >>"${HOST_FILE}"
  fi
  rm -f "$TMP_FILE"
  list
}

add_host() {
  if [[ -z "$1" || -z "$2" ]]; then
    utils::log "ERROR" "Adding a host entry\
requires providing an IP address and a domain name."
    return 1
  fi

  if grep -q "$2" "${TMP_FILE}"; then
    utils::log "WARN" "${TMP_FILE} has $2 entry"
    return 1
  fi

  echo "$1 $2" >>"$TMP_FILE"
  utils::log "OK" "add host entry:$1 $2"
  return 0
}

add() {
  if (($# < 2)); then
    utils::log "FATAL" "add need least 2 para"
  fi
  local ip host save_flag=0
  echo "$START_TAG" >"$TMP_FILE"
  sed -n '/'"$START_TAG"'/,/'"$END_TAG"'/{/'"$START_TAG"'/!{/'"$END_TAG"'/!p}}' \
    "$HOST_FILE" >>"$TMP_FILE"
  while (($# > 0)); do
    ip=${1:-}
    host=${2:-}
    shift 2 || shift
    add_host "$ip" "$host" && save_flag=1
  done
  echo "$END_TAG" >>"$TMP_FILE"

  save_and_list $save_flag
  return 0
}

update_host() {
  if [[ -z "$1" || -z "$2" ]]; then
    utils::log "ERROR" "update a host entry\
requires providing an IP address and a domain name."
    return 1
  fi

  if grep -qE "^[[:space:]]*$1[[:space:]]*$2[[:space:]]*$" "$TMP_FILE"; then
    utils::log "WARN" "$2 host entry unchange: $1, skip。"
    return 1
  fi

  if ! grep -q "$2" "$TMP_FILE"; then
    utils::log "WARN" "$2 entry not exist,will add directly"
    echo "$1 $2" >>"$TMP_FILE"
    utils::log "OK" "add host entry： $1 $2"
    return 0
  fi

  sed -i "s/.*$2/$1 $2/g" "$TMP_FILE"
  utils::log "OK" "update host entry： $1 $2"
  return 0
}

update() {
  if (($# < 2)); then
    utils::log "FATAL" "update need least 2 para"
  fi

  local ip host save_flag=0
  echo "$START_TAG" >"$TMP_FILE"
  sed -n '/'"$START_TAG"'/,/'"$END_TAG"'/{/'"$START_TAG"'/!{/'"$END_TAG"'/!p}}' \
    "$HOST_FILE" >>"$TMP_FILE"
  while (($# > 0)); do
    ip=${1:-}
    host=${2:-}
    shift 2 || shift
    update_host "$ip" "$host" && save_flag=1
  done
  echo "$END_TAG" >>"$TMP_FILE"

  save_and_list $save_flag
  return 0
}

del_host() {
  if [[ -z "$1" ]]; then
    utils::log "FATAL" "del a host entry\
requires providing a domain name."
  fi

  # 检查要删除的条目是否存在
  if ! grep -qE "^[[:space:]]*.*[[:space:]]*$1[[:space:]]*$" "$TMP_FILE"; then
    utils::log "WARN" "$1 host entry not exist, skip。"
    return 1
  fi

  sed -i "/^[[:space:]]*.*[[:space:]]*$1[[:space:]]*$/d" "$TMP_FILE"
  utils::log "OK" "delete host entry： $1"
  return 0
}

del() {
  if (($# < 1)); then
    utils::log "FATAL" "del need least 1 para"
  fi

  local ip host save_flag=0
  echo "$START_TAG" >"$TMP_FILE"
  sed -n '/'"$START_TAG"'/,/'"$END_TAG"'/{/'"$START_TAG"'/!{/'"$END_TAG"'/!p}}' \
    "$HOST_FILE" >>"$TMP_FILE"
  while (($# > 0)); do
    host=$1
    shift
    del_host "$host" && save_flag=1
  done
  echo "$END_TAG" >>"$TMP_FILE"

  save_and_list "$save_flag"
  return 0
}

clean() {
  sed -ri.bcs-"$(date +%s)".bak "/${START_TAG}/,/${END_TAG}/d" "${HOST_FILE}"
  utils::log "OK" "clean bcs dns finished, print ${HOST_FILE}"
  cat "${HOST_FILE}"
  return 0
}

list() {
  sed -n "/$START_TAG/,/$END_TAG/p" "$HOST_FILE"
  return 0
}

#######################################
# check file and source
# Arguments:
# $1: source_file
# Return:
# if file exists, source return 0; else exit 1
#######################################
safe_source() {
  local source_file=$1
  if [[ -f ${source_file} ]]; then
    #shellcheck source=/dev/null
    source "${source_file}"
  else
    echo "[ERROR]: FAIL to source, missing ${source_file}"
    exit 1
  fi
}

main() {
  local source_files
  source_files=("${ROOT_DIR}/functions/utils.sh")
  for file in "${source_files[@]}"; do
    safe_source "$file"
  done

  (($# == 0)) && usage_and_exit 1
  while (($# > 0)); do
    case "$1" in
      --help | -h | '-?')
        usage_and_exit 0
        ;;
      --version | -v | -V)
        version
        exit 0
        ;;
      --add | -a)
        shift
        add "$@"
        break
        ;;
      --update | -u)
        shift
        update "$@"
        break
        ;;
      --del | -d)
        shift
        del "$@"
        break
        ;;
      --list | -l)
        shift
        list
        break
        ;;
      --clean | -c)
        shift
        clean
        break
        ;;
      -*)
        # ToDo: Unified standard error code
        export ERR_CODE=1
        utils::log "FATAL" "unkown para: $1"
        ;;
      *)
        break
        ;;
    esac
    shift
  done
}

main "$@"
