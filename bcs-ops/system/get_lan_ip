#!/bin/bash

#######################################
# Tencent is pleased to support the open source community by making Blueking Container Service available.
# Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
# Licensed under the MIT License (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# http://opensource.org/licenses/MIT
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing permissions and
# limitations under the License.
#######################################

set -euo pipefail

# get lan ip addr

VERSION="1.0.0"
PROGRAM="$(basename "$0")"

readonly VERSION PROGRAM

usage_and_exit() {
  cat <<EOF
Usage:
    $PROGRAM
      [ -h --help -?  show usage ]
      [ -v -V --version show script version]
      [ -4 get default route lan ipv4 addr]
	  [ -6 get default route lan ipv6 addr]
EOF
  exit "$1"
}

version() {
  echo "$PROGRAM version $VERSION"
}

#######################################
# get ip by cloud_api
# Return:
#   echo lan ipv4
#######################################
_on_cloud() {
  local qcloud_meta_api aws_meta_api
  qcloud_meta_api="http://169.254.0.23/latest/meta-data"
  aws_meta_api="http://169.254.169.254/latest/meta-data"

  local meta_api
  if curl -m 2 -qIfs "${qcloud_meta_api}" >/dev/null; then
    meta_api="${qcloud_meta_api}"
  elif curl -m 2 -ifs "${aws_meta_api}" >/dev/null; then
    meta_api="${aws_meta_api}"
  else
    _on_baremetal
    return 0
  fi

  LAN_IP="$(curl -ssf ${meta_api}/local-ipv4)"

  if [[ -n $LAN_IP ]]; then
    echo "$LAN_IP"
  else
    _on_baremetal
  fi
  return 0
}

_on_baremetal() {
  LAN_IP=$(ip -4 -o route get 10/8 | sed -n 's/.*src \([0-9.]\+\).*/\1/p')
  if [[ -n $LAN_IP ]]; then
    echo "$LAN_IP"
    return 0
  fi
  exit 1
}

_on_baremetal_v6() {
  LAN_IPv6=$(ip -6 -o route get fd00::/8 | grep -Po '(?<=src) \K[^ ]+')
  if [[ -n $LAN_IPv6 ]]; then
    echo "$LAN_IPv6"
    return 0
  fi
  exit 1
}

main() {
  (($# == 0)) && usage_and_exit 1
  while (($# > 0)); do
    case "$1" in
      --help | -h | '-?')
        usage_and_exit 0
        ;;
      --version | -v | -V)
        version
        exit 0
        ;;
      -4)
        _on_cloud
        ;;
      -6)
        _on_baremetal_v6
        ;;
      -*)
        utils::log "ERROR" "unkown para: $1"
        ;;
      *)
        break
        ;;
    esac
    shift
  done
}

main "$@"
