global:
  imageRegistry: ""
  # etcd 依赖配置
  storage:
    etcd:
      endpoints:
        - bcs-bscp-etcd:2379
  secret:
    autoGenerate: true
    #bcs server cert
    bcsServerCerts: bcs-server-certs
    #bcs client cert
    bcsClientCerts: bcs-client-certs
    #bcs client cert without encrypted
    bcsClientCertsWithoutEncrypted: bcs-client-certs-without-encrypted
    #etcd registry cert
    etcdCerts: bcs-etcd-certs
    #gateway https cert
    bcsGatewayCerts: bcs-gateway-certs

# etcd 依赖配置
storage:
  etcd:
    endpoints:
      - bcs-bscp-etcd:2379

replicaCount: 1

image:
  registry:
  repository:
  tag:
  pullPolicy: Always

imagePullSecrets: []
nameOverride: ""
fullnameOverride: "bcs-bscp"

ui:
  replicaCount: 1

apiserver:
  replicaCount: 1

authserver:
  replicaCount: 1

cacheservice:
  replicaCount: 1

configserver:
  replicaCount: 1

dataservice:
  replicaCount: 1

feedserver:
  replicaCount: 1

sidecar:
  replicaCount: 1

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  {}
# fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
# runAsUser: 1000

config:
  log:
    # log storage directory.
    logDir: ./log
    # per file max size, uint: MB.
    maxPerFileSizeMB: 1024
    # per line max size, uint: KB.
    maxPerLineSizeKB: 2
    # log file max storage number.
    maxFileNum: 5
    # whether the restart service log is appended to the latest log file, or whether a new log file is created.
    logAppend: false
    # log the log to std err only, it can not be used with AlsoToStdErr at the same time.
    toStdErr: true
    # log the log to file and also to std err. it can not be used with ToStdErr at the same time.
    alsoToStdErr: false
    # log level.
    verbosity: 1
  service:
    etcd:
      endpoints:
        - bcs-bscp-etcd:2379
      tls:
        certFile:
        keyFile:
        caFile:
  # data server
  esb:
    endpoints:
      -
    # appCode is the blueking app code of bscp to request esb.
    appCode:
    # appSecret is the blueking app secret of bscp to request esb.
    appSecret:
    user:

  sharding:
    adminDatabase:
      endpoints:
        - bcs-bscp-mariadb:3306
      database: bscp
      user: root
      password: root
    maxSlowLogLatencyMS: 200
    limiter:
      qps: 500
      burst: 500
  loginAuth:
    host:

  redisCluster:
    endpoints:
      - bcs-bscp-redis-master:6379
    password:
    db: 1

  # feed server
  repository:
    endpoints: {}
    token:
    project:
    user:
    
  downstream:
    bounceIntervalHour: 48  #<=48

  # sidecar
  upstream:
    endpoints:
      - bcs-bscp-feedserver:9510
    authentication:
      user: bcs-bscp
      token: bcs-bscp
  appSpec:
    bizID: 2 # 蓝鲸项目
    applications:
      - appID: 1 # 手动调用API创建
        namespace: ""
        uid: 10
  workspace:
    rootDirectory: /tmp


ui_config:
  base_conf:
    app_code: ""
    app_secret: ""
    time_zone: Asia/Shanghai
    language_code: en
    run_env: dev

  bcs_conf:
    host: ""
    token: ""
    jwt_public_key: ""

  web:
    route_prefix: /bscp/ui
    host: ""
    preferred_domains: ""

  etcd:
    endpoints: bcs-bscp-etcd:2379
    ca: ""
    cert: ""
    key: ""
  
  loginAuth:
    host:

  frontend_conf:
    hosts:
      devops_bcs_api_url: 
  
service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}


credentials:
  enabled: false


redis:
  architecture: standalone
  auth:
    enabled: false
    #auth.enable 为true可配置密码
    password:
  master:
    service:
      type: NodePort

etcd:
  replicaCount: 1
  auth:
    rbac:
      create: false
    token:
      type: simple
  persistence:
    enabled: false

mariadb:
  auth:
    rootPassword: root
    database: bscp
  primary:
    service:
      type: NodePort
  initdbScriptsConfigMap: bcs-bscp-mariadb-initscripts  #配置初始化sql脚本，指定configmapName
