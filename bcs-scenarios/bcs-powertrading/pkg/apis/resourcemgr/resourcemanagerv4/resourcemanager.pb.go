// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: resourcemanager.proto

package resourcemanager

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AvailableReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AvailableReq) Reset() {
	*x = AvailableReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableReq) ProtoMessage() {}

func (x *AvailableReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableReq.ProtoReflect.Descriptor instead.
func (*AvailableReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{0}
}

type AvailableResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool   `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
}

func (x *AvailableResp) Reset() {
	*x = AvailableResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableResp) ProtoMessage() {}

func (x *AvailableResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableResp.ProtoReflect.Descriptor instead.
func (*AvailableResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{1}
}

func (x *AvailableResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *AvailableResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *AvailableResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

type CreateObsCostReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecName  *string  `protobuf:"bytes,1,opt,name=specName" json:"specName,omitempty"`
	TypeName  *string  `protobuf:"bytes,2,opt,name=typeName" json:"typeName,omitempty"`
	Type      *string  `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Unit      *string  `protobuf:"bytes,4,opt,name=unit" json:"unit,omitempty"`
	UnitPrice *float64 `protobuf:"fixed64,5,opt,name=unitPrice" json:"unitPrice,omitempty"`
	Region    *string  `protobuf:"bytes,6,opt,name=region" json:"region,omitempty"`
}

func (x *CreateObsCostReq) Reset() {
	*x = CreateObsCostReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateObsCostReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateObsCostReq) ProtoMessage() {}

func (x *CreateObsCostReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateObsCostReq.ProtoReflect.Descriptor instead.
func (*CreateObsCostReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{2}
}

func (x *CreateObsCostReq) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *CreateObsCostReq) GetTypeName() string {
	if x != nil && x.TypeName != nil {
		return *x.TypeName
	}
	return ""
}

func (x *CreateObsCostReq) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *CreateObsCostReq) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *CreateObsCostReq) GetUnitPrice() float64 {
	if x != nil && x.UnitPrice != nil {
		return *x.UnitPrice
	}
	return 0
}

func (x *CreateObsCostReq) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

type CreateObsCostResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string  `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool    `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *ObsCost `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *CreateObsCostResp) Reset() {
	*x = CreateObsCostResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateObsCostResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateObsCostResp) ProtoMessage() {}

func (x *CreateObsCostResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateObsCostResp.ProtoReflect.Descriptor instead.
func (*CreateObsCostResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{3}
}

func (x *CreateObsCostResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *CreateObsCostResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CreateObsCostResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *CreateObsCostResp) GetData() *ObsCost {
	if x != nil {
		return x.Data
	}
	return nil
}

type ObsCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecName  *string  `protobuf:"bytes,1,opt,name=specName" json:"specName,omitempty"`
	TypeName  *string  `protobuf:"bytes,2,opt,name=typeName" json:"typeName,omitempty"`
	Type      *string  `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Unit      *string  `protobuf:"bytes,4,opt,name=unit" json:"unit,omitempty"`
	UnitPrice *float64 `protobuf:"fixed64,5,opt,name=unitPrice" json:"unitPrice,omitempty"`
	Region    *string  `protobuf:"bytes,6,opt,name=region" json:"region,omitempty"`
}

func (x *ObsCost) Reset() {
	*x = ObsCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObsCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObsCost) ProtoMessage() {}

func (x *ObsCost) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObsCost.ProtoReflect.Descriptor instead.
func (*ObsCost) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{4}
}

func (x *ObsCost) GetSpecName() string {
	if x != nil && x.SpecName != nil {
		return *x.SpecName
	}
	return ""
}

func (x *ObsCost) GetTypeName() string {
	if x != nil && x.TypeName != nil {
		return *x.TypeName
	}
	return ""
}

func (x *ObsCost) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ObsCost) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *ObsCost) GetUnitPrice() float64 {
	if x != nil && x.UnitPrice != nil {
		return *x.UnitPrice
	}
	return 0
}

func (x *ObsCost) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

type QueryObsBillReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year      *uint32 `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Month     *uint32 `protobuf:"varint,2,opt,name=month" json:"month,omitempty"`
	LeftTime  *uint64 `protobuf:"varint,3,opt,name=leftTime" json:"leftTime,omitempty"`
	RightTime *uint64 `protobuf:"varint,4,opt,name=rightTime" json:"rightTime,omitempty"`
}

func (x *QueryObsBillReq) Reset() {
	*x = QueryObsBillReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryObsBillReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryObsBillReq) ProtoMessage() {}

func (x *QueryObsBillReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryObsBillReq.ProtoReflect.Descriptor instead.
func (*QueryObsBillReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{5}
}

func (x *QueryObsBillReq) GetYear() uint32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *QueryObsBillReq) GetMonth() uint32 {
	if x != nil && x.Month != nil {
		return *x.Month
	}
	return 0
}

func (x *QueryObsBillReq) GetLeftTime() uint64 {
	if x != nil && x.LeftTime != nil {
		return *x.LeftTime
	}
	return 0
}

func (x *QueryObsBillReq) GetRightTime() uint64 {
	if x != nil && x.RightTime != nil {
		return *x.RightTime
	}
	return 0
}

type QueryObsBillResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32    `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string    `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool      `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    []*ObsBill `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
}

func (x *QueryObsBillResp) Reset() {
	*x = QueryObsBillResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryObsBillResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryObsBillResp) ProtoMessage() {}

func (x *QueryObsBillResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryObsBillResp.ProtoReflect.Descriptor instead.
func (*QueryObsBillResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{6}
}

func (x *QueryObsBillResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *QueryObsBillResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *QueryObsBillResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *QueryObsBillResp) GetData() []*ObsBill {
	if x != nil {
		return x.Data
	}
	return nil
}

type ObsBill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year                   *uint32  `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Month                  *uint32  `protobuf:"varint,2,opt,name=month" json:"month,omitempty"`
	LeftTime               *uint32  `protobuf:"varint,3,opt,name=leftTime" json:"leftTime,omitempty"`
	RightTime              *uint32  `protobuf:"varint,4,opt,name=rightTime" json:"rightTime,omitempty"`
	ProductionID           *string  `protobuf:"bytes,5,opt,name=productionID" json:"productionID,omitempty"`
	ProductionName         *string  `protobuf:"bytes,6,opt,name=productionName" json:"productionName,omitempty"`
	ResourceType           *string  `protobuf:"bytes,7,opt,name=resourceType" json:"resourceType,omitempty"`
	ResourceSpec           *string  `protobuf:"bytes,8,opt,name=resourceSpec" json:"resourceSpec,omitempty"`
	ResourceUnit           *string  `protobuf:"bytes,9,opt,name=resourceUnit" json:"resourceUnit,omitempty"`
	ResourceAmount         *uint32  `protobuf:"varint,10,opt,name=resourceAmount" json:"resourceAmount,omitempty"`
	ResourceUnitPrice      *float64 `protobuf:"fixed64,11,opt,name=resourceUnitPrice" json:"resourceUnitPrice,omitempty"`
	TotalPrice             *float64 `protobuf:"fixed64,12,opt,name=totalPrice" json:"totalPrice,omitempty"`
	ConsumerProductionID   *string  `protobuf:"bytes,13,opt,name=consumerProductionID" json:"consumerProductionID,omitempty"`
	ConsumerProductionName *string  `protobuf:"bytes,14,opt,name=consumerProductionName" json:"consumerProductionName,omitempty"`
}

func (x *ObsBill) Reset() {
	*x = ObsBill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObsBill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObsBill) ProtoMessage() {}

func (x *ObsBill) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObsBill.ProtoReflect.Descriptor instead.
func (*ObsBill) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{7}
}

func (x *ObsBill) GetYear() uint32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *ObsBill) GetMonth() uint32 {
	if x != nil && x.Month != nil {
		return *x.Month
	}
	return 0
}

func (x *ObsBill) GetLeftTime() uint32 {
	if x != nil && x.LeftTime != nil {
		return *x.LeftTime
	}
	return 0
}

func (x *ObsBill) GetRightTime() uint32 {
	if x != nil && x.RightTime != nil {
		return *x.RightTime
	}
	return 0
}

func (x *ObsBill) GetProductionID() string {
	if x != nil && x.ProductionID != nil {
		return *x.ProductionID
	}
	return ""
}

func (x *ObsBill) GetProductionName() string {
	if x != nil && x.ProductionName != nil {
		return *x.ProductionName
	}
	return ""
}

func (x *ObsBill) GetResourceType() string {
	if x != nil && x.ResourceType != nil {
		return *x.ResourceType
	}
	return ""
}

func (x *ObsBill) GetResourceSpec() string {
	if x != nil && x.ResourceSpec != nil {
		return *x.ResourceSpec
	}
	return ""
}

func (x *ObsBill) GetResourceUnit() string {
	if x != nil && x.ResourceUnit != nil {
		return *x.ResourceUnit
	}
	return ""
}

func (x *ObsBill) GetResourceAmount() uint32 {
	if x != nil && x.ResourceAmount != nil {
		return *x.ResourceAmount
	}
	return 0
}

func (x *ObsBill) GetResourceUnitPrice() float64 {
	if x != nil && x.ResourceUnitPrice != nil {
		return *x.ResourceUnitPrice
	}
	return 0
}

func (x *ObsBill) GetTotalPrice() float64 {
	if x != nil && x.TotalPrice != nil {
		return *x.TotalPrice
	}
	return 0
}

func (x *ObsBill) GetConsumerProductionID() string {
	if x != nil && x.ConsumerProductionID != nil {
		return *x.ConsumerProductionID
	}
	return ""
}

func (x *ObsBill) GetConsumerProductionName() string {
	if x != nil && x.ConsumerProductionName != nil {
		return *x.ConsumerProductionName
	}
	return ""
}

type CreateDeviceConsumerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 *string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Provider             *string           `protobuf:"bytes,2,opt,name=provider" json:"provider,omitempty"`
	ClusterID            *string           `protobuf:"bytes,3,opt,name=clusterID" json:"clusterID,omitempty"`
	AssociatedDevicePool []string          `protobuf:"bytes,4,rep,name=associatedDevicePool" json:"associatedDevicePool,omitempty"`
	Labels               map[string]string `protobuf:"bytes,5,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Operator             *string           `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
	Quotas               []*ConsumerQuota  `protobuf:"bytes,7,rep,name=quotas" json:"quotas,omitempty"`
}

func (x *CreateDeviceConsumerReq) Reset() {
	*x = CreateDeviceConsumerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceConsumerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceConsumerReq) ProtoMessage() {}

func (x *CreateDeviceConsumerReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceConsumerReq.ProtoReflect.Descriptor instead.
func (*CreateDeviceConsumerReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{8}
}

func (x *CreateDeviceConsumerReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateDeviceConsumerReq) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

func (x *CreateDeviceConsumerReq) GetClusterID() string {
	if x != nil && x.ClusterID != nil {
		return *x.ClusterID
	}
	return ""
}

func (x *CreateDeviceConsumerReq) GetAssociatedDevicePool() []string {
	if x != nil {
		return x.AssociatedDevicePool
	}
	return nil
}

func (x *CreateDeviceConsumerReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateDeviceConsumerReq) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

func (x *CreateDeviceConsumerReq) GetQuotas() []*ConsumerQuota {
	if x != nil {
		return x.Quotas
	}
	return nil
}

type CreateDeviceConsumerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32         `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string         `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool           `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *DeviceConsumer `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *CreateDeviceConsumerResp) Reset() {
	*x = CreateDeviceConsumerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceConsumerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceConsumerResp) ProtoMessage() {}

func (x *CreateDeviceConsumerResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceConsumerResp.ProtoReflect.Descriptor instead.
func (*CreateDeviceConsumerResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{9}
}

func (x *CreateDeviceConsumerResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *CreateDeviceConsumerResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CreateDeviceConsumerResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *CreateDeviceConsumerResp) GetData() *DeviceConsumer {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetDeviceConsumerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceConsumerID *string `protobuf:"bytes,1,opt,name=deviceConsumerID" json:"deviceConsumerID,omitempty"`
}

func (x *GetDeviceConsumerReq) Reset() {
	*x = GetDeviceConsumerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceConsumerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceConsumerReq) ProtoMessage() {}

func (x *GetDeviceConsumerReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceConsumerReq.ProtoReflect.Descriptor instead.
func (*GetDeviceConsumerReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{10}
}

func (x *GetDeviceConsumerReq) GetDeviceConsumerID() string {
	if x != nil && x.DeviceConsumerID != nil {
		return *x.DeviceConsumerID
	}
	return ""
}

type GetDeviceConsumerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32         `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string         `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool           `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *DeviceConsumer `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *GetDeviceConsumerResp) Reset() {
	*x = GetDeviceConsumerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceConsumerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceConsumerResp) ProtoMessage() {}

func (x *GetDeviceConsumerResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceConsumerResp.ProtoReflect.Descriptor instead.
func (*GetDeviceConsumerResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{11}
}

func (x *GetDeviceConsumerResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *GetDeviceConsumerResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetDeviceConsumerResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *GetDeviceConsumerResp) GetData() *DeviceConsumer {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListDeviceConsumerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sort      *string  `protobuf:"bytes,1,opt,name=sort" json:"sort,omitempty"`
	Desc      *bool    `protobuf:"varint,2,opt,name=desc" json:"desc,omitempty"`
	Offset    *int64   `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Limit     *int64   `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Name      []string `protobuf:"bytes,5,rep,name=name" json:"name,omitempty"`
	Provider  []string `protobuf:"bytes,6,rep,name=provider" json:"provider,omitempty"`
	ClusterID []string `protobuf:"bytes,7,rep,name=clusterID" json:"clusterID,omitempty"`
}

func (x *ListDeviceConsumerReq) Reset() {
	*x = ListDeviceConsumerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeviceConsumerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceConsumerReq) ProtoMessage() {}

func (x *ListDeviceConsumerReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceConsumerReq.ProtoReflect.Descriptor instead.
func (*ListDeviceConsumerReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{12}
}

func (x *ListDeviceConsumerReq) GetSort() string {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return ""
}

func (x *ListDeviceConsumerReq) GetDesc() bool {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return false
}

func (x *ListDeviceConsumerReq) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *ListDeviceConsumerReq) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListDeviceConsumerReq) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ListDeviceConsumerReq) GetProvider() []string {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *ListDeviceConsumerReq) GetClusterID() []string {
	if x != nil {
		return x.ClusterID
	}
	return nil
}

type ListDeviceConsumerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32           `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string           `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool             `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    []*DeviceConsumer `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
}

func (x *ListDeviceConsumerResp) Reset() {
	*x = ListDeviceConsumerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeviceConsumerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceConsumerResp) ProtoMessage() {}

func (x *ListDeviceConsumerResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceConsumerResp.ProtoReflect.Descriptor instead.
func (*ListDeviceConsumerResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{13}
}

func (x *ListDeviceConsumerResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ListDeviceConsumerResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListDeviceConsumerResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *ListDeviceConsumerResp) GetData() []*DeviceConsumer {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateDeviceConsumerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceConsumerID     *string     `protobuf:"bytes,1,opt,name=deviceConsumerID" json:"deviceConsumerID,omitempty"`
	Name                 *string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Provider             *string     `protobuf:"bytes,3,opt,name=provider" json:"provider,omitempty"`
	ClusterID            *string     `protobuf:"bytes,4,opt,name=clusterID" json:"clusterID,omitempty"`
	AssociatedDevicePool *ListString `protobuf:"bytes,5,opt,name=associatedDevicePool" json:"associatedDevicePool,omitempty"`
	Labels               *Labels     `protobuf:"bytes,6,opt,name=labels" json:"labels,omitempty"`
	Operator             *string     `protobuf:"bytes,7,opt,name=operator" json:"operator,omitempty"`
	Quotas               *ListQuota  `protobuf:"bytes,8,opt,name=quotas" json:"quotas,omitempty"`
}

func (x *UpdateDeviceConsumerReq) Reset() {
	*x = UpdateDeviceConsumerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceConsumerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceConsumerReq) ProtoMessage() {}

func (x *UpdateDeviceConsumerReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceConsumerReq.ProtoReflect.Descriptor instead.
func (*UpdateDeviceConsumerReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateDeviceConsumerReq) GetDeviceConsumerID() string {
	if x != nil && x.DeviceConsumerID != nil {
		return *x.DeviceConsumerID
	}
	return ""
}

func (x *UpdateDeviceConsumerReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateDeviceConsumerReq) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

func (x *UpdateDeviceConsumerReq) GetClusterID() string {
	if x != nil && x.ClusterID != nil {
		return *x.ClusterID
	}
	return ""
}

func (x *UpdateDeviceConsumerReq) GetAssociatedDevicePool() *ListString {
	if x != nil {
		return x.AssociatedDevicePool
	}
	return nil
}

func (x *UpdateDeviceConsumerReq) GetLabels() *Labels {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateDeviceConsumerReq) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

func (x *UpdateDeviceConsumerReq) GetQuotas() *ListQuota {
	if x != nil {
		return x.Quotas
	}
	return nil
}

type ListString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []string `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (x *ListString) Reset() {
	*x = ListString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListString) ProtoMessage() {}

func (x *ListString) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListString.ProtoReflect.Descriptor instead.
func (*ListString) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{15}
}

func (x *ListString) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

type Labels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]string `protobuf:"bytes,1,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *Labels) Reset() {
	*x = Labels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Labels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Labels) ProtoMessage() {}

func (x *Labels) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Labels.ProtoReflect.Descriptor instead.
func (*Labels) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{16}
}

func (x *Labels) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type Annotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]string `protobuf:"bytes,1,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *Annotations) Reset() {
	*x = Annotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotations) ProtoMessage() {}

func (x *Annotations) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotations.ProtoReflect.Descriptor instead.
func (*Annotations) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{17}
}

func (x *Annotations) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListQuota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*ConsumerQuota `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (x *ListQuota) Reset() {
	*x = ListQuota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQuota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuota) ProtoMessage() {}

func (x *ListQuota) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuota.ProtoReflect.Descriptor instead.
func (*ListQuota) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{18}
}

func (x *ListQuota) GetData() []*ConsumerQuota {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateDeviceConsumerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32         `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string         `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool           `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *DeviceConsumer `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *UpdateDeviceConsumerResp) Reset() {
	*x = UpdateDeviceConsumerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceConsumerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceConsumerResp) ProtoMessage() {}

func (x *UpdateDeviceConsumerResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceConsumerResp.ProtoReflect.Descriptor instead.
func (*UpdateDeviceConsumerResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateDeviceConsumerResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *UpdateDeviceConsumerResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *UpdateDeviceConsumerResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *UpdateDeviceConsumerResp) GetData() *DeviceConsumer {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteDeviceConsumerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceConsumerID *string `protobuf:"bytes,1,opt,name=deviceConsumerID" json:"deviceConsumerID,omitempty"`
}

func (x *DeleteDeviceConsumerReq) Reset() {
	*x = DeleteDeviceConsumerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceConsumerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceConsumerReq) ProtoMessage() {}

func (x *DeleteDeviceConsumerReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceConsumerReq.ProtoReflect.Descriptor instead.
func (*DeleteDeviceConsumerReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteDeviceConsumerReq) GetDeviceConsumerID() string {
	if x != nil && x.DeviceConsumerID != nil {
		return *x.DeviceConsumerID
	}
	return ""
}

type DeleteDeviceConsumerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool   `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
}

func (x *DeleteDeviceConsumerResp) Reset() {
	*x = DeleteDeviceConsumerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceConsumerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceConsumerResp) ProtoMessage() {}

func (x *DeleteDeviceConsumerResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceConsumerResp.ProtoReflect.Descriptor instead.
func (*DeleteDeviceConsumerResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteDeviceConsumerResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *DeleteDeviceConsumerResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *DeleteDeviceConsumerResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

type ConsumeDeviceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceConsumerID *string          `protobuf:"bytes,1,opt,name=deviceConsumerID" json:"deviceConsumerID,omitempty"`
	Num              *uint32          `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
	Desire           []*ConsumeDesire `protobuf:"bytes,3,rep,name=desire" json:"desire,omitempty"`
	Operator         *string          `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (x *ConsumeDeviceReq) Reset() {
	*x = ConsumeDeviceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeDeviceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeDeviceReq) ProtoMessage() {}

func (x *ConsumeDeviceReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeDeviceReq.ProtoReflect.Descriptor instead.
func (*ConsumeDeviceReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{22}
}

func (x *ConsumeDeviceReq) GetDeviceConsumerID() string {
	if x != nil && x.DeviceConsumerID != nil {
		return *x.DeviceConsumerID
	}
	return ""
}

func (x *ConsumeDeviceReq) GetNum() uint32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *ConsumeDeviceReq) GetDesire() []*ConsumeDesire {
	if x != nil {
		return x.Desire
	}
	return nil
}

func (x *ConsumeDeviceReq) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

type ConsumeDeviceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32     `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string     `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool       `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *RecordData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *ConsumeDeviceResp) Reset() {
	*x = ConsumeDeviceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeDeviceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeDeviceResp) ProtoMessage() {}

func (x *ConsumeDeviceResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeDeviceResp.ProtoReflect.Descriptor instead.
func (*ConsumeDeviceResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{23}
}

func (x *ConsumeDeviceResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ConsumeDeviceResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ConsumeDeviceResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *ConsumeDeviceResp) GetData() *RecordData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReturnDeviceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceConsumerID *string  `protobuf:"bytes,1,opt,name=deviceConsumerID" json:"deviceConsumerID,omitempty"`
	Devices          []string `protobuf:"bytes,2,rep,name=devices" json:"devices,omitempty"`
	Operator         *string  `protobuf:"bytes,3,opt,name=operator" json:"operator,omitempty"`
	ExtraSystemID    *string  `protobuf:"bytes,4,opt,name=extraSystemID" json:"extraSystemID,omitempty"`
}

func (x *ReturnDeviceReq) Reset() {
	*x = ReturnDeviceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnDeviceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnDeviceReq) ProtoMessage() {}

func (x *ReturnDeviceReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnDeviceReq.ProtoReflect.Descriptor instead.
func (*ReturnDeviceReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{24}
}

func (x *ReturnDeviceReq) GetDeviceConsumerID() string {
	if x != nil && x.DeviceConsumerID != nil {
		return *x.DeviceConsumerID
	}
	return ""
}

func (x *ReturnDeviceReq) GetDevices() []string {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *ReturnDeviceReq) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

func (x *ReturnDeviceReq) GetExtraSystemID() string {
	if x != nil && x.ExtraSystemID != nil {
		return *x.ExtraSystemID
	}
	return ""
}

type ReturnDeviceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32     `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string     `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool       `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *RecordData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *ReturnDeviceResp) Reset() {
	*x = ReturnDeviceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnDeviceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnDeviceResp) ProtoMessage() {}

func (x *ReturnDeviceResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnDeviceResp.ProtoReflect.Descriptor instead.
func (*ReturnDeviceResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{25}
}

func (x *ReturnDeviceResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ReturnDeviceResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ReturnDeviceResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *ReturnDeviceResp) GetData() *RecordData {
	if x != nil {
		return x.Data
	}
	return nil
}

type RecordData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID *string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (x *RecordData) Reset() {
	*x = RecordData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordData) ProtoMessage() {}

func (x *RecordData) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordData.ProtoReflect.Descriptor instead.
func (*RecordData) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{26}
}

func (x *RecordData) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

type ConsumeDesire struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceType *string           `protobuf:"bytes,1,opt,name=instanceType" json:"instanceType,omitempty"`
	Cpu          *uint32           `protobuf:"varint,2,opt,name=cpu" json:"cpu,omitempty"`
	Mem          *uint32           `protobuf:"varint,3,opt,name=mem" json:"mem,omitempty"`
	Gpu          *uint32           `protobuf:"varint,4,opt,name=gpu" json:"gpu,omitempty"`
	SystemDisk   *DeviceDisk       `protobuf:"bytes,5,opt,name=systemDisk" json:"systemDisk,omitempty"`
	DataDisks    []*DeviceDisk     `protobuf:"bytes,6,rep,name=dataDisks" json:"dataDisks,omitempty"`
	Security     *DeviceSecurity   `protobuf:"bytes,7,opt,name=security" json:"security,omitempty"`
	Image        *DeviceImage      `protobuf:"bytes,8,opt,name=image" json:"image,omitempty"`
	Vpc          *string           `protobuf:"bytes,9,opt,name=vpc" json:"vpc,omitempty"`
	Zone         *DeviceZone       `protobuf:"bytes,10,opt,name=zone" json:"zone,omitempty"`
	BusinessID   *int64            `protobuf:"varint,11,opt,name=businessID" json:"businessID,omitempty"`
	AssetIDs     []string          `protobuf:"bytes,12,rep,name=assetIDs" json:"assetIDs,omitempty"`
	ModuleIDs    []int64           `protobuf:"varint,13,rep,name=moduleIDs" json:"moduleIDs,omitempty"`
	Labels       map[string]string `protobuf:"bytes,14,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *ConsumeDesire) Reset() {
	*x = ConsumeDesire{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeDesire) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeDesire) ProtoMessage() {}

func (x *ConsumeDesire) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeDesire.ProtoReflect.Descriptor instead.
func (*ConsumeDesire) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{27}
}

func (x *ConsumeDesire) GetInstanceType() string {
	if x != nil && x.InstanceType != nil {
		return *x.InstanceType
	}
	return ""
}

func (x *ConsumeDesire) GetCpu() uint32 {
	if x != nil && x.Cpu != nil {
		return *x.Cpu
	}
	return 0
}

func (x *ConsumeDesire) GetMem() uint32 {
	if x != nil && x.Mem != nil {
		return *x.Mem
	}
	return 0
}

func (x *ConsumeDesire) GetGpu() uint32 {
	if x != nil && x.Gpu != nil {
		return *x.Gpu
	}
	return 0
}

func (x *ConsumeDesire) GetSystemDisk() *DeviceDisk {
	if x != nil {
		return x.SystemDisk
	}
	return nil
}

func (x *ConsumeDesire) GetDataDisks() []*DeviceDisk {
	if x != nil {
		return x.DataDisks
	}
	return nil
}

func (x *ConsumeDesire) GetSecurity() *DeviceSecurity {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *ConsumeDesire) GetImage() *DeviceImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *ConsumeDesire) GetVpc() string {
	if x != nil && x.Vpc != nil {
		return *x.Vpc
	}
	return ""
}

func (x *ConsumeDesire) GetZone() *DeviceZone {
	if x != nil {
		return x.Zone
	}
	return nil
}

func (x *ConsumeDesire) GetBusinessID() int64 {
	if x != nil && x.BusinessID != nil {
		return *x.BusinessID
	}
	return 0
}

func (x *ConsumeDesire) GetAssetIDs() []string {
	if x != nil {
		return x.AssetIDs
	}
	return nil
}

func (x *ConsumeDesire) GetModuleIDs() []int64 {
	if x != nil {
		return x.ModuleIDs
	}
	return nil
}

func (x *ConsumeDesire) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type DeviceDisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Size *string `protobuf:"bytes,2,opt,name=size" json:"size,omitempty"`
}

func (x *DeviceDisk) Reset() {
	*x = DeviceDisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDisk) ProtoMessage() {}

func (x *DeviceDisk) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDisk.ProtoReflect.Descriptor instead.
func (*DeviceDisk) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{28}
}

func (x *DeviceDisk) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *DeviceDisk) GetSize() string {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return ""
}

type ConsumerQuota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	DevicePoolID *string `protobuf:"bytes,2,opt,name=devicePoolID" json:"devicePoolID,omitempty"`
	Name         *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Quota        *uint32 `protobuf:"varint,4,opt,name=quota" json:"quota,omitempty"`
}

func (x *ConsumerQuota) Reset() {
	*x = ConsumerQuota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumerQuota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerQuota) ProtoMessage() {}

func (x *ConsumerQuota) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerQuota.ProtoReflect.Descriptor instead.
func (*ConsumerQuota) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{29}
}

func (x *ConsumerQuota) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ConsumerQuota) GetDevicePoolID() string {
	if x != nil && x.DevicePoolID != nil {
		return *x.DevicePoolID
	}
	return ""
}

func (x *ConsumerQuota) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ConsumerQuota) GetQuota() uint32 {
	if x != nil && x.Quota != nil {
		return *x.Quota
	}
	return 0
}

type DeviceConsumer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *string           `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name                 *string           `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Provider             *string           `protobuf:"bytes,3,opt,name=provider" json:"provider,omitempty"`
	ClusterID            *string           `protobuf:"bytes,4,opt,name=clusterID" json:"clusterID,omitempty"`
	AssociatedDevicePool []string          `protobuf:"bytes,5,rep,name=associatedDevicePool" json:"associatedDevicePool,omitempty"`
	Labels               map[string]string `protobuf:"bytes,6,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CreateTime           *int64            `protobuf:"varint,7,opt,name=createTime" json:"createTime,omitempty"`
	UpdateTime           *int64            `protobuf:"varint,8,opt,name=updateTime" json:"updateTime,omitempty"`
	Quotas               []*ConsumerQuota  `protobuf:"bytes,9,rep,name=quotas" json:"quotas,omitempty"`
	Usages               []*ConsumerQuota  `protobuf:"bytes,10,rep,name=usages" json:"usages,omitempty"`
}

func (x *DeviceConsumer) Reset() {
	*x = DeviceConsumer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConsumer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConsumer) ProtoMessage() {}

func (x *DeviceConsumer) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConsumer.ProtoReflect.Descriptor instead.
func (*DeviceConsumer) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{30}
}

func (x *DeviceConsumer) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *DeviceConsumer) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DeviceConsumer) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

func (x *DeviceConsumer) GetClusterID() string {
	if x != nil && x.ClusterID != nil {
		return *x.ClusterID
	}
	return ""
}

func (x *DeviceConsumer) GetAssociatedDevicePool() []string {
	if x != nil {
		return x.AssociatedDevicePool
	}
	return nil
}

func (x *DeviceConsumer) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DeviceConsumer) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *DeviceConsumer) GetUpdateTime() int64 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

func (x *DeviceConsumer) GetQuotas() []*ConsumerQuota {
	if x != nil {
		return x.Quotas
	}
	return nil
}

func (x *DeviceConsumer) GetUsages() []*ConsumerQuota {
	if x != nil {
		return x.Usages
	}
	return nil
}

type CreateDevicePoolReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  *string                     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Provider              *string                     `protobuf:"bytes,2,opt,name=provider" json:"provider,omitempty"`
	BaseConfig            *ConsumeDesire              `protobuf:"bytes,3,opt,name=baseConfig" json:"baseConfig,omitempty"`
	AllowedDeviceConsumer []string                    `protobuf:"bytes,4,rep,name=allowedDeviceConsumer" json:"allowedDeviceConsumer,omitempty"`
	Labels                map[string]string           `protobuf:"bytes,5,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Operator              *string                     `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
	EnableAS              *bool                       `protobuf:"varint,7,opt,name=enableAS" json:"enableAS,omitempty"`
	AsOption              *DevicePoolAutoScalerOption `protobuf:"bytes,8,opt,name=asOption" json:"asOption,omitempty"`
	Reserved              *bool                       `protobuf:"varint,9,opt,name=reserved" json:"reserved,omitempty"`
	Type                  *string                     `protobuf:"bytes,10,opt,name=type" json:"type,omitempty"`
	Creator               *string                     `protobuf:"bytes,11,opt,name=creator" json:"creator,omitempty"`
	Annotations           map[string]string           `protobuf:"bytes,12,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *CreateDevicePoolReq) Reset() {
	*x = CreateDevicePoolReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDevicePoolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDevicePoolReq) ProtoMessage() {}

func (x *CreateDevicePoolReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDevicePoolReq.ProtoReflect.Descriptor instead.
func (*CreateDevicePoolReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{31}
}

func (x *CreateDevicePoolReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateDevicePoolReq) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

func (x *CreateDevicePoolReq) GetBaseConfig() *ConsumeDesire {
	if x != nil {
		return x.BaseConfig
	}
	return nil
}

func (x *CreateDevicePoolReq) GetAllowedDeviceConsumer() []string {
	if x != nil {
		return x.AllowedDeviceConsumer
	}
	return nil
}

func (x *CreateDevicePoolReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateDevicePoolReq) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

func (x *CreateDevicePoolReq) GetEnableAS() bool {
	if x != nil && x.EnableAS != nil {
		return *x.EnableAS
	}
	return false
}

func (x *CreateDevicePoolReq) GetAsOption() *DevicePoolAutoScalerOption {
	if x != nil {
		return x.AsOption
	}
	return nil
}

func (x *CreateDevicePoolReq) GetReserved() bool {
	if x != nil && x.Reserved != nil {
		return *x.Reserved
	}
	return false
}

func (x *CreateDevicePoolReq) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *CreateDevicePoolReq) GetCreator() string {
	if x != nil && x.Creator != nil {
		return *x.Creator
	}
	return ""
}

func (x *CreateDevicePoolReq) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type CreateDevicePoolResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32     `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string     `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool       `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *DevicePool `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *CreateDevicePoolResp) Reset() {
	*x = CreateDevicePoolResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDevicePoolResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDevicePoolResp) ProtoMessage() {}

func (x *CreateDevicePoolResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDevicePoolResp.ProtoReflect.Descriptor instead.
func (*CreateDevicePoolResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{32}
}

func (x *CreateDevicePoolResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *CreateDevicePoolResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CreateDevicePoolResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *CreateDevicePoolResp) GetData() *DevicePool {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetDevicePoolReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevicePoolID *string `protobuf:"bytes,1,opt,name=devicePoolID" json:"devicePoolID,omitempty"`
}

func (x *GetDevicePoolReq) Reset() {
	*x = GetDevicePoolReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDevicePoolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDevicePoolReq) ProtoMessage() {}

func (x *GetDevicePoolReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDevicePoolReq.ProtoReflect.Descriptor instead.
func (*GetDevicePoolReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{33}
}

func (x *GetDevicePoolReq) GetDevicePoolID() string {
	if x != nil && x.DevicePoolID != nil {
		return *x.DevicePoolID
	}
	return ""
}

type GetDevicePoolResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32     `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string     `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool       `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *DevicePool `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *GetDevicePoolResp) Reset() {
	*x = GetDevicePoolResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDevicePoolResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDevicePoolResp) ProtoMessage() {}

func (x *GetDevicePoolResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDevicePoolResp.ProtoReflect.Descriptor instead.
func (*GetDevicePoolResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{34}
}

func (x *GetDevicePoolResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *GetDevicePoolResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetDevicePoolResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *GetDevicePoolResp) GetData() *DevicePool {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetDevicePoolEventReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevicePoolID *string `protobuf:"bytes,1,opt,name=devicePoolID" json:"devicePoolID,omitempty"`
	Limit        *int64  `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	StartTime    *int64  `protobuf:"varint,3,opt,name=startTime" json:"startTime,omitempty"`
	EndTime      *int64  `protobuf:"varint,4,opt,name=endTime" json:"endTime,omitempty"`
}

func (x *GetDevicePoolEventReq) Reset() {
	*x = GetDevicePoolEventReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDevicePoolEventReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDevicePoolEventReq) ProtoMessage() {}

func (x *GetDevicePoolEventReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDevicePoolEventReq.ProtoReflect.Descriptor instead.
func (*GetDevicePoolEventReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{35}
}

func (x *GetDevicePoolEventReq) GetDevicePoolID() string {
	if x != nil && x.DevicePoolID != nil {
		return *x.DevicePoolID
	}
	return ""
}

func (x *GetDevicePoolEventReq) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *GetDevicePoolEventReq) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *GetDevicePoolEventReq) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

type GetDevicePoolEventResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32            `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string            `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool              `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    []*DevicePoolEvent `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
}

func (x *GetDevicePoolEventResp) Reset() {
	*x = GetDevicePoolEventResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDevicePoolEventResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDevicePoolEventResp) ProtoMessage() {}

func (x *GetDevicePoolEventResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDevicePoolEventResp.ProtoReflect.Descriptor instead.
func (*GetDevicePoolEventResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{36}
}

func (x *GetDevicePoolEventResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *GetDevicePoolEventResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetDevicePoolEventResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *GetDevicePoolEventResp) GetData() []*DevicePoolEvent {
	if x != nil {
		return x.Data
	}
	return nil
}

type DevicePoolEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceID   *string `protobuf:"bytes,1,opt,name=deviceID" json:"deviceID,omitempty"`
	AssetID    *string `protobuf:"bytes,2,opt,name=assetID" json:"assetID,omitempty"`
	ConsumerID *string `protobuf:"bytes,3,opt,name=consumerID" json:"consumerID,omitempty"`
	DeviceIP   *string `protobuf:"bytes,4,opt,name=deviceIP" json:"deviceIP,omitempty"`
	EventType  *string `protobuf:"bytes,5,opt,name=eventType" json:"eventType,omitempty"`
	EventTime  *int64  `protobuf:"varint,6,opt,name=eventTime" json:"eventTime,omitempty"`
}

func (x *DevicePoolEvent) Reset() {
	*x = DevicePoolEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicePoolEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicePoolEvent) ProtoMessage() {}

func (x *DevicePoolEvent) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicePoolEvent.ProtoReflect.Descriptor instead.
func (*DevicePoolEvent) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{37}
}

func (x *DevicePoolEvent) GetDeviceID() string {
	if x != nil && x.DeviceID != nil {
		return *x.DeviceID
	}
	return ""
}

func (x *DevicePoolEvent) GetAssetID() string {
	if x != nil && x.AssetID != nil {
		return *x.AssetID
	}
	return ""
}

func (x *DevicePoolEvent) GetConsumerID() string {
	if x != nil && x.ConsumerID != nil {
		return *x.ConsumerID
	}
	return ""
}

func (x *DevicePoolEvent) GetDeviceIP() string {
	if x != nil && x.DeviceIP != nil {
		return *x.DeviceIP
	}
	return ""
}

func (x *DevicePoolEvent) GetEventType() string {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return ""
}

func (x *DevicePoolEvent) GetEventTime() int64 {
	if x != nil && x.EventTime != nil {
		return *x.EventTime
	}
	return 0
}

type ListDevicePoolReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sort       *string  `protobuf:"bytes,1,opt,name=sort" json:"sort,omitempty"`
	Desc       *bool    `protobuf:"varint,2,opt,name=desc" json:"desc,omitempty"`
	Offset     *int64   `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Limit      *int64   `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Name       []string `protobuf:"bytes,5,rep,name=name" json:"name,omitempty"`
	Provider   []string `protobuf:"bytes,6,rep,name=provider" json:"provider,omitempty"`
	Onsale     *bool    `protobuf:"varint,7,opt,name=onsale" json:"onsale,omitempty"`
	Region     *string  `protobuf:"bytes,8,opt,name=region" json:"region,omitempty"`
	BusinessID []int64  `protobuf:"varint,9,rep,name=businessID" json:"businessID,omitempty"`
	Status     []int64  `protobuf:"varint,10,rep,name=status" json:"status,omitempty"`
}

func (x *ListDevicePoolReq) Reset() {
	*x = ListDevicePoolReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDevicePoolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevicePoolReq) ProtoMessage() {}

func (x *ListDevicePoolReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevicePoolReq.ProtoReflect.Descriptor instead.
func (*ListDevicePoolReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{38}
}

func (x *ListDevicePoolReq) GetSort() string {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return ""
}

func (x *ListDevicePoolReq) GetDesc() bool {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return false
}

func (x *ListDevicePoolReq) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *ListDevicePoolReq) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListDevicePoolReq) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ListDevicePoolReq) GetProvider() []string {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *ListDevicePoolReq) GetOnsale() bool {
	if x != nil && x.Onsale != nil {
		return *x.Onsale
	}
	return false
}

func (x *ListDevicePoolReq) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *ListDevicePoolReq) GetBusinessID() []int64 {
	if x != nil {
		return x.BusinessID
	}
	return nil
}

func (x *ListDevicePoolReq) GetStatus() []int64 {
	if x != nil {
		return x.Status
	}
	return nil
}

type ListDevicePoolResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32       `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string       `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool         `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    []*DevicePool `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
}

func (x *ListDevicePoolResp) Reset() {
	*x = ListDevicePoolResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDevicePoolResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevicePoolResp) ProtoMessage() {}

func (x *ListDevicePoolResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevicePoolResp.ProtoReflect.Descriptor instead.
func (*ListDevicePoolResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{39}
}

func (x *ListDevicePoolResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ListDevicePoolResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListDevicePoolResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *ListDevicePoolResp) GetData() []*DevicePool {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateDevicePoolReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevicePoolID          *string                     `protobuf:"bytes,1,opt,name=devicePoolID" json:"devicePoolID,omitempty"`
	Name                  *string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Provider              *string                     `protobuf:"bytes,3,opt,name=provider" json:"provider,omitempty"`
	BaseConfig            *ConsumeDesire              `protobuf:"bytes,4,opt,name=baseConfig" json:"baseConfig,omitempty"`
	AllowedDeviceConsumer *ListString                 `protobuf:"bytes,5,opt,name=allowedDeviceConsumer" json:"allowedDeviceConsumer,omitempty"`
	Labels                *Labels                     `protobuf:"bytes,6,opt,name=labels" json:"labels,omitempty"`
	Operator              *string                     `protobuf:"bytes,7,opt,name=operator" json:"operator,omitempty"`
	EnableAS              *bool                       `protobuf:"varint,8,opt,name=enableAS" json:"enableAS,omitempty"`
	AsOption              *DevicePoolAutoScalerOption `protobuf:"bytes,9,opt,name=asOption" json:"asOption,omitempty"`
	Reserved              *bool                       `protobuf:"varint,10,opt,name=reserved" json:"reserved,omitempty"`
	Type                  *string                     `protobuf:"bytes,11,opt,name=type" json:"type,omitempty"`
	Updater               *string                     `protobuf:"bytes,12,opt,name=updater" json:"updater,omitempty"`
	Status                *int64                      `protobuf:"varint,13,opt,name=status" json:"status,omitempty"`
	Annotations           *Annotations                `protobuf:"bytes,14,opt,name=annotations" json:"annotations,omitempty"`
}

func (x *UpdateDevicePoolReq) Reset() {
	*x = UpdateDevicePoolReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDevicePoolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDevicePoolReq) ProtoMessage() {}

func (x *UpdateDevicePoolReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDevicePoolReq.ProtoReflect.Descriptor instead.
func (*UpdateDevicePoolReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateDevicePoolReq) GetDevicePoolID() string {
	if x != nil && x.DevicePoolID != nil {
		return *x.DevicePoolID
	}
	return ""
}

func (x *UpdateDevicePoolReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateDevicePoolReq) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

func (x *UpdateDevicePoolReq) GetBaseConfig() *ConsumeDesire {
	if x != nil {
		return x.BaseConfig
	}
	return nil
}

func (x *UpdateDevicePoolReq) GetAllowedDeviceConsumer() *ListString {
	if x != nil {
		return x.AllowedDeviceConsumer
	}
	return nil
}

func (x *UpdateDevicePoolReq) GetLabels() *Labels {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateDevicePoolReq) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

func (x *UpdateDevicePoolReq) GetEnableAS() bool {
	if x != nil && x.EnableAS != nil {
		return *x.EnableAS
	}
	return false
}

func (x *UpdateDevicePoolReq) GetAsOption() *DevicePoolAutoScalerOption {
	if x != nil {
		return x.AsOption
	}
	return nil
}

func (x *UpdateDevicePoolReq) GetReserved() bool {
	if x != nil && x.Reserved != nil {
		return *x.Reserved
	}
	return false
}

func (x *UpdateDevicePoolReq) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *UpdateDevicePoolReq) GetUpdater() string {
	if x != nil && x.Updater != nil {
		return *x.Updater
	}
	return ""
}

func (x *UpdateDevicePoolReq) GetStatus() int64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *UpdateDevicePoolReq) GetAnnotations() *Annotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type UpdateDevicePoolResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32     `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string     `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool       `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *DevicePool `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *UpdateDevicePoolResp) Reset() {
	*x = UpdateDevicePoolResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDevicePoolResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDevicePoolResp) ProtoMessage() {}

func (x *UpdateDevicePoolResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDevicePoolResp.ProtoReflect.Descriptor instead.
func (*UpdateDevicePoolResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateDevicePoolResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *UpdateDevicePoolResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *UpdateDevicePoolResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *UpdateDevicePoolResp) GetData() *DevicePool {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteDevicePoolReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevicePoolID *string `protobuf:"bytes,1,opt,name=devicePoolID" json:"devicePoolID,omitempty"`
}

func (x *DeleteDevicePoolReq) Reset() {
	*x = DeleteDevicePoolReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDevicePoolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDevicePoolReq) ProtoMessage() {}

func (x *DeleteDevicePoolReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDevicePoolReq.ProtoReflect.Descriptor instead.
func (*DeleteDevicePoolReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{42}
}

func (x *DeleteDevicePoolReq) GetDevicePoolID() string {
	if x != nil && x.DevicePoolID != nil {
		return *x.DevicePoolID
	}
	return ""
}

type DeleteDevicePoolResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool   `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
}

func (x *DeleteDevicePoolResp) Reset() {
	*x = DeleteDevicePoolResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDevicePoolResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDevicePoolResp) ProtoMessage() {}

func (x *DeleteDevicePoolResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDevicePoolResp.ProtoReflect.Descriptor instead.
func (*DeleteDevicePoolResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{43}
}

func (x *DeleteDevicePoolResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *DeleteDevicePoolResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *DeleteDevicePoolResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

type ImportDeviceToDevicePoolReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevicePoolID *string   `protobuf:"bytes,1,opt,name=devicePoolID" json:"devicePoolID,omitempty"`
	Devices      []*Device `protobuf:"bytes,2,rep,name=devices" json:"devices,omitempty"`
	Operator     *string   `protobuf:"bytes,3,opt,name=operator" json:"operator,omitempty"`
}

func (x *ImportDeviceToDevicePoolReq) Reset() {
	*x = ImportDeviceToDevicePoolReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportDeviceToDevicePoolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDeviceToDevicePoolReq) ProtoMessage() {}

func (x *ImportDeviceToDevicePoolReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDeviceToDevicePoolReq.ProtoReflect.Descriptor instead.
func (*ImportDeviceToDevicePoolReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{44}
}

func (x *ImportDeviceToDevicePoolReq) GetDevicePoolID() string {
	if x != nil && x.DevicePoolID != nil {
		return *x.DevicePoolID
	}
	return ""
}

func (x *ImportDeviceToDevicePoolReq) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *ImportDeviceToDevicePoolReq) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

type ImportDevicesToDevicePoolByBkAssetIDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevicePoolID *string  `protobuf:"bytes,1,opt,name=devicePoolID" json:"devicePoolID,omitempty"`
	BkAssetIDs   []string `protobuf:"bytes,2,rep,name=bkAssetIDs" json:"bkAssetIDs,omitempty"`
	Operator     *string  `protobuf:"bytes,3,opt,name=operator" json:"operator,omitempty"`
}

func (x *ImportDevicesToDevicePoolByBkAssetIDsReq) Reset() {
	*x = ImportDevicesToDevicePoolByBkAssetIDsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportDevicesToDevicePoolByBkAssetIDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDevicesToDevicePoolByBkAssetIDsReq) ProtoMessage() {}

func (x *ImportDevicesToDevicePoolByBkAssetIDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDevicesToDevicePoolByBkAssetIDsReq.ProtoReflect.Descriptor instead.
func (*ImportDevicesToDevicePoolByBkAssetIDsReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{45}
}

func (x *ImportDevicesToDevicePoolByBkAssetIDsReq) GetDevicePoolID() string {
	if x != nil && x.DevicePoolID != nil {
		return *x.DevicePoolID
	}
	return ""
}

func (x *ImportDevicesToDevicePoolByBkAssetIDsReq) GetBkAssetIDs() []string {
	if x != nil {
		return x.BkAssetIDs
	}
	return nil
}

func (x *ImportDevicesToDevicePoolByBkAssetIDsReq) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

type ImportDevicesToDevicePoolByBkAssetIDsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32            `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string            `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool              `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *ImportDevicesData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *ImportDevicesToDevicePoolByBkAssetIDsResp) Reset() {
	*x = ImportDevicesToDevicePoolByBkAssetIDsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportDevicesToDevicePoolByBkAssetIDsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDevicesToDevicePoolByBkAssetIDsResp) ProtoMessage() {}

func (x *ImportDevicesToDevicePoolByBkAssetIDsResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDevicesToDevicePoolByBkAssetIDsResp.ProtoReflect.Descriptor instead.
func (*ImportDevicesToDevicePoolByBkAssetIDsResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{46}
}

func (x *ImportDevicesToDevicePoolByBkAssetIDsResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ImportDevicesToDevicePoolByBkAssetIDsResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ImportDevicesToDevicePoolByBkAssetIDsResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *ImportDevicesToDevicePoolByBkAssetIDsResp) GetData() *ImportDevicesData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ImportDevicesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success []string `protobuf:"bytes,1,rep,name=success" json:"success,omitempty"`
	Failed  []string `protobuf:"bytes,2,rep,name=failed" json:"failed,omitempty"`
}

func (x *ImportDevicesData) Reset() {
	*x = ImportDevicesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportDevicesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDevicesData) ProtoMessage() {}

func (x *ImportDevicesData) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDevicesData.ProtoReflect.Descriptor instead.
func (*ImportDevicesData) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{47}
}

func (x *ImportDevicesData) GetSuccess() []string {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *ImportDevicesData) GetFailed() []string {
	if x != nil {
		return x.Failed
	}
	return nil
}

type ImportDeviceToDevicePoolByBkAssetIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevicePoolID *string `protobuf:"bytes,1,opt,name=devicePoolID" json:"devicePoolID,omitempty"`
	BkAssetID    *string `protobuf:"bytes,2,opt,name=bkAssetID" json:"bkAssetID,omitempty"`
	Operator     *string `protobuf:"bytes,3,opt,name=operator" json:"operator,omitempty"`
}

func (x *ImportDeviceToDevicePoolByBkAssetIDReq) Reset() {
	*x = ImportDeviceToDevicePoolByBkAssetIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportDeviceToDevicePoolByBkAssetIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDeviceToDevicePoolByBkAssetIDReq) ProtoMessage() {}

func (x *ImportDeviceToDevicePoolByBkAssetIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDeviceToDevicePoolByBkAssetIDReq.ProtoReflect.Descriptor instead.
func (*ImportDeviceToDevicePoolByBkAssetIDReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{48}
}

func (x *ImportDeviceToDevicePoolByBkAssetIDReq) GetDevicePoolID() string {
	if x != nil && x.DevicePoolID != nil {
		return *x.DevicePoolID
	}
	return ""
}

func (x *ImportDeviceToDevicePoolByBkAssetIDReq) GetBkAssetID() string {
	if x != nil && x.BkAssetID != nil {
		return *x.BkAssetID
	}
	return ""
}

func (x *ImportDeviceToDevicePoolByBkAssetIDReq) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

type ImportDeviceToDevicePoolResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool   `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
}

func (x *ImportDeviceToDevicePoolResp) Reset() {
	*x = ImportDeviceToDevicePoolResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportDeviceToDevicePoolResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDeviceToDevicePoolResp) ProtoMessage() {}

func (x *ImportDeviceToDevicePoolResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDeviceToDevicePoolResp.ProtoReflect.Descriptor instead.
func (*ImportDeviceToDevicePoolResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{49}
}

func (x *ImportDeviceToDevicePoolResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ImportDeviceToDevicePoolResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ImportDeviceToDevicePoolResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

type CreateProviderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Key      *string           `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Secret   *string           `protobuf:"bytes,3,opt,name=secret" json:"secret,omitempty"`
	Labels   map[string]string `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Operator *string           `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
}

func (x *CreateProviderReq) Reset() {
	*x = CreateProviderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProviderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProviderReq) ProtoMessage() {}

func (x *CreateProviderReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProviderReq.ProtoReflect.Descriptor instead.
func (*CreateProviderReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{50}
}

func (x *CreateProviderReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateProviderReq) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CreateProviderReq) GetSecret() string {
	if x != nil && x.Secret != nil {
		return *x.Secret
	}
	return ""
}

func (x *CreateProviderReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateProviderReq) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

type CreateProviderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32   `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool     `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *Provider `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *CreateProviderResp) Reset() {
	*x = CreateProviderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProviderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProviderResp) ProtoMessage() {}

func (x *CreateProviderResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProviderResp.ProtoReflect.Descriptor instead.
func (*CreateProviderResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{51}
}

func (x *CreateProviderResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *CreateProviderResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CreateProviderResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *CreateProviderResp) GetData() *Provider {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetProviderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *GetProviderReq) Reset() {
	*x = GetProviderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProviderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProviderReq) ProtoMessage() {}

func (x *GetProviderReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProviderReq.ProtoReflect.Descriptor instead.
func (*GetProviderReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{52}
}

func (x *GetProviderReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type GetProviderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32   `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool     `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *Provider `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *GetProviderResp) Reset() {
	*x = GetProviderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProviderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProviderResp) ProtoMessage() {}

func (x *GetProviderResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProviderResp.ProtoReflect.Descriptor instead.
func (*GetProviderResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{53}
}

func (x *GetProviderResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *GetProviderResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetProviderResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *GetProviderResp) GetData() *Provider {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListProviderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sort   *string `protobuf:"bytes,1,opt,name=sort" json:"sort,omitempty"`
	Desc   *bool   `protobuf:"varint,2,opt,name=desc" json:"desc,omitempty"`
	Offset *int64  `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Limit  *int64  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
}

func (x *ListProviderReq) Reset() {
	*x = ListProviderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProviderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProviderReq) ProtoMessage() {}

func (x *ListProviderReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProviderReq.ProtoReflect.Descriptor instead.
func (*ListProviderReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{54}
}

func (x *ListProviderReq) GetSort() string {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return ""
}

func (x *ListProviderReq) GetDesc() bool {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return false
}

func (x *ListProviderReq) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *ListProviderReq) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type ListProviderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32     `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string     `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool       `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    []*Provider `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
}

func (x *ListProviderResp) Reset() {
	*x = ListProviderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProviderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProviderResp) ProtoMessage() {}

func (x *ListProviderResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProviderResp.ProtoReflect.Descriptor instead.
func (*ListProviderResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{55}
}

func (x *ListProviderResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ListProviderResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListProviderResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *ListProviderResp) GetData() []*Provider {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateProviderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Key      *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Secret   *string `protobuf:"bytes,3,opt,name=secret" json:"secret,omitempty"`
	Labels   *Labels `protobuf:"bytes,4,opt,name=labels" json:"labels,omitempty"`
	Operator *string `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
}

func (x *UpdateProviderReq) Reset() {
	*x = UpdateProviderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProviderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProviderReq) ProtoMessage() {}

func (x *UpdateProviderReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProviderReq.ProtoReflect.Descriptor instead.
func (*UpdateProviderReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{56}
}

func (x *UpdateProviderReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateProviderReq) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *UpdateProviderReq) GetSecret() string {
	if x != nil && x.Secret != nil {
		return *x.Secret
	}
	return ""
}

func (x *UpdateProviderReq) GetLabels() *Labels {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateProviderReq) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

type UpdateProviderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32   `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool     `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *Provider `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *UpdateProviderResp) Reset() {
	*x = UpdateProviderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProviderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProviderResp) ProtoMessage() {}

func (x *UpdateProviderResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProviderResp.ProtoReflect.Descriptor instead.
func (*UpdateProviderResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{57}
}

func (x *UpdateProviderResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *UpdateProviderResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *UpdateProviderResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *UpdateProviderResp) GetData() *Provider {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteProviderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *DeleteProviderReq) Reset() {
	*x = DeleteProviderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProviderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProviderReq) ProtoMessage() {}

func (x *DeleteProviderReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProviderReq.ProtoReflect.Descriptor instead.
func (*DeleteProviderReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{58}
}

func (x *DeleteProviderReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type DeleteProviderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool   `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
}

func (x *DeleteProviderResp) Reset() {
	*x = DeleteProviderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProviderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProviderResp) ProtoMessage() {}

func (x *DeleteProviderResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProviderResp.ProtoReflect.Descriptor instead.
func (*DeleteProviderResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{59}
}

func (x *DeleteProviderResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *DeleteProviderResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *DeleteProviderResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

type QueryProviderOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	OrderID   *string `protobuf:"bytes,2,opt,name=orderID" json:"orderID,omitempty"`
	OrderType *string `protobuf:"bytes,3,opt,name=orderType" json:"orderType,omitempty"`
}

func (x *QueryProviderOrderReq) Reset() {
	*x = QueryProviderOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProviderOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProviderOrderReq) ProtoMessage() {}

func (x *QueryProviderOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProviderOrderReq.ProtoReflect.Descriptor instead.
func (*QueryProviderOrderReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{60}
}

func (x *QueryProviderOrderReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *QueryProviderOrderReq) GetOrderID() string {
	if x != nil && x.OrderID != nil {
		return *x.OrderID
	}
	return ""
}

func (x *QueryProviderOrderReq) GetOrderType() string {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return ""
}

type QueryProviderOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32        `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool          `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *ProviderOrder `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *QueryProviderOrderResp) Reset() {
	*x = QueryProviderOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProviderOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProviderOrderResp) ProtoMessage() {}

func (x *QueryProviderOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProviderOrderResp.ProtoReflect.Descriptor instead.
func (*QueryProviderOrderResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{61}
}

func (x *QueryProviderOrderResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *QueryProviderOrderResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *QueryProviderOrderResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *QueryProviderOrderResp) GetData() *ProviderOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProviderOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  *bool     `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Status  *string   `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Message *string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Devices []*Device `protobuf:"bytes,4,rep,name=devices" json:"devices,omitempty"`
}

func (x *ProviderOrder) Reset() {
	*x = ProviderOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderOrder) ProtoMessage() {}

func (x *ProviderOrder) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderOrder.ProtoReflect.Descriptor instead.
func (*ProviderOrder) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{62}
}

func (x *ProviderOrder) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *ProviderOrder) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *ProviderOrder) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ProviderOrder) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

type QueryProviderNetworkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Vpc    *string `protobuf:"bytes,2,opt,name=vpc" json:"vpc,omitempty"`
	Zone   *string `protobuf:"bytes,3,opt,name=zone" json:"zone,omitempty"`
	Region *string `protobuf:"bytes,4,opt,name=region" json:"region,omitempty"`
}

func (x *QueryProviderNetworkReq) Reset() {
	*x = QueryProviderNetworkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProviderNetworkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProviderNetworkReq) ProtoMessage() {}

func (x *QueryProviderNetworkReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProviderNetworkReq.ProtoReflect.Descriptor instead.
func (*QueryProviderNetworkReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{63}
}

func (x *QueryProviderNetworkReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *QueryProviderNetworkReq) GetVpc() string {
	if x != nil && x.Vpc != nil {
		return *x.Vpc
	}
	return ""
}

func (x *QueryProviderNetworkReq) GetZone() string {
	if x != nil && x.Zone != nil {
		return *x.Zone
	}
	return ""
}

func (x *QueryProviderNetworkReq) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

type QueryProviderNetworkResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32          `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string          `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool            `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *ProviderNetwork `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *QueryProviderNetworkResp) Reset() {
	*x = QueryProviderNetworkResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProviderNetworkResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProviderNetworkResp) ProtoMessage() {}

func (x *QueryProviderNetworkResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProviderNetworkResp.ProtoReflect.Descriptor instead.
func (*QueryProviderNetworkResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{64}
}

func (x *QueryProviderNetworkResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *QueryProviderNetworkResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *QueryProviderNetworkResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *QueryProviderNetworkResp) GetData() *ProviderNetwork {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProviderNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet []*ProviderSubnet `protobuf:"bytes,1,rep,name=subnet" json:"subnet,omitempty"`
}

func (x *ProviderNetwork) Reset() {
	*x = ProviderNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderNetwork) ProtoMessage() {}

func (x *ProviderNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderNetwork.ProtoReflect.Descriptor instead.
func (*ProviderNetwork) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{65}
}

func (x *ProviderNetwork) GetSubnet() []*ProviderSubnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

type ProviderSubnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet    *string `protobuf:"bytes,1,opt,name=subnet" json:"subnet,omitempty"`
	Name      *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	LeftIPNum *uint32 `protobuf:"varint,3,opt,name=leftIPNum" json:"leftIPNum,omitempty"`
}

func (x *ProviderSubnet) Reset() {
	*x = ProviderSubnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderSubnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderSubnet) ProtoMessage() {}

func (x *ProviderSubnet) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderSubnet.ProtoReflect.Descriptor instead.
func (*ProviderSubnet) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{66}
}

func (x *ProviderSubnet) GetSubnet() string {
	if x != nil && x.Subnet != nil {
		return *x.Subnet
	}
	return ""
}

func (x *ProviderSubnet) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProviderSubnet) GetLeftIPNum() uint32 {
	if x != nil && x.LeftIPNum != nil {
		return *x.LeftIPNum
	}
	return 0
}

type GetDeviceRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceRecordID *string `protobuf:"bytes,1,opt,name=deviceRecordID" json:"deviceRecordID,omitempty"`
}

func (x *GetDeviceRecordReq) Reset() {
	*x = GetDeviceRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceRecordReq) ProtoMessage() {}

func (x *GetDeviceRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceRecordReq.ProtoReflect.Descriptor instead.
func (*GetDeviceRecordReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{67}
}

func (x *GetDeviceRecordReq) GetDeviceRecordID() string {
	if x != nil && x.DeviceRecordID != nil {
		return *x.DeviceRecordID
	}
	return ""
}

type GetDeviceRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32       `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string       `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool         `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *DeviceRecord `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *GetDeviceRecordResp) Reset() {
	*x = GetDeviceRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceRecordResp) ProtoMessage() {}

func (x *GetDeviceRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceRecordResp.ProtoReflect.Descriptor instead.
func (*GetDeviceRecordResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{68}
}

func (x *GetDeviceRecordResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *GetDeviceRecordResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetDeviceRecordResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *GetDeviceRecordResp) GetData() *DeviceRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateDeviceRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *DeviceRecord `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (x *CreateDeviceRecordReq) Reset() {
	*x = CreateDeviceRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRecordReq) ProtoMessage() {}

func (x *CreateDeviceRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRecordReq.ProtoReflect.Descriptor instead.
func (*CreateDeviceRecordReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{69}
}

func (x *CreateDeviceRecordReq) GetData() *DeviceRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateDeviceRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32       `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string       `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool         `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *DeviceRecord `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *CreateDeviceRecordResp) Reset() {
	*x = CreateDeviceRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRecordResp) ProtoMessage() {}

func (x *CreateDeviceRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRecordResp.ProtoReflect.Descriptor instead.
func (*CreateDeviceRecordResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{70}
}

func (x *CreateDeviceRecordResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *CreateDeviceRecordResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CreateDeviceRecordResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *CreateDeviceRecordResp) GetData() *DeviceRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListDeviceRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sort   *string  `protobuf:"bytes,1,opt,name=sort" json:"sort,omitempty"`
	Desc   *bool    `protobuf:"varint,2,opt,name=desc" json:"desc,omitempty"`
	Offset *int64   `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Limit  *int64   `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Pool   []string `protobuf:"bytes,5,rep,name=pool" json:"pool,omitempty"`
	Type   []int64  `protobuf:"varint,6,rep,name=type" json:"type,omitempty"`
	Status []int64  `protobuf:"varint,7,rep,name=status" json:"status,omitempty"`
}

func (x *ListDeviceRecordReq) Reset() {
	*x = ListDeviceRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeviceRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceRecordReq) ProtoMessage() {}

func (x *ListDeviceRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceRecordReq.ProtoReflect.Descriptor instead.
func (*ListDeviceRecordReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{71}
}

func (x *ListDeviceRecordReq) GetSort() string {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return ""
}

func (x *ListDeviceRecordReq) GetDesc() bool {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return false
}

func (x *ListDeviceRecordReq) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *ListDeviceRecordReq) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListDeviceRecordReq) GetPool() []string {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *ListDeviceRecordReq) GetType() []int64 {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ListDeviceRecordReq) GetStatus() []int64 {
	if x != nil {
		return x.Status
	}
	return nil
}

type ListDeviceRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32         `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string         `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool           `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    []*DeviceRecord `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
}

func (x *ListDeviceRecordResp) Reset() {
	*x = ListDeviceRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeviceRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceRecordResp) ProtoMessage() {}

func (x *ListDeviceRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceRecordResp.ProtoReflect.Descriptor instead.
func (*ListDeviceRecordResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{72}
}

func (x *ListDeviceRecordResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ListDeviceRecordResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListDeviceRecordResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *ListDeviceRecordResp) GetData() []*DeviceRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListDeviceBillReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sort             *string  `protobuf:"bytes,1,opt,name=sort" json:"sort,omitempty"`
	Desc             *bool    `protobuf:"varint,2,opt,name=desc" json:"desc,omitempty"`
	Offset           *int64   `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Limit            *int64   `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	DeviceConsumerID []string `protobuf:"bytes,5,rep,name=deviceConsumerID" json:"deviceConsumerID,omitempty"`
	DeviceID         []string `protobuf:"bytes,6,rep,name=deviceID" json:"deviceID,omitempty"`
	DeviceRecordID   []string `protobuf:"bytes,7,rep,name=deviceRecordID" json:"deviceRecordID,omitempty"`
	Finished         *bool    `protobuf:"varint,8,opt,name=finished" json:"finished,omitempty"`
	LeftTime         *int64   `protobuf:"varint,9,opt,name=leftTime" json:"leftTime,omitempty"`
	RightTime        *int64   `protobuf:"varint,10,opt,name=rightTime" json:"rightTime,omitempty"`
}

func (x *ListDeviceBillReq) Reset() {
	*x = ListDeviceBillReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeviceBillReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceBillReq) ProtoMessage() {}

func (x *ListDeviceBillReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceBillReq.ProtoReflect.Descriptor instead.
func (*ListDeviceBillReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{73}
}

func (x *ListDeviceBillReq) GetSort() string {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return ""
}

func (x *ListDeviceBillReq) GetDesc() bool {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return false
}

func (x *ListDeviceBillReq) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *ListDeviceBillReq) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListDeviceBillReq) GetDeviceConsumerID() []string {
	if x != nil {
		return x.DeviceConsumerID
	}
	return nil
}

func (x *ListDeviceBillReq) GetDeviceID() []string {
	if x != nil {
		return x.DeviceID
	}
	return nil
}

func (x *ListDeviceBillReq) GetDeviceRecordID() []string {
	if x != nil {
		return x.DeviceRecordID
	}
	return nil
}

func (x *ListDeviceBillReq) GetFinished() bool {
	if x != nil && x.Finished != nil {
		return *x.Finished
	}
	return false
}

func (x *ListDeviceBillReq) GetLeftTime() int64 {
	if x != nil && x.LeftTime != nil {
		return *x.LeftTime
	}
	return 0
}

func (x *ListDeviceBillReq) GetRightTime() int64 {
	if x != nil && x.RightTime != nil {
		return *x.RightTime
	}
	return 0
}

type ListDeviceBillResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32       `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string       `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool         `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    []*DeviceBill `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
}

func (x *ListDeviceBillResp) Reset() {
	*x = ListDeviceBillResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeviceBillResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceBillResp) ProtoMessage() {}

func (x *ListDeviceBillResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceBillResp.ProtoReflect.Descriptor instead.
func (*ListDeviceBillResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{74}
}

func (x *ListDeviceBillResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ListDeviceBillResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListDeviceBillResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *ListDeviceBillResp) GetData() []*DeviceBill {
	if x != nil {
		return x.Data
	}
	return nil
}

type DevicePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    *string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name                  *string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Provider              *string                     `protobuf:"bytes,3,opt,name=provider" json:"provider,omitempty"`
	BaseConfig            *ConsumeDesire              `protobuf:"bytes,4,opt,name=baseConfig" json:"baseConfig,omitempty"`
	AllowedDeviceConsumer []string                    `protobuf:"bytes,5,rep,name=allowedDeviceConsumer" json:"allowedDeviceConsumer,omitempty"`
	Labels                map[string]string           `protobuf:"bytes,6,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CreateTime            *int64                      `protobuf:"varint,7,opt,name=createTime" json:"createTime,omitempty"`
	UpdateTime            *int64                      `protobuf:"varint,8,opt,name=updateTime" json:"updateTime,omitempty"`
	EnableAS              *bool                       `protobuf:"varint,9,opt,name=enableAS" json:"enableAS,omitempty"`
	AsOption              *DevicePoolAutoScalerOption `protobuf:"bytes,10,opt,name=asOption" json:"asOption,omitempty"`
	AsStatus              *string                     `protobuf:"bytes,11,opt,name=asStatus" json:"asStatus,omitempty"`
	AsActionOrder         *string                     `protobuf:"bytes,12,opt,name=asActionOrder" json:"asActionOrder,omitempty"`
	Reserved              *bool                       `protobuf:"varint,13,opt,name=reserved" json:"reserved,omitempty"`
	Type                  *string                     `protobuf:"bytes,14,opt,name=type" json:"type,omitempty"`
	Operator              *string                     `protobuf:"bytes,15,opt,name=operator" json:"operator,omitempty"`
	Creator               *string                     `protobuf:"bytes,16,opt,name=creator" json:"creator,omitempty"`
	Updater               *string                     `protobuf:"bytes,17,opt,name=updater" json:"updater,omitempty"`
	Status                *string                     `protobuf:"bytes,18,opt,name=status" json:"status,omitempty"`
	Annotations           map[string]string           `protobuf:"bytes,19,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *DevicePool) Reset() {
	*x = DevicePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicePool) ProtoMessage() {}

func (x *DevicePool) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicePool.ProtoReflect.Descriptor instead.
func (*DevicePool) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{75}
}

func (x *DevicePool) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *DevicePool) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DevicePool) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

func (x *DevicePool) GetBaseConfig() *ConsumeDesire {
	if x != nil {
		return x.BaseConfig
	}
	return nil
}

func (x *DevicePool) GetAllowedDeviceConsumer() []string {
	if x != nil {
		return x.AllowedDeviceConsumer
	}
	return nil
}

func (x *DevicePool) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DevicePool) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *DevicePool) GetUpdateTime() int64 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

func (x *DevicePool) GetEnableAS() bool {
	if x != nil && x.EnableAS != nil {
		return *x.EnableAS
	}
	return false
}

func (x *DevicePool) GetAsOption() *DevicePoolAutoScalerOption {
	if x != nil {
		return x.AsOption
	}
	return nil
}

func (x *DevicePool) GetAsStatus() string {
	if x != nil && x.AsStatus != nil {
		return *x.AsStatus
	}
	return ""
}

func (x *DevicePool) GetAsActionOrder() string {
	if x != nil && x.AsActionOrder != nil {
		return *x.AsActionOrder
	}
	return ""
}

func (x *DevicePool) GetReserved() bool {
	if x != nil && x.Reserved != nil {
		return *x.Reserved
	}
	return false
}

func (x *DevicePool) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *DevicePool) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

func (x *DevicePool) GetCreator() string {
	if x != nil && x.Creator != nil {
		return *x.Creator
	}
	return ""
}

func (x *DevicePool) GetUpdater() string {
	if x != nil && x.Updater != nil {
		return *x.Updater
	}
	return ""
}

func (x *DevicePool) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *DevicePool) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type DevicePoolAutoScalerOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *string            `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Settings map[string]float64 `protobuf:"bytes,2,rep,name=settings" json:"settings,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
}

func (x *DevicePoolAutoScalerOption) Reset() {
	*x = DevicePoolAutoScalerOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicePoolAutoScalerOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicePoolAutoScalerOption) ProtoMessage() {}

func (x *DevicePoolAutoScalerOption) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicePoolAutoScalerOption.ProtoReflect.Descriptor instead.
func (*DevicePoolAutoScalerOption) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{76}
}

func (x *DevicePoolAutoScalerOption) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *DevicePoolAutoScalerOption) GetSettings() map[string]float64 {
	if x != nil {
		return x.Settings
	}
	return nil
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *string           `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Provider           *string           `protobuf:"bytes,2,opt,name=provider" json:"provider,omitempty"`
	Info               *DeviceInfo       `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
	Labels             map[string]string `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Status             *string           `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`
	CreateTime         *int64            `protobuf:"varint,6,opt,name=createTime" json:"createTime,omitempty"`
	UpdateTime         *int64            `protobuf:"varint,7,opt,name=updateTime" json:"updateTime,omitempty"`
	LastConsumedTime   *int64            `protobuf:"varint,8,opt,name=lastConsumedTime" json:"lastConsumedTime,omitempty"`
	LastReturnedTime   *int64            `protobuf:"varint,9,opt,name=lastReturnedTime" json:"lastReturnedTime,omitempty"`
	LastConsumerID     *string           `protobuf:"bytes,10,opt,name=lastConsumerID" json:"lastConsumerID,omitempty"`
	LastRecordID       *string           `protobuf:"bytes,11,opt,name=lastRecordID" json:"lastRecordID,omitempty"`
	LastReturnRecordID *string           `protobuf:"bytes,12,opt,name=lastReturnRecordID" json:"lastReturnRecordID,omitempty"`
	DevicePoolID       *string           `protobuf:"bytes,13,opt,name=devicePoolID" json:"devicePoolID,omitempty"`
	Type               *string           `protobuf:"bytes,14,opt,name=type" json:"type,omitempty"`
	Annotations        map[string]string `protobuf:"bytes,15,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{77}
}

func (x *Device) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Device) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

func (x *Device) GetInfo() *DeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Device) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Device) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *Device) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *Device) GetUpdateTime() int64 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

func (x *Device) GetLastConsumedTime() int64 {
	if x != nil && x.LastConsumedTime != nil {
		return *x.LastConsumedTime
	}
	return 0
}

func (x *Device) GetLastReturnedTime() int64 {
	if x != nil && x.LastReturnedTime != nil {
		return *x.LastReturnedTime
	}
	return 0
}

func (x *Device) GetLastConsumerID() string {
	if x != nil && x.LastConsumerID != nil {
		return *x.LastConsumerID
	}
	return ""
}

func (x *Device) GetLastRecordID() string {
	if x != nil && x.LastRecordID != nil {
		return *x.LastRecordID
	}
	return ""
}

func (x *Device) GetLastReturnRecordID() string {
	if x != nil && x.LastReturnRecordID != nil {
		return *x.LastReturnRecordID
	}
	return ""
}

func (x *Device) GetDevicePoolID() string {
	if x != nil && x.DevicePoolID != nil {
		return *x.DevicePoolID
	}
	return ""
}

func (x *Device) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Device) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type DeviceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	DeviceID  *string `protobuf:"bytes,2,opt,name=deviceID" json:"deviceID,omitempty"`
	Type      *string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Message   *string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	EventTime *int64  `protobuf:"varint,5,opt,name=eventTime" json:"eventTime,omitempty"`
}

func (x *DeviceEvent) Reset() {
	*x = DeviceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEvent) ProtoMessage() {}

func (x *DeviceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEvent.ProtoReflect.Descriptor instead.
func (*DeviceEvent) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{78}
}

func (x *DeviceEvent) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *DeviceEvent) GetDeviceID() string {
	if x != nil && x.DeviceID != nil {
		return *x.DeviceID
	}
	return ""
}

func (x *DeviceEvent) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *DeviceEvent) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *DeviceEvent) GetEventTime() int64 {
	if x != nil && x.EventTime != nil {
		return *x.EventTime
	}
	return 0
}

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance     *string         `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	InnerIP      *string         `protobuf:"bytes,2,opt,name=innerIP" json:"innerIP,omitempty"`
	InstanceType *string         `protobuf:"bytes,3,opt,name=instanceType" json:"instanceType,omitempty"`
	Cpu          *uint32         `protobuf:"varint,4,opt,name=cpu" json:"cpu,omitempty"`
	Mem          *uint32         `protobuf:"varint,5,opt,name=mem" json:"mem,omitempty"`
	Gpu          *uint32         `protobuf:"varint,6,opt,name=gpu" json:"gpu,omitempty"`
	Zone         *DeviceZone     `protobuf:"bytes,7,opt,name=zone" json:"zone,omitempty"`
	Security     *DeviceSecurity `protobuf:"bytes,8,opt,name=security" json:"security,omitempty"`
	Image        *DeviceImage    `protobuf:"bytes,9,opt,name=image" json:"image,omitempty"`
	Vpc          *string         `protobuf:"bytes,10,opt,name=vpc" json:"vpc,omitempty"`
	Region       *string         `protobuf:"bytes,11,opt,name=region" json:"region,omitempty"`
	Password     *string         `protobuf:"bytes,12,opt,name=password" json:"password,omitempty"`
	SystemDisk   *DeviceDisk     `protobuf:"bytes,13,opt,name=systemDisk" json:"systemDisk,omitempty"`
	DataDisks    []*DeviceDisk   `protobuf:"bytes,14,rep,name=dataDisks" json:"dataDisks,omitempty"`
	AssetID      *string         `protobuf:"bytes,15,opt,name=assetID" json:"assetID,omitempty"`
	BusinessID   *int64          `protobuf:"varint,16,opt,name=businessID" json:"businessID,omitempty"`
	CloudVendor  *string         `protobuf:"bytes,17,opt,name=cloudVendor" json:"cloudVendor,omitempty"`
	CloudRegion  *string         `protobuf:"bytes,18,opt,name=cloudRegion" json:"cloudRegion,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{79}
}

func (x *DeviceInfo) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *DeviceInfo) GetInnerIP() string {
	if x != nil && x.InnerIP != nil {
		return *x.InnerIP
	}
	return ""
}

func (x *DeviceInfo) GetInstanceType() string {
	if x != nil && x.InstanceType != nil {
		return *x.InstanceType
	}
	return ""
}

func (x *DeviceInfo) GetCpu() uint32 {
	if x != nil && x.Cpu != nil {
		return *x.Cpu
	}
	return 0
}

func (x *DeviceInfo) GetMem() uint32 {
	if x != nil && x.Mem != nil {
		return *x.Mem
	}
	return 0
}

func (x *DeviceInfo) GetGpu() uint32 {
	if x != nil && x.Gpu != nil {
		return *x.Gpu
	}
	return 0
}

func (x *DeviceInfo) GetZone() *DeviceZone {
	if x != nil {
		return x.Zone
	}
	return nil
}

func (x *DeviceInfo) GetSecurity() *DeviceSecurity {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *DeviceInfo) GetImage() *DeviceImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *DeviceInfo) GetVpc() string {
	if x != nil && x.Vpc != nil {
		return *x.Vpc
	}
	return ""
}

func (x *DeviceInfo) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *DeviceInfo) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *DeviceInfo) GetSystemDisk() *DeviceDisk {
	if x != nil {
		return x.SystemDisk
	}
	return nil
}

func (x *DeviceInfo) GetDataDisks() []*DeviceDisk {
	if x != nil {
		return x.DataDisks
	}
	return nil
}

func (x *DeviceInfo) GetAssetID() string {
	if x != nil && x.AssetID != nil {
		return *x.AssetID
	}
	return ""
}

func (x *DeviceInfo) GetBusinessID() int64 {
	if x != nil && x.BusinessID != nil {
		return *x.BusinessID
	}
	return 0
}

func (x *DeviceInfo) GetCloudVendor() string {
	if x != nil && x.CloudVendor != nil {
		return *x.CloudVendor
	}
	return ""
}

func (x *DeviceInfo) GetCloudRegion() string {
	if x != nil && x.CloudRegion != nil {
		return *x.CloudRegion
	}
	return ""
}

type DeviceSecurity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group            *string `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	GroupName        *string `protobuf:"bytes,2,opt,name=groupName" json:"groupName,omitempty"`
	GroupDescription *string `protobuf:"bytes,3,opt,name=groupDescription" json:"groupDescription,omitempty"`
}

func (x *DeviceSecurity) Reset() {
	*x = DeviceSecurity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSecurity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSecurity) ProtoMessage() {}

func (x *DeviceSecurity) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSecurity.ProtoReflect.Descriptor instead.
func (*DeviceSecurity) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{80}
}

func (x *DeviceSecurity) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

func (x *DeviceSecurity) GetGroupName() string {
	if x != nil && x.GroupName != nil {
		return *x.GroupName
	}
	return ""
}

func (x *DeviceSecurity) GetGroupDescription() string {
	if x != nil && x.GroupDescription != nil {
		return *x.GroupDescription
	}
	return ""
}

type DeviceImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image *string `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	Name  *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *DeviceImage) Reset() {
	*x = DeviceImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceImage) ProtoMessage() {}

func (x *DeviceImage) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceImage.ProtoReflect.Descriptor instead.
func (*DeviceImage) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{81}
}

func (x *DeviceImage) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *DeviceImage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type DeviceZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region *string `protobuf:"bytes,1,opt,name=region" json:"region,omitempty"`
	Zone   *string `protobuf:"bytes,2,opt,name=zone" json:"zone,omitempty"`
	Subnet *string `protobuf:"bytes,3,opt,name=subnet" json:"subnet,omitempty"`
}

func (x *DeviceZone) Reset() {
	*x = DeviceZone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceZone) ProtoMessage() {}

func (x *DeviceZone) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceZone.ProtoReflect.Descriptor instead.
func (*DeviceZone) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{82}
}

func (x *DeviceZone) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *DeviceZone) GetZone() string {
	if x != nil && x.Zone != nil {
		return *x.Zone
	}
	return ""
}

func (x *DeviceZone) GetSubnet() string {
	if x != nil && x.Subnet != nil {
		return *x.Subnet
	}
	return ""
}

// DeviceRecord 记录用户消费或归还设备的流水
type DeviceRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *string           `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	DeviceConsumerID *string           `protobuf:"bytes,2,opt,name=deviceConsumerID" json:"deviceConsumerID,omitempty"`
	RequestTime      *int64            `protobuf:"varint,3,opt,name=requestTime" json:"requestTime,omitempty"`
	FinishTime       *int64            `protobuf:"varint,4,opt,name=finishTime" json:"finishTime,omitempty"`
	Type             *string           `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	Status           *string           `protobuf:"bytes,6,opt,name=status" json:"status,omitempty"`
	Message          *string           `protobuf:"bytes,7,opt,name=message" json:"message,omitempty"`
	Devices          []string          `protobuf:"bytes,8,rep,name=devices" json:"devices,omitempty"`
	Num              *uint32           `protobuf:"varint,9,opt,name=num" json:"num,omitempty"`
	Desires          []*ConsumeDesire  `protobuf:"bytes,10,rep,name=desires" json:"desires,omitempty"`
	Pools            []string          `protobuf:"bytes,11,rep,name=pools" json:"pools,omitempty"`
	SelectedPool     *string           `protobuf:"bytes,12,opt,name=selectedPool" json:"selectedPool,omitempty"`
	CreateTime       *int64            `protobuf:"varint,13,opt,name=createTime" json:"createTime,omitempty"`
	UpdateTime       *int64            `protobuf:"varint,14,opt,name=updateTime" json:"updateTime,omitempty"`
	ConsumerLabels   map[string]string `protobuf:"bytes,15,rep,name=consumerLabels" json:"consumerLabels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DeviceDetails    []*Device         `protobuf:"bytes,16,rep,name=deviceDetails" json:"deviceDetails,omitempty"`
	ExtraLabels      map[string]string `protobuf:"bytes,17,rep,name=extraLabels" json:"extraLabels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SnapshotPool     *string           `protobuf:"bytes,18,opt,name=snapshotPool" json:"snapshotPool,omitempty"`
	Provider         *string           `protobuf:"bytes,19,opt,name=provider" json:"provider,omitempty"`
}

func (x *DeviceRecord) Reset() {
	*x = DeviceRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRecord) ProtoMessage() {}

func (x *DeviceRecord) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRecord.ProtoReflect.Descriptor instead.
func (*DeviceRecord) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{83}
}

func (x *DeviceRecord) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *DeviceRecord) GetDeviceConsumerID() string {
	if x != nil && x.DeviceConsumerID != nil {
		return *x.DeviceConsumerID
	}
	return ""
}

func (x *DeviceRecord) GetRequestTime() int64 {
	if x != nil && x.RequestTime != nil {
		return *x.RequestTime
	}
	return 0
}

func (x *DeviceRecord) GetFinishTime() int64 {
	if x != nil && x.FinishTime != nil {
		return *x.FinishTime
	}
	return 0
}

func (x *DeviceRecord) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *DeviceRecord) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *DeviceRecord) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *DeviceRecord) GetDevices() []string {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *DeviceRecord) GetNum() uint32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *DeviceRecord) GetDesires() []*ConsumeDesire {
	if x != nil {
		return x.Desires
	}
	return nil
}

func (x *DeviceRecord) GetPools() []string {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *DeviceRecord) GetSelectedPool() string {
	if x != nil && x.SelectedPool != nil {
		return *x.SelectedPool
	}
	return ""
}

func (x *DeviceRecord) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *DeviceRecord) GetUpdateTime() int64 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

func (x *DeviceRecord) GetConsumerLabels() map[string]string {
	if x != nil {
		return x.ConsumerLabels
	}
	return nil
}

func (x *DeviceRecord) GetDeviceDetails() []*Device {
	if x != nil {
		return x.DeviceDetails
	}
	return nil
}

func (x *DeviceRecord) GetExtraLabels() map[string]string {
	if x != nil {
		return x.ExtraLabels
	}
	return nil
}

func (x *DeviceRecord) GetSnapshotPool() string {
	if x != nil && x.SnapshotPool != nil {
		return *x.SnapshotPool
	}
	return ""
}

func (x *DeviceRecord) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

type DeviceBill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *string           `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	DeviceID           *string           `protobuf:"bytes,2,opt,name=deviceID" json:"deviceID,omitempty"`
	DeviceConsumerID   *string           `protobuf:"bytes,3,opt,name=deviceConsumerID" json:"deviceConsumerID,omitempty"`
	ConsumeRequestTime *int64            `protobuf:"varint,4,opt,name=consumeRequestTime" json:"consumeRequestTime,omitempty"`
	ConsumeTime        *int64            `protobuf:"varint,5,opt,name=consumeTime" json:"consumeTime,omitempty"`
	ReturnRequestTime  *int64            `protobuf:"varint,6,opt,name=returnRequestTime" json:"returnRequestTime,omitempty"`
	ReturnTime         *int64            `protobuf:"varint,7,opt,name=returnTime" json:"returnTime,omitempty"`
	Finished           *bool             `protobuf:"varint,8,opt,name=finished" json:"finished,omitempty"`
	ConsumerLabels     map[string]string `protobuf:"bytes,9,rep,name=consumerLabels" json:"consumerLabels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DeviceRecordID     *string           `protobuf:"bytes,10,opt,name=deviceRecordID" json:"deviceRecordID,omitempty"`
	DeviceInfo         *DeviceInfo       `protobuf:"bytes,11,opt,name=deviceInfo" json:"deviceInfo,omitempty"`
	Provider           *string           `protobuf:"bytes,12,opt,name=provider" json:"provider,omitempty"`
}

func (x *DeviceBill) Reset() {
	*x = DeviceBill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceBill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceBill) ProtoMessage() {}

func (x *DeviceBill) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceBill.ProtoReflect.Descriptor instead.
func (*DeviceBill) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{84}
}

func (x *DeviceBill) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *DeviceBill) GetDeviceID() string {
	if x != nil && x.DeviceID != nil {
		return *x.DeviceID
	}
	return ""
}

func (x *DeviceBill) GetDeviceConsumerID() string {
	if x != nil && x.DeviceConsumerID != nil {
		return *x.DeviceConsumerID
	}
	return ""
}

func (x *DeviceBill) GetConsumeRequestTime() int64 {
	if x != nil && x.ConsumeRequestTime != nil {
		return *x.ConsumeRequestTime
	}
	return 0
}

func (x *DeviceBill) GetConsumeTime() int64 {
	if x != nil && x.ConsumeTime != nil {
		return *x.ConsumeTime
	}
	return 0
}

func (x *DeviceBill) GetReturnRequestTime() int64 {
	if x != nil && x.ReturnRequestTime != nil {
		return *x.ReturnRequestTime
	}
	return 0
}

func (x *DeviceBill) GetReturnTime() int64 {
	if x != nil && x.ReturnTime != nil {
		return *x.ReturnTime
	}
	return 0
}

func (x *DeviceBill) GetFinished() bool {
	if x != nil && x.Finished != nil {
		return *x.Finished
	}
	return false
}

func (x *DeviceBill) GetConsumerLabels() map[string]string {
	if x != nil {
		return x.ConsumerLabels
	}
	return nil
}

func (x *DeviceBill) GetDeviceRecordID() string {
	if x != nil && x.DeviceRecordID != nil {
		return *x.DeviceRecordID
	}
	return ""
}

func (x *DeviceBill) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *DeviceBill) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

type Provider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Key        *string           `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Secret     *string           `protobuf:"bytes,3,opt,name=secret" json:"secret,omitempty"`
	Labels     map[string]string `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CreateTime *int64            `protobuf:"varint,5,opt,name=createTime" json:"createTime,omitempty"`
	UpdateTime *int64            `protobuf:"varint,6,opt,name=updateTime" json:"updateTime,omitempty"`
}

func (x *Provider) Reset() {
	*x = Provider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provider) ProtoMessage() {}

func (x *Provider) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provider.ProtoReflect.Descriptor instead.
func (*Provider) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{85}
}

func (x *Provider) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Provider) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Provider) GetSecret() string {
	if x != nil && x.Secret != nil {
		return *x.Secret
	}
	return ""
}

func (x *Provider) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Provider) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *Provider) GetUpdateTime() int64 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

type CreateResourcePoolReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Labels      map[string]string `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations map[string]string `protobuf:"bytes,3,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Comment     *string           `protobuf:"bytes,4,opt,name=comment" json:"comment,omitempty"`
}

func (x *CreateResourcePoolReq) Reset() {
	*x = CreateResourcePoolReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResourcePoolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResourcePoolReq) ProtoMessage() {}

func (x *CreateResourcePoolReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResourcePoolReq.ProtoReflect.Descriptor instead.
func (*CreateResourcePoolReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{86}
}

func (x *CreateResourcePoolReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateResourcePoolReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateResourcePoolReq) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *CreateResourcePoolReq) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type CreateResourcePoolResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32       `protobuf:"varint,1,req,name=code" json:"code,omitempty"`
	Message *string       `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`
	Result  *bool         `protobuf:"varint,3,req,name=result" json:"result,omitempty"`
	Data    *ResourcePool `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *CreateResourcePoolResp) Reset() {
	*x = CreateResourcePoolResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResourcePoolResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResourcePoolResp) ProtoMessage() {}

func (x *CreateResourcePoolResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResourcePoolResp.ProtoReflect.Descriptor instead.
func (*CreateResourcePoolResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{87}
}

func (x *CreateResourcePoolResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *CreateResourcePoolResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CreateResourcePoolResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *CreateResourcePoolResp) GetData() *ResourcePool {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListResourcePoolReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *ListResourcePoolReq) Reset() {
	*x = ListResourcePoolReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResourcePoolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourcePoolReq) ProtoMessage() {}

func (x *ListResourcePoolReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourcePoolReq.ProtoReflect.Descriptor instead.
func (*ListResourcePoolReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{88}
}

func (x *ListResourcePoolReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ListResourcePoolResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32         `protobuf:"varint,1,req,name=code" json:"code,omitempty"`
	Message *string         `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`
	Result  *bool           `protobuf:"varint,3,req,name=result" json:"result,omitempty"`
	Data    []*ResourcePool `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
}

func (x *ListResourcePoolResp) Reset() {
	*x = ListResourcePoolResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResourcePoolResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourcePoolResp) ProtoMessage() {}

func (x *ListResourcePoolResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourcePoolResp.ProtoReflect.Descriptor instead.
func (*ListResourcePoolResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{89}
}

func (x *ListResourcePoolResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ListResourcePoolResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListResourcePoolResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *ListResourcePoolResp) GetData() []*ResourcePool {
	if x != nil {
		return x.Data
	}
	return nil
}

type ResourcePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *string           `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        *string           `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Comment     *string           `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
	Labels      map[string]string `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations map[string]string `protobuf:"bytes,5,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CreateTime  *int64            `protobuf:"varint,6,opt,name=createTime" json:"createTime,omitempty"`
	UpdateTime  *int64            `protobuf:"varint,7,opt,name=updateTime" json:"updateTime,omitempty"`
}

func (x *ResourcePool) Reset() {
	*x = ResourcePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcePool) ProtoMessage() {}

func (x *ResourcePool) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcePool.ProtoReflect.Descriptor instead.
func (*ResourcePool) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{90}
}

func (x *ResourcePool) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ResourcePool) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ResourcePool) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ResourcePool) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ResourcePool) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ResourcePool) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *ResourcePool) GetUpdateTime() int64 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

type ImportResourceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolID   *string     `protobuf:"bytes,1,opt,name=poolID" json:"poolID,omitempty"`
	Data     []*Resource `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	Operator *string     `protobuf:"bytes,3,opt,name=operator" json:"operator,omitempty"`
}

func (x *ImportResourceReq) Reset() {
	*x = ImportResourceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportResourceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportResourceReq) ProtoMessage() {}

func (x *ImportResourceReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportResourceReq.ProtoReflect.Descriptor instead.
func (*ImportResourceReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{91}
}

func (x *ImportResourceReq) GetPoolID() string {
	if x != nil && x.PoolID != nil {
		return *x.PoolID
	}
	return ""
}

func (x *ImportResourceReq) GetData() []*Resource {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ImportResourceReq) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

type ImportResourceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32     `protobuf:"varint,1,req,name=code" json:"code,omitempty"`
	Message *string     `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`
	Result  *bool       `protobuf:"varint,3,req,name=result" json:"result,omitempty"`
	Data    []*Resource `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
}

func (x *ImportResourceResp) Reset() {
	*x = ImportResourceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportResourceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportResourceResp) ProtoMessage() {}

func (x *ImportResourceResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportResourceResp.ProtoReflect.Descriptor instead.
func (*ImportResourceResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{92}
}

func (x *ImportResourceResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ImportResourceResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ImportResourceResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *ImportResourceResp) GetData() []*Resource {
	if x != nil {
		return x.Data
	}
	return nil
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *string           `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	InnerIP          *string           `protobuf:"bytes,2,req,name=innerIP" json:"innerIP,omitempty"`
	InnerIPv6        *string           `protobuf:"bytes,3,opt,name=innerIPv6" json:"innerIPv6,omitempty"`
	ResourceType     *string           `protobuf:"bytes,4,req,name=resourceType" json:"resourceType,omitempty"`
	ResourceProvider *string           `protobuf:"bytes,5,req,name=resourceProvider" json:"resourceProvider,omitempty"`
	PoolID           *string           `protobuf:"bytes,6,opt,name=poolID" json:"poolID,omitempty"`
	Labels           map[string]string `protobuf:"bytes,7,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations      map[string]string `protobuf:"bytes,8,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CreateTime       *int64            `protobuf:"varint,9,opt,name=createTime" json:"createTime,omitempty"`
	UpdateTime       *int64            `protobuf:"varint,10,opt,name=updateTime" json:"updateTime,omitempty"`
	Status           *ResourceStatus   `protobuf:"bytes,11,opt,name=status" json:"status,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{93}
}

func (x *Resource) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Resource) GetInnerIP() string {
	if x != nil && x.InnerIP != nil {
		return *x.InnerIP
	}
	return ""
}

func (x *Resource) GetInnerIPv6() string {
	if x != nil && x.InnerIPv6 != nil {
		return *x.InnerIPv6
	}
	return ""
}

func (x *Resource) GetResourceType() string {
	if x != nil && x.ResourceType != nil {
		return *x.ResourceType
	}
	return ""
}

func (x *Resource) GetResourceProvider() string {
	if x != nil && x.ResourceProvider != nil {
		return *x.ResourceProvider
	}
	return ""
}

func (x *Resource) GetPoolID() string {
	if x != nil && x.PoolID != nil {
		return *x.PoolID
	}
	return ""
}

func (x *Resource) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Resource) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Resource) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *Resource) GetUpdateTime() int64 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

func (x *Resource) GetStatus() *ResourceStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type ResourceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase          *string `protobuf:"bytes,1,req,name=phase" json:"phase,omitempty"`
	UpdateTime     *int64  `protobuf:"varint,2,req,name=updateTime" json:"updateTime,omitempty"`
	ConsumeOrderID *string `protobuf:"bytes,3,opt,name=consumeOrderID" json:"consumeOrderID,omitempty"`
	DevicePoolID   *string `protobuf:"bytes,4,opt,name=devicePoolID" json:"devicePoolID,omitempty"`
	ClusterID      *string `protobuf:"bytes,5,opt,name=clusterID" json:"clusterID,omitempty"`
	ReturnOrderID  *string `protobuf:"bytes,6,opt,name=returnOrderID" json:"returnOrderID,omitempty"`
}

func (x *ResourceStatus) Reset() {
	*x = ResourceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStatus) ProtoMessage() {}

func (x *ResourceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStatus.ProtoReflect.Descriptor instead.
func (*ResourceStatus) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{94}
}

func (x *ResourceStatus) GetPhase() string {
	if x != nil && x.Phase != nil {
		return *x.Phase
	}
	return ""
}

func (x *ResourceStatus) GetUpdateTime() int64 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

func (x *ResourceStatus) GetConsumeOrderID() string {
	if x != nil && x.ConsumeOrderID != nil {
		return *x.ConsumeOrderID
	}
	return ""
}

func (x *ResourceStatus) GetDevicePoolID() string {
	if x != nil && x.DevicePoolID != nil {
		return *x.DevicePoolID
	}
	return ""
}

func (x *ResourceStatus) GetClusterID() string {
	if x != nil && x.ClusterID != nil {
		return *x.ClusterID
	}
	return ""
}

func (x *ResourceStatus) GetReturnOrderID() string {
	if x != nil && x.ReturnOrderID != nil {
		return *x.ReturnOrderID
	}
	return ""
}

type ListResourceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolID              *string `protobuf:"bytes,1,req,name=poolID" json:"poolID,omitempty"`
	Consumable          *string `protobuf:"bytes,2,opt,name=consumable" json:"consumable,omitempty"`
	MatchConsumerID     *string `protobuf:"bytes,3,opt,name=matchConsumerID" json:"matchConsumerID,omitempty"`
	MatchDeviceRecordID *string `protobuf:"bytes,4,opt,name=matchDeviceRecordID" json:"matchDeviceRecordID,omitempty"`
}

func (x *ListResourceReq) Reset() {
	*x = ListResourceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResourceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourceReq) ProtoMessage() {}

func (x *ListResourceReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourceReq.ProtoReflect.Descriptor instead.
func (*ListResourceReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{95}
}

func (x *ListResourceReq) GetPoolID() string {
	if x != nil && x.PoolID != nil {
		return *x.PoolID
	}
	return ""
}

func (x *ListResourceReq) GetConsumable() string {
	if x != nil && x.Consumable != nil {
		return *x.Consumable
	}
	return ""
}

func (x *ListResourceReq) GetMatchConsumerID() string {
	if x != nil && x.MatchConsumerID != nil {
		return *x.MatchConsumerID
	}
	return ""
}

func (x *ListResourceReq) GetMatchDeviceRecordID() string {
	if x != nil && x.MatchDeviceRecordID != nil {
		return *x.MatchDeviceRecordID
	}
	return ""
}

type ListDeviceRecordByPoolReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolID *string `protobuf:"bytes,1,req,name=poolID" json:"poolID,omitempty"`
	Sort   *string `protobuf:"bytes,2,opt,name=sort" json:"sort,omitempty"`
	Desc   *bool   `protobuf:"varint,3,opt,name=desc" json:"desc,omitempty"`
	Offset *int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	Limit  *int64  `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
}

func (x *ListDeviceRecordByPoolReq) Reset() {
	*x = ListDeviceRecordByPoolReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeviceRecordByPoolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceRecordByPoolReq) ProtoMessage() {}

func (x *ListDeviceRecordByPoolReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceRecordByPoolReq.ProtoReflect.Descriptor instead.
func (*ListDeviceRecordByPoolReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{96}
}

func (x *ListDeviceRecordByPoolReq) GetPoolID() string {
	if x != nil && x.PoolID != nil {
		return *x.PoolID
	}
	return ""
}

func (x *ListDeviceRecordByPoolReq) GetSort() string {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return ""
}

func (x *ListDeviceRecordByPoolReq) GetDesc() bool {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return false
}

func (x *ListDeviceRecordByPoolReq) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *ListDeviceRecordByPoolReq) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type ListDeviceRecordByDevicePoolReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolID *string `protobuf:"bytes,1,req,name=poolID" json:"poolID,omitempty"`
	Sort   *string `protobuf:"bytes,2,opt,name=sort" json:"sort,omitempty"`
	Desc   *bool   `protobuf:"varint,3,opt,name=desc" json:"desc,omitempty"`
	Offset *int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	Limit  *int64  `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
}

func (x *ListDeviceRecordByDevicePoolReq) Reset() {
	*x = ListDeviceRecordByDevicePoolReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeviceRecordByDevicePoolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceRecordByDevicePoolReq) ProtoMessage() {}

func (x *ListDeviceRecordByDevicePoolReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceRecordByDevicePoolReq.ProtoReflect.Descriptor instead.
func (*ListDeviceRecordByDevicePoolReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{97}
}

func (x *ListDeviceRecordByDevicePoolReq) GetPoolID() string {
	if x != nil && x.PoolID != nil {
		return *x.PoolID
	}
	return ""
}

func (x *ListDeviceRecordByDevicePoolReq) GetSort() string {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return ""
}

func (x *ListDeviceRecordByDevicePoolReq) GetDesc() bool {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return false
}

func (x *ListDeviceRecordByDevicePoolReq) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *ListDeviceRecordByDevicePoolReq) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type ListResourceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32     `protobuf:"varint,1,req,name=code" json:"code,omitempty"`
	Message *string     `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`
	Result  *bool       `protobuf:"varint,3,req,name=result" json:"result,omitempty"`
	Data    []*Resource `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
}

func (x *ListResourceResp) Reset() {
	*x = ListResourceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResourceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourceResp) ProtoMessage() {}

func (x *ListResourceResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourceResp.ProtoReflect.Descriptor instead.
func (*ListResourceResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{98}
}

func (x *ListResourceResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ListResourceResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListResourceResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *ListResourceResp) GetData() []*Resource {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateDeviceRecordByPoolReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolID     *string        `protobuf:"bytes,1,req,name=poolID" json:"poolID,omitempty"`
	Num        *uint32        `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
	Desire     *ConsumeDesire `protobuf:"bytes,3,opt,name=desire" json:"desire,omitempty"`
	DrainDelay *string        `protobuf:"bytes,4,opt,name=drainDelay" json:"drainDelay,omitempty"`
}

func (x *CreateDeviceRecordByPoolReq) Reset() {
	*x = CreateDeviceRecordByPoolReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceRecordByPoolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRecordByPoolReq) ProtoMessage() {}

func (x *CreateDeviceRecordByPoolReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRecordByPoolReq.ProtoReflect.Descriptor instead.
func (*CreateDeviceRecordByPoolReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{99}
}

func (x *CreateDeviceRecordByPoolReq) GetPoolID() string {
	if x != nil && x.PoolID != nil {
		return *x.PoolID
	}
	return ""
}

func (x *CreateDeviceRecordByPoolReq) GetNum() uint32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *CreateDeviceRecordByPoolReq) GetDesire() *ConsumeDesire {
	if x != nil {
		return x.Desire
	}
	return nil
}

func (x *CreateDeviceRecordByPoolReq) GetDrainDelay() string {
	if x != nil && x.DrainDelay != nil {
		return *x.DrainDelay
	}
	return ""
}

type UpdateDeviceRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceRecordID *string     `protobuf:"bytes,1,req,name=deviceRecordID" json:"deviceRecordID,omitempty"`
	Devices        *ListString `protobuf:"bytes,2,opt,name=devices" json:"devices,omitempty"`
}

func (x *UpdateDeviceRecordReq) Reset() {
	*x = UpdateDeviceRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRecordReq) ProtoMessage() {}

func (x *UpdateDeviceRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRecordReq.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRecordReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{100}
}

func (x *UpdateDeviceRecordReq) GetDeviceRecordID() string {
	if x != nil && x.DeviceRecordID != nil {
		return *x.DeviceRecordID
	}
	return ""
}

func (x *UpdateDeviceRecordReq) GetDevices() *ListString {
	if x != nil {
		return x.Devices
	}
	return nil
}

type UpdateDeviceRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32       `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string       `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool         `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *DeviceRecord `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *UpdateDeviceRecordResp) Reset() {
	*x = UpdateDeviceRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRecordResp) ProtoMessage() {}

func (x *UpdateDeviceRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRecordResp.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRecordResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{101}
}

func (x *UpdateDeviceRecordResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *UpdateDeviceRecordResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *UpdateDeviceRecordResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *UpdateDeviceRecordResp) GetData() *DeviceRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateDeviceRecordByDevicePoolReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolID     *string        `protobuf:"bytes,1,req,name=poolID" json:"poolID,omitempty"`
	Num        *uint32        `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
	Desire     *ConsumeDesire `protobuf:"bytes,3,opt,name=desire" json:"desire,omitempty"`
	DrainDelay *string        `protobuf:"bytes,4,opt,name=drainDelay" json:"drainDelay,omitempty"`
}

func (x *CreateDeviceRecordByDevicePoolReq) Reset() {
	*x = CreateDeviceRecordByDevicePoolReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceRecordByDevicePoolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRecordByDevicePoolReq) ProtoMessage() {}

func (x *CreateDeviceRecordByDevicePoolReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRecordByDevicePoolReq.ProtoReflect.Descriptor instead.
func (*CreateDeviceRecordByDevicePoolReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{102}
}

func (x *CreateDeviceRecordByDevicePoolReq) GetPoolID() string {
	if x != nil && x.PoolID != nil {
		return *x.PoolID
	}
	return ""
}

func (x *CreateDeviceRecordByDevicePoolReq) GetNum() uint32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *CreateDeviceRecordByDevicePoolReq) GetDesire() *ConsumeDesire {
	if x != nil {
		return x.Desire
	}
	return nil
}

func (x *CreateDeviceRecordByDevicePoolReq) GetDrainDelay() string {
	if x != nil && x.DrainDelay != nil {
		return *x.DrainDelay
	}
	return ""
}

type CreateDeviceRecordByPoolResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32       `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string       `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool         `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *DeviceRecord `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *CreateDeviceRecordByPoolResp) Reset() {
	*x = CreateDeviceRecordByPoolResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceRecordByPoolResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRecordByPoolResp) ProtoMessage() {}

func (x *CreateDeviceRecordByPoolResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRecordByPoolResp.ProtoReflect.Descriptor instead.
func (*CreateDeviceRecordByPoolResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{103}
}

func (x *CreateDeviceRecordByPoolResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *CreateDeviceRecordByPoolResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CreateDeviceRecordByPoolResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *CreateDeviceRecordByPoolResp) GetData() *DeviceRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateDeviceRecordByDevicePoolResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32       `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string       `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool         `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *DeviceRecord `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *CreateDeviceRecordByDevicePoolResp) Reset() {
	*x = CreateDeviceRecordByDevicePoolResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceRecordByDevicePoolResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRecordByDevicePoolResp) ProtoMessage() {}

func (x *CreateDeviceRecordByDevicePoolResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRecordByDevicePoolResp.ProtoReflect.Descriptor instead.
func (*CreateDeviceRecordByDevicePoolResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{104}
}

func (x *CreateDeviceRecordByDevicePoolResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *CreateDeviceRecordByDevicePoolResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CreateDeviceRecordByDevicePoolResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *CreateDeviceRecordByDevicePoolResp) GetData() *DeviceRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetDeviceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceID *string `protobuf:"bytes,1,opt,name=deviceID" json:"deviceID,omitempty"`
}

func (x *GetDeviceReq) Reset() {
	*x = GetDeviceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceReq) ProtoMessage() {}

func (x *GetDeviceReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceReq.ProtoReflect.Descriptor instead.
func (*GetDeviceReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{105}
}

func (x *GetDeviceReq) GetDeviceID() string {
	if x != nil && x.DeviceID != nil {
		return *x.DeviceID
	}
	return ""
}

type GetDeviceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool   `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *Device `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *GetDeviceResp) Reset() {
	*x = GetDeviceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceResp) ProtoMessage() {}

func (x *GetDeviceResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceResp.ProtoReflect.Descriptor instead.
func (*GetDeviceResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{106}
}

func (x *GetDeviceResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *GetDeviceResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetDeviceResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *GetDeviceResp) GetData() *Device {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListDevicesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sort     *string  `protobuf:"bytes,1,opt,name=sort" json:"sort,omitempty"`
	Desc     *bool    `protobuf:"varint,2,opt,name=desc" json:"desc,omitempty"`
	Offset   *int64   `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Limit    *int64   `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Provider []string `protobuf:"bytes,5,rep,name=provider" json:"provider,omitempty"`
	Pool     []string `protobuf:"bytes,6,rep,name=pool" json:"pool,omitempty"`
	Status   []int64  `protobuf:"varint,7,rep,name=status" json:"status,omitempty"`
	AssetID  []string `protobuf:"bytes,8,rep,name=assetID" json:"assetID,omitempty"`
	Consumer []string `protobuf:"bytes,9,rep,name=consumer" json:"consumer,omitempty"`
	Ip       []string `protobuf:"bytes,10,rep,name=ip" json:"ip,omitempty"`
}

func (x *ListDevicesReq) Reset() {
	*x = ListDevicesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDevicesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevicesReq) ProtoMessage() {}

func (x *ListDevicesReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevicesReq.ProtoReflect.Descriptor instead.
func (*ListDevicesReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{107}
}

func (x *ListDevicesReq) GetSort() string {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return ""
}

func (x *ListDevicesReq) GetDesc() bool {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return false
}

func (x *ListDevicesReq) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *ListDevicesReq) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListDevicesReq) GetProvider() []string {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *ListDevicesReq) GetPool() []string {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *ListDevicesReq) GetStatus() []int64 {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListDevicesReq) GetAssetID() []string {
	if x != nil {
		return x.AssetID
	}
	return nil
}

func (x *ListDevicesReq) GetConsumer() []string {
	if x != nil {
		return x.Consumer
	}
	return nil
}

func (x *ListDevicesReq) GetIp() []string {
	if x != nil {
		return x.Ip
	}
	return nil
}

type ListDevicesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32   `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool     `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    []*Device `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
}

func (x *ListDevicesResp) Reset() {
	*x = ListDevicesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDevicesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevicesResp) ProtoMessage() {}

func (x *ListDevicesResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevicesResp.ProtoReflect.Descriptor instead.
func (*ListDevicesResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{108}
}

func (x *ListDevicesResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ListDevicesResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListDevicesResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *ListDevicesResp) GetData() []*Device {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateDeviceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceID    *string           `protobuf:"bytes,1,opt,name=deviceID" json:"deviceID,omitempty"`
	Provider    *string           `protobuf:"bytes,2,opt,name=provider" json:"provider,omitempty"`
	Pool        *string           `protobuf:"bytes,3,opt,name=pool" json:"pool,omitempty"`
	Status      *int64            `protobuf:"varint,4,opt,name=status" json:"status,omitempty"`
	SystemID    *string           `protobuf:"bytes,5,opt,name=systemID" json:"systemID,omitempty"`
	Labels      map[string]string `protobuf:"bytes,6,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Info        *DeviceInfo       `protobuf:"bytes,7,opt,name=info" json:"info,omitempty"`
	Type        *string           `protobuf:"bytes,8,opt,name=type" json:"type,omitempty"`
	Annotations map[string]string `protobuf:"bytes,9,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *UpdateDeviceReq) Reset() {
	*x = UpdateDeviceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceReq) ProtoMessage() {}

func (x *UpdateDeviceReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceReq.ProtoReflect.Descriptor instead.
func (*UpdateDeviceReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{109}
}

func (x *UpdateDeviceReq) GetDeviceID() string {
	if x != nil && x.DeviceID != nil {
		return *x.DeviceID
	}
	return ""
}

func (x *UpdateDeviceReq) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

func (x *UpdateDeviceReq) GetPool() string {
	if x != nil && x.Pool != nil {
		return *x.Pool
	}
	return ""
}

func (x *UpdateDeviceReq) GetStatus() int64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *UpdateDeviceReq) GetSystemID() string {
	if x != nil && x.SystemID != nil {
		return *x.SystemID
	}
	return ""
}

func (x *UpdateDeviceReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateDeviceReq) GetInfo() *DeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *UpdateDeviceReq) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *UpdateDeviceReq) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type UpdateDeviceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool   `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *Device `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *UpdateDeviceResp) Reset() {
	*x = UpdateDeviceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceResp) ProtoMessage() {}

func (x *UpdateDeviceResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceResp.ProtoReflect.Descriptor instead.
func (*UpdateDeviceResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{110}
}

func (x *UpdateDeviceResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *UpdateDeviceResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *UpdateDeviceResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *UpdateDeviceResp) GetData() *Device {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteDevicesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceIDs []string `protobuf:"bytes,1,rep,name=deviceIDs" json:"deviceIDs,omitempty"`
}

func (x *DeleteDevicesReq) Reset() {
	*x = DeleteDevicesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDevicesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDevicesReq) ProtoMessage() {}

func (x *DeleteDevicesReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDevicesReq.ProtoReflect.Descriptor instead.
func (*DeleteDevicesReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{111}
}

func (x *DeleteDevicesReq) GetDeviceIDs() []string {
	if x != nil {
		return x.DeviceIDs
	}
	return nil
}

type DeleteDevicesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool   `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
}

func (x *DeleteDevicesResp) Reset() {
	*x = DeleteDevicesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDevicesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDevicesResp) ProtoMessage() {}

func (x *DeleteDevicesResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDevicesResp.ProtoReflect.Descriptor instead.
func (*DeleteDevicesResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{112}
}

func (x *DeleteDevicesResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *DeleteDevicesResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *DeleteDevicesResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

type CreateDeviceInstanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	InstanceType *string  `protobuf:"bytes,2,opt,name=instanceType" json:"instanceType,omitempty"`
	Region       *string  `protobuf:"bytes,3,opt,name=region" json:"region,omitempty"`
	Zone         []string `protobuf:"bytes,4,rep,name=zone" json:"zone,omitempty"`
	Cpu          *uint32  `protobuf:"varint,5,opt,name=cpu" json:"cpu,omitempty"`
	Memory       *uint32  `protobuf:"varint,6,opt,name=memory" json:"memory,omitempty"`
	Provider     *string  `protobuf:"bytes,7,opt,name=provider" json:"provider,omitempty"`
	Status       *uint32  `protobuf:"varint,8,opt,name=status" json:"status,omitempty"`
	Num          *uint32  `protobuf:"varint,10,opt,name=num" json:"num,omitempty"`
}

func (x *CreateDeviceInstanceReq) Reset() {
	*x = CreateDeviceInstanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceInstanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceInstanceReq) ProtoMessage() {}

func (x *CreateDeviceInstanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceInstanceReq.ProtoReflect.Descriptor instead.
func (*CreateDeviceInstanceReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{113}
}

func (x *CreateDeviceInstanceReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateDeviceInstanceReq) GetInstanceType() string {
	if x != nil && x.InstanceType != nil {
		return *x.InstanceType
	}
	return ""
}

func (x *CreateDeviceInstanceReq) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *CreateDeviceInstanceReq) GetZone() []string {
	if x != nil {
		return x.Zone
	}
	return nil
}

func (x *CreateDeviceInstanceReq) GetCpu() uint32 {
	if x != nil && x.Cpu != nil {
		return *x.Cpu
	}
	return 0
}

func (x *CreateDeviceInstanceReq) GetMemory() uint32 {
	if x != nil && x.Memory != nil {
		return *x.Memory
	}
	return 0
}

func (x *CreateDeviceInstanceReq) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

func (x *CreateDeviceInstanceReq) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *CreateDeviceInstanceReq) GetNum() uint32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

type CreateDeviceInstanceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32         `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string         `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool           `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *DeviceInstance `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *CreateDeviceInstanceResp) Reset() {
	*x = CreateDeviceInstanceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceInstanceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceInstanceResp) ProtoMessage() {}

func (x *CreateDeviceInstanceResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceInstanceResp.ProtoReflect.Descriptor instead.
func (*CreateDeviceInstanceResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{114}
}

func (x *CreateDeviceInstanceResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *CreateDeviceInstanceResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CreateDeviceInstanceResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *CreateDeviceInstanceResp) GetData() *DeviceInstance {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateDeviceInstanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceInstanceID *string  `protobuf:"bytes,1,opt,name=deviceInstanceID" json:"deviceInstanceID,omitempty"`
	Name             *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	InstanceType     *string  `protobuf:"bytes,3,opt,name=instanceType" json:"instanceType,omitempty"`
	Region           *string  `protobuf:"bytes,4,opt,name=region" json:"region,omitempty"`
	Zone             []string `protobuf:"bytes,5,rep,name=zone" json:"zone,omitempty"`
	Cpu              *uint32  `protobuf:"varint,6,opt,name=cpu" json:"cpu,omitempty"`
	Memory           *uint32  `protobuf:"varint,7,opt,name=memory" json:"memory,omitempty"`
	Provider         *string  `protobuf:"bytes,8,opt,name=provider" json:"provider,omitempty"`
	Status           *uint32  `protobuf:"varint,9,opt,name=status" json:"status,omitempty"`
	Num              *uint32  `protobuf:"varint,10,opt,name=num" json:"num,omitempty"`
}

func (x *UpdateDeviceInstanceReq) Reset() {
	*x = UpdateDeviceInstanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceInstanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceInstanceReq) ProtoMessage() {}

func (x *UpdateDeviceInstanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceInstanceReq.ProtoReflect.Descriptor instead.
func (*UpdateDeviceInstanceReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{115}
}

func (x *UpdateDeviceInstanceReq) GetDeviceInstanceID() string {
	if x != nil && x.DeviceInstanceID != nil {
		return *x.DeviceInstanceID
	}
	return ""
}

func (x *UpdateDeviceInstanceReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateDeviceInstanceReq) GetInstanceType() string {
	if x != nil && x.InstanceType != nil {
		return *x.InstanceType
	}
	return ""
}

func (x *UpdateDeviceInstanceReq) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *UpdateDeviceInstanceReq) GetZone() []string {
	if x != nil {
		return x.Zone
	}
	return nil
}

func (x *UpdateDeviceInstanceReq) GetCpu() uint32 {
	if x != nil && x.Cpu != nil {
		return *x.Cpu
	}
	return 0
}

func (x *UpdateDeviceInstanceReq) GetMemory() uint32 {
	if x != nil && x.Memory != nil {
		return *x.Memory
	}
	return 0
}

func (x *UpdateDeviceInstanceReq) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

func (x *UpdateDeviceInstanceReq) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *UpdateDeviceInstanceReq) GetNum() uint32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

type UpdateDeviceInstanceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32         `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string         `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool           `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *DeviceInstance `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *UpdateDeviceInstanceResp) Reset() {
	*x = UpdateDeviceInstanceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceInstanceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceInstanceResp) ProtoMessage() {}

func (x *UpdateDeviceInstanceResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceInstanceResp.ProtoReflect.Descriptor instead.
func (*UpdateDeviceInstanceResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{116}
}

func (x *UpdateDeviceInstanceResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *UpdateDeviceInstanceResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *UpdateDeviceInstanceResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *UpdateDeviceInstanceResp) GetData() *DeviceInstance {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteDeviceInstanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceInstanceID *string `protobuf:"bytes,1,opt,name=deviceInstanceID" json:"deviceInstanceID,omitempty"`
}

func (x *DeleteDeviceInstanceReq) Reset() {
	*x = DeleteDeviceInstanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceInstanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceInstanceReq) ProtoMessage() {}

func (x *DeleteDeviceInstanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceInstanceReq.ProtoReflect.Descriptor instead.
func (*DeleteDeviceInstanceReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{117}
}

func (x *DeleteDeviceInstanceReq) GetDeviceInstanceID() string {
	if x != nil && x.DeviceInstanceID != nil {
		return *x.DeviceInstanceID
	}
	return ""
}

type DeleteDeviceInstanceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool   `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
}

func (x *DeleteDeviceInstanceResp) Reset() {
	*x = DeleteDeviceInstanceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceInstanceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceInstanceResp) ProtoMessage() {}

func (x *DeleteDeviceInstanceResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceInstanceResp.ProtoReflect.Descriptor instead.
func (*DeleteDeviceInstanceResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{118}
}

func (x *DeleteDeviceInstanceResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *DeleteDeviceInstanceResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *DeleteDeviceInstanceResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

type ListDeviceInstancesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID *string `protobuf:"bytes,1,opt,name=projectID" json:"projectID,omitempty"`
	ClusterID *string `protobuf:"bytes,2,opt,name=clusterID" json:"clusterID,omitempty"`
	Region    *string `protobuf:"bytes,3,opt,name=region" json:"region,omitempty"`
	Cpu       *uint32 `protobuf:"varint,4,opt,name=cpu" json:"cpu,omitempty"`
	Memory    *uint32 `protobuf:"varint,5,opt,name=memory" json:"memory,omitempty"`
	Status    *uint32 `protobuf:"varint,6,opt,name=status" json:"status,omitempty"`
}

func (x *ListDeviceInstancesReq) Reset() {
	*x = ListDeviceInstancesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeviceInstancesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceInstancesReq) ProtoMessage() {}

func (x *ListDeviceInstancesReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceInstancesReq.ProtoReflect.Descriptor instead.
func (*ListDeviceInstancesReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{119}
}

func (x *ListDeviceInstancesReq) GetProjectID() string {
	if x != nil && x.ProjectID != nil {
		return *x.ProjectID
	}
	return ""
}

func (x *ListDeviceInstancesReq) GetClusterID() string {
	if x != nil && x.ClusterID != nil {
		return *x.ClusterID
	}
	return ""
}

func (x *ListDeviceInstancesReq) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *ListDeviceInstancesReq) GetCpu() uint32 {
	if x != nil && x.Cpu != nil {
		return *x.Cpu
	}
	return 0
}

func (x *ListDeviceInstancesReq) GetMemory() uint32 {
	if x != nil && x.Memory != nil {
		return *x.Memory
	}
	return 0
}

func (x *ListDeviceInstancesReq) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type ListDeviceInstancesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32           `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string           `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool             `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    []*DeviceInstance `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
}

func (x *ListDeviceInstancesResp) Reset() {
	*x = ListDeviceInstancesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeviceInstancesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceInstancesResp) ProtoMessage() {}

func (x *ListDeviceInstancesResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceInstancesResp.ProtoReflect.Descriptor instead.
func (*ListDeviceInstancesResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{120}
}

func (x *ListDeviceInstancesResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ListDeviceInstancesResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListDeviceInstancesResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *ListDeviceInstancesResp) GetData() []*DeviceInstance {
	if x != nil {
		return x.Data
	}
	return nil
}

type EnableDeviceConsumerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID        *string `protobuf:"bytes,1,opt,name=projectID" json:"projectID,omitempty"`
	ClusterID        *string `protobuf:"bytes,2,opt,name=clusterID" json:"clusterID,omitempty"`
	Region           *string `protobuf:"bytes,3,opt,name=region" json:"region,omitempty"`
	Vpc              *string `protobuf:"bytes,4,opt,name=vpc" json:"vpc,omitempty"`
	DeviceInstanceID *string `protobuf:"bytes,5,opt,name=deviceInstanceID" json:"deviceInstanceID,omitempty"`
}

func (x *EnableDeviceConsumerReq) Reset() {
	*x = EnableDeviceConsumerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableDeviceConsumerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableDeviceConsumerReq) ProtoMessage() {}

func (x *EnableDeviceConsumerReq) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableDeviceConsumerReq.ProtoReflect.Descriptor instead.
func (*EnableDeviceConsumerReq) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{121}
}

func (x *EnableDeviceConsumerReq) GetProjectID() string {
	if x != nil && x.ProjectID != nil {
		return *x.ProjectID
	}
	return ""
}

func (x *EnableDeviceConsumerReq) GetClusterID() string {
	if x != nil && x.ClusterID != nil {
		return *x.ClusterID
	}
	return ""
}

func (x *EnableDeviceConsumerReq) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *EnableDeviceConsumerReq) GetVpc() string {
	if x != nil && x.Vpc != nil {
		return *x.Vpc
	}
	return ""
}

func (x *EnableDeviceConsumerReq) GetDeviceInstanceID() string {
	if x != nil && x.DeviceInstanceID != nil {
		return *x.DeviceInstanceID
	}
	return ""
}

type EnableDeviceConsumerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32         `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message *string         `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Result  *bool           `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	Data    *DeviceConsumer `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *EnableDeviceConsumerResp) Reset() {
	*x = EnableDeviceConsumerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableDeviceConsumerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableDeviceConsumerResp) ProtoMessage() {}

func (x *EnableDeviceConsumerResp) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableDeviceConsumerResp.ProtoReflect.Descriptor instead.
func (*EnableDeviceConsumerResp) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{122}
}

func (x *EnableDeviceConsumerResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *EnableDeviceConsumerResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *EnableDeviceConsumerResp) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *EnableDeviceConsumerResp) GetData() *DeviceConsumer {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeviceInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name         *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	InstanceType *string  `protobuf:"bytes,3,opt,name=instanceType" json:"instanceType,omitempty"`
	Region       *string  `protobuf:"bytes,4,opt,name=region" json:"region,omitempty"`
	Zone         []string `protobuf:"bytes,5,rep,name=zone" json:"zone,omitempty"`
	Cpu          *uint32  `protobuf:"varint,6,opt,name=cpu" json:"cpu,omitempty"`
	Memory       *uint32  `protobuf:"varint,7,opt,name=memory" json:"memory,omitempty"`
	Provider     *string  `protobuf:"bytes,8,opt,name=provider" json:"provider,omitempty"`
	Status       *string  `protobuf:"bytes,9,opt,name=status" json:"status,omitempty"`
	Num          *uint32  `protobuf:"varint,10,opt,name=num" json:"num,omitempty"`
	CreateTime   *int64   `protobuf:"varint,11,opt,name=createTime" json:"createTime,omitempty"`
	UpdateTime   *int64   `protobuf:"varint,12,opt,name=updateTime" json:"updateTime,omitempty"`
}

func (x *DeviceInstance) Reset() {
	*x = DeviceInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resourcemanager_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInstance) ProtoMessage() {}

func (x *DeviceInstance) ProtoReflect() protoreflect.Message {
	mi := &file_resourcemanager_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInstance.ProtoReflect.Descriptor instead.
func (*DeviceInstance) Descriptor() ([]byte, []int) {
	return file_resourcemanager_proto_rawDescGZIP(), []int{123}
}

func (x *DeviceInstance) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *DeviceInstance) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DeviceInstance) GetInstanceType() string {
	if x != nil && x.InstanceType != nil {
		return *x.InstanceType
	}
	return ""
}

func (x *DeviceInstance) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *DeviceInstance) GetZone() []string {
	if x != nil {
		return x.Zone
	}
	return nil
}

func (x *DeviceInstance) GetCpu() uint32 {
	if x != nil && x.Cpu != nil {
		return *x.Cpu
	}
	return 0
}

func (x *DeviceInstance) GetMemory() uint32 {
	if x != nil && x.Memory != nil {
		return *x.Memory
	}
	return 0
}

func (x *DeviceInstance) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

func (x *DeviceInstance) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *DeviceInstance) GetNum() uint32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *DeviceInstance) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *DeviceInstance) GetUpdateTime() int64 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

var File_resourcemanager_proto protoreflect.FileDescriptor

var file_resourcemanager_proto_rawDesc = []byte{
	0x0a, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x53, 0x0a,
	0x0c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x3a, 0x43, 0x92,
	0x41, 0x40, 0x0a, 0x3e, 0x2a, 0x0c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x32, 0x2e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x22, 0xf4, 0x01, 0x0a, 0x0d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x3a, 0x44, 0x92, 0x41, 0x41, 0x0a, 0x3f, 0x2a, 0x0d, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x32, 0x2e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf,
	0xe7, 0x94, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xfe, 0x02, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x37,
	0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x32,
	0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xa7, 0x84, 0xe6, 0xa0, 0xbc, 0x52, 0x08, 0x73,
	0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x0e, 0x6f, 0x62, 0x73, 0x20, 0x63,
	0x6f, 0x73, 0x74, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x2b, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92,
	0x41, 0x14, 0x2a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x09,
	0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32,
	0x0c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x52, 0x09, 0x75,
	0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x0c, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x3a, 0x2d, 0x92, 0x41, 0x2a,
	0x0a, 0x28, 0x2a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x73, 0x43, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x32, 0x14, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x6f, 0x62, 0x73, 0x20,
	0x63, 0x6f, 0x73, 0x74, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xae, 0x02, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4f, 0x62, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x11, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe7, 0x9a, 0x84, 0x6f, 0x62, 0x73,
	0x20, 0x63, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x2e, 0x92, 0x41, 0x2b,
	0x0a, 0x29, 0x2a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x73, 0x43, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0x14, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x6f, 0x62, 0x73,
	0x20, 0x63, 0x6f, 0x73, 0x74, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xc6, 0x02, 0x0a, 0x07,
	0x4f, 0x62, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x08,
	0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0xe8, 0xa7, 0x84, 0xe6, 0xa0, 0xbc, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x32, 0x0e, 0x6f, 0x62, 0x73, 0x20, 0x63, 0x6f, 0x73, 0x74, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0x52,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x75,
	0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d,
	0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x0c,
	0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x02, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62,
	0x73, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x2a, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x32, 0x03, 0xe5, 0xb9, 0xb4, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x2e, 0x0a, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0x92, 0x41, 0x0c,
	0x2a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x32, 0x03, 0xe6, 0x9c, 0x88, 0xfa, 0x42, 0x06, 0x2a,
	0x04, 0x18, 0x0c, 0x28, 0x01, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x08,
	0x6c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1e,
	0x92, 0x41, 0x1b, 0x2a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0f, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe5, 0xb7, 0xa6, 0xe5, 0x8c, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x08,
	0x6c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1f, 0x92, 0x41, 0x1c,
	0x2a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0f, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0xe5, 0x8f, 0xb3, 0xe5, 0x8c, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x2d, 0x92, 0x41, 0x2a, 0x0a, 0x28, 0x2a, 0x0f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x73, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x32,
	0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x6f, 0x62, 0x73, 0xe8, 0xb4, 0xa6, 0xe5, 0x8d, 0x95,
	0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xcf, 0x02, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4f, 0x62, 0x73, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4f, 0x62, 0x73, 0x42, 0x69,
	0x6c, 0x6c, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0xe8, 0xb4, 0xa6, 0xe5, 0x8d,
	0x95, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x4f, 0x92, 0x41, 0x4c, 0x0a, 0x4a, 0x2a, 0x10,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x73, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x32, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x6f, 0x62, 0x73, 0xe8, 0xb4, 0xa6, 0xe5, 0x8d,
	0x95, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf4, 0x07, 0x0a, 0x07, 0x4f, 0x62, 0x73,
	0x42, 0x69, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x2a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x32, 0x03, 0xe5,
	0xb9, 0xb4, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x25, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x2a, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x32, 0x03, 0xe6, 0x9c, 0x88, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x3a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x32, 0x0f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe5, 0xb7, 0xa6, 0xe5, 0x8c, 0xba, 0xe9, 0x97,
	0xb4, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f,
	0x92, 0x41, 0x1c, 0x2a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0f,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe5, 0x8f, 0xb3, 0xe5, 0x8c, 0xba, 0xe9, 0x97, 0xb4, 0x52,
	0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x32, 0x0e, 0xe8, 0xbf, 0x90, 0xe8, 0x90, 0xa5, 0xe4, 0xba, 0xa7, 0xe5, 0x93,
	0x81, 0x49, 0x44, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x4f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x0e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x12,
	0xe8, 0xbf, 0x90, 0xe8, 0x90, 0xa5, 0xe4, 0xba, 0xa7, 0xe5, 0x93, 0x81, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84,
	0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92,
	0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xa7, 0x84, 0xe6, 0xa0, 0xbc, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x43, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x8d, 0x95,
	0xe4, 0xbd, 0x8d, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x49, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x0c,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x11,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x11, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32,
	0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x8d, 0x95, 0xe4, 0xbb, 0xb7, 0x52, 0x11, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x3d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x0c, 0xe7, 0xbb, 0x93, 0xe7, 0xae, 0x97, 0xe9, 0x87, 0x91,
	0xe9, 0xa2, 0x9d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x69, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92,
	0x41, 0x32, 0x2a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x32, 0x1a, 0xe5, 0x88, 0x86, 0xe6, 0x91, 0x8a,
	0xe6, 0x89, 0xa3, 0xe9, 0x99, 0xa4, 0xe8, 0xbf, 0x90, 0xe8, 0x90, 0xa5, 0xe4, 0xba, 0xa7, 0xe5,
	0x93, 0x81, 0x49, 0x44, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x73, 0x0a, 0x16, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a,
	0x16, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x1e, 0xe5, 0x88, 0x86, 0xe6, 0x91, 0x8a, 0xe6,
	0x89, 0xa3, 0xe9, 0x99, 0xa4, 0xe8, 0xbf, 0x90, 0xe8, 0x90, 0xa5, 0xe4, 0xba, 0xa7, 0xe5, 0x93,
	0x81, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x8f, 0x06, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x02, 0x18, 0x40, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x18, 0xe5, 0xb8, 0x8c, 0xe6, 0x9c, 0x9b, 0xe7, 0x9a, 0x84,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe8, 0x80, 0x85, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41,
	0x24, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x17, 0xe6, 0xb6,
	0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x98, 0x01, 0x0a, 0x14, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x64, 0x92, 0x41, 0x61, 0x2a, 0x14, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x32, 0x49, 0xe6, 0x9c, 0x9f, 0xe6,
	0x9c, 0x9b, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4,
	0x87, 0xe6, 0xb1, 0xa0, 0x49, 0x44, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x2c, 0x20, 0xe8, 0x8b,
	0xa5, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0xe5, 0x88, 0x99, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0xe5, 0x9d, 0x87, 0xe5, 0x8f, 0xaf, 0xe6,
	0x8e, 0xa5, 0xe5, 0x8f, 0x97, 0x52, 0x14, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x70, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x15,
	0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6,
	0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x34, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09,
	0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73,
	0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x85, 0x8d, 0xe9, 0xa2, 0x9d, 0x52, 0x06,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x3a, 0x5e, 0x92, 0x41, 0x5b, 0x0a, 0x59, 0x2a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x32, 0x15, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8,
	0x80, 0x85, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2,
	0x01, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xd2, 0x01, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x22, 0xcb, 0x02, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7,
	0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x58, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x42, 0x23, 0x92, 0x41,
	0x20, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe7,
	0x9a, 0x84, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x36, 0x92, 0x41, 0x33, 0x0a, 0x31, 0x2a, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x32, 0x15, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22,
	0xb3, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x6d, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x24, 0x2a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x32, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15,
	0x10, 0x02, 0x18, 0x1e, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x3a, 0x2c, 0x92, 0x41, 0x29, 0x0a, 0x27, 0x2a, 0x14,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x32, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0xb6, 0x88, 0xe8,
	0xb4, 0xb9, 0xe8, 0x80, 0x85, 0x22, 0xc8, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5b,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x42, 0x26, 0x92,
	0x41, 0x23, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1b, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x33, 0x92, 0x41, 0x30,
	0x0a, 0x2e, 0x2a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x32, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0x22, 0xd5, 0x03, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x32, 0x0c, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe9, 0xa1, 0xba, 0xe5, 0xba,
	0x8f, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x32, 0x30, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8,
	0xba, 0xe5, 0x80, 0x92, 0xe5, 0xba, 0x8f, 0x2c, 0x20, 0xe4, 0xbb, 0x85, 0xe5, 0x9c, 0xa8, 0x73,
	0x6f, 0x72, 0x74, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe6, 0x97, 0xb6, 0xe6, 0x9c, 0x89, 0xe6,
	0x95, 0x88, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x2e, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x09, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x2a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x32, 0x06, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe6, 0xb6, 0x88,
	0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x32, 0x0f, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x8f, 0x90, 0xe4, 0xbe,
	0x9b, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x45,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x32, 0x17, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0xe6, 0x89, 0x80, 0xe5,
	0xb1, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x3a, 0x31, 0x92, 0x41, 0x2e, 0x0a, 0x2c, 0x2a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x32, 0x13, 0x6c, 0x69, 0x73, 0x74, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8,
	0x80, 0x85, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xc8, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x5b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1b, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a,
	0x32, 0x92, 0x41, 0x2f, 0x0a, 0x2d, 0x2a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x32, 0x13,
	0x6c, 0x69, 0x73, 0x74, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0x22, 0xcd, 0x05, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x4e, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x10,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44,
	0x32, 0x0b, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0x49, 0x44, 0x52, 0x10, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9,
	0xe8, 0x80, 0x85, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x43, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x32, 0x18, 0xe5, 0xb8, 0x8c, 0xe6, 0x9c, 0x9b, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4,
	0x87, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x17, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8,
	0x80, 0x85, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x91, 0x01, 0x0a, 0x14,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x2a, 0x14, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x32, 0x25, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4,
	0xe4, 0xb8, 0xba, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0x52, 0x14, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12,
	0x53, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x15, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x06, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x73, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x85, 0x8d, 0xe9, 0xa2,
	0x9d, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x3a, 0x38, 0x92, 0x41, 0x35, 0x0a, 0x33,
	0x2a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x32, 0x18, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0x22, 0x3d, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x1b, 0x92, 0x41, 0x18, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x10, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x8b, 0x01, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x48, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x9a, 0x01, 0x0a, 0x0b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x52, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5f, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xce,
	0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x58, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0x9a, 0x84, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x3a, 0x39, 0x92, 0x41, 0x36, 0x0a, 0x34, 0x2a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x32, 0x18, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0xb6, 0x88,
	0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22,
	0xc2, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x6d, 0x0a, 0x10, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x24, 0x2a, 0x10, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x32, 0x10, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0xfa, 0x42,
	0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x1e, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x3a, 0x38, 0x92, 0x41, 0x35, 0x0a,
	0x33, 0x2a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x32, 0x18, 0xe5, 0x88, 0xa0, 0xe9,
	0x99, 0xa4, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0xe7, 0x9a, 0x84, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0x22, 0xf4, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x3a, 0x39, 0x92, 0x41, 0x36, 0x0a, 0x34, 0x2a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x32, 0x18, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8,
	0x80, 0x85, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xb3, 0x03, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x53, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a,
	0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49,
	0x44, 0x32, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x49, 0x44, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x03, 0x6e, 0x75, 0x6d, 0x32, 0x15, 0xe6, 0xb6,
	0x88, 0xe8, 0xb4, 0xb9, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x95, 0xb0,
	0xe9, 0x87, 0x8f, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x83, 0x01, 0x0a, 0x06, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x42, 0x4b, 0x92, 0x41, 0x48, 0x2a, 0x06,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x32, 0x3e, 0xe5, 0xaf, 0xb9, 0xe6, 0xb6, 0x88, 0xe8, 0xb4,
	0xb9, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0x9a, 0x84, 0xe8, 0xa6, 0x81, 0xe6, 0xb1, 0x82,
	0x2c, 0x20, 0xe6, 0x8c, 0x89, 0xe9, 0x98, 0x9f, 0xe5, 0x88, 0x97, 0xe9, 0xa1, 0xba, 0xe5, 0xba,
	0x8f, 0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba, 0xa7, 0xe5, 0xb0, 0x9d, 0xe8, 0xaf, 0x95,
	0xe6, 0xbb, 0xa1, 0xe8, 0xb6, 0xb3, 0x52, 0x06, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x12, 0x34,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32,
	0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x3a, 0x5b, 0x92, 0x41, 0x58, 0x0a, 0x56, 0x2a, 0x10, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x32, 0x15, 0xe6,
	0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0x9a, 0x84, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0xd2, 0x01, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0xd2, 0x01, 0x03, 0x6e, 0x75, 0x6d, 0xd2, 0x01, 0x06,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0xd2, 0x01, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x22, 0xad, 0x02, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x3a, 0x2f, 0x92, 0x41, 0x2c, 0x0a, 0x2a, 0x2a, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x32, 0x15, 0xe6, 0xb6, 0x88, 0xe8,
	0xb4, 0xb9, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0x22, 0xb1, 0x03, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x6d, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x41, 0x92, 0x41, 0x24, 0x2a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x32, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18,
	0x1e, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d,
	0x2b, 0x24, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x32, 0x12, 0xe8, 0xa6, 0x81, 0xe5, 0xbd, 0x92, 0xe8, 0xbf, 0x98, 0xe7, 0x9a,
	0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52,
	0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd,
	0x9c, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x5e,
	0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x35, 0x2a, 0x0d, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x32, 0x24, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4,
	0x96, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0x84, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x44, 0x2c, 0x20, 0x79, 0x75, 0x6e, 0x74, 0x69, 0xe4, 0xb8, 0x93, 0xe7, 0x94, 0xa8, 0x52,
	0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x3a, 0x55,
	0x92, 0x41, 0x52, 0x0a, 0x50, 0x2a, 0x0f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x32, 0x15, 0xe5, 0xbd, 0x92, 0xe8, 0xbf, 0x98, 0xe8, 0xae,
	0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xd2, 0x01, 0x10,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44,
	0xd2, 0x01, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0xd2, 0x01, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xab, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x0c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x3a, 0x2e, 0x92, 0x41, 0x2b, 0x0a, 0x29, 0x2a, 0x10, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x32, 0x15, 0xe5, 0xbd,
	0x92, 0xe8, 0xbf, 0x98, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0x22, 0x29, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1b, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92,
	0x41, 0x08, 0x2a, 0x02, 0x49, 0x44, 0x32, 0x02, 0x49, 0x44, 0x52, 0x02, 0x49, 0x44, 0x22, 0xc7,
	0x08, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x12, 0x5a, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x23, 0xe6, 0x9c, 0xba, 0xe5, 0x9e,
	0x8b, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2,
	0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x03,
	0x63, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x03,
	0x63, 0x70, 0x75, 0x32, 0x0f, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x43, 0x50, 0x55, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x65, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x03, 0x6d, 0x65, 0x6d,
	0x32, 0x12, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x86, 0x85, 0xe5, 0xad, 0x98, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x6d, 0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x03, 0x67, 0x70, 0x75,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x03, 0x67, 0x70, 0x75,
	0x32, 0x0f, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x47, 0x50, 0x55, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x63, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x44, 0x69, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0a, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x32, 0x15, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87,
	0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe7, 0x9b, 0x98, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x60, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x42, 0x25, 0x92, 0x41, 0x22,
	0x2a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x32, 0x15, 0xe8, 0xae, 0xbe,
	0xe5, 0xa4, 0x87, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x64, 0x0a,
	0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x32,
	0x18, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0xae, 0x89,
	0xe5, 0x85, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xae,
	0xbe, 0xe5, 0xa4, 0x87, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x76, 0x70, 0x63, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x03, 0x76, 0x70, 0x63, 0x32, 0x12,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0x56, 0x50, 0x43, 0x20,
	0x49, 0x44, 0x52, 0x03, 0x76, 0x70, 0x63, 0x12, 0x54, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5a, 0x6f,
	0x6e, 0x65, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x32, 0x18, 0xe8,
	0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0x8c, 0xba, 0xe5, 0x9f,
	0x9f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x3b, 0x0a,
	0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x49, 0x44, 0x32, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x52, 0x0a,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x08, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x44, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x2a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x73, 0x32, 0x08, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x44, 0x73, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x73, 0x12,
	0x37, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x03, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x44, 0x73, 0x32, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x52, 0x09, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x12, 0x63, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x32, 0x12, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6,
	0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x72, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32,
	0x12, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0xa3, 0x81, 0xe7, 0x9b, 0x98, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x32, 0x12, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0xa3, 0x81, 0xe7, 0x9b, 0x98,
	0xe5, 0xa4, 0xa7, 0xe5, 0xb0, 0x8f, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xda, 0x01, 0x0a,
	0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x2b,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe9, 0x85, 0x8d, 0xe9, 0xa2, 0x9d, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x49, 0x44, 0x32, 0x0b, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x49,
	0x44, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12,
	0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92,
	0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe9, 0x85, 0x8d, 0xe9, 0xa2, 0x9d,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x05,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x15, 0x92, 0x41, 0x12,
	0x2a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x32, 0x09, 0xe9, 0x85, 0x8d, 0xe9, 0xa2, 0x9d, 0xe9,
	0x87, 0x8f, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x22, 0x8a, 0x07, 0x0a, 0x0e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x02, 0x69,
	0x64, 0x32, 0x0b, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0x49, 0x44, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe6, 0xb6, 0x88,
	0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x32, 0x30, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x8f, 0x90, 0xe4, 0xbe,
	0x9b, 0xe6, 0x96, 0xb9, 0x2c, 0x20, 0xe5, 0xa6, 0x82, 0xe8, 0x87, 0xaa, 0xe7, 0xa0, 0x94, 0xe4,
	0xba, 0x91, 0x2c, 0x20, 0xe8, 0x85, 0xbe, 0xe8, 0xae, 0xaf, 0xe4, 0xba, 0x91, 0x2c, 0x20, 0x41,
	0x57, 0x53, 0xe7, 0xad, 0x89, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x48, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x32, 0x1a, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe8, 0xaf, 0x89, 0xe6, 0xb1, 0x82,
	0xe6, 0x96, 0xb9, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x98, 0x01, 0x0a, 0x14, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x64, 0x92, 0x41, 0x61, 0x2a, 0x14, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x32, 0x49, 0xe6, 0x9c, 0x9f, 0xe6, 0x9c, 0x9b, 0xe5, 0x85, 0xb3, 0xe8, 0x81,
	0x94, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0x49, 0x44, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x2c, 0x20, 0xe8, 0x8b, 0xa5, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba,
	0xe5, 0x88, 0x99, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6,
	0xb1, 0xa0, 0xe5, 0x9d, 0x87, 0xe5, 0x8f, 0xaf, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0x97, 0x52, 0x14,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x67, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x15,
	0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6,
	0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4a, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x32, 0x19, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x2c, 0x20, 0x75, 0x74, 0x63, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2a, 0x92,
	0x41, 0x27, 0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x19,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0x20, 0x75, 0x74,
	0x63, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x73, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe9, 0x85, 0x8d, 0xe9, 0xa2, 0x9d,
	0x52, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x12, 0x51, 0x0a, 0x06, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x32, 0x0c, 0xe9, 0x85, 0x8d, 0xe9, 0xa2, 0x9d, 0xe7, 0x94, 0xa8,
	0xe9, 0x87, 0x8f, 0x52, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf0, 0x09, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x37,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8,
	0x80, 0x85, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x02, 0x18,
	0x40, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x2a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x30, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87,
	0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe6, 0x96, 0xb9, 0x2c, 0x20, 0xe5, 0xa6, 0x82, 0xe8, 0x87,
	0xaa, 0xe7, 0xa0, 0x94, 0xe4, 0xba, 0x91, 0x2c, 0x20, 0xe8, 0x85, 0xbe, 0xe8, 0xae, 0xaf, 0xe4,
	0xba, 0x91, 0x2c, 0x20, 0x41, 0x57, 0x53, 0xe7, 0xad, 0x89, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x0a, 0x62,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x18, 0xe8, 0xae, 0xbe, 0xe5, 0xa4,
	0x87, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x6a, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x34,
	0x92, 0x41, 0x31, 0x2a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x32, 0x18, 0xe5, 0x85, 0x81, 0xe8,
	0xae, 0xb8, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe6, 0xb6, 0x88, 0xe8, 0xb4,
	0xb9, 0xe8, 0x80, 0x85, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x6c, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x22, 0x92,
	0x41, 0x1f, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x15, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0xa0, 0x87, 0xe7, 0xad,
	0xbe, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15,
	0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4,
	0xbd, 0x9c, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x3b, 0x0a, 0x08, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x53, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x08, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x53,
	0x32, 0x10, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x52, 0x08, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x53, 0x12, 0x68, 0x0a, 0x08,
	0x61, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1f, 0x92, 0x41, 0x1c,
	0x2a, 0x08, 0x61, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x10, 0x61, 0x75, 0x74, 0x6f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x08, 0x61, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x2a, 0x08, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x32, 0x31, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62,
	0x65, 0x20, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x0f, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x32, 0x12, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x7f, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x26, 0x92, 0x41,
	0x23, 0x2a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x14,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x5b, 0x92, 0x41,
	0x58, 0x0a, 0x56, 0x2a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x32, 0x15, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2,
	0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0xd2, 0x01, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xd2, 0x01,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xbb, 0x02, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x50, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x14, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe7,
	0x9a, 0x84, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x3a, 0x32, 0x92, 0x41, 0x2f, 0x0a, 0x2d, 0x2a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x32, 0x15, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1,
	0xa0, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x5d, 0x0a, 0x0c,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x32, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x1e, 0x32, 0x0f, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0c, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x3a, 0x28, 0x92, 0x41, 0x25,
	0x0a, 0x23, 0x2a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x71, 0x32, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0x22, 0xb8, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x53, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x17, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a,
	0x2f, 0x92, 0x41, 0x2c, 0x0a, 0x2a, 0x2a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x32, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0x22, 0xbc, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x5d, 0x0a, 0x0c, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x39, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x49, 0x44, 0x32, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49,
	0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x1e, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0c, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x2a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x32, 0x06, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x15, 0x92,
	0x41, 0x12, 0x2a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x30, 0x92,
	0x41, 0x2d, 0x0a, 0x2b, 0x2a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x32, 0x12, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x22,
	0xcc, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x1d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x88, 0xb0, 0xe7,
	0x9a, 0x84, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x20, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x33, 0x92, 0x41, 0x30, 0x0a, 0x2e,
	0x2a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0x14, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87,
	0xe6, 0xb1, 0xa0, 0x65, 0x76, 0x65, 0x6e, 0x74, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xe5,
	0x02, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x44, 0x32, 0x08, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x07, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x32, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x52,
	0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x2a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x32, 0x0e, 0xe6,
	0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0xe7, 0x9a, 0x84, 0x49, 0x44, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x2a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x32, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x50, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x12, 0x3a,
	0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x32, 0x0c, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1c, 0x92,
	0x41, 0x19, 0x2a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe4,
	0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd0, 0x04, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x32, 0x0c, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe9, 0xa1, 0xba,
	0xe5, 0xba, 0x8f, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x32, 0x30, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe4, 0xb8, 0xba, 0xe5, 0x80, 0x92, 0xe5, 0xba, 0x8f, 0x2c, 0x20, 0xe4, 0xbb, 0x85, 0xe5, 0x9c,
	0xa8, 0x73, 0x6f, 0x72, 0x74, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe6, 0x97, 0xb6, 0xe6, 0x9c,
	0x89, 0xe6, 0x95, 0x88, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x2e, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x09, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9,
	0x87, 0x8f, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x2a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x06, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe8,
	0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x0f, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x8f, 0x90,
	0xe4, 0xbe, 0x9b, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x31, 0x0a, 0x06, 0x6f, 0x6e, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x6f, 0x6e, 0x73, 0x61, 0x6c, 0x65, 0x32, 0x0c, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x9c, 0xa8, 0xe5, 0x94, 0xae, 0x52, 0x06, 0x6f, 0x6e, 0x73,
	0x61, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x32, 0x06, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x03, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49,
	0x44, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x2b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x42, 0x13, 0x92,
	0x41, 0x10, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x06, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x2d, 0x92, 0x41, 0x2a, 0x0a,
	0x28, 0x2a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x71, 0x32, 0x13, 0x6c, 0x69, 0x73, 0x74, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87,
	0xe6, 0xb1, 0xa0, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xb8, 0x02, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x53, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x17, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x88, 0xb0,
	0xe7, 0x9a, 0x84, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x3a, 0x2e, 0x92, 0x41, 0x2b, 0x0a, 0x29, 0x2a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x32,
	0x13, 0x6c, 0x69, 0x73, 0x74, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0x22, 0x8a, 0x09, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x42, 0x0a, 0x0c,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x32, 0x0b, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0,
	0x49, 0x44, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44,
	0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe8, 0xae, 0xbe, 0xe5, 0xa4,
	0x87, 0xe6, 0xb1, 0xa0, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x43, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x32, 0x18, 0xe5, 0xb8, 0x8c, 0xe6, 0x9c, 0x9b, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x0a,
	0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x18, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x87, 0x01, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x34, 0x92,
	0x41, 0x31, 0x2a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x32, 0x18, 0xe5, 0x85, 0x81, 0xe8, 0xae,
	0xb8, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9,
	0xe8, 0x80, 0x85, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x32, 0x15, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x08, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x53, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x08, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x53, 0x32, 0x10, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x61, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x08, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x53, 0x12, 0x68, 0x0a, 0x08, 0x61, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x08, 0x61, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x32, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0xe9, 0x85, 0x8d, 0xe7,
	0xbd, 0xae, 0x52, 0x08, 0x61, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x40,
	0x92, 0x41, 0x3d, 0x2a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x32, 0x31, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x20, 0x63, 0x61, 0x6e,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x32, 0x0f, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x2a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x32, 0x09, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0xe8, 0x80, 0x85, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1c, 0x92,
	0x41, 0x19, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x0f, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x66, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x14, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87,
	0xe6, 0xb1, 0xa0, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x34, 0x92, 0x41, 0x31,
	0x0a, 0x2f, 0x2a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x32, 0x18, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6,
	0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0x22, 0xbe, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x14, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0x9a, 0x84, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x35, 0x92, 0x41, 0x32,
	0x0a, 0x30, 0x2a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x32, 0x18, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0x22, 0xaa, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x5d, 0x0a, 0x0c, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x39, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x49, 0x44, 0x32, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49,
	0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x1e, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0c, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x3a, 0x34, 0x92, 0x41, 0x31, 0x0a, 0x2f,
	0x2a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x32, 0x18, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xae, 0xbe,
	0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22,
	0xec, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7,
	0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x35, 0x92, 0x41, 0x32, 0x0a, 0x30, 0x2a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x32, 0x18, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xb0,
	0x02, 0x0a, 0x1b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x44,
	0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x02, 0x69, 0x64, 0x32, 0x17, 0xe8,
	0xa6, 0x81, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4,
	0x87, 0xe6, 0xb1, 0xa0, 0x49, 0x44, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x49, 0x44, 0x12, 0x4e, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x1b,
	0x92, 0x41, 0x18, 0x2a, 0x02, 0x69, 0x64, 0x32, 0x12, 0xe8, 0xa6, 0x81, 0xe5, 0xaf, 0xbc, 0xe5,
	0x85, 0xa5, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x52, 0x07, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x45, 0x92, 0x41, 0x42, 0x0a,
	0x40, 0x2a, 0x1b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x32, 0x21,
	0xe5, 0xb0, 0x86, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe8,
	0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0x22, 0xc8, 0x02, 0x0a, 0x28, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x42,
	0x79, 0x42, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x12, 0x44,
	0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x02, 0x69, 0x64, 0x32, 0x17, 0xe8,
	0xa6, 0x81, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4,
	0x87, 0xe6, 0xb1, 0xa0, 0x49, 0x44, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x0a, 0x62, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x0a, 0x62,
	0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x73, 0x32, 0x1b, 0xe8, 0xa6, 0x81, 0xe5, 0xaf,
	0xbc, 0xe5, 0x85, 0xa5, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x9b, 0xba,
	0xe8, 0xb5, 0x84, 0xe5, 0x8f, 0xb7, 0x52, 0x0a, 0x62, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x52, 0x92, 0x41, 0x4f, 0x0a, 0x4d, 0x2a,
	0x28, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x54, 0x6f,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x79, 0x42, 0x6b, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x32, 0x21, 0xe5, 0xb0, 0x86, 0xe8, 0xae,
	0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87,
	0xe6, 0xb1, 0xa0, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xe4, 0x02, 0x0a,
	0x29, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x54, 0x6f,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x79, 0x42, 0x6b, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x47, 0x92, 0x41, 0x44, 0x0a,
	0x42, 0x2a, 0x29, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x79, 0x42, 0x6b,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x32, 0x15, 0xe5, 0xaf,
	0xbc, 0xe5, 0x85, 0xa5, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0x22, 0x84, 0x01, 0x0a, 0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0x10, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f,
	0xe7, 0x9a, 0x84, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x32, 0x10, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe7, 0x9a, 0x84, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0xdd, 0x02, 0x0a, 0x26, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x79, 0x42, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x4e, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27,
	0x2a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x32, 0x17,
	0xe8, 0xa6, 0x81, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0x49, 0x44, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x09, 0x62, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x09, 0x62,
	0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x32, 0x1e, 0xe8, 0xa6, 0x81, 0xe5, 0xaf, 0xbc,
	0xe5, 0x85, 0xa5, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0x9a, 0x84, 0x62,
	0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x52, 0x09, 0x62, 0x6b, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x5f, 0x92, 0x41, 0x5c, 0x0a, 0x5a,
	0x2a, 0x26, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x79, 0x42, 0x6b, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x32, 0x30, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87,
	0x62, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0xe5, 0xb0, 0x86, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1,
	0xa0, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0x85, 0x02, 0x0a, 0x1c, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x46, 0x92, 0x41, 0x43, 0x0a,
	0x41, 0x2a, 0x1c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x32,
	0x21, 0xe5, 0xb0, 0x86, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0x22, 0xa8, 0x03, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x32, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x03, 0x6b, 0x65, 0x79, 0x32, 0x0c, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x6b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x34, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x32, 0x0f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x64, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x32, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6,
	0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x2e, 0x92,
	0x41, 0x2b, 0x0a, 0x29, 0x2a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x32, 0x14, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xb1, 0x02,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x1c, 0x92, 0x41,
	0x19, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x11, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe7,
	0x9a, 0x84, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x3a, 0x2f, 0x92, 0x41, 0x2c, 0x0a, 0x2a, 0x2a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x32, 0x14, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0x22, 0x6b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0d, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x3a, 0x2b, 0x92, 0x41, 0x28, 0x0a, 0x26, 0x2a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x32, 0x14, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xab,
	0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x4b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x11, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0x9a, 0x84,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x2c,
	0x92, 0x41, 0x29, 0x0a, 0x27, 0x2a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x32, 0x14, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0x96, 0x02, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x2b, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x2a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x32, 0x0c, 0xe6, 0x8e, 0x92, 0xe5, 0xba,
	0x8f, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x4f, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3b, 0x92, 0x41, 0x38,
	0x2a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x32, 0x30, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe5, 0x80, 0x92, 0xe5, 0xba, 0x8f, 0x2c, 0x20, 0xe4,
	0xbb, 0x85, 0xe5, 0x9c, 0xa8, 0x73, 0x6f, 0x72, 0x74, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe6,
	0x97, 0xb6, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x2e,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x16,
	0x92, 0x41, 0x13, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x09, 0xe5, 0x81, 0x8f,
	0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x28,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x12, 0x92,
	0x41, 0x0f, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x06, 0xe9, 0x95, 0xbf, 0xe5, 0xba,
	0xa6, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x2b, 0x92, 0x41, 0x28, 0x0a, 0x26, 0x2a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x32, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xaa, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0f, 0x6c,
	0x69, 0x73, 0x74, 0xe7, 0x9a, 0x84, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x3a, 0x2c, 0x92, 0x41, 0x29, 0x0a, 0x27, 0x2a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x32, 0x13, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0x22, 0xd6, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x32, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x03, 0x6b, 0x65, 0x79, 0x32, 0x0c, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x6b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x34, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x32, 0x0f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x42,
	0x1c, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x0f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0x80,
	0x85, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x2e, 0x92, 0x41, 0x2b,
	0x0a, 0x29, 0x2a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x32, 0x14, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xb1, 0x02, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x4b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x11, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0x9a, 0x84,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x2f,
	0x92, 0x41, 0x2c, 0x0a, 0x2a, 0x2a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x32, 0x14, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22,
	0x71, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0d, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x3a, 0x2e, 0x92, 0x41, 0x2b, 0x0a, 0x29, 0x2a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x32, 0x14, 0xe5, 0x88,
	0xa0, 0xe9, 0x99, 0xa4, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x22, 0xe4, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x2f, 0x92, 0x41, 0x2c, 0x0a, 0x2a, 0x2a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x32, 0x14, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xf3, 0x01, 0x0a, 0x15, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x09, 0xe6, 0x8f,
	0x90, 0xe4, 0xbe, 0x9b, 0xe5, 0x95, 0x86, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x2a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x32, 0x09, 0xe8, 0xae,
	0xa2, 0xe5, 0x8d, 0x95, 0xe5, 0x8f, 0xb7, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x3a, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x92, 0x41,
	0x3e, 0x0a, 0x3c, 0x2a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x32, 0x23, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe7, 0xbb, 0x99, 0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0x84, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22,
	0xc8, 0x02, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x0c, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x42, 0x92, 0x41, 0x3f, 0x0a, 0x3d, 0x2a, 0x16, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x32, 0x23, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x99,
	0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0x84, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xee, 0x01, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x13, 0x92, 0x41,
	0x10, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x06, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x06, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x0c, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x07,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x32, 0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x17,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x32, 0x09, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe5, 0x95, 0x86, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x03, 0x76, 0x70, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d,
	0x92, 0x41, 0x0a, 0x2a, 0x03, 0x76, 0x70, 0x63, 0x32, 0x03, 0x76, 0x70, 0x63, 0x52, 0x03, 0x76,
	0x70, 0x63, 0x12, 0x28, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x32, 0x09, 0xe5, 0x8f, 0xaf,
	0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41,
	0x10, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x06, 0xe5, 0x8c, 0xba, 0xe5, 0x9f,
	0x9f, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x3a, 0x45, 0x92, 0x41, 0x42, 0x0a, 0x40,
	0x2a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x32, 0x25, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe7, 0xbb, 0x99, 0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0x84, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0x22, 0xd0, 0x02, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5,
	0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x46, 0x92, 0x41, 0x43,
	0x0a, 0x41, 0x2a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x32, 0x25, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xbb, 0x99, 0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0x84, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0x22, 0x5f, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x32, 0x06, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0x52, 0x06, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x32, 0x06, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0x52, 0x06, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe5,
	0xad, 0x90, 0xe7, 0xbd, 0x91, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x49, 0x50, 0x4e, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x49,
	0x50, 0x4e, 0x75, 0x6d, 0x32, 0x11, 0xe5, 0x89, 0xa9, 0xe4, 0xb8, 0x8b, 0xe7, 0x9a, 0x84, 0x49,
	0x50, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x49, 0x50, 0x4e,
	0x75, 0x6d, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x4b, 0x0a, 0x0e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x32, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x3a, 0x37, 0x92, 0x41, 0x34, 0x0a, 0x32, 0x2a, 0x12, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x32, 0x1c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22,
	0xc7, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x57, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x19,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x88, 0xb0, 0xe7, 0x9a, 0x84, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a,
	0x38, 0x92, 0x41, 0x35, 0x0a, 0x33, 0x2a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x32, 0x1c, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0x99, 0x01, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x4b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x3a, 0x33, 0x92, 0x41, 0x30, 0x0a, 0x2e, 0x2a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x32, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x22, 0xc1, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x4b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x18, 0x92, 0x41,
	0x15, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x3b, 0x92, 0x41,
	0x38, 0x0a, 0x36, 0x2a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x32, 0x1c, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xbd, 0x03, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x32, 0x0c, 0xe6, 0x8e, 0x92, 0xe5,
	0xba, 0x8f, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x4f,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3b, 0x92, 0x41,
	0x38, 0x2a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x32, 0x30, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe5, 0x80, 0x92, 0xe5, 0xba, 0x8f, 0x2c, 0x20,
	0xe4, 0xbb, 0x85, 0xe5, 0x9c, 0xa8, 0x73, 0x6f, 0x72, 0x74, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a,
	0xe6, 0x97, 0xb6, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x2e, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x16, 0x92, 0x41, 0x13, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x09, 0xe5, 0x81,
	0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x28, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x12,
	0x92, 0x41, 0x0f, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x06, 0xe9, 0x95, 0xbf, 0xe5,
	0xba, 0xa6, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x6f, 0x6f,
	0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x70, 0x6f,
	0x6f, 0x6c, 0x32, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44,
	0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x03, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32,
	0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x32, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x3a, 0x37, 0x92, 0x41, 0x34, 0x0a, 0x32, 0x2a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x32, 0x1b, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xc6, 0x02, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x55, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x22,
	0x92, 0x41, 0x1f, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x17, 0x6c, 0x69, 0x73, 0x74, 0xe5,
	0x88, 0xb0, 0xe7, 0x9a, 0x84, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x38, 0x92, 0x41, 0x35, 0x0a, 0x33, 0x2a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x32, 0x1b, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0x22, 0xc6, 0x05, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x32, 0x0c, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x32, 0x30,
	0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe5,
	0x80, 0x92, 0xe5, 0xba, 0x8f, 0x2c, 0x20, 0xe4, 0xbb, 0x85, 0xe5, 0x9c, 0xa8, 0x73, 0x6f, 0x72,
	0x74, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe6, 0x97, 0xb6, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x2e, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x32, 0x09, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x32, 0x06, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x5c, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x2a,
	0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49,
	0x44, 0x32, 0x19, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x52, 0x10, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3c,
	0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x32,
	0x11, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x44, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x54, 0x0a, 0x0e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x32, 0x17, 0xe6, 0x89, 0x80, 0xe5, 0xb1,
	0x9e, 0xe7, 0x9a, 0x84, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x44, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x32, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xae, 0x8c, 0xe6, 0x88,
	0x90, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x6c,
	0x65, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1e, 0x92,
	0x41, 0x1b, 0x2a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0f, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0xe5, 0xb7, 0xa6, 0xe5, 0x8c, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x08, 0x6c,
	0x65, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a,
	0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0f, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0xe5, 0x8f, 0xb3, 0xe5, 0x8c, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x33, 0x92, 0x41, 0x30, 0x0a, 0x2e, 0x2a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x32, 0x19, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x62, 0x69,
	0x6c, 0x6c, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xbc, 0x02, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x51, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x15, 0x6c, 0x69, 0x73, 0x74, 0xe5, 0x88, 0xb0,
	0xe7, 0x9a, 0x84, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x62, 0x69, 0x6c, 0x6c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x3a, 0x34, 0x92, 0x41, 0x31, 0x0a, 0x2f, 0x2a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x32,
	0x19, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x62, 0x69, 0x6c,
	0x6c, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xb4, 0x0c, 0x0a, 0x0a, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x02, 0x69, 0x64, 0x32, 0x0b,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87,
	0xe6, 0xb1, 0xa0, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x5b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x32, 0x30, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe6, 0x96,
	0xb9, 0x2c, 0x20, 0xe5, 0xa6, 0x82, 0xe8, 0x87, 0xaa, 0xe7, 0xa0, 0x94, 0xe4, 0xba, 0x91, 0x2c,
	0x20, 0xe8, 0x85, 0xbe, 0xe8, 0xae, 0xaf, 0xe4, 0xba, 0x91, 0x2c, 0x20, 0x41, 0x57, 0x53, 0xe7,
	0xad, 0x89, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x0a,
	0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x32, 0x18, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe9,
	0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0a, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6a, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x2a, 0x15, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x32, 0x18, 0xe5, 0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94,
	0xe7, 0x9a, 0x84, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0x52, 0x15, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x22, 0x92, 0x41,
	0x1f, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x15, 0xe8, 0xae, 0xbe, 0xe5, 0xa4,
	0x87, 0xe6, 0xb1, 0xa0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2a, 0x92, 0x41,
	0x27, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x19, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0x20, 0x75, 0x74, 0x63,
	0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x19, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0x20, 0x75, 0x74, 0x63, 0x20, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x08, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x53, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x08, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x53, 0x32, 0x10, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x72, 0x52, 0x08, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x53, 0x12, 0x68, 0x0a,
	0x08, 0x61, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x75, 0x74, 0x6f,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x2a, 0x08, 0x61, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x10, 0x61, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x08, 0x61,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x61, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x08,
	0x61, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x08, 0x61, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x61, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28,
	0x2a, 0x0d, 0x61, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x32,
	0x17, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x20, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x61, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x2a, 0x08,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x32, 0x31, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x62, 0x65, 0x20, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x34,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef,
	0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe6, 0x98, 0xaf, 0xe6, 0x9c, 0xba, 0xe5, 0x99,
	0xa8, 0xe6, 0xb1, 0xa0, 0xe3, 0x80, 0x81, 0x63, 0x6d, 0x64, 0x62, 0xe6, 0xa8, 0xa1, 0xe5, 0x9d,
	0x97, 0xe7, 0xad, 0x89, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x2f, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x2f, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x32,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x76,
	0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x32, 0x14, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x8e, 0x02, 0x0a, 0x1a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21,
	0x92, 0x41, 0x1e, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7c, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x32, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0xe7,
	0xad, 0x96, 0xe7, 0x95, 0xa5, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x52, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xc9, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x02,
	0x69, 0x64, 0x32, 0x08, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x5b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x32, 0x30, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe6,
	0x96, 0xb9, 0x2c, 0x20, 0xe5, 0xa6, 0x82, 0xe8, 0x87, 0xaa, 0xe7, 0xa0, 0x94, 0xe4, 0xba, 0x91,
	0x2c, 0x20, 0xe8, 0x85, 0xbe, 0xe8, 0xae, 0xaf, 0xe4, 0xba, 0x91, 0x2c, 0x20, 0x41, 0x57, 0x53,
	0xe7, 0xad, 0x89, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x48, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x32, 0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x5c, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x12, 0xe8, 0xae, 0xbe, 0xe5, 0xa4,
	0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x32, 0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x30, 0x92, 0x41,
	0x2d, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x1f, 0xe8,
	0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x2c, 0x20, 0x75, 0x74, 0x63, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x30,
	0x92, 0x41, 0x2d, 0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32,
	0x1f, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x2c, 0x20, 0x75, 0x74, 0x63, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x1f, 0xe4,
	0xb8, 0x8a, 0xe6, 0xac, 0xa1, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x2c, 0x20, 0x75, 0x74, 0x63, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x62, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x32, 0x1f, 0xe4, 0xb8, 0x8a, 0xe6, 0xac, 0xa1, 0xe5, 0xbd, 0x92, 0xe8, 0xbf, 0x98, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0x20, 0x75, 0x74, 0x63, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41,
	0x26, 0x2a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49,
	0x44, 0x32, 0x14, 0xe4, 0xb8, 0x8a, 0xe6, 0xac, 0xa1, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8,
	0x80, 0x85, 0xe7, 0x9a, 0x84, 0x49, 0x44, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92,
	0x41, 0x21, 0x2a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44,
	0x32, 0x11, 0xe4, 0xb8, 0x8a, 0xe6, 0xac, 0xa1, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95, 0xe7, 0x9a,
	0x84, 0x49, 0x44, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x44, 0x12, 0x60, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92,
	0x41, 0x2d, 0x2a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x32, 0x17, 0xe4, 0xb8, 0x8a, 0xe6, 0xac, 0xa1, 0xe5, 0xbd,
	0x92, 0xe8, 0xbf, 0x98, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95, 0xe7, 0x9a, 0x84, 0x49, 0x44, 0x52,
	0x12, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0c,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x32, 0x0b, 0xe8, 0xae,
	0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0x49, 0x44, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x32, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x32, 0x2a, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc,
	0x8c, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe6, 0x98, 0xaf, 0xe6, 0x9c, 0xba, 0xe5, 0x99, 0xa8,
	0xe3, 0x80, 0x81, 0xe7, 0xa1, 0xac, 0xe7, 0x9b, 0x98, 0xe7, 0xad, 0x89, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x6f, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x32, 0x11, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e,
	0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5,
	0x02, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a,
	0x02, 0x69, 0x64, 0x32, 0x0e, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe4, 0xba, 0x8b, 0xe4, 0xbb,
	0xb6, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x32, 0x11, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94,
	0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x12,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe4,
	0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x12, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe5,
	0x8f, 0x91, 0xe7, 0x94, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9e, 0x0a, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x32, 0x12, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0xae,
	0x9e, 0xe4, 0xbe, 0x8b, 0xe6, 0xa0, 0x87, 0xe8, 0xae, 0xb0, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x07, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x50, 0x32, 0x11, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x86, 0x85, 0xe7, 0xbd,
	0x91, 0xe4, 0xb8, 0xbb, 0x49, 0x50, 0x52, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x12,
	0x5a, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x23, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0x2c,
	0x20, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x63,
	0x70, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x03, 0x63,
	0x70, 0x75, 0x32, 0x0f, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x43, 0x50, 0x55, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x65, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x03, 0x6d, 0x65, 0x6d, 0x32,
	0x12, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x86, 0x85, 0xe5, 0xad, 0x98, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x03, 0x6d, 0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x03, 0x67, 0x70, 0x75, 0x32,
	0x0f, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x47, 0x50, 0x55, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x5f, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x32, 0x23, 0xe8, 0xae, 0xbe,
	0xe5, 0xa4, 0x87, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba,
	0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x64, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x08,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x32, 0x18, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87,
	0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0xae, 0x89, 0xe5, 0x85, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe9, 0x95, 0x9c,
	0xe5, 0x83, 0x8f, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x2e, 0x0a, 0x03, 0x76, 0x70, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92,
	0x41, 0x19, 0x2a, 0x03, 0x76, 0x70, 0x63, 0x32, 0x12, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6,
	0x89, 0x80, 0xe5, 0xb1, 0x9e, 0x56, 0x50, 0x43, 0x20, 0x49, 0x44, 0x52, 0x03, 0x76, 0x70, 0x63,
	0x12, 0x58, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x40, 0x92, 0x41, 0x3d, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x33, 0xe8,
	0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0x8c, 0xba, 0xe5, 0x9f,
	0x9f, 0x2c, 0x20, 0xe4, 0xbe, 0x8b, 0xe5, 0xa6, 0x82, 0xe5, 0xb9, 0xbf, 0xe5, 0xb7, 0x9e, 0x2c,
	0x20, 0xe6, 0xb7, 0xb1, 0xe5, 0x9c, 0xb3, 0x2c, 0x20, 0xe5, 0x8a, 0xa0, 0xe5, 0xb7, 0x9e, 0xe7,
	0xad, 0x89, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41,
	0x35, 0x2a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x32, 0x29, 0xe5, 0xae, 0x9e,
	0xe4, 0xbe, 0x8b, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe5, 0xaf, 0x86, 0xe7,
	0xa0, 0x81, 0x2c, 0x20, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c,
	0xe8, 0xa7, 0xa3, 0xe5, 0xaf, 0x86, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x63, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73,
	0x6b, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69,
	0x73, 0x6b, 0x32, 0x15, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f,
	0xe7, 0x9b, 0x98, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x60, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73,
	0x6b, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x69, 0x73, 0x6b, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x44, 0x69, 0x73, 0x6b, 0x73, 0x32, 0x15, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe7, 0x9b, 0x98, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x07, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x32, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x52,
	0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1b, 0x92, 0x41,
	0x18, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x0a, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a,
	0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x32, 0x0b, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a,
	0x2a, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x0b, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xf4, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x15, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x89, 0x80,
	0xe5, 0xb1, 0x9e, 0xe5, 0xae, 0x89, 0xe5, 0x85, 0xa8, 0xe7, 0xbb, 0x84, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x49, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x1b, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x89,
	0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0xae, 0x89, 0xe5, 0x85, 0xa8, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5e,
	0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x2a, 0x10, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32,
	0x1b, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0xae, 0x89,
	0xe5, 0x85, 0xa8, 0xe7, 0xbb, 0x84, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x10, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x64,
	0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41,
	0x0f, 0x2a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x06, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x32, 0x0c, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x32, 0x12, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9f, 0x9f, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x32, 0x15, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x89, 0x80,
	0xe5, 0xb1, 0x9e, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0x52, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x32,
	0x12, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe5, 0xad, 0x90,
	0xe7, 0xbd, 0x91, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0xca, 0x0c, 0x0a, 0x0c,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x02, 0x69,
	0x64, 0x32, 0x08, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x4e, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x10,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44,
	0x32, 0x0b, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0x49, 0x44, 0x52, 0x10, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x53, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x1f, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x88,
	0xb0, 0xe8, 0xbe, 0xbe, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0x20, 0x75, 0x74, 0x63, 0x20,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x19, 0xe5, 0xae, 0x8c, 0xe6,
	0x88, 0x90, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0x20, 0x75, 0x74, 0x63, 0x20, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xae, 0xb0, 0xe5,
	0xbd, 0x95, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x0c, 0xe8, 0xae, 0xb0,
	0xe5, 0xbd, 0x95, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x45, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x1d, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20,
	0xe5, 0xa6, 0x82, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe5, 0x8e, 0x9f, 0xe5, 0x9b, 0xa0, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x0f,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x32,
	0x14, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x31,
	0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0x92, 0x41, 0x1c,
	0x2a, 0x03, 0x6e, 0x75, 0x6d, 0x32, 0x15, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe7, 0x9a, 0x84,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x03, 0x6e, 0x75,
	0x6d, 0x12, 0x86, 0x01, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x42, 0x4c, 0x92, 0x41, 0x49, 0x2a, 0x07, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x73, 0x32, 0x3e, 0xe5, 0xaf, 0xb9, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe7, 0x9a, 0x84, 0xe8, 0xa6, 0x81, 0xe6, 0xb1, 0x82, 0x2c, 0x20, 0xe6, 0x8c, 0x89,
	0xe9, 0x98, 0x9f, 0xe5, 0x88, 0x97, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f, 0xe4, 0xbc, 0x98, 0xe5,
	0x85, 0x88, 0xe7, 0xba, 0xa7, 0xe5, 0xb0, 0x9d, 0xe8, 0xaf, 0x95, 0xe6, 0xbb, 0xa1, 0xe8, 0xb6,
	0xb3, 0x52, 0x07, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x05,
	0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x32, 0x12, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe7, 0x9a, 0x84,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x12, 0x49, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x0c, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x32, 0x12, 0xe9, 0x80, 0x89, 0xe6, 0x8b,
	0xa9, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0x52, 0x0c, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x4a, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x2a, 0x92, 0x41, 0x27, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x32, 0x19, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0x20,
	0x75, 0x74, 0x63, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2a, 0x92, 0x41, 0x27,
	0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x19, 0xe6, 0x9b,
	0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0x20, 0x75, 0x74, 0x63, 0x20,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x7f, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x24,
	0x92, 0x41, 0x21, 0x2a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x32, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x20, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x61, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x32, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x76, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x24, 0x92, 0x41,
	0x21, 0x2a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x12,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x20, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x4f, 0x0a, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x0c, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x32, 0x18, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94,
	0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0xe5, 0xbf, 0xab, 0xe7,
	0x85, 0xa7, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x12, 0x33, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x32, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0x41, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xea, 0x07, 0x0a, 0x0a, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x02, 0x69, 0x64, 0x32, 0x08, 0xe8, 0xb4,
	0xa6, 0xe5, 0x8d, 0x95, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41,
	0x23, 0x2a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x32, 0x17, 0xe8, 0xb4, 0xa6,
	0xe5, 0x8d, 0x95, 0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0x49, 0x44, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x4e,
	0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x10, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x32,
	0x0b, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0x49, 0x44, 0x52, 0x10, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x12, 0x5b,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a,
	0x12, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x32, 0x12, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x32, 0x0c, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x59, 0x0a,
	0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x12, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x32, 0x12, 0xe5, 0xbd, 0x92, 0xe8, 0xbf, 0x98, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1d, 0x92, 0x41,
	0x1a, 0x2a, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5,
	0xbd, 0x92, 0xe8, 0xbf, 0x98, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x08,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x32, 0x18, 0xe8, 0xb4, 0xa6, 0xe5, 0x8d, 0x95,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xb7, 0xb2, 0xe7, 0xbb, 0x8f, 0xe5, 0xae, 0x8c, 0xe6,
	0x88, 0x90, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x7d, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x69, 0x6c,
	0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0e, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x0f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x54, 0x0a, 0x0e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x32, 0x17, 0xe8, 0xb4, 0xa6, 0xe5, 0x8d, 0x95,
	0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95, 0x49,
	0x44, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x44, 0x12, 0x5a, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x32, 0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x1a, 0x41, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc8, 0x03, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0d, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92,
	0x41, 0x13, 0x2a, 0x03, 0x6b, 0x65, 0x79, 0x32, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x20, 0x6b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x32, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x5b, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x32, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4a, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x32, 0x19, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x2c, 0x20, 0x75, 0x74, 0x63, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2a, 0x92,
	0x41, 0x27, 0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x19,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0x20, 0x75, 0x74,
	0x63, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xbd, 0x04, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x02, 0x18, 0x40, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x32, 0x15, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x7d, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x15,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6,
	0xb3, 0xa8, 0xe8, 0xa7, 0xa3, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x32, 0x06, 0xe6, 0xb3, 0xa8, 0xe9, 0x87, 0x8a, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a,
	0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x51, 0x92,
	0x41, 0x4e, 0x0a, 0x4c, 0x2a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x32, 0x15, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xd2, 0x01, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x22, 0xb8, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x0d, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x70, 0x6f, 0x6f,
	0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x32, 0x92, 0x41, 0x2f, 0x0a, 0x2d, 0x2a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x32, 0x15, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0x80, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x3a, 0x39, 0x92, 0x41, 0x36, 0x0a, 0x34, 0x2a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x32,
	0x1d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x28, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0x29, 0x22, 0xb6,
	0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0d,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x3a, 0x32, 0x92, 0x41, 0x2f, 0x0a, 0x2d, 0x2a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x32, 0x15, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1,
	0xa0, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0x84, 0x05, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x02, 0x69, 0x64, 0x32, 0x0b, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6,
	0xb1, 0xa0, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0x92, 0x41, 0x11, 0x2a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x06, 0xe5,
	0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x65,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x15, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1,
	0xa0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x74, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x15, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6,
	0xb1, 0xa0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x2a, 0x92, 0x41, 0x27, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x32, 0x19, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0x20,
	0x75, 0x74, 0x63, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2a, 0x92, 0x41, 0x27,
	0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x19, 0xe6, 0x9b,
	0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0x20, 0x75, 0x74, 0x63, 0x20,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e,
	0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa1,
	0x02, 0x0a, 0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49,
	0x44, 0x32, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02,
	0x18, 0x1e, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d,
	0x5d, 0x2b, 0x24, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe8, 0x80, 0x85, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x47, 0x92, 0x41, 0x44, 0x0a, 0x42,
	0x2a, 0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x32, 0x1b, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82,
	0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0xd2, 0x01, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x22, 0xab, 0x02, 0x0a, 0x12, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x47, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0d, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x3a, 0x2d, 0x92, 0x41, 0x2a, 0x0a, 0x28, 0x2a, 0x12, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x32, 0x12, 0xe5, 0xaf,
	0xbc, 0xe5, 0x85, 0xa5, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0x22, 0xbf, 0x07, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x02,
	0x69, 0x64, 0x32, 0x08, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x36, 0x0a, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x32,
	0x0e, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0x49, 0x50, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52,
	0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x12, 0x3e, 0x0a, 0x09, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x50, 0x76, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x76, 0x36, 0x32, 0x10, 0xe5, 0x86, 0x85,
	0xe7, 0xbd, 0x91, 0x49, 0x50, 0x76, 0x36, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x09, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x76, 0x36, 0x12, 0x56, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x42, 0x32,
	0x92, 0x41, 0x2f, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x32, 0x1f, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a,
	0x20, 0xe5, 0xa6, 0x82, 0x43, 0x56, 0x4d, 0x2c, 0x20, 0xe7, 0x89, 0xa9, 0xe7, 0x90, 0x86, 0xe6,
	0x9c, 0xba, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x5d, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a,
	0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x32, 0x1a, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0x3a,
	0x20, 0xe5, 0xa6, 0x82, 0xe4, 0xba, 0x91, 0xe6, 0xa2, 0xaf, 0xe7, 0xad, 0x89, 0x52, 0x10, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x2b, 0x0a, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x32, 0x06, 0x70, 0x6f,
	0x6f, 0x6c, 0x49, 0x44, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x5e, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x32, 0x12, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0xa0,
	0x87, 0xe7, 0xad, 0xbe, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x6d, 0x0a, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1f, 0x92,
	0x41, 0x1c, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x12, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0xb3, 0xa8, 0xe8, 0xa7, 0xa3, 0x52, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x2a, 0x92, 0x41, 0x27, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x32, 0x19, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0x20,
	0x75, 0x74, 0x63, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2a, 0x92, 0x41, 0x27,
	0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x19, 0xe6, 0x9b,
	0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0x20, 0x75, 0x74, 0x63, 0x20,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xa2, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x42, 0x98, 0x01, 0x92, 0x41, 0x94, 0x01, 0x2a, 0x06, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0x32, 0x89, 0x01, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x2c, 0x20, 0xe7,
	0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe5, 0x88, 0x9d, 0xe5, 0xa7,
	0x8b, 0xe6, 0x80, 0x81, 0x28, 0x49, 0x4e, 0x49, 0x54, 0x29, 0x2c, 0x20, 0x49, 0x44, 0x4c, 0x45,
	0x28, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb2, 0xef, 0xbc, 0x8c, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80,
	0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe8, 0xa2, 0xab, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe7,
	0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x29, 0x2c, 0x20, 0xe5, 0xb7, 0xb2, 0xe7, 0xbb,
	0x8f, 0xe4, 0xb8, 0x8a, 0xe6, 0x9e, 0xb6, 0x28, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x44,
	0x29, 0x2c, 0x20, 0xe5, 0xb7, 0xb2, 0xe7, 0xbb, 0x8f, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0x2f,
	0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb2, 0x28, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x45, 0x44, 0x29,
	0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x42, 0x2a, 0x92, 0x41, 0x27,
	0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x19, 0xe6, 0x9b,
	0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0x20, 0x75, 0x74, 0x63, 0x20,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20,
	0x2a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x32, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x43, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x32, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x47,
	0x0a, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x0d, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x32, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0xd0, 0x03, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x06, 0x70,
	0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x10,
	0x2a, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x32, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44,
	0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x1e, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c,
	0x49, 0x44, 0x12, 0x4f, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x0a, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x1e, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe5,
	0x8f, 0xaa, 0xe8, 0x83, 0xbd, 0xe8, 0xa2, 0xab, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe7, 0x9a,
	0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x6c, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x92, 0x41,
	0x3f, 0x2a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x49, 0x44, 0x32, 0x2c, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe5, 0x8f, 0xaa, 0xe8, 0x83, 0xbd,
	0xe8, 0xa2, 0xab, 0xe7, 0x89, 0xb9, 0xe5, 0xae, 0x9a, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x7c, 0x0a, 0x13, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4a,
	0x92, 0x41, 0x47, 0x2a, 0x13, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x32, 0x30, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4,
	0xe5, 0x8f, 0xaa, 0xe8, 0x83, 0xbd, 0xe8, 0xa2, 0xab, 0xe7, 0x89, 0xb9, 0xe5, 0xae, 0x9a, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0xe6, 0xb6, 0x88, 0xe8, 0xb4,
	0xb9, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0x52, 0x13, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x3a,
	0x39, 0x92, 0x41, 0x36, 0x0a, 0x34, 0x2a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x32, 0x1d, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x28, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0x29, 0x22, 0xf3, 0x02, 0x0a, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42,
	0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x06, 0x70, 0x6f, 0x6f, 0x6c,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x70,
	0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x32, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0xfa, 0x42, 0x17,
	0x72, 0x15, 0x10, 0x02, 0x18, 0x1e, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12,
	0x2b, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92,
	0x41, 0x14, 0x2a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x32, 0x0c, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f,
	0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x32, 0x30, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe5, 0x80, 0x92, 0xe5, 0xba, 0x8f, 0x2c, 0x20, 0xe4, 0xbb,
	0x85, 0xe5, 0x9c, 0xa8, 0x73, 0x6f, 0x72, 0x74, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe6, 0x97,
	0xb6, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x2e, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x16, 0x92,
	0x41, 0x13, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x09, 0xe5, 0x81, 0x8f, 0xe7,
	0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x28, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x12, 0x92, 0x41,
	0x0f, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x06, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x37, 0x92, 0x41, 0x34, 0x0a, 0x32, 0x2a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x32, 0x1b, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0x22, 0x85, 0x03, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49,
	0x44, 0x32, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02,
	0x18, 0x1e, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d,
	0x5d, 0x2b, 0x24, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x32, 0x0c, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe9, 0xa1, 0xba, 0xe5,
	0xba, 0x8f, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x32, 0x30, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4,
	0xb8, 0xba, 0xe5, 0x80, 0x92, 0xe5, 0xba, 0x8f, 0x2c, 0x20, 0xe4, 0xbb, 0x85, 0xe5, 0x9c, 0xa8,
	0x73, 0x6f, 0x72, 0x74, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe6, 0x97, 0xb6, 0xe6, 0x9c, 0x89,
	0xe6, 0x95, 0x88, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x2e, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x09, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87,
	0x8f, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x2a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x32, 0x06, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x3a, 0x43, 0x92, 0x41, 0x40, 0x0a, 0x3e, 0x2a, 0x1f, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x32, 0x1b, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0xe7,
	0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x22, 0xae, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb,
	0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x47, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x0d, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x70, 0x6f, 0x6f, 0x6c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x32, 0x92, 0x41, 0x2f, 0x0a, 0x2d, 0x2a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x32, 0x15, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87,
	0xe6, 0xb1, 0xa0, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xa3, 0x03, 0x0a, 0x1b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x42, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x06, 0x70, 0x6f, 0x6f,
	0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x10, 0x2a, 0x06,
	0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x32, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0xfa, 0x42,
	0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x1e, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44,
	0x12, 0x28, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0x92,
	0x41, 0x13, 0x2a, 0x03, 0x6e, 0x75, 0x6d, 0x32, 0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6,
	0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x7d, 0x0a, 0x06, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x42, 0x45, 0x92, 0x41, 0x42, 0x2a,
	0x06, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x32, 0x38, 0xe5, 0xaf, 0xb9, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe7, 0x9a, 0x84, 0xe8, 0xa6, 0x81, 0xe6, 0xb1, 0x82, 0x2c, 0x20, 0xe6, 0x8c, 0x89,
	0xe9, 0x98, 0x9f, 0xe5, 0x88, 0x97, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f, 0xe4, 0xbc, 0x98, 0xe5,
	0x85, 0x88, 0xe7, 0xba, 0xa7, 0xe5, 0xb0, 0x9d, 0xe8, 0xaf, 0x95, 0xe6, 0xbb, 0xa1, 0xe8, 0xb6,
	0xb3, 0x52, 0x06, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x12, 0x56, 0x0a, 0x0a, 0x64, 0x72, 0x61,
	0x69, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92,
	0x41, 0x33, 0x2a, 0x0a, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x32, 0x25,
	0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe6, 0x8a, 0xbd, 0xe7, 0xa6, 0xbb, 0xe5, 0xbb, 0xb6, 0xe8,
	0xbf, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0x20, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f,
	0xe5, 0xa6, 0x82, 0x34, 0x68, 0x52, 0x0a, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x3a, 0x3c, 0x92, 0x41, 0x39, 0x0a, 0x37, 0x2a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x32, 0x18, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0xae, 0xbe,
	0xe5, 0xa4, 0x87, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22,
	0x8e, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x65, 0x0a, 0x0e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x42, 0x3d, 0x92, 0x41, 0x20, 0x2a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x32, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x1e, 0x32,
	0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24,
	0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44,
	0x12, 0x59, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x22,
	0x92, 0x41, 0x1f, 0x2a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x32, 0x14, 0xe7, 0x9b,
	0xb8, 0xe5, 0x85, 0xb3, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x33, 0x92, 0x41, 0x30,
	0x0a, 0x2e, 0x2a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x32, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x22, 0xc4, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x54, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x16, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0x9a, 0x84, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x3a, 0x35, 0x92, 0x41, 0x32, 0x0a, 0x30, 0x2a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x32,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0xaf, 0x03, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a,
	0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x42, 0x2d, 0x92,
	0x41, 0x10, 0x2a, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x32, 0x06, 0x70, 0x6f, 0x6f, 0x6c,
	0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x1e, 0x32, 0x0f, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x06, 0x70, 0x6f,
	0x6f, 0x6c, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x03, 0x6e, 0x75, 0x6d, 0x32, 0x0c, 0xe8, 0xae, 0xbe,
	0xe5, 0xa4, 0x87, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x7d,
	0x0a, 0x06, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x42, 0x45,
	0x92, 0x41, 0x42, 0x2a, 0x06, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x32, 0x38, 0xe5, 0xaf, 0xb9,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0x9a, 0x84, 0xe8, 0xa6, 0x81, 0xe6, 0xb1, 0x82, 0x2c,
	0x20, 0xe6, 0x8c, 0x89, 0xe9, 0x98, 0x9f, 0xe5, 0x88, 0x97, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f,
	0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe7, 0xba, 0xa7, 0xe5, 0xb0, 0x9d, 0xe8, 0xaf, 0x95, 0xe6,
	0xbb, 0xa1, 0xe8, 0xb6, 0xb3, 0x52, 0x06, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x12, 0x56, 0x0a,
	0x0a, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x0a, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x32, 0x25, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe6, 0x8a, 0xbd, 0xe7, 0xa6, 0xbb,
	0xe5, 0xbb, 0xb6, 0xe8, 0xbf, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0x20, 0xe6, 0xa0,
	0xbc, 0xe5, 0xbc, 0x8f, 0xe5, 0xa6, 0x82, 0x34, 0x68, 0x52, 0x0a, 0x64, 0x72, 0x61, 0x69, 0x6e,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x3a, 0x42, 0x92, 0x41, 0x3f, 0x0a, 0x3d, 0x2a, 0x21, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x32,
	0x18, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe8, 0xae, 0xa2,
	0xe5, 0x8d, 0x95, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xb1, 0x02, 0x0a, 0x1c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x42, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x26, 0x92, 0x41, 0x23, 0x0a, 0x21, 0x2a, 0x1c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x42, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x32, 0x01, 0x66, 0x22, 0xbd, 0x02,
	0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xae, 0xbe,
	0xe5, 0xa4, 0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a,
	0x2c, 0x92, 0x41, 0x29, 0x0a, 0x27, 0x2a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x32, 0x01, 0x66, 0x22, 0x86, 0x01,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x4d,
	0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x31, 0x92, 0x41, 0x14, 0x2a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x32,
	0x08, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02,
	0x18, 0x1e, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d,
	0x5d, 0x2b, 0x24, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x3a, 0x27, 0x92,
	0x41, 0x24, 0x0a, 0x22, 0x2a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x32, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0x9e, 0x02, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7,
	0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4,
	0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x28, 0x92,
	0x41, 0x25, 0x0a, 0x23, 0x2a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x32, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xae, 0xbe, 0xe5, 0xa4,
	0x87, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xc4, 0x04, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x32, 0x0c, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe9, 0xa1, 0xba, 0xe5, 0xba,
	0x8f, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x56, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x2a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x32, 0x37, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8,
	0xba, 0xe5, 0x80, 0x92, 0xe5, 0x8f, 0x99, 0xef, 0xbc, 0x8c, 0xe4, 0xbb, 0x85, 0xe5, 0x9c, 0xa8,
	0x73, 0x6f, 0x72, 0x74, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a,
	0xe6, 0x97, 0xb6, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x2e, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x16, 0x92, 0x41, 0x13, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x09, 0xe5, 0x81,
	0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x28, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x12,
	0x92, 0x41, 0x0f, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x06, 0xe9, 0x95, 0xbf, 0xe5,
	0xba, 0xa6, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b,
	0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x0f, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe5, 0x95, 0x86, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x32, 0x09,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12,
	0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x0c, 0xe8, 0xae,
	0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x32, 0x0f, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x9b, 0xba, 0xe8, 0xb5, 0x84, 0xe5,
	0x8f, 0xb7, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0x92,
	0x41, 0x14, 0x2a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x32, 0x08, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41,
	0x08, 0x2a, 0x02, 0x69, 0x70, 0x32, 0x02, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x3a, 0x2f, 0x92,
	0x41, 0x2c, 0x0a, 0x2a, 0x2a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x32, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0xa7,
	0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x2f, 0x92, 0x41, 0x2c, 0x0a, 0x2a, 0x2a, 0x0e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x32, 0x18,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xd2, 0x06, 0x0a, 0x0f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x4d, 0x0a, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31,
	0x92, 0x41, 0x14, 0x2a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x32, 0x08, 0xe8,
	0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x1e,
	0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b,
	0x24, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92,
	0x41, 0x1b, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x0f, 0xe8, 0xae,
	0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe5, 0x95, 0x86, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x04, 0x70, 0x6f, 0x6f, 0x6c,
	0x32, 0x09, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0x52, 0x04, 0x70, 0x6f, 0x6f,
	0x6c, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x0c,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x58, 0x0a, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x2a, 0x08, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x44, 0x32, 0x2d, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe4, 0xb8, 0xb4,
	0xe6, 0x97, 0xb6, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0x20, 0x79, 0x75, 0x6e, 0x74, 0x69, 0x20,
	0xe7, 0x9a, 0x84, 0x20, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x44, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x65,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x12, 0xe8, 0xae, 0xbe, 0xe5, 0xa4,
	0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x48, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x32, 0x0c, 0xe8, 0xae, 0xbe,
	0xe5, 0xa4, 0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92,
	0x41, 0x14, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x78, 0x0a, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x11, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x3a, 0x2a, 0x92, 0x41, 0x27, 0x0a, 0x25, 0x2a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x32, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0xa4, 0x02,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x2b, 0x92, 0x41, 0x28, 0x0a, 0x26, 0x2a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x32, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0x22, 0x94, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x53, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41,
	0x32, 0x2a, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x62, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x32, 0x17, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x44, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x73, 0x3a, 0x2b,
	0x92, 0x41, 0x28, 0x0a, 0x26, 0x2a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x32, 0x12, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8,
	0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0xe0, 0x01, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x3a, 0x2c, 0x92, 0x41, 0x29, 0x0a, 0x27, 0x2a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x32, 0x12, 0xe5, 0x88, 0xa0, 0xe9,
	0x99, 0xa4, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0x85,
	0x04, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92,
	0x41, 0x1c, 0x2a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x32, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41,
	0x10, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x06, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f,
	0x9f, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x32, 0x09, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0x52, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x03, 0x63, 0x70, 0x75, 0x32, 0x0e, 0x63, 0x70, 0x75, 0x28,
	0xe6, 0xa0, 0xb8, 0xe5, 0xbf, 0x83, 0xe6, 0x95, 0xb0, 0x29, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12,
	0x2e, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x16, 0x92, 0x41, 0x13, 0x2a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x32, 0x09, 0xe5, 0x86,
	0x85, 0xe5, 0xad, 0x98, 0x28, 0x47, 0x29, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x3a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x32, 0x0f, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe6, 0x96,
	0xb9, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10,
	0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x06, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x03, 0x6e, 0x75, 0x6d, 0x32,
	0x12, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0x95, 0xb0,
	0xe9, 0x87, 0x8f, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x3a, 0x2c, 0x92, 0x41, 0x29, 0x0a, 0x27, 0x2a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0x22, 0xbc, 0x02, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe6, 0x9c,
	0xba, 0xe5, 0x9e, 0x8b, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x3a, 0x33, 0x92, 0x41, 0x30, 0x0a, 0x2e, 0x2a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x32, 0x12, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xd2, 0x04, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x4b, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c,
	0x2a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x44, 0x32, 0x08, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0x49, 0x44, 0x52, 0x10, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x2b,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x06, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11,
	0x2a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x32, 0x09, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c,
	0xba, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x03, 0x63, 0x70, 0x75, 0x32, 0x0e,
	0x63, 0x70, 0x75, 0x28, 0xe6, 0xa0, 0xb8, 0xe5, 0xbf, 0x83, 0xe6, 0x95, 0xb0, 0x29, 0x52, 0x03,
	0x63, 0x70, 0x75, 0x12, 0x2e, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x32, 0x09, 0xe5, 0x86, 0x85, 0xe5, 0xad, 0x98, 0x28, 0x47, 0x29, 0x52, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x32, 0x0f, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0x8f, 0x90, 0xe4,
	0xbe, 0x9b, 0xe6, 0x96, 0xb9, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x13, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x06, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x03,
	0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x03,
	0x6e, 0x75, 0x6d, 0x32, 0x12, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x3a, 0x2c, 0x92, 0x41,
	0x29, 0x0a, 0x27, 0x2a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x32, 0x0c, 0xe4, 0xbf,
	0xae, 0xe6, 0x94, 0xb9, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0x22, 0xbb, 0x02, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x0c, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x3a, 0x32, 0x92, 0x41, 0x2f, 0x0a, 0x2d, 0x2a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x32, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x9c, 0xba, 0xe5,
	0x9e, 0x8b, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xbc, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x6d, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41,
	0x92, 0x41, 0x24, 0x2a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x44, 0x32, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x10, 0x02, 0x18, 0x1e,
	0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b,
	0x24, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x44, 0x3a, 0x32, 0x92, 0x41, 0x2f, 0x0a, 0x2d, 0x2a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x32, 0x12, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x9c, 0xba, 0xe5, 0x9e,
	0x8b, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0xf1, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x3a, 0x36, 0x92, 0x41, 0x33, 0x0a, 0x31, 0x2a, 0x18, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x32, 0x15, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x9c, 0xba, 0xe5,
	0x9e, 0x8b, 0xe7, 0x9a, 0x84, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0xf7, 0x02, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b,
	0xae, 0x49, 0x44, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x36,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x32, 0x06, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x03, 0x63, 0x70, 0x75, 0x32, 0x0e, 0x63, 0x70, 0x75, 0x28,
	0xe6, 0xa0, 0xb8, 0xe5, 0xbf, 0x83, 0xe6, 0x95, 0xb0, 0x29, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12,
	0x2e, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x16, 0x92, 0x41, 0x13, 0x2a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x32, 0x09, 0xe5, 0x86,
	0x85, 0xe5, 0xad, 0x98, 0x28, 0x47, 0x29, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x13, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x06, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x37, 0x92, 0x41,
	0x34, 0x0a, 0x32, 0x2a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x32, 0x18, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0xc0, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x4c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe6, 0x9c, 0xba, 0xe5,
	0x9e, 0x8b, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x38,
	0x92, 0x41, 0x35, 0x0a, 0x33, 0x2a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x32, 0x18,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0x22, 0x9d, 0x03, 0x0a, 0x17, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49,
	0x44, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32,
	0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x32, 0x06, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x03, 0x76, 0x70, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d,
	0x92, 0x41, 0x0a, 0x2a, 0x03, 0x76, 0x70, 0x63, 0x32, 0x03, 0x76, 0x70, 0x63, 0x52, 0x03, 0x76,
	0x70, 0x63, 0x12, 0x4b, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x2a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x44, 0x32, 0x08, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0x49, 0x44, 0x52, 0x10, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x3a,
	0x77, 0x92, 0x41, 0x74, 0x0a, 0x72, 0x2a, 0x17, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x32,
	0x1d, 0xe6, 0x8e, 0xa5, 0xe5, 0x85, 0xa5, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x20, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xd2, 0x01, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0xd2,
	0x01, 0x03, 0x76, 0x70, 0x63, 0xd2, 0x01, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x22, 0xc9, 0x02, 0x0a, 0x18, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x0c,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x3a, 0x3e, 0x92, 0x41, 0x3b, 0x0a, 0x39, 0x2a, 0x18, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x32, 0x1d, 0xe6, 0x8e, 0xa5, 0xe5, 0x85, 0xa5, 0x20, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x20, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0x22, 0x83, 0x05, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x02, 0x69, 0x64, 0x32, 0x08, 0xe6, 0x9c,
	0xba, 0xe5, 0x9e, 0x8b, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x32, 0x06, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x32, 0x06, 0xe5, 0x9c, 0xb0, 0xe5, 0x9f, 0x9f, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x32, 0x09, 0xe5, 0x8f,
	0xaf, 0xe7, 0x94, 0xa8, 0xe5, 0x8c, 0xba, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a,
	0x03, 0x63, 0x70, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a,
	0x03, 0x63, 0x70, 0x75, 0x32, 0x0e, 0x43, 0x50, 0x55, 0x28, 0xe6, 0xa0, 0xb8, 0xe5, 0xbf, 0x83,
	0xe6, 0x95, 0xb0, 0x29, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x2e, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x32, 0x09, 0xe5, 0x86, 0x85, 0xe5, 0xad, 0x98, 0x28, 0x47,
	0x29, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b,
	0x2a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0x0f, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x32, 0x0c, 0xe5, 0x9c, 0xa8, 0xe5, 0x94, 0xae, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x03, 0x6e, 0x75, 0x6d, 0x32,
	0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x19, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0x20, 0x75, 0x74, 0x63, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x32, 0x19, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x2c, 0x20, 0x75, 0x74, 0x63, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x97, 0x52, 0x0a, 0x0f, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0xc8,
	0x01, 0x0a, 0x09, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x92, 0x41, 0x54, 0x12, 0x28, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0xe6, 0x9c, 0x8d,
	0xe5, 0x8a, 0xa1, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0x1a,
	0x28, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0x12, 0xf3, 0x01, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x12, 0x28, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x85, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28,
	0x22, 0x23, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x54, 0x12, 0x15, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x1a, 0x3b, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2c, 0x20, 0xe7, 0x94, 0xa8, 0xe4, 0xba,
	0x8e, 0xe5, 0x90, 0x8e, 0xe7, 0xbb, 0xad, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe5, 0x92, 0x8c, 0xe5, 0xbd, 0x92, 0xe8, 0xbf, 0x98, 0x12,
	0xf2, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x8d, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x49, 0x44, 0x7d, 0x92, 0x41, 0x4c, 0x12, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x1a,
	0x33, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe7, 0xbb, 0x99, 0xe5, 0xae, 0x9a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x2c, 0x20, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x12, 0xe1, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x92, 0x41, 0x4c, 0x12, 0x15, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x1a, 0x33, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe7, 0xbb, 0x99, 0xe5, 0xae,
	0x9a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49,
	0x44, 0x2c, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x86, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x12, 0x28, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x98, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x1a,
	0x36, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x54, 0x12, 0x15, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb6, 0x88, 0xe8, 0xb4,
	0xb9, 0xe8, 0x80, 0x85, 0x1a, 0x3b, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0x2c, 0x20, 0xe7, 0x94, 0xa8,
	0xe4, 0xba, 0x8e, 0xe5, 0x90, 0x8e, 0xe7, 0xbb, 0xad, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe5, 0x92, 0x8c, 0xe5, 0xbd, 0x92, 0xe8, 0xbf,
	0x98, 0x12, 0xdc, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x6f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x2a, 0x36, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2f, 0x7b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x92,
	0x41, 0x2e, 0x12, 0x15, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87,
	0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0x1a, 0x15, 0xe5, 0x88, 0xa0, 0xe9, 0x99,
	0xa4, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85,
	0x12, 0xc0, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x43, 0x22, 0x3e, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x1c, 0x12, 0x0c, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8,
	0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x1a, 0x0c, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0xae, 0xbe,
	0xe5, 0xa4, 0x87, 0x12, 0xbc, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x42, 0x22, 0x3d, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x1c, 0x12, 0x0c, 0xe5, 0xbd, 0x92, 0xe8, 0xbf, 0x98, 0xe8, 0xae,
	0xbe, 0xe5, 0xa4, 0x87, 0x1a, 0x0c, 0xe5, 0xbd, 0x92, 0xe8, 0xbf, 0x98, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0x12, 0xd1, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x24, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x3a, 0x01, 0x2a,
	0x92, 0x41, 0x43, 0x12, 0x11, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x2e, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x2c, 0x20, 0xe7, 0x94, 0xa8, 0xe4, 0xba,
	0x8e, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0x9a, 0x84, 0xe7, 0xbb, 0x84, 0xe7, 0xbb, 0x87,
	0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0x12, 0xd1, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x7d, 0x92, 0x41, 0x40, 0x12, 0x11, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x2b, 0xe9,
	0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe7, 0xbb, 0x99, 0xe5, 0xae, 0x9a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x2c, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0xf4, 0x01, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x26, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x8c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x7b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x7d, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x92, 0x41, 0x4d, 0x12, 0x17, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x1a, 0x32, 0xe9,
	0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe7, 0xbb, 0x99, 0xe5, 0xae, 0x9a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x2c, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x20, 0xe4, 0xba, 0x8b, 0xe4, 0xbb,
	0xb6, 0x12, 0xc3, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x68, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x92, 0x41, 0x3e, 0x12, 0x0f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0x1a, 0x2b, 0xe9, 0x80, 0x9a, 0xe8,
	0xbf, 0x87, 0xe7, 0xbb, 0x99, 0xe5, 0xae, 0x9a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x49, 0x44, 0x2c, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0xdc, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x24, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x33, 0x1a, 0x2e, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44,
	0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x3f, 0x12, 0x0f, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8,
	0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0x1a, 0x2c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0x2c, 0x20, 0xe7, 0x94, 0xa8, 0xe4, 0xba,
	0x8e, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0x9a, 0x84, 0xe7, 0xbb, 0x84, 0xe7, 0xbb, 0x87,
	0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0x12, 0xbc, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x24, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30,
	0x2a, 0x2e, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x6f,
	0x6c, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x7d,
	0x92, 0x41, 0x22, 0x12, 0x0f, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xae, 0xbe, 0xe5, 0xa4,
	0x87, 0xe6, 0xb1, 0xa0, 0x1a, 0x0f, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0x12, 0xf0, 0x01, 0x0a, 0x18, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x12, 0x2c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71,
	0x1a, 0x2d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x77, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x22, 0x35, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x7d, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x01,
	0x2a, 0x92, 0x41, 0x34, 0x12, 0x18, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe5, 0x88, 0xb0, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0x1a, 0x18,
	0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x88, 0xb0, 0xe8,
	0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0x12, 0xa4, 0x02, 0x0a, 0x25, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x79, 0x42, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x73, 0x12, 0x39, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x79,
	0x42, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x3a, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x79, 0x42, 0x6b, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x83, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x46, 0x22, 0x41, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70,
	0x6f, 0x6f, 0x6c, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49,
	0x44, 0x7d, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x42, 0x6b, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x44, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x34, 0x12, 0x18, 0xe5, 0xaf, 0xbc,
	0xe5, 0x85, 0xa5, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x88, 0xb0, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0x1a, 0x18, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe8, 0xae, 0xbe,
	0xe5, 0xa4, 0x87, 0xe5, 0x88, 0xb0, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0x12,
	0xb0, 0x02, 0x0a, 0x23, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x79, 0x42, 0x6b,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x37, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x42, 0x79, 0x42, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x1a, 0x2d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22,
	0xa0, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x22, 0x40, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x7d, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x42, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x52,
	0x12, 0x27, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x62, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x44, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x88, 0xb0,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xb1, 0xa0, 0x1a, 0x27, 0xe9, 0x80, 0x9a, 0xe8, 0xbf,
	0x87, 0x62, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x88, 0xb0, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6,
	0xb1, 0xa0, 0x12, 0xa9, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x92, 0x41, 0x24, 0x12, 0x10, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x62, 0x69, 0x6c, 0x6c, 0x1a, 0x10, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x62, 0x69, 0x6c, 0x6c, 0x12, 0xc5,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x67, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x7d, 0x92, 0x41, 0x2a, 0x12, 0x13, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x1a, 0x13, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0xc0, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x59,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x2a, 0x12,
	0x13, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x1a, 0x13, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0xb5, 0x01, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x24,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x54, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x92, 0x41, 0x28, 0x12, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x12, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0xd3, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x37, 0x1a, 0x32, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x44, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x2c, 0x12, 0x14, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x1a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0xc8, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x23,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x6d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x43, 0x12,
	0x14, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0x2b, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2c, 0x20, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0x90, 0x8e,
	0xe7, 0xbb, 0xad, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xae, 0xa1, 0xe7,
	0x90, 0x86, 0x12, 0xb2, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x92, 0x41, 0x32, 0x12, 0x0e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0x20, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe7, 0xbb, 0x99,
	0xe5, 0xae, 0x9a, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x9c, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x47, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x92, 0x41, 0x20, 0x12, 0x0e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0x0e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0xc9, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x1a, 0x23, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x3d, 0x12, 0x0e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0x2b, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2c, 0x20, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0x90, 0x8e,
	0xe7, 0xbb, 0xad, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xae, 0xa1, 0xe7,
	0x90, 0x86, 0x12, 0xa9, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x2a, 0x23, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x20, 0x12, 0x0e,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0x0e,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0xd9,
	0x01, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x92, 0x41, 0x3e, 0x12, 0x1d, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xe7, 0x9a, 0x84, 0xe8,
	0xae, 0xa2, 0xe5, 0x8d, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x1d, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xe7, 0x9a, 0x84, 0xe8, 0xae,
	0xa2, 0xe5, 0x8d, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0xe1, 0x01, 0x0a, 0x14, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x28, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d,
	0x12, 0x2b, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x92, 0x41, 0x3e,
	0x12, 0x1d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0xe7, 0x9a, 0x84, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a,
	0x1d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xe7,
	0x9a, 0x84, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0x9e,
	0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x73, 0x42, 0x69, 0x6c, 0x6c, 0x12,
	0x20, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x73, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x73, 0x42, 0x69, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x62, 0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x92, 0x41, 0x22, 0x12, 0x0f, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x6f, 0x62, 0x73, 0xe8, 0xb4, 0xa6, 0xe5, 0x8d, 0x95, 0x1a, 0x0f,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x6f, 0x62, 0x73, 0xe8, 0xb4, 0xa6, 0xe5, 0x8d, 0x95, 0x12,
	0xa2, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x73, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x73, 0x43, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x73,
	0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21,
	0x22, 0x1c, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x62, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x3a, 0x01,
	0x2a, 0x92, 0x41, 0x20, 0x12, 0x0e, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x6f, 0x62, 0x73, 0x20,
	0x63, 0x6f, 0x73, 0x74, 0x1a, 0x0e, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x6f, 0x62, 0x73, 0x20,
	0x63, 0x6f, 0x73, 0x74, 0x12, 0xc9, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x26, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x62, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x32, 0x12, 0x17,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x28,
	0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0x29, 0x1a, 0x17, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x28, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0x29,
	0x12, 0xcc, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x24, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x92, 0x41,
	0x3e, 0x12, 0x1d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6,
	0xb1, 0xa0, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x28, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0x29,
	0x1a, 0x1d, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1,
	0xa0, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x28, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0x29, 0x12,
	0xe0, 0x01, 0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x84, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x37, 0x22, 0x32, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44,
	0x7d, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x44, 0x12, 0x20,
	0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x88, 0xb0, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x28, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0x29,
	0x1a, 0x20, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x88,
	0xb0, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x28, 0xe8, 0x87, 0xaa, 0xe5, 0xbb,
	0xba, 0x29, 0x12, 0xec, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x96, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x37, 0x12, 0x35, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x7d, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x92, 0x41, 0x56, 0x12, 0x29, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x28, 0xe8, 0x87, 0xaa,
	0xe5, 0xbb, 0xba, 0x29, 0xe4, 0xb8, 0xad, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x29, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x28, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0x29, 0xe4,
	0xb8, 0xad, 0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x12, 0xab, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x2a, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42,
	0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22,
	0xbd, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x7b, 0x70, 0x6f,
	0x6f, 0x6c, 0x49, 0x44, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x92, 0x41, 0x78, 0x12, 0x3a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x28, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0x29,
	0xe4, 0xb8, 0xad, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe8, 0xae, 0xb0, 0xe5,
	0xbd, 0x95, 0x28, 0x61, 0x6b, 0x61, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95, 0x29, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x1a, 0x3a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0xb5, 0x84, 0xe6, 0xba,
	0x90, 0xe6, 0xb1, 0xa0, 0x28, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0x29, 0xe4, 0xb8, 0xad, 0xe7,
	0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0x28, 0x61,
	0x6b, 0x61, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95, 0x29, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12,
	0xae, 0x02, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x2c, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x42, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42,
	0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0xb4, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3f, 0x22, 0x3a, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x7d, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x3a, 0x01,
	0x2a, 0x92, 0x41, 0x6c, 0x12, 0x34, 0xe6, 0x96, 0xb0, 0xe5, 0xbb, 0xba, 0xe8, 0xb5, 0x84, 0xe6,
	0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x28, 0xe8, 0x87, 0xaa, 0xe5, 0xbb, 0xba, 0x29, 0xe4, 0xb8, 0xad,
	0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0x28,
	0x61, 0x6b, 0x61, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95, 0x29, 0x1a, 0x34, 0xe6, 0x96, 0xb0, 0xe5,
	0xbb, 0xba, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x28, 0xe8, 0x87, 0xaa, 0xe5,
	0xbb, 0xba, 0x29, 0xe4, 0xb8, 0xad, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe8,
	0xae, 0xb0, 0xe5, 0xbd, 0x95, 0x28, 0x61, 0x6b, 0x61, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95, 0x29,
	0x12, 0x9e, 0x02, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x30, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa4, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x7b, 0x70, 0x6f, 0x6f,
	0x6c, 0x49, 0x44, 0x7d, 0x92, 0x41, 0x6a, 0x12, 0x33, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0xe4, 0xb8, 0xad, 0xe7, 0x9a, 0x84, 0xe8,
	0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0x28, 0x61, 0x6b, 0x61, 0xe8,
	0xae, 0xa2, 0xe5, 0x8d, 0x95, 0x29, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x33, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0xe4, 0xb8,
	0xad, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95,
	0x28, 0x61, 0x6b, 0x61, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95, 0x29, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x12, 0xa7, 0x02, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x32, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x9b, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x7b,
	0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x5e, 0x12, 0x2d, 0xe6,
	0x96, 0xb0, 0xe5, 0xbb, 0xba, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0xe4,
	0xb8, 0xad, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe8, 0xae, 0xb0, 0xe5, 0xbd,
	0x95, 0x28, 0x61, 0x6b, 0x61, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95, 0x29, 0x1a, 0x2d, 0xe6, 0x96,
	0xb0, 0xe5, 0xbb, 0xba, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0xe4, 0xb8,
	0xad, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95,
	0x28, 0x61, 0x6b, 0x61, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95, 0x29, 0x12, 0xe8, 0x01, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x22, 0x23, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x4a, 0x12, 0x16, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x1a, 0x30, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2c, 0x20, 0xe7, 0x94,
	0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8,
	0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0x12, 0xfc, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x28, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x8e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x1a, 0x36, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x44, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x4a, 0x12, 0x16, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x1a, 0x30, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2c, 0x20, 0xe7, 0x94, 0xa8,
	0xe4, 0xba, 0x8e, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe6,
	0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0x12, 0xf9, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x8b, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x2a, 0x36, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x44, 0x7d, 0x92, 0x41, 0x4a, 0x12, 0x16, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a,
	0x30, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2c, 0x20, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5,
	0xb1, 0x95, 0xe7, 0xa4, 0xba, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe6, 0x9c, 0xba, 0xe5, 0x9e,
	0x8b, 0x12, 0xc0, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x28, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x56, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x92, 0x41, 0x28, 0x12, 0x12, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x1a, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9c, 0xba, 0xe5, 0x9e, 0x8b, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xd5, 0x01, 0x0a, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x28, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x30, 0x12, 0x16, 0xe6, 0x8e,
	0xa5, 0xe5, 0x85, 0xa5, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x1a, 0x16, 0xe6, 0x8e, 0xa5, 0xe5, 0x85, 0xa5, 0x20, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0xb4, 0x01, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x12, 0x25, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x7b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x7d, 0x92, 0x41, 0x38, 0x12, 0x0c, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x28, 0xe9, 0x80, 0x9a, 0xe8, 0xbf,
	0x87, 0xe7, 0xbb, 0x99, 0xe5, 0xae, 0x9a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x2c,
	0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x12, 0xa6, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x92, 0x41, 0x2e, 0x12, 0x15,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x20, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xa6, 0x01, 0x0a,
	0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x51, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x1a, 0x25, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44,
	0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x1e, 0x12, 0x0d, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x20,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x0d, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x20, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x54,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x92, 0x41, 0x2e, 0x12, 0x15, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x15, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x42, 0x61, 0x5a, 0x12, 0x2e, 0x2f, 0x3b, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x92, 0x41, 0x4a, 0x12, 0x21, 0x0a,
	0x18, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x20, 0x41, 0x50, 0x49, 0x20, 0x44, 0x6f, 0x63, 0x32, 0x05, 0x30, 0x2e, 0x31, 0x2e, 0x30,
	0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
}

var (
	file_resourcemanager_proto_rawDescOnce sync.Once
	file_resourcemanager_proto_rawDescData = file_resourcemanager_proto_rawDesc
)

func file_resourcemanager_proto_rawDescGZIP() []byte {
	file_resourcemanager_proto_rawDescOnce.Do(func() {
		file_resourcemanager_proto_rawDescData = protoimpl.X.CompressGZIP(file_resourcemanager_proto_rawDescData)
	})
	return file_resourcemanager_proto_rawDescData
}

var file_resourcemanager_proto_msgTypes = make([]protoimpl.MessageInfo, 149)
var file_resourcemanager_proto_goTypes = []interface{}{
	(*AvailableReq)(nil),                              // 0: resourcemanager.AvailableReq
	(*AvailableResp)(nil),                             // 1: resourcemanager.AvailableResp
	(*CreateObsCostReq)(nil),                          // 2: resourcemanager.CreateObsCostReq
	(*CreateObsCostResp)(nil),                         // 3: resourcemanager.CreateObsCostResp
	(*ObsCost)(nil),                                   // 4: resourcemanager.ObsCost
	(*QueryObsBillReq)(nil),                           // 5: resourcemanager.QueryObsBillReq
	(*QueryObsBillResp)(nil),                          // 6: resourcemanager.QueryObsBillResp
	(*ObsBill)(nil),                                   // 7: resourcemanager.ObsBill
	(*CreateDeviceConsumerReq)(nil),                   // 8: resourcemanager.CreateDeviceConsumerReq
	(*CreateDeviceConsumerResp)(nil),                  // 9: resourcemanager.CreateDeviceConsumerResp
	(*GetDeviceConsumerReq)(nil),                      // 10: resourcemanager.GetDeviceConsumerReq
	(*GetDeviceConsumerResp)(nil),                     // 11: resourcemanager.GetDeviceConsumerResp
	(*ListDeviceConsumerReq)(nil),                     // 12: resourcemanager.ListDeviceConsumerReq
	(*ListDeviceConsumerResp)(nil),                    // 13: resourcemanager.ListDeviceConsumerResp
	(*UpdateDeviceConsumerReq)(nil),                   // 14: resourcemanager.UpdateDeviceConsumerReq
	(*ListString)(nil),                                // 15: resourcemanager.ListString
	(*Labels)(nil),                                    // 16: resourcemanager.Labels
	(*Annotations)(nil),                               // 17: resourcemanager.Annotations
	(*ListQuota)(nil),                                 // 18: resourcemanager.ListQuota
	(*UpdateDeviceConsumerResp)(nil),                  // 19: resourcemanager.UpdateDeviceConsumerResp
	(*DeleteDeviceConsumerReq)(nil),                   // 20: resourcemanager.DeleteDeviceConsumerReq
	(*DeleteDeviceConsumerResp)(nil),                  // 21: resourcemanager.DeleteDeviceConsumerResp
	(*ConsumeDeviceReq)(nil),                          // 22: resourcemanager.ConsumeDeviceReq
	(*ConsumeDeviceResp)(nil),                         // 23: resourcemanager.ConsumeDeviceResp
	(*ReturnDeviceReq)(nil),                           // 24: resourcemanager.ReturnDeviceReq
	(*ReturnDeviceResp)(nil),                          // 25: resourcemanager.ReturnDeviceResp
	(*RecordData)(nil),                                // 26: resourcemanager.RecordData
	(*ConsumeDesire)(nil),                             // 27: resourcemanager.ConsumeDesire
	(*DeviceDisk)(nil),                                // 28: resourcemanager.DeviceDisk
	(*ConsumerQuota)(nil),                             // 29: resourcemanager.ConsumerQuota
	(*DeviceConsumer)(nil),                            // 30: resourcemanager.DeviceConsumer
	(*CreateDevicePoolReq)(nil),                       // 31: resourcemanager.CreateDevicePoolReq
	(*CreateDevicePoolResp)(nil),                      // 32: resourcemanager.CreateDevicePoolResp
	(*GetDevicePoolReq)(nil),                          // 33: resourcemanager.GetDevicePoolReq
	(*GetDevicePoolResp)(nil),                         // 34: resourcemanager.GetDevicePoolResp
	(*GetDevicePoolEventReq)(nil),                     // 35: resourcemanager.GetDevicePoolEventReq
	(*GetDevicePoolEventResp)(nil),                    // 36: resourcemanager.GetDevicePoolEventResp
	(*DevicePoolEvent)(nil),                           // 37: resourcemanager.DevicePoolEvent
	(*ListDevicePoolReq)(nil),                         // 38: resourcemanager.ListDevicePoolReq
	(*ListDevicePoolResp)(nil),                        // 39: resourcemanager.ListDevicePoolResp
	(*UpdateDevicePoolReq)(nil),                       // 40: resourcemanager.UpdateDevicePoolReq
	(*UpdateDevicePoolResp)(nil),                      // 41: resourcemanager.UpdateDevicePoolResp
	(*DeleteDevicePoolReq)(nil),                       // 42: resourcemanager.DeleteDevicePoolReq
	(*DeleteDevicePoolResp)(nil),                      // 43: resourcemanager.DeleteDevicePoolResp
	(*ImportDeviceToDevicePoolReq)(nil),               // 44: resourcemanager.ImportDeviceToDevicePoolReq
	(*ImportDevicesToDevicePoolByBkAssetIDsReq)(nil),  // 45: resourcemanager.ImportDevicesToDevicePoolByBkAssetIDsReq
	(*ImportDevicesToDevicePoolByBkAssetIDsResp)(nil), // 46: resourcemanager.ImportDevicesToDevicePoolByBkAssetIDsResp
	(*ImportDevicesData)(nil),                         // 47: resourcemanager.ImportDevicesData
	(*ImportDeviceToDevicePoolByBkAssetIDReq)(nil),    // 48: resourcemanager.ImportDeviceToDevicePoolByBkAssetIDReq
	(*ImportDeviceToDevicePoolResp)(nil),              // 49: resourcemanager.ImportDeviceToDevicePoolResp
	(*CreateProviderReq)(nil),                         // 50: resourcemanager.CreateProviderReq
	(*CreateProviderResp)(nil),                        // 51: resourcemanager.CreateProviderResp
	(*GetProviderReq)(nil),                            // 52: resourcemanager.GetProviderReq
	(*GetProviderResp)(nil),                           // 53: resourcemanager.GetProviderResp
	(*ListProviderReq)(nil),                           // 54: resourcemanager.ListProviderReq
	(*ListProviderResp)(nil),                          // 55: resourcemanager.ListProviderResp
	(*UpdateProviderReq)(nil),                         // 56: resourcemanager.UpdateProviderReq
	(*UpdateProviderResp)(nil),                        // 57: resourcemanager.UpdateProviderResp
	(*DeleteProviderReq)(nil),                         // 58: resourcemanager.DeleteProviderReq
	(*DeleteProviderResp)(nil),                        // 59: resourcemanager.DeleteProviderResp
	(*QueryProviderOrderReq)(nil),                     // 60: resourcemanager.QueryProviderOrderReq
	(*QueryProviderOrderResp)(nil),                    // 61: resourcemanager.QueryProviderOrderResp
	(*ProviderOrder)(nil),                             // 62: resourcemanager.ProviderOrder
	(*QueryProviderNetworkReq)(nil),                   // 63: resourcemanager.QueryProviderNetworkReq
	(*QueryProviderNetworkResp)(nil),                  // 64: resourcemanager.QueryProviderNetworkResp
	(*ProviderNetwork)(nil),                           // 65: resourcemanager.ProviderNetwork
	(*ProviderSubnet)(nil),                            // 66: resourcemanager.ProviderSubnet
	(*GetDeviceRecordReq)(nil),                        // 67: resourcemanager.GetDeviceRecordReq
	(*GetDeviceRecordResp)(nil),                       // 68: resourcemanager.GetDeviceRecordResp
	(*CreateDeviceRecordReq)(nil),                     // 69: resourcemanager.CreateDeviceRecordReq
	(*CreateDeviceRecordResp)(nil),                    // 70: resourcemanager.CreateDeviceRecordResp
	(*ListDeviceRecordReq)(nil),                       // 71: resourcemanager.ListDeviceRecordReq
	(*ListDeviceRecordResp)(nil),                      // 72: resourcemanager.ListDeviceRecordResp
	(*ListDeviceBillReq)(nil),                         // 73: resourcemanager.ListDeviceBillReq
	(*ListDeviceBillResp)(nil),                        // 74: resourcemanager.ListDeviceBillResp
	(*DevicePool)(nil),                                // 75: resourcemanager.DevicePool
	(*DevicePoolAutoScalerOption)(nil),                // 76: resourcemanager.DevicePoolAutoScalerOption
	(*Device)(nil),                                    // 77: resourcemanager.Device
	(*DeviceEvent)(nil),                               // 78: resourcemanager.DeviceEvent
	(*DeviceInfo)(nil),                                // 79: resourcemanager.DeviceInfo
	(*DeviceSecurity)(nil),                            // 80: resourcemanager.DeviceSecurity
	(*DeviceImage)(nil),                               // 81: resourcemanager.DeviceImage
	(*DeviceZone)(nil),                                // 82: resourcemanager.DeviceZone
	(*DeviceRecord)(nil),                              // 83: resourcemanager.DeviceRecord
	(*DeviceBill)(nil),                                // 84: resourcemanager.DeviceBill
	(*Provider)(nil),                                  // 85: resourcemanager.Provider
	(*CreateResourcePoolReq)(nil),                     // 86: resourcemanager.CreateResourcePoolReq
	(*CreateResourcePoolResp)(nil),                    // 87: resourcemanager.CreateResourcePoolResp
	(*ListResourcePoolReq)(nil),                       // 88: resourcemanager.ListResourcePoolReq
	(*ListResourcePoolResp)(nil),                      // 89: resourcemanager.ListResourcePoolResp
	(*ResourcePool)(nil),                              // 90: resourcemanager.ResourcePool
	(*ImportResourceReq)(nil),                         // 91: resourcemanager.ImportResourceReq
	(*ImportResourceResp)(nil),                        // 92: resourcemanager.ImportResourceResp
	(*Resource)(nil),                                  // 93: resourcemanager.Resource
	(*ResourceStatus)(nil),                            // 94: resourcemanager.ResourceStatus
	(*ListResourceReq)(nil),                           // 95: resourcemanager.ListResourceReq
	(*ListDeviceRecordByPoolReq)(nil),                 // 96: resourcemanager.ListDeviceRecordByPoolReq
	(*ListDeviceRecordByDevicePoolReq)(nil),           // 97: resourcemanager.ListDeviceRecordByDevicePoolReq
	(*ListResourceResp)(nil),                          // 98: resourcemanager.ListResourceResp
	(*CreateDeviceRecordByPoolReq)(nil),               // 99: resourcemanager.CreateDeviceRecordByPoolReq
	(*UpdateDeviceRecordReq)(nil),                     // 100: resourcemanager.UpdateDeviceRecordReq
	(*UpdateDeviceRecordResp)(nil),                    // 101: resourcemanager.UpdateDeviceRecordResp
	(*CreateDeviceRecordByDevicePoolReq)(nil),         // 102: resourcemanager.CreateDeviceRecordByDevicePoolReq
	(*CreateDeviceRecordByPoolResp)(nil),              // 103: resourcemanager.CreateDeviceRecordByPoolResp
	(*CreateDeviceRecordByDevicePoolResp)(nil),        // 104: resourcemanager.CreateDeviceRecordByDevicePoolResp
	(*GetDeviceReq)(nil),                              // 105: resourcemanager.GetDeviceReq
	(*GetDeviceResp)(nil),                             // 106: resourcemanager.GetDeviceResp
	(*ListDevicesReq)(nil),                            // 107: resourcemanager.ListDevicesReq
	(*ListDevicesResp)(nil),                           // 108: resourcemanager.ListDevicesResp
	(*UpdateDeviceReq)(nil),                           // 109: resourcemanager.UpdateDeviceReq
	(*UpdateDeviceResp)(nil),                          // 110: resourcemanager.UpdateDeviceResp
	(*DeleteDevicesReq)(nil),                          // 111: resourcemanager.DeleteDevicesReq
	(*DeleteDevicesResp)(nil),                         // 112: resourcemanager.DeleteDevicesResp
	(*CreateDeviceInstanceReq)(nil),                   // 113: resourcemanager.CreateDeviceInstanceReq
	(*CreateDeviceInstanceResp)(nil),                  // 114: resourcemanager.CreateDeviceInstanceResp
	(*UpdateDeviceInstanceReq)(nil),                   // 115: resourcemanager.UpdateDeviceInstanceReq
	(*UpdateDeviceInstanceResp)(nil),                  // 116: resourcemanager.UpdateDeviceInstanceResp
	(*DeleteDeviceInstanceReq)(nil),                   // 117: resourcemanager.DeleteDeviceInstanceReq
	(*DeleteDeviceInstanceResp)(nil),                  // 118: resourcemanager.DeleteDeviceInstanceResp
	(*ListDeviceInstancesReq)(nil),                    // 119: resourcemanager.ListDeviceInstancesReq
	(*ListDeviceInstancesResp)(nil),                   // 120: resourcemanager.ListDeviceInstancesResp
	(*EnableDeviceConsumerReq)(nil),                   // 121: resourcemanager.EnableDeviceConsumerReq
	(*EnableDeviceConsumerResp)(nil),                  // 122: resourcemanager.EnableDeviceConsumerResp
	(*DeviceInstance)(nil),                            // 123: resourcemanager.DeviceInstance
	nil,                                               // 124: resourcemanager.CreateDeviceConsumerReq.LabelsEntry
	nil,                                               // 125: resourcemanager.Labels.DataEntry
	nil,                                               // 126: resourcemanager.Annotations.DataEntry
	nil,                                               // 127: resourcemanager.ConsumeDesire.LabelsEntry
	nil,                                               // 128: resourcemanager.DeviceConsumer.LabelsEntry
	nil,                                               // 129: resourcemanager.CreateDevicePoolReq.LabelsEntry
	nil,                                               // 130: resourcemanager.CreateDevicePoolReq.AnnotationsEntry
	nil,                                               // 131: resourcemanager.CreateProviderReq.LabelsEntry
	nil,                                               // 132: resourcemanager.DevicePool.LabelsEntry
	nil,                                               // 133: resourcemanager.DevicePool.AnnotationsEntry
	nil,                                               // 134: resourcemanager.DevicePoolAutoScalerOption.SettingsEntry
	nil,                                               // 135: resourcemanager.Device.LabelsEntry
	nil,                                               // 136: resourcemanager.Device.AnnotationsEntry
	nil,                                               // 137: resourcemanager.DeviceRecord.ConsumerLabelsEntry
	nil,                                               // 138: resourcemanager.DeviceRecord.ExtraLabelsEntry
	nil,                                               // 139: resourcemanager.DeviceBill.ConsumerLabelsEntry
	nil,                                               // 140: resourcemanager.Provider.LabelsEntry
	nil,                                               // 141: resourcemanager.CreateResourcePoolReq.LabelsEntry
	nil,                                               // 142: resourcemanager.CreateResourcePoolReq.AnnotationsEntry
	nil,                                               // 143: resourcemanager.ResourcePool.LabelsEntry
	nil,                                               // 144: resourcemanager.ResourcePool.AnnotationsEntry
	nil,                                               // 145: resourcemanager.Resource.LabelsEntry
	nil,                                               // 146: resourcemanager.Resource.AnnotationsEntry
	nil,                                               // 147: resourcemanager.UpdateDeviceReq.LabelsEntry
	nil,                                               // 148: resourcemanager.UpdateDeviceReq.AnnotationsEntry
}
var file_resourcemanager_proto_depIdxs = []int32{
	4,   // 0: resourcemanager.CreateObsCostResp.data:type_name -> resourcemanager.ObsCost
	7,   // 1: resourcemanager.QueryObsBillResp.data:type_name -> resourcemanager.ObsBill
	124, // 2: resourcemanager.CreateDeviceConsumerReq.labels:type_name -> resourcemanager.CreateDeviceConsumerReq.LabelsEntry
	29,  // 3: resourcemanager.CreateDeviceConsumerReq.quotas:type_name -> resourcemanager.ConsumerQuota
	30,  // 4: resourcemanager.CreateDeviceConsumerResp.data:type_name -> resourcemanager.DeviceConsumer
	30,  // 5: resourcemanager.GetDeviceConsumerResp.data:type_name -> resourcemanager.DeviceConsumer
	30,  // 6: resourcemanager.ListDeviceConsumerResp.data:type_name -> resourcemanager.DeviceConsumer
	15,  // 7: resourcemanager.UpdateDeviceConsumerReq.associatedDevicePool:type_name -> resourcemanager.ListString
	16,  // 8: resourcemanager.UpdateDeviceConsumerReq.labels:type_name -> resourcemanager.Labels
	18,  // 9: resourcemanager.UpdateDeviceConsumerReq.quotas:type_name -> resourcemanager.ListQuota
	125, // 10: resourcemanager.Labels.data:type_name -> resourcemanager.Labels.DataEntry
	126, // 11: resourcemanager.Annotations.data:type_name -> resourcemanager.Annotations.DataEntry
	29,  // 12: resourcemanager.ListQuota.data:type_name -> resourcemanager.ConsumerQuota
	30,  // 13: resourcemanager.UpdateDeviceConsumerResp.data:type_name -> resourcemanager.DeviceConsumer
	27,  // 14: resourcemanager.ConsumeDeviceReq.desire:type_name -> resourcemanager.ConsumeDesire
	26,  // 15: resourcemanager.ConsumeDeviceResp.data:type_name -> resourcemanager.RecordData
	26,  // 16: resourcemanager.ReturnDeviceResp.data:type_name -> resourcemanager.RecordData
	28,  // 17: resourcemanager.ConsumeDesire.systemDisk:type_name -> resourcemanager.DeviceDisk
	28,  // 18: resourcemanager.ConsumeDesire.dataDisks:type_name -> resourcemanager.DeviceDisk
	80,  // 19: resourcemanager.ConsumeDesire.security:type_name -> resourcemanager.DeviceSecurity
	81,  // 20: resourcemanager.ConsumeDesire.image:type_name -> resourcemanager.DeviceImage
	82,  // 21: resourcemanager.ConsumeDesire.zone:type_name -> resourcemanager.DeviceZone
	127, // 22: resourcemanager.ConsumeDesire.labels:type_name -> resourcemanager.ConsumeDesire.LabelsEntry
	128, // 23: resourcemanager.DeviceConsumer.labels:type_name -> resourcemanager.DeviceConsumer.LabelsEntry
	29,  // 24: resourcemanager.DeviceConsumer.quotas:type_name -> resourcemanager.ConsumerQuota
	29,  // 25: resourcemanager.DeviceConsumer.usages:type_name -> resourcemanager.ConsumerQuota
	27,  // 26: resourcemanager.CreateDevicePoolReq.baseConfig:type_name -> resourcemanager.ConsumeDesire
	129, // 27: resourcemanager.CreateDevicePoolReq.labels:type_name -> resourcemanager.CreateDevicePoolReq.LabelsEntry
	76,  // 28: resourcemanager.CreateDevicePoolReq.asOption:type_name -> resourcemanager.DevicePoolAutoScalerOption
	130, // 29: resourcemanager.CreateDevicePoolReq.annotations:type_name -> resourcemanager.CreateDevicePoolReq.AnnotationsEntry
	75,  // 30: resourcemanager.CreateDevicePoolResp.data:type_name -> resourcemanager.DevicePool
	75,  // 31: resourcemanager.GetDevicePoolResp.data:type_name -> resourcemanager.DevicePool
	37,  // 32: resourcemanager.GetDevicePoolEventResp.data:type_name -> resourcemanager.DevicePoolEvent
	75,  // 33: resourcemanager.ListDevicePoolResp.data:type_name -> resourcemanager.DevicePool
	27,  // 34: resourcemanager.UpdateDevicePoolReq.baseConfig:type_name -> resourcemanager.ConsumeDesire
	15,  // 35: resourcemanager.UpdateDevicePoolReq.allowedDeviceConsumer:type_name -> resourcemanager.ListString
	16,  // 36: resourcemanager.UpdateDevicePoolReq.labels:type_name -> resourcemanager.Labels
	76,  // 37: resourcemanager.UpdateDevicePoolReq.asOption:type_name -> resourcemanager.DevicePoolAutoScalerOption
	17,  // 38: resourcemanager.UpdateDevicePoolReq.annotations:type_name -> resourcemanager.Annotations
	75,  // 39: resourcemanager.UpdateDevicePoolResp.data:type_name -> resourcemanager.DevicePool
	77,  // 40: resourcemanager.ImportDeviceToDevicePoolReq.devices:type_name -> resourcemanager.Device
	47,  // 41: resourcemanager.ImportDevicesToDevicePoolByBkAssetIDsResp.data:type_name -> resourcemanager.ImportDevicesData
	131, // 42: resourcemanager.CreateProviderReq.labels:type_name -> resourcemanager.CreateProviderReq.LabelsEntry
	85,  // 43: resourcemanager.CreateProviderResp.data:type_name -> resourcemanager.Provider
	85,  // 44: resourcemanager.GetProviderResp.data:type_name -> resourcemanager.Provider
	85,  // 45: resourcemanager.ListProviderResp.data:type_name -> resourcemanager.Provider
	16,  // 46: resourcemanager.UpdateProviderReq.labels:type_name -> resourcemanager.Labels
	85,  // 47: resourcemanager.UpdateProviderResp.data:type_name -> resourcemanager.Provider
	62,  // 48: resourcemanager.QueryProviderOrderResp.data:type_name -> resourcemanager.ProviderOrder
	77,  // 49: resourcemanager.ProviderOrder.devices:type_name -> resourcemanager.Device
	65,  // 50: resourcemanager.QueryProviderNetworkResp.data:type_name -> resourcemanager.ProviderNetwork
	66,  // 51: resourcemanager.ProviderNetwork.subnet:type_name -> resourcemanager.ProviderSubnet
	83,  // 52: resourcemanager.GetDeviceRecordResp.data:type_name -> resourcemanager.DeviceRecord
	83,  // 53: resourcemanager.CreateDeviceRecordReq.data:type_name -> resourcemanager.DeviceRecord
	83,  // 54: resourcemanager.CreateDeviceRecordResp.data:type_name -> resourcemanager.DeviceRecord
	83,  // 55: resourcemanager.ListDeviceRecordResp.data:type_name -> resourcemanager.DeviceRecord
	84,  // 56: resourcemanager.ListDeviceBillResp.data:type_name -> resourcemanager.DeviceBill
	27,  // 57: resourcemanager.DevicePool.baseConfig:type_name -> resourcemanager.ConsumeDesire
	132, // 58: resourcemanager.DevicePool.labels:type_name -> resourcemanager.DevicePool.LabelsEntry
	76,  // 59: resourcemanager.DevicePool.asOption:type_name -> resourcemanager.DevicePoolAutoScalerOption
	133, // 60: resourcemanager.DevicePool.annotations:type_name -> resourcemanager.DevicePool.AnnotationsEntry
	134, // 61: resourcemanager.DevicePoolAutoScalerOption.settings:type_name -> resourcemanager.DevicePoolAutoScalerOption.SettingsEntry
	79,  // 62: resourcemanager.Device.info:type_name -> resourcemanager.DeviceInfo
	135, // 63: resourcemanager.Device.labels:type_name -> resourcemanager.Device.LabelsEntry
	136, // 64: resourcemanager.Device.annotations:type_name -> resourcemanager.Device.AnnotationsEntry
	82,  // 65: resourcemanager.DeviceInfo.zone:type_name -> resourcemanager.DeviceZone
	80,  // 66: resourcemanager.DeviceInfo.security:type_name -> resourcemanager.DeviceSecurity
	81,  // 67: resourcemanager.DeviceInfo.image:type_name -> resourcemanager.DeviceImage
	28,  // 68: resourcemanager.DeviceInfo.systemDisk:type_name -> resourcemanager.DeviceDisk
	28,  // 69: resourcemanager.DeviceInfo.dataDisks:type_name -> resourcemanager.DeviceDisk
	27,  // 70: resourcemanager.DeviceRecord.desires:type_name -> resourcemanager.ConsumeDesire
	137, // 71: resourcemanager.DeviceRecord.consumerLabels:type_name -> resourcemanager.DeviceRecord.ConsumerLabelsEntry
	77,  // 72: resourcemanager.DeviceRecord.deviceDetails:type_name -> resourcemanager.Device
	138, // 73: resourcemanager.DeviceRecord.extraLabels:type_name -> resourcemanager.DeviceRecord.ExtraLabelsEntry
	139, // 74: resourcemanager.DeviceBill.consumerLabels:type_name -> resourcemanager.DeviceBill.ConsumerLabelsEntry
	79,  // 75: resourcemanager.DeviceBill.deviceInfo:type_name -> resourcemanager.DeviceInfo
	140, // 76: resourcemanager.Provider.labels:type_name -> resourcemanager.Provider.LabelsEntry
	141, // 77: resourcemanager.CreateResourcePoolReq.labels:type_name -> resourcemanager.CreateResourcePoolReq.LabelsEntry
	142, // 78: resourcemanager.CreateResourcePoolReq.annotations:type_name -> resourcemanager.CreateResourcePoolReq.AnnotationsEntry
	90,  // 79: resourcemanager.CreateResourcePoolResp.data:type_name -> resourcemanager.ResourcePool
	90,  // 80: resourcemanager.ListResourcePoolResp.data:type_name -> resourcemanager.ResourcePool
	143, // 81: resourcemanager.ResourcePool.labels:type_name -> resourcemanager.ResourcePool.LabelsEntry
	144, // 82: resourcemanager.ResourcePool.annotations:type_name -> resourcemanager.ResourcePool.AnnotationsEntry
	93,  // 83: resourcemanager.ImportResourceReq.data:type_name -> resourcemanager.Resource
	93,  // 84: resourcemanager.ImportResourceResp.data:type_name -> resourcemanager.Resource
	145, // 85: resourcemanager.Resource.labels:type_name -> resourcemanager.Resource.LabelsEntry
	146, // 86: resourcemanager.Resource.annotations:type_name -> resourcemanager.Resource.AnnotationsEntry
	94,  // 87: resourcemanager.Resource.status:type_name -> resourcemanager.ResourceStatus
	93,  // 88: resourcemanager.ListResourceResp.data:type_name -> resourcemanager.Resource
	27,  // 89: resourcemanager.CreateDeviceRecordByPoolReq.desire:type_name -> resourcemanager.ConsumeDesire
	15,  // 90: resourcemanager.UpdateDeviceRecordReq.devices:type_name -> resourcemanager.ListString
	83,  // 91: resourcemanager.UpdateDeviceRecordResp.data:type_name -> resourcemanager.DeviceRecord
	27,  // 92: resourcemanager.CreateDeviceRecordByDevicePoolReq.desire:type_name -> resourcemanager.ConsumeDesire
	83,  // 93: resourcemanager.CreateDeviceRecordByPoolResp.data:type_name -> resourcemanager.DeviceRecord
	83,  // 94: resourcemanager.CreateDeviceRecordByDevicePoolResp.data:type_name -> resourcemanager.DeviceRecord
	77,  // 95: resourcemanager.GetDeviceResp.data:type_name -> resourcemanager.Device
	77,  // 96: resourcemanager.ListDevicesResp.data:type_name -> resourcemanager.Device
	147, // 97: resourcemanager.UpdateDeviceReq.labels:type_name -> resourcemanager.UpdateDeviceReq.LabelsEntry
	79,  // 98: resourcemanager.UpdateDeviceReq.info:type_name -> resourcemanager.DeviceInfo
	148, // 99: resourcemanager.UpdateDeviceReq.annotations:type_name -> resourcemanager.UpdateDeviceReq.AnnotationsEntry
	77,  // 100: resourcemanager.UpdateDeviceResp.data:type_name -> resourcemanager.Device
	123, // 101: resourcemanager.CreateDeviceInstanceResp.data:type_name -> resourcemanager.DeviceInstance
	123, // 102: resourcemanager.UpdateDeviceInstanceResp.data:type_name -> resourcemanager.DeviceInstance
	123, // 103: resourcemanager.ListDeviceInstancesResp.data:type_name -> resourcemanager.DeviceInstance
	30,  // 104: resourcemanager.EnableDeviceConsumerResp.data:type_name -> resourcemanager.DeviceConsumer
	0,   // 105: resourcemanager.ResourceManager.Available:input_type -> resourcemanager.AvailableReq
	8,   // 106: resourcemanager.ResourceManager.CreateDeviceConsumer:input_type -> resourcemanager.CreateDeviceConsumerReq
	10,  // 107: resourcemanager.ResourceManager.GetDeviceConsumer:input_type -> resourcemanager.GetDeviceConsumerReq
	12,  // 108: resourcemanager.ResourceManager.ListDeviceConsumer:input_type -> resourcemanager.ListDeviceConsumerReq
	14,  // 109: resourcemanager.ResourceManager.UpdateDeviceConsumer:input_type -> resourcemanager.UpdateDeviceConsumerReq
	20,  // 110: resourcemanager.ResourceManager.DeleteDeviceConsumer:input_type -> resourcemanager.DeleteDeviceConsumerReq
	22,  // 111: resourcemanager.ResourceManager.ConsumeDevice:input_type -> resourcemanager.ConsumeDeviceReq
	24,  // 112: resourcemanager.ResourceManager.ReturnDevice:input_type -> resourcemanager.ReturnDeviceReq
	31,  // 113: resourcemanager.ResourceManager.CreateDevicePool:input_type -> resourcemanager.CreateDevicePoolReq
	33,  // 114: resourcemanager.ResourceManager.GetDevicePool:input_type -> resourcemanager.GetDevicePoolReq
	35,  // 115: resourcemanager.ResourceManager.GetDevicePoolEvent:input_type -> resourcemanager.GetDevicePoolEventReq
	38,  // 116: resourcemanager.ResourceManager.ListDevicePool:input_type -> resourcemanager.ListDevicePoolReq
	40,  // 117: resourcemanager.ResourceManager.UpdateDevicePool:input_type -> resourcemanager.UpdateDevicePoolReq
	42,  // 118: resourcemanager.ResourceManager.DeleteDevicePool:input_type -> resourcemanager.DeleteDevicePoolReq
	44,  // 119: resourcemanager.ResourceManager.ImportDeviceToDevicePool:input_type -> resourcemanager.ImportDeviceToDevicePoolReq
	45,  // 120: resourcemanager.ResourceManager.ImportDevicesToDevicePoolByBkAssetIDs:input_type -> resourcemanager.ImportDevicesToDevicePoolByBkAssetIDsReq
	48,  // 121: resourcemanager.ResourceManager.ImportDeviceToDevicePoolByBkAssetID:input_type -> resourcemanager.ImportDeviceToDevicePoolByBkAssetIDReq
	73,  // 122: resourcemanager.ResourceManager.ListDeviceBill:input_type -> resourcemanager.ListDeviceBillReq
	67,  // 123: resourcemanager.ResourceManager.GetDeviceRecord:input_type -> resourcemanager.GetDeviceRecordReq
	69,  // 124: resourcemanager.ResourceManager.CreateDeviceRecord:input_type -> resourcemanager.CreateDeviceRecordReq
	71,  // 125: resourcemanager.ResourceManager.ListDeviceRecord:input_type -> resourcemanager.ListDeviceRecordReq
	100, // 126: resourcemanager.ResourceManager.UpdateDeviceRecord:input_type -> resourcemanager.UpdateDeviceRecordReq
	50,  // 127: resourcemanager.ResourceManager.CreateProvider:input_type -> resourcemanager.CreateProviderReq
	52,  // 128: resourcemanager.ResourceManager.GetProvider:input_type -> resourcemanager.GetProviderReq
	54,  // 129: resourcemanager.ResourceManager.ListProvider:input_type -> resourcemanager.ListProviderReq
	56,  // 130: resourcemanager.ResourceManager.UpdateProvider:input_type -> resourcemanager.UpdateProviderReq
	58,  // 131: resourcemanager.ResourceManager.DeleteProvider:input_type -> resourcemanager.DeleteProviderReq
	60,  // 132: resourcemanager.ResourceManager.QueryProviderOrder:input_type -> resourcemanager.QueryProviderOrderReq
	63,  // 133: resourcemanager.ResourceManager.QueryProviderNetwork:input_type -> resourcemanager.QueryProviderNetworkReq
	5,   // 134: resourcemanager.ResourceManager.QueryObsBill:input_type -> resourcemanager.QueryObsBillReq
	2,   // 135: resourcemanager.ResourceManager.CreateObsCost:input_type -> resourcemanager.CreateObsCostReq
	86,  // 136: resourcemanager.ResourceManager.CreateResourcePool:input_type -> resourcemanager.CreateResourcePoolReq
	88,  // 137: resourcemanager.ResourceManager.ListResourcePool:input_type -> resourcemanager.ListResourcePoolReq
	91,  // 138: resourcemanager.ResourceManager.ImportResource:input_type -> resourcemanager.ImportResourceReq
	95,  // 139: resourcemanager.ResourceManager.ListResource:input_type -> resourcemanager.ListResourceReq
	96,  // 140: resourcemanager.ResourceManager.ListDeviceRecordByPool:input_type -> resourcemanager.ListDeviceRecordByPoolReq
	99,  // 141: resourcemanager.ResourceManager.CreateDeviceRecordByPool:input_type -> resourcemanager.CreateDeviceRecordByPoolReq
	97,  // 142: resourcemanager.ResourceManager.ListDeviceRecordByDevicePool:input_type -> resourcemanager.ListDeviceRecordByDevicePoolReq
	102, // 143: resourcemanager.ResourceManager.CreateDeviceRecordByDevicePool:input_type -> resourcemanager.CreateDeviceRecordByDevicePoolReq
	113, // 144: resourcemanager.ResourceManager.CreateDeviceInstance:input_type -> resourcemanager.CreateDeviceInstanceReq
	115, // 145: resourcemanager.ResourceManager.UpdateDeviceInstance:input_type -> resourcemanager.UpdateDeviceInstanceReq
	117, // 146: resourcemanager.ResourceManager.DeleteDeviceInstance:input_type -> resourcemanager.DeleteDeviceInstanceReq
	119, // 147: resourcemanager.ResourceManager.ListDeviceInstances:input_type -> resourcemanager.ListDeviceInstancesReq
	121, // 148: resourcemanager.ResourceManager.EnableDeviceConsumer:input_type -> resourcemanager.EnableDeviceConsumerReq
	105, // 149: resourcemanager.ResourceManager.GetDevice:input_type -> resourcemanager.GetDeviceReq
	107, // 150: resourcemanager.ResourceManager.ListDevices:input_type -> resourcemanager.ListDevicesReq
	109, // 151: resourcemanager.ResourceManager.UpdateDevice:input_type -> resourcemanager.UpdateDeviceReq
	111, // 152: resourcemanager.ResourceManager.DeleteDevices:input_type -> resourcemanager.DeleteDevicesReq
	1,   // 153: resourcemanager.ResourceManager.Available:output_type -> resourcemanager.AvailableResp
	9,   // 154: resourcemanager.ResourceManager.CreateDeviceConsumer:output_type -> resourcemanager.CreateDeviceConsumerResp
	11,  // 155: resourcemanager.ResourceManager.GetDeviceConsumer:output_type -> resourcemanager.GetDeviceConsumerResp
	13,  // 156: resourcemanager.ResourceManager.ListDeviceConsumer:output_type -> resourcemanager.ListDeviceConsumerResp
	19,  // 157: resourcemanager.ResourceManager.UpdateDeviceConsumer:output_type -> resourcemanager.UpdateDeviceConsumerResp
	21,  // 158: resourcemanager.ResourceManager.DeleteDeviceConsumer:output_type -> resourcemanager.DeleteDeviceConsumerResp
	23,  // 159: resourcemanager.ResourceManager.ConsumeDevice:output_type -> resourcemanager.ConsumeDeviceResp
	25,  // 160: resourcemanager.ResourceManager.ReturnDevice:output_type -> resourcemanager.ReturnDeviceResp
	32,  // 161: resourcemanager.ResourceManager.CreateDevicePool:output_type -> resourcemanager.CreateDevicePoolResp
	34,  // 162: resourcemanager.ResourceManager.GetDevicePool:output_type -> resourcemanager.GetDevicePoolResp
	36,  // 163: resourcemanager.ResourceManager.GetDevicePoolEvent:output_type -> resourcemanager.GetDevicePoolEventResp
	39,  // 164: resourcemanager.ResourceManager.ListDevicePool:output_type -> resourcemanager.ListDevicePoolResp
	41,  // 165: resourcemanager.ResourceManager.UpdateDevicePool:output_type -> resourcemanager.UpdateDevicePoolResp
	43,  // 166: resourcemanager.ResourceManager.DeleteDevicePool:output_type -> resourcemanager.DeleteDevicePoolResp
	49,  // 167: resourcemanager.ResourceManager.ImportDeviceToDevicePool:output_type -> resourcemanager.ImportDeviceToDevicePoolResp
	46,  // 168: resourcemanager.ResourceManager.ImportDevicesToDevicePoolByBkAssetIDs:output_type -> resourcemanager.ImportDevicesToDevicePoolByBkAssetIDsResp
	49,  // 169: resourcemanager.ResourceManager.ImportDeviceToDevicePoolByBkAssetID:output_type -> resourcemanager.ImportDeviceToDevicePoolResp
	74,  // 170: resourcemanager.ResourceManager.ListDeviceBill:output_type -> resourcemanager.ListDeviceBillResp
	68,  // 171: resourcemanager.ResourceManager.GetDeviceRecord:output_type -> resourcemanager.GetDeviceRecordResp
	70,  // 172: resourcemanager.ResourceManager.CreateDeviceRecord:output_type -> resourcemanager.CreateDeviceRecordResp
	72,  // 173: resourcemanager.ResourceManager.ListDeviceRecord:output_type -> resourcemanager.ListDeviceRecordResp
	101, // 174: resourcemanager.ResourceManager.UpdateDeviceRecord:output_type -> resourcemanager.UpdateDeviceRecordResp
	51,  // 175: resourcemanager.ResourceManager.CreateProvider:output_type -> resourcemanager.CreateProviderResp
	53,  // 176: resourcemanager.ResourceManager.GetProvider:output_type -> resourcemanager.GetProviderResp
	55,  // 177: resourcemanager.ResourceManager.ListProvider:output_type -> resourcemanager.ListProviderResp
	57,  // 178: resourcemanager.ResourceManager.UpdateProvider:output_type -> resourcemanager.UpdateProviderResp
	59,  // 179: resourcemanager.ResourceManager.DeleteProvider:output_type -> resourcemanager.DeleteProviderResp
	61,  // 180: resourcemanager.ResourceManager.QueryProviderOrder:output_type -> resourcemanager.QueryProviderOrderResp
	64,  // 181: resourcemanager.ResourceManager.QueryProviderNetwork:output_type -> resourcemanager.QueryProviderNetworkResp
	6,   // 182: resourcemanager.ResourceManager.QueryObsBill:output_type -> resourcemanager.QueryObsBillResp
	3,   // 183: resourcemanager.ResourceManager.CreateObsCost:output_type -> resourcemanager.CreateObsCostResp
	87,  // 184: resourcemanager.ResourceManager.CreateResourcePool:output_type -> resourcemanager.CreateResourcePoolResp
	89,  // 185: resourcemanager.ResourceManager.ListResourcePool:output_type -> resourcemanager.ListResourcePoolResp
	92,  // 186: resourcemanager.ResourceManager.ImportResource:output_type -> resourcemanager.ImportResourceResp
	98,  // 187: resourcemanager.ResourceManager.ListResource:output_type -> resourcemanager.ListResourceResp
	72,  // 188: resourcemanager.ResourceManager.ListDeviceRecordByPool:output_type -> resourcemanager.ListDeviceRecordResp
	103, // 189: resourcemanager.ResourceManager.CreateDeviceRecordByPool:output_type -> resourcemanager.CreateDeviceRecordByPoolResp
	72,  // 190: resourcemanager.ResourceManager.ListDeviceRecordByDevicePool:output_type -> resourcemanager.ListDeviceRecordResp
	104, // 191: resourcemanager.ResourceManager.CreateDeviceRecordByDevicePool:output_type -> resourcemanager.CreateDeviceRecordByDevicePoolResp
	114, // 192: resourcemanager.ResourceManager.CreateDeviceInstance:output_type -> resourcemanager.CreateDeviceInstanceResp
	116, // 193: resourcemanager.ResourceManager.UpdateDeviceInstance:output_type -> resourcemanager.UpdateDeviceInstanceResp
	118, // 194: resourcemanager.ResourceManager.DeleteDeviceInstance:output_type -> resourcemanager.DeleteDeviceInstanceResp
	120, // 195: resourcemanager.ResourceManager.ListDeviceInstances:output_type -> resourcemanager.ListDeviceInstancesResp
	122, // 196: resourcemanager.ResourceManager.EnableDeviceConsumer:output_type -> resourcemanager.EnableDeviceConsumerResp
	106, // 197: resourcemanager.ResourceManager.GetDevice:output_type -> resourcemanager.GetDeviceResp
	108, // 198: resourcemanager.ResourceManager.ListDevices:output_type -> resourcemanager.ListDevicesResp
	110, // 199: resourcemanager.ResourceManager.UpdateDevice:output_type -> resourcemanager.UpdateDeviceResp
	112, // 200: resourcemanager.ResourceManager.DeleteDevices:output_type -> resourcemanager.DeleteDevicesResp
	153, // [153:201] is the sub-list for method output_type
	105, // [105:153] is the sub-list for method input_type
	105, // [105:105] is the sub-list for extension type_name
	105, // [105:105] is the sub-list for extension extendee
	0,   // [0:105] is the sub-list for field type_name
}

func init() { file_resourcemanager_proto_init() }
func file_resourcemanager_proto_init() {
	if File_resourcemanager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_resourcemanager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateObsCostReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateObsCostResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObsCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryObsBillReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryObsBillResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObsBill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceConsumerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceConsumerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceConsumerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceConsumerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceConsumerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceConsumerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceConsumerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Labels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQuota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceConsumerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceConsumerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceConsumerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeDeviceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeDeviceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnDeviceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnDeviceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeDesire); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumerQuota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConsumer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDevicePoolReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDevicePoolResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDevicePoolReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDevicePoolResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDevicePoolEventReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDevicePoolEventResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevicePoolEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDevicePoolReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDevicePoolResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDevicePoolReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDevicePoolResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDevicePoolReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDevicePoolResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportDeviceToDevicePoolReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportDevicesToDevicePoolByBkAssetIDsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportDevicesToDevicePoolByBkAssetIDsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportDevicesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportDeviceToDevicePoolByBkAssetIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportDeviceToDevicePoolResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProviderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProviderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProviderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProviderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProviderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProviderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProviderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProviderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProviderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProviderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProviderOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProviderOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProviderNetworkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProviderNetworkResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderSubnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceBillReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceBillResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevicePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevicePoolAutoScalerOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSecurity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceZone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceBill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResourcePoolReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResourcePoolResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResourcePoolReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResourcePoolResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportResourceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportResourceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResourceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceRecordByPoolReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceRecordByDevicePoolReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResourceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceRecordByPoolReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceRecordByDevicePoolReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceRecordByPoolResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceRecordByDevicePoolResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDevicesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDevicesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDevicesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDevicesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceInstanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceInstanceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceInstanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceInstanceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceInstanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceInstanceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceInstancesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceInstancesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableDeviceConsumerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableDeviceConsumerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resourcemanager_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_resourcemanager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   149,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_resourcemanager_proto_goTypes,
		DependencyIndexes: file_resourcemanager_proto_depIdxs,
		MessageInfos:      file_resourcemanager_proto_msgTypes,
	}.Build()
	File_resourcemanager_proto = out.File
	file_resourcemanager_proto_rawDesc = nil
	file_resourcemanager_proto_goTypes = nil
	file_resourcemanager_proto_depIdxs = nil
}
