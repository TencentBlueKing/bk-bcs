// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: clustermanager.proto

package clustermanager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClusterManagerClient is the client API for ClusterManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterManagerClient interface {
	//* cluster management
	CreateCluster(ctx context.Context, in *CreateClusterReq, opts ...grpc.CallOption) (*CreateClusterResp, error)
	RetryCreateClusterTask(ctx context.Context, in *RetryCreateClusterReq, opts ...grpc.CallOption) (*RetryCreateClusterResp, error)
	CheckCloudKubeConfig(ctx context.Context, in *KubeConfigReq, opts ...grpc.CallOption) (*KubeConfigResp, error)
	CheckCloudKubeConfigConnect(ctx context.Context, in *KubeConfigConnectReq, opts ...grpc.CallOption) (*KubeConfigConnectResp, error)
	ImportCluster(ctx context.Context, in *ImportClusterReq, opts ...grpc.CallOption) (*ImportClusterResp, error)
	UpdateCluster(ctx context.Context, in *UpdateClusterReq, opts ...grpc.CallOption) (*UpdateClusterResp, error)
	AddNodesToCluster(ctx context.Context, in *AddNodesRequest, opts ...grpc.CallOption) (*AddNodesResponse, error)
	DeleteNodesFromCluster(ctx context.Context, in *DeleteNodesRequest, opts ...grpc.CallOption) (*DeleteNodesResponse, error)
	BatchDeleteNodesFromCluster(ctx context.Context, in *BatchDeleteClusterNodesRequest, opts ...grpc.CallOption) (*BatchDeleteClusterNodesResponse, error)
	GetExternalNodeScriptByGroupID(ctx context.Context, in *GetExternalNodeScriptRequest, opts ...grpc.CallOption) (*GetExternalNodeScriptResponse, error)
	ListNodesInCluster(ctx context.Context, in *ListNodesInClusterRequest, opts ...grpc.CallOption) (*ListNodesInClusterResponse, error)
	ListMastersInCluster(ctx context.Context, in *ListMastersInClusterRequest, opts ...grpc.CallOption) (*ListMastersInClusterResponse, error)
	DeleteCluster(ctx context.Context, in *DeleteClusterReq, opts ...grpc.CallOption) (*DeleteClusterResp, error)
	GetCluster(ctx context.Context, in *GetClusterReq, opts ...grpc.CallOption) (*GetClusterResp, error)
	ListProjectCluster(ctx context.Context, in *ListProjectClusterReq, opts ...grpc.CallOption) (*ListProjectClusterResp, error)
	ListCluster(ctx context.Context, in *ListClusterReq, opts ...grpc.CallOption) (*ListClusterResp, error)
	ListCommonCluster(ctx context.Context, in *ListCommonClusterReq, opts ...grpc.CallOption) (*ListCommonClusterResp, error)
	CreateVirtualCluster(ctx context.Context, in *CreateVirtualClusterReq, opts ...grpc.CallOption) (*CreateVirtualClusterResp, error)
	DeleteVirtualCluster(ctx context.Context, in *DeleteVirtualClusterReq, opts ...grpc.CallOption) (*DeleteVirtualClusterResp, error)
	UpdateVirtualClusterQuota(ctx context.Context, in *UpdateVirtualClusterQuotaReq, opts ...grpc.CallOption) (*UpdateVirtualClusterQuotaResp, error)
	//* node management
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*GetNodeInfoResponse, error)
	RecordNodeInfo(ctx context.Context, in *RecordNodeInfoRequest, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error)
	CheckNodeInCluster(ctx context.Context, in *CheckNodesRequest, opts ...grpc.CallOption) (*CheckNodesResponse, error)
	CordonNode(ctx context.Context, in *CordonNodeRequest, opts ...grpc.CallOption) (*CordonNodeResponse, error)
	UnCordonNode(ctx context.Context, in *UnCordonNodeRequest, opts ...grpc.CallOption) (*UnCordonNodeResponse, error)
	DrainNode(ctx context.Context, in *DrainNodeRequest, opts ...grpc.CallOption) (*DrainNodeResponse, error)
	UpdateNodeLabels(ctx context.Context, in *UpdateNodeLabelsRequest, opts ...grpc.CallOption) (*UpdateNodeLabelsResponse, error)
	UpdateNodeAnnotations(ctx context.Context, in *UpdateNodeAnnotationsRequest, opts ...grpc.CallOption) (*UpdateNodeAnnotationsResponse, error)
	UpdateNodeTaints(ctx context.Context, in *UpdateNodeTaintsRequest, opts ...grpc.CallOption) (*UpdateNodeTaintsResponse, error)
	//* cluster credential management
	GetClusterCredential(ctx context.Context, in *GetClusterCredentialReq, opts ...grpc.CallOption) (*GetClusterCredentialResp, error)
	UpdateClusterCredential(ctx context.Context, in *UpdateClusterCredentialReq, opts ...grpc.CallOption) (*UpdateClusterCredentialResp, error)
	DeleteClusterCredential(ctx context.Context, in *DeleteClusterCredentialReq, opts ...grpc.CallOption) (*DeleteClusterCredentialResp, error)
	ListClusterCredential(ctx context.Context, in *ListClusterCredentialReq, opts ...grpc.CallOption) (*ListClusterCredentialResp, error)
	//* federation cluster management
	InitFederationCluster(ctx context.Context, in *InitFederationClusterReq, opts ...grpc.CallOption) (*InitFederationClusterResp, error)
	AddFederatedCluster(ctx context.Context, in *AddFederatedClusterReq, opts ...grpc.CallOption) (*AddFederatedClusterResp, error)
	//* Cloud information management *
	CreateCloud(ctx context.Context, in *CreateCloudRequest, opts ...grpc.CallOption) (*CreateCloudResponse, error)
	UpdateCloud(ctx context.Context, in *UpdateCloudRequest, opts ...grpc.CallOption) (*UpdateCloudResponse, error)
	DeleteCloud(ctx context.Context, in *DeleteCloudRequest, opts ...grpc.CallOption) (*DeleteCloudResponse, error)
	GetCloud(ctx context.Context, in *GetCloudRequest, opts ...grpc.CallOption) (*GetCloudResponse, error)
	ListCloud(ctx context.Context, in *ListCloudRequest, opts ...grpc.CallOption) (*ListCloudResponse, error)
	//* Cloud VPC information management *
	CreateCloudVPC(ctx context.Context, in *CreateCloudVPCRequest, opts ...grpc.CallOption) (*CreateCloudVPCResponse, error)
	UpdateCloudVPC(ctx context.Context, in *UpdateCloudVPCRequest, opts ...grpc.CallOption) (*UpdateCloudVPCResponse, error)
	DeleteCloudVPC(ctx context.Context, in *DeleteCloudVPCRequest, opts ...grpc.CallOption) (*DeleteCloudVPCResponse, error)
	ListCloudVPC(ctx context.Context, in *ListCloudVPCRequest, opts ...grpc.CallOption) (*ListCloudVPCResponse, error)
	ListCloudRegions(ctx context.Context, in *ListCloudRegionsRequest, opts ...grpc.CallOption) (*ListCloudRegionsResponse, error)
	GetVPCCidr(ctx context.Context, in *GetVPCCidrRequest, opts ...grpc.CallOption) (*GetVPCCidrResponse, error)
	//* NodeGroup information management *
	CreateNodeGroup(ctx context.Context, in *CreateNodeGroupRequest, opts ...grpc.CallOption) (*CreateNodeGroupResponse, error)
	UpdateNodeGroup(ctx context.Context, in *UpdateNodeGroupRequest, opts ...grpc.CallOption) (*UpdateNodeGroupResponse, error)
	DeleteNodeGroup(ctx context.Context, in *DeleteNodeGroupRequest, opts ...grpc.CallOption) (*DeleteNodeGroupResponse, error)
	GetNodeGroup(ctx context.Context, in *GetNodeGroupRequest, opts ...grpc.CallOption) (*GetNodeGroupResponse, error)
	ListClusterNodeGroup(ctx context.Context, in *ListClusterNodeGroupRequest, opts ...grpc.CallOption) (*ListClusterNodeGroupResponse, error)
	ListNodeGroup(ctx context.Context, in *ListNodeGroupRequest, opts ...grpc.CallOption) (*ListNodeGroupResponse, error)
	MoveNodesToGroup(ctx context.Context, in *MoveNodesToGroupRequest, opts ...grpc.CallOption) (*MoveNodesToGroupResponse, error)
	RemoveNodesFromGroup(ctx context.Context, in *RemoveNodesFromGroupRequest, opts ...grpc.CallOption) (*RemoveNodesFromGroupResponse, error)
	CleanNodesInGroup(ctx context.Context, in *CleanNodesInGroupRequest, opts ...grpc.CallOption) (*CleanNodesInGroupResponse, error)
	CleanNodesInGroupV2(ctx context.Context, in *CleanNodesInGroupV2Request, opts ...grpc.CallOption) (*CleanNodesInGroupV2Response, error)
	ListNodesInGroup(ctx context.Context, in *GetNodeGroupRequest, opts ...grpc.CallOption) (*ListNodesInGroupResponse, error)
	ListNodesInGroupV2(ctx context.Context, in *ListNodesInGroupV2Request, opts ...grpc.CallOption) (*ListNodesInGroupV2Response, error)
	UpdateGroupDesiredNode(ctx context.Context, in *UpdateGroupDesiredNodeRequest, opts ...grpc.CallOption) (*UpdateGroupDesiredNodeResponse, error)
	UpdateGroupDesiredSize(ctx context.Context, in *UpdateGroupDesiredSizeRequest, opts ...grpc.CallOption) (*UpdateGroupDesiredSizeResponse, error)
	UpdateGroupMinMaxSize(ctx context.Context, in *UpdateGroupMinMaxSizeRequest, opts ...grpc.CallOption) (*UpdateGroupMinMaxSizeResponse, error)
	EnableNodeGroupAutoScale(ctx context.Context, in *EnableNodeGroupAutoScaleRequest, opts ...grpc.CallOption) (*EnableNodeGroupAutoScaleResponse, error)
	DisableNodeGroupAutoScale(ctx context.Context, in *DisableNodeGroupAutoScaleRequest, opts ...grpc.CallOption) (*DisableNodeGroupAutoScaleResponse, error)
	//* Task information management *
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	RetryTask(ctx context.Context, in *RetryTaskRequest, opts ...grpc.CallOption) (*RetryTaskResponse, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
	ListTask(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*ListTaskResponse, error)
	//* ClusterAutoScalingOption information management *
	CreateAutoScalingOption(ctx context.Context, in *CreateAutoScalingOptionRequest, opts ...grpc.CallOption) (*CreateAutoScalingOptionResponse, error)
	UpdateAutoScalingOption(ctx context.Context, in *UpdateAutoScalingOptionRequest, opts ...grpc.CallOption) (*UpdateAutoScalingOptionResponse, error)
	DeleteAutoScalingOption(ctx context.Context, in *DeleteAutoScalingOptionRequest, opts ...grpc.CallOption) (*DeleteAutoScalingOptionResponse, error)
	GetAutoScalingOption(ctx context.Context, in *GetAutoScalingOptionRequest, opts ...grpc.CallOption) (*GetAutoScalingOptionResponse, error)
	ListAutoScalingOption(ctx context.Context, in *ListAutoScalingOptionRequest, opts ...grpc.CallOption) (*ListAutoScalingOptionResponse, error)
	UpdateAutoScalingStatus(ctx context.Context, in *UpdateAutoScalingStatusRequest, opts ...grpc.CallOption) (*UpdateAutoScalingStatusResponse, error)
	SyncAutoScalingOption(ctx context.Context, in *SyncAutoScalingOptionRequest, opts ...grpc.CallOption) (*SyncAutoScalingOptionResponse, error)
	// Cloud NodeTemplate info management
	CreateNodeTemplate(ctx context.Context, in *CreateNodeTemplateRequest, opts ...grpc.CallOption) (*CreateNodeTemplateResponse, error)
	UpdateNodeTemplate(ctx context.Context, in *UpdateNodeTemplateRequest, opts ...grpc.CallOption) (*UpdateNodeTemplateResponse, error)
	DeleteNodeTemplate(ctx context.Context, in *DeleteNodeTemplateRequest, opts ...grpc.CallOption) (*DeleteNodeTemplateResponse, error)
	ListNodeTemplate(ctx context.Context, in *ListNodeTemplateRequest, opts ...grpc.CallOption) (*ListNodeTemplateResponse, error)
	GetNodeTemplate(ctx context.Context, in *GetNodeTemplateRequest, opts ...grpc.CallOption) (*GetNodeTemplateResponse, error)
	// Cloud Account information management
	CreateCloudAccount(ctx context.Context, in *CreateCloudAccountRequest, opts ...grpc.CallOption) (*CreateCloudAccountResponse, error)
	UpdateCloudAccount(ctx context.Context, in *UpdateCloudAccountRequest, opts ...grpc.CallOption) (*UpdateCloudAccountResponse, error)
	MigrateCloudAccount(ctx context.Context, in *MigrateCloudAccountRequest, opts ...grpc.CallOption) (*MigrateCloudAccountResponse, error)
	DeleteCloudAccount(ctx context.Context, in *DeleteCloudAccountRequest, opts ...grpc.CallOption) (*DeleteCloudAccountResponse, error)
	ListCloudAccount(ctx context.Context, in *ListCloudAccountRequest, opts ...grpc.CallOption) (*ListCloudAccountResponse, error)
	ListCloudAccountToPerm(ctx context.Context, in *ListCloudAccountPermRequest, opts ...grpc.CallOption) (*ListCloudAccountPermResponse, error)
	VerifyCloudAccount(ctx context.Context, in *VerifyCloudAccountRequest, opts ...grpc.CallOption) (*VerifyCloudAccountResponse, error)
	// Cloud Resource management
	GetCloudRegions(ctx context.Context, in *GetCloudRegionsRequest, opts ...grpc.CallOption) (*GetCloudRegionsResponse, error)
	GetCloudRegionZones(ctx context.Context, in *GetCloudRegionZonesRequest, opts ...grpc.CallOption) (*GetCloudRegionZonesResponse, error)
	ListCloudRegionCluster(ctx context.Context, in *ListCloudRegionClusterRequest, opts ...grpc.CallOption) (*ListCloudRegionClusterResponse, error)
	ListCloudSubnets(ctx context.Context, in *ListCloudSubnetsRequest, opts ...grpc.CallOption) (*ListCloudSubnetsResponse, error)
	ListCloudSecurityGroups(ctx context.Context, in *ListCloudSecurityGroupsRequest, opts ...grpc.CallOption) (*ListCloudSecurityGroupsResponse, error)
	ListKeypairs(ctx context.Context, in *ListKeyPairsRequest, opts ...grpc.CallOption) (*ListKeyPairsResponse, error)
	ListCloudInstanceTypes(ctx context.Context, in *ListCloudInstanceTypeRequest, opts ...grpc.CallOption) (*ListCloudInstanceTypeResponse, error)
	ListCloudOsImage(ctx context.Context, in *ListCloudOsImageRequest, opts ...grpc.CallOption) (*ListCloudOsImageResponse, error)
	ListCloudInstances(ctx context.Context, in *ListCloudInstancesRequest, opts ...grpc.CallOption) (*ListCloudInstancesResponse, error)
	GetCloudAccountType(ctx context.Context, in *GetCloudAccountTypeRequest, opts ...grpc.CallOption) (*GetCloudAccountTypeResponse, error)
	GetCloudBandwidthPackages(ctx context.Context, in *GetCloudBandwidthPackagesRequest, opts ...grpc.CallOption) (*GetCloudBandwidthPackagesResponse, error)
	// Operation logs
	ListOperationLogs(ctx context.Context, in *ListOperationLogsRequest, opts ...grpc.CallOption) (*ListOperationLogsResponse, error)
	// ** ResourceSchema **
	// ListResourceSchema
	ListResourceSchema(ctx context.Context, in *ListResourceSchemaRequest, opts ...grpc.CallOption) (*CommonListResp, error)
	// GetResourceSchema
	GetResourceSchema(ctx context.Context, in *GetResourceSchemaRequest, opts ...grpc.CallOption) (*CommonResp, error)
	// Perm interface
	QueryPermByActionID(ctx context.Context, in *QueryPermByActionIDRequest, opts ...grpc.CallOption) (*QueryPermByActionIDResponse, error)
	// thirdParty interface(cmdb/bksops等)
	ListBKCloud(ctx context.Context, in *ListBKCloudRequest, opts ...grpc.CallOption) (*CommonListResp, error)
	ListCCTopology(ctx context.Context, in *ListCCTopologyRequest, opts ...grpc.CallOption) (*CommonResp, error)
	GetBkSopsTemplateList(ctx context.Context, in *GetBkSopsTemplateListRequest, opts ...grpc.CallOption) (*GetBkSopsTemplateListResponse, error)
	GetBkSopsTemplateInfo(ctx context.Context, in *GetBkSopsTemplateInfoRequest, opts ...grpc.CallOption) (*GetBkSopsTemplateInfoResponse, error)
	GetInnerTemplateValues(ctx context.Context, in *GetInnerTemplateValuesRequest, opts ...grpc.CallOption) (*GetInnerTemplateValuesResponse, error)
	DebugBkSopsTask(ctx context.Context, in *DebugBkSopsTaskRequest, opts ...grpc.CallOption) (*DebugBkSopsTaskResponse, error)
	// IP selector interface
	// 批量获取多个配置项, 返回配置项内容map
	GetBatchCustomSetting(ctx context.Context, in *GetBatchCustomSettingRequest, opts ...grpc.CallOption) (*GetBatchCustomSettingResponse, error)
	// 批量获取含各节点主机数量的拓扑树
	GetBizTopologyHost(ctx context.Context, in *GetBizTopologyHostRequest, opts ...grpc.CallOption) (*GetBizTopologyHostResponse, error)
	// 根据多个拓扑节点与搜索条件批量分页查询所包含的主机信息(当前仅支持业务拓扑节点)
	GetTopologyNodes(ctx context.Context, in *GetTopologyNodesRequest, opts ...grpc.CallOption) (*GetTopologyNodesResponse, error)
	// 根据多个拓扑节点与搜索条件批量分页查询所包含的主机ID，用于IP选择器全选（当前仅支持业务拓扑节点，业务集仅支持传入业务集根节点）
	GetTopologyHostIdsNodes(ctx context.Context, in *GetTopologyHostIdsNodesRequest, opts ...grpc.CallOption) (*GetTopologyHostIdsNodesResponse, error)
	// 根据主机IDs获取机器详情信息
	GetHostsDetails(ctx context.Context, in *GetHostsDetailsRequest, opts ...grpc.CallOption) (*GetHostsDetailsResponse, error)
	// 根据用户手动输入的IP/IPv6/主机名/hostId等关键字信息获取真实存在的机器信息
	GetScopeHostCheck(ctx context.Context, in *GetScopeHostCheckRequest, opts ...grpc.CallOption) (*GetScopeHostCheckResponse, error)
	// Cloud module flag management
	CreateCloudModuleFlag(ctx context.Context, in *CreateCloudModuleFlagRequest, opts ...grpc.CallOption) (*CreateCloudModuleFlagResponse, error)
	UpdateCloudModuleFlag(ctx context.Context, in *UpdateCloudModuleFlagRequest, opts ...grpc.CallOption) (*UpdateCloudModuleFlagResponse, error)
	DeleteCloudModuleFlag(ctx context.Context, in *DeleteCloudModuleFlagRequest, opts ...grpc.CallOption) (*DeleteCloudModuleFlagResponse, error)
	ListCloudModuleFlag(ctx context.Context, in *ListCloudModuleFlagRequest, opts ...grpc.CallOption) (*ListCloudModuleFlagResponse, error)
	// cluster manager health interface
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type clusterManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterManagerClient(cc grpc.ClientConnInterface) ClusterManagerClient {
	return &clusterManagerClient{cc}
}

func (c *clusterManagerClient) CreateCluster(ctx context.Context, in *CreateClusterReq, opts ...grpc.CallOption) (*CreateClusterResp, error) {
	out := new(CreateClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CreateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) RetryCreateClusterTask(ctx context.Context, in *RetryCreateClusterReq, opts ...grpc.CallOption) (*RetryCreateClusterResp, error) {
	out := new(RetryCreateClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/RetryCreateClusterTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CheckCloudKubeConfig(ctx context.Context, in *KubeConfigReq, opts ...grpc.CallOption) (*KubeConfigResp, error) {
	out := new(KubeConfigResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CheckCloudKubeConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CheckCloudKubeConfigConnect(ctx context.Context, in *KubeConfigConnectReq, opts ...grpc.CallOption) (*KubeConfigConnectResp, error) {
	out := new(KubeConfigConnectResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CheckCloudKubeConfigConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ImportCluster(ctx context.Context, in *ImportClusterReq, opts ...grpc.CallOption) (*ImportClusterResp, error) {
	out := new(ImportClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ImportCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateCluster(ctx context.Context, in *UpdateClusterReq, opts ...grpc.CallOption) (*UpdateClusterResp, error) {
	out := new(UpdateClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) AddNodesToCluster(ctx context.Context, in *AddNodesRequest, opts ...grpc.CallOption) (*AddNodesResponse, error) {
	out := new(AddNodesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/AddNodesToCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteNodesFromCluster(ctx context.Context, in *DeleteNodesRequest, opts ...grpc.CallOption) (*DeleteNodesResponse, error) {
	out := new(DeleteNodesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteNodesFromCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) BatchDeleteNodesFromCluster(ctx context.Context, in *BatchDeleteClusterNodesRequest, opts ...grpc.CallOption) (*BatchDeleteClusterNodesResponse, error) {
	out := new(BatchDeleteClusterNodesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/BatchDeleteNodesFromCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetExternalNodeScriptByGroupID(ctx context.Context, in *GetExternalNodeScriptRequest, opts ...grpc.CallOption) (*GetExternalNodeScriptResponse, error) {
	out := new(GetExternalNodeScriptResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetExternalNodeScriptByGroupID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListNodesInCluster(ctx context.Context, in *ListNodesInClusterRequest, opts ...grpc.CallOption) (*ListNodesInClusterResponse, error) {
	out := new(ListNodesInClusterResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListNodesInCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListMastersInCluster(ctx context.Context, in *ListMastersInClusterRequest, opts ...grpc.CallOption) (*ListMastersInClusterResponse, error) {
	out := new(ListMastersInClusterResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListMastersInCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteCluster(ctx context.Context, in *DeleteClusterReq, opts ...grpc.CallOption) (*DeleteClusterResp, error) {
	out := new(DeleteClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetCluster(ctx context.Context, in *GetClusterReq, opts ...grpc.CallOption) (*GetClusterResp, error) {
	out := new(GetClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListProjectCluster(ctx context.Context, in *ListProjectClusterReq, opts ...grpc.CallOption) (*ListProjectClusterResp, error) {
	out := new(ListProjectClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListProjectCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCluster(ctx context.Context, in *ListClusterReq, opts ...grpc.CallOption) (*ListClusterResp, error) {
	out := new(ListClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCommonCluster(ctx context.Context, in *ListCommonClusterReq, opts ...grpc.CallOption) (*ListCommonClusterResp, error) {
	out := new(ListCommonClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCommonCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CreateVirtualCluster(ctx context.Context, in *CreateVirtualClusterReq, opts ...grpc.CallOption) (*CreateVirtualClusterResp, error) {
	out := new(CreateVirtualClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CreateVirtualCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteVirtualCluster(ctx context.Context, in *DeleteVirtualClusterReq, opts ...grpc.CallOption) (*DeleteVirtualClusterResp, error) {
	out := new(DeleteVirtualClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteVirtualCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateVirtualClusterQuota(ctx context.Context, in *UpdateVirtualClusterQuotaReq, opts ...grpc.CallOption) (*UpdateVirtualClusterQuotaResp, error) {
	out := new(UpdateVirtualClusterQuotaResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateVirtualClusterQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*GetNodeInfoResponse, error) {
	out := new(GetNodeInfoResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetNodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) RecordNodeInfo(ctx context.Context, in *RecordNodeInfoRequest, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/RecordNodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error) {
	out := new(UpdateNodeResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CheckNodeInCluster(ctx context.Context, in *CheckNodesRequest, opts ...grpc.CallOption) (*CheckNodesResponse, error) {
	out := new(CheckNodesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CheckNodeInCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CordonNode(ctx context.Context, in *CordonNodeRequest, opts ...grpc.CallOption) (*CordonNodeResponse, error) {
	out := new(CordonNodeResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CordonNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UnCordonNode(ctx context.Context, in *UnCordonNodeRequest, opts ...grpc.CallOption) (*UnCordonNodeResponse, error) {
	out := new(UnCordonNodeResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UnCordonNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DrainNode(ctx context.Context, in *DrainNodeRequest, opts ...grpc.CallOption) (*DrainNodeResponse, error) {
	out := new(DrainNodeResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DrainNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateNodeLabels(ctx context.Context, in *UpdateNodeLabelsRequest, opts ...grpc.CallOption) (*UpdateNodeLabelsResponse, error) {
	out := new(UpdateNodeLabelsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateNodeLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateNodeAnnotations(ctx context.Context, in *UpdateNodeAnnotationsRequest, opts ...grpc.CallOption) (*UpdateNodeAnnotationsResponse, error) {
	out := new(UpdateNodeAnnotationsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateNodeAnnotations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateNodeTaints(ctx context.Context, in *UpdateNodeTaintsRequest, opts ...grpc.CallOption) (*UpdateNodeTaintsResponse, error) {
	out := new(UpdateNodeTaintsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateNodeTaints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetClusterCredential(ctx context.Context, in *GetClusterCredentialReq, opts ...grpc.CallOption) (*GetClusterCredentialResp, error) {
	out := new(GetClusterCredentialResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetClusterCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateClusterCredential(ctx context.Context, in *UpdateClusterCredentialReq, opts ...grpc.CallOption) (*UpdateClusterCredentialResp, error) {
	out := new(UpdateClusterCredentialResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateClusterCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteClusterCredential(ctx context.Context, in *DeleteClusterCredentialReq, opts ...grpc.CallOption) (*DeleteClusterCredentialResp, error) {
	out := new(DeleteClusterCredentialResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteClusterCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListClusterCredential(ctx context.Context, in *ListClusterCredentialReq, opts ...grpc.CallOption) (*ListClusterCredentialResp, error) {
	out := new(ListClusterCredentialResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListClusterCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) InitFederationCluster(ctx context.Context, in *InitFederationClusterReq, opts ...grpc.CallOption) (*InitFederationClusterResp, error) {
	out := new(InitFederationClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/InitFederationCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) AddFederatedCluster(ctx context.Context, in *AddFederatedClusterReq, opts ...grpc.CallOption) (*AddFederatedClusterResp, error) {
	out := new(AddFederatedClusterResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/AddFederatedCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CreateCloud(ctx context.Context, in *CreateCloudRequest, opts ...grpc.CallOption) (*CreateCloudResponse, error) {
	out := new(CreateCloudResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CreateCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateCloud(ctx context.Context, in *UpdateCloudRequest, opts ...grpc.CallOption) (*UpdateCloudResponse, error) {
	out := new(UpdateCloudResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteCloud(ctx context.Context, in *DeleteCloudRequest, opts ...grpc.CallOption) (*DeleteCloudResponse, error) {
	out := new(DeleteCloudResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetCloud(ctx context.Context, in *GetCloudRequest, opts ...grpc.CallOption) (*GetCloudResponse, error) {
	out := new(GetCloudResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloud(ctx context.Context, in *ListCloudRequest, opts ...grpc.CallOption) (*ListCloudResponse, error) {
	out := new(ListCloudResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CreateCloudVPC(ctx context.Context, in *CreateCloudVPCRequest, opts ...grpc.CallOption) (*CreateCloudVPCResponse, error) {
	out := new(CreateCloudVPCResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CreateCloudVPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateCloudVPC(ctx context.Context, in *UpdateCloudVPCRequest, opts ...grpc.CallOption) (*UpdateCloudVPCResponse, error) {
	out := new(UpdateCloudVPCResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateCloudVPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteCloudVPC(ctx context.Context, in *DeleteCloudVPCRequest, opts ...grpc.CallOption) (*DeleteCloudVPCResponse, error) {
	out := new(DeleteCloudVPCResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteCloudVPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudVPC(ctx context.Context, in *ListCloudVPCRequest, opts ...grpc.CallOption) (*ListCloudVPCResponse, error) {
	out := new(ListCloudVPCResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudVPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudRegions(ctx context.Context, in *ListCloudRegionsRequest, opts ...grpc.CallOption) (*ListCloudRegionsResponse, error) {
	out := new(ListCloudRegionsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetVPCCidr(ctx context.Context, in *GetVPCCidrRequest, opts ...grpc.CallOption) (*GetVPCCidrResponse, error) {
	out := new(GetVPCCidrResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetVPCCidr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CreateNodeGroup(ctx context.Context, in *CreateNodeGroupRequest, opts ...grpc.CallOption) (*CreateNodeGroupResponse, error) {
	out := new(CreateNodeGroupResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CreateNodeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateNodeGroup(ctx context.Context, in *UpdateNodeGroupRequest, opts ...grpc.CallOption) (*UpdateNodeGroupResponse, error) {
	out := new(UpdateNodeGroupResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateNodeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteNodeGroup(ctx context.Context, in *DeleteNodeGroupRequest, opts ...grpc.CallOption) (*DeleteNodeGroupResponse, error) {
	out := new(DeleteNodeGroupResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteNodeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetNodeGroup(ctx context.Context, in *GetNodeGroupRequest, opts ...grpc.CallOption) (*GetNodeGroupResponse, error) {
	out := new(GetNodeGroupResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetNodeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListClusterNodeGroup(ctx context.Context, in *ListClusterNodeGroupRequest, opts ...grpc.CallOption) (*ListClusterNodeGroupResponse, error) {
	out := new(ListClusterNodeGroupResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListClusterNodeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListNodeGroup(ctx context.Context, in *ListNodeGroupRequest, opts ...grpc.CallOption) (*ListNodeGroupResponse, error) {
	out := new(ListNodeGroupResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListNodeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) MoveNodesToGroup(ctx context.Context, in *MoveNodesToGroupRequest, opts ...grpc.CallOption) (*MoveNodesToGroupResponse, error) {
	out := new(MoveNodesToGroupResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/MoveNodesToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) RemoveNodesFromGroup(ctx context.Context, in *RemoveNodesFromGroupRequest, opts ...grpc.CallOption) (*RemoveNodesFromGroupResponse, error) {
	out := new(RemoveNodesFromGroupResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/RemoveNodesFromGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CleanNodesInGroup(ctx context.Context, in *CleanNodesInGroupRequest, opts ...grpc.CallOption) (*CleanNodesInGroupResponse, error) {
	out := new(CleanNodesInGroupResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CleanNodesInGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CleanNodesInGroupV2(ctx context.Context, in *CleanNodesInGroupV2Request, opts ...grpc.CallOption) (*CleanNodesInGroupV2Response, error) {
	out := new(CleanNodesInGroupV2Response)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CleanNodesInGroupV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListNodesInGroup(ctx context.Context, in *GetNodeGroupRequest, opts ...grpc.CallOption) (*ListNodesInGroupResponse, error) {
	out := new(ListNodesInGroupResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListNodesInGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListNodesInGroupV2(ctx context.Context, in *ListNodesInGroupV2Request, opts ...grpc.CallOption) (*ListNodesInGroupV2Response, error) {
	out := new(ListNodesInGroupV2Response)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListNodesInGroupV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateGroupDesiredNode(ctx context.Context, in *UpdateGroupDesiredNodeRequest, opts ...grpc.CallOption) (*UpdateGroupDesiredNodeResponse, error) {
	out := new(UpdateGroupDesiredNodeResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateGroupDesiredNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateGroupDesiredSize(ctx context.Context, in *UpdateGroupDesiredSizeRequest, opts ...grpc.CallOption) (*UpdateGroupDesiredSizeResponse, error) {
	out := new(UpdateGroupDesiredSizeResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateGroupDesiredSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateGroupMinMaxSize(ctx context.Context, in *UpdateGroupMinMaxSizeRequest, opts ...grpc.CallOption) (*UpdateGroupMinMaxSizeResponse, error) {
	out := new(UpdateGroupMinMaxSizeResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateGroupMinMaxSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) EnableNodeGroupAutoScale(ctx context.Context, in *EnableNodeGroupAutoScaleRequest, opts ...grpc.CallOption) (*EnableNodeGroupAutoScaleResponse, error) {
	out := new(EnableNodeGroupAutoScaleResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/EnableNodeGroupAutoScale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DisableNodeGroupAutoScale(ctx context.Context, in *DisableNodeGroupAutoScaleRequest, opts ...grpc.CallOption) (*DisableNodeGroupAutoScaleResponse, error) {
	out := new(DisableNodeGroupAutoScaleResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DisableNodeGroupAutoScale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) RetryTask(ctx context.Context, in *RetryTaskRequest, opts ...grpc.CallOption) (*RetryTaskResponse, error) {
	out := new(RetryTaskResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/RetryTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error) {
	out := new(UpdateTaskResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error) {
	out := new(DeleteTaskResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListTask(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*ListTaskResponse, error) {
	out := new(ListTaskResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CreateAutoScalingOption(ctx context.Context, in *CreateAutoScalingOptionRequest, opts ...grpc.CallOption) (*CreateAutoScalingOptionResponse, error) {
	out := new(CreateAutoScalingOptionResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CreateAutoScalingOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateAutoScalingOption(ctx context.Context, in *UpdateAutoScalingOptionRequest, opts ...grpc.CallOption) (*UpdateAutoScalingOptionResponse, error) {
	out := new(UpdateAutoScalingOptionResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateAutoScalingOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteAutoScalingOption(ctx context.Context, in *DeleteAutoScalingOptionRequest, opts ...grpc.CallOption) (*DeleteAutoScalingOptionResponse, error) {
	out := new(DeleteAutoScalingOptionResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteAutoScalingOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetAutoScalingOption(ctx context.Context, in *GetAutoScalingOptionRequest, opts ...grpc.CallOption) (*GetAutoScalingOptionResponse, error) {
	out := new(GetAutoScalingOptionResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetAutoScalingOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListAutoScalingOption(ctx context.Context, in *ListAutoScalingOptionRequest, opts ...grpc.CallOption) (*ListAutoScalingOptionResponse, error) {
	out := new(ListAutoScalingOptionResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListAutoScalingOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateAutoScalingStatus(ctx context.Context, in *UpdateAutoScalingStatusRequest, opts ...grpc.CallOption) (*UpdateAutoScalingStatusResponse, error) {
	out := new(UpdateAutoScalingStatusResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateAutoScalingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) SyncAutoScalingOption(ctx context.Context, in *SyncAutoScalingOptionRequest, opts ...grpc.CallOption) (*SyncAutoScalingOptionResponse, error) {
	out := new(SyncAutoScalingOptionResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/SyncAutoScalingOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CreateNodeTemplate(ctx context.Context, in *CreateNodeTemplateRequest, opts ...grpc.CallOption) (*CreateNodeTemplateResponse, error) {
	out := new(CreateNodeTemplateResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CreateNodeTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateNodeTemplate(ctx context.Context, in *UpdateNodeTemplateRequest, opts ...grpc.CallOption) (*UpdateNodeTemplateResponse, error) {
	out := new(UpdateNodeTemplateResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateNodeTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteNodeTemplate(ctx context.Context, in *DeleteNodeTemplateRequest, opts ...grpc.CallOption) (*DeleteNodeTemplateResponse, error) {
	out := new(DeleteNodeTemplateResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteNodeTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListNodeTemplate(ctx context.Context, in *ListNodeTemplateRequest, opts ...grpc.CallOption) (*ListNodeTemplateResponse, error) {
	out := new(ListNodeTemplateResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListNodeTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetNodeTemplate(ctx context.Context, in *GetNodeTemplateRequest, opts ...grpc.CallOption) (*GetNodeTemplateResponse, error) {
	out := new(GetNodeTemplateResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetNodeTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CreateCloudAccount(ctx context.Context, in *CreateCloudAccountRequest, opts ...grpc.CallOption) (*CreateCloudAccountResponse, error) {
	out := new(CreateCloudAccountResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CreateCloudAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateCloudAccount(ctx context.Context, in *UpdateCloudAccountRequest, opts ...grpc.CallOption) (*UpdateCloudAccountResponse, error) {
	out := new(UpdateCloudAccountResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateCloudAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) MigrateCloudAccount(ctx context.Context, in *MigrateCloudAccountRequest, opts ...grpc.CallOption) (*MigrateCloudAccountResponse, error) {
	out := new(MigrateCloudAccountResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/MigrateCloudAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteCloudAccount(ctx context.Context, in *DeleteCloudAccountRequest, opts ...grpc.CallOption) (*DeleteCloudAccountResponse, error) {
	out := new(DeleteCloudAccountResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteCloudAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudAccount(ctx context.Context, in *ListCloudAccountRequest, opts ...grpc.CallOption) (*ListCloudAccountResponse, error) {
	out := new(ListCloudAccountResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudAccountToPerm(ctx context.Context, in *ListCloudAccountPermRequest, opts ...grpc.CallOption) (*ListCloudAccountPermResponse, error) {
	out := new(ListCloudAccountPermResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudAccountToPerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) VerifyCloudAccount(ctx context.Context, in *VerifyCloudAccountRequest, opts ...grpc.CallOption) (*VerifyCloudAccountResponse, error) {
	out := new(VerifyCloudAccountResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/VerifyCloudAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetCloudRegions(ctx context.Context, in *GetCloudRegionsRequest, opts ...grpc.CallOption) (*GetCloudRegionsResponse, error) {
	out := new(GetCloudRegionsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetCloudRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetCloudRegionZones(ctx context.Context, in *GetCloudRegionZonesRequest, opts ...grpc.CallOption) (*GetCloudRegionZonesResponse, error) {
	out := new(GetCloudRegionZonesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetCloudRegionZones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudRegionCluster(ctx context.Context, in *ListCloudRegionClusterRequest, opts ...grpc.CallOption) (*ListCloudRegionClusterResponse, error) {
	out := new(ListCloudRegionClusterResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudRegionCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudSubnets(ctx context.Context, in *ListCloudSubnetsRequest, opts ...grpc.CallOption) (*ListCloudSubnetsResponse, error) {
	out := new(ListCloudSubnetsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudSubnets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudSecurityGroups(ctx context.Context, in *ListCloudSecurityGroupsRequest, opts ...grpc.CallOption) (*ListCloudSecurityGroupsResponse, error) {
	out := new(ListCloudSecurityGroupsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudSecurityGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListKeypairs(ctx context.Context, in *ListKeyPairsRequest, opts ...grpc.CallOption) (*ListKeyPairsResponse, error) {
	out := new(ListKeyPairsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListKeypairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudInstanceTypes(ctx context.Context, in *ListCloudInstanceTypeRequest, opts ...grpc.CallOption) (*ListCloudInstanceTypeResponse, error) {
	out := new(ListCloudInstanceTypeResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudInstanceTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudOsImage(ctx context.Context, in *ListCloudOsImageRequest, opts ...grpc.CallOption) (*ListCloudOsImageResponse, error) {
	out := new(ListCloudOsImageResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudOsImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudInstances(ctx context.Context, in *ListCloudInstancesRequest, opts ...grpc.CallOption) (*ListCloudInstancesResponse, error) {
	out := new(ListCloudInstancesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetCloudAccountType(ctx context.Context, in *GetCloudAccountTypeRequest, opts ...grpc.CallOption) (*GetCloudAccountTypeResponse, error) {
	out := new(GetCloudAccountTypeResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetCloudAccountType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetCloudBandwidthPackages(ctx context.Context, in *GetCloudBandwidthPackagesRequest, opts ...grpc.CallOption) (*GetCloudBandwidthPackagesResponse, error) {
	out := new(GetCloudBandwidthPackagesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetCloudBandwidthPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListOperationLogs(ctx context.Context, in *ListOperationLogsRequest, opts ...grpc.CallOption) (*ListOperationLogsResponse, error) {
	out := new(ListOperationLogsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListOperationLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListResourceSchema(ctx context.Context, in *ListResourceSchemaRequest, opts ...grpc.CallOption) (*CommonListResp, error) {
	out := new(CommonListResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListResourceSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetResourceSchema(ctx context.Context, in *GetResourceSchemaRequest, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetResourceSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) QueryPermByActionID(ctx context.Context, in *QueryPermByActionIDRequest, opts ...grpc.CallOption) (*QueryPermByActionIDResponse, error) {
	out := new(QueryPermByActionIDResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/QueryPermByActionID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListBKCloud(ctx context.Context, in *ListBKCloudRequest, opts ...grpc.CallOption) (*CommonListResp, error) {
	out := new(CommonListResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListBKCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCCTopology(ctx context.Context, in *ListCCTopologyRequest, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCCTopology", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetBkSopsTemplateList(ctx context.Context, in *GetBkSopsTemplateListRequest, opts ...grpc.CallOption) (*GetBkSopsTemplateListResponse, error) {
	out := new(GetBkSopsTemplateListResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetBkSopsTemplateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetBkSopsTemplateInfo(ctx context.Context, in *GetBkSopsTemplateInfoRequest, opts ...grpc.CallOption) (*GetBkSopsTemplateInfoResponse, error) {
	out := new(GetBkSopsTemplateInfoResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetBkSopsTemplateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetInnerTemplateValues(ctx context.Context, in *GetInnerTemplateValuesRequest, opts ...grpc.CallOption) (*GetInnerTemplateValuesResponse, error) {
	out := new(GetInnerTemplateValuesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetInnerTemplateValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DebugBkSopsTask(ctx context.Context, in *DebugBkSopsTaskRequest, opts ...grpc.CallOption) (*DebugBkSopsTaskResponse, error) {
	out := new(DebugBkSopsTaskResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DebugBkSopsTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetBatchCustomSetting(ctx context.Context, in *GetBatchCustomSettingRequest, opts ...grpc.CallOption) (*GetBatchCustomSettingResponse, error) {
	out := new(GetBatchCustomSettingResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetBatchCustomSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetBizTopologyHost(ctx context.Context, in *GetBizTopologyHostRequest, opts ...grpc.CallOption) (*GetBizTopologyHostResponse, error) {
	out := new(GetBizTopologyHostResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetBizTopologyHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetTopologyNodes(ctx context.Context, in *GetTopologyNodesRequest, opts ...grpc.CallOption) (*GetTopologyNodesResponse, error) {
	out := new(GetTopologyNodesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetTopologyNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetTopologyHostIdsNodes(ctx context.Context, in *GetTopologyHostIdsNodesRequest, opts ...grpc.CallOption) (*GetTopologyHostIdsNodesResponse, error) {
	out := new(GetTopologyHostIdsNodesResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetTopologyHostIdsNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetHostsDetails(ctx context.Context, in *GetHostsDetailsRequest, opts ...grpc.CallOption) (*GetHostsDetailsResponse, error) {
	out := new(GetHostsDetailsResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetHostsDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) GetScopeHostCheck(ctx context.Context, in *GetScopeHostCheckRequest, opts ...grpc.CallOption) (*GetScopeHostCheckResponse, error) {
	out := new(GetScopeHostCheckResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/GetScopeHostCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) CreateCloudModuleFlag(ctx context.Context, in *CreateCloudModuleFlagRequest, opts ...grpc.CallOption) (*CreateCloudModuleFlagResponse, error) {
	out := new(CreateCloudModuleFlagResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/CreateCloudModuleFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) UpdateCloudModuleFlag(ctx context.Context, in *UpdateCloudModuleFlagRequest, opts ...grpc.CallOption) (*UpdateCloudModuleFlagResponse, error) {
	out := new(UpdateCloudModuleFlagResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/UpdateCloudModuleFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) DeleteCloudModuleFlag(ctx context.Context, in *DeleteCloudModuleFlagRequest, opts ...grpc.CallOption) (*DeleteCloudModuleFlagResponse, error) {
	out := new(DeleteCloudModuleFlagResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/DeleteCloudModuleFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) ListCloudModuleFlag(ctx context.Context, in *ListCloudModuleFlagRequest, opts ...grpc.CallOption) (*ListCloudModuleFlagResponse, error) {
	out := new(ListCloudModuleFlagResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/ListCloudModuleFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/clustermanager.ClusterManager/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterManagerServer is the server API for ClusterManager service.
// All implementations must embed UnimplementedClusterManagerServer
// for forward compatibility
type ClusterManagerServer interface {
	//* cluster management
	CreateCluster(context.Context, *CreateClusterReq) (*CreateClusterResp, error)
	RetryCreateClusterTask(context.Context, *RetryCreateClusterReq) (*RetryCreateClusterResp, error)
	CheckCloudKubeConfig(context.Context, *KubeConfigReq) (*KubeConfigResp, error)
	CheckCloudKubeConfigConnect(context.Context, *KubeConfigConnectReq) (*KubeConfigConnectResp, error)
	ImportCluster(context.Context, *ImportClusterReq) (*ImportClusterResp, error)
	UpdateCluster(context.Context, *UpdateClusterReq) (*UpdateClusterResp, error)
	AddNodesToCluster(context.Context, *AddNodesRequest) (*AddNodesResponse, error)
	DeleteNodesFromCluster(context.Context, *DeleteNodesRequest) (*DeleteNodesResponse, error)
	BatchDeleteNodesFromCluster(context.Context, *BatchDeleteClusterNodesRequest) (*BatchDeleteClusterNodesResponse, error)
	GetExternalNodeScriptByGroupID(context.Context, *GetExternalNodeScriptRequest) (*GetExternalNodeScriptResponse, error)
	ListNodesInCluster(context.Context, *ListNodesInClusterRequest) (*ListNodesInClusterResponse, error)
	ListMastersInCluster(context.Context, *ListMastersInClusterRequest) (*ListMastersInClusterResponse, error)
	DeleteCluster(context.Context, *DeleteClusterReq) (*DeleteClusterResp, error)
	GetCluster(context.Context, *GetClusterReq) (*GetClusterResp, error)
	ListProjectCluster(context.Context, *ListProjectClusterReq) (*ListProjectClusterResp, error)
	ListCluster(context.Context, *ListClusterReq) (*ListClusterResp, error)
	ListCommonCluster(context.Context, *ListCommonClusterReq) (*ListCommonClusterResp, error)
	CreateVirtualCluster(context.Context, *CreateVirtualClusterReq) (*CreateVirtualClusterResp, error)
	DeleteVirtualCluster(context.Context, *DeleteVirtualClusterReq) (*DeleteVirtualClusterResp, error)
	UpdateVirtualClusterQuota(context.Context, *UpdateVirtualClusterQuotaReq) (*UpdateVirtualClusterQuotaResp, error)
	//* node management
	GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error)
	GetNodeInfo(context.Context, *GetNodeInfoRequest) (*GetNodeInfoResponse, error)
	RecordNodeInfo(context.Context, *RecordNodeInfoRequest) (*CommonResp, error)
	UpdateNode(context.Context, *UpdateNodeRequest) (*UpdateNodeResponse, error)
	CheckNodeInCluster(context.Context, *CheckNodesRequest) (*CheckNodesResponse, error)
	CordonNode(context.Context, *CordonNodeRequest) (*CordonNodeResponse, error)
	UnCordonNode(context.Context, *UnCordonNodeRequest) (*UnCordonNodeResponse, error)
	DrainNode(context.Context, *DrainNodeRequest) (*DrainNodeResponse, error)
	UpdateNodeLabels(context.Context, *UpdateNodeLabelsRequest) (*UpdateNodeLabelsResponse, error)
	UpdateNodeAnnotations(context.Context, *UpdateNodeAnnotationsRequest) (*UpdateNodeAnnotationsResponse, error)
	UpdateNodeTaints(context.Context, *UpdateNodeTaintsRequest) (*UpdateNodeTaintsResponse, error)
	//* cluster credential management
	GetClusterCredential(context.Context, *GetClusterCredentialReq) (*GetClusterCredentialResp, error)
	UpdateClusterCredential(context.Context, *UpdateClusterCredentialReq) (*UpdateClusterCredentialResp, error)
	DeleteClusterCredential(context.Context, *DeleteClusterCredentialReq) (*DeleteClusterCredentialResp, error)
	ListClusterCredential(context.Context, *ListClusterCredentialReq) (*ListClusterCredentialResp, error)
	//* federation cluster management
	InitFederationCluster(context.Context, *InitFederationClusterReq) (*InitFederationClusterResp, error)
	AddFederatedCluster(context.Context, *AddFederatedClusterReq) (*AddFederatedClusterResp, error)
	//* Cloud information management *
	CreateCloud(context.Context, *CreateCloudRequest) (*CreateCloudResponse, error)
	UpdateCloud(context.Context, *UpdateCloudRequest) (*UpdateCloudResponse, error)
	DeleteCloud(context.Context, *DeleteCloudRequest) (*DeleteCloudResponse, error)
	GetCloud(context.Context, *GetCloudRequest) (*GetCloudResponse, error)
	ListCloud(context.Context, *ListCloudRequest) (*ListCloudResponse, error)
	//* Cloud VPC information management *
	CreateCloudVPC(context.Context, *CreateCloudVPCRequest) (*CreateCloudVPCResponse, error)
	UpdateCloudVPC(context.Context, *UpdateCloudVPCRequest) (*UpdateCloudVPCResponse, error)
	DeleteCloudVPC(context.Context, *DeleteCloudVPCRequest) (*DeleteCloudVPCResponse, error)
	ListCloudVPC(context.Context, *ListCloudVPCRequest) (*ListCloudVPCResponse, error)
	ListCloudRegions(context.Context, *ListCloudRegionsRequest) (*ListCloudRegionsResponse, error)
	GetVPCCidr(context.Context, *GetVPCCidrRequest) (*GetVPCCidrResponse, error)
	//* NodeGroup information management *
	CreateNodeGroup(context.Context, *CreateNodeGroupRequest) (*CreateNodeGroupResponse, error)
	UpdateNodeGroup(context.Context, *UpdateNodeGroupRequest) (*UpdateNodeGroupResponse, error)
	DeleteNodeGroup(context.Context, *DeleteNodeGroupRequest) (*DeleteNodeGroupResponse, error)
	GetNodeGroup(context.Context, *GetNodeGroupRequest) (*GetNodeGroupResponse, error)
	ListClusterNodeGroup(context.Context, *ListClusterNodeGroupRequest) (*ListClusterNodeGroupResponse, error)
	ListNodeGroup(context.Context, *ListNodeGroupRequest) (*ListNodeGroupResponse, error)
	MoveNodesToGroup(context.Context, *MoveNodesToGroupRequest) (*MoveNodesToGroupResponse, error)
	RemoveNodesFromGroup(context.Context, *RemoveNodesFromGroupRequest) (*RemoveNodesFromGroupResponse, error)
	CleanNodesInGroup(context.Context, *CleanNodesInGroupRequest) (*CleanNodesInGroupResponse, error)
	CleanNodesInGroupV2(context.Context, *CleanNodesInGroupV2Request) (*CleanNodesInGroupV2Response, error)
	ListNodesInGroup(context.Context, *GetNodeGroupRequest) (*ListNodesInGroupResponse, error)
	ListNodesInGroupV2(context.Context, *ListNodesInGroupV2Request) (*ListNodesInGroupV2Response, error)
	UpdateGroupDesiredNode(context.Context, *UpdateGroupDesiredNodeRequest) (*UpdateGroupDesiredNodeResponse, error)
	UpdateGroupDesiredSize(context.Context, *UpdateGroupDesiredSizeRequest) (*UpdateGroupDesiredSizeResponse, error)
	UpdateGroupMinMaxSize(context.Context, *UpdateGroupMinMaxSizeRequest) (*UpdateGroupMinMaxSizeResponse, error)
	EnableNodeGroupAutoScale(context.Context, *EnableNodeGroupAutoScaleRequest) (*EnableNodeGroupAutoScaleResponse, error)
	DisableNodeGroupAutoScale(context.Context, *DisableNodeGroupAutoScaleRequest) (*DisableNodeGroupAutoScaleResponse, error)
	//* Task information management *
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	RetryTask(context.Context, *RetryTaskRequest) (*RetryTaskResponse, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error)
	GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
	ListTask(context.Context, *ListTaskRequest) (*ListTaskResponse, error)
	//* ClusterAutoScalingOption information management *
	CreateAutoScalingOption(context.Context, *CreateAutoScalingOptionRequest) (*CreateAutoScalingOptionResponse, error)
	UpdateAutoScalingOption(context.Context, *UpdateAutoScalingOptionRequest) (*UpdateAutoScalingOptionResponse, error)
	DeleteAutoScalingOption(context.Context, *DeleteAutoScalingOptionRequest) (*DeleteAutoScalingOptionResponse, error)
	GetAutoScalingOption(context.Context, *GetAutoScalingOptionRequest) (*GetAutoScalingOptionResponse, error)
	ListAutoScalingOption(context.Context, *ListAutoScalingOptionRequest) (*ListAutoScalingOptionResponse, error)
	UpdateAutoScalingStatus(context.Context, *UpdateAutoScalingStatusRequest) (*UpdateAutoScalingStatusResponse, error)
	SyncAutoScalingOption(context.Context, *SyncAutoScalingOptionRequest) (*SyncAutoScalingOptionResponse, error)
	// Cloud NodeTemplate info management
	CreateNodeTemplate(context.Context, *CreateNodeTemplateRequest) (*CreateNodeTemplateResponse, error)
	UpdateNodeTemplate(context.Context, *UpdateNodeTemplateRequest) (*UpdateNodeTemplateResponse, error)
	DeleteNodeTemplate(context.Context, *DeleteNodeTemplateRequest) (*DeleteNodeTemplateResponse, error)
	ListNodeTemplate(context.Context, *ListNodeTemplateRequest) (*ListNodeTemplateResponse, error)
	GetNodeTemplate(context.Context, *GetNodeTemplateRequest) (*GetNodeTemplateResponse, error)
	// Cloud Account information management
	CreateCloudAccount(context.Context, *CreateCloudAccountRequest) (*CreateCloudAccountResponse, error)
	UpdateCloudAccount(context.Context, *UpdateCloudAccountRequest) (*UpdateCloudAccountResponse, error)
	MigrateCloudAccount(context.Context, *MigrateCloudAccountRequest) (*MigrateCloudAccountResponse, error)
	DeleteCloudAccount(context.Context, *DeleteCloudAccountRequest) (*DeleteCloudAccountResponse, error)
	ListCloudAccount(context.Context, *ListCloudAccountRequest) (*ListCloudAccountResponse, error)
	ListCloudAccountToPerm(context.Context, *ListCloudAccountPermRequest) (*ListCloudAccountPermResponse, error)
	VerifyCloudAccount(context.Context, *VerifyCloudAccountRequest) (*VerifyCloudAccountResponse, error)
	// Cloud Resource management
	GetCloudRegions(context.Context, *GetCloudRegionsRequest) (*GetCloudRegionsResponse, error)
	GetCloudRegionZones(context.Context, *GetCloudRegionZonesRequest) (*GetCloudRegionZonesResponse, error)
	ListCloudRegionCluster(context.Context, *ListCloudRegionClusterRequest) (*ListCloudRegionClusterResponse, error)
	ListCloudSubnets(context.Context, *ListCloudSubnetsRequest) (*ListCloudSubnetsResponse, error)
	ListCloudSecurityGroups(context.Context, *ListCloudSecurityGroupsRequest) (*ListCloudSecurityGroupsResponse, error)
	ListKeypairs(context.Context, *ListKeyPairsRequest) (*ListKeyPairsResponse, error)
	ListCloudInstanceTypes(context.Context, *ListCloudInstanceTypeRequest) (*ListCloudInstanceTypeResponse, error)
	ListCloudOsImage(context.Context, *ListCloudOsImageRequest) (*ListCloudOsImageResponse, error)
	ListCloudInstances(context.Context, *ListCloudInstancesRequest) (*ListCloudInstancesResponse, error)
	GetCloudAccountType(context.Context, *GetCloudAccountTypeRequest) (*GetCloudAccountTypeResponse, error)
	GetCloudBandwidthPackages(context.Context, *GetCloudBandwidthPackagesRequest) (*GetCloudBandwidthPackagesResponse, error)
	// Operation logs
	ListOperationLogs(context.Context, *ListOperationLogsRequest) (*ListOperationLogsResponse, error)
	// ** ResourceSchema **
	// ListResourceSchema
	ListResourceSchema(context.Context, *ListResourceSchemaRequest) (*CommonListResp, error)
	// GetResourceSchema
	GetResourceSchema(context.Context, *GetResourceSchemaRequest) (*CommonResp, error)
	// Perm interface
	QueryPermByActionID(context.Context, *QueryPermByActionIDRequest) (*QueryPermByActionIDResponse, error)
	// thirdParty interface(cmdb/bksops等)
	ListBKCloud(context.Context, *ListBKCloudRequest) (*CommonListResp, error)
	ListCCTopology(context.Context, *ListCCTopologyRequest) (*CommonResp, error)
	GetBkSopsTemplateList(context.Context, *GetBkSopsTemplateListRequest) (*GetBkSopsTemplateListResponse, error)
	GetBkSopsTemplateInfo(context.Context, *GetBkSopsTemplateInfoRequest) (*GetBkSopsTemplateInfoResponse, error)
	GetInnerTemplateValues(context.Context, *GetInnerTemplateValuesRequest) (*GetInnerTemplateValuesResponse, error)
	DebugBkSopsTask(context.Context, *DebugBkSopsTaskRequest) (*DebugBkSopsTaskResponse, error)
	// IP selector interface
	// 批量获取多个配置项, 返回配置项内容map
	GetBatchCustomSetting(context.Context, *GetBatchCustomSettingRequest) (*GetBatchCustomSettingResponse, error)
	// 批量获取含各节点主机数量的拓扑树
	GetBizTopologyHost(context.Context, *GetBizTopologyHostRequest) (*GetBizTopologyHostResponse, error)
	// 根据多个拓扑节点与搜索条件批量分页查询所包含的主机信息(当前仅支持业务拓扑节点)
	GetTopologyNodes(context.Context, *GetTopologyNodesRequest) (*GetTopologyNodesResponse, error)
	// 根据多个拓扑节点与搜索条件批量分页查询所包含的主机ID，用于IP选择器全选（当前仅支持业务拓扑节点，业务集仅支持传入业务集根节点）
	GetTopologyHostIdsNodes(context.Context, *GetTopologyHostIdsNodesRequest) (*GetTopologyHostIdsNodesResponse, error)
	// 根据主机IDs获取机器详情信息
	GetHostsDetails(context.Context, *GetHostsDetailsRequest) (*GetHostsDetailsResponse, error)
	// 根据用户手动输入的IP/IPv6/主机名/hostId等关键字信息获取真实存在的机器信息
	GetScopeHostCheck(context.Context, *GetScopeHostCheckRequest) (*GetScopeHostCheckResponse, error)
	// Cloud module flag management
	CreateCloudModuleFlag(context.Context, *CreateCloudModuleFlagRequest) (*CreateCloudModuleFlagResponse, error)
	UpdateCloudModuleFlag(context.Context, *UpdateCloudModuleFlagRequest) (*UpdateCloudModuleFlagResponse, error)
	DeleteCloudModuleFlag(context.Context, *DeleteCloudModuleFlagRequest) (*DeleteCloudModuleFlagResponse, error)
	ListCloudModuleFlag(context.Context, *ListCloudModuleFlagRequest) (*ListCloudModuleFlagResponse, error)
	// cluster manager health interface
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedClusterManagerServer()
}

// UnimplementedClusterManagerServer must be embedded to have forward compatible implementations.
type UnimplementedClusterManagerServer struct {
}

func (UnimplementedClusterManagerServer) CreateCluster(context.Context, *CreateClusterReq) (*CreateClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (UnimplementedClusterManagerServer) RetryCreateClusterTask(context.Context, *RetryCreateClusterReq) (*RetryCreateClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryCreateClusterTask not implemented")
}
func (UnimplementedClusterManagerServer) CheckCloudKubeConfig(context.Context, *KubeConfigReq) (*KubeConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCloudKubeConfig not implemented")
}
func (UnimplementedClusterManagerServer) CheckCloudKubeConfigConnect(context.Context, *KubeConfigConnectReq) (*KubeConfigConnectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCloudKubeConfigConnect not implemented")
}
func (UnimplementedClusterManagerServer) ImportCluster(context.Context, *ImportClusterReq) (*ImportClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportCluster not implemented")
}
func (UnimplementedClusterManagerServer) UpdateCluster(context.Context, *UpdateClusterReq) (*UpdateClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCluster not implemented")
}
func (UnimplementedClusterManagerServer) AddNodesToCluster(context.Context, *AddNodesRequest) (*AddNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNodesToCluster not implemented")
}
func (UnimplementedClusterManagerServer) DeleteNodesFromCluster(context.Context, *DeleteNodesRequest) (*DeleteNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodesFromCluster not implemented")
}
func (UnimplementedClusterManagerServer) BatchDeleteNodesFromCluster(context.Context, *BatchDeleteClusterNodesRequest) (*BatchDeleteClusterNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteNodesFromCluster not implemented")
}
func (UnimplementedClusterManagerServer) GetExternalNodeScriptByGroupID(context.Context, *GetExternalNodeScriptRequest) (*GetExternalNodeScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalNodeScriptByGroupID not implemented")
}
func (UnimplementedClusterManagerServer) ListNodesInCluster(context.Context, *ListNodesInClusterRequest) (*ListNodesInClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodesInCluster not implemented")
}
func (UnimplementedClusterManagerServer) ListMastersInCluster(context.Context, *ListMastersInClusterRequest) (*ListMastersInClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMastersInCluster not implemented")
}
func (UnimplementedClusterManagerServer) DeleteCluster(context.Context, *DeleteClusterReq) (*DeleteClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (UnimplementedClusterManagerServer) GetCluster(context.Context, *GetClusterReq) (*GetClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedClusterManagerServer) ListProjectCluster(context.Context, *ListProjectClusterReq) (*ListProjectClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectCluster not implemented")
}
func (UnimplementedClusterManagerServer) ListCluster(context.Context, *ListClusterReq) (*ListClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCluster not implemented")
}
func (UnimplementedClusterManagerServer) ListCommonCluster(context.Context, *ListCommonClusterReq) (*ListCommonClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommonCluster not implemented")
}
func (UnimplementedClusterManagerServer) CreateVirtualCluster(context.Context, *CreateVirtualClusterReq) (*CreateVirtualClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualCluster not implemented")
}
func (UnimplementedClusterManagerServer) DeleteVirtualCluster(context.Context, *DeleteVirtualClusterReq) (*DeleteVirtualClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVirtualCluster not implemented")
}
func (UnimplementedClusterManagerServer) UpdateVirtualClusterQuota(context.Context, *UpdateVirtualClusterQuotaReq) (*UpdateVirtualClusterQuotaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVirtualClusterQuota not implemented")
}
func (UnimplementedClusterManagerServer) GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedClusterManagerServer) GetNodeInfo(context.Context, *GetNodeInfoRequest) (*GetNodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfo not implemented")
}
func (UnimplementedClusterManagerServer) RecordNodeInfo(context.Context, *RecordNodeInfoRequest) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordNodeInfo not implemented")
}
func (UnimplementedClusterManagerServer) UpdateNode(context.Context, *UpdateNodeRequest) (*UpdateNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (UnimplementedClusterManagerServer) CheckNodeInCluster(context.Context, *CheckNodesRequest) (*CheckNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckNodeInCluster not implemented")
}
func (UnimplementedClusterManagerServer) CordonNode(context.Context, *CordonNodeRequest) (*CordonNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CordonNode not implemented")
}
func (UnimplementedClusterManagerServer) UnCordonNode(context.Context, *UnCordonNodeRequest) (*UnCordonNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnCordonNode not implemented")
}
func (UnimplementedClusterManagerServer) DrainNode(context.Context, *DrainNodeRequest) (*DrainNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DrainNode not implemented")
}
func (UnimplementedClusterManagerServer) UpdateNodeLabels(context.Context, *UpdateNodeLabelsRequest) (*UpdateNodeLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeLabels not implemented")
}
func (UnimplementedClusterManagerServer) UpdateNodeAnnotations(context.Context, *UpdateNodeAnnotationsRequest) (*UpdateNodeAnnotationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeAnnotations not implemented")
}
func (UnimplementedClusterManagerServer) UpdateNodeTaints(context.Context, *UpdateNodeTaintsRequest) (*UpdateNodeTaintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeTaints not implemented")
}
func (UnimplementedClusterManagerServer) GetClusterCredential(context.Context, *GetClusterCredentialReq) (*GetClusterCredentialResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterCredential not implemented")
}
func (UnimplementedClusterManagerServer) UpdateClusterCredential(context.Context, *UpdateClusterCredentialReq) (*UpdateClusterCredentialResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClusterCredential not implemented")
}
func (UnimplementedClusterManagerServer) DeleteClusterCredential(context.Context, *DeleteClusterCredentialReq) (*DeleteClusterCredentialResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClusterCredential not implemented")
}
func (UnimplementedClusterManagerServer) ListClusterCredential(context.Context, *ListClusterCredentialReq) (*ListClusterCredentialResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusterCredential not implemented")
}
func (UnimplementedClusterManagerServer) InitFederationCluster(context.Context, *InitFederationClusterReq) (*InitFederationClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitFederationCluster not implemented")
}
func (UnimplementedClusterManagerServer) AddFederatedCluster(context.Context, *AddFederatedClusterReq) (*AddFederatedClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFederatedCluster not implemented")
}
func (UnimplementedClusterManagerServer) CreateCloud(context.Context, *CreateCloudRequest) (*CreateCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloud not implemented")
}
func (UnimplementedClusterManagerServer) UpdateCloud(context.Context, *UpdateCloudRequest) (*UpdateCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloud not implemented")
}
func (UnimplementedClusterManagerServer) DeleteCloud(context.Context, *DeleteCloudRequest) (*DeleteCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloud not implemented")
}
func (UnimplementedClusterManagerServer) GetCloud(context.Context, *GetCloudRequest) (*GetCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloud not implemented")
}
func (UnimplementedClusterManagerServer) ListCloud(context.Context, *ListCloudRequest) (*ListCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloud not implemented")
}
func (UnimplementedClusterManagerServer) CreateCloudVPC(context.Context, *CreateCloudVPCRequest) (*CreateCloudVPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloudVPC not implemented")
}
func (UnimplementedClusterManagerServer) UpdateCloudVPC(context.Context, *UpdateCloudVPCRequest) (*UpdateCloudVPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloudVPC not implemented")
}
func (UnimplementedClusterManagerServer) DeleteCloudVPC(context.Context, *DeleteCloudVPCRequest) (*DeleteCloudVPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloudVPC not implemented")
}
func (UnimplementedClusterManagerServer) ListCloudVPC(context.Context, *ListCloudVPCRequest) (*ListCloudVPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudVPC not implemented")
}
func (UnimplementedClusterManagerServer) ListCloudRegions(context.Context, *ListCloudRegionsRequest) (*ListCloudRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudRegions not implemented")
}
func (UnimplementedClusterManagerServer) GetVPCCidr(context.Context, *GetVPCCidrRequest) (*GetVPCCidrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVPCCidr not implemented")
}
func (UnimplementedClusterManagerServer) CreateNodeGroup(context.Context, *CreateNodeGroupRequest) (*CreateNodeGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNodeGroup not implemented")
}
func (UnimplementedClusterManagerServer) UpdateNodeGroup(context.Context, *UpdateNodeGroupRequest) (*UpdateNodeGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeGroup not implemented")
}
func (UnimplementedClusterManagerServer) DeleteNodeGroup(context.Context, *DeleteNodeGroupRequest) (*DeleteNodeGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodeGroup not implemented")
}
func (UnimplementedClusterManagerServer) GetNodeGroup(context.Context, *GetNodeGroupRequest) (*GetNodeGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeGroup not implemented")
}
func (UnimplementedClusterManagerServer) ListClusterNodeGroup(context.Context, *ListClusterNodeGroupRequest) (*ListClusterNodeGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusterNodeGroup not implemented")
}
func (UnimplementedClusterManagerServer) ListNodeGroup(context.Context, *ListNodeGroupRequest) (*ListNodeGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodeGroup not implemented")
}
func (UnimplementedClusterManagerServer) MoveNodesToGroup(context.Context, *MoveNodesToGroupRequest) (*MoveNodesToGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveNodesToGroup not implemented")
}
func (UnimplementedClusterManagerServer) RemoveNodesFromGroup(context.Context, *RemoveNodesFromGroupRequest) (*RemoveNodesFromGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNodesFromGroup not implemented")
}
func (UnimplementedClusterManagerServer) CleanNodesInGroup(context.Context, *CleanNodesInGroupRequest) (*CleanNodesInGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanNodesInGroup not implemented")
}
func (UnimplementedClusterManagerServer) CleanNodesInGroupV2(context.Context, *CleanNodesInGroupV2Request) (*CleanNodesInGroupV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanNodesInGroupV2 not implemented")
}
func (UnimplementedClusterManagerServer) ListNodesInGroup(context.Context, *GetNodeGroupRequest) (*ListNodesInGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodesInGroup not implemented")
}
func (UnimplementedClusterManagerServer) ListNodesInGroupV2(context.Context, *ListNodesInGroupV2Request) (*ListNodesInGroupV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodesInGroupV2 not implemented")
}
func (UnimplementedClusterManagerServer) UpdateGroupDesiredNode(context.Context, *UpdateGroupDesiredNodeRequest) (*UpdateGroupDesiredNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupDesiredNode not implemented")
}
func (UnimplementedClusterManagerServer) UpdateGroupDesiredSize(context.Context, *UpdateGroupDesiredSizeRequest) (*UpdateGroupDesiredSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupDesiredSize not implemented")
}
func (UnimplementedClusterManagerServer) UpdateGroupMinMaxSize(context.Context, *UpdateGroupMinMaxSizeRequest) (*UpdateGroupMinMaxSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupMinMaxSize not implemented")
}
func (UnimplementedClusterManagerServer) EnableNodeGroupAutoScale(context.Context, *EnableNodeGroupAutoScaleRequest) (*EnableNodeGroupAutoScaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableNodeGroupAutoScale not implemented")
}
func (UnimplementedClusterManagerServer) DisableNodeGroupAutoScale(context.Context, *DisableNodeGroupAutoScaleRequest) (*DisableNodeGroupAutoScaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableNodeGroupAutoScale not implemented")
}
func (UnimplementedClusterManagerServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedClusterManagerServer) RetryTask(context.Context, *RetryTaskRequest) (*RetryTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryTask not implemented")
}
func (UnimplementedClusterManagerServer) UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedClusterManagerServer) DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedClusterManagerServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedClusterManagerServer) ListTask(context.Context, *ListTaskRequest) (*ListTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTask not implemented")
}
func (UnimplementedClusterManagerServer) CreateAutoScalingOption(context.Context, *CreateAutoScalingOptionRequest) (*CreateAutoScalingOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAutoScalingOption not implemented")
}
func (UnimplementedClusterManagerServer) UpdateAutoScalingOption(context.Context, *UpdateAutoScalingOptionRequest) (*UpdateAutoScalingOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutoScalingOption not implemented")
}
func (UnimplementedClusterManagerServer) DeleteAutoScalingOption(context.Context, *DeleteAutoScalingOptionRequest) (*DeleteAutoScalingOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAutoScalingOption not implemented")
}
func (UnimplementedClusterManagerServer) GetAutoScalingOption(context.Context, *GetAutoScalingOptionRequest) (*GetAutoScalingOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAutoScalingOption not implemented")
}
func (UnimplementedClusterManagerServer) ListAutoScalingOption(context.Context, *ListAutoScalingOptionRequest) (*ListAutoScalingOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAutoScalingOption not implemented")
}
func (UnimplementedClusterManagerServer) UpdateAutoScalingStatus(context.Context, *UpdateAutoScalingStatusRequest) (*UpdateAutoScalingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutoScalingStatus not implemented")
}
func (UnimplementedClusterManagerServer) SyncAutoScalingOption(context.Context, *SyncAutoScalingOptionRequest) (*SyncAutoScalingOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAutoScalingOption not implemented")
}
func (UnimplementedClusterManagerServer) CreateNodeTemplate(context.Context, *CreateNodeTemplateRequest) (*CreateNodeTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNodeTemplate not implemented")
}
func (UnimplementedClusterManagerServer) UpdateNodeTemplate(context.Context, *UpdateNodeTemplateRequest) (*UpdateNodeTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeTemplate not implemented")
}
func (UnimplementedClusterManagerServer) DeleteNodeTemplate(context.Context, *DeleteNodeTemplateRequest) (*DeleteNodeTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodeTemplate not implemented")
}
func (UnimplementedClusterManagerServer) ListNodeTemplate(context.Context, *ListNodeTemplateRequest) (*ListNodeTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodeTemplate not implemented")
}
func (UnimplementedClusterManagerServer) GetNodeTemplate(context.Context, *GetNodeTemplateRequest) (*GetNodeTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeTemplate not implemented")
}
func (UnimplementedClusterManagerServer) CreateCloudAccount(context.Context, *CreateCloudAccountRequest) (*CreateCloudAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloudAccount not implemented")
}
func (UnimplementedClusterManagerServer) UpdateCloudAccount(context.Context, *UpdateCloudAccountRequest) (*UpdateCloudAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloudAccount not implemented")
}
func (UnimplementedClusterManagerServer) MigrateCloudAccount(context.Context, *MigrateCloudAccountRequest) (*MigrateCloudAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateCloudAccount not implemented")
}
func (UnimplementedClusterManagerServer) DeleteCloudAccount(context.Context, *DeleteCloudAccountRequest) (*DeleteCloudAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloudAccount not implemented")
}
func (UnimplementedClusterManagerServer) ListCloudAccount(context.Context, *ListCloudAccountRequest) (*ListCloudAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudAccount not implemented")
}
func (UnimplementedClusterManagerServer) ListCloudAccountToPerm(context.Context, *ListCloudAccountPermRequest) (*ListCloudAccountPermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudAccountToPerm not implemented")
}
func (UnimplementedClusterManagerServer) VerifyCloudAccount(context.Context, *VerifyCloudAccountRequest) (*VerifyCloudAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCloudAccount not implemented")
}
func (UnimplementedClusterManagerServer) GetCloudRegions(context.Context, *GetCloudRegionsRequest) (*GetCloudRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudRegions not implemented")
}
func (UnimplementedClusterManagerServer) GetCloudRegionZones(context.Context, *GetCloudRegionZonesRequest) (*GetCloudRegionZonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudRegionZones not implemented")
}
func (UnimplementedClusterManagerServer) ListCloudRegionCluster(context.Context, *ListCloudRegionClusterRequest) (*ListCloudRegionClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudRegionCluster not implemented")
}
func (UnimplementedClusterManagerServer) ListCloudSubnets(context.Context, *ListCloudSubnetsRequest) (*ListCloudSubnetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudSubnets not implemented")
}
func (UnimplementedClusterManagerServer) ListCloudSecurityGroups(context.Context, *ListCloudSecurityGroupsRequest) (*ListCloudSecurityGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudSecurityGroups not implemented")
}
func (UnimplementedClusterManagerServer) ListKeypairs(context.Context, *ListKeyPairsRequest) (*ListKeyPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeypairs not implemented")
}
func (UnimplementedClusterManagerServer) ListCloudInstanceTypes(context.Context, *ListCloudInstanceTypeRequest) (*ListCloudInstanceTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudInstanceTypes not implemented")
}
func (UnimplementedClusterManagerServer) ListCloudOsImage(context.Context, *ListCloudOsImageRequest) (*ListCloudOsImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudOsImage not implemented")
}
func (UnimplementedClusterManagerServer) ListCloudInstances(context.Context, *ListCloudInstancesRequest) (*ListCloudInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudInstances not implemented")
}
func (UnimplementedClusterManagerServer) GetCloudAccountType(context.Context, *GetCloudAccountTypeRequest) (*GetCloudAccountTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudAccountType not implemented")
}
func (UnimplementedClusterManagerServer) GetCloudBandwidthPackages(context.Context, *GetCloudBandwidthPackagesRequest) (*GetCloudBandwidthPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudBandwidthPackages not implemented")
}
func (UnimplementedClusterManagerServer) ListOperationLogs(context.Context, *ListOperationLogsRequest) (*ListOperationLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperationLogs not implemented")
}
func (UnimplementedClusterManagerServer) ListResourceSchema(context.Context, *ListResourceSchemaRequest) (*CommonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceSchema not implemented")
}
func (UnimplementedClusterManagerServer) GetResourceSchema(context.Context, *GetResourceSchemaRequest) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceSchema not implemented")
}
func (UnimplementedClusterManagerServer) QueryPermByActionID(context.Context, *QueryPermByActionIDRequest) (*QueryPermByActionIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPermByActionID not implemented")
}
func (UnimplementedClusterManagerServer) ListBKCloud(context.Context, *ListBKCloudRequest) (*CommonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBKCloud not implemented")
}
func (UnimplementedClusterManagerServer) ListCCTopology(context.Context, *ListCCTopologyRequest) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCCTopology not implemented")
}
func (UnimplementedClusterManagerServer) GetBkSopsTemplateList(context.Context, *GetBkSopsTemplateListRequest) (*GetBkSopsTemplateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBkSopsTemplateList not implemented")
}
func (UnimplementedClusterManagerServer) GetBkSopsTemplateInfo(context.Context, *GetBkSopsTemplateInfoRequest) (*GetBkSopsTemplateInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBkSopsTemplateInfo not implemented")
}
func (UnimplementedClusterManagerServer) GetInnerTemplateValues(context.Context, *GetInnerTemplateValuesRequest) (*GetInnerTemplateValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInnerTemplateValues not implemented")
}
func (UnimplementedClusterManagerServer) DebugBkSopsTask(context.Context, *DebugBkSopsTaskRequest) (*DebugBkSopsTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugBkSopsTask not implemented")
}
func (UnimplementedClusterManagerServer) GetBatchCustomSetting(context.Context, *GetBatchCustomSettingRequest) (*GetBatchCustomSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchCustomSetting not implemented")
}
func (UnimplementedClusterManagerServer) GetBizTopologyHost(context.Context, *GetBizTopologyHostRequest) (*GetBizTopologyHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBizTopologyHost not implemented")
}
func (UnimplementedClusterManagerServer) GetTopologyNodes(context.Context, *GetTopologyNodesRequest) (*GetTopologyNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopologyNodes not implemented")
}
func (UnimplementedClusterManagerServer) GetTopologyHostIdsNodes(context.Context, *GetTopologyHostIdsNodesRequest) (*GetTopologyHostIdsNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopologyHostIdsNodes not implemented")
}
func (UnimplementedClusterManagerServer) GetHostsDetails(context.Context, *GetHostsDetailsRequest) (*GetHostsDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostsDetails not implemented")
}
func (UnimplementedClusterManagerServer) GetScopeHostCheck(context.Context, *GetScopeHostCheckRequest) (*GetScopeHostCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScopeHostCheck not implemented")
}
func (UnimplementedClusterManagerServer) CreateCloudModuleFlag(context.Context, *CreateCloudModuleFlagRequest) (*CreateCloudModuleFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloudModuleFlag not implemented")
}
func (UnimplementedClusterManagerServer) UpdateCloudModuleFlag(context.Context, *UpdateCloudModuleFlagRequest) (*UpdateCloudModuleFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloudModuleFlag not implemented")
}
func (UnimplementedClusterManagerServer) DeleteCloudModuleFlag(context.Context, *DeleteCloudModuleFlagRequest) (*DeleteCloudModuleFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloudModuleFlag not implemented")
}
func (UnimplementedClusterManagerServer) ListCloudModuleFlag(context.Context, *ListCloudModuleFlagRequest) (*ListCloudModuleFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudModuleFlag not implemented")
}
func (UnimplementedClusterManagerServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedClusterManagerServer) mustEmbedUnimplementedClusterManagerServer() {}

// UnsafeClusterManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterManagerServer will
// result in compilation errors.
type UnsafeClusterManagerServer interface {
	mustEmbedUnimplementedClusterManagerServer()
}

func RegisterClusterManagerServer(s grpc.ServiceRegistrar, srv ClusterManagerServer) {
	s.RegisterService(&ClusterManager_ServiceDesc, srv)
}

func _ClusterManager_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CreateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CreateCluster(ctx, req.(*CreateClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_RetryCreateClusterTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryCreateClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).RetryCreateClusterTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/RetryCreateClusterTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).RetryCreateClusterTask(ctx, req.(*RetryCreateClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CheckCloudKubeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KubeConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CheckCloudKubeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CheckCloudKubeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CheckCloudKubeConfig(ctx, req.(*KubeConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CheckCloudKubeConfigConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KubeConfigConnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CheckCloudKubeConfigConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CheckCloudKubeConfigConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CheckCloudKubeConfigConnect(ctx, req.(*KubeConfigConnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ImportCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ImportCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ImportCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ImportCluster(ctx, req.(*ImportClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateCluster(ctx, req.(*UpdateClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_AddNodesToCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).AddNodesToCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/AddNodesToCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).AddNodesToCluster(ctx, req.(*AddNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteNodesFromCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteNodesFromCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteNodesFromCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteNodesFromCluster(ctx, req.(*DeleteNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_BatchDeleteNodesFromCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteClusterNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).BatchDeleteNodesFromCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/BatchDeleteNodesFromCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).BatchDeleteNodesFromCluster(ctx, req.(*BatchDeleteClusterNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetExternalNodeScriptByGroupID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExternalNodeScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetExternalNodeScriptByGroupID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetExternalNodeScriptByGroupID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetExternalNodeScriptByGroupID(ctx, req.(*GetExternalNodeScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListNodesInCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesInClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListNodesInCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListNodesInCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListNodesInCluster(ctx, req.(*ListNodesInClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListMastersInCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMastersInClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListMastersInCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListMastersInCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListMastersInCluster(ctx, req.(*ListMastersInClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteCluster(ctx, req.(*DeleteClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetCluster(ctx, req.(*GetClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListProjectCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListProjectCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListProjectCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListProjectCluster(ctx, req.(*ListProjectClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCluster(ctx, req.(*ListClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCommonCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommonClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCommonCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCommonCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCommonCluster(ctx, req.(*ListCommonClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CreateVirtualCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVirtualClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CreateVirtualCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CreateVirtualCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CreateVirtualCluster(ctx, req.(*CreateVirtualClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteVirtualCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVirtualClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteVirtualCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteVirtualCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteVirtualCluster(ctx, req.(*DeleteVirtualClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateVirtualClusterQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVirtualClusterQuotaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateVirtualClusterQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateVirtualClusterQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateVirtualClusterQuota(ctx, req.(*UpdateVirtualClusterQuotaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetNodeInfo(ctx, req.(*GetNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_RecordNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).RecordNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/RecordNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).RecordNodeInfo(ctx, req.(*RecordNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateNode(ctx, req.(*UpdateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CheckNodeInCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CheckNodeInCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CheckNodeInCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CheckNodeInCluster(ctx, req.(*CheckNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CordonNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CordonNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CordonNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CordonNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CordonNode(ctx, req.(*CordonNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UnCordonNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnCordonNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UnCordonNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UnCordonNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UnCordonNode(ctx, req.(*UnCordonNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DrainNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrainNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DrainNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DrainNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DrainNode(ctx, req.(*DrainNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateNodeLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateNodeLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateNodeLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateNodeLabels(ctx, req.(*UpdateNodeLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateNodeAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateNodeAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateNodeAnnotations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateNodeAnnotations(ctx, req.(*UpdateNodeAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateNodeTaints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeTaintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateNodeTaints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateNodeTaints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateNodeTaints(ctx, req.(*UpdateNodeTaintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetClusterCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetClusterCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetClusterCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetClusterCredential(ctx, req.(*GetClusterCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateClusterCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateClusterCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateClusterCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateClusterCredential(ctx, req.(*UpdateClusterCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteClusterCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteClusterCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteClusterCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteClusterCredential(ctx, req.(*DeleteClusterCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListClusterCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListClusterCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListClusterCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListClusterCredential(ctx, req.(*ListClusterCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_InitFederationCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitFederationClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).InitFederationCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/InitFederationCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).InitFederationCluster(ctx, req.(*InitFederationClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_AddFederatedCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFederatedClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).AddFederatedCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/AddFederatedCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).AddFederatedCluster(ctx, req.(*AddFederatedClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CreateCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CreateCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CreateCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CreateCloud(ctx, req.(*CreateCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateCloud(ctx, req.(*UpdateCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteCloud(ctx, req.(*DeleteCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetCloud(ctx, req.(*GetCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloud(ctx, req.(*ListCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CreateCloudVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCloudVPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CreateCloudVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CreateCloudVPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CreateCloudVPC(ctx, req.(*CreateCloudVPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateCloudVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCloudVPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateCloudVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateCloudVPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateCloudVPC(ctx, req.(*UpdateCloudVPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteCloudVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloudVPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteCloudVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteCloudVPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteCloudVPC(ctx, req.(*DeleteCloudVPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudVPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudVPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudVPC(ctx, req.(*ListCloudVPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudRegions(ctx, req.(*ListCloudRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetVPCCidr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVPCCidrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetVPCCidr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetVPCCidr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetVPCCidr(ctx, req.(*GetVPCCidrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CreateNodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CreateNodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CreateNodeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CreateNodeGroup(ctx, req.(*CreateNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateNodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateNodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateNodeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateNodeGroup(ctx, req.(*UpdateNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteNodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteNodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteNodeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteNodeGroup(ctx, req.(*DeleteNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetNodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetNodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetNodeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetNodeGroup(ctx, req.(*GetNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListClusterNodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListClusterNodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListClusterNodeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListClusterNodeGroup(ctx, req.(*ListClusterNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListNodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListNodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListNodeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListNodeGroup(ctx, req.(*ListNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_MoveNodesToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveNodesToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).MoveNodesToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/MoveNodesToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).MoveNodesToGroup(ctx, req.(*MoveNodesToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_RemoveNodesFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNodesFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).RemoveNodesFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/RemoveNodesFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).RemoveNodesFromGroup(ctx, req.(*RemoveNodesFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CleanNodesInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanNodesInGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CleanNodesInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CleanNodesInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CleanNodesInGroup(ctx, req.(*CleanNodesInGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CleanNodesInGroupV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanNodesInGroupV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CleanNodesInGroupV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CleanNodesInGroupV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CleanNodesInGroupV2(ctx, req.(*CleanNodesInGroupV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListNodesInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListNodesInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListNodesInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListNodesInGroup(ctx, req.(*GetNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListNodesInGroupV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesInGroupV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListNodesInGroupV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListNodesInGroupV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListNodesInGroupV2(ctx, req.(*ListNodesInGroupV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateGroupDesiredNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupDesiredNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateGroupDesiredNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateGroupDesiredNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateGroupDesiredNode(ctx, req.(*UpdateGroupDesiredNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateGroupDesiredSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupDesiredSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateGroupDesiredSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateGroupDesiredSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateGroupDesiredSize(ctx, req.(*UpdateGroupDesiredSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateGroupMinMaxSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupMinMaxSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateGroupMinMaxSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateGroupMinMaxSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateGroupMinMaxSize(ctx, req.(*UpdateGroupMinMaxSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_EnableNodeGroupAutoScale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableNodeGroupAutoScaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).EnableNodeGroupAutoScale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/EnableNodeGroupAutoScale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).EnableNodeGroupAutoScale(ctx, req.(*EnableNodeGroupAutoScaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DisableNodeGroupAutoScale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableNodeGroupAutoScaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DisableNodeGroupAutoScale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DisableNodeGroupAutoScale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DisableNodeGroupAutoScale(ctx, req.(*DisableNodeGroupAutoScaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_RetryTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).RetryTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/RetryTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).RetryTask(ctx, req.(*RetryTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListTask(ctx, req.(*ListTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CreateAutoScalingOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAutoScalingOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CreateAutoScalingOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CreateAutoScalingOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CreateAutoScalingOption(ctx, req.(*CreateAutoScalingOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateAutoScalingOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAutoScalingOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateAutoScalingOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateAutoScalingOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateAutoScalingOption(ctx, req.(*UpdateAutoScalingOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteAutoScalingOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAutoScalingOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteAutoScalingOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteAutoScalingOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteAutoScalingOption(ctx, req.(*DeleteAutoScalingOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetAutoScalingOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAutoScalingOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetAutoScalingOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetAutoScalingOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetAutoScalingOption(ctx, req.(*GetAutoScalingOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListAutoScalingOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAutoScalingOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListAutoScalingOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListAutoScalingOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListAutoScalingOption(ctx, req.(*ListAutoScalingOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateAutoScalingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAutoScalingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateAutoScalingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateAutoScalingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateAutoScalingStatus(ctx, req.(*UpdateAutoScalingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_SyncAutoScalingOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncAutoScalingOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).SyncAutoScalingOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/SyncAutoScalingOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).SyncAutoScalingOption(ctx, req.(*SyncAutoScalingOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CreateNodeTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CreateNodeTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CreateNodeTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CreateNodeTemplate(ctx, req.(*CreateNodeTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateNodeTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateNodeTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateNodeTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateNodeTemplate(ctx, req.(*UpdateNodeTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteNodeTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteNodeTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteNodeTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteNodeTemplate(ctx, req.(*DeleteNodeTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListNodeTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListNodeTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListNodeTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListNodeTemplate(ctx, req.(*ListNodeTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetNodeTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetNodeTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetNodeTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetNodeTemplate(ctx, req.(*GetNodeTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CreateCloudAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCloudAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CreateCloudAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CreateCloudAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CreateCloudAccount(ctx, req.(*CreateCloudAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateCloudAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCloudAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateCloudAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateCloudAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateCloudAccount(ctx, req.(*UpdateCloudAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_MigrateCloudAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateCloudAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).MigrateCloudAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/MigrateCloudAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).MigrateCloudAccount(ctx, req.(*MigrateCloudAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteCloudAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloudAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteCloudAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteCloudAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteCloudAccount(ctx, req.(*DeleteCloudAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudAccount(ctx, req.(*ListCloudAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudAccountToPerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudAccountPermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudAccountToPerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudAccountToPerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudAccountToPerm(ctx, req.(*ListCloudAccountPermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_VerifyCloudAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCloudAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).VerifyCloudAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/VerifyCloudAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).VerifyCloudAccount(ctx, req.(*VerifyCloudAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetCloudRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetCloudRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetCloudRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetCloudRegions(ctx, req.(*GetCloudRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetCloudRegionZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudRegionZonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetCloudRegionZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetCloudRegionZones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetCloudRegionZones(ctx, req.(*GetCloudRegionZonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudRegionCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudRegionClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudRegionCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudRegionCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudRegionCluster(ctx, req.(*ListCloudRegionClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudSubnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudSubnetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudSubnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudSubnets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudSubnets(ctx, req.(*ListCloudSubnetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudSecurityGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudSecurityGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudSecurityGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudSecurityGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudSecurityGroups(ctx, req.(*ListCloudSecurityGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListKeypairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListKeypairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListKeypairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListKeypairs(ctx, req.(*ListKeyPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudInstanceTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudInstanceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudInstanceTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudInstanceTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudInstanceTypes(ctx, req.(*ListCloudInstanceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudOsImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudOsImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudOsImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudOsImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudOsImage(ctx, req.(*ListCloudOsImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudInstances(ctx, req.(*ListCloudInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetCloudAccountType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudAccountTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetCloudAccountType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetCloudAccountType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetCloudAccountType(ctx, req.(*GetCloudAccountTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetCloudBandwidthPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudBandwidthPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetCloudBandwidthPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetCloudBandwidthPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetCloudBandwidthPackages(ctx, req.(*GetCloudBandwidthPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListOperationLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperationLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListOperationLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListOperationLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListOperationLogs(ctx, req.(*ListOperationLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListResourceSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListResourceSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListResourceSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListResourceSchema(ctx, req.(*ListResourceSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetResourceSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetResourceSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetResourceSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetResourceSchema(ctx, req.(*GetResourceSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_QueryPermByActionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPermByActionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).QueryPermByActionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/QueryPermByActionID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).QueryPermByActionID(ctx, req.(*QueryPermByActionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListBKCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBKCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListBKCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListBKCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListBKCloud(ctx, req.(*ListBKCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCCTopology_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCCTopologyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCCTopology(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCCTopology",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCCTopology(ctx, req.(*ListCCTopologyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetBkSopsTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBkSopsTemplateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetBkSopsTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetBkSopsTemplateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetBkSopsTemplateList(ctx, req.(*GetBkSopsTemplateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetBkSopsTemplateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBkSopsTemplateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetBkSopsTemplateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetBkSopsTemplateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetBkSopsTemplateInfo(ctx, req.(*GetBkSopsTemplateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetInnerTemplateValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInnerTemplateValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetInnerTemplateValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetInnerTemplateValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetInnerTemplateValues(ctx, req.(*GetInnerTemplateValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DebugBkSopsTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugBkSopsTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DebugBkSopsTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DebugBkSopsTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DebugBkSopsTask(ctx, req.(*DebugBkSopsTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetBatchCustomSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchCustomSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetBatchCustomSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetBatchCustomSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetBatchCustomSetting(ctx, req.(*GetBatchCustomSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetBizTopologyHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBizTopologyHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetBizTopologyHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetBizTopologyHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetBizTopologyHost(ctx, req.(*GetBizTopologyHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetTopologyNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopologyNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetTopologyNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetTopologyNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetTopologyNodes(ctx, req.(*GetTopologyNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetTopologyHostIdsNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopologyHostIdsNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetTopologyHostIdsNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetTopologyHostIdsNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetTopologyHostIdsNodes(ctx, req.(*GetTopologyHostIdsNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetHostsDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostsDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetHostsDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetHostsDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetHostsDetails(ctx, req.(*GetHostsDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_GetScopeHostCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScopeHostCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).GetScopeHostCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/GetScopeHostCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).GetScopeHostCheck(ctx, req.(*GetScopeHostCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_CreateCloudModuleFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCloudModuleFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).CreateCloudModuleFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/CreateCloudModuleFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).CreateCloudModuleFlag(ctx, req.(*CreateCloudModuleFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_UpdateCloudModuleFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCloudModuleFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).UpdateCloudModuleFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/UpdateCloudModuleFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).UpdateCloudModuleFlag(ctx, req.(*UpdateCloudModuleFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_DeleteCloudModuleFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloudModuleFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).DeleteCloudModuleFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/DeleteCloudModuleFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).DeleteCloudModuleFlag(ctx, req.(*DeleteCloudModuleFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_ListCloudModuleFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudModuleFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).ListCloudModuleFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/ListCloudModuleFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).ListCloudModuleFlag(ctx, req.(*ListCloudModuleFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clustermanager.ClusterManager/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterManager_ServiceDesc is the grpc.ServiceDesc for ClusterManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clustermanager.ClusterManager",
	HandlerType: (*ClusterManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCluster",
			Handler:    _ClusterManager_CreateCluster_Handler,
		},
		{
			MethodName: "RetryCreateClusterTask",
			Handler:    _ClusterManager_RetryCreateClusterTask_Handler,
		},
		{
			MethodName: "CheckCloudKubeConfig",
			Handler:    _ClusterManager_CheckCloudKubeConfig_Handler,
		},
		{
			MethodName: "CheckCloudKubeConfigConnect",
			Handler:    _ClusterManager_CheckCloudKubeConfigConnect_Handler,
		},
		{
			MethodName: "ImportCluster",
			Handler:    _ClusterManager_ImportCluster_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _ClusterManager_UpdateCluster_Handler,
		},
		{
			MethodName: "AddNodesToCluster",
			Handler:    _ClusterManager_AddNodesToCluster_Handler,
		},
		{
			MethodName: "DeleteNodesFromCluster",
			Handler:    _ClusterManager_DeleteNodesFromCluster_Handler,
		},
		{
			MethodName: "BatchDeleteNodesFromCluster",
			Handler:    _ClusterManager_BatchDeleteNodesFromCluster_Handler,
		},
		{
			MethodName: "GetExternalNodeScriptByGroupID",
			Handler:    _ClusterManager_GetExternalNodeScriptByGroupID_Handler,
		},
		{
			MethodName: "ListNodesInCluster",
			Handler:    _ClusterManager_ListNodesInCluster_Handler,
		},
		{
			MethodName: "ListMastersInCluster",
			Handler:    _ClusterManager_ListMastersInCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _ClusterManager_DeleteCluster_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _ClusterManager_GetCluster_Handler,
		},
		{
			MethodName: "ListProjectCluster",
			Handler:    _ClusterManager_ListProjectCluster_Handler,
		},
		{
			MethodName: "ListCluster",
			Handler:    _ClusterManager_ListCluster_Handler,
		},
		{
			MethodName: "ListCommonCluster",
			Handler:    _ClusterManager_ListCommonCluster_Handler,
		},
		{
			MethodName: "CreateVirtualCluster",
			Handler:    _ClusterManager_CreateVirtualCluster_Handler,
		},
		{
			MethodName: "DeleteVirtualCluster",
			Handler:    _ClusterManager_DeleteVirtualCluster_Handler,
		},
		{
			MethodName: "UpdateVirtualClusterQuota",
			Handler:    _ClusterManager_UpdateVirtualClusterQuota_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _ClusterManager_GetNode_Handler,
		},
		{
			MethodName: "GetNodeInfo",
			Handler:    _ClusterManager_GetNodeInfo_Handler,
		},
		{
			MethodName: "RecordNodeInfo",
			Handler:    _ClusterManager_RecordNodeInfo_Handler,
		},
		{
			MethodName: "UpdateNode",
			Handler:    _ClusterManager_UpdateNode_Handler,
		},
		{
			MethodName: "CheckNodeInCluster",
			Handler:    _ClusterManager_CheckNodeInCluster_Handler,
		},
		{
			MethodName: "CordonNode",
			Handler:    _ClusterManager_CordonNode_Handler,
		},
		{
			MethodName: "UnCordonNode",
			Handler:    _ClusterManager_UnCordonNode_Handler,
		},
		{
			MethodName: "DrainNode",
			Handler:    _ClusterManager_DrainNode_Handler,
		},
		{
			MethodName: "UpdateNodeLabels",
			Handler:    _ClusterManager_UpdateNodeLabels_Handler,
		},
		{
			MethodName: "UpdateNodeAnnotations",
			Handler:    _ClusterManager_UpdateNodeAnnotations_Handler,
		},
		{
			MethodName: "UpdateNodeTaints",
			Handler:    _ClusterManager_UpdateNodeTaints_Handler,
		},
		{
			MethodName: "GetClusterCredential",
			Handler:    _ClusterManager_GetClusterCredential_Handler,
		},
		{
			MethodName: "UpdateClusterCredential",
			Handler:    _ClusterManager_UpdateClusterCredential_Handler,
		},
		{
			MethodName: "DeleteClusterCredential",
			Handler:    _ClusterManager_DeleteClusterCredential_Handler,
		},
		{
			MethodName: "ListClusterCredential",
			Handler:    _ClusterManager_ListClusterCredential_Handler,
		},
		{
			MethodName: "InitFederationCluster",
			Handler:    _ClusterManager_InitFederationCluster_Handler,
		},
		{
			MethodName: "AddFederatedCluster",
			Handler:    _ClusterManager_AddFederatedCluster_Handler,
		},
		{
			MethodName: "CreateCloud",
			Handler:    _ClusterManager_CreateCloud_Handler,
		},
		{
			MethodName: "UpdateCloud",
			Handler:    _ClusterManager_UpdateCloud_Handler,
		},
		{
			MethodName: "DeleteCloud",
			Handler:    _ClusterManager_DeleteCloud_Handler,
		},
		{
			MethodName: "GetCloud",
			Handler:    _ClusterManager_GetCloud_Handler,
		},
		{
			MethodName: "ListCloud",
			Handler:    _ClusterManager_ListCloud_Handler,
		},
		{
			MethodName: "CreateCloudVPC",
			Handler:    _ClusterManager_CreateCloudVPC_Handler,
		},
		{
			MethodName: "UpdateCloudVPC",
			Handler:    _ClusterManager_UpdateCloudVPC_Handler,
		},
		{
			MethodName: "DeleteCloudVPC",
			Handler:    _ClusterManager_DeleteCloudVPC_Handler,
		},
		{
			MethodName: "ListCloudVPC",
			Handler:    _ClusterManager_ListCloudVPC_Handler,
		},
		{
			MethodName: "ListCloudRegions",
			Handler:    _ClusterManager_ListCloudRegions_Handler,
		},
		{
			MethodName: "GetVPCCidr",
			Handler:    _ClusterManager_GetVPCCidr_Handler,
		},
		{
			MethodName: "CreateNodeGroup",
			Handler:    _ClusterManager_CreateNodeGroup_Handler,
		},
		{
			MethodName: "UpdateNodeGroup",
			Handler:    _ClusterManager_UpdateNodeGroup_Handler,
		},
		{
			MethodName: "DeleteNodeGroup",
			Handler:    _ClusterManager_DeleteNodeGroup_Handler,
		},
		{
			MethodName: "GetNodeGroup",
			Handler:    _ClusterManager_GetNodeGroup_Handler,
		},
		{
			MethodName: "ListClusterNodeGroup",
			Handler:    _ClusterManager_ListClusterNodeGroup_Handler,
		},
		{
			MethodName: "ListNodeGroup",
			Handler:    _ClusterManager_ListNodeGroup_Handler,
		},
		{
			MethodName: "MoveNodesToGroup",
			Handler:    _ClusterManager_MoveNodesToGroup_Handler,
		},
		{
			MethodName: "RemoveNodesFromGroup",
			Handler:    _ClusterManager_RemoveNodesFromGroup_Handler,
		},
		{
			MethodName: "CleanNodesInGroup",
			Handler:    _ClusterManager_CleanNodesInGroup_Handler,
		},
		{
			MethodName: "CleanNodesInGroupV2",
			Handler:    _ClusterManager_CleanNodesInGroupV2_Handler,
		},
		{
			MethodName: "ListNodesInGroup",
			Handler:    _ClusterManager_ListNodesInGroup_Handler,
		},
		{
			MethodName: "ListNodesInGroupV2",
			Handler:    _ClusterManager_ListNodesInGroupV2_Handler,
		},
		{
			MethodName: "UpdateGroupDesiredNode",
			Handler:    _ClusterManager_UpdateGroupDesiredNode_Handler,
		},
		{
			MethodName: "UpdateGroupDesiredSize",
			Handler:    _ClusterManager_UpdateGroupDesiredSize_Handler,
		},
		{
			MethodName: "UpdateGroupMinMaxSize",
			Handler:    _ClusterManager_UpdateGroupMinMaxSize_Handler,
		},
		{
			MethodName: "EnableNodeGroupAutoScale",
			Handler:    _ClusterManager_EnableNodeGroupAutoScale_Handler,
		},
		{
			MethodName: "DisableNodeGroupAutoScale",
			Handler:    _ClusterManager_DisableNodeGroupAutoScale_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _ClusterManager_CreateTask_Handler,
		},
		{
			MethodName: "RetryTask",
			Handler:    _ClusterManager_RetryTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _ClusterManager_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _ClusterManager_DeleteTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _ClusterManager_GetTask_Handler,
		},
		{
			MethodName: "ListTask",
			Handler:    _ClusterManager_ListTask_Handler,
		},
		{
			MethodName: "CreateAutoScalingOption",
			Handler:    _ClusterManager_CreateAutoScalingOption_Handler,
		},
		{
			MethodName: "UpdateAutoScalingOption",
			Handler:    _ClusterManager_UpdateAutoScalingOption_Handler,
		},
		{
			MethodName: "DeleteAutoScalingOption",
			Handler:    _ClusterManager_DeleteAutoScalingOption_Handler,
		},
		{
			MethodName: "GetAutoScalingOption",
			Handler:    _ClusterManager_GetAutoScalingOption_Handler,
		},
		{
			MethodName: "ListAutoScalingOption",
			Handler:    _ClusterManager_ListAutoScalingOption_Handler,
		},
		{
			MethodName: "UpdateAutoScalingStatus",
			Handler:    _ClusterManager_UpdateAutoScalingStatus_Handler,
		},
		{
			MethodName: "SyncAutoScalingOption",
			Handler:    _ClusterManager_SyncAutoScalingOption_Handler,
		},
		{
			MethodName: "CreateNodeTemplate",
			Handler:    _ClusterManager_CreateNodeTemplate_Handler,
		},
		{
			MethodName: "UpdateNodeTemplate",
			Handler:    _ClusterManager_UpdateNodeTemplate_Handler,
		},
		{
			MethodName: "DeleteNodeTemplate",
			Handler:    _ClusterManager_DeleteNodeTemplate_Handler,
		},
		{
			MethodName: "ListNodeTemplate",
			Handler:    _ClusterManager_ListNodeTemplate_Handler,
		},
		{
			MethodName: "GetNodeTemplate",
			Handler:    _ClusterManager_GetNodeTemplate_Handler,
		},
		{
			MethodName: "CreateCloudAccount",
			Handler:    _ClusterManager_CreateCloudAccount_Handler,
		},
		{
			MethodName: "UpdateCloudAccount",
			Handler:    _ClusterManager_UpdateCloudAccount_Handler,
		},
		{
			MethodName: "MigrateCloudAccount",
			Handler:    _ClusterManager_MigrateCloudAccount_Handler,
		},
		{
			MethodName: "DeleteCloudAccount",
			Handler:    _ClusterManager_DeleteCloudAccount_Handler,
		},
		{
			MethodName: "ListCloudAccount",
			Handler:    _ClusterManager_ListCloudAccount_Handler,
		},
		{
			MethodName: "ListCloudAccountToPerm",
			Handler:    _ClusterManager_ListCloudAccountToPerm_Handler,
		},
		{
			MethodName: "VerifyCloudAccount",
			Handler:    _ClusterManager_VerifyCloudAccount_Handler,
		},
		{
			MethodName: "GetCloudRegions",
			Handler:    _ClusterManager_GetCloudRegions_Handler,
		},
		{
			MethodName: "GetCloudRegionZones",
			Handler:    _ClusterManager_GetCloudRegionZones_Handler,
		},
		{
			MethodName: "ListCloudRegionCluster",
			Handler:    _ClusterManager_ListCloudRegionCluster_Handler,
		},
		{
			MethodName: "ListCloudSubnets",
			Handler:    _ClusterManager_ListCloudSubnets_Handler,
		},
		{
			MethodName: "ListCloudSecurityGroups",
			Handler:    _ClusterManager_ListCloudSecurityGroups_Handler,
		},
		{
			MethodName: "ListKeypairs",
			Handler:    _ClusterManager_ListKeypairs_Handler,
		},
		{
			MethodName: "ListCloudInstanceTypes",
			Handler:    _ClusterManager_ListCloudInstanceTypes_Handler,
		},
		{
			MethodName: "ListCloudOsImage",
			Handler:    _ClusterManager_ListCloudOsImage_Handler,
		},
		{
			MethodName: "ListCloudInstances",
			Handler:    _ClusterManager_ListCloudInstances_Handler,
		},
		{
			MethodName: "GetCloudAccountType",
			Handler:    _ClusterManager_GetCloudAccountType_Handler,
		},
		{
			MethodName: "GetCloudBandwidthPackages",
			Handler:    _ClusterManager_GetCloudBandwidthPackages_Handler,
		},
		{
			MethodName: "ListOperationLogs",
			Handler:    _ClusterManager_ListOperationLogs_Handler,
		},
		{
			MethodName: "ListResourceSchema",
			Handler:    _ClusterManager_ListResourceSchema_Handler,
		},
		{
			MethodName: "GetResourceSchema",
			Handler:    _ClusterManager_GetResourceSchema_Handler,
		},
		{
			MethodName: "QueryPermByActionID",
			Handler:    _ClusterManager_QueryPermByActionID_Handler,
		},
		{
			MethodName: "ListBKCloud",
			Handler:    _ClusterManager_ListBKCloud_Handler,
		},
		{
			MethodName: "ListCCTopology",
			Handler:    _ClusterManager_ListCCTopology_Handler,
		},
		{
			MethodName: "GetBkSopsTemplateList",
			Handler:    _ClusterManager_GetBkSopsTemplateList_Handler,
		},
		{
			MethodName: "GetBkSopsTemplateInfo",
			Handler:    _ClusterManager_GetBkSopsTemplateInfo_Handler,
		},
		{
			MethodName: "GetInnerTemplateValues",
			Handler:    _ClusterManager_GetInnerTemplateValues_Handler,
		},
		{
			MethodName: "DebugBkSopsTask",
			Handler:    _ClusterManager_DebugBkSopsTask_Handler,
		},
		{
			MethodName: "GetBatchCustomSetting",
			Handler:    _ClusterManager_GetBatchCustomSetting_Handler,
		},
		{
			MethodName: "GetBizTopologyHost",
			Handler:    _ClusterManager_GetBizTopologyHost_Handler,
		},
		{
			MethodName: "GetTopologyNodes",
			Handler:    _ClusterManager_GetTopologyNodes_Handler,
		},
		{
			MethodName: "GetTopologyHostIdsNodes",
			Handler:    _ClusterManager_GetTopologyHostIdsNodes_Handler,
		},
		{
			MethodName: "GetHostsDetails",
			Handler:    _ClusterManager_GetHostsDetails_Handler,
		},
		{
			MethodName: "GetScopeHostCheck",
			Handler:    _ClusterManager_GetScopeHostCheck_Handler,
		},
		{
			MethodName: "CreateCloudModuleFlag",
			Handler:    _ClusterManager_CreateCloudModuleFlag_Handler,
		},
		{
			MethodName: "UpdateCloudModuleFlag",
			Handler:    _ClusterManager_UpdateCloudModuleFlag_Handler,
		},
		{
			MethodName: "DeleteCloudModuleFlag",
			Handler:    _ClusterManager_DeleteCloudModuleFlag_Handler,
		},
		{
			MethodName: "ListCloudModuleFlag",
			Handler:    _ClusterManager_ListCloudModuleFlag_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _ClusterManager_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clustermanager.proto",
}
