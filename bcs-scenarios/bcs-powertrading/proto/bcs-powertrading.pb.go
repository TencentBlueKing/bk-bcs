// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: proto/bcs-powertrading.proto

package powertrading

import (
	any1 "github.com/golang/protobuf/ptypes/any"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProxyClusterManagerNodeCordonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerIPs   []string `protobuf:"bytes,1,rep,name=innerIPs,proto3" json:"innerIPs,omitempty"`
	BusinessID string   `protobuf:"bytes,2,opt,name=businessID,proto3" json:"businessID,omitempty"`
}

func (x *ProxyClusterManagerNodeCordonReq) Reset() {
	*x = ProxyClusterManagerNodeCordonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyClusterManagerNodeCordonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyClusterManagerNodeCordonReq) ProtoMessage() {}

func (x *ProxyClusterManagerNodeCordonReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyClusterManagerNodeCordonReq.ProtoReflect.Descriptor instead.
func (*ProxyClusterManagerNodeCordonReq) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{0}
}

func (x *ProxyClusterManagerNodeCordonReq) GetInnerIPs() []string {
	if x != nil {
		return x.InnerIPs
	}
	return nil
}

func (x *ProxyClusterManagerNodeCordonReq) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

type ProxyClusterManagerNodeCordonResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      *uint32   `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message   string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID string    `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Data      *any1.Any `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ProxyClusterManagerNodeCordonResp) Reset() {
	*x = ProxyClusterManagerNodeCordonResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyClusterManagerNodeCordonResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyClusterManagerNodeCordonResp) ProtoMessage() {}

func (x *ProxyClusterManagerNodeCordonResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyClusterManagerNodeCordonResp.ProtoReflect.Descriptor instead.
func (*ProxyClusterManagerNodeCordonResp) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{1}
}

func (x *ProxyClusterManagerNodeCordonResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ProxyClusterManagerNodeCordonResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ProxyClusterManagerNodeCordonResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ProxyClusterManagerNodeCordonResp) GetData() *any1.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProxyClusterManagerNodeDrainReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerIPs                        []string `protobuf:"bytes,1,rep,name=innerIPs,proto3" json:"innerIPs,omitempty"`
	BusinessID                      int64    `protobuf:"varint,2,opt,name=businessID,proto3" json:"businessID,omitempty"`
	Force                           bool     `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	GracePeriodSeconds              int32    `protobuf:"varint,5,opt,name=gracePeriodSeconds,proto3" json:"gracePeriodSeconds,omitempty"`
	IgnoreAllDaemonSets             bool     `protobuf:"varint,6,opt,name=ignoreAllDaemonSets,proto3" json:"ignoreAllDaemonSets,omitempty"`
	Timeout                         uint32   `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
	DeleteLocalData                 bool     `protobuf:"varint,8,opt,name=deleteLocalData,proto3" json:"deleteLocalData,omitempty"`
	Selector                        string   `protobuf:"bytes,9,opt,name=selector,proto3" json:"selector,omitempty"`
	PodSelector                     string   `protobuf:"bytes,10,opt,name=podSelector,proto3" json:"podSelector,omitempty"`
	DisableEviction                 bool     `protobuf:"varint,11,opt,name=disableEviction,proto3" json:"disableEviction,omitempty"`
	SkipWaitForDeleteTimeoutSeconds uint32   `protobuf:"varint,12,opt,name=skipWaitForDeleteTimeoutSeconds,proto3" json:"skipWaitForDeleteTimeoutSeconds,omitempty"`
	DryRun                          bool     `protobuf:"varint,13,opt,name=dryRun,proto3" json:"dryRun,omitempty"`
}

func (x *ProxyClusterManagerNodeDrainReq) Reset() {
	*x = ProxyClusterManagerNodeDrainReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyClusterManagerNodeDrainReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyClusterManagerNodeDrainReq) ProtoMessage() {}

func (x *ProxyClusterManagerNodeDrainReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyClusterManagerNodeDrainReq.ProtoReflect.Descriptor instead.
func (*ProxyClusterManagerNodeDrainReq) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{2}
}

func (x *ProxyClusterManagerNodeDrainReq) GetInnerIPs() []string {
	if x != nil {
		return x.InnerIPs
	}
	return nil
}

func (x *ProxyClusterManagerNodeDrainReq) GetBusinessID() int64 {
	if x != nil {
		return x.BusinessID
	}
	return 0
}

func (x *ProxyClusterManagerNodeDrainReq) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *ProxyClusterManagerNodeDrainReq) GetGracePeriodSeconds() int32 {
	if x != nil {
		return x.GracePeriodSeconds
	}
	return 0
}

func (x *ProxyClusterManagerNodeDrainReq) GetIgnoreAllDaemonSets() bool {
	if x != nil {
		return x.IgnoreAllDaemonSets
	}
	return false
}

func (x *ProxyClusterManagerNodeDrainReq) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ProxyClusterManagerNodeDrainReq) GetDeleteLocalData() bool {
	if x != nil {
		return x.DeleteLocalData
	}
	return false
}

func (x *ProxyClusterManagerNodeDrainReq) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

func (x *ProxyClusterManagerNodeDrainReq) GetPodSelector() string {
	if x != nil {
		return x.PodSelector
	}
	return ""
}

func (x *ProxyClusterManagerNodeDrainReq) GetDisableEviction() bool {
	if x != nil {
		return x.DisableEviction
	}
	return false
}

func (x *ProxyClusterManagerNodeDrainReq) GetSkipWaitForDeleteTimeoutSeconds() uint32 {
	if x != nil {
		return x.SkipWaitForDeleteTimeoutSeconds
	}
	return 0
}

func (x *ProxyClusterManagerNodeDrainReq) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

type ProxyClusterManagerNodeDrainResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      *uint32   `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message   string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID string    `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Data      *any1.Any `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ProxyClusterManagerNodeDrainResp) Reset() {
	*x = ProxyClusterManagerNodeDrainResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyClusterManagerNodeDrainResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyClusterManagerNodeDrainResp) ProtoMessage() {}

func (x *ProxyClusterManagerNodeDrainResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyClusterManagerNodeDrainResp.ProtoReflect.Descriptor instead.
func (*ProxyClusterManagerNodeDrainResp) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{3}
}

func (x *ProxyClusterManagerNodeDrainResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ProxyClusterManagerNodeDrainResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ProxyClusterManagerNodeDrainResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ProxyClusterManagerNodeDrainResp) GetData() *any1.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProxyClusterManagerNodeDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ips []string `protobuf:"bytes,1,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *ProxyClusterManagerNodeDetailReq) Reset() {
	*x = ProxyClusterManagerNodeDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyClusterManagerNodeDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyClusterManagerNodeDetailReq) ProtoMessage() {}

func (x *ProxyClusterManagerNodeDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyClusterManagerNodeDetailReq.ProtoReflect.Descriptor instead.
func (*ProxyClusterManagerNodeDetailReq) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{4}
}

func (x *ProxyClusterManagerNodeDetailReq) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type ProxyClusterManagerNodeDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      *uint32       `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message   string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID string        `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Data      []*NodeDetail `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ProxyClusterManagerNodeDetailResp) Reset() {
	*x = ProxyClusterManagerNodeDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyClusterManagerNodeDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyClusterManagerNodeDetailResp) ProtoMessage() {}

func (x *ProxyClusterManagerNodeDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyClusterManagerNodeDetailResp.ProtoReflect.Descriptor instead.
func (*ProxyClusterManagerNodeDetailResp) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{5}
}

func (x *ProxyClusterManagerNodeDetailResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ProxyClusterManagerNodeDetailResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ProxyClusterManagerNodeDetailResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ProxyClusterManagerNodeDetailResp) GetData() []*NodeDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

type NodeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip     string    `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Status string    `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Detail *any1.Any `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *NodeDetail) Reset() {
	*x = NodeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDetail) ProtoMessage() {}

func (x *NodeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDetail.ProtoReflect.Descriptor instead.
func (*NodeDetail) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{6}
}

func (x *NodeDetail) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NodeDetail) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NodeDetail) GetDetail() *any1.Any {
	if x != nil {
		return x.Detail
	}
	return nil
}

type ProxyResourceManagerCreateDeviceRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceIDs []string `protobuf:"bytes,1,rep,name=deviceIDs,proto3" json:"deviceIDs,omitempty"`
	Deadline  string   `protobuf:"bytes,2,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Ips       []string `protobuf:"bytes,3,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *ProxyResourceManagerCreateDeviceRecordReq) Reset() {
	*x = ProxyResourceManagerCreateDeviceRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyResourceManagerCreateDeviceRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyResourceManagerCreateDeviceRecordReq) ProtoMessage() {}

func (x *ProxyResourceManagerCreateDeviceRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyResourceManagerCreateDeviceRecordReq.ProtoReflect.Descriptor instead.
func (*ProxyResourceManagerCreateDeviceRecordReq) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{7}
}

func (x *ProxyResourceManagerCreateDeviceRecordReq) GetDeviceIDs() []string {
	if x != nil {
		return x.DeviceIDs
	}
	return nil
}

func (x *ProxyResourceManagerCreateDeviceRecordReq) GetDeadline() string {
	if x != nil {
		return x.Deadline
	}
	return ""
}

func (x *ProxyResourceManagerCreateDeviceRecordReq) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type ProxyResourceManagerCreateDeviceRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      *uint32   `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message   string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID string    `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Data      *any1.Any `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ProxyResourceManagerCreateDeviceRecordResp) Reset() {
	*x = ProxyResourceManagerCreateDeviceRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyResourceManagerCreateDeviceRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyResourceManagerCreateDeviceRecordResp) ProtoMessage() {}

func (x *ProxyResourceManagerCreateDeviceRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyResourceManagerCreateDeviceRecordResp.ProtoReflect.Descriptor instead.
func (*ProxyResourceManagerCreateDeviceRecordResp) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{8}
}

func (x *ProxyResourceManagerCreateDeviceRecordResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ProxyResourceManagerCreateDeviceRecordResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ProxyResourceManagerCreateDeviceRecordResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ProxyResourceManagerCreateDeviceRecordResp) GetData() *any1.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListDevicePoolOperationDataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID string      `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Data      []*any1.Any `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListDevicePoolOperationDataResp) Reset() {
	*x = ListDevicePoolOperationDataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDevicePoolOperationDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevicePoolOperationDataResp) ProtoMessage() {}

func (x *ListDevicePoolOperationDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevicePoolOperationDataResp.ProtoReflect.Descriptor instead.
func (*ListDevicePoolOperationDataResp) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{9}
}

func (x *ListDevicePoolOperationDataResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListDevicePoolOperationDataResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListDevicePoolOperationDataResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ListDevicePoolOperationDataResp) GetData() []*any1.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListDevicePoolOperationDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessID int64  `protobuf:"varint,1,opt,name=businessID,proto3" json:"businessID,omitempty"`
	Pool       string `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (x *ListDevicePoolOperationDataReq) Reset() {
	*x = ListDevicePoolOperationDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDevicePoolOperationDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevicePoolOperationDataReq) ProtoMessage() {}

func (x *ListDevicePoolOperationDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevicePoolOperationDataReq.ProtoReflect.Descriptor instead.
func (*ListDevicePoolOperationDataReq) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{10}
}

func (x *ListDevicePoolOperationDataReq) GetBusinessID() int64 {
	if x != nil {
		return x.BusinessID
	}
	return 0
}

func (x *ListDevicePoolOperationDataReq) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

type ListDeviceOperationDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pool []string `protobuf:"bytes,1,rep,name=pool,proto3" json:"pool,omitempty"`
	Ips  []string `protobuf:"bytes,2,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *ListDeviceOperationDataReq) Reset() {
	*x = ListDeviceOperationDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeviceOperationDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceOperationDataReq) ProtoMessage() {}

func (x *ListDeviceOperationDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceOperationDataReq.ProtoReflect.Descriptor instead.
func (*ListDeviceOperationDataReq) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{11}
}

func (x *ListDeviceOperationDataReq) GetPool() []string {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *ListDeviceOperationDataReq) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type ListDeviceOperationDataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID string      `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Data      []*any1.Any `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListDeviceOperationDataResp) Reset() {
	*x = ListDeviceOperationDataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeviceOperationDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceOperationDataResp) ProtoMessage() {}

func (x *ListDeviceOperationDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceOperationDataResp.ProtoReflect.Descriptor instead.
func (*ListDeviceOperationDataResp) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{12}
}

func (x *ListDeviceOperationDataResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListDeviceOperationDataResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListDeviceOperationDataResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ListDeviceOperationDataResp) GetData() []*any1.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type MachineTestReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessID string   `protobuf:"bytes,1,opt,name=businessID,proto3" json:"businessID,omitempty"`
	Source     string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	IpList     []string `protobuf:"bytes,3,rep,name=ipList,proto3" json:"ipList,omitempty"`
}

func (x *MachineTestReq) Reset() {
	*x = MachineTestReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineTestReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineTestReq) ProtoMessage() {}

func (x *MachineTestReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineTestReq.ProtoReflect.Descriptor instead.
func (*MachineTestReq) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{13}
}

func (x *MachineTestReq) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *MachineTestReq) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *MachineTestReq) GetIpList() []string {
	if x != nil {
		return x.IpList
	}
	return nil
}

type GetMachineTestTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID string `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *GetMachineTestTaskReq) Reset() {
	*x = GetMachineTestTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMachineTestTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMachineTestTaskReq) ProtoMessage() {}

func (x *GetMachineTestTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMachineTestTaskReq.ProtoReflect.Descriptor instead.
func (*GetMachineTestTaskReq) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{14}
}

func (x *GetMachineTestTaskReq) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

type MachineTestRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      *uint32          `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message   string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID string           `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Data      *MachineTestData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MachineTestRsp) Reset() {
	*x = MachineTestRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineTestRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineTestRsp) ProtoMessage() {}

func (x *MachineTestRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineTestRsp.ProtoReflect.Descriptor instead.
func (*MachineTestRsp) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{15}
}

func (x *MachineTestRsp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *MachineTestRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MachineTestRsp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *MachineTestRsp) GetData() *MachineTestData {
	if x != nil {
		return x.Data
	}
	return nil
}

type MachineTestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId      string                        `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Status      string                        `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Detail      map[string]*MachineTaskDetail `protobuf:"bytes,3,rep,name=detail,proto3" json:"detail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TaskSummary *TaskSummary                  `protobuf:"bytes,4,opt,name=TaskSummary,proto3" json:"TaskSummary,omitempty"`
	Ips         []string                      `protobuf:"bytes,5,rep,name=ips,proto3" json:"ips,omitempty"`
	TaskType    string                        `protobuf:"bytes,6,opt,name=taskType,proto3" json:"taskType,omitempty"`
	BusinessID  string                        `protobuf:"bytes,7,opt,name=businessID,proto3" json:"businessID,omitempty"`
}

func (x *MachineTestData) Reset() {
	*x = MachineTestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineTestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineTestData) ProtoMessage() {}

func (x *MachineTestData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineTestData.ProtoReflect.Descriptor instead.
func (*MachineTestData) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{16}
}

func (x *MachineTestData) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *MachineTestData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MachineTestData) GetDetail() map[string]*MachineTaskDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *MachineTestData) GetTaskSummary() *TaskSummary {
	if x != nil {
		return x.TaskSummary
	}
	return nil
}

func (x *MachineTestData) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *MachineTestData) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *MachineTestData) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

type TaskSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failure   []*SummaryMessage `protobuf:"bytes,1,rep,name=failure,proto3" json:"failure,omitempty"`
	Success   []*SummaryMessage `protobuf:"bytes,2,rep,name=success,proto3" json:"success,omitempty"`
	NeedClean []*SummaryMessage `protobuf:"bytes,3,rep,name=needClean,proto3" json:"needClean,omitempty"`
}

func (x *TaskSummary) Reset() {
	*x = TaskSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSummary) ProtoMessage() {}

func (x *TaskSummary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSummary.ProtoReflect.Descriptor instead.
func (*TaskSummary) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{17}
}

func (x *TaskSummary) GetFailure() []*SummaryMessage {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *TaskSummary) GetSuccess() []*SummaryMessage {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *TaskSummary) GetNeedClean() []*SummaryMessage {
	if x != nil {
		return x.NeedClean
	}
	return nil
}

type SummaryMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckProcessName string   `protobuf:"bytes,1,opt,name=checkProcessName,proto3" json:"checkProcessName,omitempty"`
	Ips              []string `protobuf:"bytes,2,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *SummaryMessage) Reset() {
	*x = SummaryMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryMessage) ProtoMessage() {}

func (x *SummaryMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryMessage.ProtoReflect.Descriptor instead.
func (*SummaryMessage) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{18}
}

func (x *SummaryMessage) GetCheckProcessName() string {
	if x != nil {
		return x.CheckProcessName
	}
	return ""
}

func (x *SummaryMessage) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type IPList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ips []string `protobuf:"bytes,1,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *IPList) Reset() {
	*x = IPList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPList) ProtoMessage() {}

func (x *IPList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPList.ProtoReflect.Descriptor instead.
func (*IPList) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{19}
}

func (x *IPList) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type MachineTaskDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       string                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BksOpsTaskID string                `protobuf:"bytes,2,opt,name=bksOpsTaskID,proto3" json:"bksOpsTaskID,omitempty"`
	JobID        string                `protobuf:"bytes,3,opt,name=jobID,proto3" json:"jobID,omitempty"`
	Messages     []*MachineTestMessage `protobuf:"bytes,4,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *MachineTaskDetail) Reset() {
	*x = MachineTaskDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineTaskDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineTaskDetail) ProtoMessage() {}

func (x *MachineTaskDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineTaskDetail.ProtoReflect.Descriptor instead.
func (*MachineTaskDetail) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{20}
}

func (x *MachineTaskDetail) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MachineTaskDetail) GetBksOpsTaskID() string {
	if x != nil {
		return x.BksOpsTaskID
	}
	return ""
}

func (x *MachineTaskDetail) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *MachineTaskDetail) GetMessages() []*MachineTestMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type MachineTestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip          string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Pass        string `protobuf:"bytes,2,opt,name=pass,proto3" json:"pass,omitempty"`
	AbleToClean string `protobuf:"bytes,3,opt,name=ableToClean,proto3" json:"ableToClean,omitempty"`
	Message     string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MachineTestMessage) Reset() {
	*x = MachineTestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineTestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineTestMessage) ProtoMessage() {}

func (x *MachineTestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineTestMessage.ProtoReflect.Descriptor instead.
func (*MachineTestMessage) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{21}
}

func (x *MachineTestMessage) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *MachineTestMessage) GetPass() string {
	if x != nil {
		return x.Pass
	}
	return ""
}

func (x *MachineTestMessage) GetAbleToClean() string {
	if x != nil {
		return x.AbleToClean
	}
	return ""
}

func (x *MachineTestMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListDevicesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessID int64             `protobuf:"varint,1,opt,name=businessID,proto3" json:"businessID,omitempty"`
	DeviceIDs  []string          `protobuf:"bytes,2,rep,name=deviceIDs,proto3" json:"deviceIDs,omitempty"`
	Labels     map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ips        []string          `protobuf:"bytes,4,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *ListDevicesReq) Reset() {
	*x = ListDevicesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDevicesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevicesReq) ProtoMessage() {}

func (x *ListDevicesReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevicesReq.ProtoReflect.Descriptor instead.
func (*ListDevicesReq) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{22}
}

func (x *ListDevicesReq) GetBusinessID() int64 {
	if x != nil {
		return x.BusinessID
	}
	return 0
}

func (x *ListDevicesReq) GetDeviceIDs() []string {
	if x != nil {
		return x.DeviceIDs
	}
	return nil
}

func (x *ListDevicesReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListDevicesReq) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type ListDevicesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID string       `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Data      []*MTYDevice `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListDevicesResp) Reset() {
	*x = ListDevicesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDevicesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevicesResp) ProtoMessage() {}

func (x *ListDevicesResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevicesResp.ProtoReflect.Descriptor instead.
func (*ListDevicesResp) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{23}
}

func (x *ListDevicesResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListDevicesResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListDevicesResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ListDevicesResp) GetData() []*MTYDevice {
	if x != nil {
		return x.Data
	}
	return nil
}

type MTYDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Labels           map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status           string            `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	ShelfStatus      string            `protobuf:"bytes,4,opt,name=shelfStatus,proto3" json:"shelfStatus,omitempty"`
	InnerIP          string            `protobuf:"bytes,5,opt,name=innerIP,proto3" json:"innerIP,omitempty"`
	AssetID          string            `protobuf:"bytes,6,opt,name=assetID,proto3" json:"assetID,omitempty"`
	BusinessID       uint32            `protobuf:"varint,7,opt,name=businessID,proto3" json:"businessID,omitempty"`
	CreateTime       string            `protobuf:"bytes,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	LastConsumedTime string            `protobuf:"bytes,9,opt,name=lastConsumedTime,proto3" json:"lastConsumedTime,omitempty"`
	LastReturnedTime string            `protobuf:"bytes,10,opt,name=lastReturnedTime,proto3" json:"lastReturnedTime,omitempty"`
	DevicePoolID     string            `protobuf:"bytes,11,opt,name=devicePoolID,proto3" json:"devicePoolID,omitempty"`
}

func (x *MTYDevice) Reset() {
	*x = MTYDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MTYDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MTYDevice) ProtoMessage() {}

func (x *MTYDevice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MTYDevice.ProtoReflect.Descriptor instead.
func (*MTYDevice) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{24}
}

func (x *MTYDevice) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MTYDevice) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MTYDevice) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MTYDevice) GetShelfStatus() string {
	if x != nil {
		return x.ShelfStatus
	}
	return ""
}

func (x *MTYDevice) GetInnerIP() string {
	if x != nil {
		return x.InnerIP
	}
	return ""
}

func (x *MTYDevice) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

func (x *MTYDevice) GetBusinessID() uint32 {
	if x != nil {
		return x.BusinessID
	}
	return 0
}

func (x *MTYDevice) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *MTYDevice) GetLastConsumedTime() string {
	if x != nil {
		return x.LastConsumedTime
	}
	return ""
}

func (x *MTYDevice) GetLastReturnedTime() string {
	if x != nil {
		return x.LastReturnedTime
	}
	return ""
}

func (x *MTYDevice) GetDevicePoolID() string {
	if x != nil {
		return x.DevicePoolID
	}
	return ""
}

type EditDevicesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessID   int64             `protobuf:"varint,1,opt,name=businessID,proto3" json:"businessID,omitempty"`
	Ips          []string          `protobuf:"bytes,2,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels       map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations  map[string]string `protobuf:"bytes,4,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OnlyEditInfo bool              `protobuf:"varint,5,opt,name=onlyEditInfo,proto3" json:"onlyEditInfo,omitempty"`
	OnlyEditNode bool              `protobuf:"varint,6,opt,name=onlyEditNode,proto3" json:"onlyEditNode,omitempty"`
}

func (x *EditDevicesReq) Reset() {
	*x = EditDevicesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditDevicesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditDevicesReq) ProtoMessage() {}

func (x *EditDevicesReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditDevicesReq.ProtoReflect.Descriptor instead.
func (*EditDevicesReq) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{25}
}

func (x *EditDevicesReq) GetBusinessID() int64 {
	if x != nil {
		return x.BusinessID
	}
	return 0
}

func (x *EditDevicesReq) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *EditDevicesReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *EditDevicesReq) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *EditDevicesReq) GetOnlyEditInfo() bool {
	if x != nil {
		return x.OnlyEditInfo
	}
	return false
}

func (x *EditDevicesReq) GetOnlyEditNode() bool {
	if x != nil {
		return x.OnlyEditNode
	}
	return false
}

type EditDevicesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      *uint32            `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message   string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID string             `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Data      *EditDevicesDetail `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EditDevicesResp) Reset() {
	*x = EditDevicesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditDevicesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditDevicesResp) ProtoMessage() {}

func (x *EditDevicesResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditDevicesResp.ProtoReflect.Descriptor instead.
func (*EditDevicesResp) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{26}
}

func (x *EditDevicesResp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *EditDevicesResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EditDevicesResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *EditDevicesResp) GetData() *EditDevicesDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

type EditDevicesDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success []string `protobuf:"bytes,1,rep,name=success,proto3" json:"success,omitempty"`
	Fail    []string `protobuf:"bytes,2,rep,name=fail,proto3" json:"fail,omitempty"`
}

func (x *EditDevicesDetail) Reset() {
	*x = EditDevicesDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_powertrading_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditDevicesDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditDevicesDetail) ProtoMessage() {}

func (x *EditDevicesDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_powertrading_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditDevicesDetail.ProtoReflect.Descriptor instead.
func (*EditDevicesDetail) Descriptor() ([]byte, []int) {
	return file_proto_bcs_powertrading_proto_rawDescGZIP(), []int{27}
}

func (x *EditDevicesDetail) GetSuccess() []string {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *EditDevicesDetail) GetFail() []string {
	if x != nil {
		return x.Fail
	}
	return nil
}

var File_proto_bcs_powertrading_proto protoreflect.FileDescriptor

var file_proto_bcs_powertrading_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x63, 0x73, 0x2d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x01, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a, 0x08, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x50, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a,
	0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x73, 0x32, 0x14, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0x49, 0x50, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52,
	0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x08,
	0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x49, 0x44, 0x22, 0xea, 0x02, 0x0a, 0x21, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0x92, 0x41, 0x15, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x08,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x15, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe,
	0xe5, 0xa4, 0x87, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a,
	0x47, 0x92, 0x41, 0x44, 0x0a, 0x42, 0x2a, 0x21, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x32, 0x0c, 0x63, 0x6f, 0x72, 0x64, 0x6f,
	0x6e, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0xdf, 0x04, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x72, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x7b, 0x0a, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x5f, 0x92, 0x41, 0x5c, 0x2a, 0x08, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x50, 0x73, 0x32, 0x50, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x86,
	0x85, 0xe7, 0xbd, 0x91, 0x49, 0x50, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc, 0x8c, 0xe5,
	0x92, 0x8c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0xe4, 0xba, 0x8c, 0xe9, 0x80, 0x89, 0xe4, 0xb8, 0x80, 0xef, 0xbc, 0x8c,
	0xe4, 0xbc, 0x98, 0xe5, 0x85, 0x88, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x50, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x0a, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x08, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49,
	0x44, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c,
	0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x64, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x64, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x48, 0x0a, 0x1f, 0x73, 0x6b, 0x69, 0x70, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x73, 0x6b, 0x69, 0x70,
	0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x72, 0x79, 0x52, 0x75, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79,
	0x52, 0x75, 0x6e, 0x22, 0xe7, 0x02, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x44,
	0x72, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7,
	0xa0, 0x81, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41,
	0x15, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x15, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4,
	0x87, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x45, 0x92,
	0x41, 0x42, 0x0a, 0x40, 0x2a, 0x20, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x72, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x32, 0x0b, 0x64, 0x72, 0x61, 0x69, 0x6e, 0xe5, 0x93, 0x8d,
	0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x54, 0x0a,
	0x20, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x30, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1e,
	0x92, 0x41, 0x1b, 0x2a, 0x03, 0x69, 0x70, 0x73, 0x32, 0x14, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0x49, 0x50, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x03,
	0x69, 0x70, 0x73, 0x22, 0xf4, 0x02, 0x0a, 0x21, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92,
	0x41, 0x15, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x4e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x15, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x3a, 0x4d, 0x92, 0x41, 0x4a, 0x0a, 0x48, 0x2a, 0x21, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x32, 0x12, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94,
	0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0a, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x2a, 0x02, 0x69, 0x70, 0x32, 0x02,
	0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x32, 0x06, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x32, 0x06, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x52, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xe8, 0x01, 0x0a, 0x29, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x48, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x73, 0x32, 0x1a, 0xe8, 0xa6, 0x81, 0xe4, 0xb8, 0x8b, 0xe6,
	0x9e, 0xb6, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x73, 0x12, 0x39,
	0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x32,
	0x0e, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x69, 0x70, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x03, 0x69, 0x70, 0x73,
	0x32, 0x1a, 0xe8, 0xa6, 0x81, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe7, 0x9a, 0x84, 0xe8, 0xae,
	0xbe, 0xe5, 0xa4, 0x87, 0x69, 0x70, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x03, 0x69, 0x70,
	0x73, 0x22, 0x88, 0x03, 0x0a, 0x2a, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x49, 0x44, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x15, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x5c, 0x92, 0x41, 0x59, 0x0a, 0x57, 0x2a, 0x2a, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x32, 0x18, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95, 0xe5, 0x93, 0x8d, 0xe5,
	0xba, 0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xdc, 0x02, 0x0a,
	0x1f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32,
	0x08, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x15, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84, 0xe8, 0xae,
	0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x3a, 0x49, 0x92, 0x41, 0x46, 0x0a, 0x44, 0x2a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x32, 0x10, 0x70, 0x6f, 0x6f, 0x6c, 0xe8, 0xbf,
	0x90, 0xe8, 0x90, 0xa5, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x1e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x39,
	0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x49, 0x44, 0x32, 0x08, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x0a, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x04, 0x70, 0x6f, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x04, 0x70, 0x6f,
	0x6f, 0x6c, 0x32, 0x0b, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x69, 0x64, 0x52,
	0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x6e, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x32, 0x0b, 0xe8, 0xb5,
	0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x69, 0x64, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12,
	0x24, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41,
	0x0f, 0x2a, 0x03, 0x69, 0x70, 0x73, 0x32, 0x08, 0x69, 0x70, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x52, 0x03, 0x69, 0x70, 0x73, 0x22, 0xd8, 0x02, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x49, 0x44, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x15, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x49, 0x92, 0x41, 0x46, 0x0a, 0x44, 0x2a, 0x1f, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x32, 0x10, 0x70,
	0x6f, 0x6f, 0x6c, 0xe8, 0xbf, 0x90, 0xe8, 0x90, 0xa5, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xd2,
	0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xa7, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x0a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x08, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1,
	0x49, 0x44, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0x92, 0x41, 0x10, 0x2a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x32, 0x06, 0xe6, 0x9d, 0xa5,
	0xe6, 0xba, 0x90, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x69,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12,
	0x2a, 0x06, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x08, 0x69, 0x70, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x52, 0x06, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x32, 0x08, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x22, 0xc2, 0x02, 0x0a, 0x0e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x48,
	0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x42,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0f, 0x92, 0x41, 0x0c,
	0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x04, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x3a, 0x3a, 0x92, 0x41, 0x37, 0x0a, 0x35, 0x2a, 0x0e, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x73, 0x70, 0x32, 0x12, 0xe6, 0x9c, 0xba, 0xe5, 0x99,
	0xa8, 0xe6, 0xa3, 0x80, 0xe6, 0xb5, 0x8b, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x95, 0x04, 0x0a, 0x0f, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08,
	0x2a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x06, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x32, 0x06, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x52, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x5b, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x74, 0x61, 0x73,
	0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x32, 0x0c, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c,
	0xe6, 0xb1, 0x87, 0xe6, 0x80, 0xbb, 0x52, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x03, 0x69, 0x70, 0x73, 0x32, 0x0e, 0xe6, 0xa3, 0x80, 0xe6,
	0xb5, 0x8b, 0x69, 0x70, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x03, 0x69, 0x70, 0x73, 0x12,
	0x35, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x32, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a,
	0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x0a, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x49, 0x44, 0x1a, 0x5a, 0x0a, 0x0b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x83, 0x02, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x4c, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x14,
	0x92, 0x41, 0x11, 0x2a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x32, 0x06, 0xe5, 0xa4,
	0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x4c, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x14, 0x92, 0x41,
	0x11, 0x2a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0x06, 0xe6, 0x88, 0x90, 0xe5,
	0x8a, 0x9f, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x58, 0x0a, 0x09, 0x6e,
	0x65, 0x65, 0x64, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x1c, 0x92, 0x41,
	0x19, 0x2a, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x32, 0x0c, 0xe9, 0x9c,
	0x80, 0xe8, 0xa6, 0x81, 0xe6, 0xb8, 0x85, 0xe7, 0x90, 0x86, 0x52, 0x09, 0x6e, 0x65, 0x65, 0x64,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x0e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x12, 0xe6, 0xa3, 0x80, 0xe6, 0x9f,
	0xa5, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x10, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41,
	0x0f, 0x2a, 0x03, 0x69, 0x70, 0x73, 0x32, 0x08, 0x69, 0x70, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x52, 0x03, 0x69, 0x70, 0x73, 0x22, 0x2e, 0x0a, 0x06, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41,
	0x0f, 0x2a, 0x03, 0x69, 0x70, 0x73, 0x32, 0x08, 0x69, 0x70, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x52, 0x03, 0x69, 0x70, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x11, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10,
	0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x06, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x62, 0x6b, 0x73, 0x4f,
	0x70, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27,
	0x92, 0x41, 0x24, 0x2a, 0x0c, 0x62, 0x6b, 0x73, 0x4f, 0x70, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x32, 0x14, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe8, 0xbf, 0x90, 0xe7, 0xbb, 0xb4, 0xe4,
	0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x69, 0x64, 0x52, 0x0c, 0x62, 0x6b, 0x73, 0x4f, 0x70, 0x73, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44,
	0x32, 0x08, 0xe4, 0xbd, 0x9c, 0xe4, 0xb8, 0x9a, 0x69, 0x64, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x44, 0x12, 0x59, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x32, 0x0c, 0xe6, 0xa3, 0x80, 0xe6, 0xb5, 0x8b, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xde, 0x01, 0x0a,
	0x12, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0x92, 0x41, 0x04, 0x2a, 0x02, 0x69, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x2b, 0x0a, 0x04,
	0x70, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a,
	0x04, 0x70, 0x61, 0x73, 0x73, 0x32, 0x0c, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe9, 0x80, 0x9a,
	0xe8, 0xbf, 0x87, 0x52, 0x04, 0x70, 0x61, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x0b, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x6f, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30,
	0x92, 0x41, 0x2d, 0x2a, 0x0b, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x32, 0x1e, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe6, 0x89,
	0xa7, 0xe8, 0xa1, 0x8c, 0xe6, 0xb8, 0x85, 0xe7, 0x90, 0x86, 0xe6, 0xb5, 0x81, 0xe7, 0xa8, 0x8b,
	0x52, 0x0b, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x2e, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0x92, 0x41, 0x11, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x06, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xda, 0x02,
	0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x39, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x08, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52,
	0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x73, 0x32, 0x10,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x20, 0x49, 0x44, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x73, 0x12, 0x64, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x32, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0x9a, 0x84, 0xe6, 0xa0, 0x87,
	0xe7, 0xad, 0xbe, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x2c, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x03, 0x69, 0x70, 0x73, 0x32, 0x10, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87,
	0x20, 0x69, 0x70, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x03, 0x69, 0x70, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0, 0x02, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92,
	0x41, 0x15, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x4d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x54, 0x59, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x15, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84, 0xe8,
	0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x3a, 0x3a, 0x92, 0x41, 0x37, 0x0a, 0x35, 0x2a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x32, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbd, 0x03,
	0x0a, 0x09, 0x4d, 0x54, 0x59, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x54, 0x59, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x50, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x49, 0x44, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x04,
	0x0a, 0x0e, 0x45, 0x64, 0x69, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x39, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x08, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52,
	0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x03, 0x69,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x03, 0x69,
	0x70, 0x73, 0x32, 0x10, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x20, 0x69, 0x70, 0x20, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x03, 0x69, 0x70, 0x73, 0x12, 0x64, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x32, 0x15, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0x9a, 0x84, 0xe6, 0xa0, 0x87, 0xe7, 0xad,
	0xbe, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x74, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x64, 0x69,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1f, 0x92, 0x41, 0x1c,
	0x2a, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x0c,
	0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6f, 0x6e,
	0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0c, 0x6f, 0x6e,
	0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x32, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x02, 0x0a, 0x0f, 0x45,
	0x64, 0x69, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x36, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x32, 0x08, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x4f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84, 0xe7, 0xbb, 0x93, 0xe6,
	0x9e, 0x9c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x3a, 0x92, 0x41, 0x37, 0x0a, 0x35, 0x2a,
	0x0f, 0x45, 0x64, 0x69, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x32, 0x11, 0x65, 0x64, 0x69, 0x74, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0xe5, 0x93, 0x8d,
	0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x76, 0x0a,
	0x11, 0x45, 0x64, 0x69, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x32, 0x0c, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x66, 0x61, 0x69,
	0x6c, 0x32, 0x0c, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52,
	0x04, 0x66, 0x61, 0x69, 0x6c, 0x32, 0x95, 0x0e, 0x0a, 0x0c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0xe0, 0x01, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x1a, 0x1c, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x63, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x34, 0x12, 0x18, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xb8, 0x8d,
	0xe5, 0x8f, 0xaf, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x1a,
	0x18, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xb8, 0x8d, 0xe5, 0x8f, 0xaf, 0xe8, 0xb0, 0x83,
	0xe5, 0xba, 0xa6, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x12, 0xde, 0x01, 0x0a, 0x1f, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x43, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x12, 0x2e, 0x2e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x1a, 0x1e, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x75, 0x6e,
	0x63, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x2e, 0x12, 0x15, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x8f, 0xaf, 0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0x1a, 0x15, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x8f, 0xaf, 0xe8, 0xb0,
	0x83, 0xe5, 0xba, 0xa6, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x12, 0x81, 0x02, 0x0a, 0x1c, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x2d, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x81, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x64, 0x72, 0x61, 0x69, 0x6e,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x58, 0x12, 0x2a, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x50, 0x6f,
	0x64, 0xe8, 0xbf, 0x81, 0xe7, 0xa7, 0xbb, 0xef, 0xbc, 0x8c, 0xe5, 0xb0, 0x86, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe4, 0xb8, 0x8a, 0xe7, 0x9a, 0x84, 0x50, 0x6f, 0x64, 0xe9, 0xa9, 0xb1, 0xe9,
	0x80, 0x90, 0x1a, 0x2a, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x50, 0x6f, 0x64, 0xe8, 0xbf, 0x81,
	0xe7, 0xa7, 0xbb, 0xef, 0xbc, 0x8c, 0xe5, 0xb0, 0x86, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4,
	0xb8, 0x8a, 0xe7, 0x9a, 0x84, 0x50, 0x6f, 0x64, 0xe9, 0xa9, 0xb1, 0xe9, 0x80, 0x90, 0x12, 0xcd,
	0x01, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x2e, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x1a, 0x2f, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x28, 0x12, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x1a, 0x12, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12, 0xf3,
	0x01, 0x0a, 0x26, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x37, 0x2e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x38, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x56, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x2a, 0x12, 0x13, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a,
	0x13, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x92, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x73, 0x70,
	0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x1c, 0x12, 0x0c, 0xe6,
	0xa3, 0x80, 0xe6, 0xb5, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x99, 0xa8, 0x1a, 0x0c, 0xe6, 0xa3, 0x80,
	0xe6, 0xb5, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x99, 0xa8, 0x12, 0xa5, 0x01, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x2e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22,
	0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x92, 0x41, 0x28, 0x12, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x1a, 0x12, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xaf, 0xa6, 0xe6, 0x83,
	0x85, 0x12, 0x94, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x12, 0x1c, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x48,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x2f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x1c, 0x12, 0x0c, 0xe6, 0xb8,
	0x85, 0xe7, 0x90, 0x86, 0xe6, 0x9c, 0xba, 0xe5, 0x99, 0xa8, 0x1a, 0x0c, 0xe6, 0xb8, 0x85, 0xe7,
	0x90, 0x86, 0xe6, 0x9c, 0xba, 0xe5, 0x99, 0xa8, 0x12, 0xa2, 0x01, 0x0a, 0x0e, 0x45, 0x64, 0x69,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x22, 0x1d, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x28, 0x12, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x8a, 0x82,
	0xe7, 0x82, 0xb9, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x42, 0x16, 0x5a,
	0x14, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_bcs_powertrading_proto_rawDescOnce sync.Once
	file_proto_bcs_powertrading_proto_rawDescData = file_proto_bcs_powertrading_proto_rawDesc
)

func file_proto_bcs_powertrading_proto_rawDescGZIP() []byte {
	file_proto_bcs_powertrading_proto_rawDescOnce.Do(func() {
		file_proto_bcs_powertrading_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_bcs_powertrading_proto_rawDescData)
	})
	return file_proto_bcs_powertrading_proto_rawDescData
}

var file_proto_bcs_powertrading_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_proto_bcs_powertrading_proto_goTypes = []interface{}{
	(*ProxyClusterManagerNodeCordonReq)(nil),           // 0: powertrading.ProxyClusterManagerNodeCordonReq
	(*ProxyClusterManagerNodeCordonResp)(nil),          // 1: powertrading.ProxyClusterManagerNodeCordonResp
	(*ProxyClusterManagerNodeDrainReq)(nil),            // 2: powertrading.ProxyClusterManagerNodeDrainReq
	(*ProxyClusterManagerNodeDrainResp)(nil),           // 3: powertrading.ProxyClusterManagerNodeDrainResp
	(*ProxyClusterManagerNodeDetailReq)(nil),           // 4: powertrading.ProxyClusterManagerNodeDetailReq
	(*ProxyClusterManagerNodeDetailResp)(nil),          // 5: powertrading.ProxyClusterManagerNodeDetailResp
	(*NodeDetail)(nil),                                 // 6: powertrading.NodeDetail
	(*ProxyResourceManagerCreateDeviceRecordReq)(nil),  // 7: powertrading.ProxyResourceManagerCreateDeviceRecordReq
	(*ProxyResourceManagerCreateDeviceRecordResp)(nil), // 8: powertrading.ProxyResourceManagerCreateDeviceRecordResp
	(*ListDevicePoolOperationDataResp)(nil),            // 9: powertrading.ListDevicePoolOperationDataResp
	(*ListDevicePoolOperationDataReq)(nil),             // 10: powertrading.ListDevicePoolOperationDataReq
	(*ListDeviceOperationDataReq)(nil),                 // 11: powertrading.ListDeviceOperationDataReq
	(*ListDeviceOperationDataResp)(nil),                // 12: powertrading.ListDeviceOperationDataResp
	(*MachineTestReq)(nil),                             // 13: powertrading.MachineTestReq
	(*GetMachineTestTaskReq)(nil),                      // 14: powertrading.GetMachineTestTaskReq
	(*MachineTestRsp)(nil),                             // 15: powertrading.MachineTestRsp
	(*MachineTestData)(nil),                            // 16: powertrading.MachineTestData
	(*TaskSummary)(nil),                                // 17: powertrading.TaskSummary
	(*SummaryMessage)(nil),                             // 18: powertrading.SummaryMessage
	(*IPList)(nil),                                     // 19: powertrading.IPList
	(*MachineTaskDetail)(nil),                          // 20: powertrading.MachineTaskDetail
	(*MachineTestMessage)(nil),                         // 21: powertrading.MachineTestMessage
	(*ListDevicesReq)(nil),                             // 22: powertrading.ListDevicesReq
	(*ListDevicesResp)(nil),                            // 23: powertrading.ListDevicesResp
	(*MTYDevice)(nil),                                  // 24: powertrading.MTYDevice
	(*EditDevicesReq)(nil),                             // 25: powertrading.EditDevicesReq
	(*EditDevicesResp)(nil),                            // 26: powertrading.EditDevicesResp
	(*EditDevicesDetail)(nil),                          // 27: powertrading.EditDevicesDetail
	nil,                                                // 28: powertrading.MachineTestData.DetailEntry
	nil,                                                // 29: powertrading.ListDevicesReq.LabelsEntry
	nil,                                                // 30: powertrading.MTYDevice.LabelsEntry
	nil,                                                // 31: powertrading.EditDevicesReq.LabelsEntry
	nil,                                                // 32: powertrading.EditDevicesReq.AnnotationsEntry
	(*any1.Any)(nil),                                   // 33: google.protobuf.Any
}
var file_proto_bcs_powertrading_proto_depIdxs = []int32{
	33, // 0: powertrading.ProxyClusterManagerNodeCordonResp.data:type_name -> google.protobuf.Any
	33, // 1: powertrading.ProxyClusterManagerNodeDrainResp.data:type_name -> google.protobuf.Any
	6,  // 2: powertrading.ProxyClusterManagerNodeDetailResp.data:type_name -> powertrading.NodeDetail
	33, // 3: powertrading.NodeDetail.detail:type_name -> google.protobuf.Any
	33, // 4: powertrading.ProxyResourceManagerCreateDeviceRecordResp.data:type_name -> google.protobuf.Any
	33, // 5: powertrading.ListDevicePoolOperationDataResp.data:type_name -> google.protobuf.Any
	33, // 6: powertrading.ListDeviceOperationDataResp.data:type_name -> google.protobuf.Any
	16, // 7: powertrading.MachineTestRsp.data:type_name -> powertrading.MachineTestData
	28, // 8: powertrading.MachineTestData.detail:type_name -> powertrading.MachineTestData.DetailEntry
	17, // 9: powertrading.MachineTestData.TaskSummary:type_name -> powertrading.TaskSummary
	18, // 10: powertrading.TaskSummary.failure:type_name -> powertrading.SummaryMessage
	18, // 11: powertrading.TaskSummary.success:type_name -> powertrading.SummaryMessage
	18, // 12: powertrading.TaskSummary.needClean:type_name -> powertrading.SummaryMessage
	21, // 13: powertrading.MachineTaskDetail.messages:type_name -> powertrading.MachineTestMessage
	29, // 14: powertrading.ListDevicesReq.labels:type_name -> powertrading.ListDevicesReq.LabelsEntry
	24, // 15: powertrading.ListDevicesResp.data:type_name -> powertrading.MTYDevice
	30, // 16: powertrading.MTYDevice.labels:type_name -> powertrading.MTYDevice.LabelsEntry
	31, // 17: powertrading.EditDevicesReq.labels:type_name -> powertrading.EditDevicesReq.LabelsEntry
	32, // 18: powertrading.EditDevicesReq.annotations:type_name -> powertrading.EditDevicesReq.AnnotationsEntry
	27, // 19: powertrading.EditDevicesResp.data:type_name -> powertrading.EditDevicesDetail
	20, // 20: powertrading.MachineTestData.DetailEntry.value:type_name -> powertrading.MachineTaskDetail
	0,  // 21: powertrading.PowerTrading.ProxyClusterManagerNodeCordon:input_type -> powertrading.ProxyClusterManagerNodeCordonReq
	0,  // 22: powertrading.PowerTrading.ProxyClusterManagerNodeUnCordon:input_type -> powertrading.ProxyClusterManagerNodeCordonReq
	2,  // 23: powertrading.PowerTrading.ProxyClusterManagerNodeDrain:input_type -> powertrading.ProxyClusterManagerNodeDrainReq
	4,  // 24: powertrading.PowerTrading.ProxyClusterManagerNodeDetail:input_type -> powertrading.ProxyClusterManagerNodeDetailReq
	7,  // 25: powertrading.PowerTrading.ProxyResourceManagerCreateDeviceRecord:input_type -> powertrading.ProxyResourceManagerCreateDeviceRecordReq
	13, // 26: powertrading.PowerTrading.MachineTest:input_type -> powertrading.MachineTestReq
	14, // 27: powertrading.PowerTrading.GetMachineTask:input_type -> powertrading.GetMachineTestTaskReq
	13, // 28: powertrading.PowerTrading.MachineClean:input_type -> powertrading.MachineTestReq
	25, // 29: powertrading.PowerTrading.EditDeviceInfo:input_type -> powertrading.EditDevicesReq
	1,  // 30: powertrading.PowerTrading.ProxyClusterManagerNodeCordon:output_type -> powertrading.ProxyClusterManagerNodeCordonResp
	1,  // 31: powertrading.PowerTrading.ProxyClusterManagerNodeUnCordon:output_type -> powertrading.ProxyClusterManagerNodeCordonResp
	3,  // 32: powertrading.PowerTrading.ProxyClusterManagerNodeDrain:output_type -> powertrading.ProxyClusterManagerNodeDrainResp
	5,  // 33: powertrading.PowerTrading.ProxyClusterManagerNodeDetail:output_type -> powertrading.ProxyClusterManagerNodeDetailResp
	8,  // 34: powertrading.PowerTrading.ProxyResourceManagerCreateDeviceRecord:output_type -> powertrading.ProxyResourceManagerCreateDeviceRecordResp
	15, // 35: powertrading.PowerTrading.MachineTest:output_type -> powertrading.MachineTestRsp
	15, // 36: powertrading.PowerTrading.GetMachineTask:output_type -> powertrading.MachineTestRsp
	15, // 37: powertrading.PowerTrading.MachineClean:output_type -> powertrading.MachineTestRsp
	26, // 38: powertrading.PowerTrading.EditDeviceInfo:output_type -> powertrading.EditDevicesResp
	30, // [30:39] is the sub-list for method output_type
	21, // [21:30] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_proto_bcs_powertrading_proto_init() }
func file_proto_bcs_powertrading_proto_init() {
	if File_proto_bcs_powertrading_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_bcs_powertrading_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyClusterManagerNodeCordonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyClusterManagerNodeCordonResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyClusterManagerNodeDrainReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyClusterManagerNodeDrainResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyClusterManagerNodeDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyClusterManagerNodeDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyResourceManagerCreateDeviceRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyResourceManagerCreateDeviceRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDevicePoolOperationDataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDevicePoolOperationDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceOperationDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceOperationDataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineTestReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMachineTestTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineTestRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineTestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineTaskDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineTestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDevicesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDevicesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MTYDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditDevicesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditDevicesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_powertrading_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditDevicesDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_bcs_powertrading_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_proto_bcs_powertrading_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_proto_bcs_powertrading_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_proto_bcs_powertrading_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_proto_bcs_powertrading_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_proto_bcs_powertrading_proto_msgTypes[26].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_bcs_powertrading_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_bcs_powertrading_proto_goTypes,
		DependencyIndexes: file_proto_bcs_powertrading_proto_depIdxs,
		MessageInfos:      file_proto_bcs_powertrading_proto_msgTypes,
	}.Build()
	File_proto_bcs_powertrading_proto = out.File
	file_proto_bcs_powertrading_proto_rawDesc = nil
	file_proto_bcs_powertrading_proto_goTypes = nil
	file_proto_bcs_powertrading_proto_depIdxs = nil
}
