// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/bcs-powertrading.proto

package powertrading

import (
	fmt "fmt"
	_ "github.com/golang/protobuf/ptypes/any"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PowerTrading service

func NewPowerTradingEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "PowerTrading.ProxyClusterManagerNodeCordon",
			Path:    []string{"/powertrading/v1/node/cordon"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "PowerTrading.ProxyClusterManagerNodeUnCordon",
			Path:    []string{"/powertrading/v1/node/uncordon"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "PowerTrading.ProxyClusterManagerNodeDrain",
			Path:    []string{"/powertrading/v1/node/drain"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "PowerTrading.ProxyClusterManagerNodeDetail",
			Path:    []string{"/powertrading/v1/node"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "PowerTrading.ProxyResourceManagerCreateDeviceRecord",
			Path:    []string{"/powertrading/v1/device/record"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "PowerTrading.MachineTest",
			Path:    []string{"/powertrading/v1/machine/test"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "PowerTrading.GetMachineTask",
			Path:    []string{"/powertrading/v1/machine/task"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "PowerTrading.MachineClean",
			Path:    []string{"/powertrading/v1/machine/clean"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "PowerTrading.EditDeviceInfo",
			Path:    []string{"/powertrading/v1/edit_devices"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
	}
}

// Client API for PowerTrading service

type PowerTradingService interface {
	ProxyClusterManagerNodeCordon(ctx context.Context, in *ProxyClusterManagerNodeCordonReq, opts ...client.CallOption) (*ProxyClusterManagerNodeCordonResp, error)
	ProxyClusterManagerNodeUnCordon(ctx context.Context, in *ProxyClusterManagerNodeCordonReq, opts ...client.CallOption) (*ProxyClusterManagerNodeCordonResp, error)
	ProxyClusterManagerNodeDrain(ctx context.Context, in *ProxyClusterManagerNodeDrainReq, opts ...client.CallOption) (*ProxyClusterManagerNodeDrainResp, error)
	ProxyClusterManagerNodeDetail(ctx context.Context, in *ProxyClusterManagerNodeDetailReq, opts ...client.CallOption) (*ProxyClusterManagerNodeDetailResp, error)
	ProxyResourceManagerCreateDeviceRecord(ctx context.Context, in *ProxyResourceManagerCreateDeviceRecordReq, opts ...client.CallOption) (*ProxyResourceManagerCreateDeviceRecordResp, error)
	//  rpc ListDevicePoolOperationData(ListDevicePoolOperationDataReq) returns (
	//      ListDevicePoolOperationDataResp) {
	//    option (google.api.http) = {
	//      get : "/powertrading/v1/data/pool"
	//    };
	//    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	//      description : "获取资源池运营数据"
	//      summary : "获取资源池运营数据"
	//    };
	//  }
	MachineTest(ctx context.Context, in *MachineTestReq, opts ...client.CallOption) (*MachineTestRsp, error)
	GetMachineTask(ctx context.Context, in *GetMachineTestTaskReq, opts ...client.CallOption) (*MachineTestRsp, error)
	MachineClean(ctx context.Context, in *MachineTestReq, opts ...client.CallOption) (*MachineTestRsp, error)
	//  rpc ProxyResourceManagerListDevices(ListDevicesReq) returns (ListDevicesResp) {
	//    option (google.api.http) = {
	//      post : "/powertrading/v1/list_devices"
	//      body: "*"
	//    };
	//    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	//      description : "获取节点列表"
	//      summary : "获取节点列表"
	//    };
	//  }
	EditDeviceInfo(ctx context.Context, in *EditDevicesReq, opts ...client.CallOption) (*EditDevicesResp, error)
}

type powerTradingService struct {
	c    client.Client
	name string
}

func NewPowerTradingService(name string, c client.Client) PowerTradingService {
	return &powerTradingService{
		c:    c,
		name: name,
	}
}

func (c *powerTradingService) ProxyClusterManagerNodeCordon(ctx context.Context, in *ProxyClusterManagerNodeCordonReq, opts ...client.CallOption) (*ProxyClusterManagerNodeCordonResp, error) {
	req := c.c.NewRequest(c.name, "PowerTrading.ProxyClusterManagerNodeCordon", in)
	out := new(ProxyClusterManagerNodeCordonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerTradingService) ProxyClusterManagerNodeUnCordon(ctx context.Context, in *ProxyClusterManagerNodeCordonReq, opts ...client.CallOption) (*ProxyClusterManagerNodeCordonResp, error) {
	req := c.c.NewRequest(c.name, "PowerTrading.ProxyClusterManagerNodeUnCordon", in)
	out := new(ProxyClusterManagerNodeCordonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerTradingService) ProxyClusterManagerNodeDrain(ctx context.Context, in *ProxyClusterManagerNodeDrainReq, opts ...client.CallOption) (*ProxyClusterManagerNodeDrainResp, error) {
	req := c.c.NewRequest(c.name, "PowerTrading.ProxyClusterManagerNodeDrain", in)
	out := new(ProxyClusterManagerNodeDrainResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerTradingService) ProxyClusterManagerNodeDetail(ctx context.Context, in *ProxyClusterManagerNodeDetailReq, opts ...client.CallOption) (*ProxyClusterManagerNodeDetailResp, error) {
	req := c.c.NewRequest(c.name, "PowerTrading.ProxyClusterManagerNodeDetail", in)
	out := new(ProxyClusterManagerNodeDetailResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerTradingService) ProxyResourceManagerCreateDeviceRecord(ctx context.Context, in *ProxyResourceManagerCreateDeviceRecordReq, opts ...client.CallOption) (*ProxyResourceManagerCreateDeviceRecordResp, error) {
	req := c.c.NewRequest(c.name, "PowerTrading.ProxyResourceManagerCreateDeviceRecord", in)
	out := new(ProxyResourceManagerCreateDeviceRecordResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerTradingService) MachineTest(ctx context.Context, in *MachineTestReq, opts ...client.CallOption) (*MachineTestRsp, error) {
	req := c.c.NewRequest(c.name, "PowerTrading.MachineTest", in)
	out := new(MachineTestRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerTradingService) GetMachineTask(ctx context.Context, in *GetMachineTestTaskReq, opts ...client.CallOption) (*MachineTestRsp, error) {
	req := c.c.NewRequest(c.name, "PowerTrading.GetMachineTask", in)
	out := new(MachineTestRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerTradingService) MachineClean(ctx context.Context, in *MachineTestReq, opts ...client.CallOption) (*MachineTestRsp, error) {
	req := c.c.NewRequest(c.name, "PowerTrading.MachineClean", in)
	out := new(MachineTestRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerTradingService) EditDeviceInfo(ctx context.Context, in *EditDevicesReq, opts ...client.CallOption) (*EditDevicesResp, error) {
	req := c.c.NewRequest(c.name, "PowerTrading.EditDeviceInfo", in)
	out := new(EditDevicesResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PowerTrading service

type PowerTradingHandler interface {
	ProxyClusterManagerNodeCordon(context.Context, *ProxyClusterManagerNodeCordonReq, *ProxyClusterManagerNodeCordonResp) error
	ProxyClusterManagerNodeUnCordon(context.Context, *ProxyClusterManagerNodeCordonReq, *ProxyClusterManagerNodeCordonResp) error
	ProxyClusterManagerNodeDrain(context.Context, *ProxyClusterManagerNodeDrainReq, *ProxyClusterManagerNodeDrainResp) error
	ProxyClusterManagerNodeDetail(context.Context, *ProxyClusterManagerNodeDetailReq, *ProxyClusterManagerNodeDetailResp) error
	ProxyResourceManagerCreateDeviceRecord(context.Context, *ProxyResourceManagerCreateDeviceRecordReq, *ProxyResourceManagerCreateDeviceRecordResp) error
	//  rpc ListDevicePoolOperationData(ListDevicePoolOperationDataReq) returns (
	//      ListDevicePoolOperationDataResp) {
	//    option (google.api.http) = {
	//      get : "/powertrading/v1/data/pool"
	//    };
	//    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	//      description : "获取资源池运营数据"
	//      summary : "获取资源池运营数据"
	//    };
	//  }
	MachineTest(context.Context, *MachineTestReq, *MachineTestRsp) error
	GetMachineTask(context.Context, *GetMachineTestTaskReq, *MachineTestRsp) error
	MachineClean(context.Context, *MachineTestReq, *MachineTestRsp) error
	//  rpc ProxyResourceManagerListDevices(ListDevicesReq) returns (ListDevicesResp) {
	//    option (google.api.http) = {
	//      post : "/powertrading/v1/list_devices"
	//      body: "*"
	//    };
	//    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	//      description : "获取节点列表"
	//      summary : "获取节点列表"
	//    };
	//  }
	EditDeviceInfo(context.Context, *EditDevicesReq, *EditDevicesResp) error
}

func RegisterPowerTradingHandler(s server.Server, hdlr PowerTradingHandler, opts ...server.HandlerOption) error {
	type powerTrading interface {
		ProxyClusterManagerNodeCordon(ctx context.Context, in *ProxyClusterManagerNodeCordonReq, out *ProxyClusterManagerNodeCordonResp) error
		ProxyClusterManagerNodeUnCordon(ctx context.Context, in *ProxyClusterManagerNodeCordonReq, out *ProxyClusterManagerNodeCordonResp) error
		ProxyClusterManagerNodeDrain(ctx context.Context, in *ProxyClusterManagerNodeDrainReq, out *ProxyClusterManagerNodeDrainResp) error
		ProxyClusterManagerNodeDetail(ctx context.Context, in *ProxyClusterManagerNodeDetailReq, out *ProxyClusterManagerNodeDetailResp) error
		ProxyResourceManagerCreateDeviceRecord(ctx context.Context, in *ProxyResourceManagerCreateDeviceRecordReq, out *ProxyResourceManagerCreateDeviceRecordResp) error
		MachineTest(ctx context.Context, in *MachineTestReq, out *MachineTestRsp) error
		GetMachineTask(ctx context.Context, in *GetMachineTestTaskReq, out *MachineTestRsp) error
		MachineClean(ctx context.Context, in *MachineTestReq, out *MachineTestRsp) error
		EditDeviceInfo(ctx context.Context, in *EditDevicesReq, out *EditDevicesResp) error
	}
	type PowerTrading struct {
		powerTrading
	}
	h := &powerTradingHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PowerTrading.ProxyClusterManagerNodeCordon",
		Path:    []string{"/powertrading/v1/node/cordon"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PowerTrading.ProxyClusterManagerNodeUnCordon",
		Path:    []string{"/powertrading/v1/node/uncordon"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PowerTrading.ProxyClusterManagerNodeDrain",
		Path:    []string{"/powertrading/v1/node/drain"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PowerTrading.ProxyClusterManagerNodeDetail",
		Path:    []string{"/powertrading/v1/node"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PowerTrading.ProxyResourceManagerCreateDeviceRecord",
		Path:    []string{"/powertrading/v1/device/record"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PowerTrading.MachineTest",
		Path:    []string{"/powertrading/v1/machine/test"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PowerTrading.GetMachineTask",
		Path:    []string{"/powertrading/v1/machine/task"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PowerTrading.MachineClean",
		Path:    []string{"/powertrading/v1/machine/clean"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PowerTrading.EditDeviceInfo",
		Path:    []string{"/powertrading/v1/edit_devices"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&PowerTrading{h}, opts...))
}

type powerTradingHandler struct {
	PowerTradingHandler
}

func (h *powerTradingHandler) ProxyClusterManagerNodeCordon(ctx context.Context, in *ProxyClusterManagerNodeCordonReq, out *ProxyClusterManagerNodeCordonResp) error {
	return h.PowerTradingHandler.ProxyClusterManagerNodeCordon(ctx, in, out)
}

func (h *powerTradingHandler) ProxyClusterManagerNodeUnCordon(ctx context.Context, in *ProxyClusterManagerNodeCordonReq, out *ProxyClusterManagerNodeCordonResp) error {
	return h.PowerTradingHandler.ProxyClusterManagerNodeUnCordon(ctx, in, out)
}

func (h *powerTradingHandler) ProxyClusterManagerNodeDrain(ctx context.Context, in *ProxyClusterManagerNodeDrainReq, out *ProxyClusterManagerNodeDrainResp) error {
	return h.PowerTradingHandler.ProxyClusterManagerNodeDrain(ctx, in, out)
}

func (h *powerTradingHandler) ProxyClusterManagerNodeDetail(ctx context.Context, in *ProxyClusterManagerNodeDetailReq, out *ProxyClusterManagerNodeDetailResp) error {
	return h.PowerTradingHandler.ProxyClusterManagerNodeDetail(ctx, in, out)
}

func (h *powerTradingHandler) ProxyResourceManagerCreateDeviceRecord(ctx context.Context, in *ProxyResourceManagerCreateDeviceRecordReq, out *ProxyResourceManagerCreateDeviceRecordResp) error {
	return h.PowerTradingHandler.ProxyResourceManagerCreateDeviceRecord(ctx, in, out)
}

func (h *powerTradingHandler) MachineTest(ctx context.Context, in *MachineTestReq, out *MachineTestRsp) error {
	return h.PowerTradingHandler.MachineTest(ctx, in, out)
}

func (h *powerTradingHandler) GetMachineTask(ctx context.Context, in *GetMachineTestTaskReq, out *MachineTestRsp) error {
	return h.PowerTradingHandler.GetMachineTask(ctx, in, out)
}

func (h *powerTradingHandler) MachineClean(ctx context.Context, in *MachineTestReq, out *MachineTestRsp) error {
	return h.PowerTradingHandler.MachineClean(ctx, in, out)
}

func (h *powerTradingHandler) EditDeviceInfo(ctx context.Context, in *EditDevicesReq, out *EditDevicesResp) error {
	return h.PowerTradingHandler.EditDeviceInfo(ctx, in, out)
}
