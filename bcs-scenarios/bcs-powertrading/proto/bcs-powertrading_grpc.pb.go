// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/bcs-powertrading.proto

package powertrading

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PowerTradingClient is the client API for PowerTrading service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PowerTradingClient interface {
	ProxyClusterManagerNodeCordon(ctx context.Context, in *ProxyClusterManagerNodeCordonReq, opts ...grpc.CallOption) (*ProxyClusterManagerNodeCordonResp, error)
	ProxyClusterManagerNodeUnCordon(ctx context.Context, in *ProxyClusterManagerNodeCordonReq, opts ...grpc.CallOption) (*ProxyClusterManagerNodeCordonResp, error)
	ProxyClusterManagerNodeDrain(ctx context.Context, in *ProxyClusterManagerNodeDrainReq, opts ...grpc.CallOption) (*ProxyClusterManagerNodeDrainResp, error)
	ProxyClusterManagerNodeDetail(ctx context.Context, in *ProxyClusterManagerNodeDetailReq, opts ...grpc.CallOption) (*ProxyClusterManagerNodeDetailResp, error)
	ProxyResourceManagerCreateDeviceRecord(ctx context.Context, in *ProxyResourceManagerCreateDeviceRecordReq, opts ...grpc.CallOption) (*ProxyResourceManagerCreateDeviceRecordResp, error)
	//  rpc ListDevicePoolOperationData(ListDevicePoolOperationDataReq) returns (
	//      ListDevicePoolOperationDataResp) {
	//    option (google.api.http) = {
	//      get : "/powertrading/v1/data/pool"
	//    };
	//    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	//      description : "获取资源池运营数据"
	//      summary : "获取资源池运营数据"
	//    };
	//  }
	MachineTest(ctx context.Context, in *MachineTestReq, opts ...grpc.CallOption) (*MachineTestRsp, error)
	GetMachineTask(ctx context.Context, in *GetMachineTestTaskReq, opts ...grpc.CallOption) (*MachineTestRsp, error)
	MachineClean(ctx context.Context, in *MachineTestReq, opts ...grpc.CallOption) (*MachineTestRsp, error)
	//  rpc ProxyResourceManagerListDevices(ListDevicesReq) returns (ListDevicesResp) {
	//    option (google.api.http) = {
	//      post : "/powertrading/v1/list_devices"
	//      body: "*"
	//    };
	//    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	//      description : "获取节点列表"
	//      summary : "获取节点列表"
	//    };
	//  }
	EditDeviceInfo(ctx context.Context, in *EditDevicesReq, opts ...grpc.CallOption) (*EditDevicesResp, error)
}

type powerTradingClient struct {
	cc grpc.ClientConnInterface
}

func NewPowerTradingClient(cc grpc.ClientConnInterface) PowerTradingClient {
	return &powerTradingClient{cc}
}

func (c *powerTradingClient) ProxyClusterManagerNodeCordon(ctx context.Context, in *ProxyClusterManagerNodeCordonReq, opts ...grpc.CallOption) (*ProxyClusterManagerNodeCordonResp, error) {
	out := new(ProxyClusterManagerNodeCordonResp)
	err := c.cc.Invoke(ctx, "/powertrading.PowerTrading/ProxyClusterManagerNodeCordon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerTradingClient) ProxyClusterManagerNodeUnCordon(ctx context.Context, in *ProxyClusterManagerNodeCordonReq, opts ...grpc.CallOption) (*ProxyClusterManagerNodeCordonResp, error) {
	out := new(ProxyClusterManagerNodeCordonResp)
	err := c.cc.Invoke(ctx, "/powertrading.PowerTrading/ProxyClusterManagerNodeUnCordon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerTradingClient) ProxyClusterManagerNodeDrain(ctx context.Context, in *ProxyClusterManagerNodeDrainReq, opts ...grpc.CallOption) (*ProxyClusterManagerNodeDrainResp, error) {
	out := new(ProxyClusterManagerNodeDrainResp)
	err := c.cc.Invoke(ctx, "/powertrading.PowerTrading/ProxyClusterManagerNodeDrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerTradingClient) ProxyClusterManagerNodeDetail(ctx context.Context, in *ProxyClusterManagerNodeDetailReq, opts ...grpc.CallOption) (*ProxyClusterManagerNodeDetailResp, error) {
	out := new(ProxyClusterManagerNodeDetailResp)
	err := c.cc.Invoke(ctx, "/powertrading.PowerTrading/ProxyClusterManagerNodeDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerTradingClient) ProxyResourceManagerCreateDeviceRecord(ctx context.Context, in *ProxyResourceManagerCreateDeviceRecordReq, opts ...grpc.CallOption) (*ProxyResourceManagerCreateDeviceRecordResp, error) {
	out := new(ProxyResourceManagerCreateDeviceRecordResp)
	err := c.cc.Invoke(ctx, "/powertrading.PowerTrading/ProxyResourceManagerCreateDeviceRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerTradingClient) MachineTest(ctx context.Context, in *MachineTestReq, opts ...grpc.CallOption) (*MachineTestRsp, error) {
	out := new(MachineTestRsp)
	err := c.cc.Invoke(ctx, "/powertrading.PowerTrading/MachineTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerTradingClient) GetMachineTask(ctx context.Context, in *GetMachineTestTaskReq, opts ...grpc.CallOption) (*MachineTestRsp, error) {
	out := new(MachineTestRsp)
	err := c.cc.Invoke(ctx, "/powertrading.PowerTrading/GetMachineTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerTradingClient) MachineClean(ctx context.Context, in *MachineTestReq, opts ...grpc.CallOption) (*MachineTestRsp, error) {
	out := new(MachineTestRsp)
	err := c.cc.Invoke(ctx, "/powertrading.PowerTrading/MachineClean", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerTradingClient) EditDeviceInfo(ctx context.Context, in *EditDevicesReq, opts ...grpc.CallOption) (*EditDevicesResp, error) {
	out := new(EditDevicesResp)
	err := c.cc.Invoke(ctx, "/powertrading.PowerTrading/EditDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PowerTradingServer is the server API for PowerTrading service.
// All implementations must embed UnimplementedPowerTradingServer
// for forward compatibility
type PowerTradingServer interface {
	ProxyClusterManagerNodeCordon(context.Context, *ProxyClusterManagerNodeCordonReq) (*ProxyClusterManagerNodeCordonResp, error)
	ProxyClusterManagerNodeUnCordon(context.Context, *ProxyClusterManagerNodeCordonReq) (*ProxyClusterManagerNodeCordonResp, error)
	ProxyClusterManagerNodeDrain(context.Context, *ProxyClusterManagerNodeDrainReq) (*ProxyClusterManagerNodeDrainResp, error)
	ProxyClusterManagerNodeDetail(context.Context, *ProxyClusterManagerNodeDetailReq) (*ProxyClusterManagerNodeDetailResp, error)
	ProxyResourceManagerCreateDeviceRecord(context.Context, *ProxyResourceManagerCreateDeviceRecordReq) (*ProxyResourceManagerCreateDeviceRecordResp, error)
	//  rpc ListDevicePoolOperationData(ListDevicePoolOperationDataReq) returns (
	//      ListDevicePoolOperationDataResp) {
	//    option (google.api.http) = {
	//      get : "/powertrading/v1/data/pool"
	//    };
	//    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	//      description : "获取资源池运营数据"
	//      summary : "获取资源池运营数据"
	//    };
	//  }
	MachineTest(context.Context, *MachineTestReq) (*MachineTestRsp, error)
	GetMachineTask(context.Context, *GetMachineTestTaskReq) (*MachineTestRsp, error)
	MachineClean(context.Context, *MachineTestReq) (*MachineTestRsp, error)
	//  rpc ProxyResourceManagerListDevices(ListDevicesReq) returns (ListDevicesResp) {
	//    option (google.api.http) = {
	//      post : "/powertrading/v1/list_devices"
	//      body: "*"
	//    };
	//    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	//      description : "获取节点列表"
	//      summary : "获取节点列表"
	//    };
	//  }
	EditDeviceInfo(context.Context, *EditDevicesReq) (*EditDevicesResp, error)
	mustEmbedUnimplementedPowerTradingServer()
}

// UnimplementedPowerTradingServer must be embedded to have forward compatible implementations.
type UnimplementedPowerTradingServer struct {
}

func (UnimplementedPowerTradingServer) ProxyClusterManagerNodeCordon(context.Context, *ProxyClusterManagerNodeCordonReq) (*ProxyClusterManagerNodeCordonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyClusterManagerNodeCordon not implemented")
}
func (UnimplementedPowerTradingServer) ProxyClusterManagerNodeUnCordon(context.Context, *ProxyClusterManagerNodeCordonReq) (*ProxyClusterManagerNodeCordonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyClusterManagerNodeUnCordon not implemented")
}
func (UnimplementedPowerTradingServer) ProxyClusterManagerNodeDrain(context.Context, *ProxyClusterManagerNodeDrainReq) (*ProxyClusterManagerNodeDrainResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyClusterManagerNodeDrain not implemented")
}
func (UnimplementedPowerTradingServer) ProxyClusterManagerNodeDetail(context.Context, *ProxyClusterManagerNodeDetailReq) (*ProxyClusterManagerNodeDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyClusterManagerNodeDetail not implemented")
}
func (UnimplementedPowerTradingServer) ProxyResourceManagerCreateDeviceRecord(context.Context, *ProxyResourceManagerCreateDeviceRecordReq) (*ProxyResourceManagerCreateDeviceRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyResourceManagerCreateDeviceRecord not implemented")
}
func (UnimplementedPowerTradingServer) MachineTest(context.Context, *MachineTestReq) (*MachineTestRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MachineTest not implemented")
}
func (UnimplementedPowerTradingServer) GetMachineTask(context.Context, *GetMachineTestTaskReq) (*MachineTestRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachineTask not implemented")
}
func (UnimplementedPowerTradingServer) MachineClean(context.Context, *MachineTestReq) (*MachineTestRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MachineClean not implemented")
}
func (UnimplementedPowerTradingServer) EditDeviceInfo(context.Context, *EditDevicesReq) (*EditDevicesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditDeviceInfo not implemented")
}
func (UnimplementedPowerTradingServer) mustEmbedUnimplementedPowerTradingServer() {}

// UnsafePowerTradingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PowerTradingServer will
// result in compilation errors.
type UnsafePowerTradingServer interface {
	mustEmbedUnimplementedPowerTradingServer()
}

func RegisterPowerTradingServer(s grpc.ServiceRegistrar, srv PowerTradingServer) {
	s.RegisterService(&PowerTrading_ServiceDesc, srv)
}

func _PowerTrading_ProxyClusterManagerNodeCordon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyClusterManagerNodeCordonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerTradingServer).ProxyClusterManagerNodeCordon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powertrading.PowerTrading/ProxyClusterManagerNodeCordon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerTradingServer).ProxyClusterManagerNodeCordon(ctx, req.(*ProxyClusterManagerNodeCordonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerTrading_ProxyClusterManagerNodeUnCordon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyClusterManagerNodeCordonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerTradingServer).ProxyClusterManagerNodeUnCordon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powertrading.PowerTrading/ProxyClusterManagerNodeUnCordon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerTradingServer).ProxyClusterManagerNodeUnCordon(ctx, req.(*ProxyClusterManagerNodeCordonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerTrading_ProxyClusterManagerNodeDrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyClusterManagerNodeDrainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerTradingServer).ProxyClusterManagerNodeDrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powertrading.PowerTrading/ProxyClusterManagerNodeDrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerTradingServer).ProxyClusterManagerNodeDrain(ctx, req.(*ProxyClusterManagerNodeDrainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerTrading_ProxyClusterManagerNodeDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyClusterManagerNodeDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerTradingServer).ProxyClusterManagerNodeDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powertrading.PowerTrading/ProxyClusterManagerNodeDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerTradingServer).ProxyClusterManagerNodeDetail(ctx, req.(*ProxyClusterManagerNodeDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerTrading_ProxyResourceManagerCreateDeviceRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyResourceManagerCreateDeviceRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerTradingServer).ProxyResourceManagerCreateDeviceRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powertrading.PowerTrading/ProxyResourceManagerCreateDeviceRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerTradingServer).ProxyResourceManagerCreateDeviceRecord(ctx, req.(*ProxyResourceManagerCreateDeviceRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerTrading_MachineTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineTestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerTradingServer).MachineTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powertrading.PowerTrading/MachineTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerTradingServer).MachineTest(ctx, req.(*MachineTestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerTrading_GetMachineTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineTestTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerTradingServer).GetMachineTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powertrading.PowerTrading/GetMachineTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerTradingServer).GetMachineTask(ctx, req.(*GetMachineTestTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerTrading_MachineClean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineTestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerTradingServer).MachineClean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powertrading.PowerTrading/MachineClean",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerTradingServer).MachineClean(ctx, req.(*MachineTestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerTrading_EditDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditDevicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerTradingServer).EditDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powertrading.PowerTrading/EditDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerTradingServer).EditDeviceInfo(ctx, req.(*EditDevicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PowerTrading_ServiceDesc is the grpc.ServiceDesc for PowerTrading service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PowerTrading_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "powertrading.PowerTrading",
	HandlerType: (*PowerTradingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProxyClusterManagerNodeCordon",
			Handler:    _PowerTrading_ProxyClusterManagerNodeCordon_Handler,
		},
		{
			MethodName: "ProxyClusterManagerNodeUnCordon",
			Handler:    _PowerTrading_ProxyClusterManagerNodeUnCordon_Handler,
		},
		{
			MethodName: "ProxyClusterManagerNodeDrain",
			Handler:    _PowerTrading_ProxyClusterManagerNodeDrain_Handler,
		},
		{
			MethodName: "ProxyClusterManagerNodeDetail",
			Handler:    _PowerTrading_ProxyClusterManagerNodeDetail_Handler,
		},
		{
			MethodName: "ProxyResourceManagerCreateDeviceRecord",
			Handler:    _PowerTrading_ProxyResourceManagerCreateDeviceRecord_Handler,
		},
		{
			MethodName: "MachineTest",
			Handler:    _PowerTrading_MachineTest_Handler,
		},
		{
			MethodName: "GetMachineTask",
			Handler:    _PowerTrading_GetMachineTask_Handler,
		},
		{
			MethodName: "MachineClean",
			Handler:    _PowerTrading_MachineClean_Handler,
		},
		{
			MethodName: "EditDeviceInfo",
			Handler:    _PowerTrading_EditDeviceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bcs-powertrading.proto",
}
