// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.5
// source: proto/bcs-gitops-manager.proto

package bcsgitopsmanager

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ProjectSyncRequest is request for project
// synchronization from project-manager to local storage
type ProjectSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bcs project code, human readable information
	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
}

func (x *ProjectSyncRequest) Reset() {
	*x = ProjectSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_gitops_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectSyncRequest) ProtoMessage() {}

func (x *ProjectSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_gitops_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectSyncRequest.ProtoReflect.Descriptor instead.
func (*ProjectSyncRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_gitops_manager_proto_rawDescGZIP(), []int{0}
}

func (x *ProjectSyncRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

// ClusterSyncRequest force sync specified project cluster information
type ClusterSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bcs project code, human readable information
	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	// bcs project code, human readable information
	ClusterID string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
}

func (x *ClusterSyncRequest) Reset() {
	*x = ClusterSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_gitops_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSyncRequest) ProtoMessage() {}

func (x *ClusterSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_gitops_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSyncRequest.ProtoReflect.Descriptor instead.
func (*ClusterSyncRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_gitops_manager_proto_rawDescGZIP(), []int{1}
}

func (x *ClusterSyncRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *ClusterSyncRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

// GitOpsResponse for common use
type GitOpsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Error   string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GitOpsResponse) Reset() {
	*x = GitOpsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_gitops_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitOpsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitOpsResponse) ProtoMessage() {}

func (x *GitOpsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_gitops_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitOpsResponse.ProtoReflect.Descriptor instead.
func (*GitOpsResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_gitops_manager_proto_rawDescGZIP(), []int{2}
}

func (x *GitOpsResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GitOpsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GitOpsResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// GitOpsResponse for common use
type GitOpsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GitOpsRequest) Reset() {
	*x = GitOpsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_gitops_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitOpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitOpsRequest) ProtoMessage() {}

func (x *GitOpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_gitops_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitOpsRequest.ProtoReflect.Descriptor instead.
func (*GitOpsRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_gitops_manager_proto_rawDescGZIP(), []int{3}
}

var File_proto_bcs_gitops_manager_proto protoreflect.FileDescriptor

var file_proto_bcs_gitops_manager_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x63, 0x73, 0x2d, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x73, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x62, 0x63, 0x73, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73,
	0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x89,
	0x01, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x67, 0x92, 0x41, 0x5b, 0x2a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x4c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe3, 0x80,
	0x82, 0x62, 0x6b, 0x2d, 0x62, 0x63, 0x73, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x43, 0x6f, 0x64,
	0x65, 0xef, 0xbc, 0x8c, 0xe6, 0x98, 0x93, 0xe8, 0xaf, 0xbb, 0xe7, 0x9a, 0x84, 0xe8, 0x8b, 0xb1,
	0xe6, 0x96, 0x87, 0xe7, 0x9f, 0xad, 0xe8, 0xaf, 0x8d, 0xef, 0xbc, 0x8c, 0xe6, 0x9d, 0xa5, 0xe6,
	0xba, 0x90, 0xe4, 0xba, 0x8e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x02, 0x18, 0x40, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x41, 0x92, 0x41, 0x3e, 0x0a,
	0x3c, 0x2a, 0x12, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe5, 0x90, 0xaf, 0xe5, 0x8a, 0xa8, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0xe5, 0x90, 0x8c, 0xe6, 0xad, 0xa5, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2,
	0x01, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xe3, 0x02,
	0x0a, 0x12, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x67, 0x92, 0x41, 0x5b, 0x2a,
	0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x4c, 0xe5, 0xbf,
	0x85, 0xe5, 0xa1, 0xab, 0xe3, 0x80, 0x82, 0x62, 0x6b, 0x2d, 0x62, 0x63, 0x73, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0x43, 0x6f, 0x64, 0x65, 0xef, 0xbc, 0x8c, 0xe6, 0x98, 0x93, 0xe8, 0xaf, 0xbb,
	0xe7, 0x9a, 0x84, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0x9f, 0xad, 0xe8, 0xaf, 0x8d, 0xef,
	0xbc, 0x8c, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0xe4, 0xba, 0x8e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x02, 0x18, 0x40, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41, 0x5d, 0x2a, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x32, 0x50, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89, 0xe3, 0x80, 0x82, 0xe6, 0x8c,
	0x87, 0xe5, 0xae, 0x9a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5,
	0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe4, 0xb8, 0x8d, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe9, 0xbb,
	0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x90, 0x8c, 0xe6, 0xad, 0xa5, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xe4, 0xb8, 0x8b, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x3a, 0x41, 0x92, 0x41, 0x3e, 0x0a, 0x3c, 0x2a, 0x12, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe5, 0xbc, 0xba, 0xe5, 0x88, 0xb6, 0xe5, 0x90, 0x8c, 0xe6, 0xad, 0xa5, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x54, 0x0a, 0x0e, 0x47, 0x69, 0x74, 0x4f, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x0f, 0x0a, 0x0d, 0x47, 0x69, 0x74,
	0x4f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0xc2, 0x05, 0x0a, 0x10, 0x42,
	0x63, 0x73, 0x47, 0x69, 0x74, 0x6f, 0x70, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12,
	0x9f, 0x01, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x2e, 0x62, 0x63, 0x73, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x4f,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x63, 0x73, 0x67,
	0x69, 0x74, 0x6f, 0x70, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x69, 0x74,
	0x4f, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x73, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x92, 0x41, 0x33, 0x12, 0x0a,
	0x50, 0x69, 0x6e, 0x67, 0xe6, 0xa3, 0x80, 0xe6, 0xb5, 0x8b, 0x1a, 0x25, 0x50, 0x69, 0x6e, 0x67,
	0xe6, 0xa3, 0x80, 0xe6, 0xb5, 0x8b, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe7,
	0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf,
	0x95, 0x12, 0xe6, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x24, 0x2e, 0x62, 0x63, 0x73, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x73,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x63, 0x73,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x69,
	0x74, 0x4f, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x73, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x64, 0x12, 0x0c, 0xe5, 0x90, 0xaf, 0xe5, 0x8a, 0xa8, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0x1a, 0x54, 0xe5, 0x90, 0xaf, 0xe5, 0x8a, 0xa8, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0xe8, 0xbf, 0x9b, 0xe5, 0x85, 0xa5, 0xe5, 0x90, 0x8c, 0xe6, 0xad, 0xa5, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x8c, 0xe4, 0xbf, 0x9d, 0xe9, 0x9a, 0x9c, 0xe4, 0xbb, 0x8e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0xe5,
	0x90, 0x8c, 0xe6, 0xad, 0xa5, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0xe5, 0x88, 0xb0, 0xe6, 0x9c, 0xac, 0xe5, 0x9c, 0xb0, 0x12, 0xa2, 0x02, 0x0a, 0x0b, 0x53,
	0x79, 0x6e, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x62, 0x63, 0x73,
	0x67, 0x69, 0x74, 0x6f, 0x70, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x62, 0x63, 0x73, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x73, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x4f, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xca, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x3a, 0x01, 0x2a, 0x92, 0x41,
	0x9d, 0x01, 0x12, 0x24, 0xe5, 0xbc, 0xba, 0xe5, 0x88, 0xb6, 0xe5, 0x90, 0x8c, 0xe6, 0xad, 0xa5,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x8b, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x75, 0xe5, 0xbc, 0xba, 0xe5, 0x88, 0xb6,
	0xe5, 0x90, 0x8c, 0xe6, 0xad, 0xa5, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0xe4, 0xb8, 0x8b, 0xe7, 0x9a, 0x84, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe4, 0xbf, 0x9d,
	0xe9, 0x9a, 0x9c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7,
	0x9a, 0x84, 0xe4, 0xb8, 0x80, 0xe8, 0x87, 0xb4, 0xe6, 0x80, 0xa7, 0xe3, 0x80, 0x82, 0xe5, 0x8a,
	0x9f, 0xe8, 0x83, 0xbd, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe4, 0xbe, 0x9d, 0xe8, 0xb5, 0x96,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x42,
	0x6d, 0x5a, 0x18, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x62, 0x63, 0x73, 0x67, 0x69,
	0x74, 0x6f, 0x70, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x92, 0x41, 0x50, 0x12, 0x27,
	0x0a, 0x1d, 0x42, 0x4b, 0x2d, 0x42, 0x43, 0x53, 0x20, 0x47, 0x69, 0x74, 0x4f, 0x70, 0x73, 0x20,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x20, 0x44, 0x6f, 0x63, 0x32,
	0x06, 0x31, 0x2e, 0x32, 0x38, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_bcs_gitops_manager_proto_rawDescOnce sync.Once
	file_proto_bcs_gitops_manager_proto_rawDescData = file_proto_bcs_gitops_manager_proto_rawDesc
)

func file_proto_bcs_gitops_manager_proto_rawDescGZIP() []byte {
	file_proto_bcs_gitops_manager_proto_rawDescOnce.Do(func() {
		file_proto_bcs_gitops_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_bcs_gitops_manager_proto_rawDescData)
	})
	return file_proto_bcs_gitops_manager_proto_rawDescData
}

var file_proto_bcs_gitops_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_bcs_gitops_manager_proto_goTypes = []interface{}{
	(*ProjectSyncRequest)(nil), // 0: bcsgitopsmanager.ProjectSyncRequest
	(*ClusterSyncRequest)(nil), // 1: bcsgitopsmanager.ClusterSyncRequest
	(*GitOpsResponse)(nil),     // 2: bcsgitopsmanager.GitOpsResponse
	(*GitOpsRequest)(nil),      // 3: bcsgitopsmanager.GitOpsRequest
}
var file_proto_bcs_gitops_manager_proto_depIdxs = []int32{
	3, // 0: bcsgitopsmanager.BcsGitopsManager.Ping:input_type -> bcsgitopsmanager.GitOpsRequest
	0, // 1: bcsgitopsmanager.BcsGitopsManager.StartupProject:input_type -> bcsgitopsmanager.ProjectSyncRequest
	1, // 2: bcsgitopsmanager.BcsGitopsManager.SyncCluster:input_type -> bcsgitopsmanager.ClusterSyncRequest
	2, // 3: bcsgitopsmanager.BcsGitopsManager.Ping:output_type -> bcsgitopsmanager.GitOpsResponse
	2, // 4: bcsgitopsmanager.BcsGitopsManager.StartupProject:output_type -> bcsgitopsmanager.GitOpsResponse
	2, // 5: bcsgitopsmanager.BcsGitopsManager.SyncCluster:output_type -> bcsgitopsmanager.GitOpsResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_bcs_gitops_manager_proto_init() }
func file_proto_bcs_gitops_manager_proto_init() {
	if File_proto_bcs_gitops_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_bcs_gitops_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_gitops_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_gitops_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitOpsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_gitops_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitOpsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_bcs_gitops_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_bcs_gitops_manager_proto_goTypes,
		DependencyIndexes: file_proto_bcs_gitops_manager_proto_depIdxs,
		MessageInfos:      file_proto_bcs_gitops_manager_proto_msgTypes,
	}.Build()
	File_proto_bcs_gitops_manager_proto = out.File
	file_proto_bcs_gitops_manager_proto_rawDesc = nil
	file_proto_bcs_gitops_manager_proto_goTypes = nil
	file_proto_bcs_gitops_manager_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BcsGitopsManagerClient is the client API for BcsGitopsManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BcsGitopsManagerClient interface {
	Ping(ctx context.Context, in *GitOpsRequest, opts ...grpc.CallOption) (*GitOpsResponse, error)
	StartupProject(ctx context.Context, in *ProjectSyncRequest, opts ...grpc.CallOption) (*GitOpsResponse, error)
	SyncCluster(ctx context.Context, in *ClusterSyncRequest, opts ...grpc.CallOption) (*GitOpsResponse, error)
}

type bcsGitopsManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewBcsGitopsManagerClient(cc grpc.ClientConnInterface) BcsGitopsManagerClient {
	return &bcsGitopsManagerClient{cc}
}

func (c *bcsGitopsManagerClient) Ping(ctx context.Context, in *GitOpsRequest, opts ...grpc.CallOption) (*GitOpsResponse, error) {
	out := new(GitOpsResponse)
	err := c.cc.Invoke(ctx, "/bcsgitopsmanager.BcsGitopsManager/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsGitopsManagerClient) StartupProject(ctx context.Context, in *ProjectSyncRequest, opts ...grpc.CallOption) (*GitOpsResponse, error) {
	out := new(GitOpsResponse)
	err := c.cc.Invoke(ctx, "/bcsgitopsmanager.BcsGitopsManager/StartupProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsGitopsManagerClient) SyncCluster(ctx context.Context, in *ClusterSyncRequest, opts ...grpc.CallOption) (*GitOpsResponse, error) {
	out := new(GitOpsResponse)
	err := c.cc.Invoke(ctx, "/bcsgitopsmanager.BcsGitopsManager/SyncCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BcsGitopsManagerServer is the server API for BcsGitopsManager service.
type BcsGitopsManagerServer interface {
	Ping(context.Context, *GitOpsRequest) (*GitOpsResponse, error)
	StartupProject(context.Context, *ProjectSyncRequest) (*GitOpsResponse, error)
	SyncCluster(context.Context, *ClusterSyncRequest) (*GitOpsResponse, error)
}

// UnimplementedBcsGitopsManagerServer can be embedded to have forward compatible implementations.
type UnimplementedBcsGitopsManagerServer struct {
}

func (*UnimplementedBcsGitopsManagerServer) Ping(context.Context, *GitOpsRequest) (*GitOpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedBcsGitopsManagerServer) StartupProject(context.Context, *ProjectSyncRequest) (*GitOpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartupProject not implemented")
}
func (*UnimplementedBcsGitopsManagerServer) SyncCluster(context.Context, *ClusterSyncRequest) (*GitOpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncCluster not implemented")
}

func RegisterBcsGitopsManagerServer(s *grpc.Server, srv BcsGitopsManagerServer) {
	s.RegisterService(&_BcsGitopsManager_serviceDesc, srv)
}

func _BcsGitopsManager_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitOpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsGitopsManagerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcsgitopsmanager.BcsGitopsManager/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsGitopsManagerServer).Ping(ctx, req.(*GitOpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsGitopsManager_StartupProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsGitopsManagerServer).StartupProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcsgitopsmanager.BcsGitopsManager/StartupProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsGitopsManagerServer).StartupProject(ctx, req.(*ProjectSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsGitopsManager_SyncCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsGitopsManagerServer).SyncCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcsgitopsmanager.BcsGitopsManager/SyncCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsGitopsManagerServer).SyncCluster(ctx, req.(*ClusterSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BcsGitopsManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bcsgitopsmanager.BcsGitopsManager",
	HandlerType: (*BcsGitopsManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _BcsGitopsManager_Ping_Handler,
		},
		{
			MethodName: "StartupProject",
			Handler:    _BcsGitopsManager_StartupProject_Handler,
		},
		{
			MethodName: "SyncCluster",
			Handler:    _BcsGitopsManager_SyncCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bcs-gitops-manager.proto",
}
