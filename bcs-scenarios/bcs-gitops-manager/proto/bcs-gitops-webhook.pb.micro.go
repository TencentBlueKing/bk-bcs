// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/bcs-gitops-webhook.proto

package bcsgitopsmanager

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	_ "github.com/golang/protobuf/ptypes/any"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for BcsGitopsWebhook service

func NewBcsGitopsWebhookEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "BcsGitopsWebhook.TGitWebhook",
			Path:    []string{"/gitopswebhook/v1/webhook/tgit"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "BcsGitopsWebhook.GeneralWebhook",
			Path:    []string{"/gitopswebhook/v1/webhook/general"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
	}
}

// Client API for BcsGitopsWebhook service

type BcsGitopsWebhookService interface {
	TGitWebhook(ctx context.Context, in *TGitWebhookRequest, opts ...client.CallOption) (*TGitWebhookResponse, error)
	GeneralWebhook(ctx context.Context, in *GeneralWebhookRequest, opts ...client.CallOption) (*GeneralWebhookResponse, error)
}

type bcsGitopsWebhookService struct {
	c    client.Client
	name string
}

func NewBcsGitopsWebhookService(name string, c client.Client) BcsGitopsWebhookService {
	return &bcsGitopsWebhookService{
		c:    c,
		name: name,
	}
}

func (c *bcsGitopsWebhookService) TGitWebhook(ctx context.Context, in *TGitWebhookRequest, opts ...client.CallOption) (*TGitWebhookResponse, error) {
	req := c.c.NewRequest(c.name, "BcsGitopsWebhook.TGitWebhook", in)
	out := new(TGitWebhookResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsGitopsWebhookService) GeneralWebhook(ctx context.Context, in *GeneralWebhookRequest, opts ...client.CallOption) (*GeneralWebhookResponse, error) {
	req := c.c.NewRequest(c.name, "BcsGitopsWebhook.GeneralWebhook", in)
	out := new(GeneralWebhookResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BcsGitopsWebhook service

type BcsGitopsWebhookHandler interface {
	TGitWebhook(context.Context, *TGitWebhookRequest, *TGitWebhookResponse) error
	GeneralWebhook(context.Context, *GeneralWebhookRequest, *GeneralWebhookResponse) error
}

func RegisterBcsGitopsWebhookHandler(s server.Server, hdlr BcsGitopsWebhookHandler, opts ...server.HandlerOption) error {
	type bcsGitopsWebhook interface {
		TGitWebhook(ctx context.Context, in *TGitWebhookRequest, out *TGitWebhookResponse) error
		GeneralWebhook(ctx context.Context, in *GeneralWebhookRequest, out *GeneralWebhookResponse) error
	}
	type BcsGitopsWebhook struct {
		bcsGitopsWebhook
	}
	h := &bcsGitopsWebhookHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsGitopsWebhook.TGitWebhook",
		Path:    []string{"/gitopswebhook/v1/webhook/tgit"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsGitopsWebhook.GeneralWebhook",
		Path:    []string{"/gitopswebhook/v1/webhook/general"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&BcsGitopsWebhook{h}, opts...))
}

type bcsGitopsWebhookHandler struct {
	BcsGitopsWebhookHandler
}

func (h *bcsGitopsWebhookHandler) TGitWebhook(ctx context.Context, in *TGitWebhookRequest, out *TGitWebhookResponse) error {
	return h.BcsGitopsWebhookHandler.TGitWebhook(ctx, in, out)
}

func (h *bcsGitopsWebhookHandler) GeneralWebhook(ctx context.Context, in *GeneralWebhookRequest, out *GeneralWebhookResponse) error {
	return h.BcsGitopsWebhookHandler.GeneralWebhook(ctx, in, out)
}
