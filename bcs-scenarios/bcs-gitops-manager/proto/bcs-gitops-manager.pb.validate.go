// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/bcs-gitops-manager.proto

package bcsgitopsmanager

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ProjectSyncRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectSyncRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectSyncRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectSyncRequestMultiError, or nil if none found.
func (m *ProjectSyncRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectSyncRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 2 || l > 64 {
		err := ProjectSyncRequestValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 2 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProjectSyncRequestMultiError(errors)
	}

	return nil
}

// ProjectSyncRequestMultiError is an error wrapping multiple validation errors
// returned by ProjectSyncRequest.ValidateAll() if the designated constraints
// aren't met.
type ProjectSyncRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectSyncRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectSyncRequestMultiError) AllErrors() []error { return m }

// ProjectSyncRequestValidationError is the validation error returned by
// ProjectSyncRequest.Validate if the designated constraints aren't met.
type ProjectSyncRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectSyncRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectSyncRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectSyncRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectSyncRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectSyncRequestValidationError) ErrorName() string {
	return "ProjectSyncRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectSyncRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectSyncRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectSyncRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectSyncRequestValidationError{}

// Validate checks the field values on ClusterSyncRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterSyncRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterSyncRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterSyncRequestMultiError, or nil if none found.
func (m *ClusterSyncRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterSyncRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProjectCode()); l < 2 || l > 64 {
		err := ClusterSyncRequestValidationError{
			field:  "ProjectCode",
			reason: "value length must be between 2 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ClusterID

	if len(errors) > 0 {
		return ClusterSyncRequestMultiError(errors)
	}

	return nil
}

// ClusterSyncRequestMultiError is an error wrapping multiple validation errors
// returned by ClusterSyncRequest.ValidateAll() if the designated constraints
// aren't met.
type ClusterSyncRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterSyncRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterSyncRequestMultiError) AllErrors() []error { return m }

// ClusterSyncRequestValidationError is the validation error returned by
// ClusterSyncRequest.Validate if the designated constraints aren't met.
type ClusterSyncRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterSyncRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterSyncRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterSyncRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterSyncRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterSyncRequestValidationError) ErrorName() string {
	return "ClusterSyncRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterSyncRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterSyncRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterSyncRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterSyncRequestValidationError{}

// Validate checks the field values on GitOpsResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GitOpsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitOpsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GitOpsResponseMultiError,
// or nil if none found.
func (m *GitOpsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GitOpsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Error

	if len(errors) > 0 {
		return GitOpsResponseMultiError(errors)
	}

	return nil
}

// GitOpsResponseMultiError is an error wrapping multiple validation errors
// returned by GitOpsResponse.ValidateAll() if the designated constraints
// aren't met.
type GitOpsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitOpsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitOpsResponseMultiError) AllErrors() []error { return m }

// GitOpsResponseValidationError is the validation error returned by
// GitOpsResponse.Validate if the designated constraints aren't met.
type GitOpsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitOpsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitOpsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitOpsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitOpsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitOpsResponseValidationError) ErrorName() string { return "GitOpsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GitOpsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitOpsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitOpsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitOpsResponseValidationError{}

// Validate checks the field values on GitOpsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GitOpsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitOpsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GitOpsRequestMultiError, or
// nil if none found.
func (m *GitOpsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GitOpsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GitOpsRequestMultiError(errors)
	}

	return nil
}

// GitOpsRequestMultiError is an error wrapping multiple validation errors
// returned by GitOpsRequest.ValidateAll() if the designated constraints
// aren't met.
type GitOpsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitOpsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitOpsRequestMultiError) AllErrors() []error { return m }

// GitOpsRequestValidationError is the validation error returned by
// GitOpsRequest.Validate if the designated constraints aren't met.
type GitOpsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitOpsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitOpsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitOpsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitOpsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitOpsRequestValidationError) ErrorName() string { return "GitOpsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GitOpsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitOpsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitOpsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitOpsRequestValidationError{}
