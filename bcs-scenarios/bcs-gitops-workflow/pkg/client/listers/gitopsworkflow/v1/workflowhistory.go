/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/Tencent/bk-bcs/bcs-scenarios/bcs-gitops-workflow/pkg/apis/gitopsworkflow/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WorkflowHistoryLister helps list WorkflowHistories.
// All objects returned here must be treated as read-only.
type WorkflowHistoryLister interface {
	// List lists all WorkflowHistories in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.WorkflowHistory, err error)
	// WorkflowHistories returns an object that can list and get WorkflowHistories.
	WorkflowHistories(namespace string) WorkflowHistoryNamespaceLister
	WorkflowHistoryListerExpansion
}

// workflowHistoryLister implements the WorkflowHistoryLister interface.
type workflowHistoryLister struct {
	indexer cache.Indexer
}

// NewWorkflowHistoryLister returns a new WorkflowHistoryLister.
func NewWorkflowHistoryLister(indexer cache.Indexer) WorkflowHistoryLister {
	return &workflowHistoryLister{indexer: indexer}
}

// List lists all WorkflowHistories in the indexer.
func (s *workflowHistoryLister) List(selector labels.Selector) (ret []*v1.WorkflowHistory, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.WorkflowHistory))
	})
	return ret, err
}

// WorkflowHistories returns an object that can list and get WorkflowHistories.
func (s *workflowHistoryLister) WorkflowHistories(namespace string) WorkflowHistoryNamespaceLister {
	return workflowHistoryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WorkflowHistoryNamespaceLister helps list and get WorkflowHistories.
// All objects returned here must be treated as read-only.
type WorkflowHistoryNamespaceLister interface {
	// List lists all WorkflowHistories in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.WorkflowHistory, err error)
	// Get retrieves the WorkflowHistory from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.WorkflowHistory, error)
	WorkflowHistoryNamespaceListerExpansion
}

// workflowHistoryNamespaceLister implements the WorkflowHistoryNamespaceLister
// interface.
type workflowHistoryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WorkflowHistories in the indexer for a given namespace.
func (s workflowHistoryNamespaceLister) List(selector labels.Selector) (ret []*v1.WorkflowHistory, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.WorkflowHistory))
	})
	return ret, err
}

// Get retrieves the WorkflowHistory from the indexer for a given namespace and name.
func (s workflowHistoryNamespaceLister) Get(name string) (*v1.WorkflowHistory, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("workflowhistory"), name)
	}
	return obj.(*v1.WorkflowHistory), nil
}
