// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.2
// source: proto/bcs-terraform-bkprovider.proto

package bcsterraformbkprovider

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InstallJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobType string         `protobuf:"bytes,1,opt,name=job_type,json=jobType,proto3" json:"job_type,omitempty"`
	Hosts   []*InstallHost `protobuf:"bytes,2,rep,name=hosts,proto3" json:"hosts,omitempty"`
}

func (x *InstallJobRequest) Reset() {
	*x = InstallJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallJobRequest) ProtoMessage() {}

func (x *InstallJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallJobRequest.ProtoReflect.Descriptor instead.
func (*InstallJobRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{0}
}

func (x *InstallJobRequest) GetJobType() string {
	if x != nil {
		return x.JobType
	}
	return ""
}

func (x *InstallJobRequest) GetHosts() []*InstallHost {
	if x != nil {
		return x.Hosts
	}
	return nil
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{1}
}

func (x *Condition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Condition) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type ListHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions []*Condition `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Page       int32        `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Pagesize   int32        `protobuf:"varint,3,opt,name=pagesize,proto3" json:"pagesize,omitempty"`
	BkBizIds   []int32      `protobuf:"varint,4,rep,packed,name=bk_biz_ids,json=bkBizIds,proto3" json:"bk_biz_ids,omitempty"`
}

func (x *ListHostRequest) Reset() {
	*x = ListHostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHostRequest) ProtoMessage() {}

func (x *ListHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHostRequest.ProtoReflect.Descriptor instead.
func (*ListHostRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{2}
}

func (x *ListHostRequest) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *ListHostRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListHostRequest) GetPagesize() int32 {
	if x != nil {
		return x.Pagesize
	}
	return 0
}

func (x *ListHostRequest) GetBkBizIds() []int32 {
	if x != nil {
		return x.BkBizIds
	}
	return nil
}

type HostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BkCloudId          int32  `protobuf:"varint,1,opt,name=bk_cloud_id,json=bkCloudId,proto3" json:"bk_cloud_id,omitempty"`
	BkBizId            int32  `protobuf:"varint,2,opt,name=bk_biz_id,json=bkBizId,proto3" json:"bk_biz_id,omitempty"`
	BkHostId           int32  `protobuf:"varint,3,opt,name=bk_host_id,json=bkHostId,proto3" json:"bk_host_id,omitempty"`
	BkHostName         string `protobuf:"bytes,4,opt,name=bk_host_name,json=bkHostName,proto3" json:"bk_host_name,omitempty"`
	BkAddressing       string `protobuf:"bytes,5,opt,name=bk_addressing,json=bkAddressing,proto3" json:"bk_addressing,omitempty"`
	OsType             string `protobuf:"bytes,6,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`
	InnerIp            string `protobuf:"bytes,7,opt,name=inner_ip,json=innerIp,proto3" json:"inner_ip,omitempty"`
	InnerIpv6          string `protobuf:"bytes,8,opt,name=inner_ipv6,json=innerIpv6,proto3" json:"inner_ipv6,omitempty"`
	OuterIp            string `protobuf:"bytes,9,opt,name=outer_ip,json=outerIp,proto3" json:"outer_ip,omitempty"`
	OuterIpv6          string `protobuf:"bytes,10,opt,name=outer_ipv6,json=outerIpv6,proto3" json:"outer_ipv6,omitempty"`
	ApId               int32  `protobuf:"varint,11,opt,name=ap_id,json=apId,proto3" json:"ap_id,omitempty"`
	InstallChannelId   int32  `protobuf:"varint,12,opt,name=install_channel_id,json=installChannelId,proto3" json:"install_channel_id,omitempty"`
	LoginIp            string `protobuf:"bytes,13,opt,name=login_ip,json=loginIp,proto3" json:"login_ip,omitempty"`
	DataIp             string `protobuf:"bytes,14,opt,name=data_ip,json=dataIp,proto3" json:"data_ip,omitempty"`
	Status             string `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	Version            string `protobuf:"bytes,16,opt,name=version,proto3" json:"version,omitempty"`
	CreatedAt          string `protobuf:"bytes,17,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          string `protobuf:"bytes,18,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	IsManual           bool   `protobuf:"varint,19,opt,name=is_manual,json=isManual,proto3" json:"is_manual,omitempty"`
	StatusDisplay      string `protobuf:"bytes,20,opt,name=status_display,json=statusDisplay,proto3" json:"status_display,omitempty"`
	BkCloudName        string `protobuf:"bytes,21,opt,name=bk_cloud_name,json=bkCloudName,proto3" json:"bk_cloud_name,omitempty"`
	InstallChannelName string `protobuf:"bytes,22,opt,name=install_channel_name,json=installChannelName,proto3" json:"install_channel_name,omitempty"`
	BkBizName          string `protobuf:"bytes,23,opt,name=bk_biz_name,json=bkBizName,proto3" json:"bk_biz_name,omitempty"`
	OperatePermission  bool   `protobuf:"varint,24,opt,name=operate_permission,json=operatePermission,proto3" json:"operate_permission,omitempty"`
}

func (x *HostInfo) Reset() {
	*x = HostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostInfo) ProtoMessage() {}

func (x *HostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostInfo.ProtoReflect.Descriptor instead.
func (*HostInfo) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{3}
}

func (x *HostInfo) GetBkCloudId() int32 {
	if x != nil {
		return x.BkCloudId
	}
	return 0
}

func (x *HostInfo) GetBkBizId() int32 {
	if x != nil {
		return x.BkBizId
	}
	return 0
}

func (x *HostInfo) GetBkHostId() int32 {
	if x != nil {
		return x.BkHostId
	}
	return 0
}

func (x *HostInfo) GetBkHostName() string {
	if x != nil {
		return x.BkHostName
	}
	return ""
}

func (x *HostInfo) GetBkAddressing() string {
	if x != nil {
		return x.BkAddressing
	}
	return ""
}

func (x *HostInfo) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *HostInfo) GetInnerIp() string {
	if x != nil {
		return x.InnerIp
	}
	return ""
}

func (x *HostInfo) GetInnerIpv6() string {
	if x != nil {
		return x.InnerIpv6
	}
	return ""
}

func (x *HostInfo) GetOuterIp() string {
	if x != nil {
		return x.OuterIp
	}
	return ""
}

func (x *HostInfo) GetOuterIpv6() string {
	if x != nil {
		return x.OuterIpv6
	}
	return ""
}

func (x *HostInfo) GetApId() int32 {
	if x != nil {
		return x.ApId
	}
	return 0
}

func (x *HostInfo) GetInstallChannelId() int32 {
	if x != nil {
		return x.InstallChannelId
	}
	return 0
}

func (x *HostInfo) GetLoginIp() string {
	if x != nil {
		return x.LoginIp
	}
	return ""
}

func (x *HostInfo) GetDataIp() string {
	if x != nil {
		return x.DataIp
	}
	return ""
}

func (x *HostInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HostInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HostInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *HostInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *HostInfo) GetIsManual() bool {
	if x != nil {
		return x.IsManual
	}
	return false
}

func (x *HostInfo) GetStatusDisplay() string {
	if x != nil {
		return x.StatusDisplay
	}
	return ""
}

func (x *HostInfo) GetBkCloudName() string {
	if x != nil {
		return x.BkCloudName
	}
	return ""
}

func (x *HostInfo) GetInstallChannelName() string {
	if x != nil {
		return x.InstallChannelName
	}
	return ""
}

func (x *HostInfo) GetBkBizName() string {
	if x != nil {
		return x.BkBizName
	}
	return ""
}

func (x *HostInfo) GetOperatePermission() bool {
	if x != nil {
		return x.OperatePermission
	}
	return false
}

type ListHostData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*HostInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListHostData) Reset() {
	*x = ListHostData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHostData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHostData) ProtoMessage() {}

func (x *ListHostData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHostData.ProtoReflect.Descriptor instead.
func (*ListHostData) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{4}
}

func (x *ListHostData) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListHostData) GetList() []*HostInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type ListHostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *ListHostData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListHostResponse) Reset() {
	*x = ListHostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHostResponse) ProtoMessage() {}

func (x *ListHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHostResponse.ProtoReflect.Descriptor instead.
func (*ListHostResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{5}
}

func (x *ListHostResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListHostResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListHostResponse) GetData() *ListHostData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListProxyHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BkCloudId int64 `protobuf:"varint,1,opt,name=bk_cloud_id,json=bkCloudId,proto3" json:"bk_cloud_id,omitempty"`
}

func (x *ListProxyHostRequest) Reset() {
	*x = ListProxyHostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProxyHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProxyHostRequest) ProtoMessage() {}

func (x *ListProxyHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProxyHostRequest.ProtoReflect.Descriptor instead.
func (*ListProxyHostRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{6}
}

func (x *ListProxyHostRequest) GetBkCloudId() int64 {
	if x != nil {
		return x.BkCloudId
	}
	return 0
}

type ProxyHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BkCloudId int64  `protobuf:"varint,1,opt,name=bk_cloud_id,json=bkCloudId,proto3" json:"bk_cloud_id,omitempty"`
	BkHostId  int64  `protobuf:"varint,2,opt,name=bk_host_id,json=bkHostId,proto3" json:"bk_host_id,omitempty"`
	BkBizId   int64  `protobuf:"varint,3,opt,name=bk_biz_id,json=bkBizId,proto3" json:"bk_biz_id,omitempty"`
	InnerIp   string `protobuf:"bytes,4,opt,name=inner_ip,json=innerIp,proto3" json:"inner_ip,omitempty"`
	InnerIpv6 string `protobuf:"bytes,5,opt,name=inner_ipv6,json=innerIpv6,proto3" json:"inner_ipv6,omitempty"`
	OuterIp   string `protobuf:"bytes,6,opt,name=outer_ip,json=outerIp,proto3" json:"outer_ip,omitempty"`
	OuterIpv6 string `protobuf:"bytes,7,opt,name=outer_ipv6,json=outerIpv6,proto3" json:"outer_ipv6,omitempty"`
	LoginIp   string `protobuf:"bytes,8,opt,name=login_ip,json=loginIp,proto3" json:"login_ip,omitempty"`
	DataIp    string `protobuf:"bytes,9,opt,name=data_ip,json=dataIp,proto3" json:"data_ip,omitempty"`
	ApId      int64  `protobuf:"varint,10,opt,name=ap_id,json=apId,proto3" json:"ap_id,omitempty"`
	ApName    string `protobuf:"bytes,11,opt,name=ap_name,json=apName,proto3" json:"ap_name,omitempty"`
	Status    string `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	Version   string `protobuf:"bytes,13,opt,name=version,proto3" json:"version,omitempty"`
	Port      int64  `protobuf:"varint,14,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ProxyHost) Reset() {
	*x = ProxyHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyHost) ProtoMessage() {}

func (x *ProxyHost) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyHost.ProtoReflect.Descriptor instead.
func (*ProxyHost) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{7}
}

func (x *ProxyHost) GetBkCloudId() int64 {
	if x != nil {
		return x.BkCloudId
	}
	return 0
}

func (x *ProxyHost) GetBkHostId() int64 {
	if x != nil {
		return x.BkHostId
	}
	return 0
}

func (x *ProxyHost) GetBkBizId() int64 {
	if x != nil {
		return x.BkBizId
	}
	return 0
}

func (x *ProxyHost) GetInnerIp() string {
	if x != nil {
		return x.InnerIp
	}
	return ""
}

func (x *ProxyHost) GetInnerIpv6() string {
	if x != nil {
		return x.InnerIpv6
	}
	return ""
}

func (x *ProxyHost) GetOuterIp() string {
	if x != nil {
		return x.OuterIp
	}
	return ""
}

func (x *ProxyHost) GetOuterIpv6() string {
	if x != nil {
		return x.OuterIpv6
	}
	return ""
}

func (x *ProxyHost) GetLoginIp() string {
	if x != nil {
		return x.LoginIp
	}
	return ""
}

func (x *ProxyHost) GetDataIp() string {
	if x != nil {
		return x.DataIp
	}
	return ""
}

func (x *ProxyHost) GetApId() int64 {
	if x != nil {
		return x.ApId
	}
	return 0
}

func (x *ProxyHost) GetApName() string {
	if x != nil {
		return x.ApName
	}
	return ""
}

func (x *ProxyHost) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ProxyHost) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ProxyHost) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

type ListProxyHostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*ProxyHost `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListProxyHostResponse) Reset() {
	*x = ListProxyHostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProxyHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProxyHostResponse) ProtoMessage() {}

func (x *ListProxyHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProxyHostResponse.ProtoReflect.Descriptor instead.
func (*ListProxyHostResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{8}
}

func (x *ListProxyHostResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListProxyHostResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListProxyHostResponse) GetData() []*ProxyHost {
	if x != nil {
		return x.Data
	}
	return nil
}

type InstallHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BkCloudId int64  `protobuf:"varint,1,opt,name=bk_cloud_id,json=bkCloudId,proto3" json:"bk_cloud_id,omitempty"`
	BkBizId   int64  `protobuf:"varint,2,opt,name=bk_biz_id,json=bkBizId,proto3" json:"bk_biz_id,omitempty"`
	BkHostId  int64  `protobuf:"varint,3,opt,name=bk_host_id,json=bkHostId,proto3" json:"bk_host_id,omitempty"`
	OsType    string `protobuf:"bytes,4,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`
	InnerIp   string `protobuf:"bytes,5,opt,name=inner_ip,json=innerIp,proto3" json:"inner_ip,omitempty"`
	OuterIp   string `protobuf:"bytes,6,opt,name=outer_ip,json=outerIp,proto3" json:"outer_ip,omitempty"`
	LoginIp   string `protobuf:"bytes,7,opt,name=login_ip,json=loginIp,proto3" json:"login_ip,omitempty"`
	Account   string `protobuf:"bytes,8,opt,name=account,proto3" json:"account,omitempty"`
	Port      int64  `protobuf:"varint,9,opt,name=port,proto3" json:"port,omitempty"`
	AuthType  string `protobuf:"bytes,10,opt,name=auth_type,json=authType,proto3" json:"auth_type,omitempty"`
	Password  string `protobuf:"bytes,11,opt,name=password,proto3" json:"password,omitempty"`
	ApId      int64  `protobuf:"varint,12,opt,name=ap_id,json=apId,proto3" json:"ap_id,omitempty"`
	Key       string `protobuf:"bytes,13,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *InstallHost) Reset() {
	*x = InstallHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallHost) ProtoMessage() {}

func (x *InstallHost) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallHost.ProtoReflect.Descriptor instead.
func (*InstallHost) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{9}
}

func (x *InstallHost) GetBkCloudId() int64 {
	if x != nil {
		return x.BkCloudId
	}
	return 0
}

func (x *InstallHost) GetBkBizId() int64 {
	if x != nil {
		return x.BkBizId
	}
	return 0
}

func (x *InstallHost) GetBkHostId() int64 {
	if x != nil {
		return x.BkHostId
	}
	return 0
}

func (x *InstallHost) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *InstallHost) GetInnerIp() string {
	if x != nil {
		return x.InnerIp
	}
	return ""
}

func (x *InstallHost) GetOuterIp() string {
	if x != nil {
		return x.OuterIp
	}
	return ""
}

func (x *InstallHost) GetLoginIp() string {
	if x != nil {
		return x.LoginIp
	}
	return ""
}

func (x *InstallHost) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *InstallHost) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *InstallHost) GetAuthType() string {
	if x != nil {
		return x.AuthType
	}
	return ""
}

func (x *InstallHost) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *InstallHost) GetApId() int64 {
	if x != nil {
		return x.ApId
	}
	return 0
}

func (x *InstallHost) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type InstallJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *InstallJobData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *InstallJobResponse) Reset() {
	*x = InstallJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallJobResponse) ProtoMessage() {}

func (x *InstallJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallJobResponse.ProtoReflect.Descriptor instead.
func (*InstallJobResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{10}
}

func (x *InstallJobResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *InstallJobResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InstallJobResponse) GetData() *InstallJobData {
	if x != nil {
		return x.Data
	}
	return nil
}

type InstallJobData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId int64 `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *InstallJobData) Reset() {
	*x = InstallJobData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallJobData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallJobData) ProtoMessage() {}

func (x *InstallJobData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallJobData.ProtoReflect.Descriptor instead.
func (*InstallJobData) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{11}
}

func (x *InstallJobData) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type Cloud struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BkCloudId   int32  `protobuf:"varint,1,opt,name=bk_cloud_id,json=bkCloudId,proto3" json:"bk_cloud_id,omitempty"`
	BkCloudName string `protobuf:"bytes,2,opt,name=bk_cloud_name,json=bkCloudName,proto3" json:"bk_cloud_name,omitempty"`
	Isp         string `protobuf:"bytes,3,opt,name=isp,proto3" json:"isp,omitempty"`
	ApId        int32  `protobuf:"varint,4,opt,name=ap_id,json=apId,proto3" json:"ap_id,omitempty"`
}

func (x *Cloud) Reset() {
	*x = Cloud{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cloud) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cloud) ProtoMessage() {}

func (x *Cloud) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cloud.ProtoReflect.Descriptor instead.
func (*Cloud) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{12}
}

func (x *Cloud) GetBkCloudId() int32 {
	if x != nil {
		return x.BkCloudId
	}
	return 0
}

func (x *Cloud) GetBkCloudName() string {
	if x != nil {
		return x.BkCloudName
	}
	return ""
}

func (x *Cloud) GetIsp() string {
	if x != nil {
		return x.Isp
	}
	return ""
}

func (x *Cloud) GetApId() int32 {
	if x != nil {
		return x.ApId
	}
	return 0
}

type CloudCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BkCloudName string `protobuf:"bytes,1,opt,name=bk_cloud_name,json=bkCloudName,proto3" json:"bk_cloud_name,omitempty"`
	Isp         string `protobuf:"bytes,2,opt,name=isp,proto3" json:"isp,omitempty"`
	ApId        int32  `protobuf:"varint,3,opt,name=ap_id,json=apId,proto3" json:"ap_id,omitempty"`
}

func (x *CloudCreateRequest) Reset() {
	*x = CloudCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudCreateRequest) ProtoMessage() {}

func (x *CloudCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudCreateRequest.ProtoReflect.Descriptor instead.
func (*CloudCreateRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{13}
}

func (x *CloudCreateRequest) GetBkCloudName() string {
	if x != nil {
		return x.BkCloudName
	}
	return ""
}

func (x *CloudCreateRequest) GetIsp() string {
	if x != nil {
		return x.Isp
	}
	return ""
}

func (x *CloudCreateRequest) GetApId() int32 {
	if x != nil {
		return x.ApId
	}
	return 0
}

type CloudCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    int32  `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CloudCreateResponse) Reset() {
	*x = CloudCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudCreateResponse) ProtoMessage() {}

func (x *CloudCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudCreateResponse.ProtoReflect.Descriptor instead.
func (*CloudCreateResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{14}
}

func (x *CloudCreateResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CloudCreateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CloudCreateResponse) GetData() int32 {
	if x != nil {
		return x.Data
	}
	return 0
}

type CloudDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BkCloudId int32 `protobuf:"varint,1,opt,name=bk_cloud_id,json=bkCloudId,proto3" json:"bk_cloud_id,omitempty"`
}

func (x *CloudDeleteRequest) Reset() {
	*x = CloudDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudDeleteRequest) ProtoMessage() {}

func (x *CloudDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudDeleteRequest.ProtoReflect.Descriptor instead.
func (*CloudDeleteRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{15}
}

func (x *CloudDeleteRequest) GetBkCloudId() int32 {
	if x != nil {
		return x.BkCloudId
	}
	return 0
}

type CloudDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CloudDeleteResponse) Reset() {
	*x = CloudDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudDeleteResponse) ProtoMessage() {}

func (x *CloudDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudDeleteResponse.ProtoReflect.Descriptor instead.
func (*CloudDeleteResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{16}
}

func (x *CloudDeleteResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CloudDeleteResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CloudListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloudListRequest) Reset() {
	*x = CloudListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudListRequest) ProtoMessage() {}

func (x *CloudListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudListRequest.ProtoReflect.Descriptor instead.
func (*CloudListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{17}
}

type CloudListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*Cloud `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CloudListResponse) Reset() {
	*x = CloudListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudListResponse) ProtoMessage() {}

func (x *CloudListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudListResponse.ProtoReflect.Descriptor instead.
func (*CloudListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{18}
}

func (x *CloudListResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CloudListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CloudListResponse) GetData() []*Cloud {
	if x != nil {
		return x.Data
	}
	return nil
}

type CloudUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BkCloudId   int32  `protobuf:"varint,1,opt,name=bk_cloud_id,json=bkCloudId,proto3" json:"bk_cloud_id,omitempty"`
	BkCloudName string `protobuf:"bytes,2,opt,name=bk_cloud_name,json=bkCloudName,proto3" json:"bk_cloud_name,omitempty"`
	Isp         string `protobuf:"bytes,3,opt,name=isp,proto3" json:"isp,omitempty"`
	ApId        int32  `protobuf:"varint,4,opt,name=ap_id,json=apId,proto3" json:"ap_id,omitempty"`
}

func (x *CloudUpdateRequest) Reset() {
	*x = CloudUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudUpdateRequest) ProtoMessage() {}

func (x *CloudUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudUpdateRequest.ProtoReflect.Descriptor instead.
func (*CloudUpdateRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{19}
}

func (x *CloudUpdateRequest) GetBkCloudId() int32 {
	if x != nil {
		return x.BkCloudId
	}
	return 0
}

func (x *CloudUpdateRequest) GetBkCloudName() string {
	if x != nil {
		return x.BkCloudName
	}
	return ""
}

func (x *CloudUpdateRequest) GetIsp() string {
	if x != nil {
		return x.Isp
	}
	return ""
}

func (x *CloudUpdateRequest) GetApId() int32 {
	if x != nil {
		return x.ApId
	}
	return 0
}

type CloudUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CloudUpdateResponse) Reset() {
	*x = CloudUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudUpdateResponse) ProtoMessage() {}

func (x *CloudUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudUpdateResponse.ProtoReflect.Descriptor instead.
func (*CloudUpdateResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{20}
}

func (x *CloudUpdateResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CloudUpdateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetJobDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions []*Condition `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Page       int32        `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Pagesize   int32        `protobuf:"varint,3,opt,name=pagesize,proto3" json:"pagesize,omitempty"`
	JobId      int64        `protobuf:"varint,4,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *GetJobDetailRequest) Reset() {
	*x = GetJobDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobDetailRequest) ProtoMessage() {}

func (x *GetJobDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobDetailRequest.ProtoReflect.Descriptor instead.
func (*GetJobDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{21}
}

func (x *GetJobDetailRequest) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *GetJobDetailRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetJobDetailRequest) GetPagesize() int32 {
	if x != nil {
		return x.Pagesize
	}
	return 0
}

func (x *GetJobDetailRequest) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type GetJobDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *JobInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetJobDetailResponse) Reset() {
	*x = GetJobDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobDetailResponse) ProtoMessage() {}

func (x *GetJobDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobDetailResponse.ProtoReflect.Descriptor instead.
func (*GetJobDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{22}
}

func (x *GetJobDetailResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetJobDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetJobDetailResponse) GetData() *JobInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type JobInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId          int64       `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	CreatedBy      string      `protobuf:"bytes,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	JobType        string      `protobuf:"bytes,3,opt,name=job_type,json=jobType,proto3" json:"job_type,omitempty"`
	JobTypeDisplay string      `protobuf:"bytes,4,opt,name=job_type_display,json=jobTypeDisplay,proto3" json:"job_type_display,omitempty"`
	IpFilterList   []string    `protobuf:"bytes,5,rep,name=ip_filter_list,json=ipFilterList,proto3" json:"ip_filter_list,omitempty"`
	Total          int32       `protobuf:"varint,6,opt,name=total,proto3" json:"total,omitempty"`
	List           []*List     `protobuf:"bytes,7,rep,name=list,proto3" json:"list,omitempty"`
	Statistics     *Statistics `protobuf:"bytes,8,opt,name=statistics,proto3" json:"statistics,omitempty"`
	Status         string      `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	EndTime        string      `protobuf:"bytes,10,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	StartTime      string      `protobuf:"bytes,11,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	CostTime       string      `protobuf:"bytes,12,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"`
	Meta           *Meta       `protobuf:"bytes,13,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *JobInfo) Reset() {
	*x = JobInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobInfo) ProtoMessage() {}

func (x *JobInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobInfo.ProtoReflect.Descriptor instead.
func (*JobInfo) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{23}
}

func (x *JobInfo) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *JobInfo) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *JobInfo) GetJobType() string {
	if x != nil {
		return x.JobType
	}
	return ""
}

func (x *JobInfo) GetJobTypeDisplay() string {
	if x != nil {
		return x.JobTypeDisplay
	}
	return ""
}

func (x *JobInfo) GetIpFilterList() []string {
	if x != nil {
		return x.IpFilterList
	}
	return nil
}

func (x *JobInfo) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *JobInfo) GetList() []*List {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *JobInfo) GetStatistics() *Statistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *JobInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *JobInfo) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *JobInfo) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *JobInfo) GetCostTime() string {
	if x != nil {
		return x.CostTime
	}
	return ""
}

func (x *JobInfo) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount   int32 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	FailedCount  int32 `protobuf:"varint,2,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty"`
	IgnoredCount int32 `protobuf:"varint,3,opt,name=ignored_count,json=ignoredCount,proto3" json:"ignored_count,omitempty"`
	PendingCount int32 `protobuf:"varint,4,opt,name=pending_count,json=pendingCount,proto3" json:"pending_count,omitempty"`
	RunningCount int32 `protobuf:"varint,5,opt,name=running_count,json=runningCount,proto3" json:"running_count,omitempty"`
	SuccessCount int32 `protobuf:"varint,6,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"`
}

func (x *Statistics) Reset() {
	*x = Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statistics) ProtoMessage() {}

func (x *Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statistics.ProtoReflect.Descriptor instead.
func (*Statistics) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{24}
}

func (x *Statistics) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *Statistics) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *Statistics) GetIgnoredCount() int32 {
	if x != nil {
		return x.IgnoredCount
	}
	return 0
}

func (x *Statistics) GetPendingCount() int32 {
	if x != nil {
		return x.PendingCount
	}
	return 0
}

func (x *Statistics) GetRunningCount() int32 {
	if x != nil {
		return x.RunningCount
	}
	return 0
}

func (x *Statistics) GetSuccessCount() int32 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	StepType        string `protobuf:"bytes,2,opt,name=step_type,json=stepType,proto3" json:"step_type,omitempty"`
	OpType          string `protobuf:"bytes,3,opt,name=op_type,json=opType,proto3" json:"op_type,omitempty"`
	OpTypeDisplay   string `protobuf:"bytes,4,opt,name=op_type_display,json=opTypeDisplay,proto3" json:"op_type_display,omitempty"`
	StepTypeDisplay string `protobuf:"bytes,5,opt,name=step_type_display,json=stepTypeDisplay,proto3" json:"step_type_display,omitempty"`
	Name            string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Category        string `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	PluginName      string `protobuf:"bytes,8,opt,name=plugin_name,json=pluginName,proto3" json:"plugin_name,omitempty"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{25}
}

func (x *Meta) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Meta) GetStepType() string {
	if x != nil {
		return x.StepType
	}
	return ""
}

func (x *Meta) GetOpType() string {
	if x != nil {
		return x.OpType
	}
	return ""
}

func (x *Meta) GetOpTypeDisplay() string {
	if x != nil {
		return x.OpTypeDisplay
	}
	return ""
}

func (x *Meta) GetStepTypeDisplay() string {
	if x != nil {
		return x.StepTypeDisplay
	}
	return ""
}

func (x *Meta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Meta) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Meta) GetPluginName() string {
	if x != nil {
		return x.PluginName
	}
	return ""
}

type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterHost    bool   `protobuf:"varint,1,opt,name=filter_host,json=filterHost,proto3" json:"filter_host,omitempty"`
	BkHostId      int64  `protobuf:"varint,2,opt,name=bk_host_id,json=bkHostId,proto3" json:"bk_host_id,omitempty"`
	Ip            string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	InnerIp       string `protobuf:"bytes,4,opt,name=inner_ip,json=innerIp,proto3" json:"inner_ip,omitempty"`
	InnerIpv6     string `protobuf:"bytes,5,opt,name=inner_ipv6,json=innerIpv6,proto3" json:"inner_ipv6,omitempty"`
	BkCloudId     int64  `protobuf:"varint,6,opt,name=bk_cloud_id,json=bkCloudId,proto3" json:"bk_cloud_id,omitempty"`
	BkCloudName   string `protobuf:"bytes,7,opt,name=bk_cloud_name,json=bkCloudName,proto3" json:"bk_cloud_name,omitempty"`
	BkBizId       int64  `protobuf:"varint,8,opt,name=bk_biz_id,json=bkBizId,proto3" json:"bk_biz_id,omitempty"`
	BkBizName     string `protobuf:"bytes,9,opt,name=bk_biz_name,json=bkBizName,proto3" json:"bk_biz_name,omitempty"`
	JobId         int64  `protobuf:"varint,10,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Status        string `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	StatusDisplay string `protobuf:"bytes,12,opt,name=status_display,json=statusDisplay,proto3" json:"status_display,omitempty"`
}

func (x *List) Reset() {
	*x = List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_terraform_bkprovider_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP(), []int{26}
}

func (x *List) GetFilterHost() bool {
	if x != nil {
		return x.FilterHost
	}
	return false
}

func (x *List) GetBkHostId() int64 {
	if x != nil {
		return x.BkHostId
	}
	return 0
}

func (x *List) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *List) GetInnerIp() string {
	if x != nil {
		return x.InnerIp
	}
	return ""
}

func (x *List) GetInnerIpv6() string {
	if x != nil {
		return x.InnerIpv6
	}
	return ""
}

func (x *List) GetBkCloudId() int64 {
	if x != nil {
		return x.BkCloudId
	}
	return 0
}

func (x *List) GetBkCloudName() string {
	if x != nil {
		return x.BkCloudName
	}
	return ""
}

func (x *List) GetBkBizId() int64 {
	if x != nil {
		return x.BkBizId
	}
	return 0
}

func (x *List) GetBkBizName() string {
	if x != nil {
		return x.BkBizName
	}
	return ""
}

func (x *List) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *List) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *List) GetStatusDisplay() string {
	if x != nil {
		return x.StatusDisplay
	}
	return ""
}

var File_proto_bcs_terraform_bkprovider_proto protoreflect.FileDescriptor

var file_proto_bcs_terraform_bkprovider_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x63, 0x73, 0x2d, 0x74, 0x65, 0x72, 0x72,
	0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x62, 0x63, 0x73, 0x74, 0x65, 0x72, 0x72, 0x61,
	0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x03, 0x0a, 0x11, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0xfe, 0x01, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0xe2, 0x01, 0x92, 0x41, 0xde, 0x01, 0x2a, 0x08, 0x6a, 0x6f, 0x62, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x32, 0xd1, 0x01, 0xe4, 0xbd, 0x9c, 0xe4, 0xb8, 0x9a, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89, 0xe5, 0x80, 0xbc, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x2f, 0x52, 0x45, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x2f, 0x52, 0x45, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x2f, 0x55, 0x4e, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x2f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45,
	0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x2f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x41,
	0x47, 0x45, 0x4e, 0x54, 0x2f, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x2f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x2f,
	0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x2f, 0x52, 0x45,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x2f, 0x55, 0x4e,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x2f, 0x55, 0x50,
	0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x2f, 0x52, 0x45, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x59, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62,
	0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x68, 0x6f, 0x73, 0x74,
	0x73, 0x32, 0x12, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x3a, 0x3f, 0x92, 0x41,
	0x3c, 0x0a, 0x3a, 0x2a, 0x11, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x12, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x08, 0x6a, 0x6f, 0x62,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x22, 0xa1, 0x01,
	0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x92, 0x41, 0x58, 0x2a, 0x03, 0x6b,
	0x65, 0x79, 0x32, 0x51, 0xe5, 0x85, 0xb3, 0xe9, 0x94, 0xae, 0xe8, 0xaf, 0x8d, 0x2c, 0x20, 0xe5,
	0x8f, 0xaf, 0xe9, 0x80, 0x89, 0xe5, 0x80, 0xbc, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x70,
	0xe3, 0x80, 0x81, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xe3, 0x80, 0x81, 0x6f,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xe3, 0x80, 0x81, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xe3,
	0x80, 0x81, 0x62, 0x6b, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0xe3, 0x80, 0x81,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x2a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x03, 0xe5, 0x80, 0xbc, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xdf, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x63, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1d, 0x92, 0x41,
	0x1a, 0x2a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6,
	0x90, 0x9c, 0xe7, 0xb4, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x32, 0x19, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xef, 0xbc,
	0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x31, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x73, 0x69,
	0x7a, 0x65, 0x32, 0x1a, 0xe5, 0x88, 0x86, 0xe9, 0xa1, 0xb5, 0xe5, 0xa4, 0xa7, 0xe5, 0xb0, 0x8f,
	0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x31, 0x30, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x62, 0x6b, 0x5f, 0x62,
	0x69, 0x7a, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x2a, 0x0a, 0x62, 0x6b, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x73, 0x32, 0x0e, 0xe8,
	0x93, 0x9d, 0xe9, 0xb2, 0xb8, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x08, 0x62,
	0x6b, 0x42, 0x69, 0x7a, 0x49, 0x64, 0x73, 0x3a, 0x2a, 0x92, 0x41, 0x27, 0x0a, 0x25, 0x2a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x12, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0x22, 0xe3, 0x0c, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3d, 0x0a, 0x0b, 0x62, 0x6b, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0b, 0x62, 0x6b, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x32, 0x0b, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5,
	0x9f, 0x9f, 0x49, 0x44, 0x52, 0x09, 0x62, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x09, 0x62, 0x6b, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x62, 0x6b, 0x5f, 0x62, 0x69, 0x7a, 0x5f,
	0x69, 0x64, 0x32, 0x08, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x07, 0x62, 0x6b,
	0x42, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x62, 0x6b, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x0a,
	0x62, 0x6b, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x32, 0x08, 0xe4, 0xb8, 0xbb, 0xe6,
	0x9c, 0xba, 0x49, 0x44, 0x52, 0x08, 0x62, 0x6b, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3e,
	0x0a, 0x0c, 0x62, 0x6b, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x0c, 0x62, 0x6b, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x09, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe5,
	0x90, 0x8d, 0x52, 0x0a, 0x62, 0x6b, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b,
	0x0a, 0x0d, 0x62, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x0d, 0x62, 0x6b, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x32, 0x22, 0xe5, 0xaf, 0xbb, 0xe5, 0x9d,
	0x80, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xef, 0xbc, 0x8c, 0x31, 0x3a, 0x20, 0xe9, 0x9d, 0x99,
	0xe6, 0x80, 0x81, 0x20, 0x32, 0x3a, 0x20, 0xe5, 0x8a, 0xa8, 0xe6, 0x80, 0x81, 0x52, 0x0c, 0x62,
	0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x5f, 0x0a, 0x07, 0x6f,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41,
	0x43, 0x2a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x38, 0xe6, 0x93, 0x8d, 0xe4,
	0xbd, 0x9c, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xef, 0xbc, 0x8c, 0x31, 0xef, 0xbc, 0x9a, 0x4c,
	0x49, 0x4e, 0x55, 0x58, 0x20, 0x32, 0xef, 0xbc, 0x9a, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53,
	0x20, 0x33, 0xef, 0xbc, 0x9a, 0x41, 0x49, 0x58, 0x20, 0x34, 0xef, 0xbc, 0x9a, 0x53, 0x4f, 0x4c,
	0x41, 0x52, 0x49, 0x53, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x08,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0x92, 0x41, 0x1c, 0x2a, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x32, 0x10, 0xe5,
	0x86, 0x85, 0xe7, 0xbd, 0x91, 0x49, 0x50, 0x76, 0x34, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52,
	0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x12, 0x40, 0x0a, 0x0a, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41,
	0x1e, 0x2a, 0x0a, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x32, 0x10, 0xe5,
	0x86, 0x85, 0xe7, 0xbd, 0x91, 0x49, 0x50, 0x76, 0x36, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52,
	0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x76, 0x36, 0x12, 0x3a, 0x0a, 0x08, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x2a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x32, 0x10, 0xe5, 0xa4, 0x96,
	0xe7, 0xbd, 0x91, 0x49, 0x50, 0x76, 0x34, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x07, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x70, 0x12, 0x40, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a,
	0x0a, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x32, 0x10, 0xe5, 0xa4, 0x96,
	0xe7, 0xbd, 0x91, 0x49, 0x50, 0x76, 0x36, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x09, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x70, 0x76, 0x36, 0x12, 0x2c, 0x0a, 0x05, 0x61, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x05, 0x61, 0x70,
	0x5f, 0x69, 0x64, 0x32, 0x0b, 0xe6, 0x8e, 0xa5, 0xe5, 0x85, 0xa5, 0xe7, 0x82, 0xb9, 0x49, 0x44,
	0x52, 0x04, 0x61, 0x70, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x32, 0x0e, 0xe5, 0xae, 0x89,
	0xe8, 0xa3, 0x85, 0xe9, 0x80, 0x9a, 0xe9, 0x81, 0x93, 0x49, 0x44, 0x52, 0x10, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x32, 0x08,
	0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0x49, 0x50, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x49,
	0x70, 0x12, 0x2f, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x70, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x70,
	0x32, 0x08, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x49, 0x50, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61,
	0x49, 0x70, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32,
	0x0c, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0xe7, 0x89, 0x88, 0xe6, 0x9c,
	0xac, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x32,
	0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41,
	0x1a, 0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x32, 0x0c, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x09,
	0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x32, 0x12, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe6, 0x89, 0x8b, 0xe5, 0x8a, 0xa8, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x52, 0x08, 0x69,
	0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x54, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2d, 0x92, 0x41, 0x2a, 0x2a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x32, 0x18, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x89, 0xa7, 0xe8,
	0xa1, 0x8c, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x47, 0x0a,
	0x0d, 0x62, 0x6b, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0d, 0x62, 0x6b, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba,
	0xe5, 0x9f, 0x9f, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x62, 0x6b, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x2a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x32,
	0x12, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe9, 0x80, 0x9a, 0xe9, 0x81, 0x93, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x62, 0x6b, 0x5f, 0x62, 0x69,
	0x7a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41,
	0x1b, 0x2a, 0x0b, 0x62, 0x6b, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c,
	0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x09, 0x62, 0x6b,
	0x42, 0x69, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x18, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x85, 0xb7, 0xe6, 0x9c, 0x89, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c,
	0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x2a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0x06, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x53, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72,
	0x6d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x32,
	0x12, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd7, 0x01, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x1d,
	0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x62,
	0x6b, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x0b, 0x62, 0x6b, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x69, 0x64, 0x32, 0x05, 0xe4, 0xba, 0x91, 0x49, 0x44, 0x52, 0x09, 0x62, 0x6b, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x64, 0x22, 0xf4, 0x05, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x62, 0x6b, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0b, 0x62, 0x6b,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x32, 0x0b, 0xe4, 0xba, 0x91, 0xe5, 0x8c,
	0xba, 0xe5, 0x9f, 0x9f, 0x49, 0x44, 0x52, 0x09, 0x62, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x0a, 0x62, 0x6b, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x0a, 0x62, 0x6b, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x32, 0x08, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0x49, 0x44,
	0x52, 0x08, 0x62, 0x6b, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x62, 0x6b,
	0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x18, 0x92,
	0x41, 0x15, 0x2a, 0x09, 0x62, 0x6b, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x32, 0x08, 0xe4,
	0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x07, 0x62, 0x6b, 0x42, 0x69, 0x7a, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x70, 0x32, 0x08, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0x49, 0x50, 0x52, 0x07, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x49, 0x70, 0x12, 0x40, 0x0a, 0x0a, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x0a, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x32, 0x10, 0xe5, 0x86, 0x85, 0xe7, 0xbd,
	0x91, 0x49, 0x50, 0x76, 0x36, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x09, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x49, 0x70, 0x76, 0x36, 0x12, 0x32, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x32, 0x08, 0xe5, 0xa4, 0x96, 0xe7, 0xbd, 0x91, 0x49,
	0x50, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x70, 0x12, 0x40, 0x0a, 0x0a, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21,
	0x92, 0x41, 0x1e, 0x2a, 0x0a, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x32,
	0x10, 0xe5, 0xa4, 0x96, 0xe7, 0xbd, 0x91, 0x49, 0x50, 0x76, 0x36, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d,
	0x80, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x70, 0x76, 0x36, 0x12, 0x32, 0x0a, 0x08,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x2a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x32, 0x08, 0xe7,
	0x99, 0xbb, 0xe5, 0xbd, 0x95, 0x49, 0x50, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70,
	0x12, 0x2f, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x70, 0x32,
	0x08, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x49, 0x50, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49,
	0x70, 0x12, 0x2c, 0x0a, 0x05, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x05, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x32, 0x0b, 0xe6, 0x8e,
	0xa5, 0xe5, 0x85, 0xa5, 0xe7, 0x82, 0xb9, 0x49, 0x44, 0x52, 0x04, 0x61, 0x70, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x07, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0f,
	0xe6, 0x8e, 0xa5, 0xe5, 0x85, 0xa5, 0xe7, 0x82, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52,
	0x06, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x32, 0x06, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x32, 0x06, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x06, 0xe7,
	0xab, 0xaf, 0xe5, 0x8f, 0xa3, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x54, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6b,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x6f,
	0x73, 0x74, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x84, 0x07, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x62, 0x6b, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x2a, 0x0b, 0x62, 0x6b, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x32, 0x05,
	0xe4, 0xba, 0x91, 0x49, 0x44, 0x52, 0x09, 0x62, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x09, 0x62, 0x6b, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x62, 0x6b, 0x5f, 0x62, 0x69, 0x7a,
	0x5f, 0x69, 0x64, 0x32, 0x08, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x07, 0x62,
	0x6b, 0x42, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x62, 0x6b, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x0a, 0x62, 0x6b, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x32, 0x08, 0xe4, 0xb8, 0xbb,
	0xe6, 0x9c, 0xba, 0x49, 0x44, 0x52, 0x08, 0x62, 0x6b, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x65, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4c, 0x92, 0x41, 0x49, 0x2a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x3e,
	0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0x31, 0xef, 0xbc, 0x9a, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x20, 0x32,
	0xef, 0xbc, 0x9a, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x20, 0x33, 0xef, 0xbc, 0x9a, 0x41,
	0x49, 0x58, 0x20, 0x34, 0xef, 0xbc, 0x9a, 0x53, 0x4f, 0x4c, 0x41, 0x52, 0x49, 0x53, 0x52, 0x06,
	0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x32, 0x08, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0x49,
	0x50, 0x52, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x12, 0x32, 0x0a, 0x08, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x2a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x32, 0x08, 0xe5, 0xa4, 0x96,
	0xe7, 0xbd, 0x91, 0x49, 0x50, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x70, 0x12, 0x32,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x32,
	0x08, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0x49, 0x50, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x49, 0x70, 0x12, 0x2e, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x32, 0x06, 0xe8, 0xb4, 0xa6, 0xe6, 0x88, 0xb7, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x06, 0xe7, 0xab, 0xaf,
	0xe5, 0x8f, 0xa3, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x79, 0x92,
	0x41, 0x76, 0x2a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x69, 0xe8,
	0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0x31, 0xef,
	0xbc, 0x9a, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0xef, 0xbc, 0x8c, 0xe5, 0xaf, 0x86,
	0xe7, 0xa0, 0x81, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0x20, 0x32, 0x3a, 0x20, 0x4b, 0x45, 0x59,
	0xef, 0xbc, 0x8c, 0xe7, 0xa7, 0x98, 0xe9, 0x92, 0xa5, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0x20,
	0x33, 0xef, 0xbc, 0x9a, 0x54, 0x4a, 0x4a, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44,
	0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe5, 0xaf, 0x86, 0xe7,
	0xa0, 0x81, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x32, 0x06, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x05, 0x61, 0x70, 0x5f, 0x69, 0x64,
	0x32, 0x0b, 0xe6, 0x8e, 0xa5, 0xe5, 0x85, 0xa5, 0xe7, 0x82, 0xb9, 0x49, 0x44, 0x52, 0x04, 0x61,
	0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0x92, 0x41, 0x0d, 0x2a, 0x03, 0x6b, 0x65, 0x79, 0x32, 0x06, 0xe7, 0xa7, 0x98, 0xe9,
	0x92, 0xa5, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x3a, 0x55, 0x92, 0x41, 0x52, 0x0a, 0x50, 0x2a, 0x0b,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x32, 0x12, 0xe5, 0xae, 0x89,
	0xe8, 0xa3, 0x85, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xd2,
	0x01, 0x0b, 0x62, 0x6b, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x09,
	0x62, 0x6b, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x07, 0x6f, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0xd2, 0x01, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x22, 0xd5,
	0x01, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x53, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6b,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3e, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x32, 0x08, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0xfa, 0x01, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x12, 0x3d, 0x0a, 0x0b, 0x62, 0x6b, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0b, 0x62, 0x6b, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x32, 0x0b, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5,
	0x9f, 0x9f, 0x49, 0x44, 0x52, 0x09, 0x62, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12,
	0x47, 0x0a, 0x0d, 0x62, 0x6b, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0d, 0x62, 0x6b, 0x5f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe4, 0xba, 0x91, 0xe5,
	0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x62, 0x6b, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x03, 0x69, 0x73, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x03, 0x69, 0x73, 0x70, 0x32,
	0x1f, 0xe8, 0xbf, 0x90, 0xe8, 0x90, 0xa5, 0xe5, 0x95, 0x86, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82,
	0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0xe3, 0x80, 0x81, 0x54, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74,
	0x52, 0x03, 0x69, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x05, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x05, 0x61, 0x70, 0x5f, 0x69, 0x64,
	0x32, 0x0b, 0xe6, 0x8e, 0xa5, 0xe5, 0x85, 0xa5, 0xe7, 0x82, 0xb9, 0x49, 0x44, 0x52, 0x04, 0x61,
	0x70, 0x49, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0d, 0x62, 0x6b,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0d, 0x62, 0x6b, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x62, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x03, 0x69, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x03, 0x69, 0x73, 0x70, 0x32, 0x1f, 0xe8, 0xbf, 0x90, 0xe8,
	0x90, 0xa5, 0xe5, 0x95, 0x86, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0x41, 0x6d, 0x61, 0x7a, 0x6f,
	0x6e, 0xe3, 0x80, 0x81, 0x54, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x69, 0x73, 0x70,
	0x12, 0x2c, 0x0a, 0x05, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x2a, 0x05, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x32, 0x0b, 0xe6, 0x8e, 0xa5,
	0xe5, 0x85, 0xa5, 0xe7, 0x82, 0xb9, 0x49, 0x44, 0x52, 0x04, 0x61, 0x70, 0x49, 0x64, 0x22, 0xb6,
	0x01, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x14, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe7, 0x9a, 0x84, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0x49,
	0x44, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x0b, 0x62, 0x6b, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0b, 0x62, 0x6b, 0x5f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x69, 0x64, 0x32, 0x0b, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0x49,
	0x44, 0x52, 0x09, 0x62, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a,
	0x13, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x12, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66,
	0x6f, 0x72, 0x6d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0f,
	0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x87, 0x02, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0b,
	0x62, 0x6b, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0b, 0x62, 0x6b, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x69, 0x64, 0x32, 0x0b, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0x49, 0x44,
	0x52, 0x09, 0x62, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0d, 0x62,
	0x6b, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0d, 0x62, 0x6b, 0x5f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0f, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5, 0x9f,
	0x9f, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x62, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x03, 0x69, 0x73, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x03, 0x69, 0x73, 0x70, 0x32, 0x1f, 0xe8, 0xbf, 0x90,
	0xe8, 0x90, 0xa5, 0xe5, 0x95, 0x86, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0x41, 0x6d, 0x61, 0x7a,
	0x6f, 0x6e, 0xe3, 0x80, 0x81, 0x54, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x69, 0x73,
	0x70, 0x12, 0x2c, 0x0a, 0x05, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x05, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x32, 0x0b, 0xe6, 0x8e,
	0xa5, 0xe5, 0x85, 0xa5, 0xe7, 0x82, 0xb9, 0x49, 0x44, 0x52, 0x04, 0x61, 0x70, 0x49, 0x64, 0x22,
	0x81, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xb2, 0x03, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xb5, 0x01, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62,
	0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x72, 0x92, 0x41, 0x6f, 0x2a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x32, 0x61, 0xe6, 0x90, 0x9c, 0xe7, 0xb4, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4,
	0xbb, 0xb6, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89, 0x4b, 0x65, 0x79, 0x2c, 0x20, 0x31,
	0x3a, 0x20, 0x69, 0x70, 0xef, 0xbc, 0x8c, 0x49, 0x50, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x20,
	0x32, 0x3a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0xef, 0xbc, 0x8c,
	0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0x49, 0x44, 0x20, 0x33,
	0x3a, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xef, 0xbc, 0x8c, 0xe6, 0x89, 0xa7, 0xe8, 0xa1,
	0x8c, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x32, 0x19, 0xe5, 0xbd,
	0x93, 0xe5, 0x89, 0x8d, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98,
	0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x31, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x29, 0x92, 0x41, 0x26, 0x2a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x32, 0x1a,
	0xe5, 0x88, 0x86, 0xe9, 0xa1, 0xb5, 0xe5, 0xa4, 0xa7, 0xe5, 0xb0, 0x8f, 0xef, 0xbc, 0x8c, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x31, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x32, 0x11, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5, 0xbf,
	0x85, 0xe5, 0xa1, 0xab, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x3a, 0x2b, 0x92, 0x41, 0x28,
	0x0a, 0x26, 0x2a, 0x13, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x0f, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x4a,
	0x6f, 0x62, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x22, 0xfe, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4a, 0x6f, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x63,
	0x73, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe4, 0xbd, 0x9c, 0xe4, 0xb8, 0x9a, 0xe8,
	0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x2c, 0x92, 0x41, 0x29,
	0x0a, 0x27, 0x2a, 0x14, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x0f, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0x4a, 0x6f, 0x62, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x22, 0xa2, 0x08, 0x0a, 0x07, 0x4a, 0x6f,
	0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x32, 0x08, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x32, 0x09, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe8, 0x80, 0x85, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x4a,
	0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x32,
	0x20, 0xe4, 0xbd, 0x9c, 0xe4, 0xb8, 0x9a, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c,
	0xe8, 0xa7, 0x81, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xe5, 0xae, 0x9a, 0xe4, 0xb9,
	0x89, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x6a, 0x6f,
	0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x10, 0x6a, 0x6f, 0x62, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x32, 0x12, 0xe4, 0xbd, 0x9c,
	0xe4, 0xb8, 0x9a, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52,
	0x0e, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12,
	0x6d, 0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x47, 0x92, 0x41, 0x44, 0x2a, 0x0e, 0x69, 0x70,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x32, 0x32, 0xe8, 0xbf,
	0x87, 0xe6, 0xbb, 0xa4, 0xe7, 0x9a, 0x84, 0x49, 0x50, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef,
	0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe5, 0x9c, 0xa8, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe7, 0x9a,
	0x84, 0xe7, 0xad, 0x9b, 0xe9, 0x80, 0x89, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xe5, 0x86, 0x85,
	0x52, 0x0c, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x92,
	0x41, 0x21, 0x2a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0x18, 0xe5, 0xae, 0x9e, 0xe4, 0xbe,
	0x8b, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xe6, 0x80, 0xbb,
	0xe5, 0x92, 0x8c, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x6e, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x2a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x32, 0x31, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0xbb, 0xe6,
	0x9c, 0xba, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc, 0x8c, 0xe8, 0xa7, 0x81, 0x6c, 0x69, 0x73, 0x74, 0xe5, 0xae,
	0x9a, 0xe4, 0xb9, 0x89, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x7d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x62, 0x63, 0x73, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6b, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x42, 0x39, 0x92, 0x41, 0x36, 0x2a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x32, 0x28, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xbb, 0x9f, 0xe8, 0xae,
	0xa1, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe8, 0xa7, 0x81, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x1e, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0xef, 0xbc, 0x8c, 0xe8, 0xa7, 0x81, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x32,
	0x0c, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x12, 0xe5, 0x90, 0xaf,
	0xe5, 0x8a, 0xa8, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92,
	0x41, 0x28, 0x2a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x1b, 0xe6,
	0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe8, 0x80, 0x97, 0xe6, 0x97, 0xb6, 0xef, 0xbc, 0x8c, 0xe5, 0x8d,
	0x95, 0xe4, 0xbd, 0x8d, 0xe4, 0xb8, 0xba, 0xe7, 0xa7, 0x92, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72,
	0x6d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x32, 0x2b, 0xe6, 0x89, 0xa7,
	0xe8, 0xa1, 0x8c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x85, 0x83, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe8, 0xa7, 0x81, 0x6d, 0x65,
	0x74, 0x61, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xe4,
	0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf5, 0x01, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x65,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe5, 0x02,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x62, 0x6b, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x6b, 0x48,
	0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x76, 0x36, 0x12,
	0x1e, 0x0a, 0x0b, 0x62, 0x6b, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x62, 0x6b, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x62, 0x6b, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x6b, 0x42, 0x69, 0x7a, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0b, 0x62, 0x6b, 0x5f, 0x62, 0x69, 0x7a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6b, 0x42, 0x69, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x32, 0x8f, 0x0c, 0x0a, 0x16, 0x42, 0x63, 0x73, 0x54, 0x65, 0x72,
	0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0xc5, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x12,
	0x29, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6b,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x63, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x92, 0x41, 0x2e, 0x12, 0x15, 0x47, 0x53, 0x45,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe4, 0xb8, 0x8b, 0xe5, 0x8f, 0x91, 0xe6, 0x8e, 0xa5, 0xe5,
	0x8f, 0xa3, 0x1a, 0x15, 0x47, 0x53, 0x45, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe4, 0xb8, 0x8b,
	0xe5, 0x8f, 0x91, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a,
	0x01, 0x2a, 0x22, 0x24, 0x2f, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x62,
	0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x6a, 0x6f, 0x62, 0x12, 0xbd, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x65, 0x72, 0x72, 0x61,
	0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x62, 0x63, 0x73, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6b, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x92, 0x41, 0x2e, 0x12, 0x15, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x67, 0x73, 0x65, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x67, 0x73, 0x65, 0x20,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d,
	0x2d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x12, 0xcf, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x62, 0x63, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x92, 0x41, 0x2e, 0x12, 0x15, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0x67, 0x73, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x78, 0x79, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x1a, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x67, 0x73, 0x65, 0x20, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a,
	0x12, 0x28, 0x2f, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x62, 0x6b, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x12, 0xb6, 0x01, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x2a, 0x2e, 0x62, 0x63, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x65, 0x72, 0x72,
	0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4e, 0x92, 0x41, 0x22, 0x12, 0x0f, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0x1a, 0x0f, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d,
	0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x12, 0xb6, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x12, 0x2a, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f,
	0x72, 0x6d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6b,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x92, 0x41,
	0x22, 0x12, 0x0f, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5,
	0x9f, 0x9f, 0x1a, 0x0f, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba,
	0xe5, 0x9f, 0x9f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x1a, 0x1e, 0x2f, 0x74,
	0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0xad, 0x01, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x28, 0x2e, 0x62, 0x63, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66,
	0x6f, 0x72, 0x6d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4b, 0x92, 0x41, 0x22, 0x12, 0x0f, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xba, 0x91, 0xe5,
	0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0x1a, 0x0f, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xba, 0x91,
	0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x74,
	0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0xb3, 0x01, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x2a, 0x2e, 0x62,
	0x63, 0x73, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6b, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x92, 0x41, 0x22, 0x12, 0x0f, 0xe5, 0x88, 0xa0, 0xe9,
	0x99, 0xa4, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0x1a, 0x0f, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0xe4, 0xba, 0x91, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x62,
	0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x12, 0xc2, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x2b, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f,
	0x72, 0x6d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x4a, 0x6f, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x62, 0x63, 0x73, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62,
	0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57,
	0x92, 0x41, 0x22, 0x12, 0x0f, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x4a, 0x6f, 0x62, 0xe8, 0xaf,
	0xa6, 0xe6, 0x83, 0x85, 0x1a, 0x0f, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x4a, 0x6f, 0x62, 0xe8,
	0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27,
	0x2f, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x62, 0x6b, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x6a, 0x6f, 0x62,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x6a, 0x92, 0x41, 0x47, 0x12, 0x1e, 0x0a, 0x15,
	0x42, 0x43, 0x53, 0x20, 0x41, 0x70, 0x69, 0x20, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x20, 0x41, 0x50,
	0x49, 0x20, 0x44, 0x6f, 0x63, 0x32, 0x05, 0x30, 0x2e, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x5a, 0x1e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x62, 0x63, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6b, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_bcs_terraform_bkprovider_proto_rawDescOnce sync.Once
	file_proto_bcs_terraform_bkprovider_proto_rawDescData = file_proto_bcs_terraform_bkprovider_proto_rawDesc
)

func file_proto_bcs_terraform_bkprovider_proto_rawDescGZIP() []byte {
	file_proto_bcs_terraform_bkprovider_proto_rawDescOnce.Do(func() {
		file_proto_bcs_terraform_bkprovider_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_bcs_terraform_bkprovider_proto_rawDescData)
	})
	return file_proto_bcs_terraform_bkprovider_proto_rawDescData
}

var file_proto_bcs_terraform_bkprovider_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_proto_bcs_terraform_bkprovider_proto_goTypes = []interface{}{
	(*InstallJobRequest)(nil),     // 0: bcsterraformbkprovider.InstallJobRequest
	(*Condition)(nil),             // 1: bcsterraformbkprovider.Condition
	(*ListHostRequest)(nil),       // 2: bcsterraformbkprovider.ListHostRequest
	(*HostInfo)(nil),              // 3: bcsterraformbkprovider.HostInfo
	(*ListHostData)(nil),          // 4: bcsterraformbkprovider.ListHostData
	(*ListHostResponse)(nil),      // 5: bcsterraformbkprovider.ListHostResponse
	(*ListProxyHostRequest)(nil),  // 6: bcsterraformbkprovider.ListProxyHostRequest
	(*ProxyHost)(nil),             // 7: bcsterraformbkprovider.ProxyHost
	(*ListProxyHostResponse)(nil), // 8: bcsterraformbkprovider.ListProxyHostResponse
	(*InstallHost)(nil),           // 9: bcsterraformbkprovider.InstallHost
	(*InstallJobResponse)(nil),    // 10: bcsterraformbkprovider.InstallJobResponse
	(*InstallJobData)(nil),        // 11: bcsterraformbkprovider.InstallJobData
	(*Cloud)(nil),                 // 12: bcsterraformbkprovider.Cloud
	(*CloudCreateRequest)(nil),    // 13: bcsterraformbkprovider.CloudCreateRequest
	(*CloudCreateResponse)(nil),   // 14: bcsterraformbkprovider.CloudCreateResponse
	(*CloudDeleteRequest)(nil),    // 15: bcsterraformbkprovider.CloudDeleteRequest
	(*CloudDeleteResponse)(nil),   // 16: bcsterraformbkprovider.CloudDeleteResponse
	(*CloudListRequest)(nil),      // 17: bcsterraformbkprovider.CloudListRequest
	(*CloudListResponse)(nil),     // 18: bcsterraformbkprovider.CloudListResponse
	(*CloudUpdateRequest)(nil),    // 19: bcsterraformbkprovider.CloudUpdateRequest
	(*CloudUpdateResponse)(nil),   // 20: bcsterraformbkprovider.CloudUpdateResponse
	(*GetJobDetailRequest)(nil),   // 21: bcsterraformbkprovider.GetJobDetailRequest
	(*GetJobDetailResponse)(nil),  // 22: bcsterraformbkprovider.GetJobDetailResponse
	(*JobInfo)(nil),               // 23: bcsterraformbkprovider.JobInfo
	(*Statistics)(nil),            // 24: bcsterraformbkprovider.Statistics
	(*Meta)(nil),                  // 25: bcsterraformbkprovider.Meta
	(*List)(nil),                  // 26: bcsterraformbkprovider.List
}
var file_proto_bcs_terraform_bkprovider_proto_depIdxs = []int32{
	9,  // 0: bcsterraformbkprovider.InstallJobRequest.hosts:type_name -> bcsterraformbkprovider.InstallHost
	1,  // 1: bcsterraformbkprovider.ListHostRequest.conditions:type_name -> bcsterraformbkprovider.Condition
	3,  // 2: bcsterraformbkprovider.ListHostData.list:type_name -> bcsterraformbkprovider.HostInfo
	4,  // 3: bcsterraformbkprovider.ListHostResponse.data:type_name -> bcsterraformbkprovider.ListHostData
	7,  // 4: bcsterraformbkprovider.ListProxyHostResponse.data:type_name -> bcsterraformbkprovider.ProxyHost
	11, // 5: bcsterraformbkprovider.InstallJobResponse.data:type_name -> bcsterraformbkprovider.InstallJobData
	12, // 6: bcsterraformbkprovider.CloudListResponse.data:type_name -> bcsterraformbkprovider.Cloud
	1,  // 7: bcsterraformbkprovider.GetJobDetailRequest.conditions:type_name -> bcsterraformbkprovider.Condition
	23, // 8: bcsterraformbkprovider.GetJobDetailResponse.data:type_name -> bcsterraformbkprovider.JobInfo
	26, // 9: bcsterraformbkprovider.JobInfo.list:type_name -> bcsterraformbkprovider.List
	24, // 10: bcsterraformbkprovider.JobInfo.statistics:type_name -> bcsterraformbkprovider.Statistics
	25, // 11: bcsterraformbkprovider.JobInfo.meta:type_name -> bcsterraformbkprovider.Meta
	0,  // 12: bcsterraformbkprovider.BcsTerraformBkProvider.InstallJob:input_type -> bcsterraformbkprovider.InstallJobRequest
	2,  // 13: bcsterraformbkprovider.BcsTerraformBkProvider.ListHost:input_type -> bcsterraformbkprovider.ListHostRequest
	6,  // 14: bcsterraformbkprovider.BcsTerraformBkProvider.ListProxyHost:input_type -> bcsterraformbkprovider.ListProxyHostRequest
	13, // 15: bcsterraformbkprovider.BcsTerraformBkProvider.CreateCloud:input_type -> bcsterraformbkprovider.CloudCreateRequest
	19, // 16: bcsterraformbkprovider.BcsTerraformBkProvider.UpdateCloud:input_type -> bcsterraformbkprovider.CloudUpdateRequest
	17, // 17: bcsterraformbkprovider.BcsTerraformBkProvider.ListCloud:input_type -> bcsterraformbkprovider.CloudListRequest
	15, // 18: bcsterraformbkprovider.BcsTerraformBkProvider.DeleteCloud:input_type -> bcsterraformbkprovider.CloudDeleteRequest
	21, // 19: bcsterraformbkprovider.BcsTerraformBkProvider.GetJobDetail:input_type -> bcsterraformbkprovider.GetJobDetailRequest
	10, // 20: bcsterraformbkprovider.BcsTerraformBkProvider.InstallJob:output_type -> bcsterraformbkprovider.InstallJobResponse
	5,  // 21: bcsterraformbkprovider.BcsTerraformBkProvider.ListHost:output_type -> bcsterraformbkprovider.ListHostResponse
	8,  // 22: bcsterraformbkprovider.BcsTerraformBkProvider.ListProxyHost:output_type -> bcsterraformbkprovider.ListProxyHostResponse
	14, // 23: bcsterraformbkprovider.BcsTerraformBkProvider.CreateCloud:output_type -> bcsterraformbkprovider.CloudCreateResponse
	20, // 24: bcsterraformbkprovider.BcsTerraformBkProvider.UpdateCloud:output_type -> bcsterraformbkprovider.CloudUpdateResponse
	18, // 25: bcsterraformbkprovider.BcsTerraformBkProvider.ListCloud:output_type -> bcsterraformbkprovider.CloudListResponse
	16, // 26: bcsterraformbkprovider.BcsTerraformBkProvider.DeleteCloud:output_type -> bcsterraformbkprovider.CloudDeleteResponse
	22, // 27: bcsterraformbkprovider.BcsTerraformBkProvider.GetJobDetail:output_type -> bcsterraformbkprovider.GetJobDetailResponse
	20, // [20:28] is the sub-list for method output_type
	12, // [12:20] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_proto_bcs_terraform_bkprovider_proto_init() }
func file_proto_bcs_terraform_bkprovider_proto_init() {
	if File_proto_bcs_terraform_bkprovider_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHostData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProxyHostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProxyHostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallJobData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cloud); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_terraform_bkprovider_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_bcs_terraform_bkprovider_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_bcs_terraform_bkprovider_proto_goTypes,
		DependencyIndexes: file_proto_bcs_terraform_bkprovider_proto_depIdxs,
		MessageInfos:      file_proto_bcs_terraform_bkprovider_proto_msgTypes,
	}.Build()
	File_proto_bcs_terraform_bkprovider_proto = out.File
	file_proto_bcs_terraform_bkprovider_proto_rawDesc = nil
	file_proto_bcs_terraform_bkprovider_proto_goTypes = nil
	file_proto_bcs_terraform_bkprovider_proto_depIdxs = nil
}
