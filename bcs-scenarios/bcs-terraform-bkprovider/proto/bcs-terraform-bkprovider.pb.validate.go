// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/bcs-terraform-bkprovider.proto

package bcsterraformbkprovider

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on InstallJobRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstallJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallJobRequestMultiError, or nil if none found.
func (m *InstallJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobType

	for idx, item := range m.GetHosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstallJobRequestValidationError{
						field:  fmt.Sprintf("Hosts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstallJobRequestValidationError{
						field:  fmt.Sprintf("Hosts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstallJobRequestValidationError{
					field:  fmt.Sprintf("Hosts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InstallJobRequestMultiError(errors)
	}

	return nil
}

// InstallJobRequestMultiError is an error wrapping multiple validation errors
// returned by InstallJobRequest.ValidateAll() if the designated constraints
// aren't met.
type InstallJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallJobRequestMultiError) AllErrors() []error { return m }

// InstallJobRequestValidationError is the validation error returned by
// InstallJobRequest.Validate if the designated constraints aren't met.
type InstallJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallJobRequestValidationError) ErrorName() string {
	return "InstallJobRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstallJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallJobRequestValidationError{}

// Validate checks the field values on Condition with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Condition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Condition with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConditionMultiError, or nil
// if none found.
func (m *Condition) ValidateAll() error {
	return m.validate(true)
}

func (m *Condition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return ConditionMultiError(errors)
	}

	return nil
}

// ConditionMultiError is an error wrapping multiple validation errors returned
// by Condition.ValidateAll() if the designated constraints aren't met.
type ConditionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConditionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConditionMultiError) AllErrors() []error { return m }

// ConditionValidationError is the validation error returned by
// Condition.Validate if the designated constraints aren't met.
type ConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConditionValidationError) ErrorName() string { return "ConditionValidationError" }

// Error satisfies the builtin error interface
func (e ConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConditionValidationError{}

// Validate checks the field values on ListHostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHostRequestMultiError, or nil if none found.
func (m *ListHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConditions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListHostRequestValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListHostRequestValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListHostRequestValidationError{
					field:  fmt.Sprintf("Conditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for Pagesize

	if len(errors) > 0 {
		return ListHostRequestMultiError(errors)
	}

	return nil
}

// ListHostRequestMultiError is an error wrapping multiple validation errors
// returned by ListHostRequest.ValidateAll() if the designated constraints
// aren't met.
type ListHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHostRequestMultiError) AllErrors() []error { return m }

// ListHostRequestValidationError is the validation error returned by
// ListHostRequest.Validate if the designated constraints aren't met.
type ListHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHostRequestValidationError) ErrorName() string { return "ListHostRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHostRequestValidationError{}

// Validate checks the field values on HostInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HostInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HostInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HostInfoMultiError, or nil
// if none found.
func (m *HostInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *HostInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BkCloudId

	// no validation rules for BkBizId

	// no validation rules for BkHostId

	// no validation rules for BkHostName

	// no validation rules for BkAddressing

	// no validation rules for OsType

	// no validation rules for InnerIp

	// no validation rules for InnerIpv6

	// no validation rules for OuterIp

	// no validation rules for OuterIpv6

	// no validation rules for ApId

	// no validation rules for InstallChannelId

	// no validation rules for LoginIp

	// no validation rules for DataIp

	// no validation rules for Status

	// no validation rules for Version

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for IsManual

	// no validation rules for StatusDisplay

	// no validation rules for BkCloudName

	// no validation rules for InstallChannelName

	// no validation rules for BkBizName

	// no validation rules for OperatePermission

	if len(errors) > 0 {
		return HostInfoMultiError(errors)
	}

	return nil
}

// HostInfoMultiError is an error wrapping multiple validation errors returned
// by HostInfo.ValidateAll() if the designated constraints aren't met.
type HostInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HostInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HostInfoMultiError) AllErrors() []error { return m }

// HostInfoValidationError is the validation error returned by
// HostInfo.Validate if the designated constraints aren't met.
type HostInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HostInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HostInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HostInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HostInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HostInfoValidationError) ErrorName() string { return "HostInfoValidationError" }

// Error satisfies the builtin error interface
func (e HostInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHostInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HostInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HostInfoValidationError{}

// Validate checks the field values on ListHostData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListHostData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHostData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListHostDataMultiError, or
// nil if none found.
func (m *ListHostData) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHostData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListHostDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListHostDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListHostDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListHostDataMultiError(errors)
	}

	return nil
}

// ListHostDataMultiError is an error wrapping multiple validation errors
// returned by ListHostData.ValidateAll() if the designated constraints aren't met.
type ListHostDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHostDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHostDataMultiError) AllErrors() []error { return m }

// ListHostDataValidationError is the validation error returned by
// ListHostData.Validate if the designated constraints aren't met.
type ListHostDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHostDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHostDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHostDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHostDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHostDataValidationError) ErrorName() string { return "ListHostDataValidationError" }

// Error satisfies the builtin error interface
func (e ListHostDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHostData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHostDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHostDataValidationError{}

// Validate checks the field values on ListHostResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListHostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHostResponseMultiError, or nil if none found.
func (m *ListHostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListHostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListHostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListHostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListHostResponseMultiError(errors)
	}

	return nil
}

// ListHostResponseMultiError is an error wrapping multiple validation errors
// returned by ListHostResponse.ValidateAll() if the designated constraints
// aren't met.
type ListHostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHostResponseMultiError) AllErrors() []error { return m }

// ListHostResponseValidationError is the validation error returned by
// ListHostResponse.Validate if the designated constraints aren't met.
type ListHostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHostResponseValidationError) ErrorName() string { return "ListHostResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListHostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHostResponseValidationError{}

// Validate checks the field values on ListProxyHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProxyHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProxyHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProxyHostRequestMultiError, or nil if none found.
func (m *ListProxyHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProxyHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BkCloudId

	if len(errors) > 0 {
		return ListProxyHostRequestMultiError(errors)
	}

	return nil
}

// ListProxyHostRequestMultiError is an error wrapping multiple validation
// errors returned by ListProxyHostRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProxyHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProxyHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProxyHostRequestMultiError) AllErrors() []error { return m }

// ListProxyHostRequestValidationError is the validation error returned by
// ListProxyHostRequest.Validate if the designated constraints aren't met.
type ListProxyHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProxyHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProxyHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProxyHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProxyHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProxyHostRequestValidationError) ErrorName() string {
	return "ListProxyHostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProxyHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProxyHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProxyHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProxyHostRequestValidationError{}

// Validate checks the field values on ProxyHost with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProxyHost) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProxyHost with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProxyHostMultiError, or nil
// if none found.
func (m *ProxyHost) ValidateAll() error {
	return m.validate(true)
}

func (m *ProxyHost) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BkCloudId

	// no validation rules for BkHostId

	// no validation rules for BkBizId

	// no validation rules for InnerIp

	// no validation rules for InnerIpv6

	// no validation rules for OuterIp

	// no validation rules for OuterIpv6

	// no validation rules for LoginIp

	// no validation rules for DataIp

	// no validation rules for ApId

	// no validation rules for ApName

	// no validation rules for Status

	// no validation rules for Version

	// no validation rules for Port

	if len(errors) > 0 {
		return ProxyHostMultiError(errors)
	}

	return nil
}

// ProxyHostMultiError is an error wrapping multiple validation errors returned
// by ProxyHost.ValidateAll() if the designated constraints aren't met.
type ProxyHostMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProxyHostMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProxyHostMultiError) AllErrors() []error { return m }

// ProxyHostValidationError is the validation error returned by
// ProxyHost.Validate if the designated constraints aren't met.
type ProxyHostValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProxyHostValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProxyHostValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProxyHostValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProxyHostValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProxyHostValidationError) ErrorName() string { return "ProxyHostValidationError" }

// Error satisfies the builtin error interface
func (e ProxyHostValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProxyHost.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProxyHostValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProxyHostValidationError{}

// Validate checks the field values on ListProxyHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProxyHostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProxyHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProxyHostResponseMultiError, or nil if none found.
func (m *ListProxyHostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProxyHostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProxyHostResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProxyHostResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProxyHostResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProxyHostResponseMultiError(errors)
	}

	return nil
}

// ListProxyHostResponseMultiError is an error wrapping multiple validation
// errors returned by ListProxyHostResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProxyHostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProxyHostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProxyHostResponseMultiError) AllErrors() []error { return m }

// ListProxyHostResponseValidationError is the validation error returned by
// ListProxyHostResponse.Validate if the designated constraints aren't met.
type ListProxyHostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProxyHostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProxyHostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProxyHostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProxyHostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProxyHostResponseValidationError) ErrorName() string {
	return "ListProxyHostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProxyHostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProxyHostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProxyHostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProxyHostResponseValidationError{}

// Validate checks the field values on InstallHost with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InstallHost) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallHost with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InstallHostMultiError, or
// nil if none found.
func (m *InstallHost) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallHost) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BkCloudId

	// no validation rules for BkBizId

	// no validation rules for BkHostId

	// no validation rules for OsType

	// no validation rules for InnerIp

	// no validation rules for OuterIp

	// no validation rules for LoginIp

	// no validation rules for Account

	// no validation rules for Port

	// no validation rules for AuthType

	// no validation rules for Password

	// no validation rules for ApId

	// no validation rules for Key

	if len(errors) > 0 {
		return InstallHostMultiError(errors)
	}

	return nil
}

// InstallHostMultiError is an error wrapping multiple validation errors
// returned by InstallHost.ValidateAll() if the designated constraints aren't met.
type InstallHostMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallHostMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallHostMultiError) AllErrors() []error { return m }

// InstallHostValidationError is the validation error returned by
// InstallHost.Validate if the designated constraints aren't met.
type InstallHostValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallHostValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallHostValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallHostValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallHostValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallHostValidationError) ErrorName() string { return "InstallHostValidationError" }

// Error satisfies the builtin error interface
func (e InstallHostValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallHost.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallHostValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallHostValidationError{}

// Validate checks the field values on InstallJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstallJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallJobResponseMultiError, or nil if none found.
func (m *InstallJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstallJobResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstallJobResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstallJobResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstallJobResponseMultiError(errors)
	}

	return nil
}

// InstallJobResponseMultiError is an error wrapping multiple validation errors
// returned by InstallJobResponse.ValidateAll() if the designated constraints
// aren't met.
type InstallJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallJobResponseMultiError) AllErrors() []error { return m }

// InstallJobResponseValidationError is the validation error returned by
// InstallJobResponse.Validate if the designated constraints aren't met.
type InstallJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallJobResponseValidationError) ErrorName() string {
	return "InstallJobResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InstallJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallJobResponseValidationError{}

// Validate checks the field values on InstallJobData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InstallJobData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallJobData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InstallJobDataMultiError,
// or nil if none found.
func (m *InstallJobData) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallJobData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	if len(errors) > 0 {
		return InstallJobDataMultiError(errors)
	}

	return nil
}

// InstallJobDataMultiError is an error wrapping multiple validation errors
// returned by InstallJobData.ValidateAll() if the designated constraints
// aren't met.
type InstallJobDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallJobDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallJobDataMultiError) AllErrors() []error { return m }

// InstallJobDataValidationError is the validation error returned by
// InstallJobData.Validate if the designated constraints aren't met.
type InstallJobDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallJobDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallJobDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallJobDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallJobDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallJobDataValidationError) ErrorName() string { return "InstallJobDataValidationError" }

// Error satisfies the builtin error interface
func (e InstallJobDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallJobData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallJobDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallJobDataValidationError{}

// Validate checks the field values on Cloud with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Cloud) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Cloud with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CloudMultiError, or nil if none found.
func (m *Cloud) ValidateAll() error {
	return m.validate(true)
}

func (m *Cloud) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BkCloudId

	// no validation rules for BkCloudName

	// no validation rules for Isp

	// no validation rules for ApId

	if len(errors) > 0 {
		return CloudMultiError(errors)
	}

	return nil
}

// CloudMultiError is an error wrapping multiple validation errors returned by
// Cloud.ValidateAll() if the designated constraints aren't met.
type CloudMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudMultiError) AllErrors() []error { return m }

// CloudValidationError is the validation error returned by Cloud.Validate if
// the designated constraints aren't met.
type CloudValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudValidationError) ErrorName() string { return "CloudValidationError" }

// Error satisfies the builtin error interface
func (e CloudValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloud.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudValidationError{}

// Validate checks the field values on CloudCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudCreateRequestMultiError, or nil if none found.
func (m *CloudCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BkCloudName

	// no validation rules for Isp

	// no validation rules for ApId

	if len(errors) > 0 {
		return CloudCreateRequestMultiError(errors)
	}

	return nil
}

// CloudCreateRequestMultiError is an error wrapping multiple validation errors
// returned by CloudCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type CloudCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudCreateRequestMultiError) AllErrors() []error { return m }

// CloudCreateRequestValidationError is the validation error returned by
// CloudCreateRequest.Validate if the designated constraints aren't met.
type CloudCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudCreateRequestValidationError) ErrorName() string {
	return "CloudCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudCreateRequestValidationError{}

// Validate checks the field values on CloudCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudCreateResponseMultiError, or nil if none found.
func (m *CloudCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Data

	if len(errors) > 0 {
		return CloudCreateResponseMultiError(errors)
	}

	return nil
}

// CloudCreateResponseMultiError is an error wrapping multiple validation
// errors returned by CloudCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type CloudCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudCreateResponseMultiError) AllErrors() []error { return m }

// CloudCreateResponseValidationError is the validation error returned by
// CloudCreateResponse.Validate if the designated constraints aren't met.
type CloudCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudCreateResponseValidationError) ErrorName() string {
	return "CloudCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloudCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudCreateResponseValidationError{}

// Validate checks the field values on CloudDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudDeleteRequestMultiError, or nil if none found.
func (m *CloudDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BkCloudId

	if len(errors) > 0 {
		return CloudDeleteRequestMultiError(errors)
	}

	return nil
}

// CloudDeleteRequestMultiError is an error wrapping multiple validation errors
// returned by CloudDeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type CloudDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudDeleteRequestMultiError) AllErrors() []error { return m }

// CloudDeleteRequestValidationError is the validation error returned by
// CloudDeleteRequest.Validate if the designated constraints aren't met.
type CloudDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudDeleteRequestValidationError) ErrorName() string {
	return "CloudDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudDeleteRequestValidationError{}

// Validate checks the field values on CloudDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudDeleteResponseMultiError, or nil if none found.
func (m *CloudDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return CloudDeleteResponseMultiError(errors)
	}

	return nil
}

// CloudDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by CloudDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type CloudDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudDeleteResponseMultiError) AllErrors() []error { return m }

// CloudDeleteResponseValidationError is the validation error returned by
// CloudDeleteResponse.Validate if the designated constraints aren't met.
type CloudDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudDeleteResponseValidationError) ErrorName() string {
	return "CloudDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloudDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudDeleteResponseValidationError{}

// Validate checks the field values on CloudListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CloudListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudListRequestMultiError, or nil if none found.
func (m *CloudListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CloudListRequestMultiError(errors)
	}

	return nil
}

// CloudListRequestMultiError is an error wrapping multiple validation errors
// returned by CloudListRequest.ValidateAll() if the designated constraints
// aren't met.
type CloudListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudListRequestMultiError) AllErrors() []error { return m }

// CloudListRequestValidationError is the validation error returned by
// CloudListRequest.Validate if the designated constraints aren't met.
type CloudListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudListRequestValidationError) ErrorName() string { return "CloudListRequestValidationError" }

// Error satisfies the builtin error interface
func (e CloudListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudListRequestValidationError{}

// Validate checks the field values on CloudListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CloudListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudListResponseMultiError, or nil if none found.
func (m *CloudListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CloudListResponseMultiError(errors)
	}

	return nil
}

// CloudListResponseMultiError is an error wrapping multiple validation errors
// returned by CloudListResponse.ValidateAll() if the designated constraints
// aren't met.
type CloudListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudListResponseMultiError) AllErrors() []error { return m }

// CloudListResponseValidationError is the validation error returned by
// CloudListResponse.Validate if the designated constraints aren't met.
type CloudListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudListResponseValidationError) ErrorName() string {
	return "CloudListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloudListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudListResponseValidationError{}

// Validate checks the field values on CloudUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudUpdateRequestMultiError, or nil if none found.
func (m *CloudUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BkCloudId

	// no validation rules for BkCloudName

	// no validation rules for Isp

	// no validation rules for ApId

	if len(errors) > 0 {
		return CloudUpdateRequestMultiError(errors)
	}

	return nil
}

// CloudUpdateRequestMultiError is an error wrapping multiple validation errors
// returned by CloudUpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type CloudUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudUpdateRequestMultiError) AllErrors() []error { return m }

// CloudUpdateRequestValidationError is the validation error returned by
// CloudUpdateRequest.Validate if the designated constraints aren't met.
type CloudUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudUpdateRequestValidationError) ErrorName() string {
	return "CloudUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudUpdateRequestValidationError{}

// Validate checks the field values on CloudUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudUpdateResponseMultiError, or nil if none found.
func (m *CloudUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return CloudUpdateResponseMultiError(errors)
	}

	return nil
}

// CloudUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by CloudUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type CloudUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudUpdateResponseMultiError) AllErrors() []error { return m }

// CloudUpdateResponseValidationError is the validation error returned by
// CloudUpdateResponse.Validate if the designated constraints aren't met.
type CloudUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudUpdateResponseValidationError) ErrorName() string {
	return "CloudUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloudUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudUpdateResponseValidationError{}

// Validate checks the field values on GetJobDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJobDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobDetailRequestMultiError, or nil if none found.
func (m *GetJobDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConditions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetJobDetailRequestValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetJobDetailRequestValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetJobDetailRequestValidationError{
					field:  fmt.Sprintf("Conditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for Pagesize

	// no validation rules for JobId

	if len(errors) > 0 {
		return GetJobDetailRequestMultiError(errors)
	}

	return nil
}

// GetJobDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetJobDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetJobDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobDetailRequestMultiError) AllErrors() []error { return m }

// GetJobDetailRequestValidationError is the validation error returned by
// GetJobDetailRequest.Validate if the designated constraints aren't met.
type GetJobDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobDetailRequestValidationError) ErrorName() string {
	return "GetJobDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobDetailRequestValidationError{}

// Validate checks the field values on GetJobDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJobDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobDetailResponseMultiError, or nil if none found.
func (m *GetJobDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetJobDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetJobDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetJobDetailResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetJobDetailResponseMultiError(errors)
	}

	return nil
}

// GetJobDetailResponseMultiError is an error wrapping multiple validation
// errors returned by GetJobDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type GetJobDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobDetailResponseMultiError) AllErrors() []error { return m }

// GetJobDetailResponseValidationError is the validation error returned by
// GetJobDetailResponse.Validate if the designated constraints aren't met.
type GetJobDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobDetailResponseValidationError) ErrorName() string {
	return "GetJobDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobDetailResponseValidationError{}

// Validate checks the field values on JobInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in JobInfoMultiError, or nil if none found.
func (m *JobInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *JobInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	// no validation rules for CreatedBy

	// no validation rules for JobType

	// no validation rules for JobTypeDisplay

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobInfoValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobInfoValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobInfoValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetStatistics()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobInfoValidationError{
					field:  "Statistics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobInfoValidationError{
					field:  "Statistics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatistics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobInfoValidationError{
				field:  "Statistics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for EndTime

	// no validation rules for StartTime

	// no validation rules for CostTime

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobInfoValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobInfoValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobInfoValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JobInfoMultiError(errors)
	}

	return nil
}

// JobInfoMultiError is an error wrapping multiple validation errors returned
// by JobInfo.ValidateAll() if the designated constraints aren't met.
type JobInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobInfoMultiError) AllErrors() []error { return m }

// JobInfoValidationError is the validation error returned by JobInfo.Validate
// if the designated constraints aren't met.
type JobInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobInfoValidationError) ErrorName() string { return "JobInfoValidationError" }

// Error satisfies the builtin error interface
func (e JobInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobInfoValidationError{}

// Validate checks the field values on Statistics with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Statistics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Statistics with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatisticsMultiError, or
// nil if none found.
func (m *Statistics) ValidateAll() error {
	return m.validate(true)
}

func (m *Statistics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCount

	// no validation rules for FailedCount

	// no validation rules for IgnoredCount

	// no validation rules for PendingCount

	// no validation rules for RunningCount

	// no validation rules for SuccessCount

	if len(errors) > 0 {
		return StatisticsMultiError(errors)
	}

	return nil
}

// StatisticsMultiError is an error wrapping multiple validation errors
// returned by Statistics.ValidateAll() if the designated constraints aren't met.
type StatisticsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatisticsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatisticsMultiError) AllErrors() []error { return m }

// StatisticsValidationError is the validation error returned by
// Statistics.Validate if the designated constraints aren't met.
type StatisticsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatisticsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatisticsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatisticsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatisticsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatisticsValidationError) ErrorName() string { return "StatisticsValidationError" }

// Error satisfies the builtin error interface
func (e StatisticsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatistics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatisticsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatisticsValidationError{}

// Validate checks the field values on Meta with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Meta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Meta with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MetaMultiError, or nil if none found.
func (m *Meta) ValidateAll() error {
	return m.validate(true)
}

func (m *Meta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for StepType

	// no validation rules for OpType

	// no validation rules for OpTypeDisplay

	// no validation rules for StepTypeDisplay

	// no validation rules for Name

	// no validation rules for Category

	// no validation rules for PluginName

	if len(errors) > 0 {
		return MetaMultiError(errors)
	}

	return nil
}

// MetaMultiError is an error wrapping multiple validation errors returned by
// Meta.ValidateAll() if the designated constraints aren't met.
type MetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetaMultiError) AllErrors() []error { return m }

// MetaValidationError is the validation error returned by Meta.Validate if the
// designated constraints aren't met.
type MetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetaValidationError) ErrorName() string { return "MetaValidationError" }

// Error satisfies the builtin error interface
func (e MetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetaValidationError{}

// Validate checks the field values on List with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on List with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ListMultiError, or nil if none found.
func (m *List) ValidateAll() error {
	return m.validate(true)
}

func (m *List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FilterHost

	// no validation rules for BkHostId

	// no validation rules for Ip

	// no validation rules for InnerIp

	// no validation rules for InnerIpv6

	// no validation rules for BkCloudId

	// no validation rules for BkCloudName

	// no validation rules for BkBizId

	// no validation rules for BkBizName

	// no validation rules for JobId

	// no validation rules for Status

	// no validation rules for StatusDisplay

	if len(errors) > 0 {
		return ListMultiError(errors)
	}

	return nil
}

// ListMultiError is an error wrapping multiple validation errors returned by
// List.ValidateAll() if the designated constraints aren't met.
type ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMultiError) AllErrors() []error { return m }

// ListValidationError is the validation error returned by List.Validate if the
// designated constraints aren't met.
type ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListValidationError) ErrorName() string { return "ListValidationError" }

// Error satisfies the builtin error interface
func (e ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListValidationError{}
