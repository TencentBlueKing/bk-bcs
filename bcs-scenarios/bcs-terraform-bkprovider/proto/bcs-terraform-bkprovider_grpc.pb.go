// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: proto/bcs-terraform-bkprovider.proto

package bcsterraformbkprovider

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BcsTerraformBkProvider_InstallJob_FullMethodName    = "/bcsterraformbkprovider.BcsTerraformBkProvider/InstallJob"
	BcsTerraformBkProvider_ListHost_FullMethodName      = "/bcsterraformbkprovider.BcsTerraformBkProvider/ListHost"
	BcsTerraformBkProvider_ListProxyHost_FullMethodName = "/bcsterraformbkprovider.BcsTerraformBkProvider/ListProxyHost"
	BcsTerraformBkProvider_CreateCloud_FullMethodName   = "/bcsterraformbkprovider.BcsTerraformBkProvider/CreateCloud"
	BcsTerraformBkProvider_UpdateCloud_FullMethodName   = "/bcsterraformbkprovider.BcsTerraformBkProvider/UpdateCloud"
	BcsTerraformBkProvider_ListCloud_FullMethodName     = "/bcsterraformbkprovider.BcsTerraformBkProvider/ListCloud"
	BcsTerraformBkProvider_DeleteCloud_FullMethodName   = "/bcsterraformbkprovider.BcsTerraformBkProvider/DeleteCloud"
	BcsTerraformBkProvider_GetJobDetail_FullMethodName  = "/bcsterraformbkprovider.BcsTerraformBkProvider/GetJobDetail"
)

// BcsTerraformBkProviderClient is the client API for BcsTerraformBkProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BcsTerraformBkProviderClient interface {
	InstallJob(ctx context.Context, in *InstallJobRequest, opts ...grpc.CallOption) (*InstallJobResponse, error)
	ListHost(ctx context.Context, in *ListHostRequest, opts ...grpc.CallOption) (*ListHostResponse, error)
	ListProxyHost(ctx context.Context, in *ListProxyHostRequest, opts ...grpc.CallOption) (*ListProxyHostResponse, error)
	CreateCloud(ctx context.Context, in *CloudCreateRequest, opts ...grpc.CallOption) (*CloudCreateResponse, error)
	UpdateCloud(ctx context.Context, in *CloudUpdateRequest, opts ...grpc.CallOption) (*CloudUpdateResponse, error)
	ListCloud(ctx context.Context, in *CloudListRequest, opts ...grpc.CallOption) (*CloudListResponse, error)
	DeleteCloud(ctx context.Context, in *CloudDeleteRequest, opts ...grpc.CallOption) (*CloudDeleteResponse, error)
	GetJobDetail(ctx context.Context, in *GetJobDetailRequest, opts ...grpc.CallOption) (*GetJobDetailResponse, error)
}

type bcsTerraformBkProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewBcsTerraformBkProviderClient(cc grpc.ClientConnInterface) BcsTerraformBkProviderClient {
	return &bcsTerraformBkProviderClient{cc}
}

func (c *bcsTerraformBkProviderClient) InstallJob(ctx context.Context, in *InstallJobRequest, opts ...grpc.CallOption) (*InstallJobResponse, error) {
	out := new(InstallJobResponse)
	err := c.cc.Invoke(ctx, BcsTerraformBkProvider_InstallJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsTerraformBkProviderClient) ListHost(ctx context.Context, in *ListHostRequest, opts ...grpc.CallOption) (*ListHostResponse, error) {
	out := new(ListHostResponse)
	err := c.cc.Invoke(ctx, BcsTerraformBkProvider_ListHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsTerraformBkProviderClient) ListProxyHost(ctx context.Context, in *ListProxyHostRequest, opts ...grpc.CallOption) (*ListProxyHostResponse, error) {
	out := new(ListProxyHostResponse)
	err := c.cc.Invoke(ctx, BcsTerraformBkProvider_ListProxyHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsTerraformBkProviderClient) CreateCloud(ctx context.Context, in *CloudCreateRequest, opts ...grpc.CallOption) (*CloudCreateResponse, error) {
	out := new(CloudCreateResponse)
	err := c.cc.Invoke(ctx, BcsTerraformBkProvider_CreateCloud_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsTerraformBkProviderClient) UpdateCloud(ctx context.Context, in *CloudUpdateRequest, opts ...grpc.CallOption) (*CloudUpdateResponse, error) {
	out := new(CloudUpdateResponse)
	err := c.cc.Invoke(ctx, BcsTerraformBkProvider_UpdateCloud_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsTerraformBkProviderClient) ListCloud(ctx context.Context, in *CloudListRequest, opts ...grpc.CallOption) (*CloudListResponse, error) {
	out := new(CloudListResponse)
	err := c.cc.Invoke(ctx, BcsTerraformBkProvider_ListCloud_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsTerraformBkProviderClient) DeleteCloud(ctx context.Context, in *CloudDeleteRequest, opts ...grpc.CallOption) (*CloudDeleteResponse, error) {
	out := new(CloudDeleteResponse)
	err := c.cc.Invoke(ctx, BcsTerraformBkProvider_DeleteCloud_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsTerraformBkProviderClient) GetJobDetail(ctx context.Context, in *GetJobDetailRequest, opts ...grpc.CallOption) (*GetJobDetailResponse, error) {
	out := new(GetJobDetailResponse)
	err := c.cc.Invoke(ctx, BcsTerraformBkProvider_GetJobDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BcsTerraformBkProviderServer is the server API for BcsTerraformBkProvider service.
// All implementations must embed UnimplementedBcsTerraformBkProviderServer
// for forward compatibility
type BcsTerraformBkProviderServer interface {
	InstallJob(context.Context, *InstallJobRequest) (*InstallJobResponse, error)
	ListHost(context.Context, *ListHostRequest) (*ListHostResponse, error)
	ListProxyHost(context.Context, *ListProxyHostRequest) (*ListProxyHostResponse, error)
	CreateCloud(context.Context, *CloudCreateRequest) (*CloudCreateResponse, error)
	UpdateCloud(context.Context, *CloudUpdateRequest) (*CloudUpdateResponse, error)
	ListCloud(context.Context, *CloudListRequest) (*CloudListResponse, error)
	DeleteCloud(context.Context, *CloudDeleteRequest) (*CloudDeleteResponse, error)
	GetJobDetail(context.Context, *GetJobDetailRequest) (*GetJobDetailResponse, error)
	mustEmbedUnimplementedBcsTerraformBkProviderServer()
}

// UnimplementedBcsTerraformBkProviderServer must be embedded to have forward compatible implementations.
type UnimplementedBcsTerraformBkProviderServer struct {
}

func (UnimplementedBcsTerraformBkProviderServer) InstallJob(context.Context, *InstallJobRequest) (*InstallJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallJob not implemented")
}
func (UnimplementedBcsTerraformBkProviderServer) ListHost(context.Context, *ListHostRequest) (*ListHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHost not implemented")
}
func (UnimplementedBcsTerraformBkProviderServer) ListProxyHost(context.Context, *ListProxyHostRequest) (*ListProxyHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProxyHost not implemented")
}
func (UnimplementedBcsTerraformBkProviderServer) CreateCloud(context.Context, *CloudCreateRequest) (*CloudCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloud not implemented")
}
func (UnimplementedBcsTerraformBkProviderServer) UpdateCloud(context.Context, *CloudUpdateRequest) (*CloudUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloud not implemented")
}
func (UnimplementedBcsTerraformBkProviderServer) ListCloud(context.Context, *CloudListRequest) (*CloudListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloud not implemented")
}
func (UnimplementedBcsTerraformBkProviderServer) DeleteCloud(context.Context, *CloudDeleteRequest) (*CloudDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloud not implemented")
}
func (UnimplementedBcsTerraformBkProviderServer) GetJobDetail(context.Context, *GetJobDetailRequest) (*GetJobDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobDetail not implemented")
}
func (UnimplementedBcsTerraformBkProviderServer) mustEmbedUnimplementedBcsTerraformBkProviderServer() {
}

// UnsafeBcsTerraformBkProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BcsTerraformBkProviderServer will
// result in compilation errors.
type UnsafeBcsTerraformBkProviderServer interface {
	mustEmbedUnimplementedBcsTerraformBkProviderServer()
}

func RegisterBcsTerraformBkProviderServer(s grpc.ServiceRegistrar, srv BcsTerraformBkProviderServer) {
	s.RegisterService(&BcsTerraformBkProvider_ServiceDesc, srv)
}

func _BcsTerraformBkProvider_InstallJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsTerraformBkProviderServer).InstallJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsTerraformBkProvider_InstallJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsTerraformBkProviderServer).InstallJob(ctx, req.(*InstallJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsTerraformBkProvider_ListHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsTerraformBkProviderServer).ListHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsTerraformBkProvider_ListHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsTerraformBkProviderServer).ListHost(ctx, req.(*ListHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsTerraformBkProvider_ListProxyHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProxyHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsTerraformBkProviderServer).ListProxyHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsTerraformBkProvider_ListProxyHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsTerraformBkProviderServer).ListProxyHost(ctx, req.(*ListProxyHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsTerraformBkProvider_CreateCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsTerraformBkProviderServer).CreateCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsTerraformBkProvider_CreateCloud_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsTerraformBkProviderServer).CreateCloud(ctx, req.(*CloudCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsTerraformBkProvider_UpdateCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsTerraformBkProviderServer).UpdateCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsTerraformBkProvider_UpdateCloud_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsTerraformBkProviderServer).UpdateCloud(ctx, req.(*CloudUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsTerraformBkProvider_ListCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsTerraformBkProviderServer).ListCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsTerraformBkProvider_ListCloud_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsTerraformBkProviderServer).ListCloud(ctx, req.(*CloudListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsTerraformBkProvider_DeleteCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsTerraformBkProviderServer).DeleteCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsTerraformBkProvider_DeleteCloud_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsTerraformBkProviderServer).DeleteCloud(ctx, req.(*CloudDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsTerraformBkProvider_GetJobDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsTerraformBkProviderServer).GetJobDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcsTerraformBkProvider_GetJobDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsTerraformBkProviderServer).GetJobDetail(ctx, req.(*GetJobDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BcsTerraformBkProvider_ServiceDesc is the grpc.ServiceDesc for BcsTerraformBkProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BcsTerraformBkProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bcsterraformbkprovider.BcsTerraformBkProvider",
	HandlerType: (*BcsTerraformBkProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstallJob",
			Handler:    _BcsTerraformBkProvider_InstallJob_Handler,
		},
		{
			MethodName: "ListHost",
			Handler:    _BcsTerraformBkProvider_ListHost_Handler,
		},
		{
			MethodName: "ListProxyHost",
			Handler:    _BcsTerraformBkProvider_ListProxyHost_Handler,
		},
		{
			MethodName: "CreateCloud",
			Handler:    _BcsTerraformBkProvider_CreateCloud_Handler,
		},
		{
			MethodName: "UpdateCloud",
			Handler:    _BcsTerraformBkProvider_UpdateCloud_Handler,
		},
		{
			MethodName: "ListCloud",
			Handler:    _BcsTerraformBkProvider_ListCloud_Handler,
		},
		{
			MethodName: "DeleteCloud",
			Handler:    _BcsTerraformBkProvider_DeleteCloud_Handler,
		},
		{
			MethodName: "GetJobDetail",
			Handler:    _BcsTerraformBkProvider_GetJobDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bcs-terraform-bkprovider.proto",
}
