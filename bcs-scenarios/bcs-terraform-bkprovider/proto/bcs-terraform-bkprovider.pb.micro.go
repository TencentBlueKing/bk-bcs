// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/bcs-terraform-bkprovider.proto

package bcsterraformbkprovider

import (
	fmt "fmt"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for BcsTerraformBkProvider service

func NewBcsTerraformBkProviderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "BcsTerraformBkProvider.InstallJob",
			Path:    []string{"/terraform-bkprovider/v1/install_job"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "BcsTerraformBkProvider.ListHost",
			Path:    []string{"/terraform-bkprovider/v1/list_host"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "BcsTerraformBkProvider.ListProxyHost",
			Path:    []string{"/terraform-bkprovider/v1/list_proxy_host"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "BcsTerraformBkProvider.CreateCloud",
			Path:    []string{"/terraform-bkprovider/v1/cloud"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "BcsTerraformBkProvider.UpdateCloud",
			Path:    []string{"/terraform-bkprovider/v1/cloud"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "BcsTerraformBkProvider.ListCloud",
			Path:    []string{"/terraform-bkprovider/v1/cloud"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "BcsTerraformBkProvider.DeleteCloud",
			Path:    []string{"/terraform-bkprovider/v1/cloud"},
			Method:  []string{"DELETE"},
			Handler: "rpc",
		},
		{
			Name:    "BcsTerraformBkProvider.GetJobDetail",
			Path:    []string{"/terraform-bkprovider/v1/get_job_detail"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
	}
}

// Client API for BcsTerraformBkProvider service

type BcsTerraformBkProviderService interface {
	InstallJob(ctx context.Context, in *InstallJobRequest, opts ...client.CallOption) (*InstallJobResponse, error)
	ListHost(ctx context.Context, in *ListHostRequest, opts ...client.CallOption) (*ListHostResponse, error)
	ListProxyHost(ctx context.Context, in *ListProxyHostRequest, opts ...client.CallOption) (*ListProxyHostResponse, error)
	CreateCloud(ctx context.Context, in *CloudCreateRequest, opts ...client.CallOption) (*CloudCreateResponse, error)
	UpdateCloud(ctx context.Context, in *CloudUpdateRequest, opts ...client.CallOption) (*CloudUpdateResponse, error)
	ListCloud(ctx context.Context, in *CloudListRequest, opts ...client.CallOption) (*CloudListResponse, error)
	DeleteCloud(ctx context.Context, in *CloudDeleteRequest, opts ...client.CallOption) (*CloudDeleteResponse, error)
	GetJobDetail(ctx context.Context, in *GetJobDetailRequest, opts ...client.CallOption) (*GetJobDetailResponse, error)
}

type bcsTerraformBkProviderService struct {
	c    client.Client
	name string
}

func NewBcsTerraformBkProviderService(name string, c client.Client) BcsTerraformBkProviderService {
	return &bcsTerraformBkProviderService{
		c:    c,
		name: name,
	}
}

func (c *bcsTerraformBkProviderService) InstallJob(ctx context.Context, in *InstallJobRequest, opts ...client.CallOption) (*InstallJobResponse, error) {
	req := c.c.NewRequest(c.name, "BcsTerraformBkProvider.InstallJob", in)
	out := new(InstallJobResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsTerraformBkProviderService) ListHost(ctx context.Context, in *ListHostRequest, opts ...client.CallOption) (*ListHostResponse, error) {
	req := c.c.NewRequest(c.name, "BcsTerraformBkProvider.ListHost", in)
	out := new(ListHostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsTerraformBkProviderService) ListProxyHost(ctx context.Context, in *ListProxyHostRequest, opts ...client.CallOption) (*ListProxyHostResponse, error) {
	req := c.c.NewRequest(c.name, "BcsTerraformBkProvider.ListProxyHost", in)
	out := new(ListProxyHostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsTerraformBkProviderService) CreateCloud(ctx context.Context, in *CloudCreateRequest, opts ...client.CallOption) (*CloudCreateResponse, error) {
	req := c.c.NewRequest(c.name, "BcsTerraformBkProvider.CreateCloud", in)
	out := new(CloudCreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsTerraformBkProviderService) UpdateCloud(ctx context.Context, in *CloudUpdateRequest, opts ...client.CallOption) (*CloudUpdateResponse, error) {
	req := c.c.NewRequest(c.name, "BcsTerraformBkProvider.UpdateCloud", in)
	out := new(CloudUpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsTerraformBkProviderService) ListCloud(ctx context.Context, in *CloudListRequest, opts ...client.CallOption) (*CloudListResponse, error) {
	req := c.c.NewRequest(c.name, "BcsTerraformBkProvider.ListCloud", in)
	out := new(CloudListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsTerraformBkProviderService) DeleteCloud(ctx context.Context, in *CloudDeleteRequest, opts ...client.CallOption) (*CloudDeleteResponse, error) {
	req := c.c.NewRequest(c.name, "BcsTerraformBkProvider.DeleteCloud", in)
	out := new(CloudDeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsTerraformBkProviderService) GetJobDetail(ctx context.Context, in *GetJobDetailRequest, opts ...client.CallOption) (*GetJobDetailResponse, error) {
	req := c.c.NewRequest(c.name, "BcsTerraformBkProvider.GetJobDetail", in)
	out := new(GetJobDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BcsTerraformBkProvider service

type BcsTerraformBkProviderHandler interface {
	InstallJob(context.Context, *InstallJobRequest, *InstallJobResponse) error
	ListHost(context.Context, *ListHostRequest, *ListHostResponse) error
	ListProxyHost(context.Context, *ListProxyHostRequest, *ListProxyHostResponse) error
	CreateCloud(context.Context, *CloudCreateRequest, *CloudCreateResponse) error
	UpdateCloud(context.Context, *CloudUpdateRequest, *CloudUpdateResponse) error
	ListCloud(context.Context, *CloudListRequest, *CloudListResponse) error
	DeleteCloud(context.Context, *CloudDeleteRequest, *CloudDeleteResponse) error
	GetJobDetail(context.Context, *GetJobDetailRequest, *GetJobDetailResponse) error
}

func RegisterBcsTerraformBkProviderHandler(s server.Server, hdlr BcsTerraformBkProviderHandler, opts ...server.HandlerOption) error {
	type bcsTerraformBkProvider interface {
		InstallJob(ctx context.Context, in *InstallJobRequest, out *InstallJobResponse) error
		ListHost(ctx context.Context, in *ListHostRequest, out *ListHostResponse) error
		ListProxyHost(ctx context.Context, in *ListProxyHostRequest, out *ListProxyHostResponse) error
		CreateCloud(ctx context.Context, in *CloudCreateRequest, out *CloudCreateResponse) error
		UpdateCloud(ctx context.Context, in *CloudUpdateRequest, out *CloudUpdateResponse) error
		ListCloud(ctx context.Context, in *CloudListRequest, out *CloudListResponse) error
		DeleteCloud(ctx context.Context, in *CloudDeleteRequest, out *CloudDeleteResponse) error
		GetJobDetail(ctx context.Context, in *GetJobDetailRequest, out *GetJobDetailResponse) error
	}
	type BcsTerraformBkProvider struct {
		bcsTerraformBkProvider
	}
	h := &bcsTerraformBkProviderHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsTerraformBkProvider.InstallJob",
		Path:    []string{"/terraform-bkprovider/v1/install_job"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsTerraformBkProvider.ListHost",
		Path:    []string{"/terraform-bkprovider/v1/list_host"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsTerraformBkProvider.ListProxyHost",
		Path:    []string{"/terraform-bkprovider/v1/list_proxy_host"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsTerraformBkProvider.CreateCloud",
		Path:    []string{"/terraform-bkprovider/v1/cloud"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsTerraformBkProvider.UpdateCloud",
		Path:    []string{"/terraform-bkprovider/v1/cloud"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsTerraformBkProvider.ListCloud",
		Path:    []string{"/terraform-bkprovider/v1/cloud"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsTerraformBkProvider.DeleteCloud",
		Path:    []string{"/terraform-bkprovider/v1/cloud"},
		Method:  []string{"DELETE"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "BcsTerraformBkProvider.GetJobDetail",
		Path:    []string{"/terraform-bkprovider/v1/get_job_detail"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&BcsTerraformBkProvider{h}, opts...))
}

type bcsTerraformBkProviderHandler struct {
	BcsTerraformBkProviderHandler
}

func (h *bcsTerraformBkProviderHandler) InstallJob(ctx context.Context, in *InstallJobRequest, out *InstallJobResponse) error {
	return h.BcsTerraformBkProviderHandler.InstallJob(ctx, in, out)
}

func (h *bcsTerraformBkProviderHandler) ListHost(ctx context.Context, in *ListHostRequest, out *ListHostResponse) error {
	return h.BcsTerraformBkProviderHandler.ListHost(ctx, in, out)
}

func (h *bcsTerraformBkProviderHandler) ListProxyHost(ctx context.Context, in *ListProxyHostRequest, out *ListProxyHostResponse) error {
	return h.BcsTerraformBkProviderHandler.ListProxyHost(ctx, in, out)
}

func (h *bcsTerraformBkProviderHandler) CreateCloud(ctx context.Context, in *CloudCreateRequest, out *CloudCreateResponse) error {
	return h.BcsTerraformBkProviderHandler.CreateCloud(ctx, in, out)
}

func (h *bcsTerraformBkProviderHandler) UpdateCloud(ctx context.Context, in *CloudUpdateRequest, out *CloudUpdateResponse) error {
	return h.BcsTerraformBkProviderHandler.UpdateCloud(ctx, in, out)
}

func (h *bcsTerraformBkProviderHandler) ListCloud(ctx context.Context, in *CloudListRequest, out *CloudListResponse) error {
	return h.BcsTerraformBkProviderHandler.ListCloud(ctx, in, out)
}

func (h *bcsTerraformBkProviderHandler) DeleteCloud(ctx context.Context, in *CloudDeleteRequest, out *CloudDeleteResponse) error {
	return h.BcsTerraformBkProviderHandler.DeleteCloud(ctx, in, out)
}

func (h *bcsTerraformBkProviderHandler) GetJobDetail(ctx context.Context, in *GetJobDetailRequest, out *GetJobDetailResponse) error {
	return h.BcsTerraformBkProviderHandler.GetJobDetail(ctx, in, out)
}
