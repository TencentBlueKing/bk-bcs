// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/bcs-gitops-pre-check.proto

package precheck

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GitOpsPreCheckClient is the client API for GitOpsPreCheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitOpsPreCheckClient interface {
	GetMrInfo(ctx context.Context, in *GetMrInfoReq, opts ...grpc.CallOption) (*GetMrInfoRsp, error)
	RecordTaskByPlugin(ctx context.Context, in *PreCheckTask, opts ...grpc.CallOption) (*PreCheckTaskRsp, error)
	GetTaskByID(ctx context.Context, in *GetTaskByIDReq, opts ...grpc.CallOption) (*PreCheckTaskRsp, error)
	UpdateTask(ctx context.Context, in *PreCheckTask, opts ...grpc.CallOption) (*PreCheckTaskRsp, error)
	ListTask(ctx context.Context, in *ListTaskByIDReq, opts ...grpc.CallOption) (*ListPreCheckTaskRsp, error)
}

type gitOpsPreCheckClient struct {
	cc grpc.ClientConnInterface
}

func NewGitOpsPreCheckClient(cc grpc.ClientConnInterface) GitOpsPreCheckClient {
	return &gitOpsPreCheckClient{cc}
}

func (c *gitOpsPreCheckClient) GetMrInfo(ctx context.Context, in *GetMrInfoReq, opts ...grpc.CallOption) (*GetMrInfoRsp, error) {
	out := new(GetMrInfoRsp)
	err := c.cc.Invoke(ctx, "/precheck.GitOpsPreCheck/GetMrInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitOpsPreCheckClient) RecordTaskByPlugin(ctx context.Context, in *PreCheckTask, opts ...grpc.CallOption) (*PreCheckTaskRsp, error) {
	out := new(PreCheckTaskRsp)
	err := c.cc.Invoke(ctx, "/precheck.GitOpsPreCheck/RecordTaskByPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitOpsPreCheckClient) GetTaskByID(ctx context.Context, in *GetTaskByIDReq, opts ...grpc.CallOption) (*PreCheckTaskRsp, error) {
	out := new(PreCheckTaskRsp)
	err := c.cc.Invoke(ctx, "/precheck.GitOpsPreCheck/GetTaskByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitOpsPreCheckClient) UpdateTask(ctx context.Context, in *PreCheckTask, opts ...grpc.CallOption) (*PreCheckTaskRsp, error) {
	out := new(PreCheckTaskRsp)
	err := c.cc.Invoke(ctx, "/precheck.GitOpsPreCheck/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitOpsPreCheckClient) ListTask(ctx context.Context, in *ListTaskByIDReq, opts ...grpc.CallOption) (*ListPreCheckTaskRsp, error) {
	out := new(ListPreCheckTaskRsp)
	err := c.cc.Invoke(ctx, "/precheck.GitOpsPreCheck/ListTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitOpsPreCheckServer is the server API for GitOpsPreCheck service.
// All implementations must embed UnimplementedGitOpsPreCheckServer
// for forward compatibility
type GitOpsPreCheckServer interface {
	GetMrInfo(context.Context, *GetMrInfoReq) (*GetMrInfoRsp, error)
	RecordTaskByPlugin(context.Context, *PreCheckTask) (*PreCheckTaskRsp, error)
	GetTaskByID(context.Context, *GetTaskByIDReq) (*PreCheckTaskRsp, error)
	UpdateTask(context.Context, *PreCheckTask) (*PreCheckTaskRsp, error)
	ListTask(context.Context, *ListTaskByIDReq) (*ListPreCheckTaskRsp, error)
	mustEmbedUnimplementedGitOpsPreCheckServer()
}

// UnimplementedGitOpsPreCheckServer must be embedded to have forward compatible implementations.
type UnimplementedGitOpsPreCheckServer struct {
}

func (UnimplementedGitOpsPreCheckServer) GetMrInfo(context.Context, *GetMrInfoReq) (*GetMrInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMrInfo not implemented")
}
func (UnimplementedGitOpsPreCheckServer) RecordTaskByPlugin(context.Context, *PreCheckTask) (*PreCheckTaskRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordTaskByPlugin not implemented")
}
func (UnimplementedGitOpsPreCheckServer) GetTaskByID(context.Context, *GetTaskByIDReq) (*PreCheckTaskRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskByID not implemented")
}
func (UnimplementedGitOpsPreCheckServer) UpdateTask(context.Context, *PreCheckTask) (*PreCheckTaskRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedGitOpsPreCheckServer) ListTask(context.Context, *ListTaskByIDReq) (*ListPreCheckTaskRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTask not implemented")
}
func (UnimplementedGitOpsPreCheckServer) mustEmbedUnimplementedGitOpsPreCheckServer() {}

// UnsafeGitOpsPreCheckServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitOpsPreCheckServer will
// result in compilation errors.
type UnsafeGitOpsPreCheckServer interface {
	mustEmbedUnimplementedGitOpsPreCheckServer()
}

func RegisterGitOpsPreCheckServer(s grpc.ServiceRegistrar, srv GitOpsPreCheckServer) {
	s.RegisterService(&GitOpsPreCheck_ServiceDesc, srv)
}

func _GitOpsPreCheck_GetMrInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMrInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitOpsPreCheckServer).GetMrInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/precheck.GitOpsPreCheck/GetMrInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitOpsPreCheckServer).GetMrInfo(ctx, req.(*GetMrInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitOpsPreCheck_RecordTaskByPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreCheckTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitOpsPreCheckServer).RecordTaskByPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/precheck.GitOpsPreCheck/RecordTaskByPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitOpsPreCheckServer).RecordTaskByPlugin(ctx, req.(*PreCheckTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitOpsPreCheck_GetTaskByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitOpsPreCheckServer).GetTaskByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/precheck.GitOpsPreCheck/GetTaskByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitOpsPreCheckServer).GetTaskByID(ctx, req.(*GetTaskByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitOpsPreCheck_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreCheckTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitOpsPreCheckServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/precheck.GitOpsPreCheck/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitOpsPreCheckServer).UpdateTask(ctx, req.(*PreCheckTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitOpsPreCheck_ListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitOpsPreCheckServer).ListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/precheck.GitOpsPreCheck/ListTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitOpsPreCheckServer).ListTask(ctx, req.(*ListTaskByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GitOpsPreCheck_ServiceDesc is the grpc.ServiceDesc for GitOpsPreCheck service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GitOpsPreCheck_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "precheck.GitOpsPreCheck",
	HandlerType: (*GitOpsPreCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMrInfo",
			Handler:    _GitOpsPreCheck_GetMrInfo_Handler,
		},
		{
			MethodName: "RecordTaskByPlugin",
			Handler:    _GitOpsPreCheck_RecordTaskByPlugin_Handler,
		},
		{
			MethodName: "GetTaskByID",
			Handler:    _GitOpsPreCheck_GetTaskByID_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _GitOpsPreCheck_UpdateTask_Handler,
		},
		{
			MethodName: "ListTask",
			Handler:    _GitOpsPreCheck_ListTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bcs-gitops-pre-check.proto",
}
