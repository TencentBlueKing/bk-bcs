// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/bcs-gitops-pre-check.proto

package precheck

import (
	fmt "fmt"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GitOpsPreCheck service

func NewGitOpsPreCheckEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "GitOpsPreCheck.GetMrInfo",
			Path:    []string{"/api/v1/precheck/mr/info"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "GitOpsPreCheck.RecordTaskByPlugin",
			Path:    []string{"/api/v1/precheck/record"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "GitOpsPreCheck.GetTaskByID",
			Path:    []string{"/api/v1/precheck/task"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "GitOpsPreCheck.UpdateTask",
			Path:    []string{"/api/v1/precheck/task"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "GitOpsPreCheck.ListTask",
			Path:    []string{"/api/v1/precheck/tasks"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for GitOpsPreCheck service

type GitOpsPreCheckService interface {
	GetMrInfo(ctx context.Context, in *GetMrInfoReq, opts ...client.CallOption) (*GetMrInfoRsp, error)
	RecordTaskByPlugin(ctx context.Context, in *PreCheckTask, opts ...client.CallOption) (*PreCheckTaskRsp, error)
	GetTaskByID(ctx context.Context, in *GetTaskByIDReq, opts ...client.CallOption) (*PreCheckTaskRsp, error)
	UpdateTask(ctx context.Context, in *PreCheckTask, opts ...client.CallOption) (*PreCheckTaskRsp, error)
	ListTask(ctx context.Context, in *ListTaskByIDReq, opts ...client.CallOption) (*ListPreCheckTaskRsp, error)
}

type gitOpsPreCheckService struct {
	c    client.Client
	name string
}

func NewGitOpsPreCheckService(name string, c client.Client) GitOpsPreCheckService {
	return &gitOpsPreCheckService{
		c:    c,
		name: name,
	}
}

func (c *gitOpsPreCheckService) GetMrInfo(ctx context.Context, in *GetMrInfoReq, opts ...client.CallOption) (*GetMrInfoRsp, error) {
	req := c.c.NewRequest(c.name, "GitOpsPreCheck.GetMrInfo", in)
	out := new(GetMrInfoRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitOpsPreCheckService) RecordTaskByPlugin(ctx context.Context, in *PreCheckTask, opts ...client.CallOption) (*PreCheckTaskRsp, error) {
	req := c.c.NewRequest(c.name, "GitOpsPreCheck.RecordTaskByPlugin", in)
	out := new(PreCheckTaskRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitOpsPreCheckService) GetTaskByID(ctx context.Context, in *GetTaskByIDReq, opts ...client.CallOption) (*PreCheckTaskRsp, error) {
	req := c.c.NewRequest(c.name, "GitOpsPreCheck.GetTaskByID", in)
	out := new(PreCheckTaskRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitOpsPreCheckService) UpdateTask(ctx context.Context, in *PreCheckTask, opts ...client.CallOption) (*PreCheckTaskRsp, error) {
	req := c.c.NewRequest(c.name, "GitOpsPreCheck.UpdateTask", in)
	out := new(PreCheckTaskRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitOpsPreCheckService) ListTask(ctx context.Context, in *ListTaskByIDReq, opts ...client.CallOption) (*ListPreCheckTaskRsp, error) {
	req := c.c.NewRequest(c.name, "GitOpsPreCheck.ListTask", in)
	out := new(ListPreCheckTaskRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GitOpsPreCheck service

type GitOpsPreCheckHandler interface {
	GetMrInfo(context.Context, *GetMrInfoReq, *GetMrInfoRsp) error
	RecordTaskByPlugin(context.Context, *PreCheckTask, *PreCheckTaskRsp) error
	GetTaskByID(context.Context, *GetTaskByIDReq, *PreCheckTaskRsp) error
	UpdateTask(context.Context, *PreCheckTask, *PreCheckTaskRsp) error
	ListTask(context.Context, *ListTaskByIDReq, *ListPreCheckTaskRsp) error
}

func RegisterGitOpsPreCheckHandler(s server.Server, hdlr GitOpsPreCheckHandler, opts ...server.HandlerOption) error {
	type gitOpsPreCheck interface {
		GetMrInfo(ctx context.Context, in *GetMrInfoReq, out *GetMrInfoRsp) error
		RecordTaskByPlugin(ctx context.Context, in *PreCheckTask, out *PreCheckTaskRsp) error
		GetTaskByID(ctx context.Context, in *GetTaskByIDReq, out *PreCheckTaskRsp) error
		UpdateTask(ctx context.Context, in *PreCheckTask, out *PreCheckTaskRsp) error
		ListTask(ctx context.Context, in *ListTaskByIDReq, out *ListPreCheckTaskRsp) error
	}
	type GitOpsPreCheck struct {
		gitOpsPreCheck
	}
	h := &gitOpsPreCheckHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "GitOpsPreCheck.GetMrInfo",
		Path:    []string{"/api/v1/precheck/mr/info"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "GitOpsPreCheck.RecordTaskByPlugin",
		Path:    []string{"/api/v1/precheck/record"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "GitOpsPreCheck.GetTaskByID",
		Path:    []string{"/api/v1/precheck/task"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "GitOpsPreCheck.UpdateTask",
		Path:    []string{"/api/v1/precheck/task"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "GitOpsPreCheck.ListTask",
		Path:    []string{"/api/v1/precheck/tasks"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&GitOpsPreCheck{h}, opts...))
}

type gitOpsPreCheckHandler struct {
	GitOpsPreCheckHandler
}

func (h *gitOpsPreCheckHandler) GetMrInfo(ctx context.Context, in *GetMrInfoReq, out *GetMrInfoRsp) error {
	return h.GitOpsPreCheckHandler.GetMrInfo(ctx, in, out)
}

func (h *gitOpsPreCheckHandler) RecordTaskByPlugin(ctx context.Context, in *PreCheckTask, out *PreCheckTaskRsp) error {
	return h.GitOpsPreCheckHandler.RecordTaskByPlugin(ctx, in, out)
}

func (h *gitOpsPreCheckHandler) GetTaskByID(ctx context.Context, in *GetTaskByIDReq, out *PreCheckTaskRsp) error {
	return h.GitOpsPreCheckHandler.GetTaskByID(ctx, in, out)
}

func (h *gitOpsPreCheckHandler) UpdateTask(ctx context.Context, in *PreCheckTask, out *PreCheckTaskRsp) error {
	return h.GitOpsPreCheckHandler.UpdateTask(ctx, in, out)
}

func (h *gitOpsPreCheckHandler) ListTask(ctx context.Context, in *ListTaskByIDReq, out *ListPreCheckTaskRsp) error {
	return h.GitOpsPreCheckHandler.ListTask(ctx, in, out)
}
