// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.19.4
// source: proto/bcs-gitops-pre-check.proto

package precheck

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetMrInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository string `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	MrIID      string `protobuf:"bytes,2,opt,name=mrIID,proto3" json:"mrIID,omitempty"`
}

func (x *GetMrInfoReq) Reset() {
	*x = GetMrInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_gitops_pre_check_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMrInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMrInfoReq) ProtoMessage() {}

func (x *GetMrInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_gitops_pre_check_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMrInfoReq.ProtoReflect.Descriptor instead.
func (*GetMrInfoReq) Descriptor() ([]byte, []int) {
	return file_proto_bcs_gitops_pre_check_proto_rawDescGZIP(), []int{0}
}

func (x *GetMrInfoReq) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *GetMrInfoReq) GetMrIID() string {
	if x != nil {
		return x.MrIID
	}
	return ""
}

type GetMrInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      *uint32     `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message   string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID string      `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Data      *MRInfoData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetMrInfoRsp) Reset() {
	*x = GetMrInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_gitops_pre_check_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMrInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMrInfoRsp) ProtoMessage() {}

func (x *GetMrInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_gitops_pre_check_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMrInfoRsp.ProtoReflect.Descriptor instead.
func (*GetMrInfoRsp) Descriptor() ([]byte, []int) {
	return file_proto_bcs_gitops_pre_check_proto_rawDescGZIP(), []int{1}
}

func (x *GetMrInfoRsp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *GetMrInfoRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetMrInfoRsp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *GetMrInfoRsp) GetData() *MRInfoData {
	if x != nil {
		return x.Data
	}
	return nil
}

type MRInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceBranch string `protobuf:"bytes,1,opt,name=sourceBranch,proto3" json:"sourceBranch,omitempty"`
	TargetBranch string `protobuf:"bytes,2,opt,name=targetBranch,proto3" json:"targetBranch,omitempty"`
	Creator      string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	CreateTime   string `protobuf:"bytes,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string `protobuf:"bytes,5,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Title        string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	MrMessage    string `protobuf:"bytes,7,opt,name=mrMessage,proto3" json:"mrMessage,omitempty"`
	Repository   string `protobuf:"bytes,8,opt,name=repository,proto3" json:"repository,omitempty"`
	SourceCommit string `protobuf:"bytes,9,opt,name=sourceCommit,proto3" json:"sourceCommit,omitempty"`
	TargetCommit string `protobuf:"bytes,10,opt,name=targetCommit,proto3" json:"targetCommit,omitempty"`
	Id           uint32 `protobuf:"varint,11,opt,name=id,proto3" json:"id,omitempty"`
	Iid          uint32 `protobuf:"varint,12,opt,name=iid,proto3" json:"iid,omitempty"`
}

func (x *MRInfoData) Reset() {
	*x = MRInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_gitops_pre_check_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MRInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MRInfoData) ProtoMessage() {}

func (x *MRInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_gitops_pre_check_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MRInfoData.ProtoReflect.Descriptor instead.
func (*MRInfoData) Descriptor() ([]byte, []int) {
	return file_proto_bcs_gitops_pre_check_proto_rawDescGZIP(), []int{2}
}

func (x *MRInfoData) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

func (x *MRInfoData) GetTargetBranch() string {
	if x != nil {
		return x.TargetBranch
	}
	return ""
}

func (x *MRInfoData) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *MRInfoData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *MRInfoData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *MRInfoData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MRInfoData) GetMrMessage() string {
	if x != nil {
		return x.MrMessage
	}
	return ""
}

func (x *MRInfoData) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *MRInfoData) GetSourceCommit() string {
	if x != nil {
		return x.SourceCommit
	}
	return ""
}

func (x *MRInfoData) GetTargetCommit() string {
	if x != nil {
		return x.TargetCommit
	}
	return ""
}

func (x *MRInfoData) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MRInfoData) GetIid() uint32 {
	if x != nil {
		return x.Iid
	}
	return 0
}

type ApplicationDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Finish  *bool                  `protobuf:"varint,1,opt,name=finish,proto3,oneof" json:"finish,omitempty"`
	Detail  []*ResourceCheckDetail `protobuf:"bytes,2,rep,name=detail,proto3" json:"detail,omitempty"`
	Message string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ApplicationDetail) Reset() {
	*x = ApplicationDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_gitops_pre_check_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationDetail) ProtoMessage() {}

func (x *ApplicationDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_gitops_pre_check_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationDetail.ProtoReflect.Descriptor instead.
func (*ApplicationDetail) Descriptor() ([]byte, []int) {
	return file_proto_bcs_gitops_pre_check_proto_rawDescGZIP(), []int{3}
}

func (x *ApplicationDetail) GetFinish() bool {
	if x != nil && x.Finish != nil {
		return *x.Finish
	}
	return false
}

func (x *ApplicationDetail) GetDetail() []*ResourceCheckDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *ApplicationDetail) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ResourceCheckDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Finish       *bool  `protobuf:"varint,1,opt,name=finish,proto3,oneof" json:"finish,omitempty"`
	ResourceType string `protobuf:"bytes,2,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceName string `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ApiVersion   string `protobuf:"bytes,6,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Detail       string `protobuf:"bytes,4,opt,name=detail,proto3" json:"detail,omitempty"`
	Pass         *bool  `protobuf:"varint,5,opt,name=pass,proto3,oneof" json:"pass,omitempty"`
	Cluster      string `protobuf:"bytes,7,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Namespace    string `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *ResourceCheckDetail) Reset() {
	*x = ResourceCheckDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_gitops_pre_check_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceCheckDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceCheckDetail) ProtoMessage() {}

func (x *ResourceCheckDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_gitops_pre_check_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceCheckDetail.ProtoReflect.Descriptor instead.
func (*ResourceCheckDetail) Descriptor() ([]byte, []int) {
	return file_proto_bcs_gitops_pre_check_proto_rawDescGZIP(), []int{4}
}

func (x *ResourceCheckDetail) GetFinish() bool {
	if x != nil && x.Finish != nil {
		return *x.Finish
	}
	return false
}

func (x *ResourceCheckDetail) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ResourceCheckDetail) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *ResourceCheckDetail) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ResourceCheckDetail) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *ResourceCheckDetail) GetPass() bool {
	if x != nil && x.Pass != nil {
		return *x.Pass
	}
	return false
}

func (x *ResourceCheckDetail) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ResourceCheckDetail) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ApplicationCheckDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckDetail map[string]*ApplicationDetail `protobuf:"bytes,1,rep,name=checkDetail,proto3" json:"checkDetail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ApplicationCheckDetail) Reset() {
	*x = ApplicationCheckDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_gitops_pre_check_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationCheckDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationCheckDetail) ProtoMessage() {}

func (x *ApplicationCheckDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_gitops_pre_check_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationCheckDetail.ProtoReflect.Descriptor instead.
func (*ApplicationCheckDetail) Descriptor() ([]byte, []int) {
	return file_proto_bcs_gitops_pre_check_proto_rawDescGZIP(), []int{5}
}

func (x *ApplicationCheckDetail) GetCheckDetail() map[string]*ApplicationDetail {
	if x != nil {
		return x.CheckDetail
	}
	return nil
}

type PreCheckTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Project              string                             `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	RepositoryAddr       string                             `protobuf:"bytes,3,opt,name=repositoryAddr,proto3" json:"repositoryAddr,omitempty"`
	MrIid                string                             `protobuf:"bytes,4,opt,name=mrIid,proto3" json:"mrIid,omitempty"`
	CheckCallbackGit     *bool                              `protobuf:"varint,5,opt,name=checkCallbackGit,proto3,oneof" json:"checkCallbackGit,omitempty"`
	CheckRevision        string                             `protobuf:"bytes,6,opt,name=checkRevision,proto3" json:"checkRevision,omitempty"`
	ApplicationName      string                             `protobuf:"bytes,7,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	TriggerType          string                             `protobuf:"bytes,8,opt,name=triggerType,proto3" json:"triggerType,omitempty"`
	BranchValue          string                             `protobuf:"bytes,9,opt,name=branchValue,proto3" json:"branchValue,omitempty"`
	CheckDetail          map[string]*ApplicationCheckDetail `protobuf:"bytes,10,rep,name=checkDetail,proto3" json:"checkDetail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreateTime           string                             `protobuf:"bytes,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime           string                             `protobuf:"bytes,12,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	TriggerByUser        string                             `protobuf:"bytes,13,opt,name=triggerByUser,proto3" json:"triggerByUser,omitempty"`
	CreateBy             string                             `protobuf:"bytes,14,opt,name=createBy,proto3" json:"createBy,omitempty"`
	Finish               *bool                              `protobuf:"varint,15,opt,name=finish,proto3,oneof" json:"finish,omitempty"`
	FlowID               string                             `protobuf:"bytes,16,opt,name=flowID,proto3" json:"flowID,omitempty"`
	InvolvedApplications []string                           `protobuf:"bytes,17,rep,name=involvedApplications,proto3" json:"involvedApplications,omitempty"`
	ReplaceRepo          string                             `protobuf:"bytes,18,opt,name=replaceRepo,proto3" json:"replaceRepo,omitempty"`
	NeedReplaceRepo      *bool                              `protobuf:"varint,19,opt,name=needReplaceRepo,proto3,oneof" json:"needReplaceRepo,omitempty"`
	ReplaceProject       string                             `protobuf:"bytes,20,opt,name=replaceProject,proto3" json:"replaceProject,omitempty"`
	FlowLink             string                             `protobuf:"bytes,21,opt,name=flowLink,proto3" json:"flowLink,omitempty"`
	MrInfo               *MRInfoData                        `protobuf:"bytes,22,opt,name=mrInfo,proto3" json:"mrInfo,omitempty"`
	Pass                 *bool                              `protobuf:"varint,23,opt,name=pass,proto3,oneof" json:"pass,omitempty"`
	Message              string                             `protobuf:"bytes,24,opt,name=message,proto3" json:"message,omitempty"`
	ChooseApplication    *bool                              `protobuf:"varint,25,opt,name=chooseApplication,proto3,oneof" json:"chooseApplication,omitempty"`
	AppFilter            string                             `protobuf:"bytes,26,opt,name=appFilter,proto3" json:"appFilter,omitempty"`
	LabelSelector        string                             `protobuf:"bytes,27,opt,name=labelSelector,proto3" json:"labelSelector,omitempty"`
}

func (x *PreCheckTask) Reset() {
	*x = PreCheckTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_gitops_pre_check_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreCheckTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreCheckTask) ProtoMessage() {}

func (x *PreCheckTask) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_gitops_pre_check_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreCheckTask.ProtoReflect.Descriptor instead.
func (*PreCheckTask) Descriptor() ([]byte, []int) {
	return file_proto_bcs_gitops_pre_check_proto_rawDescGZIP(), []int{6}
}

func (x *PreCheckTask) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PreCheckTask) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *PreCheckTask) GetRepositoryAddr() string {
	if x != nil {
		return x.RepositoryAddr
	}
	return ""
}

func (x *PreCheckTask) GetMrIid() string {
	if x != nil {
		return x.MrIid
	}
	return ""
}

func (x *PreCheckTask) GetCheckCallbackGit() bool {
	if x != nil && x.CheckCallbackGit != nil {
		return *x.CheckCallbackGit
	}
	return false
}

func (x *PreCheckTask) GetCheckRevision() string {
	if x != nil {
		return x.CheckRevision
	}
	return ""
}

func (x *PreCheckTask) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *PreCheckTask) GetTriggerType() string {
	if x != nil {
		return x.TriggerType
	}
	return ""
}

func (x *PreCheckTask) GetBranchValue() string {
	if x != nil {
		return x.BranchValue
	}
	return ""
}

func (x *PreCheckTask) GetCheckDetail() map[string]*ApplicationCheckDetail {
	if x != nil {
		return x.CheckDetail
	}
	return nil
}

func (x *PreCheckTask) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *PreCheckTask) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *PreCheckTask) GetTriggerByUser() string {
	if x != nil {
		return x.TriggerByUser
	}
	return ""
}

func (x *PreCheckTask) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *PreCheckTask) GetFinish() bool {
	if x != nil && x.Finish != nil {
		return *x.Finish
	}
	return false
}

func (x *PreCheckTask) GetFlowID() string {
	if x != nil {
		return x.FlowID
	}
	return ""
}

func (x *PreCheckTask) GetInvolvedApplications() []string {
	if x != nil {
		return x.InvolvedApplications
	}
	return nil
}

func (x *PreCheckTask) GetReplaceRepo() string {
	if x != nil {
		return x.ReplaceRepo
	}
	return ""
}

func (x *PreCheckTask) GetNeedReplaceRepo() bool {
	if x != nil && x.NeedReplaceRepo != nil {
		return *x.NeedReplaceRepo
	}
	return false
}

func (x *PreCheckTask) GetReplaceProject() string {
	if x != nil {
		return x.ReplaceProject
	}
	return ""
}

func (x *PreCheckTask) GetFlowLink() string {
	if x != nil {
		return x.FlowLink
	}
	return ""
}

func (x *PreCheckTask) GetMrInfo() *MRInfoData {
	if x != nil {
		return x.MrInfo
	}
	return nil
}

func (x *PreCheckTask) GetPass() bool {
	if x != nil && x.Pass != nil {
		return *x.Pass
	}
	return false
}

func (x *PreCheckTask) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PreCheckTask) GetChooseApplication() bool {
	if x != nil && x.ChooseApplication != nil {
		return *x.ChooseApplication
	}
	return false
}

func (x *PreCheckTask) GetAppFilter() string {
	if x != nil {
		return x.AppFilter
	}
	return ""
}

func (x *PreCheckTask) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

type PreCheckTaskRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      *uint32       `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message   string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID string        `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Data      *PreCheckTask `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PreCheckTaskRsp) Reset() {
	*x = PreCheckTaskRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_gitops_pre_check_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreCheckTaskRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreCheckTaskRsp) ProtoMessage() {}

func (x *PreCheckTaskRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_gitops_pre_check_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreCheckTaskRsp.ProtoReflect.Descriptor instead.
func (*PreCheckTaskRsp) Descriptor() ([]byte, []int) {
	return file_proto_bcs_gitops_pre_check_proto_rawDescGZIP(), []int{7}
}

func (x *PreCheckTaskRsp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *PreCheckTaskRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PreCheckTaskRsp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *PreCheckTaskRsp) GetData() *PreCheckTask {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListPreCheckTaskRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      *uint32         `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message   string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID string          `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Data      []*PreCheckTask `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListPreCheckTaskRsp) Reset() {
	*x = ListPreCheckTaskRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_gitops_pre_check_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPreCheckTaskRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPreCheckTaskRsp) ProtoMessage() {}

func (x *ListPreCheckTaskRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_gitops_pre_check_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPreCheckTaskRsp.ProtoReflect.Descriptor instead.
func (*ListPreCheckTaskRsp) Descriptor() ([]byte, []int) {
	return file_proto_bcs_gitops_pre_check_proto_rawDescGZIP(), []int{8}
}

func (x *ListPreCheckTaskRsp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ListPreCheckTaskRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListPreCheckTaskRsp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ListPreCheckTaskRsp) GetData() []*PreCheckTask {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetTaskByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Project    string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	DiffDetail bool   `protobuf:"varint,3,opt,name=diffDetail,proto3" json:"diffDetail,omitempty"`
}

func (x *GetTaskByIDReq) Reset() {
	*x = GetTaskByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_gitops_pre_check_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskByIDReq) ProtoMessage() {}

func (x *GetTaskByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_gitops_pre_check_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskByIDReq.ProtoReflect.Descriptor instead.
func (*GetTaskByIDReq) Descriptor() ([]byte, []int) {
	return file_proto_bcs_gitops_pre_check_proto_rawDescGZIP(), []int{9}
}

func (x *GetTaskByIDReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetTaskByIDReq) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GetTaskByIDReq) GetDiffDetail() bool {
	if x != nil {
		return x.DiffDetail
	}
	return false
}

type ListTaskByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Projects   []string `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	Repos      []string `protobuf:"bytes,2,rep,name=repos,proto3" json:"repos,omitempty"`
	StartTime  string   `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime    string   `protobuf:"bytes,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Limit      uint32   `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     uint32   `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
	WithDetail bool     `protobuf:"varint,7,opt,name=withDetail,proto3" json:"withDetail,omitempty"`
	DiffDetail bool     `protobuf:"varint,8,opt,name=diffDetail,proto3" json:"diffDetail,omitempty"`
}

func (x *ListTaskByIDReq) Reset() {
	*x = ListTaskByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_gitops_pre_check_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTaskByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskByIDReq) ProtoMessage() {}

func (x *ListTaskByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_gitops_pre_check_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskByIDReq.ProtoReflect.Descriptor instead.
func (*ListTaskByIDReq) Descriptor() ([]byte, []int) {
	return file_proto_bcs_gitops_pre_check_proto_rawDescGZIP(), []int{10}
}

func (x *ListTaskByIDReq) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *ListTaskByIDReq) GetRepos() []string {
	if x != nil {
		return x.Repos
	}
	return nil
}

func (x *ListTaskByIDReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ListTaskByIDReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ListTaskByIDReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListTaskByIDReq) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListTaskByIDReq) GetWithDetail() bool {
	if x != nil {
		return x.WithDetail
	}
	return false
}

func (x *ListTaskByIDReq) GetDiffDetail() bool {
	if x != nil {
		return x.DiffDetail
	}
	return false
}

var File_proto_bcs_gitops_pre_check_proto protoreflect.FileDescriptor

var file_proto_bcs_gitops_pre_check_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x63, 0x73, 0x2d, 0x67, 0x69, 0x74, 0x6f,
	0x70, 0x73, 0x2d, 0x70, 0x72, 0x65, 0x2d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x4d, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x3d, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92,
	0x41, 0x1a, 0x2a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x32, 0x0c,
	0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x6d, 0x72, 0x49, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x05, 0x6d, 0x72,
	0x49, 0x49, 0x44, 0x32, 0x05, 0x6d, 0x72, 0x49, 0x49, 0x44, 0x52, 0x05, 0x6d, 0x72, 0x49, 0x49,
	0x44, 0x3a, 0x26, 0x92, 0x41, 0x23, 0x0a, 0x21, 0x2a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x32, 0x11, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x6d, 0x72,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x72, 0x65, 0x71, 0x22, 0xc6, 0x02, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x4d, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0x92, 0x41, 0x15, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x08,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x4d, 0x52, 0x49,
	0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x15, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe,
	0xe5, 0xa4, 0x87, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a,
	0x38, 0x92, 0x41, 0x35, 0x0a, 0x33, 0x2a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x73, 0x70, 0x32, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x6d, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2,
	0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xaf, 0x05, 0x0a, 0x0a, 0x4d, 0x52, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x44, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x0c, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x32, 0x0d, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x20, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x44, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x2a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x32, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x2f, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15,
	0x92, 0x41, 0x12, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x07, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3c,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x32, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x32, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x32, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6d, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x09, 0x6d, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x0a, 0x4d, 0x52, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x09, 0x6d, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x32, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x0c, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x32, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x12, 0x44, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x32, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x2a, 0x02, 0x69, 0x64, 0x32, 0x02, 0x69, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0d, 0x92, 0x41, 0x0a, 0x2a, 0x03, 0x69, 0x69, 0x64, 0x32, 0x03, 0x69, 0x69, 0x64, 0x52,
	0x03, 0x69, 0x69, 0x64, 0x22, 0xcd, 0x01, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a,
	0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x32, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x48,
	0x00, 0x52, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x13, 0x92, 0x41, 0x10,
	0x2a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x32, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x22, 0xe6, 0x03, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x06,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x13, 0x92, 0x41,
	0x10, 0x2a, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x32, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x44,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0d, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x61, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0x92, 0x41, 0x19, 0x2a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32,
	0x0b, 0x61, 0x70, 0x69, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x32, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x2a, 0x04, 0x70, 0x61, 0x73, 0x73, 0x32, 0x04,
	0x70, 0x61, 0x73, 0x73, 0x48, 0x01, 0x52, 0x04, 0x70, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x37, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x32, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x22, 0xea, 0x01,
	0x0a, 0x16, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x73, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x70, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x32, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x5b, 0x0a,
	0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc8, 0x0f, 0x0a, 0x0c, 0x50,
	0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x2a, 0x02, 0x69, 0x64,
	0x32, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15,
	0x92, 0x41, 0x12, 0x2a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x32, 0x07, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4f,
	0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x0e, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x32, 0x12, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x28, 0x0a, 0x05, 0x6d, 0x72, 0x49, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12,
	0x92, 0x41, 0x0f, 0x2a, 0x05, 0x6d, 0x72, 0x49, 0x49, 0x44, 0x32, 0x06, 0x4d, 0x52, 0x20, 0x49,
	0x49, 0x44, 0x52, 0x05, 0x6d, 0x72, 0x49, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x10, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x47, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x47, 0x69, 0x74, 0x32, 0x12, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x47, 0x69, 0x74, 0x48, 0x00,
	0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x47,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41,
	0x1f, 0x2a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x32, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x50, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x0f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x10,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x32, 0x0c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0b, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x0b, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x69, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x65, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x2e, 0x50, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x73,
	0x6b, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x32, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x3c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x32, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x32, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x32, 0x0f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x20,
	0x62, 0x79, 0x20, 0x75, 0x73, 0x65, 0x72, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x32, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x62, 0x79, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x30, 0x0a, 0x06,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x13, 0x92, 0x41,
	0x10, 0x2a, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x32, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x48, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2c,
	0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0x92, 0x41, 0x11, 0x2a, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x32, 0x07, 0x66, 0x6c, 0x6f,
	0x77, 0x20, 0x49, 0x44, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x12, 0x63, 0x0a, 0x14,
	0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a,
	0x14, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x14, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x14, 0x69, 0x6e, 0x76,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0b, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x32, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x12, 0x54, 0x0a, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x42, 0x25, 0x92, 0x41, 0x22,
	0x2a, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x32, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x48, 0x02, 0x52, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x32, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6e,
	0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0x66, 0x6c,
	0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x32, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x41, 0x0a, 0x06, 0x6d, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x65,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x4d, 0x52, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x6d, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x06, 0x6d,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a,
	0x04, 0x70, 0x61, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0f, 0x92, 0x41, 0x0c,
	0x2a, 0x04, 0x70, 0x61, 0x73, 0x73, 0x32, 0x04, 0x70, 0x61, 0x73, 0x73, 0x48, 0x03, 0x52, 0x04,
	0x70, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x63, 0x68, 0x6f, 0x6f,
	0x73, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x11, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x11, 0x63, 0x68, 0x6f,
	0x6f, 0x73, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x04,
	0x52, 0x11, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09,
	0x61, 0x70, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x32, 0x09, 0x61, 0x70, 0x70, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x61, 0x70, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x3f, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09, 0x61, 0x70, 0x70,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x32, 0x09, 0x61, 0x70, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x1a, 0x60, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x47, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x02, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92,
	0x41, 0x15, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x4c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x50, 0x72, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x15, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84, 0xe8, 0xae,
	0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x3a, 0x3e, 0x92, 0x41, 0x3b, 0x0a, 0x39, 0x2a, 0x0f, 0x50, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x73, 0x70, 0x32, 0x15, 0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2,
	0xe5, 0x89, 0x8d, 0xe6, 0xa3, 0x80, 0xe6, 0x9f, 0xa5, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xd2,
	0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xe3, 0x02, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x73,
	0x70, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x32, 0x08, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x49, 0x44, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x65, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x2e, 0x50, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x15, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x4c, 0x92, 0x41, 0x49, 0x0a, 0x47, 0x2a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x73, 0x70, 0x32, 0x1f, 0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0xe5, 0x89, 0x8d, 0xe6,
	0xa3, 0x80, 0xe6, 0x9f, 0xa5, 0x74, 0x61, 0x73, 0x6b, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe5,
	0x93, 0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xbe, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0x92, 0x41, 0x08, 0x2a, 0x02, 0x69, 0x64, 0x32, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x32, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x32, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0x21, 0x92,
	0x41, 0x1e, 0x0a, 0x1c, 0x2a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x32, 0x0a, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x74, 0x61, 0x73, 0x6b,
	0x22, 0xec, 0x03, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x08, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x32, 0x06, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x2a, 0x05, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x32, 0x06, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe7, 0xbb,
	0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x0c,
	0xe5, 0x8d, 0x95, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x32, 0x09, 0xe5, 0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0a, 0x77, 0x69,
	0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x32, 0x12, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x52, 0x0a, 0x77, 0x69,
	0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1b, 0x92, 0x41,
	0x18, 0x2a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x32, 0x0a, 0x64,
	0x69, 0x66, 0x66, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0x28, 0x92, 0x41, 0x25, 0x0a, 0x23, 0x2a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x32, 0x10, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x74, 0x61, 0x73, 0x6b, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x32,
	0x90, 0x06, 0x0a, 0x0e, 0x47, 0x69, 0x74, 0x4f, 0x70, 0x73, 0x50, 0x72, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x12, 0x80, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4d, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x2e, 0x70, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x65, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70,
	0x22, 0x43, 0x92, 0x41, 0x20, 0x12, 0x0e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x6d, 0x72, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x0e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x6d, 0x72, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f, 0x6d, 0x72,
	0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x9a, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x2e, 0x70,
	0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x50, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x61, 0x73, 0x6b, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e,
	0x50, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x73, 0x70, 0x22,
	0x51, 0x92, 0x41, 0x2c, 0x12, 0x14, 0xe8, 0xa1, 0xa5, 0xe5, 0xbd, 0x95, 0x70, 0x72, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x1a, 0x14, 0xe8, 0xa1, 0xa5, 0xe5,
	0xbd, 0x95, 0x70, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x9c, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79,
	0x49, 0x44, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70,
	0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x50, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x73, 0x70, 0x22, 0x58, 0x92, 0x41, 0x38, 0x12, 0x1a, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xaa, 0x70, 0x72, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x1a, 0x1a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xaa, 0x70, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x12, 0x9c, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x16, 0x2e, 0x70, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x50, 0x72, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x65, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x2e, 0x50, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x73, 0x70, 0x22, 0x5b, 0x92, 0x41, 0x38, 0x12, 0x1a, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xaa, 0x70, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0x1a, 0x1a, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x8d, 0x95, 0xe4,
	0xb8, 0xaa, 0x70, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x1a, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f, 0x74, 0x61, 0x73, 0x6b,
	0x12, 0x9f, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x19, 0x2e,
	0x70, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x65, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x73, 0x70, 0x22, 0x59, 0x92, 0x41, 0x38, 0x12, 0x1a, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xaa, 0x70, 0x72, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x1a, 0x1a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xaa, 0x70, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x42, 0x12, 0x5a, 0x10, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72,
	0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_bcs_gitops_pre_check_proto_rawDescOnce sync.Once
	file_proto_bcs_gitops_pre_check_proto_rawDescData = file_proto_bcs_gitops_pre_check_proto_rawDesc
)

func file_proto_bcs_gitops_pre_check_proto_rawDescGZIP() []byte {
	file_proto_bcs_gitops_pre_check_proto_rawDescOnce.Do(func() {
		file_proto_bcs_gitops_pre_check_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_bcs_gitops_pre_check_proto_rawDescData)
	})
	return file_proto_bcs_gitops_pre_check_proto_rawDescData
}

var file_proto_bcs_gitops_pre_check_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_bcs_gitops_pre_check_proto_goTypes = []interface{}{
	(*GetMrInfoReq)(nil),           // 0: precheck.GetMrInfoReq
	(*GetMrInfoRsp)(nil),           // 1: precheck.GetMrInfoRsp
	(*MRInfoData)(nil),             // 2: precheck.MRInfoData
	(*ApplicationDetail)(nil),      // 3: precheck.ApplicationDetail
	(*ResourceCheckDetail)(nil),    // 4: precheck.ResourceCheckDetail
	(*ApplicationCheckDetail)(nil), // 5: precheck.ApplicationCheckDetail
	(*PreCheckTask)(nil),           // 6: precheck.PreCheckTask
	(*PreCheckTaskRsp)(nil),        // 7: precheck.PreCheckTaskRsp
	(*ListPreCheckTaskRsp)(nil),    // 8: precheck.ListPreCheckTaskRsp
	(*GetTaskByIDReq)(nil),         // 9: precheck.GetTaskByIDReq
	(*ListTaskByIDReq)(nil),        // 10: precheck.ListTaskByIDReq
	nil,                            // 11: precheck.ApplicationCheckDetail.CheckDetailEntry
	nil,                            // 12: precheck.PreCheckTask.CheckDetailEntry
}
var file_proto_bcs_gitops_pre_check_proto_depIdxs = []int32{
	2,  // 0: precheck.GetMrInfoRsp.data:type_name -> precheck.MRInfoData
	4,  // 1: precheck.ApplicationDetail.detail:type_name -> precheck.ResourceCheckDetail
	11, // 2: precheck.ApplicationCheckDetail.checkDetail:type_name -> precheck.ApplicationCheckDetail.CheckDetailEntry
	12, // 3: precheck.PreCheckTask.checkDetail:type_name -> precheck.PreCheckTask.CheckDetailEntry
	2,  // 4: precheck.PreCheckTask.mrInfo:type_name -> precheck.MRInfoData
	6,  // 5: precheck.PreCheckTaskRsp.data:type_name -> precheck.PreCheckTask
	6,  // 6: precheck.ListPreCheckTaskRsp.data:type_name -> precheck.PreCheckTask
	3,  // 7: precheck.ApplicationCheckDetail.CheckDetailEntry.value:type_name -> precheck.ApplicationDetail
	5,  // 8: precheck.PreCheckTask.CheckDetailEntry.value:type_name -> precheck.ApplicationCheckDetail
	0,  // 9: precheck.GitOpsPreCheck.GetMrInfo:input_type -> precheck.GetMrInfoReq
	6,  // 10: precheck.GitOpsPreCheck.RecordTaskByPlugin:input_type -> precheck.PreCheckTask
	9,  // 11: precheck.GitOpsPreCheck.GetTaskByID:input_type -> precheck.GetTaskByIDReq
	6,  // 12: precheck.GitOpsPreCheck.UpdateTask:input_type -> precheck.PreCheckTask
	10, // 13: precheck.GitOpsPreCheck.ListTask:input_type -> precheck.ListTaskByIDReq
	1,  // 14: precheck.GitOpsPreCheck.GetMrInfo:output_type -> precheck.GetMrInfoRsp
	7,  // 15: precheck.GitOpsPreCheck.RecordTaskByPlugin:output_type -> precheck.PreCheckTaskRsp
	7,  // 16: precheck.GitOpsPreCheck.GetTaskByID:output_type -> precheck.PreCheckTaskRsp
	7,  // 17: precheck.GitOpsPreCheck.UpdateTask:output_type -> precheck.PreCheckTaskRsp
	8,  // 18: precheck.GitOpsPreCheck.ListTask:output_type -> precheck.ListPreCheckTaskRsp
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_bcs_gitops_pre_check_proto_init() }
func file_proto_bcs_gitops_pre_check_proto_init() {
	if File_proto_bcs_gitops_pre_check_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_bcs_gitops_pre_check_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMrInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_gitops_pre_check_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMrInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_gitops_pre_check_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MRInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_gitops_pre_check_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_gitops_pre_check_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceCheckDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_gitops_pre_check_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationCheckDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_gitops_pre_check_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreCheckTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_gitops_pre_check_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreCheckTaskRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_gitops_pre_check_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPreCheckTaskRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_gitops_pre_check_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_gitops_pre_check_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTaskByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_bcs_gitops_pre_check_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_proto_bcs_gitops_pre_check_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_proto_bcs_gitops_pre_check_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_proto_bcs_gitops_pre_check_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_proto_bcs_gitops_pre_check_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_proto_bcs_gitops_pre_check_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_bcs_gitops_pre_check_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_bcs_gitops_pre_check_proto_goTypes,
		DependencyIndexes: file_proto_bcs_gitops_pre_check_proto_depIdxs,
		MessageInfos:      file_proto_bcs_gitops_pre_check_proto_msgTypes,
	}.Build()
	File_proto_bcs_gitops_pre_check_proto = out.File
	file_proto_bcs_gitops_pre_check_proto_rawDesc = nil
	file_proto_bcs_gitops_pre_check_proto_goTypes = nil
	file_proto_bcs_gitops_pre_check_proto_depIdxs = nil
}
