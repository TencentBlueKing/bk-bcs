// Tencent is pleased to support the open source community by making Blueking Container Service available.
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
// Licensed under the MIT License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// http://opensource.org/licenses/MIT
//
// Unless required by applicable law or agreed to in writing, software distributed under,
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
// either express or implied. See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.5
// source: bcsproject.proto

package bcsproject

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_struct "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime     string `protobuf:"bytes,1,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime     string `protobuf:"bytes,2,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Creator        string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	Updater        string `protobuf:"bytes,4,opt,name=updater,proto3" json:"updater,omitempty"`
	Managers       string `protobuf:"bytes,5,opt,name=managers,proto3" json:"managers,omitempty"`
	ProjectID      string `protobuf:"bytes,6,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Name           string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	ProjectCode    string `protobuf:"bytes,8,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	UseBKRes       bool   `protobuf:"varint,9,opt,name=useBKRes,proto3" json:"useBKRes,omitempty"`
	Description    string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	IsOffline      bool   `protobuf:"varint,11,opt,name=isOffline,proto3" json:"isOffline,omitempty"`
	Kind           string `protobuf:"bytes,12,opt,name=kind,proto3" json:"kind,omitempty"`
	BusinessID     string `protobuf:"bytes,13,opt,name=businessID,proto3" json:"businessID,omitempty"`
	IsSecret       bool   `protobuf:"varint,14,opt,name=isSecret,proto3" json:"isSecret,omitempty"`
	ProjectType    uint32 `protobuf:"varint,15,opt,name=projectType,proto3" json:"projectType,omitempty"`
	DeployType     uint32 `protobuf:"varint,16,opt,name=deployType,proto3" json:"deployType,omitempty"`
	BGID           string `protobuf:"bytes,17,opt,name=BGID,proto3" json:"BGID,omitempty"`
	BGName         string `protobuf:"bytes,18,opt,name=BGName,proto3" json:"BGName,omitempty"`
	DeptID         string `protobuf:"bytes,19,opt,name=deptID,proto3" json:"deptID,omitempty"`
	DeptName       string `protobuf:"bytes,20,opt,name=deptName,proto3" json:"deptName,omitempty"`
	CenterID       string `protobuf:"bytes,21,opt,name=centerID,proto3" json:"centerID,omitempty"`
	CenterName     string `protobuf:"bytes,22,opt,name=centerName,proto3" json:"centerName,omitempty"`
	BusinessName   string `protobuf:"bytes,23,opt,name=businessName,proto3" json:"businessName,omitempty"`
	EnableVcluster bool   `protobuf:"varint,24,opt,name=enableVcluster,proto3" json:"enableVcluster,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{0}
}

func (x *Project) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Project) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Project) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Project) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *Project) GetManagers() string {
	if x != nil {
		return x.Managers
	}
	return ""
}

func (x *Project) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *Project) GetUseBKRes() bool {
	if x != nil {
		return x.UseBKRes
	}
	return false
}

func (x *Project) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Project) GetIsOffline() bool {
	if x != nil {
		return x.IsOffline
	}
	return false
}

func (x *Project) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Project) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *Project) GetIsSecret() bool {
	if x != nil {
		return x.IsSecret
	}
	return false
}

func (x *Project) GetProjectType() uint32 {
	if x != nil {
		return x.ProjectType
	}
	return 0
}

func (x *Project) GetDeployType() uint32 {
	if x != nil {
		return x.DeployType
	}
	return 0
}

func (x *Project) GetBGID() string {
	if x != nil {
		return x.BGID
	}
	return ""
}

func (x *Project) GetBGName() string {
	if x != nil {
		return x.BGName
	}
	return ""
}

func (x *Project) GetDeptID() string {
	if x != nil {
		return x.DeptID
	}
	return ""
}

func (x *Project) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *Project) GetCenterID() string {
	if x != nil {
		return x.CenterID
	}
	return ""
}

func (x *Project) GetCenterName() string {
	if x != nil {
		return x.CenterName
	}
	return ""
}

func (x *Project) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *Project) GetEnableVcluster() bool {
	if x != nil {
		return x.EnableVcluster
	}
	return false
}

type CreateProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime  string `protobuf:"bytes,1,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Creator     string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	ProjectID   string `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	ProjectCode string `protobuf:"bytes,5,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	UseBKRes    bool   `protobuf:"varint,6,opt,name=useBKRes,proto3" json:"useBKRes,omitempty"`
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	IsOffline   bool   `protobuf:"varint,8,opt,name=isOffline,proto3" json:"isOffline,omitempty"`
	Kind        string `protobuf:"bytes,9,opt,name=kind,proto3" json:"kind,omitempty"`
	BusinessID  string `protobuf:"bytes,10,opt,name=businessID,proto3" json:"businessID,omitempty"`
	IsSecret    bool   `protobuf:"varint,11,opt,name=isSecret,proto3" json:"isSecret,omitempty"`
	ProjectType uint32 `protobuf:"varint,12,opt,name=projectType,proto3" json:"projectType,omitempty"`
	DeployType  uint32 `protobuf:"varint,13,opt,name=deployType,proto3" json:"deployType,omitempty"`
	BGID        string `protobuf:"bytes,14,opt,name=BGID,proto3" json:"BGID,omitempty"`
	BGName      string `protobuf:"bytes,15,opt,name=BGName,proto3" json:"BGName,omitempty"`
	DeptID      string `protobuf:"bytes,16,opt,name=deptID,proto3" json:"deptID,omitempty"`
	DeptName    string `protobuf:"bytes,17,opt,name=deptName,proto3" json:"deptName,omitempty"`
	CenterID    string `protobuf:"bytes,18,opt,name=centerID,proto3" json:"centerID,omitempty"`
	CenterName  string `protobuf:"bytes,19,opt,name=centerName,proto3" json:"centerName,omitempty"`
}

func (x *CreateProjectRequest) Reset() {
	*x = CreateProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectRequest) ProtoMessage() {}

func (x *CreateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectRequest.ProtoReflect.Descriptor instead.
func (*CreateProjectRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{1}
}

func (x *CreateProjectRequest) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CreateProjectRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreateProjectRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CreateProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateProjectRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *CreateProjectRequest) GetUseBKRes() bool {
	if x != nil {
		return x.UseBKRes
	}
	return false
}

func (x *CreateProjectRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateProjectRequest) GetIsOffline() bool {
	if x != nil {
		return x.IsOffline
	}
	return false
}

func (x *CreateProjectRequest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *CreateProjectRequest) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *CreateProjectRequest) GetIsSecret() bool {
	if x != nil {
		return x.IsSecret
	}
	return false
}

func (x *CreateProjectRequest) GetProjectType() uint32 {
	if x != nil {
		return x.ProjectType
	}
	return 0
}

func (x *CreateProjectRequest) GetDeployType() uint32 {
	if x != nil {
		return x.DeployType
	}
	return 0
}

func (x *CreateProjectRequest) GetBGID() string {
	if x != nil {
		return x.BGID
	}
	return ""
}

func (x *CreateProjectRequest) GetBGName() string {
	if x != nil {
		return x.BGName
	}
	return ""
}

func (x *CreateProjectRequest) GetDeptID() string {
	if x != nil {
		return x.DeptID
	}
	return ""
}

func (x *CreateProjectRequest) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *CreateProjectRequest) GetCenterID() string {
	if x != nil {
		return x.CenterID
	}
	return ""
}

func (x *CreateProjectRequest) GetCenterName() string {
	if x != nil {
		return x.CenterName
	}
	return ""
}

type GetProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectIDOrCode string `protobuf:"bytes,1,opt,name=projectIDOrCode,proto3" json:"projectIDOrCode,omitempty"`
}

func (x *GetProjectRequest) Reset() {
	*x = GetProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRequest) ProtoMessage() {}

func (x *GetProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{2}
}

func (x *GetProjectRequest) GetProjectIDOrCode() string {
	if x != nil {
		return x.ProjectIDOrCode
	}
	return ""
}

type UpdateProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID   string              `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Name        string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Updater     string              `protobuf:"bytes,3,opt,name=updater,proto3" json:"updater,omitempty"`
	UseBKRes    *wrappers.BoolValue `protobuf:"bytes,4,opt,name=useBKRes,proto3" json:"useBKRes,omitempty"`
	Description string              `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	IsOffline   *wrappers.BoolValue `protobuf:"bytes,6,opt,name=isOffline,proto3" json:"isOffline,omitempty"`
	Kind        string              `protobuf:"bytes,7,opt,name=kind,proto3" json:"kind,omitempty"`
	BusinessID  string              `protobuf:"bytes,8,opt,name=businessID,proto3" json:"businessID,omitempty"`
	IsSecret    *wrappers.BoolValue `protobuf:"bytes,9,opt,name=isSecret,proto3" json:"isSecret,omitempty"`
	DeployType  uint32              `protobuf:"varint,10,opt,name=deployType,proto3" json:"deployType,omitempty"`
	ProjectType uint32              `protobuf:"varint,11,opt,name=projectType,proto3" json:"projectType,omitempty"`
	BGID        string              `protobuf:"bytes,12,opt,name=BGID,proto3" json:"BGID,omitempty"`
	BGName      string              `protobuf:"bytes,13,opt,name=BGName,proto3" json:"BGName,omitempty"`
	DeptID      string              `protobuf:"bytes,14,opt,name=deptID,proto3" json:"deptID,omitempty"`
	DeptName    string              `protobuf:"bytes,15,opt,name=deptName,proto3" json:"deptName,omitempty"`
	CenterID    string              `protobuf:"bytes,16,opt,name=centerID,proto3" json:"centerID,omitempty"`
	CenterName  string              `protobuf:"bytes,17,opt,name=centerName,proto3" json:"centerName,omitempty"`
	Managers    string              `protobuf:"bytes,18,opt,name=managers,proto3" json:"managers,omitempty"`
	Creator     string              `protobuf:"bytes,19,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (x *UpdateProjectRequest) Reset() {
	*x = UpdateProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectRequest) ProtoMessage() {}

func (x *UpdateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateProjectRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *UpdateProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateProjectRequest) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *UpdateProjectRequest) GetUseBKRes() *wrappers.BoolValue {
	if x != nil {
		return x.UseBKRes
	}
	return nil
}

func (x *UpdateProjectRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateProjectRequest) GetIsOffline() *wrappers.BoolValue {
	if x != nil {
		return x.IsOffline
	}
	return nil
}

func (x *UpdateProjectRequest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *UpdateProjectRequest) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *UpdateProjectRequest) GetIsSecret() *wrappers.BoolValue {
	if x != nil {
		return x.IsSecret
	}
	return nil
}

func (x *UpdateProjectRequest) GetDeployType() uint32 {
	if x != nil {
		return x.DeployType
	}
	return 0
}

func (x *UpdateProjectRequest) GetProjectType() uint32 {
	if x != nil {
		return x.ProjectType
	}
	return 0
}

func (x *UpdateProjectRequest) GetBGID() string {
	if x != nil {
		return x.BGID
	}
	return ""
}

func (x *UpdateProjectRequest) GetBGName() string {
	if x != nil {
		return x.BGName
	}
	return ""
}

func (x *UpdateProjectRequest) GetDeptID() string {
	if x != nil {
		return x.DeptID
	}
	return ""
}

func (x *UpdateProjectRequest) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *UpdateProjectRequest) GetCenterID() string {
	if x != nil {
		return x.CenterID
	}
	return ""
}

func (x *UpdateProjectRequest) GetCenterName() string {
	if x != nil {
		return x.CenterName
	}
	return ""
}

func (x *UpdateProjectRequest) GetManagers() string {
	if x != nil {
		return x.Managers
	}
	return ""
}

func (x *UpdateProjectRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

type DeleteProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
}

func (x *DeleteProjectRequest) Reset() {
	*x = DeleteProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectRequest) ProtoMessage() {}

func (x *DeleteProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectRequest.ProtoReflect.Descriptor instead.
func (*DeleteProjectRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteProjectRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

type ProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           *Project `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RequestID      string   `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *Perms   `protobuf:"bytes,5,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ProjectResponse) Reset() {
	*x = ProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectResponse) ProtoMessage() {}

func (x *ProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectResponse.ProtoReflect.Descriptor instead.
func (*ProjectResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{5}
}

func (x *ProjectResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ProjectResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ProjectResponse) GetData() *Project {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ProjectResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ProjectResponse) GetWebAnnotations() *Perms {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ListProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectIDs  string `protobuf:"bytes,1,opt,name=projectIDs,proto3" json:"projectIDs,omitempty"`
	Names       string `protobuf:"bytes,2,opt,name=names,proto3" json:"names,omitempty"`
	ProjectCode string `protobuf:"bytes,3,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	SearchName  string `protobuf:"bytes,4,opt,name=searchName,proto3" json:"searchName,omitempty"`
	Kind        string `protobuf:"bytes,5,opt,name=kind,proto3" json:"kind,omitempty"`
	Offset      int64  `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit       int64  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	All         bool   `protobuf:"varint,8,opt,name=all,proto3" json:"all,omitempty"`
	BusinessID  string `protobuf:"bytes,9,opt,name=businessID,proto3" json:"businessID,omitempty"`
}

func (x *ListProjectsRequest) Reset() {
	*x = ListProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsRequest) ProtoMessage() {}

func (x *ListProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsRequest.ProtoReflect.Descriptor instead.
func (*ListProjectsRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{6}
}

func (x *ListProjectsRequest) GetProjectIDs() string {
	if x != nil {
		return x.ProjectIDs
	}
	return ""
}

func (x *ListProjectsRequest) GetNames() string {
	if x != nil {
		return x.Names
	}
	return ""
}

func (x *ListProjectsRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *ListProjectsRequest) GetSearchName() string {
	if x != nil {
		return x.SearchName
	}
	return ""
}

func (x *ListProjectsRequest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ListProjectsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListProjectsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListProjectsRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *ListProjectsRequest) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

type ListProjectData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   uint32     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Results []*Project `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListProjectData) Reset() {
	*x = ListProjectData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectData) ProtoMessage() {}

func (x *ListProjectData) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectData.ProtoReflect.Descriptor instead.
func (*ListProjectData) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{7}
}

func (x *ListProjectData) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListProjectData) GetResults() []*Project {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListProjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           *ListProjectData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RequestID      string           `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *Perms           `protobuf:"bytes,5,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListProjectsResponse) Reset() {
	*x = ListProjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsResponse) ProtoMessage() {}

func (x *ListProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsResponse.ProtoReflect.Descriptor instead.
func (*ListProjectsResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{8}
}

func (x *ListProjectsResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListProjectsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListProjectsResponse) GetData() *ListProjectData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListProjectsResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ListProjectsResponse) GetWebAnnotations() *Perms {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type Perms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Perms *_struct.Struct `protobuf:"bytes,1,opt,name=perms,proto3" json:"perms,omitempty"`
}

func (x *Perms) Reset() {
	*x = Perms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Perms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Perms) ProtoMessage() {}

func (x *Perms) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Perms.ProtoReflect.Descriptor instead.
func (*Perms) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{9}
}

func (x *Perms) GetPerms() *_struct.Struct {
	if x != nil {
		return x.Perms
	}
	return nil
}

type ListAuthorizedProjReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	All       bool   `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
	SearchKey string `protobuf:"bytes,2,opt,name=searchKey,proto3" json:"searchKey,omitempty"`
	Offset    int64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     int64  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListAuthorizedProjReq) Reset() {
	*x = ListAuthorizedProjReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuthorizedProjReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuthorizedProjReq) ProtoMessage() {}

func (x *ListAuthorizedProjReq) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuthorizedProjReq.ProtoReflect.Descriptor instead.
func (*ListAuthorizedProjReq) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{10}
}

func (x *ListAuthorizedProjReq) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *ListAuthorizedProjReq) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

func (x *ListAuthorizedProjReq) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListAuthorizedProjReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListAuthorizedProjResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           *ListProjectData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RequestID      string           `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *Perms           `protobuf:"bytes,5,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListAuthorizedProjResp) Reset() {
	*x = ListAuthorizedProjResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuthorizedProjResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuthorizedProjResp) ProtoMessage() {}

func (x *ListAuthorizedProjResp) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuthorizedProjResp.ProtoReflect.Descriptor instead.
func (*ListAuthorizedProjResp) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{11}
}

func (x *ListAuthorizedProjResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListAuthorizedProjResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListAuthorizedProjResp) GetData() *ListProjectData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListAuthorizedProjResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ListAuthorizedProjResp) GetWebAnnotations() *Perms {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ListProjectsForIAMReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListProjectsForIAMReq) Reset() {
	*x = ListProjectsForIAMReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectsForIAMReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsForIAMReq) ProtoMessage() {}

func (x *ListProjectsForIAMReq) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsForIAMReq.ProtoReflect.Descriptor instead.
func (*ListProjectsForIAMReq) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{12}
}

type ListProjectsForIAMResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32                            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string                            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data      []*ListProjectsForIAMResp_Project `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	RequestID string                            `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *ListProjectsForIAMResp) Reset() {
	*x = ListProjectsForIAMResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectsForIAMResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsForIAMResp) ProtoMessage() {}

func (x *ListProjectsForIAMResp) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsForIAMResp.ProtoReflect.Descriptor instead.
func (*ListProjectsForIAMResp) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{13}
}

func (x *ListProjectsForIAMResp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListProjectsForIAMResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListProjectsForIAMResp) GetData() []*ListProjectsForIAMResp_Project {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListProjectsForIAMResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

type GetBusinessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
}

func (x *GetBusinessRequest) Reset() {
	*x = GetBusinessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessRequest) ProtoMessage() {}

func (x *GetBusinessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{14}
}

func (x *GetBusinessRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

type GetBusinessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           *BusinessData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RequestID      string        `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *Perms        `protobuf:"bytes,5,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetBusinessResponse) Reset() {
	*x = GetBusinessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessResponse) ProtoMessage() {}

func (x *GetBusinessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessResponse.ProtoReflect.Descriptor instead.
func (*GetBusinessResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{15}
}

func (x *GetBusinessResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetBusinessResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetBusinessResponse) GetData() *BusinessData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetBusinessResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *GetBusinessResponse) GetWebAnnotations() *Perms {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ListBusinessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseBCS bool `protobuf:"varint,1,opt,name=useBCS,proto3" json:"useBCS,omitempty"`
}

func (x *ListBusinessRequest) Reset() {
	*x = ListBusinessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessRequest) ProtoMessage() {}

func (x *ListBusinessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{16}
}

func (x *ListBusinessRequest) GetUseBCS() bool {
	if x != nil {
		return x.UseBCS
	}
	return false
}

type ListBusinessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           []*BusinessData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	RequestID      string          `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *Perms          `protobuf:"bytes,5,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListBusinessResponse) Reset() {
	*x = ListBusinessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessResponse) ProtoMessage() {}

func (x *ListBusinessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{17}
}

func (x *ListBusinessResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListBusinessResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListBusinessResponse) GetData() []*BusinessData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListBusinessResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ListBusinessResponse) GetWebAnnotations() *Perms {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type GetBusinessTopologyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
}

func (x *GetBusinessTopologyRequest) Reset() {
	*x = GetBusinessTopologyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessTopologyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessTopologyRequest) ProtoMessage() {}

func (x *GetBusinessTopologyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessTopologyRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessTopologyRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{18}
}

func (x *GetBusinessTopologyRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

type GetBusinessTopologyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           []*TopologyData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	RequestID      string          `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *Perms          `protobuf:"bytes,5,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetBusinessTopologyResponse) Reset() {
	*x = GetBusinessTopologyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessTopologyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessTopologyResponse) ProtoMessage() {}

func (x *GetBusinessTopologyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessTopologyResponse.ProtoReflect.Descriptor instead.
func (*GetBusinessTopologyResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{19}
}

func (x *GetBusinessTopologyResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetBusinessTopologyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetBusinessTopologyResponse) GetData() []*TopologyData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetBusinessTopologyResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *GetBusinessTopologyResponse) GetWebAnnotations() *Perms {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type BusinessData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessID string   `protobuf:"bytes,1,opt,name=businessID,proto3" json:"businessID,omitempty"`
	Name       string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Maintainer []string `protobuf:"bytes,3,rep,name=maintainer,proto3" json:"maintainer,omitempty"`
}

func (x *BusinessData) Reset() {
	*x = BusinessData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessData) ProtoMessage() {}

func (x *BusinessData) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessData.ProtoReflect.Descriptor instead.
func (*BusinessData) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{20}
}

func (x *BusinessData) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *BusinessData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BusinessData) GetMaintainer() []string {
	if x != nil {
		return x.Maintainer
	}
	return nil
}

type TopologyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BkInstId   uint32          `protobuf:"varint,1,opt,name=bk_inst_id,json=bkInstId,proto3" json:"bk_inst_id,omitempty"`
	BkInstName string          `protobuf:"bytes,2,opt,name=bk_inst_name,json=bkInstName,proto3" json:"bk_inst_name,omitempty"`
	BkObjId    string          `protobuf:"bytes,3,opt,name=bk_obj_id,json=bkObjId,proto3" json:"bk_obj_id,omitempty"`
	BkObjName  string          `protobuf:"bytes,4,opt,name=bk_obj_name,json=bkObjName,proto3" json:"bk_obj_name,omitempty"`
	Default    uint32          `protobuf:"varint,5,opt,name=default,proto3" json:"default,omitempty"`
	Child      []*TopologyData `protobuf:"bytes,6,rep,name=child,proto3" json:"child,omitempty"`
}

func (x *TopologyData) Reset() {
	*x = TopologyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyData) ProtoMessage() {}

func (x *TopologyData) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyData.ProtoReflect.Descriptor instead.
func (*TopologyData) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{21}
}

func (x *TopologyData) GetBkInstId() uint32 {
	if x != nil {
		return x.BkInstId
	}
	return 0
}

func (x *TopologyData) GetBkInstName() string {
	if x != nil {
		return x.BkInstName
	}
	return ""
}

func (x *TopologyData) GetBkObjId() string {
	if x != nil {
		return x.BkObjId
	}
	return ""
}

func (x *TopologyData) GetBkObjName() string {
	if x != nil {
		return x.BkObjName
	}
	return ""
}

func (x *TopologyData) GetDefault() uint32 {
	if x != nil {
		return x.Default
	}
	return 0
}

func (x *TopologyData) GetChild() []*TopologyData {
	if x != nil {
		return x.Child
	}
	return nil
}

type SyncNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
}

func (x *SyncNamespaceRequest) Reset() {
	*x = SyncNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncNamespaceRequest) ProtoMessage() {}

func (x *SyncNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncNamespaceRequest.ProtoReflect.Descriptor instead.
func (*SyncNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{22}
}

func (x *SyncNamespaceRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *SyncNamespaceRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

type SyncNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data      string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RequestID string `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *SyncNamespaceResponse) Reset() {
	*x = SyncNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncNamespaceResponse) ProtoMessage() {}

func (x *SyncNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncNamespaceResponse.ProtoReflect.Descriptor instead.
func (*SyncNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{23}
}

func (x *SyncNamespaceResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SyncNamespaceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SyncNamespaceResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *SyncNamespaceResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

type WithdrawNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace   string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *WithdrawNamespaceRequest) Reset() {
	*x = WithdrawNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawNamespaceRequest) ProtoMessage() {}

func (x *WithdrawNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawNamespaceRequest.ProtoReflect.Descriptor instead.
func (*WithdrawNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{24}
}

func (x *WithdrawNamespaceRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *WithdrawNamespaceRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *WithdrawNamespaceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type WithdrawNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data      string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RequestID string `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *WithdrawNamespaceResponse) Reset() {
	*x = WithdrawNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawNamespaceResponse) ProtoMessage() {}

func (x *WithdrawNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawNamespaceResponse.ProtoReflect.Descriptor instead.
func (*WithdrawNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{25}
}

func (x *WithdrawNamespaceResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WithdrawNamespaceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *WithdrawNamespaceResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *WithdrawNamespaceResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

type CreateNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string           `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string           `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Name        string           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Quota       *ResourceQuota   `protobuf:"bytes,4,opt,name=quota,proto3" json:"quota,omitempty"`
	Labels      []*Label         `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty"`
	Annotations []*Annotation    `protobuf:"bytes,6,rep,name=annotations,proto3" json:"annotations,omitempty"`
	Variables   []*VariableValue `protobuf:"bytes,7,rep,name=variables,proto3" json:"variables,omitempty"`
}

func (x *CreateNamespaceRequest) Reset() {
	*x = CreateNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceRequest) ProtoMessage() {}

func (x *CreateNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceRequest.ProtoReflect.Descriptor instead.
func (*CreateNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{26}
}

func (x *CreateNamespaceRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *CreateNamespaceRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *CreateNamespaceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNamespaceRequest) GetQuota() *ResourceQuota {
	if x != nil {
		return x.Quota
	}
	return nil
}

func (x *CreateNamespaceRequest) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateNamespaceRequest) GetAnnotations() []*Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *CreateNamespaceRequest) GetVariables() []*VariableValue {
	if x != nil {
		return x.Variables
	}
	return nil
}

type CreateNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           *NamespaceData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RequestID      string         `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *Perms         `protobuf:"bytes,5,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *CreateNamespaceResponse) Reset() {
	*x = CreateNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceResponse) ProtoMessage() {}

func (x *CreateNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceResponse.ProtoReflect.Descriptor instead.
func (*CreateNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{27}
}

func (x *CreateNamespaceResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateNamespaceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateNamespaceResponse) GetData() *NamespaceData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateNamespaceResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *CreateNamespaceResponse) GetWebAnnotations() *Perms {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type NamespaceCallbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode    string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID      string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace      string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Title          string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	CurrentStatus  string `protobuf:"bytes,5,opt,name=currentStatus,proto3" json:"currentStatus,omitempty"`
	Sn             string `protobuf:"bytes,6,opt,name=sn,proto3" json:"sn,omitempty"`
	TicketUrl      string `protobuf:"bytes,7,opt,name=ticketUrl,proto3" json:"ticketUrl,omitempty"`
	ApproveResult  bool   `protobuf:"varint,8,opt,name=approveResult,proto3" json:"approveResult,omitempty"`
	ApplyInCluster bool   `protobuf:"varint,9,opt,name=applyInCluster,proto3" json:"applyInCluster,omitempty"`
}

func (x *NamespaceCallbackRequest) Reset() {
	*x = NamespaceCallbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceCallbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceCallbackRequest) ProtoMessage() {}

func (x *NamespaceCallbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceCallbackRequest.ProtoReflect.Descriptor instead.
func (*NamespaceCallbackRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{28}
}

func (x *NamespaceCallbackRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *NamespaceCallbackRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *NamespaceCallbackRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *NamespaceCallbackRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NamespaceCallbackRequest) GetCurrentStatus() string {
	if x != nil {
		return x.CurrentStatus
	}
	return ""
}

func (x *NamespaceCallbackRequest) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *NamespaceCallbackRequest) GetTicketUrl() string {
	if x != nil {
		return x.TicketUrl
	}
	return ""
}

func (x *NamespaceCallbackRequest) GetApproveResult() bool {
	if x != nil {
		return x.ApproveResult
	}
	return false
}

func (x *NamespaceCallbackRequest) GetApplyInCluster() bool {
	if x != nil {
		return x.ApplyInCluster
	}
	return false
}

type NamespaceCallbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data      string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RequestID string `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Result    bool   `protobuf:"varint,5,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *NamespaceCallbackResponse) Reset() {
	*x = NamespaceCallbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceCallbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceCallbackResponse) ProtoMessage() {}

func (x *NamespaceCallbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceCallbackResponse.ProtoReflect.Descriptor instead.
func (*NamespaceCallbackResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{29}
}

func (x *NamespaceCallbackResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NamespaceCallbackResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NamespaceCallbackResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *NamespaceCallbackResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *NamespaceCallbackResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type UpdateNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string         `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string         `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace   string         `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Labels      []*Label       `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	Annotations []*Annotation  `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty"`
	Quota       *ResourceQuota `protobuf:"bytes,6,opt,name=quota,proto3" json:"quota,omitempty"`
}

func (x *UpdateNamespaceRequest) Reset() {
	*x = UpdateNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNamespaceRequest) ProtoMessage() {}

func (x *UpdateNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNamespaceRequest.ProtoReflect.Descriptor instead.
func (*UpdateNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateNamespaceRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *UpdateNamespaceRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *UpdateNamespaceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateNamespaceRequest) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateNamespaceRequest) GetAnnotations() []*Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *UpdateNamespaceRequest) GetQuota() *ResourceQuota {
	if x != nil {
		return x.Quota
	}
	return nil
}

type UpdateNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID      string `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *Perms `protobuf:"bytes,4,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *UpdateNamespaceResponse) Reset() {
	*x = UpdateNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNamespaceResponse) ProtoMessage() {}

func (x *UpdateNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNamespaceResponse.ProtoReflect.Descriptor instead.
func (*UpdateNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateNamespaceResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateNamespaceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateNamespaceResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *UpdateNamespaceResponse) GetWebAnnotations() *Perms {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type GetNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace   string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *GetNamespaceRequest) Reset() {
	*x = GetNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamespaceRequest) ProtoMessage() {}

func (x *GetNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamespaceRequest.ProtoReflect.Descriptor instead.
func (*GetNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{32}
}

func (x *GetNamespaceRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *GetNamespaceRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *GetNamespaceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type GetNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           *NamespaceData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RequestID      string         `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *Perms         `protobuf:"bytes,5,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetNamespaceResponse) Reset() {
	*x = GetNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamespaceResponse) ProtoMessage() {}

func (x *GetNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamespaceResponse.ProtoReflect.Descriptor instead.
func (*GetNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{33}
}

func (x *GetNamespaceResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetNamespaceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetNamespaceResponse) GetData() *NamespaceData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetNamespaceResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *GetNamespaceResponse) GetWebAnnotations() *Perms {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ListNamespacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
}

func (x *ListNamespacesRequest) Reset() {
	*x = ListNamespacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespacesRequest) ProtoMessage() {}

func (x *ListNamespacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespacesRequest.ProtoReflect.Descriptor instead.
func (*ListNamespacesRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{34}
}

func (x *ListNamespacesRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *ListNamespacesRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

type ListNamespacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           []*NamespaceData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	RequestID      string           `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *Perms           `protobuf:"bytes,5,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListNamespacesResponse) Reset() {
	*x = ListNamespacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespacesResponse) ProtoMessage() {}

func (x *ListNamespacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespacesResponse.ProtoReflect.Descriptor instead.
func (*ListNamespacesResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{35}
}

func (x *ListNamespacesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListNamespacesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListNamespacesResponse) GetData() []*NamespaceData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListNamespacesResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ListNamespacesResponse) GetWebAnnotations() *Perms {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ListNativeNamespacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectIDOrCode string `protobuf:"bytes,1,opt,name=projectIDOrCode,proto3" json:"projectIDOrCode,omitempty"`
	ClusterID       string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
}

func (x *ListNativeNamespacesRequest) Reset() {
	*x = ListNativeNamespacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNativeNamespacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNativeNamespacesRequest) ProtoMessage() {}

func (x *ListNativeNamespacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNativeNamespacesRequest.ProtoReflect.Descriptor instead.
func (*ListNativeNamespacesRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{36}
}

func (x *ListNativeNamespacesRequest) GetProjectIDOrCode() string {
	if x != nil {
		return x.ProjectIDOrCode
	}
	return ""
}

func (x *ListNativeNamespacesRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

type ListNativeNamespacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           []*NativeNamespaceData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	RequestID      string                 `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *Perms                 `protobuf:"bytes,5,opt,name=web_annotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListNativeNamespacesResponse) Reset() {
	*x = ListNativeNamespacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNativeNamespacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNativeNamespacesResponse) ProtoMessage() {}

func (x *ListNativeNamespacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNativeNamespacesResponse.ProtoReflect.Descriptor instead.
func (*ListNativeNamespacesResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{37}
}

func (x *ListNativeNamespacesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListNativeNamespacesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListNativeNamespacesResponse) GetData() []*NativeNamespaceData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListNativeNamespacesResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ListNativeNamespacesResponse) GetWebAnnotations() *Perms {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type DeleteNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace   string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *DeleteNamespaceRequest) Reset() {
	*x = DeleteNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNamespaceRequest) ProtoMessage() {}

func (x *DeleteNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNamespaceRequest.ProtoReflect.Descriptor instead.
func (*DeleteNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteNamespaceRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *DeleteNamespaceRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *DeleteNamespaceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type DeleteNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data      string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RequestID string `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Perms     *Perms `protobuf:"bytes,5,opt,name=perms,proto3" json:"perms,omitempty"`
}

func (x *DeleteNamespaceResponse) Reset() {
	*x = DeleteNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNamespaceResponse) ProtoMessage() {}

func (x *DeleteNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNamespaceResponse.ProtoReflect.Descriptor instead.
func (*DeleteNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{39}
}

func (x *DeleteNamespaceResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteNamespaceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteNamespaceResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *DeleteNamespaceResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *DeleteNamespaceResponse) GetPerms() *Perms {
	if x != nil {
		return x.Perms
	}
	return nil
}

type NamespaceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid              string           `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name             string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status           string           `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime       string           `protobuf:"bytes,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Quota            *ResourceQuota   `protobuf:"bytes,5,opt,name=quota,proto3" json:"quota,omitempty"`
	Used             *ResourceQuota   `protobuf:"bytes,6,opt,name=used,proto3" json:"used,omitempty"`
	CpuUseRate       float32          `protobuf:"fixed32,7,opt,name=cpuUseRate,proto3" json:"cpuUseRate,omitempty"`
	MemoryUseRate    float32          `protobuf:"fixed32,8,opt,name=memoryUseRate,proto3" json:"memoryUseRate,omitempty"`
	Labels           []*Label         `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty"`
	Annotations      []*Annotation    `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty"`
	Variables        []*VariableValue `protobuf:"bytes,11,rep,name=variables,proto3" json:"variables,omitempty"`
	ItsmTicketSN     string           `protobuf:"bytes,12,opt,name=itsmTicketSN,proto3" json:"itsmTicketSN,omitempty"`
	ItsmTicketStatus string           `protobuf:"bytes,13,opt,name=itsmTicketStatus,proto3" json:"itsmTicketStatus,omitempty"`
	ItsmTicketURL    string           `protobuf:"bytes,14,opt,name=itsmTicketURL,proto3" json:"itsmTicketURL,omitempty"`
	ItsmTicketType   string           `protobuf:"bytes,15,opt,name=itsmTicketType,proto3" json:"itsmTicketType,omitempty"`
}

func (x *NamespaceData) Reset() {
	*x = NamespaceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceData) ProtoMessage() {}

func (x *NamespaceData) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceData.ProtoReflect.Descriptor instead.
func (*NamespaceData) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{40}
}

func (x *NamespaceData) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *NamespaceData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamespaceData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NamespaceData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *NamespaceData) GetQuota() *ResourceQuota {
	if x != nil {
		return x.Quota
	}
	return nil
}

func (x *NamespaceData) GetUsed() *ResourceQuota {
	if x != nil {
		return x.Used
	}
	return nil
}

func (x *NamespaceData) GetCpuUseRate() float32 {
	if x != nil {
		return x.CpuUseRate
	}
	return 0
}

func (x *NamespaceData) GetMemoryUseRate() float32 {
	if x != nil {
		return x.MemoryUseRate
	}
	return 0
}

func (x *NamespaceData) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NamespaceData) GetAnnotations() []*Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *NamespaceData) GetVariables() []*VariableValue {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *NamespaceData) GetItsmTicketSN() string {
	if x != nil {
		return x.ItsmTicketSN
	}
	return ""
}

func (x *NamespaceData) GetItsmTicketStatus() string {
	if x != nil {
		return x.ItsmTicketStatus
	}
	return ""
}

func (x *NamespaceData) GetItsmTicketURL() string {
	if x != nil {
		return x.ItsmTicketURL
	}
	return ""
}

func (x *NamespaceData) GetItsmTicketType() string {
	if x != nil {
		return x.ItsmTicketType
	}
	return ""
}

type NativeNamespaceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status      string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime  string `protobuf:"bytes,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	ProjectID   string `protobuf:"bytes,5,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ProjectCode string `protobuf:"bytes,6,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
}

func (x *NativeNamespaceData) Reset() {
	*x = NativeNamespaceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeNamespaceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeNamespaceData) ProtoMessage() {}

func (x *NativeNamespaceData) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeNamespaceData.ProtoReflect.Descriptor instead.
func (*NativeNamespaceData) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{41}
}

func (x *NativeNamespaceData) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *NativeNamespaceData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NativeNamespaceData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NativeNamespaceData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *NativeNamespaceData) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *NativeNamespaceData) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{42}
}

func (x *Label) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Label) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Annotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Annotation) Reset() {
	*x = Annotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotation) ProtoMessage() {}

func (x *Annotation) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotation.ProtoReflect.Descriptor instead.
func (*Annotation) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{43}
}

func (x *Annotation) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Annotation) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ResourceQuota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuRequests    string `protobuf:"bytes,1,opt,name=cpuRequests,proto3" json:"cpuRequests,omitempty"`
	MemoryRequests string `protobuf:"bytes,2,opt,name=memoryRequests,proto3" json:"memoryRequests,omitempty"`
	CpuLimits      string `protobuf:"bytes,3,opt,name=cpuLimits,proto3" json:"cpuLimits,omitempty"`
	MemoryLimits   string `protobuf:"bytes,4,opt,name=memoryLimits,proto3" json:"memoryLimits,omitempty"`
}

func (x *ResourceQuota) Reset() {
	*x = ResourceQuota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceQuota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceQuota) ProtoMessage() {}

func (x *ResourceQuota) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceQuota.ProtoReflect.Descriptor instead.
func (*ResourceQuota) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{44}
}

func (x *ResourceQuota) GetCpuRequests() string {
	if x != nil {
		return x.CpuRequests
	}
	return ""
}

func (x *ResourceQuota) GetMemoryRequests() string {
	if x != nil {
		return x.MemoryRequests
	}
	return ""
}

func (x *ResourceQuota) GetCpuLimits() string {
	if x != nil {
		return x.CpuLimits
	}
	return ""
}

func (x *ResourceQuota) GetMemoryLimits() string {
	if x != nil {
		return x.MemoryLimits
	}
	return ""
}

type CreateVariableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Key         string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Scope       string `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	Default     string `protobuf:"bytes,5,opt,name=default,proto3" json:"default,omitempty"`
	Desc        string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *CreateVariableRequest) Reset() {
	*x = CreateVariableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVariableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVariableRequest) ProtoMessage() {}

func (x *CreateVariableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVariableRequest.ProtoReflect.Descriptor instead.
func (*CreateVariableRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{45}
}

func (x *CreateVariableRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *CreateVariableRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVariableRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CreateVariableRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *CreateVariableRequest) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *CreateVariableRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type CreateVariableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data      *CreateVariableData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RequestID string              `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *CreateVariableResponse) Reset() {
	*x = CreateVariableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVariableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVariableResponse) ProtoMessage() {}

func (x *CreateVariableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVariableResponse.ProtoReflect.Descriptor instead.
func (*CreateVariableResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{46}
}

func (x *CreateVariableResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateVariableResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateVariableResponse) GetData() *CreateVariableData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateVariableResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

type UpdateVariableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	VariableID  string `protobuf:"bytes,2,opt,name=variableID,proto3" json:"variableID,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Key         string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Scope       string `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
	Default     string `protobuf:"bytes,6,opt,name=default,proto3" json:"default,omitempty"`
	Desc        string `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *UpdateVariableRequest) Reset() {
	*x = UpdateVariableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVariableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVariableRequest) ProtoMessage() {}

func (x *UpdateVariableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVariableRequest.ProtoReflect.Descriptor instead.
func (*UpdateVariableRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{47}
}

func (x *UpdateVariableRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *UpdateVariableRequest) GetVariableID() string {
	if x != nil {
		return x.VariableID
	}
	return ""
}

func (x *UpdateVariableRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateVariableRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UpdateVariableRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UpdateVariableRequest) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *UpdateVariableRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type UpdateVariableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data      *UpdateVariableData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RequestID string              `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *UpdateVariableResponse) Reset() {
	*x = UpdateVariableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVariableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVariableResponse) ProtoMessage() {}

func (x *UpdateVariableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVariableResponse.ProtoReflect.Descriptor instead.
func (*UpdateVariableResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{48}
}

func (x *UpdateVariableResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateVariableResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateVariableResponse) GetData() *UpdateVariableData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateVariableResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

type ListVariableDefinitionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	Scope       string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	SearchKey   string `protobuf:"bytes,3,opt,name=searchKey,proto3" json:"searchKey,omitempty"`
	Offset      int64  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit       int64  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	All         bool   `protobuf:"varint,6,opt,name=all,proto3" json:"all,omitempty"`
}

func (x *ListVariableDefinitionsRequest) Reset() {
	*x = ListVariableDefinitionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVariableDefinitionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVariableDefinitionsRequest) ProtoMessage() {}

func (x *ListVariableDefinitionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVariableDefinitionsRequest.ProtoReflect.Descriptor instead.
func (*ListVariableDefinitionsRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{49}
}

func (x *ListVariableDefinitionsRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *ListVariableDefinitionsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ListVariableDefinitionsRequest) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

func (x *ListVariableDefinitionsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListVariableDefinitionsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListVariableDefinitionsRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type ListVariableDefinitionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32                      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string                      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data      *ListVariableDefinitionData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RequestID string                      `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *ListVariableDefinitionsResponse) Reset() {
	*x = ListVariableDefinitionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVariableDefinitionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVariableDefinitionsResponse) ProtoMessage() {}

func (x *ListVariableDefinitionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVariableDefinitionsResponse.ProtoReflect.Descriptor instead.
func (*ListVariableDefinitionsResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{50}
}

func (x *ListVariableDefinitionsResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListVariableDefinitionsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListVariableDefinitionsResponse) GetData() *ListVariableDefinitionData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListVariableDefinitionsResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

type DeleteVariableDefinitionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	IdList      string `protobuf:"bytes,2,opt,name=idList,proto3" json:"idList,omitempty"`
}

func (x *DeleteVariableDefinitionsRequest) Reset() {
	*x = DeleteVariableDefinitionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVariableDefinitionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVariableDefinitionsRequest) ProtoMessage() {}

func (x *DeleteVariableDefinitionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVariableDefinitionsRequest.ProtoReflect.Descriptor instead.
func (*DeleteVariableDefinitionsRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{51}
}

func (x *DeleteVariableDefinitionsRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *DeleteVariableDefinitionsRequest) GetIdList() string {
	if x != nil {
		return x.IdList
	}
	return ""
}

type DeleteVariableDefinitionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32                         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string                         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data      *DeleteVariableDefinitionsData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RequestID string                         `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *DeleteVariableDefinitionsResponse) Reset() {
	*x = DeleteVariableDefinitionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVariableDefinitionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVariableDefinitionsResponse) ProtoMessage() {}

func (x *DeleteVariableDefinitionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVariableDefinitionsResponse.ProtoReflect.Descriptor instead.
func (*DeleteVariableDefinitionsResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{52}
}

func (x *DeleteVariableDefinitionsResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteVariableDefinitionsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteVariableDefinitionsResponse) GetData() *DeleteVariableDefinitionsData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeleteVariableDefinitionsResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

type ListClustersVariablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	VariableID  string `protobuf:"bytes,2,opt,name=variableID,proto3" json:"variableID,omitempty"`
}

func (x *ListClustersVariablesRequest) Reset() {
	*x = ListClustersVariablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClustersVariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersVariablesRequest) ProtoMessage() {}

func (x *ListClustersVariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersVariablesRequest.ProtoReflect.Descriptor instead.
func (*ListClustersVariablesRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{53}
}

func (x *ListClustersVariablesRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *ListClustersVariablesRequest) GetVariableID() string {
	if x != nil {
		return x.VariableID
	}
	return ""
}

type ListClustersVariablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string                  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data      *ListVariableValuesData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RequestID string                  `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *ListClustersVariablesResponse) Reset() {
	*x = ListClustersVariablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClustersVariablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersVariablesResponse) ProtoMessage() {}

func (x *ListClustersVariablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersVariablesResponse.ProtoReflect.Descriptor instead.
func (*ListClustersVariablesResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{54}
}

func (x *ListClustersVariablesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListClustersVariablesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListClustersVariablesResponse) GetData() *ListVariableValuesData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListClustersVariablesResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

type ListNamespacesVariablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	VariableID  string `protobuf:"bytes,2,opt,name=variableID,proto3" json:"variableID,omitempty"`
}

func (x *ListNamespacesVariablesRequest) Reset() {
	*x = ListNamespacesVariablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespacesVariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespacesVariablesRequest) ProtoMessage() {}

func (x *ListNamespacesVariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespacesVariablesRequest.ProtoReflect.Descriptor instead.
func (*ListNamespacesVariablesRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{55}
}

func (x *ListNamespacesVariablesRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *ListNamespacesVariablesRequest) GetVariableID() string {
	if x != nil {
		return x.VariableID
	}
	return ""
}

type ListNamespacesVariablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string                  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data      *ListVariableValuesData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RequestID string                  `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *ListNamespacesVariablesResponse) Reset() {
	*x = ListNamespacesVariablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespacesVariablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespacesVariablesResponse) ProtoMessage() {}

func (x *ListNamespacesVariablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespacesVariablesResponse.ProtoReflect.Descriptor instead.
func (*ListNamespacesVariablesResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{56}
}

func (x *ListNamespacesVariablesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListNamespacesVariablesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListNamespacesVariablesResponse) GetData() *ListVariableValuesData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListNamespacesVariablesResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

type UpdateClustersVariablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string           `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	VariableID  string           `protobuf:"bytes,2,opt,name=variableID,proto3" json:"variableID,omitempty"`
	Data        []*VariableValue `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateClustersVariablesRequest) Reset() {
	*x = UpdateClustersVariablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClustersVariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClustersVariablesRequest) ProtoMessage() {}

func (x *UpdateClustersVariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClustersVariablesRequest.ProtoReflect.Descriptor instead.
func (*UpdateClustersVariablesRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{57}
}

func (x *UpdateClustersVariablesRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *UpdateClustersVariablesRequest) GetVariableID() string {
	if x != nil {
		return x.VariableID
	}
	return ""
}

func (x *UpdateClustersVariablesRequest) GetData() []*VariableValue {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateClustersVariablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID string `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *UpdateClustersVariablesResponse) Reset() {
	*x = UpdateClustersVariablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClustersVariablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClustersVariablesResponse) ProtoMessage() {}

func (x *UpdateClustersVariablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClustersVariablesResponse.ProtoReflect.Descriptor instead.
func (*UpdateClustersVariablesResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{58}
}

func (x *UpdateClustersVariablesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateClustersVariablesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateClustersVariablesResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

type UpdateNamespacesVariablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string           `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	VariableID  string           `protobuf:"bytes,2,opt,name=variableID,proto3" json:"variableID,omitempty"`
	Data        []*VariableValue `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateNamespacesVariablesRequest) Reset() {
	*x = UpdateNamespacesVariablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNamespacesVariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNamespacesVariablesRequest) ProtoMessage() {}

func (x *UpdateNamespacesVariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNamespacesVariablesRequest.ProtoReflect.Descriptor instead.
func (*UpdateNamespacesVariablesRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{59}
}

func (x *UpdateNamespacesVariablesRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *UpdateNamespacesVariablesRequest) GetVariableID() string {
	if x != nil {
		return x.VariableID
	}
	return ""
}

func (x *UpdateNamespacesVariablesRequest) GetData() []*VariableValue {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateNamespacesVariablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID string `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *UpdateNamespacesVariablesResponse) Reset() {
	*x = UpdateNamespacesVariablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNamespacesVariablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNamespacesVariablesResponse) ProtoMessage() {}

func (x *UpdateNamespacesVariablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNamespacesVariablesResponse.ProtoReflect.Descriptor instead.
func (*UpdateNamespacesVariablesResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{60}
}

func (x *UpdateNamespacesVariablesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateNamespacesVariablesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateNamespacesVariablesResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

type ListClusterVariablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
}

func (x *ListClusterVariablesRequest) Reset() {
	*x = ListClusterVariablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterVariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterVariablesRequest) ProtoMessage() {}

func (x *ListClusterVariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterVariablesRequest.ProtoReflect.Descriptor instead.
func (*ListClusterVariablesRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{61}
}

func (x *ListClusterVariablesRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *ListClusterVariablesRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

type ListClusterVariablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string                  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data      *ListVariableValuesData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RequestID string                  `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *ListClusterVariablesResponse) Reset() {
	*x = ListClusterVariablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterVariablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterVariablesResponse) ProtoMessage() {}

func (x *ListClusterVariablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterVariablesResponse.ProtoReflect.Descriptor instead.
func (*ListClusterVariablesResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{62}
}

func (x *ListClusterVariablesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListClusterVariablesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListClusterVariablesResponse) GetData() *ListVariableValuesData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListClusterVariablesResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

type ListNamespaceVariablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace   string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *ListNamespaceVariablesRequest) Reset() {
	*x = ListNamespaceVariablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespaceVariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespaceVariablesRequest) ProtoMessage() {}

func (x *ListNamespaceVariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespaceVariablesRequest.ProtoReflect.Descriptor instead.
func (*ListNamespaceVariablesRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{63}
}

func (x *ListNamespaceVariablesRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *ListNamespaceVariablesRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ListNamespaceVariablesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ListNamespaceVariablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string                  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data      *ListVariableValuesData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RequestID string                  `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *ListNamespaceVariablesResponse) Reset() {
	*x = ListNamespaceVariablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespaceVariablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespaceVariablesResponse) ProtoMessage() {}

func (x *ListNamespaceVariablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespaceVariablesResponse.ProtoReflect.Descriptor instead.
func (*ListNamespaceVariablesResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{64}
}

func (x *ListNamespaceVariablesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListNamespaceVariablesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListNamespaceVariablesResponse) GetData() *ListVariableValuesData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListNamespaceVariablesResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

type UpdateClusterVariablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string           `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string           `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Data        []*VariableValue `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateClusterVariablesRequest) Reset() {
	*x = UpdateClusterVariablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterVariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterVariablesRequest) ProtoMessage() {}

func (x *UpdateClusterVariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterVariablesRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterVariablesRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{65}
}

func (x *UpdateClusterVariablesRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *UpdateClusterVariablesRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *UpdateClusterVariablesRequest) GetData() []*VariableValue {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateClusterVariablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID string `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *UpdateClusterVariablesResponse) Reset() {
	*x = UpdateClusterVariablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterVariablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterVariablesResponse) ProtoMessage() {}

func (x *UpdateClusterVariablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterVariablesResponse.ProtoReflect.Descriptor instead.
func (*UpdateClusterVariablesResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{66}
}

func (x *UpdateClusterVariablesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateClusterVariablesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateClusterVariablesResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

type UpdateNamespaceVariablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string           `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string           `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace   string           `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Data        []*VariableValue `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateNamespaceVariablesRequest) Reset() {
	*x = UpdateNamespaceVariablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNamespaceVariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNamespaceVariablesRequest) ProtoMessage() {}

func (x *UpdateNamespaceVariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNamespaceVariablesRequest.ProtoReflect.Descriptor instead.
func (*UpdateNamespaceVariablesRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{67}
}

func (x *UpdateNamespaceVariablesRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *UpdateNamespaceVariablesRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *UpdateNamespaceVariablesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateNamespaceVariablesRequest) GetData() []*VariableValue {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateNamespaceVariablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID string `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *UpdateNamespaceVariablesResponse) Reset() {
	*x = UpdateNamespaceVariablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNamespaceVariablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNamespaceVariablesResponse) ProtoMessage() {}

func (x *UpdateNamespaceVariablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNamespaceVariablesResponse.ProtoReflect.Descriptor instead.
func (*UpdateNamespaceVariablesResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{68}
}

func (x *UpdateNamespaceVariablesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateNamespaceVariablesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateNamespaceVariablesResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

type ImportVariablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string                `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	Data        []*ImportVariableData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ImportVariablesRequest) Reset() {
	*x = ImportVariablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportVariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportVariablesRequest) ProtoMessage() {}

func (x *ImportVariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportVariablesRequest.ProtoReflect.Descriptor instead.
func (*ImportVariablesRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{69}
}

func (x *ImportVariablesRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *ImportVariablesRequest) GetData() []*ImportVariableData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ImportVariablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID string `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *ImportVariablesResponse) Reset() {
	*x = ImportVariablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportVariablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportVariablesResponse) ProtoMessage() {}

func (x *ImportVariablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportVariablesResponse.ProtoReflect.Descriptor instead.
func (*ImportVariablesResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{70}
}

func (x *ImportVariablesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ImportVariablesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ImportVariablesResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

type RenderVariablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode string `protobuf:"bytes,1,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	ClusterID   string `protobuf:"bytes,2,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace   string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	KeyList     string `protobuf:"bytes,4,opt,name=keyList,proto3" json:"keyList,omitempty"`
}

func (x *RenderVariablesRequest) Reset() {
	*x = RenderVariablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderVariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderVariablesRequest) ProtoMessage() {}

func (x *RenderVariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderVariablesRequest.ProtoReflect.Descriptor instead.
func (*RenderVariablesRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{71}
}

func (x *RenderVariablesRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *RenderVariablesRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *RenderVariablesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RenderVariablesRequest) GetKeyList() string {
	if x != nil {
		return x.KeyList
	}
	return ""
}

type RenderVariablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data      []*VariableValue `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	RequestID string           `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *RenderVariablesResponse) Reset() {
	*x = RenderVariablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderVariablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderVariablesResponse) ProtoMessage() {}

func (x *RenderVariablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderVariablesResponse.ProtoReflect.Descriptor instead.
func (*RenderVariablesResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{72}
}

func (x *RenderVariablesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RenderVariablesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RenderVariablesResponse) GetData() []*VariableValue {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RenderVariablesResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

type VariableDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Key          string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Default      string `protobuf:"bytes,4,opt,name=default,proto3" json:"default,omitempty"`
	DefaultValue string `protobuf:"bytes,5,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
	Scope        string `protobuf:"bytes,6,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeName    string `protobuf:"bytes,7,opt,name=scopeName,proto3" json:"scopeName,omitempty"`
	Category     string `protobuf:"bytes,8,opt,name=category,proto3" json:"category,omitempty"`
	CategoryName string `protobuf:"bytes,9,opt,name=categoryName,proto3" json:"categoryName,omitempty"`
	Desc         string `protobuf:"bytes,10,opt,name=desc,proto3" json:"desc,omitempty"`
	Created      string `protobuf:"bytes,11,opt,name=created,proto3" json:"created,omitempty"`
	Updated      string `protobuf:"bytes,12,opt,name=updated,proto3" json:"updated,omitempty"`
	Creator      string `protobuf:"bytes,13,opt,name=creator,proto3" json:"creator,omitempty"`
	Updater      string `protobuf:"bytes,14,opt,name=updater,proto3" json:"updater,omitempty"`
}

func (x *VariableDefinition) Reset() {
	*x = VariableDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableDefinition) ProtoMessage() {}

func (x *VariableDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableDefinition.ProtoReflect.Descriptor instead.
func (*VariableDefinition) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{73}
}

func (x *VariableDefinition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VariableDefinition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *VariableDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VariableDefinition) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *VariableDefinition) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *VariableDefinition) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *VariableDefinition) GetScopeName() string {
	if x != nil {
		return x.ScopeName
	}
	return ""
}

func (x *VariableDefinition) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *VariableDefinition) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *VariableDefinition) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *VariableDefinition) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *VariableDefinition) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

func (x *VariableDefinition) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *VariableDefinition) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

type VariableValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Key         string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ClusterID   string `protobuf:"bytes,4,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ClusterName string `protobuf:"bytes,5,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Namespace   string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Value       string `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	Scope       string `protobuf:"bytes,8,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *VariableValue) Reset() {
	*x = VariableValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableValue) ProtoMessage() {}

func (x *VariableValue) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableValue.ProtoReflect.Descriptor instead.
func (*VariableValue) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{74}
}

func (x *VariableValue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VariableValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *VariableValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VariableValue) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *VariableValue) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *VariableValue) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *VariableValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *VariableValue) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type CreateVariableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectCode string `protobuf:"bytes,2,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Key         string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Scope       string `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
	Default     string `protobuf:"bytes,6,opt,name=default,proto3" json:"default,omitempty"`
	Desc        string `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc,omitempty"`
	Category    string `protobuf:"bytes,8,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *CreateVariableData) Reset() {
	*x = CreateVariableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVariableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVariableData) ProtoMessage() {}

func (x *CreateVariableData) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVariableData.ProtoReflect.Descriptor instead.
func (*CreateVariableData) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{75}
}

func (x *CreateVariableData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateVariableData) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *CreateVariableData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVariableData) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CreateVariableData) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *CreateVariableData) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *CreateVariableData) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CreateVariableData) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type UpdateVariableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectCode string `protobuf:"bytes,2,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Key         string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Scope       string `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
	Default     string `protobuf:"bytes,6,opt,name=default,proto3" json:"default,omitempty"`
	Desc        string `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc,omitempty"`
	Category    string `protobuf:"bytes,8,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *UpdateVariableData) Reset() {
	*x = UpdateVariableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVariableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVariableData) ProtoMessage() {}

func (x *UpdateVariableData) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVariableData.ProtoReflect.Descriptor instead.
func (*UpdateVariableData) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{76}
}

func (x *UpdateVariableData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateVariableData) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *UpdateVariableData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateVariableData) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UpdateVariableData) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UpdateVariableData) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *UpdateVariableData) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *UpdateVariableData) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type ListVariableDefinitionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   uint32                `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Results []*VariableDefinition `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListVariableDefinitionData) Reset() {
	*x = ListVariableDefinitionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVariableDefinitionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVariableDefinitionData) ProtoMessage() {}

func (x *ListVariableDefinitionData) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVariableDefinitionData.ProtoReflect.Descriptor instead.
func (*ListVariableDefinitionData) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{77}
}

func (x *ListVariableDefinitionData) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListVariableDefinitionData) GetResults() []*VariableDefinition {
	if x != nil {
		return x.Results
	}
	return nil
}

type DeleteVariableDefinitionsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DeleteVariableDefinitionsData) Reset() {
	*x = DeleteVariableDefinitionsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVariableDefinitionsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVariableDefinitionsData) ProtoMessage() {}

func (x *DeleteVariableDefinitionsData) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVariableDefinitionsData.ProtoReflect.Descriptor instead.
func (*DeleteVariableDefinitionsData) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{78}
}

func (x *DeleteVariableDefinitionsData) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ListVariableValuesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   uint32           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Results []*VariableValue `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListVariableValuesData) Reset() {
	*x = ListVariableValuesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVariableValuesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVariableValuesData) ProtoMessage() {}

func (x *ListVariableValuesData) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVariableValuesData.ProtoReflect.Descriptor instead.
func (*ListVariableValuesData) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{79}
}

func (x *ListVariableValuesData) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListVariableValuesData) GetResults() []*VariableValue {
	if x != nil {
		return x.Results
	}
	return nil
}

type ImportVariableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Key   string                   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Scope string                   `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	Value string                   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Desc  string                   `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	Vars  []*ImportVariableVarData `protobuf:"bytes,6,rep,name=vars,proto3" json:"vars,omitempty"`
}

func (x *ImportVariableData) Reset() {
	*x = ImportVariableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportVariableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportVariableData) ProtoMessage() {}

func (x *ImportVariableData) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportVariableData.ProtoReflect.Descriptor instead.
func (*ImportVariableData) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{80}
}

func (x *ImportVariableData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImportVariableData) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ImportVariableData) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ImportVariableData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ImportVariableData) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ImportVariableData) GetVars() []*ImportVariableVarData {
	if x != nil {
		return x.Vars
	}
	return nil
}

type ImportVariableVarData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Value     string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ImportVariableVarData) Reset() {
	*x = ImportVariableVarData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportVariableVarData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportVariableVarData) ProtoMessage() {}

func (x *ImportVariableVarData) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportVariableVarData.ProtoReflect.Descriptor instead.
func (*ImportVariableVarData) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{81}
}

func (x *ImportVariableVarData) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ImportVariableVarData) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ImportVariableVarData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type HealthzRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthzRequest) Reset() {
	*x = HealthzRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthzRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthzRequest) ProtoMessage() {}

func (x *HealthzRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthzRequest.ProtoReflect.Descriptor instead.
func (*HealthzRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{82}
}

type HealthzResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data      *HealthzData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RequestID string       `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *HealthzResponse) Reset() {
	*x = HealthzResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthzResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthzResponse) ProtoMessage() {}

func (x *HealthzResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthzResponse.ProtoReflect.Descriptor instead.
func (*HealthzResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{83}
}

func (x *HealthzResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *HealthzResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HealthzResponse) GetData() *HealthzData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *HealthzResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

type HealthzData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	MongoStatus string `protobuf:"bytes,2,opt,name=mongoStatus,proto3" json:"mongoStatus,omitempty"`
}

func (x *HealthzData) Reset() {
	*x = HealthzData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthzData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthzData) ProtoMessage() {}

func (x *HealthzData) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthzData.ProtoReflect.Descriptor instead.
func (*HealthzData) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{84}
}

func (x *HealthzData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HealthzData) GetMongoStatus() string {
	if x != nil {
		return x.MongoStatus
	}
	return ""
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{85}
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data      string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RequestID string `protobuf:"bytes,4,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{86}
}

func (x *PingResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PingResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PingResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *PingResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

type ListProjectsForIAMResp_Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProjectID     string `protobuf:"bytes,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ProjectCode   string `protobuf:"bytes,3,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	BusinessID    string `protobuf:"bytes,4,opt,name=businessID,proto3" json:"businessID,omitempty"`
	Managers      string `protobuf:"bytes,5,opt,name=managers,proto3" json:"managers,omitempty"`
	BkmSpaceBizID int32  `protobuf:"varint,6,opt,name=bkmSpaceBizID,proto3" json:"bkmSpaceBizID,omitempty"`
	BkmSpaceName  string `protobuf:"bytes,7,opt,name=bkmSpaceName,proto3" json:"bkmSpaceName,omitempty"`
}

func (x *ListProjectsForIAMResp_Project) Reset() {
	*x = ListProjectsForIAMResp_Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcsproject_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectsForIAMResp_Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsForIAMResp_Project) ProtoMessage() {}

func (x *ListProjectsForIAMResp_Project) ProtoReflect() protoreflect.Message {
	mi := &file_bcsproject_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsForIAMResp_Project.ProtoReflect.Descriptor instead.
func (*ListProjectsForIAMResp_Project) Descriptor() ([]byte, []int) {
	return file_bcsproject_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ListProjectsForIAMResp_Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListProjectsForIAMResp_Project) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ListProjectsForIAMResp_Project) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *ListProjectsForIAMResp_Project) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *ListProjectsForIAMResp_Project) GetManagers() string {
	if x != nil {
		return x.Managers
	}
	return ""
}

func (x *ListProjectsForIAMResp_Project) GetBkmSpaceBizID() int32 {
	if x != nil {
		return x.BkmSpaceBizID
	}
	return 0
}

func (x *ListProjectsForIAMResp_Project) GetBkmSpaceName() string {
	if x != nil {
		return x.BkmSpaceName
	}
	return ""
}

var File_bcsproject_proto protoreflect.FileDescriptor

var file_bcsproject_proto_rawDesc = []byte{
	0x0a, 0x10, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x84, 0x11, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x32, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41,
	0x1a, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x0f, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x32, 0x0f, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0xe8, 0x80, 0x85, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x5c, 0x0a,
	0x08, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x40, 0x92, 0x41, 0x3d, 0x2a, 0x08, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x32, 0x31,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe4, 0xba, 0xba, 0xe5,
	0x91, 0x98, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85, 0x2b, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x80,
	0x85, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x12, 0x6b, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4d,
	0x92, 0x41, 0x4a, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x3d,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80,
	0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8,
	0xba, 0x33, 0x32, 0xe4, 0xbd, 0x8d, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0x2c,
	0x20, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe7, 0x94, 0x9f, 0xe6, 0x88, 0x90, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x4d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x36, 0x2a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x32, 0x2e, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d,
	0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac,
	0xa6, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x78, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41,
	0x53, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x44,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0xe8, 0x8b, 0xb1,
	0xe6, 0x96, 0x87, 0xe7, 0xbc, 0xa9, 0xe5, 0x86, 0x99, 0x29, 0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5,
	0xb1, 0x80, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6,
	0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x33, 0x32, 0xe5, 0xad,
	0x97, 0xe7, 0xac, 0xa6, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x76, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x42, 0x4b, 0x52, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x5a, 0x92, 0x41, 0x57, 0x2a, 0x08, 0x75, 0x73, 0x65, 0x42, 0x4b, 0x52,
	0x65, 0x73, 0x32, 0x4b, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8,
	0xe8, 0x93, 0x9d, 0xe9, 0xb2, 0xb8, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe7, 0x9a, 0x84, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x2c, 0x20, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81,
	0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xae, 0xa1, 0xe8,
	0xb4, 0xb9, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x42, 0x4b, 0x52, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38,
	0x92, 0x41, 0x35, 0x2a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x32, 0x26, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x2c, 0x20,
	0xe5, 0xb0, 0xbd, 0xe9, 0x87, 0x8f, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5, 0x9c, 0xa8, 0x31,
	0x30, 0x30, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x09, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x35, 0x92, 0x41, 0x32, 0x2a, 0x09, 0x69,
	0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x25, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xb7, 0xb2, 0xe7, 0xbb, 0x8f, 0xe4, 0xb8, 0x8b, 0xe7,
	0xba, 0xbf, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x09, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x32, 0x26, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0xad, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe9,
	0x80, 0x89, 0x6b, 0x38, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x5b, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x2a, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbb,
	0x91, 0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0x84, 0xe8, 0x93, 0x9d, 0xe9, 0xb2, 0xb8, 0x43, 0x4d, 0x44,
	0x42, 0xe4, 0xb8, 0xad, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x50,
	0x0a, 0x08, 0x69, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x34, 0x92, 0x41, 0x31, 0x2a, 0x08, 0x69, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x32,
	0x25, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe4, 0xbf, 0x9d, 0xe5, 0xaf, 0x86,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8,
	0xba, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x69, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x98, 0x01, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x76, 0x92, 0x41, 0x73, 0x2a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x32, 0x6b, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c,
	0x20, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x2c, 0x20, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x30, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe9, 0x80,
	0x89, 0x20, 0x31, 0x3a, 0xe6, 0x89, 0x8b, 0xe6, 0xb8, 0xb8, 0x2c, 0x20, 0x32, 0x3a, 0xe7, 0xab,
	0xaf, 0xe6, 0xb8, 0xb8, 0x2c, 0x20, 0x33, 0x3a, 0xe9, 0xa1, 0xb5, 0xe6, 0xb8, 0xb8, 0x2c, 0x20,
	0x34, 0x3a, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe4, 0xba, 0xa7, 0xe5, 0x93, 0x81, 0x2c, 0x20,
	0x35, 0x3a, 0xe6, 0x94, 0xaf, 0xe6, 0x92, 0x91, 0xe4, 0xba, 0xa7, 0xe5, 0x93, 0x81, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x74, 0x0a, 0x0a, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x54, 0x92, 0x41, 0x51, 0x2a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x32, 0x43, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5, 0xad, 0x97, 0xe6,
	0xae, 0xb5, 0x2c, 0x20, 0x31, 0x3a, 0xe7, 0x89, 0xa9, 0xe7, 0x90, 0x86, 0xe6, 0x9c, 0xba, 0xe9,
	0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0x2c, 0x20, 0x32, 0x3a, 0xe5, 0xae, 0xb9, 0xe5, 0x99, 0xa8, 0xe9,
	0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x44, 0x0a, 0x04, 0x42, 0x47, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x30, 0x92, 0x41, 0x2d, 0x2a, 0x04, 0x62, 0x67, 0x49, 0x44, 0x32, 0x25, 0xe4, 0xba, 0x8b, 0xe4,
	0xb8, 0x9a, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x2c, 0x20, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5,
	0xad, 0x97, 0xe6, 0xae, 0xb5, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba,
	0x30, 0x52, 0x04, 0x42, 0x47, 0x49, 0x44, 0x12, 0x50, 0x0a, 0x06, 0x42, 0x47, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x35, 0x2a, 0x06, 0x62, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x32, 0x2b, 0xe4, 0xba, 0x8b, 0xe4, 0xb8, 0x9a, 0xe7, 0xbe, 0xa4, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x20, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5, 0xad, 0x97,
	0xe6, 0xae, 0xb5, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe7, 0xa9,
	0xba, 0x52, 0x06, 0x42, 0x47, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x64, 0x65, 0x70,
	0x74, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x06,
	0x64, 0x65, 0x70, 0x74, 0x49, 0x44, 0x32, 0x22, 0xe9, 0x83, 0xa8, 0xe9, 0x97, 0xa8, 0x49, 0x44,
	0x2c, 0x20, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x2c, 0x20,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x30, 0x52, 0x06, 0x64, 0x65, 0x70, 0x74,
	0x49, 0x44, 0x12, 0x53, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x32, 0x28, 0xe9, 0x83, 0xa8, 0xe9, 0x97, 0xa8, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0x2c, 0x20, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x2c,
	0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x52, 0x08, 0x64,
	0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x08,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x22, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83,
	0x49, 0x44, 0x2c, 0x20, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5,
	0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x30, 0x52, 0x08, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x59, 0x0a, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x36, 0x2a,
	0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x28, 0xe4, 0xb8, 0xad,
	0xe5, 0xbf, 0x83, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x20, 0xe4, 0xbf, 0x9d, 0xe7, 0x95,
	0x99, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4,
	0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x52, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x0c, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x28, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0x84, 0xe8, 0x93, 0x9d, 0xe9, 0xb2,
	0xb8, 0x43, 0x4d, 0x44, 0x42, 0xe4, 0xb8, 0xad, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x42, 0x35, 0x92, 0x41, 0x32, 0x2a,
	0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32,
	0x20, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x56, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0xe7, 0x89, 0xb9, 0xe6, 0x80, 0xa7, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a,
	0xa1, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x3a, 0x25, 0x92, 0x41, 0x22, 0x0a, 0x20, 0x2a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x32, 0x15, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0x9a, 0x84, 0xe5, 0x9f, 0xba, 0xe6,
	0x9c, 0xac, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x22, 0xc5, 0x0e, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97,
	0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32,
	0x0f, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x6b, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4d, 0x92, 0x41,
	0x4a, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x3d, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x94,
	0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0xba, 0x33,
	0x32, 0xe4, 0xbd, 0x8d, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0x2c, 0x20, 0xe8,
	0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe7, 0x94, 0x9f, 0xe6, 0x88, 0x90, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x56, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x92, 0x41, 0x36, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32,
	0x2e, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83,
	0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x02, 0x18, 0x40, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x81,
	0x01, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x5f, 0x92, 0x41, 0x53, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x44, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc,
	0x96, 0xe7, 0xa0, 0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0xbc, 0xa9, 0xe5, 0x86,
	0x99, 0x29, 0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80,
	0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6,
	0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x02, 0x18, 0x40, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x76, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x42, 0x4b, 0x52, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x5a, 0x92, 0x41, 0x57, 0x2a, 0x08, 0x75, 0x73, 0x65, 0x42, 0x4b,
	0x52, 0x65, 0x73, 0x32, 0x4b, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xbd, 0xbf, 0xe7, 0x94,
	0xa8, 0xe8, 0x93, 0x9d, 0xe9, 0xb2, 0xb8, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe7, 0x9a, 0x84,
	0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x2c, 0x20, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6,
	0x81, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe8, 0xae, 0xa1,
	0xe8, 0xb4, 0xb9, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x42, 0x4b, 0x52, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x38, 0x92, 0x41, 0x35, 0x2a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x32, 0x26, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x2c,
	0x20, 0xe5, 0xb0, 0xbd, 0xe9, 0x87, 0x8f, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5, 0x9c, 0xa8,
	0x31, 0x30, 0x30, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x09, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x35, 0x92, 0x41, 0x32, 0x2a, 0x09,
	0x69, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x25, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b,
	0xae, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xb7, 0xb2, 0xe7, 0xbb, 0x8f, 0xe4, 0xb8, 0x8b,
	0xe7, 0xba, 0xbf, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x09, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x58, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0x92, 0x41, 0x2e, 0x2a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x32, 0x26, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0xad, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe5, 0x8f, 0xaf,
	0xe9, 0x80, 0x89, 0x6b, 0x38, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0xfa, 0x42, 0x10, 0x72,
	0x0e, 0x52, 0x00, 0x52, 0x03, 0x6b, 0x38, 0x73, 0x52, 0x05, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x5b, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x0a,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x2a, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0x84, 0xe8, 0x93, 0x9d, 0xe9, 0xb2,
	0xb8, 0x43, 0x4d, 0x44, 0x42, 0xe4, 0xb8, 0xad, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x49, 0x44, 0x12, 0x50, 0x0a, 0x08, 0x69, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x34, 0x92, 0x41, 0x31, 0x2a, 0x08, 0x69, 0x73, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x32, 0x25, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe4, 0xbf,
	0x9d, 0xe5, 0xaf, 0x86, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x69, 0x73, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x76, 0x92, 0x41, 0x73, 0x2a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x6b, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5, 0xad, 0x97, 0xe6, 0xae,
	0xb5, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x30, 0x2c, 0x20, 0xe5,
	0x8f, 0xaf, 0xe9, 0x80, 0x89, 0x20, 0x31, 0x3a, 0xe6, 0x89, 0x8b, 0xe6, 0xb8, 0xb8, 0x2c, 0x20,
	0x32, 0x3a, 0xe7, 0xab, 0xaf, 0xe6, 0xb8, 0xb8, 0x2c, 0x20, 0x33, 0x3a, 0xe9, 0xa1, 0xb5, 0xe6,
	0xb8, 0xb8, 0x2c, 0x20, 0x34, 0x3a, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe4, 0xba, 0xa7, 0xe5,
	0x93, 0x81, 0x2c, 0x20, 0x35, 0x3a, 0xe6, 0x94, 0xaf, 0xe6, 0x92, 0x91, 0xe4, 0xba, 0xa7, 0xe5,
	0x93, 0x81, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x7f, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x5f, 0x92, 0x41, 0x51, 0x2a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x32, 0x43, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe9, 0x83, 0xa8, 0xe7,
	0xbd, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99,
	0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x2c, 0x20, 0x31, 0x3a, 0xe7, 0x89, 0xa9, 0xe7, 0x90, 0x86,
	0xe6, 0x9c, 0xba, 0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0x2c, 0x20, 0x32, 0x3a, 0xe5, 0xae, 0xb9,
	0xe5, 0x99, 0xa8, 0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x30, 0x00,
	0x30, 0x01, 0x30, 0x02, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x44, 0x0a, 0x04, 0x42, 0x47, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30,
	0x92, 0x41, 0x2d, 0x2a, 0x04, 0x62, 0x67, 0x49, 0x44, 0x32, 0x25, 0xe4, 0xba, 0x8b, 0xe4, 0xb8,
	0x9a, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x2c, 0x20, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5, 0xad,
	0x97, 0xe6, 0xae, 0xb5, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x30,
	0x52, 0x04, 0x42, 0x47, 0x49, 0x44, 0x12, 0x50, 0x0a, 0x06, 0x42, 0x47, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x35, 0x2a, 0x06, 0x62, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x32, 0x2b, 0xe4, 0xba, 0x8b, 0xe4, 0xb8, 0x9a, 0xe7, 0xbe, 0xa4, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x20, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5, 0xad, 0x97, 0xe6,
	0xae, 0xb5, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba,
	0x52, 0x06, 0x42, 0x47, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x64, 0x65, 0x70, 0x74,
	0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x06, 0x64,
	0x65, 0x70, 0x74, 0x49, 0x44, 0x32, 0x22, 0xe9, 0x83, 0xa8, 0xe9, 0x97, 0xa8, 0x49, 0x44, 0x2c,
	0x20, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x2c, 0x20, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x30, 0x52, 0x06, 0x64, 0x65, 0x70, 0x74, 0x49,
	0x44, 0x12, 0x53, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x32, 0x28, 0xe9, 0x83, 0xa8, 0xe9, 0x97, 0xa8, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x2c, 0x20, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x2c, 0x20,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x52, 0x08, 0x64, 0x65,
	0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x08, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x22, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0x49,
	0x44, 0x2c, 0x20, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x2c,
	0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x30, 0x52, 0x08, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x59, 0x0a, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x36, 0x2a, 0x0a,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x28, 0xe4, 0xb8, 0xad, 0xe5,
	0xbf, 0x83, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x20, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99,
	0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8,
	0xba, 0xe7, 0xa9, 0xba, 0x52, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x3a, 0x3e, 0x92, 0x41, 0x3b, 0x0a, 0x39, 0x2a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x0c, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xd2, 0x01, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0xd2, 0x01, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xb2, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x4f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2d, 0x92, 0x41, 0x2a, 0x2a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x4f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x17, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0xe6,
	0x88, 0x96, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0xbc, 0xa9, 0xe5, 0x86, 0x99, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x4f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x3a,
	0x44, 0x92, 0x41, 0x41, 0x0a, 0x3f, 0x2a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xd2, 0x01, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x4f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xfe, 0x0d, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x31, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x32, 0x08, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0xfa, 0x42, 0x16, 0x72, 0x14,
	0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d, 0x2b,
	0x24, 0x98, 0x01, 0x20, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x54, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x92,
	0x41, 0x36, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x2e, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x20, 0xe9, 0x95,
	0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87,
	0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x40, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x32, 0x09, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x92, 0x01, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x42, 0x4b, 0x52, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x92, 0x41, 0x57, 0x2a, 0x08, 0x75, 0x73,
	0x65, 0x42, 0x4b, 0x52, 0x65, 0x73, 0x32, 0x4b, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0xe8, 0x93, 0x9d, 0xe9, 0xb2, 0xb8, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b,
	0xe7, 0x9a, 0x84, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0xa0, 0x2c, 0x20, 0xe4, 0xb8,
	0xbb, 0xe8, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90,
	0xe8, 0xae, 0xa1, 0xe8, 0xb4, 0xb9, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x42, 0x4b, 0x52, 0x65, 0x73, 0x12, 0x46, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xae, 0x80, 0xe8,
	0xa6, 0x81, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x09, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x92, 0x41, 0x32, 0x2a, 0x09, 0x69, 0x73, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x32, 0x25, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe5, 0xb7, 0xb2, 0xe7, 0xbb, 0x8f, 0xe4, 0xb8, 0x8b, 0xe7, 0xba, 0xbf, 0x2c, 0x20,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x69, 0x73, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x62, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x4e, 0x92, 0x41, 0x4b, 0x2a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x32,
	0x43, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0xad, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89, 0x6b, 0x38,
	0x73, 0x2f, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2c, 0x20, 0xe6, 0x9c, 0xaa, 0xe6, 0x9d, 0xa5, 0xe8,
	0xaf, 0xa5, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe5, 0x8f, 0xaf, 0xe8, 0x83, 0xbd, 0xe5, 0xba,
	0x9f, 0xe5, 0xbc, 0x83, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x5b, 0x0a, 0x0a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b,
	0x92, 0x41, 0x38, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32,
	0x2a, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0x84,
	0xe8, 0x93, 0x9d, 0xe9, 0xb2, 0xb8, 0x43, 0x4d, 0x44, 0x42, 0xe4, 0xb8, 0xad, 0xe4, 0xb8, 0x9a,
	0xe5, 0x8a, 0xa1, 0x49, 0x44, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0a, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x6c, 0x0a, 0x08, 0x69, 0x73, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x34, 0x92, 0x41, 0x31, 0x2a, 0x08, 0x69, 0x73, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x32, 0x25, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe4,
	0xbf, 0x9d, 0xe5, 0xaf, 0x86, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x2c, 0x20, 0xe9, 0xbb, 0x98,
	0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x69, 0x73, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x74, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x54, 0x92, 0x41, 0x51, 0x2a, 0x0a,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x79, 0x70, 0x65, 0x32, 0x43, 0xe4, 0xb8, 0x9a, 0xe5,
	0x8a, 0xa1, 0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20,
	0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x2c, 0x20, 0x31, 0x3a,
	0xe7, 0x89, 0xa9, 0xe7, 0x90, 0x86, 0xe6, 0x9c, 0xba, 0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0x2c,
	0x20, 0x32, 0x3a, 0xe5, 0xae, 0xb9, 0xe5, 0x99, 0xa8, 0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0x52,
	0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x76, 0x92, 0x41, 0x73, 0x2a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x6b, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe4, 0xbf, 0x9d, 0xe7,
	0x95, 0x99, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4,
	0xe4, 0xb8, 0xba, 0x30, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe9, 0x80, 0x89, 0x20, 0x31, 0x3a, 0xe6,
	0x89, 0x8b, 0xe6, 0xb8, 0xb8, 0x2c, 0x20, 0x32, 0x3a, 0xe7, 0xab, 0xaf, 0xe6, 0xb8, 0xb8, 0x2c,
	0x20, 0x33, 0x3a, 0xe9, 0xa1, 0xb5, 0xe6, 0xb8, 0xb8, 0x2c, 0x20, 0x34, 0x3a, 0xe5, 0xb9, 0xb3,
	0xe5, 0x8f, 0xb0, 0xe4, 0xba, 0xa7, 0xe5, 0x93, 0x81, 0x2c, 0x20, 0x35, 0x3a, 0xe6, 0x94, 0xaf,
	0xe6, 0x92, 0x91, 0xe4, 0xba, 0xa7, 0xe5, 0x93, 0x81, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x42, 0x47, 0x49, 0x44, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x2a, 0x04, 0x62, 0x67, 0x49, 0x44, 0x32,
	0x25, 0xe4, 0xba, 0x8b, 0xe4, 0xb8, 0x9a, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x2c, 0x20, 0xe4, 0xbf,
	0x9d, 0xe7, 0x95, 0x99, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x30, 0x52, 0x04, 0x42, 0x47, 0x49, 0x44, 0x12, 0x50, 0x0a, 0x06,
	0x42, 0x47, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41,
	0x35, 0x2a, 0x06, 0x62, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x2b, 0xe4, 0xba, 0x8b, 0xe4, 0xb8,
	0x9a, 0xe7, 0xbe, 0xa4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x20, 0xe4, 0xbf, 0x9d, 0xe7,
	0x95, 0x99, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4,
	0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x52, 0x06, 0x42, 0x47, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47,
	0x0a, 0x06, 0x64, 0x65, 0x70, 0x74, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f,
	0x92, 0x41, 0x2c, 0x2a, 0x06, 0x64, 0x65, 0x70, 0x74, 0x49, 0x44, 0x32, 0x22, 0xe9, 0x83, 0xa8,
	0xe9, 0x97, 0xa8, 0x49, 0x44, 0x2c, 0x20, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5, 0xad, 0x97,
	0xe6, 0xae, 0xb5, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0x30, 0x52,
	0x06, 0x64, 0x65, 0x70, 0x74, 0x49, 0x44, 0x12, 0x53, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a, 0x08,
	0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x28, 0xe9, 0x83, 0xa8, 0xe9, 0x97, 0xa8,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x20, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5, 0xad,
	0x97, 0xe6, 0xae, 0xb5, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe7,
	0xa9, 0xba, 0x52, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x08,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31,
	0x92, 0x41, 0x2e, 0x2a, 0x08, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x22, 0xe4,
	0xb8, 0xad, 0xe5, 0xbf, 0x83, 0x49, 0x44, 0x2c, 0x20, 0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5,
	0xad, 0x97, 0xe6, 0xae, 0xb5, 0x2c, 0x20, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba,
	0x30, 0x52, 0x08, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x59, 0x0a, 0x0a, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x39, 0x92, 0x41, 0x36, 0x2a, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x32, 0x28, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x20,
	0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x2c, 0x20, 0xe9, 0xbb,
	0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x52, 0x0a, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x08, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x32, 0x0f, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7,
	0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe5, 0x91, 0x98, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x32, 0x09, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xba, 0xba, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x2f, 0x92, 0x41, 0x2c, 0x0a, 0x2a, 0x2a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0x9e, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4f, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x32, 0x08, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0xfa, 0x42, 0x16, 0x72,
	0x14, 0x32, 0x0f, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5d,
	0x2b, 0x24, 0x98, 0x01, 0x20, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x3a, 0x35, 0x92, 0x41, 0x32, 0x0a, 0x30, 0x2a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x0c, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xd2, 0x01, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x22, 0x8c, 0x03, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x54, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x20, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe8, 0xaf, 0xa6,
	0xe7, 0xbb, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb,
	0xa5, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69,
	0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x7d, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x73, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x2a, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b,
	0xae, 0xe6, 0x9b, 0xb4, 0xe5, 0xa4, 0x9a, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c,
	0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe6, 0x98, 0xaf, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe7,
	0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe6, 0x06, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x73, 0x32, 0x25, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0x2c, 0x20, 0xe5,
	0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe4, 0xbb, 0xa5, 0xe5, 0x8d, 0x8a, 0xe8, 0xa7, 0x92, 0xe9, 0x80,
	0x97, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe9, 0x9a, 0x94, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x73, 0x12, 0x6d, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x57, 0x92, 0x41, 0x54, 0x2a, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x32, 0x4b, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d,
	0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac,
	0xa6, 0x2c, 0x20, 0xe5, 0xa4, 0x9a, 0xe4, 0xb8, 0xaa, 0xe4, 0xbb, 0xa5, 0xe5, 0x8d, 0x8a, 0xe8,
	0xa7, 0x92, 0xe9, 0x80, 0x97, 0xe5, 0x8f, 0xb7, 0xe5, 0x88, 0x86, 0xe9, 0x9a, 0x94, 0x52, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x78, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x44, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96,
	0x87, 0xe7, 0xbc, 0xa9, 0xe5, 0x86, 0x99, 0x29, 0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80,
	0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8,
	0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7,
	0xac, 0xa6, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x6c, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0x92, 0x41, 0x49, 0x2a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x32, 0x3b, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0xad, 0xe6,
	0x96, 0x87, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x20, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87,
	0xe6, 0xad, 0xa4, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe6, 0xa8, 0xa1, 0xe7, 0xb3, 0x8a, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e,
	0x2a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x32, 0x26, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8,
	0xad, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe5,
	0x85, 0x81, 0xe8, 0xae, 0xb8, 0x6b, 0x38, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x42, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x32, 0x1d, 0xe5, 0x88, 0x86, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x2c,
	0x20, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe7, 0xac, 0xac, 0xe5, 0x87, 0xa0, 0xe9, 0xa1, 0xb5,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x32, 0x1a, 0xe5, 0x88, 0x86, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0x2c, 0x20, 0xe6, 0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x03, 0x61, 0x6c, 0x6c, 0x32, 0x18, 0xe8,
	0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x85, 0xa8, 0xe9, 0x87,
	0x8f, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x39, 0x0a, 0x0a,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49,
	0x44, 0x32, 0x08, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x0a, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x3a, 0x66, 0x92, 0x41, 0x63, 0x0a, 0x61, 0x2a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x4a, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x2c, 0x20, 0xe6, 0x94, 0xaf, 0xe6, 0x8c,
	0x81, 0xe5, 0x88, 0x86, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe6, 0x88, 0x96,
	0xe8, 0x80, 0x85, 0xe5, 0x85, 0xa8, 0xe9, 0x87, 0x8f, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x22,
	0xb2, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x2a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0x06,
	0xe6, 0x80, 0xbb, 0xe9, 0x87, 0x8f, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x49, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x32, 0x0c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x3a, 0x2a, 0x92, 0x41, 0x27, 0x0a, 0x25, 0x2a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x32, 0x12, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0x22, 0xa8, 0x03, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6b, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x2f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe6, 0x80, 0xbb, 0xe9, 0x87,
	0x8f, 0xe5, 0x8f, 0x8a, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x12, 0x7d, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x63, 0x73, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x73, 0x42, 0x40, 0x92, 0x41,
	0x3d, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x32, 0x2a, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6, 0x9b, 0xb4, 0xe5, 0xa4, 0x9a,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe6,
	0x98, 0xaf, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0x52, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x5f, 0x0a, 0x05, 0x50, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x56, 0x0a, 0x05, 0x70, 0x65, 0x72, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x05, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x32, 0x1b, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0xe9, 0x92, 0x88, 0xe5, 0xaf, 0xb9, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xe7, 0x9a, 0x84, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x05, 0x70, 0x65, 0x72, 0x6d, 0x73,
	0x22, 0x8d, 0x04, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x52, 0x65, 0x71, 0x12, 0x4c, 0x0a, 0x03, 0x61, 0x6c,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x2a, 0x03, 0x61, 0x6c,
	0x6c, 0x32, 0x30, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6,
	0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0xb9, 0xb6, 0xe4, 0xb8,
	0x94, 0xe6, 0x90, 0xba, 0xe5, 0xb8, 0xa6, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x9f, 0x01, 0x0a, 0x09, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x80, 0x01, 0x92,
	0x41, 0x7d, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x6f,
	0xe4, 0xbb, 0x85, 0xe5, 0x9c, 0xa8, 0x61, 0x6c, 0x6c, 0xe4, 0xb8, 0xba, 0x74, 0x72, 0x75, 0x65,
	0xe6, 0x97, 0xb6, 0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0x2c, 0x20, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4,
	0xba, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0x2f, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87,
	0xe5, 0x90, 0x8d, 0xe6, 0xa8, 0xa1, 0xe7, 0xb3, 0x8a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6,
	0x88, 0x96, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0x2f, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a,
	0xa1, 0x49, 0x44, 0xe7, 0xb2, 0xbe, 0xe7, 0xa1, 0xae, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x52,
	0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x62, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x4a, 0x92, 0x41, 0x47, 0x2a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x3d, 0xe5, 0x88, 0x86, 0xe9, 0xa1, 0xb5, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x2c, 0x20, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe5, 0x81, 0x8f,
	0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0xef, 0xbc, 0x8c, 0xe4, 0xbb, 0x85, 0xe5, 0x9c, 0xa8, 0x20,
	0x61, 0x6c, 0x6c, 0x20, 0xe4, 0xb8, 0xba, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0xe6, 0x97, 0xb6,
	0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x62,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x4c, 0x92,
	0x41, 0x49, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x40, 0xe5, 0x88, 0x86, 0xe9, 0xa1,
	0xb5, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x2c, 0x20, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe6,
	0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xef, 0xbc, 0x8c, 0xe4, 0xbb,
	0x85, 0xe5, 0x9c, 0xa8, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0xe4, 0xb8, 0xba, 0x20, 0x74, 0x72, 0x75,
	0x65, 0x20, 0xe6, 0x97, 0xb6, 0xe7, 0x94, 0x9f, 0xe6, 0x95, 0x88, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x3a, 0x3c, 0x92, 0x41, 0x39, 0x0a, 0x37, 0x2a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x52, 0x65, 0x71,
	0x32, 0x1e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x9c,
	0x89, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0x22, 0xaa, 0x03, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x2f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x2c, 0x20, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe6, 0x80, 0xbb, 0xe9, 0x87, 0x8f, 0xe5,
	0x8f, 0x8a, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82,
	0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x7d,
	0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x73, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x2a,
	0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x32, 0x2a, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6, 0x9b, 0xb4, 0xe5, 0xa4, 0x9a, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe6, 0x98, 0xaf,
	0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0x52, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6d, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72,
	0x49, 0x41, 0x4d, 0x52, 0x65, 0x71, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f, 0x2a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x49, 0x41,
	0x4d, 0x52, 0x65, 0x71, 0x32, 0x36, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xbc, 0x80, 0xe5,
	0x90, 0xaf, 0xe5, 0xae, 0xb9, 0xe5, 0x99, 0xa8, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7, 0x9a,
	0x84, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe7, 0x94, 0xa8,
	0xe4, 0xba, 0x8e, 0x49, 0x41, 0x4d, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x22, 0x82, 0x08, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72,
	0x49, 0x41, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x7a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x49, 0x41,
	0x4d, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x3a, 0x92,
	0x41, 0x37, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x2f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe5, 0x8c,
	0x85, 0xe5, 0x90, 0xab, 0xe6, 0x80, 0xbb, 0xe9, 0x87, 0x8f, 0xe5, 0x8f, 0x8a, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x1a, 0xc5, 0x05, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x36, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x2e,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd,
	0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4d, 0x92, 0x41, 0x4a, 0x2a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x3d, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49,
	0x44, 0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c,
	0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0xba, 0x33, 0x32, 0xe4, 0xbd, 0x8d, 0xe5,
	0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0x2c, 0x20, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8,
	0xe7, 0x94, 0x9f, 0xe6, 0x88, 0x90, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x78, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x44, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0xbc, 0xa9,
	0xe5, 0x86, 0x99, 0x29, 0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x94, 0xaf, 0xe4,
	0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd,
	0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x33, 0x32, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3b, 0x92, 0x41, 0x38, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44,
	0x32, 0x2a, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe7, 0x9a,
	0x84, 0xe8, 0x93, 0x9d, 0xe9, 0xb2, 0xb8, 0x43, 0x4d, 0x44, 0x42, 0xe4, 0xb8, 0xad, 0xe4, 0xb8,
	0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x5c, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x2a,
	0x08, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x32, 0x31, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b,
	0xae, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe4, 0xba, 0xba, 0xe5, 0x91, 0x98, 0xef, 0xbc, 0x8c,
	0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8,
	0x80, 0x85, 0x2b, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0x52, 0x08, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x12, 0x66, 0x0a, 0x0d, 0x62, 0x6b, 0x6d, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x42, 0x69, 0x7a, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x40, 0x92,
	0x41, 0x3d, 0x2a, 0x0d, 0x62, 0x6b, 0x6d, 0x53, 0x70, 0x61, 0x63, 0x65, 0x42, 0x69, 0x7a, 0x49,
	0x44, 0x32, 0x2c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe7,
	0x9a, 0x84, 0xe8, 0x93, 0x9d, 0xe9, 0xb2, 0xb8, 0xe7, 0x9b, 0x91, 0xe6, 0x8e, 0xa7, 0xe7, 0x9a,
	0x84, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52,
	0x0d, 0x62, 0x6b, 0x6d, 0x53, 0x70, 0x61, 0x63, 0x65, 0x42, 0x69, 0x7a, 0x49, 0x44, 0x12, 0x61,
	0x0a, 0x0c, 0x62, 0x6b, 0x6d, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x92, 0x41, 0x3a, 0x2a, 0x0c, 0x62, 0x6b, 0x6d, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x2a, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7,
	0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0x84, 0xe8, 0x93, 0x9d, 0xe9, 0xb2, 0xb8, 0xe7, 0x9b,
	0x91, 0xe6, 0x8e, 0xa7, 0xe7, 0x9a, 0x84, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0x52, 0x0c, 0x62, 0x6b, 0x6d, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92,
	0x41, 0x1e, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x8d,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x33, 0x92,
	0x41, 0x30, 0x0a, 0x2e, 0x2a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x22, 0x81, 0x03, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42, 0x1d,
	0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x20,
	0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x77, 0x0a,
	0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x73, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x2a, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32,
	0x24, 0xe6, 0x9b, 0xb4, 0xe5, 0xa4, 0x9a, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c,
	0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe6, 0x98, 0xaf, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe7,
	0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x42, 0x43, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2e,
	0x92, 0x41, 0x2b, 0x2a, 0x06, 0x75, 0x73, 0x65, 0x42, 0x43, 0x53, 0x32, 0x21, 0xe4, 0xb8, 0x9a,
	0xe5, 0x8a, 0xa1, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x42,
	0x43, 0x53, 0xe5, 0xae, 0xb9, 0xe5, 0x99, 0xa8, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x42, 0x43, 0x53, 0x3a, 0x2e, 0x92, 0x41, 0x2b, 0x0a, 0x29, 0x2a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x22, 0x88, 0x03, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x63, 0x73, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x9a, 0xe5,
	0x8a, 0xa1, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x77, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x73, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x24, 0xe6, 0x9b, 0xb4, 0xe5,
	0xa4, 0x9a, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6,
	0x81, 0xe6, 0x98, 0xaf, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3,
	0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x91, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x43, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe8,
	0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x8d, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x2e, 0x92, 0x41, 0x2b, 0x0a, 0x29, 0x2a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x22, 0x8f, 0x03, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x51, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0xaf, 0xe7,
	0x94, 0xa8, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82,
	0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x77,
	0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x73, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x2a,
	0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x32, 0x24, 0xe6, 0x9b, 0xb4, 0xe5, 0xa4, 0x9a, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc,
	0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe6, 0x98, 0xaf, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90,
	0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x32, 0x08, 0xe4,
	0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe4, 0xb8,
	0x9a, 0xe5, 0x8a, 0xa1, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x43, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x32, 0x12, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe8, 0xbf, 0x90,
	0xe7, 0xbb, 0xb4, 0xe4, 0xba, 0xba, 0xe5, 0x91, 0x98, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0xf4, 0x02, 0x0a, 0x0c, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x0a, 0x62, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x0a, 0x62, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x32, 0x08, 0xe4, 0xb8, 0x9a,
	0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x08, 0x62, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x0c, 0x62, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x62, 0x6b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0a, 0x62, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x62, 0x6b, 0x5f, 0x6f, 0x62, 0x6a, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09, 0x62, 0x6b, 0x5f, 0x6f,
	0x62, 0x6a, 0x5f, 0x69, 0x64, 0x32, 0x09, 0x62, 0x6b, 0x5f, 0x6f, 0x62, 0x6a, 0x5f, 0x69, 0x64,
	0x52, 0x07, 0x62, 0x6b, 0x4f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x62, 0x6b, 0x5f,
	0x6f, 0x62, 0x6a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0x92, 0x41, 0x1a, 0x2a, 0x0b, 0x62, 0x6b, 0x5f, 0x6f, 0x62, 0x6a, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x32, 0x0b, 0x62, 0x6b, 0x5f, 0x6f, 0x62, 0x6a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x62,
	0x6b, 0x4f, 0x62, 0x6a, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x32, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x32, 0x05,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x22, 0x9d, 0x02, 0x0a,
	0x14, 0x53, 0x79, 0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x44, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96,
	0x87, 0xe7, 0xbc, 0xa9, 0xe5, 0x86, 0x99, 0x29, 0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80,
	0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8,
	0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7,
	0xac, 0xa6, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x3a, 0x51, 0x92, 0x41, 0x4e, 0x0a, 0x4c,
	0x2a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0xd2, 0x01, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0xfe, 0x01, 0x0a,
	0x15, 0x53, 0x79, 0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x20, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c,
	0x20, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x20,
	0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0xef, 0x02,
	0x0a, 0x18, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x56, 0x92, 0x41, 0x53, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x32, 0x44, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28,
	0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0xbc, 0xa9, 0xe5, 0x86, 0x99, 0x29, 0x2c, 0x20, 0xe5,
	0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf,
	0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36,
	0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x40,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x32, 0x12, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x3a, 0x5d, 0x92, 0x41, 0x5a, 0x0a, 0x58, 0x2a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x18, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22,
	0x82, 0x02, 0x0a, 0x19, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x20, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8,
	0xba, 0xe7, 0xa9, 0xba, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x22, 0xdd, 0x06, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x78, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x44, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc,
	0x96, 0xe7, 0xa0, 0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0xbc, 0xa9, 0xe5, 0x86,
	0x99, 0x29, 0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80,
	0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6,
	0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x08,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x12, 0xd4, 0x01, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0xbf, 0x01, 0x92, 0x41, 0x93, 0x01, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32,
	0x8a, 0x01, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8,
	0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x33, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6,
	0x2c, 0xe5, 0x8f, 0xaa, 0xe8, 0x83, 0xbd, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe5, 0xb0, 0x8f,
	0xe5, 0x86, 0x99, 0xe5, 0xad, 0x97, 0xe6, 0xaf, 0x8d, 0xe3, 0x80, 0x81, 0xe6, 0x95, 0xb0, 0xe5,
	0xad, 0x97, 0xef, 0xbc, 0x8c, 0xe4, 0xbb, 0xa5, 0xe5, 0x8f, 0x8a, 0x20, 0x27, 0x2d, 0x27, 0x2c,
	0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe4, 0xbb, 0xa5, 0xe5, 0xad, 0x97, 0xe6, 0xaf, 0x8d, 0xe5,
	0xbc, 0x80, 0xe5, 0xa4, 0xb4, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xbb,
	0xa5, 0x20, 0x27, 0x2d, 0x27, 0x20, 0xe7, 0xbb, 0x93, 0xe5, 0xb0, 0xbe, 0xfa, 0x42, 0x25, 0x72,
	0x23, 0x18, 0x3f, 0x32, 0x1f, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b,
	0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x29, 0x3f, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x63, 0x73, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x32, 0x12, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe9, 0x85,
	0x8d, 0xe9, 0xa2, 0x9d, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x63,
	0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x1f,
	0x92, 0x41, 0x1c, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x12, 0xe5, 0x91, 0xbd,
	0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5e, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x12, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9,
	0xba, 0xe9, 0x97, 0xb4, 0xe6, 0xb3, 0xa8, 0xe8, 0xa7, 0xa3, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x61, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x63, 0x73,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x32, 0x18, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x3a, 0x58, 0x92, 0x41, 0x55, 0x0a,
	0x53, 0x2a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xd2, 0x01, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x94, 0x03, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x63, 0x73,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x20, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0xba, 0xe7,
	0xa9, 0xba, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x77, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x63,
	0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x73, 0x42, 0x3a,
	0x92, 0x41, 0x37, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x32, 0x24, 0xe6, 0x9b, 0xb4, 0xe5, 0xa4, 0x9a, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe6, 0x98, 0xaf, 0xe6, 0x9d,
	0x83, 0xe9, 0x99, 0x90, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa0, 0x07, 0x0a, 0x18,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92,
	0x41, 0x53, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32,
	0x44, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0xe8, 0x8b,
	0xb1, 0xe6, 0x96, 0x87, 0xe7, 0xbc, 0xa9, 0xe5, 0x86, 0x99, 0x29, 0x2c, 0x20, 0xe5, 0x85, 0xa8,
	0xe5, 0xb1, 0x80, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba,
	0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5,
	0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49,
	0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0xe3, 0x01, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0xc4, 0x01, 0x92, 0x41, 0x98, 0x01, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x32, 0x8a, 0x01, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97,
	0xb4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4,
	0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x33, 0xe5, 0xad, 0x97,
	0xe7, 0xac, 0xa6, 0x2c, 0xe5, 0x8f, 0xaa, 0xe8, 0x83, 0xbd, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab,
	0xe5, 0xb0, 0x8f, 0xe5, 0x86, 0x99, 0xe5, 0xad, 0x97, 0xe6, 0xaf, 0x8d, 0xe3, 0x80, 0x81, 0xe6,
	0x95, 0xb0, 0xe5, 0xad, 0x97, 0xef, 0xbc, 0x8c, 0xe4, 0xbb, 0xa5, 0xe5, 0x8f, 0x8a, 0x20, 0x27,
	0x2d, 0x27, 0x2c, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe4, 0xbb, 0xa5, 0xe5, 0xad, 0x97, 0xe6,
	0xaf, 0x8d, 0xe5, 0xbc, 0x80, 0xe5, 0xa4, 0xb4, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe8, 0x83,
	0xbd, 0xe4, 0xbb, 0xa5, 0x20, 0x27, 0x2d, 0x27, 0x20, 0xe7, 0xbb, 0x93, 0xe5, 0xb0, 0xbe, 0xfa,
	0x42, 0x25, 0x72, 0x23, 0x18, 0x3f, 0x32, 0x1f, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x28, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x32, 0x11, 0x49,
	0x54, 0x53, 0x4d, 0x20, 0xe5, 0x8d, 0x95, 0xe6, 0x8d, 0xae, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25,
	0x92, 0x41, 0x22, 0x2a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x32, 0x11, 0x49, 0x54, 0x53, 0x4d, 0x20, 0xe5, 0x8d, 0x95, 0xe6, 0x8d, 0xae, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x02, 0x73, 0x6e, 0x32, 0x0b, 0x49, 0x54, 0x53, 0x4d, 0x20,
	0xe5, 0x8d, 0x95, 0xe5, 0x8f, 0xb7, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92,
	0x41, 0x1f, 0x2a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x32, 0x11,
	0x49, 0x54, 0x53, 0x4d, 0x20, 0xe5, 0x8d, 0x95, 0xe6, 0x8d, 0xae, 0xe9, 0x93, 0xbe, 0xe6, 0x8e,
	0xa5, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x4d, 0x0a, 0x0d,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x12, 0xe5, 0x8d, 0x95, 0xe6, 0x8d, 0xae,
	0xe5, 0xae, 0xa1, 0xe6, 0x89, 0xb9, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x0d, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x52, 0x0a, 0x0e, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe4, 0xb8, 0x8b, 0xe5, 0x8f, 0x91, 0xe5, 0x88, 0xb0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x52,
	0x0e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x3a,
	0x5d, 0x92, 0x41, 0x5a, 0x0a, 0x58, 0x2a, 0x18, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x16, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x69, 0x74,
	0x73, 0x6d, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0, 0x83, 0xd2, 0x01, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xb5,
	0x02, 0x0a, 0x19, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x20, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0xba,
	0xe7, 0xa9, 0xba, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x32, 0x0c, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0, 0x83, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x94, 0x06, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x78, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x44, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0xbc, 0xa9,
	0xe5, 0x86, 0x99, 0x29, 0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x94, 0xaf, 0xe4,
	0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd,
	0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0xe3, 0x01, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0xc4, 0x01, 0x92, 0x41, 0x98, 0x01,
	0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x8a, 0x01, 0xe5, 0x91,
	0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6,
	0x85, 0xe8, 0xbf, 0x87, 0x36, 0x33, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x2c, 0xe5, 0x8f, 0xaa,
	0xe8, 0x83, 0xbd, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe5, 0xb0, 0x8f, 0xe5, 0x86, 0x99, 0xe5,
	0xad, 0x97, 0xe6, 0xaf, 0x8d, 0xe3, 0x80, 0x81, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xef, 0xbc,
	0x8c, 0xe4, 0xbb, 0xa5, 0xe5, 0x8f, 0x8a, 0x20, 0x27, 0x2d, 0x27, 0x2c, 0xe5, 0xbf, 0x85, 0xe9,
	0xa1, 0xbb, 0xe4, 0xbb, 0xa5, 0xe5, 0xad, 0x97, 0xe6, 0xaf, 0x8d, 0xe5, 0xbc, 0x80, 0xe5, 0xa4,
	0xb4, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xbb, 0xa5, 0x20, 0x27, 0x2d,
	0x27, 0x20, 0xe7, 0xbb, 0x93, 0xe5, 0xb0, 0xbe, 0xfa, 0x42, 0x25, 0x72, 0x23, 0x18, 0x3f, 0x32,
	0x1f, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x2d, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x63,
	0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x1f,
	0x92, 0x41, 0x1c, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x12, 0xe5, 0x91, 0xbd,
	0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5e, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x12, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9,
	0xba, 0xe9, 0x97, 0xb4, 0xe6, 0xb3, 0xa8, 0xe8, 0xa7, 0xa3, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x32, 0x12, 0xe5,
	0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe9, 0x85, 0x8d, 0xe9, 0xa2,
	0x9d, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x3a, 0x63, 0x92, 0x41, 0x60, 0x0a, 0x5e, 0x2a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5,
	0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe9, 0x85, 0x8d, 0xe9, 0xa2,
	0x9d, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xb8, 0x02,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x77, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x73, 0x42, 0x3a, 0x92, 0x41, 0x37,
	0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x32, 0x24, 0xe6, 0x9b, 0xb4, 0xe5, 0xa4, 0x9a, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef,
	0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe6, 0x98, 0xaf, 0xe6, 0x9d, 0x83, 0xe9, 0x99,
	0x90, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xeb, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x78, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x44, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7,
	0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0xbc, 0xa9, 0xe5,
	0x86, 0x99, 0x29, 0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x94, 0xaf, 0xe4, 0xb8,
	0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8,
	0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92,
	0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x08, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x40, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x12, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x3a, 0x60, 0x92, 0x41, 0x5d, 0x0a, 0x5b, 0x2a, 0x13, 0x47, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xaa, 0xe5, 0x91,
	0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82,
	0xd2, 0x01, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0xd2, 0x01,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x91, 0x03, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x63, 0x73, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x20, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0xba, 0xe7, 0xa9,
	0xba, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x77, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x63, 0x73,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x73, 0x42, 0x3a, 0x92,
	0x41, 0x37, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x32, 0x24, 0xe6, 0x9b, 0xb4, 0xe5, 0xa4, 0x9a, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe6, 0x98, 0xaf, 0xe6, 0x9d, 0x83,
	0xe9, 0x99, 0x90, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa1, 0x02, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x44, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87,
	0xe7, 0xbc, 0xa9, 0xe5, 0x86, 0x99, 0x29, 0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5,
	0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d,
	0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac,
	0xa6, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x3a, 0x56, 0x92, 0x41, 0x53, 0x0a, 0x51, 0x2a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0x99,
	0x03, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x2b,
	0x92, 0x41, 0x28, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x20, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe5,
	0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x7d, 0x0a, 0x0f, 0x77,
	0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x73, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x2a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x2a, 0xe9,
	0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6, 0x9b, 0xb4, 0xe5, 0xa4, 0x9a, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe6, 0x98, 0xaf, 0xe6, 0x9d, 0x83,
	0xe9, 0x99, 0x90, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbb, 0x02, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7c, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x4f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x52, 0x92, 0x41, 0x4f, 0x2a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x4f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x3c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b,
	0xae, 0x49, 0x44, 0xe6, 0x88, 0x96, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe8, 0x8b, 0xb1, 0xe6,
	0x96, 0x87, 0xe5, 0x90, 0x8d, 0x2c, 0x20, 0xe4, 0xb8, 0xba, 0x20, 0x27, 0x2d, 0x27, 0x20, 0xe5,
	0x88, 0x99, 0xe4, 0xb8, 0x8d, 0xe6, 0xa0, 0xa1, 0xe9, 0xaa, 0x8c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b,
	0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x4f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15,
	0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x3a, 0x66, 0x92, 0x41, 0x63, 0x0a, 0x61, 0x2a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x24, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x8e, 0x9f, 0xe7,
	0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x0f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x4f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0xa5, 0x03, 0x0a, 0x1c, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x60, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x20, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0xba, 0xe7, 0xa9,
	0xba, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x7d, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x63, 0x73,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x73, 0x42, 0x40, 0x92,
	0x41, 0x3d, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x32, 0x2a, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6, 0x9b, 0xb4, 0xe5, 0xa4,
	0x9a, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81,
	0xe6, 0x98, 0xaf, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0x52,
	0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x95, 0x03, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x32, 0x44, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81,
	0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0xbc, 0xa9, 0xe5, 0x86, 0x99, 0x29, 0x2c, 0x20,
	0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95,
	0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87,
	0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x68, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4a, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x32, 0x12, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xfa, 0x42, 0x25, 0x72, 0x23, 0x18, 0x3f, 0x32, 0x1f, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x3a, 0x5d, 0x92, 0x41, 0x5a, 0x0a, 0x58,
	0x2a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0xd2, 0x01, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0xd2, 0x01, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0x92, 0x41, 0x0c, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x04, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x4a, 0x0a, 0x05, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x73, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x05, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x32, 0x15, 0xe6,
	0x97, 0xa0, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x05, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x22, 0xe9, 0x08, 0x0a, 0x0d,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x2a,
	0x03, 0x75, 0x69, 0x64, 0x32, 0x03, 0x75, 0x69, 0x64, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x31,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41,
	0x1a, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x12, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7,
	0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x12,
	0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32,
	0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x05, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x32,
	0x18, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x8f, 0xaf,
	0xe7, 0x94, 0xa8, 0xe9, 0x85, 0x8d, 0xe9, 0xa2, 0x9d, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x12, 0x52, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x04,
	0x75, 0x73, 0x65, 0x64, 0x32, 0x18, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9,
	0x97, 0xb4, 0xe5, 0xb7, 0xb2, 0xe7, 0x94, 0xa8, 0xe9, 0x85, 0x8d, 0xe9, 0xa2, 0x9d, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x55, 0x73, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63,
	0x70, 0x75, 0x55, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x32, 0x0c, 0x43, 0x50, 0x55, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0xe7, 0x8e, 0x87, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x55, 0x73, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a,
	0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x32, 0x12,
	0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe7,
	0x8e, 0x87, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x4a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x32, 0x12, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe6,
	0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5e, 0x0a,
	0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x24, 0x92, 0x41, 0x21, 0x2a,
	0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x12, 0xe5, 0x91,
	0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe6, 0xb3, 0xa8, 0xe8, 0xa7, 0xa3,
	0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5b, 0x0a,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x22, 0x92, 0x41, 0x1f,
	0x2a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x32, 0x12, 0xe5, 0x91, 0xbd,
	0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0x52,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x69, 0x74,
	0x73, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x4e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0c, 0x69, 0x74, 0x73, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x53, 0x4e, 0x32, 0x0b, 0x69, 0x74, 0x73, 0x6d, 0x20, 0xe5, 0x8d, 0x95, 0xe5, 0x8f, 0xb7,
	0x52, 0x0c, 0x69, 0x74, 0x73, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x4e, 0x12, 0x54,
	0x0a, 0x10, 0x69, 0x74, 0x73, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x10, 0x69,
	0x74, 0x73, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32,
	0x11, 0x69, 0x74, 0x73, 0x6d, 0x20, 0xe5, 0x8d, 0x95, 0xe6, 0x8d, 0xae, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0x52, 0x10, 0x69, 0x74, 0x73, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x69, 0x74, 0x73, 0x6d, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x55, 0x52, 0x4c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20,
	0x2a, 0x0d, 0x69, 0x74, 0x73, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x52, 0x4c, 0x32,
	0x0f, 0x69, 0x74, 0x73, 0x6d, 0x20, 0xe5, 0x8d, 0x95, 0xe6, 0x8d, 0xae, 0x20, 0x55, 0x52, 0x4c,
	0x52, 0x0d, 0x69, 0x74, 0x73, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x52, 0x4c, 0x12,
	0x66, 0x0a, 0x0e, 0x69, 0x74, 0x73, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x2a, 0x0e, 0x69, 0x74,
	0x73, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x32, 0x29, 0x69, 0x74,
	0x73, 0x6d, 0x20, 0xe5, 0x8d, 0x95, 0xe6, 0x8d, 0xae, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a,
	0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2c,
	0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x0e, 0x69, 0x74, 0x73, 0x6d, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x13, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1f, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41,
	0x0a, 0x2a, 0x03, 0x75, 0x69, 0x64, 0x32, 0x03, 0x75, 0x69, 0x64, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0x92, 0x41, 0x1a, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x12, 0xe5, 0x91, 0xbd, 0xe5, 0x90,
	0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x32, 0x12, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0x92, 0x41, 0x15, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0x08,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x8d, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x1f, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d,
	0x92, 0x41, 0x0a, 0x2a, 0x03, 0x6b, 0x65, 0x79, 0x32, 0x03, 0x6b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x56, 0x0a, 0x0a, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x2a, 0x03, 0x6b, 0x65, 0x79,
	0x32, 0x03, 0x6b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x63, 0x70, 0x75, 0x32, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x63, 0x70, 0x75, 0x52, 0x0b, 0x63, 0x70, 0x75,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x32, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a,
	0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x63, 0x70, 0x75, 0x32, 0x0a, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x2e, 0x63, 0x70, 0x75, 0x52, 0x09, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x32, 0x0a, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x2e, 0x63, 0x70, 0x75, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xad, 0x05, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x78, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x44, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7,
	0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0xbc, 0xa9, 0xe5,
	0x86, 0x99, 0x29, 0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x94, 0xaf, 0xe4, 0xb8,
	0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8,
	0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x30, 0x2a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x32, 0x28, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8,
	0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x33, 0x32, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x18, 0x20, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x75, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x63, 0x92, 0x41, 0x40, 0x2a, 0x03, 0x6b, 0x65,
	0x79, 0x32, 0x39, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0x20, 0x6b, 0x65, 0x79, 0xef, 0xbc, 0x8c,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x86, 0x85, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0xef,
	0xbc, 0x8c, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6,
	0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xfa, 0x42, 0x1d, 0x72,
	0x1b, 0x18, 0x40, 0x32, 0x17, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x7d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x67, 0x92, 0x41, 0x43, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x3b, 0xe5, 0x8f, 0x98,
	0xe9, 0x87, 0x8f, 0xe4, 0xbd, 0x9c, 0xe7, 0x94, 0xa8, 0xe5, 0x9f, 0x9f, 0xef, 0xbc, 0x8c, 0xe5,
	0x8f, 0x96, 0xe5, 0x80, 0xbc, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xef, 0xbc, 0x9a, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2c, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2c, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xfa, 0x42, 0x1e, 0x72, 0x1c, 0x52, 0x06, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x37, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x32,
	0x0f, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x80, 0xbc,
	0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x2a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x32, 0x2f, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe8, 0xaf, 0xb4, 0xe6, 0x98, 0x8e,
	0xe4, 0xb8, 0x8e, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x2c, 0x20, 0xe9, 0x99, 0x90, 0xe5, 0x88,
	0xb6, 0xe5, 0x9c, 0xa8, 0x31, 0x30, 0x30, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xbb, 0xa5,
	0xe5, 0x86, 0x85, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x3a, 0x4b, 0x92, 0x41, 0x48, 0x0a, 0x46,
	0x2a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x12, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5,
	0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0xd2, 0x01, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xc1, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x80, 0x01,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62,
	0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x4c, 0x92, 0x41,
	0x49, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x41, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5,
	0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe6,
	0x80, 0xbb, 0xe9, 0x87, 0x8f, 0xe5, 0x8f, 0x8a, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0xae,
	0x9a, 0xe4, 0xb9, 0x89, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0xa1, 0x06, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x44, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87,
	0xe7, 0xbc, 0xa9, 0xe5, 0x86, 0x99, 0x29, 0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5,
	0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d,
	0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac,
	0xa6, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x75,
	0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x55, 0x92, 0x41, 0x52, 0x2a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x44, 0x32, 0x44, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0,
	0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0xbc, 0xa9, 0xe5, 0x86, 0x99, 0x29, 0x2c,
	0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9,
	0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf,
	0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x4e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x30, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x28,
	0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x20, 0xe9, 0x95,
	0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87,
	0x33, 0x32, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x73, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x61, 0x92, 0x41, 0x3e, 0x2a, 0x03, 0x6b, 0x65, 0x79, 0x32, 0x37, 0xe5, 0x8f,
	0x98, 0xe9, 0x87, 0x8f, 0x20, 0x6b, 0x65, 0x79, 0x2c, 0x20, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xe5, 0x86, 0x85, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba,
	0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5,
	0xad, 0x97, 0xe7, 0xac, 0xa6, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x18, 0x40, 0x32, 0x17, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x7c, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x66, 0x92, 0x41, 0x42, 0x2a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x32, 0x39, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe4, 0xbd, 0x9c,
	0xe7, 0x94, 0xa8, 0xe5, 0x9f, 0x9f, 0x2c, 0x20, 0xe5, 0x8f, 0x96, 0xe5, 0x80, 0xbc, 0xe8, 0x8c,
	0x83, 0xe5, 0x9b, 0xb4, 0x3a, 0x20, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2c, 0x20, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0xfa, 0x42, 0x1e, 0x72, 0x1c, 0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x32, 0x0f, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe9,
	0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x80, 0xbc, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x4e, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3a, 0x92, 0x41, 0x37, 0x2a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x32, 0x2f, 0xe5, 0x8f, 0x98, 0xe9,
	0x87, 0x8f, 0xe8, 0xaf, 0xb4, 0xe6, 0x98, 0x8e, 0xe4, 0xb8, 0x8e, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf,
	0xb0, 0x2c, 0x20, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5, 0x9c, 0xa8, 0x31, 0x30, 0x30, 0xe5,
	0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xbb, 0xa5, 0xe5, 0x86, 0x85, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x3a, 0x4b, 0x92, 0x41, 0x48, 0x0a, 0x46, 0x2a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x22, 0xc1,
	0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x4c, 0x92, 0x41, 0x49, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x41, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0xae, 0x9a,
	0xe4, 0xb9, 0x89, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c,
	0x20, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe6, 0x80, 0xbb, 0xe9, 0x87, 0x8f, 0xe5, 0x8f, 0x8a,
	0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x22, 0xee, 0x04, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x44, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96,
	0x87, 0xe7, 0xbc, 0xa9, 0xe5, 0x86, 0x99, 0x29, 0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80,
	0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8,
	0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7,
	0xac, 0xa6, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x5b, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45,
	0x92, 0x41, 0x42, 0x2a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x32, 0x39, 0xe5, 0x8f, 0x98, 0xe9,
	0x87, 0x8f, 0xe4, 0xbd, 0x9c, 0xe7, 0x94, 0xa8, 0xe5, 0x9f, 0x9f, 0x2c, 0x20, 0xe5, 0x8f, 0x96,
	0xe5, 0x80, 0xbc, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x3a, 0x20, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2c, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2c, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x09,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x42, 0x92, 0x41, 0x3f, 0x2a, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x32,
	0x32, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0x6b, 0x65, 0x79, 0x2c, 0x20, 0xe9, 0x80, 0x9a, 0xe8,
	0xbf, 0x87, 0xe6, 0xad, 0xa4, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe6, 0xa8, 0xa1, 0xe7, 0xb3,
	0x8a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x8f, 0x98,
	0xe9, 0x87, 0x8f, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x42,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2a,
	0x92, 0x41, 0x27, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x1d, 0xe5, 0x88, 0x86,
	0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x2c, 0x20, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4,
	0xba, 0xe7, 0xac, 0xac, 0xe5, 0x87, 0xa0, 0xe9, 0xa1, 0xb5, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x1a, 0xe5,
	0x88, 0x86, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x2c, 0x20, 0xe6, 0xaf, 0x8f,
	0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x34, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x22, 0x92,
	0x41, 0x1f, 0x2a, 0x03, 0x61, 0x6c, 0x6c, 0x32, 0x18, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x85, 0xa8, 0xe9, 0x87, 0x8f, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x3a, 0x5b, 0x92, 0x41, 0x58, 0x0a, 0x56, 0x2a, 0x1d, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x27, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x8b, 0xe6, 0x89, 0x80,
	0xe6, 0x9c, 0x89, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xd2, 0x02, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x4c, 0x92, 0x41, 0x49, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x41, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0x98,
	0xe9, 0x87, 0x8f, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe6, 0x80, 0xbb,
	0xe9, 0x87, 0x8f, 0xe5, 0x8f, 0x8a, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0xae, 0x9a, 0xe4,
	0xb9, 0x89, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0xdf, 0x02, 0x0a, 0x20, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x32, 0x44, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7,
	0xa0, 0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0xbc, 0xa9, 0xe5, 0x86, 0x99, 0x29,
	0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20,
	0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8,
	0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x6a, 0x0a, 0x06, 0x69, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x52, 0x92, 0x41, 0x4f, 0x2a, 0x06, 0x69, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x32, 0x45, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0xae, 0x9a, 0xe4,
	0xb9, 0x89, 0x20, 0x69, 0x64, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x2c, 0x20, 0xe4, 0xbb,
	0xa5, 0xe5, 0x8d, 0x8a, 0xe8, 0xa7, 0x92, 0xe9, 0x80, 0x97, 0xe5, 0x8f, 0xb7, 0xe3, 0x80, 0x81,
	0xe5, 0x88, 0x86, 0xe5, 0x8f, 0xb7, 0xe6, 0x88, 0x96, 0xe7, 0xa9, 0xba, 0xe6, 0xa0, 0xbc, 0xe4,
	0xbd, 0x9c, 0xe4, 0xb8, 0xba, 0xe5, 0x88, 0x86, 0xe9, 0x9a, 0x94, 0x52, 0x06, 0x69, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x3a, 0x55, 0x92, 0x41, 0x52, 0x0a, 0x50, 0x2a, 0x20, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe5, 0x88,
	0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x11, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb3, 0x02, 0x0a, 0x21, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x68, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x63, 0x73,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x1e, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0x8f,
	0x98, 0xe9, 0x87, 0x8f, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x22, 0xe4, 0x02, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x81, 0x01, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5f, 0x92, 0x41, 0x53, 0x2a, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x44, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b,
	0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0xbc,
	0xa9, 0xe5, 0x86, 0x99, 0x29, 0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x94, 0xaf,
	0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83,
	0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x02, 0x18, 0x40, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x17, 0x2a, 0x0a,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x32, 0x09, 0xe5, 0x8f, 0x98, 0xe9,
	0x87, 0x8f, 0x20, 0x69, 0x64, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x18, 0x20, 0x32, 0x17, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x2d, 0x5d, 0x2a, 0x24, 0x52, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x44, 0x3a, 0x64, 0x92, 0x41, 0x61, 0x0a, 0x5f, 0x2a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x24, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x8b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x8f, 0x98,
	0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x0a, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x22, 0x9c, 0x02, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x55, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64,
	0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0xe4, 0x02, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56,
	0x92, 0x41, 0x53, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x32, 0x44, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0xe8,
	0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0xbc, 0xa9, 0xe5, 0x86, 0x99, 0x29, 0x2c, 0x20, 0xe5, 0x85,
	0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5,
	0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34,
	0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x32, 0x09, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f,
	0x20, 0x69, 0x64, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x18, 0x20, 0x32, 0x17, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d,
	0x5d, 0x2a, 0x24, 0x52, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x3a,
	0x6c, 0x92, 0x41, 0x69, 0x0a, 0x67, 0x2a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x2a, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x8b, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0xd2, 0x01, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0xd2, 0x01, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x22, 0xaa, 0x02,
	0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x61, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x63,
	0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x29, 0x92, 0x41, 0x26, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1e, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0xa9, 0x03, 0x0a, 0x1e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x32, 0x44, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7,
	0xa0, 0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0xbc, 0xa9, 0xe5, 0x86, 0x99, 0x29,
	0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20,
	0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8,
	0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x17,
	0x2a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x32, 0x09, 0xe5, 0x8f,
	0x98, 0xe9, 0x87, 0x8f, 0x20, 0x69, 0x64, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x18, 0x20, 0x32, 0x17,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2a, 0x24, 0x52, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0f, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5,
	0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x66,
	0x92, 0x41, 0x63, 0x0a, 0x61, 0x2a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x24, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x8b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x8f, 0x98, 0xe9,
	0x87, 0x8f, 0xe5, 0x80, 0xbc, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x0a, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x22, 0xc7, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x22, 0xb9, 0x03, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x44, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96,
	0x87, 0xe7, 0xbc, 0xa9, 0xe5, 0x86, 0x99, 0x29, 0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80,
	0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8,
	0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7,
	0xac, 0xa6, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x5a, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x44, 0x32, 0x09, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0x20, 0x69, 0x64, 0xfa,
	0x42, 0x1d, 0x72, 0x1b, 0x18, 0x20, 0x32, 0x17, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2a, 0x24, 0x52,
	0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x4f, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x63, 0x73, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x15, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x8f, 0x98,
	0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x6e, 0x92, 0x41,
	0x6b, 0x0a, 0x69, 0x2a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x2a, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x8b, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9,
	0x97, 0xb4, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0xd2, 0x01, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0xd2,
	0x01, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x22, 0xc9, 0x01, 0x0a,
	0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0xbb, 0x02, 0x0a, 0x1b, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5f,
	0x92, 0x41, 0x53, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x32, 0x44, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0xe8,
	0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0xbc, 0xa9, 0xe5, 0x86, 0x99, 0x29, 0x2c, 0x20, 0xe5, 0x85,
	0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5,
	0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34,
	0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x02, 0x18, 0x40, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32,
	0x09, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x20, 0x69, 0x64, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x3a, 0x5f, 0x92, 0x41, 0x5c, 0x0a, 0x5a, 0x2a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x21, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0x8f, 0x98,
	0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0x9b, 0x02, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x55, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x22, 0x89, 0x03, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53,
	0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x44, 0xe9,
	0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6,
	0x96, 0x87, 0xe7, 0xbc, 0xa9, 0xe5, 0x86, 0x99, 0x29, 0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1,
	0x80, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4,
	0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97,
	0xe7, 0xac, 0xa6, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x37, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x32, 0x09, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x20, 0x69, 0x64, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41,
	0x1f, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x12, 0xe5, 0x91,
	0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x3a, 0x73, 0x92, 0x41, 0x70,
	0x0a, 0x6e, 0x2a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x27, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7,
	0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0x8f, 0x98, 0xe9, 0x87,
	0x8f, 0xe5, 0x80, 0xbc, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x22, 0xa9, 0x02, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x61, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1e, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x20, 0x49,
	0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0xa0, 0x03, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x44, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96,
	0xe7, 0xa0, 0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0xbc, 0xa9, 0xe5, 0x86, 0x99,
	0x29, 0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c,
	0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85,
	0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x57, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x16,
	0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x09, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x20, 0x69, 0x64, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x18, 0x20, 0x32, 0x17, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30,
	0x2d, 0x39, 0x2d, 0x5d, 0x2a, 0x24, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x49, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0f, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x8f, 0x98,
	0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x61, 0x92, 0x41,
	0x5e, 0x0a, 0x5c, 0x2a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x21, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22,
	0xc6, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0xd3, 0x03, 0x0a, 0x1f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x32, 0x44, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0,
	0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0xbc, 0xa9, 0xe5, 0x86, 0x99, 0x29, 0x2c,
	0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9,
	0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf,
	0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x09, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0x20, 0x69, 0x64, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x40, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x32, 0x12, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x4f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x15, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x3a, 0x6a, 0x92, 0x41, 0x67, 0x0a, 0x65, 0x2a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x27, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe6, 0x89,
	0x80, 0xe6, 0x9c, 0x89, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x22, 0xc8,
	0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0xa9, 0x02, 0x0a, 0x16, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x44, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87,
	0xe7, 0xbc, 0xa9, 0xe5, 0x86, 0x99, 0x29, 0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5,
	0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d,
	0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac,
	0xa6, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62,
	0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x48, 0x92, 0x41, 0x45,
	0x0a, 0x43, 0x2a, 0x16, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1b, 0xe4, 0xbb, 0x8e, 0xe6,
	0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe5, 0x8f, 0x98, 0xe9, 0x87,
	0x8f, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69,
	0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0xd1, 0x03, 0x0a, 0x16, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x78, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x44, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b,
	0xae, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0xbc,
	0xa9, 0xe5, 0x86, 0x99, 0x29, 0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x94, 0xaf,
	0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83,
	0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32,
	0x09, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x20, 0x69, 0x64, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x12, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d,
	0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4e, 0x92, 0x41, 0x4b, 0x2a, 0x07, 0x6b,
	0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x40, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0x20, 0x6b,
	0x65, 0x79, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x2c, 0x20, 0xe4, 0xbb, 0xa5, 0xe5, 0x8d,
	0x8a, 0xe8, 0xa7, 0x92, 0xe9, 0x80, 0x97, 0xe5, 0x8f, 0xb7, 0xe3, 0x80, 0x81, 0xe5, 0x88, 0x86,
	0xe5, 0x8f, 0xb7, 0xe6, 0x88, 0x96, 0xe7, 0xa9, 0xba, 0xe6, 0xa0, 0xbc, 0xe4, 0xbd, 0x9c, 0xe4,
	0xb8, 0xba, 0xe5, 0x88, 0x86, 0xe9, 0x9a, 0x94, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x3a, 0x58, 0x92, 0x41, 0x55, 0x0a, 0x53, 0x2a, 0x16, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x12, 0xe6, 0xb8, 0xb2, 0xe6, 0x9f, 0x93, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x24, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8a, 0x02, 0x0a, 0x17,
	0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x32, 0x0c, 0xe5, 0x8f, 0x98, 0xe9,
	0x87, 0x8f, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0x89, 0x08, 0x0a, 0x12, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x2a, 0x02, 0x69, 0x64, 0x32, 0x0e, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0xae, 0x9a, 0xe4,
	0xb9, 0x89, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x2a, 0x03, 0x6b, 0x65, 0x79, 0x32,
	0x0a, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0x20, 0x6b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x8f, 0x98, 0xe9, 0x87,
	0x8f, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23,
	0x92, 0x41, 0x20, 0x2a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x32, 0x15, 0xe5, 0x8f,
	0x98, 0xe9, 0x87, 0x8f, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe9, 0x94, 0xae, 0xe5, 0x80, 0xbc,
	0xe5, 0xaf, 0xb9, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x0c,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x32, 0x0f, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x80,
	0xbc, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x5b, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45,
	0x92, 0x41, 0x42, 0x2a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x32, 0x39, 0xe5, 0x8f, 0x98, 0xe9,
	0x87, 0x8f, 0xe4, 0xbd, 0x9c, 0xe7, 0x94, 0xa8, 0xe5, 0x9f, 0x9f, 0x2c, 0x20, 0xe5, 0x8f, 0x96,
	0xe5, 0x80, 0xbc, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x3a, 0x20, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2c, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2c, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x81, 0x01, 0x0a,
	0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x63, 0x92, 0x41, 0x60, 0x2a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x32, 0x53, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe4, 0xbd, 0x9c, 0xe7, 0x94, 0xa8, 0xe5, 0x9f,
	0x9f, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x20, 0xe5, 0x8f, 0x96, 0xe5, 0x80, 0xbc, 0xe8,
	0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x3a, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x8f, 0x98,
	0xe9, 0x87, 0x8f, 0x2c, 0x20, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x8f, 0x98, 0xe9, 0x87,
	0x8f, 0x2c, 0x20, 0xe6, 0x98, 0x8e, 0xe6, 0x98, 0x8e, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5,
	0x8f, 0x98, 0xe9, 0x87, 0x8f, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x4b, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x32, 0x20, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe5, 0x8f, 0x96, 0xe5, 0x80,
	0xbc, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x3a, 0x20, 0x73, 0x79, 0x73, 0x2f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x69, 0x0a,
	0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x45, 0x92, 0x41, 0x42, 0x2a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x32, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x20, 0xe5, 0x8f, 0x96, 0xe5, 0x80, 0xbc, 0xe8, 0x8c, 0x83, 0xe5,
	0x9b, 0xb4, 0x3a, 0x20, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0xae,
	0x2f, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x2a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x32, 0x2f, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe8, 0xaf, 0xb4, 0xe6, 0x98, 0x8e, 0xe4,
	0xb8, 0x8e, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x2c, 0x20, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6,
	0xe5, 0x9c, 0xa8, 0x31, 0x30, 0x30, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xbb, 0xa5, 0xe5,
	0x86, 0x85, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x51, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x32, 0x29, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0x20, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f, 0x3a, 0x20, 0x79,
	0x79, 0x79, 0x79, 0x2d, 0x4d, 0x4d, 0x2d, 0x64, 0x64, 0x20, 0x68, 0x68, 0x3a, 0x6d, 0x6d, 0x3a,
	0x73, 0x73, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41,
	0x34, 0x2a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x32, 0x29, 0xe4, 0xbf, 0xae, 0xe6,
	0x94, 0xb9, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x2c, 0x20, 0xe6, 0xa0, 0xbc, 0xe5, 0xbc, 0x8f,
	0x3a, 0x20, 0x79, 0x79, 0x79, 0x79, 0x2d, 0x4d, 0x4d, 0x2d, 0x64, 0x64, 0x20, 0x68, 0x68, 0x3a,
	0x6d, 0x6d, 0x3a, 0x73, 0x73, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x31,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xba, 0xba, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x31, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x32, 0x09, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe4, 0xba, 0xba, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x22, 0x9f, 0x03, 0x0a, 0x0d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x2a, 0x02, 0x69, 0x64, 0x32, 0x08, 0xe5, 0x8f, 0x98,
	0xe9, 0x87, 0x8f, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x2a, 0x03, 0x6b, 0x65, 0x79,
	0x32, 0x09, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0x6b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x8f, 0x98, 0xe9, 0x87,
	0x8f, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x0c,
	0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe7, 0x9a, 0x84, 0xe5, 0x80, 0xbc, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x32, 0x0f,
	0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe4, 0xbd, 0x9c, 0xe7, 0x94, 0xa8, 0xe5, 0x9f, 0x9f, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x89, 0x05, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x2a, 0x02,
	0x69, 0x64, 0x32, 0x09, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0x20, 0x69, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x78, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x44, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0xbc, 0xa9,
	0xe5, 0x86, 0x99, 0x29, 0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x94, 0xaf, 0xe4,
	0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd,
	0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x30, 0x2a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0x28, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd,
	0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x33, 0x32, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x2a, 0x03, 0x6b, 0x65, 0x79, 0x32, 0x37, 0xe5, 0x8f, 0x98,
	0xe9, 0x87, 0x8f, 0x20, 0x6b, 0x65, 0x79, 0x2c, 0x20, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5,
	0x86, 0x85, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6,
	0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad,
	0x97, 0xe7, 0xac, 0xa6, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5a, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0x92, 0x41, 0x41, 0x2a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x32, 0x39, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe4, 0xbd, 0x9c, 0xe7, 0x94,
	0xa8, 0xe5, 0x9f, 0x9f, 0x2c, 0x20, 0xe5, 0x8f, 0x96, 0xe5, 0x80, 0xbc, 0xe8, 0x8c, 0x83, 0xe5,
	0x9b, 0xb4, 0x3a, 0x20, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2c, 0x20, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x32, 0x0f, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe9, 0xbb, 0x98, 0xe8,
	0xae, 0xa4, 0xe5, 0x80, 0xbc, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x4e,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41,
	0x37, 0x2a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x32, 0x2f, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe8,
	0xaf, 0xb4, 0xe6, 0x98, 0x8e, 0xe4, 0xb8, 0x8e, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x2c, 0x20,
	0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5, 0x9c, 0xa8, 0x31, 0x30, 0x30, 0xe5, 0xad, 0x97, 0xe7,
	0xac, 0xa6, 0xe4, 0xbb, 0xa5, 0xe5, 0x86, 0x85, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x52,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x32,
	0x27, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe5,
	0x8f, 0x96, 0xe5, 0x80, 0xbc, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x3a, 0x20, 0x73, 0x79, 0x73,
	0x2c, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x22, 0x89, 0x05, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x2a, 0x02, 0x69, 0x64, 0x32, 0x09,
	0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0x20, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x78, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x2a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x32, 0x44, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0xbc, 0x96, 0xe7,
	0xa0, 0x81, 0x28, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe7, 0xbc, 0xa9, 0xe5, 0x86, 0x99, 0x29,
	0x2c, 0x20, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20,
	0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8,
	0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x30, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x32, 0x28, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x20,
	0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8,
	0xbf, 0x87, 0x33, 0x32, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x53, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x92,
	0x41, 0x3e, 0x2a, 0x03, 0x6b, 0x65, 0x79, 0x32, 0x37, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0x20,
	0x6b, 0x65, 0x79, 0x2c, 0x20, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x86, 0x85, 0xe5, 0x94,
	0xaf, 0xe4, 0xb8, 0x80, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8,
	0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5a, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0x92, 0x41, 0x41, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32,
	0x39, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe4, 0xbd, 0x9c, 0xe7, 0x94, 0xa8, 0xe5, 0x9f, 0x9f,
	0x2c, 0x20, 0xe5, 0x8f, 0x96, 0xe5, 0x80, 0xbc, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x3a, 0x20,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2c, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2c,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x37, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x32, 0x0f, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x80,
	0xbc, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x2a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x32, 0x2f, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe8, 0xaf, 0xb4, 0xe6, 0x98,
	0x8e, 0xe4, 0xb8, 0x8e, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x2c, 0x20, 0xe9, 0x99, 0x90, 0xe5,
	0x88, 0xb6, 0xe5, 0x9c, 0xa8, 0x31, 0x30, 0x30, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xbb,
	0xa5, 0xe5, 0x86, 0x85, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x52, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41,
	0x33, 0x2a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x32, 0x27, 0xe5, 0x8f, 0x98,
	0xe9, 0x87, 0x8f, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe5, 0x8f, 0x96, 0xe5, 0x80,
	0xbc, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x3a, 0x20, 0x73, 0x79, 0x73, 0x2c, 0x20, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xd9,
	0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0x92, 0x41,
	0x0f, 0x2a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0x06, 0xe6, 0x80, 0xbb, 0xe9, 0x87, 0x8f,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x5a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x32, 0x12, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0xae,
	0x9a, 0xe4, 0xb9, 0x89, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x3a, 0x35, 0x92, 0x41, 0x32, 0x0a, 0x30, 0x2a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x32, 0x12, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x22, 0x95, 0x01, 0x0a, 0x1d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0x92, 0x41, 0x15,
	0x2a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0x0c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6,
	0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x3a, 0x44, 0x92, 0x41,
	0x41, 0x0a, 0x3f, 0x2a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x32, 0x1e, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0x22, 0xd2, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0x92, 0x41,
	0x0f, 0x2a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0x06, 0xe6, 0x80, 0xbb, 0xe9, 0x87, 0x8f,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x55, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x32, 0x12, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x3a, 0x37,
	0x92, 0x41, 0x34, 0x0a, 0x32, 0x2a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x32, 0x18, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x22, 0x8f, 0x04, 0x0a, 0x12, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41,
	0x30, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x28, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d,
	0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x33, 0x32, 0xe5, 0xad, 0x97, 0xe7, 0xac,
	0xa6, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x75,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x63, 0x92, 0x41, 0x40,
	0x2a, 0x03, 0x6b, 0x65, 0x79, 0x32, 0x39, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0x20, 0x6b, 0x65,
	0x79, 0xef, 0xbc, 0x8c, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x86, 0x85, 0xe5, 0x94, 0xaf,
	0xe4, 0xb8, 0x80, 0xef, 0xbc, 0x8c, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8,
	0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6,
	0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x18, 0x40, 0x32, 0x17, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2a, 0x24,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5c, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x43, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32,
	0x3b, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe4, 0xbd, 0x9c, 0xe7, 0x94, 0xa8, 0xe5, 0x9f, 0x9f,
	0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0x96, 0xe5, 0x80, 0xbc, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xef,
	0xbc, 0x9a, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2c, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x0f,
	0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x80, 0xbc, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x2a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x32,
	0x2f, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe8, 0xaf, 0xb4, 0xe6, 0x98, 0x8e, 0xe4, 0xb8, 0x8e,
	0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x2c, 0x20, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5, 0x9c,
	0xa8, 0x31, 0x30, 0x30, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xbb, 0xa5, 0xe5, 0x86, 0x85,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x51, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x76, 0x61,
	0x72, 0x73, 0x32, 0x0f, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x15, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c,
	0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x32, 0x09, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x34, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x22, 0x92, 0x41, 0x1f, 0x0a, 0x1d, 0x2a, 0x0e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x0b, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x20, 0x41, 0x50, 0x49, 0x22, 0xad, 0x02, 0x0a, 0x0f, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x74, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x47, 0x92, 0x41, 0x44, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x3c, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0x2c, 0x20, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe6, 0x95,
	0xb4, 0xe4, 0xbd, 0x93, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe5, 0x92, 0x8c, 0x20, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0x20, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0x99, 0x01, 0x0a, 0x0b, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x12, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe6,
	0x95, 0xb4, 0xe4, 0xbd, 0x93, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x2a, 0x0c, 0x6d,
	0x6f, 0x6e, 0x67, 0x6f, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x1c, 0xe6, 0x9c, 0x8d,
	0xe5, 0x8a, 0xa1, 0xe4, 0xbe, 0x9d, 0xe8, 0xb5, 0x96, 0xe7, 0x9a, 0x84, 0x20, 0x6d, 0x6f, 0x6e,
	0x67, 0x6f, 0x20, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x67, 0x6f,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x33, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x24, 0x92, 0x41, 0x21, 0x0a, 0x1f, 0x2a, 0x0b, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x10, 0x50, 0x69, 0x6e, 0x67, 0x20,
	0x41, 0x50, 0x49, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb3, 0x02, 0x0a, 0x0c,
	0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0x92, 0x41, 0x44, 0x2a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x3c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7,
	0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x2c, 0x20, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe6, 0x9c, 0x8d,
	0xe5, 0x8a, 0xa1, 0xe6, 0x95, 0xb4, 0xe4, 0xbd, 0x93, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe5,
	0x92, 0x8c, 0x20, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x20, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x3a,
	0x20, 0x92, 0x41, 0x1d, 0x0a, 0x1b, 0x2a, 0x08, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x32, 0x0f, 0x50, 0x69, 0x6e, 0x67, 0x20, 0x41, 0x50, 0x49, 0x20, 0xe5, 0x93, 0x8d, 0xe5, 0xba,
	0x94, 0x32, 0xbb, 0x0a, 0x0a, 0x0a, 0x42, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x97, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x20, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x47, 0x92, 0x41, 0x22, 0x12, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0x1a, 0x12, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01,
	0x2a, 0x22, 0x17, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0xbf, 0x01, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x2e, 0x62, 0x63, 0x73, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x92, 0x41, 0x41, 0x12, 0x0c, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x1a, 0x31, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0xe6, 0x88, 0x96, 0xe8, 0x8b, 0xb1, 0xe6, 0x96,
	0x87, 0xe7, 0xbc, 0xa9, 0xe5, 0x86, 0x99, 0x2c, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9,
	0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2b, 0x12, 0x29, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x4f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x12, 0xa3, 0x01, 0x0a,
	0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x20,
	0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x92,
	0x41, 0x22, 0x12, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0x1a, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x1a, 0x23, 0x2f,
	0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x7d, 0x12, 0x8c, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x20, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3c, 0x92, 0x41, 0x0e, 0x1a, 0x0c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x2a, 0x23, 0x2f, 0x62,
	0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x7d, 0x12, 0xcc, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x1f, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x92, 0x41, 0x57, 0x12, 0x12, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x41,
	0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0xe8, 0xbf, 0x87, 0xe6, 0xbb, 0xa4, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x2c, 0x20, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe5, 0x88, 0x86, 0xe9,
	0xa1, 0xb5, 0xe5, 0x92, 0x8c, 0xe5, 0x85, 0xa8, 0xe9, 0x87, 0x8f, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0xd1, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x62, 0x63,
	0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x52, 0x65, 0x71, 0x1a, 0x22,
	0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x70, 0x92, 0x41, 0x43, 0x12, 0x1b, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6,
	0x9c, 0x89, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x24, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe6, 0x9c, 0x89, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe7, 0x9a, 0x84, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24,
	0x12, 0x22, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0xf8, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x49, 0x41, 0x4d, 0x12, 0x21, 0x2e, 0x62, 0x63,
	0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x49, 0x41, 0x4d, 0x52, 0x65, 0x71, 0x1a, 0x22,
	0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x49, 0x41, 0x4d, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x9a, 0x01, 0x92, 0x41, 0x70, 0x12, 0x36, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe5, 0xae, 0xb9, 0xe5, 0x99, 0xa8, 0xe6, 0x9c, 0x8d, 0xe5,
	0x8a, 0xa1, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0x49, 0x41, 0x4d, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83,
	0x1a, 0x36, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0xe5, 0xae,
	0xb9, 0xe5, 0x99, 0xa8, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0x49,
	0x41, 0x4d, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f,
	0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x69, 0x61, 0x6d, 0x32,
	0xcb, 0x04, 0x0a, 0x08, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0xbd, 0x01, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x2e, 0x62,
	0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62,
	0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x92,
	0x41, 0x34, 0x12, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x18, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x62,
	0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x7d, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x9d, 0x01, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x2e,
	0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4a, 0x92, 0x41, 0x28, 0x12, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xb8, 0x9a,
	0xe5, 0x8a, 0xa1, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0xde, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x12, 0x26, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62,
	0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x92, 0x41, 0x34, 0x12, 0x18, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0xe6, 0x8b, 0x93, 0xe6, 0x89, 0x91, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xb8, 0x9a, 0xe5,
	0x8a, 0xa1, 0xe6, 0x8b, 0x93, 0xe6, 0x89, 0x91, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x32, 0xbd, 0x15,
	0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0xd7, 0x01, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x22, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7b, 0x92, 0x41, 0x28, 0x12, 0x12, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97,
	0xb4, 0x1a, 0x12, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7,
	0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x3a, 0x01, 0x2a, 0x22, 0x45,
	0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x94, 0x02, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x24, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab,
	0x01, 0x92, 0x41, 0x3c, 0x12, 0x1c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x69, 0x74, 0x73, 0x6d, 0xe5, 0x9b, 0x9e, 0xe8,
	0xb0, 0x83, 0x1a, 0x1c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d,
	0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x69, 0x74, 0x73, 0x6d, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0, 0x83,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x66, 0x3a, 0x01, 0x2a, 0x22, 0x61, 0x2f, 0x62, 0x63, 0x73, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x63, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0xe4, 0x01, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x22, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x01, 0x92, 0x41, 0x28, 0x12,
	0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0x1a, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x91, 0xbd, 0xe5, 0x90,
	0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x56, 0x3a, 0x01, 0x2a,
	0x1a, 0x51, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x7d, 0x12, 0x98, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x24, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaf, 0x01, 0x92,
	0x41, 0x40, 0x12, 0x1e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d,
	0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x20, 0x49, 0x54, 0x53, 0x4d, 0x20, 0xe5, 0x9b, 0x9e, 0xe8,
	0xb0, 0x83, 0x1a, 0x1e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d,
	0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x20, 0x49, 0x54, 0x53, 0x4d, 0x20, 0xe5, 0x9b, 0x9e, 0xe8,
	0xb0, 0x83, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x66, 0x3a, 0x01, 0x2a, 0x22, 0x61, 0x2f, 0x62, 0x63,
	0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xe4,
	0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x1f, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x90, 0x01, 0x92, 0x41, 0x34, 0x12, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xaa, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9,
	0x97, 0xb4, 0x1a, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xaa,
	0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x53, 0x12, 0x51, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x7d, 0x12, 0xf0, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x63,
	0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x96, 0x01, 0x92, 0x41, 0x46, 0x12, 0x21, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe4, 0xb8, 0x8b, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x1a, 0x21, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xb8, 0x8b, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe5,
	0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x47, 0x12, 0x45, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0xe1, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x62,
	0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x92, 0x41, 0x28, 0x12, 0x12, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x1a,
	0x12, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x53, 0x2a, 0x51, 0x2f, 0x62, 0x63, 0x73, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x12, 0x98, 0x02, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x24, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaf, 0x01, 0x92, 0x41, 0x40, 0x12, 0x1e, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x20,
	0x49, 0x54, 0x53, 0x4d, 0x20, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0, 0x83, 0x1a, 0x1e, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x20,
	0x49, 0x54, 0x53, 0x4d, 0x20, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0, 0x83, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x66, 0x3a, 0x01, 0x2a, 0x22, 0x61, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xd7, 0x01, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x62, 0x63, 0x73, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x63,
	0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80,
	0x01, 0x92, 0x41, 0x28, 0x12, 0x12, 0xe5, 0x90, 0x8c, 0xe6, 0xad, 0xa5, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x1a, 0x12, 0xe5, 0x90, 0x8c, 0xe6, 0xad, 0xa5,
	0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x4f, 0x3a, 0x01, 0x2a, 0x22, 0x4a, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x79, 0x6e,
	0x63, 0x12, 0xff, 0x01, 0x0a, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x24, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x92, 0x41, 0x34, 0x12, 0x18, 0xe6, 0x92, 0xa4, 0xe5,
	0x9b, 0x9e, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0xae,
	0xa1, 0xe6, 0x89, 0xb9, 0x1a, 0x18, 0xe6, 0x92, 0xa4, 0xe5, 0x9b, 0x9e, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0xae, 0xa1, 0xe6, 0x89, 0xb9, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x5f, 0x3a, 0x01, 0x2a, 0x22, 0x5a, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x12, 0x87, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x62,
	0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x9b, 0x01, 0x92, 0x41, 0x40, 0x12, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x8e, 0x9f,
	0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x8e, 0x9f,
	0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x12, 0x50, 0x2f, 0x62, 0x63,
	0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x4f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x32, 0xa2, 0x1c,
	0x0a, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x2e,
	0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x92, 0x41, 0x1c, 0x12, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0x1a, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5,
	0x8f, 0x98, 0xe9, 0x87, 0x8f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f,
	0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0xbf, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x21, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x92, 0x41, 0x1c, 0x12, 0x0c,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0x1a, 0x0c, 0xe6, 0x9b,
	0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41,
	0x3a, 0x01, 0x2a, 0x1a, 0x3c, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44,
	0x7d, 0x12, 0xf5, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e,
	0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x63, 0x73, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x92, 0x41, 0x46, 0x12, 0x21, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x8b, 0xe6, 0x89, 0x80,
	0xe6, 0x9c, 0x89, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x1a,
	0x21, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe4, 0xb8, 0x8b,
	0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0xae, 0x9a, 0xe4,
	0xb9, 0x89, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0xe8, 0x01, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e, 0x92, 0x41, 0x34, 0x12, 0x18, 0xe6, 0x89, 0xb9, 0xe9, 0x87,
	0x8f, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0xae, 0x9a,
	0xe4, 0xb9, 0x89, 0x1a, 0x18, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe5, 0x88, 0xa0, 0xe9, 0x99,
	0xa4, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x31, 0x2a, 0x2f, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0xfe, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x28,
	0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x8f, 0x01, 0x92, 0x41, 0x40, 0x12, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84,
	0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0x1a, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84,
	0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x12,
	0x44, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x2f, 0x7b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x9e, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x2a, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa9, 0x01, 0x92, 0x41, 0x58,
	0x12, 0x2a, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6, 0x89,
	0x80, 0xe6, 0x9c, 0x89, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4,
	0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0x1a, 0x2a, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89,
	0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe7, 0x9a, 0x84, 0xe5,
	0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48, 0x12, 0x46,
	0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f,
	0x7b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x87, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x2a, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92, 0x01, 0x92, 0x41,
	0x40, 0x12, 0x1e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80,
	0xbc, 0x1a, 0x1e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80,
	0xbc, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x3a, 0x01, 0x2a, 0x1a, 0x44, 0x2f, 0x62, 0x63, 0x73,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x7d, 0x2f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0xa7, 0x02, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2c,
	0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62,
	0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac, 0x01, 0x92, 0x41,
	0x58, 0x12, 0x2a, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6,
	0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97,
	0xb4, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0x1a, 0x2a, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe6, 0x89, 0x80, 0xe6, 0x9c,
	0x89, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe7, 0x9a, 0x84,
	0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x3a,
	0x01, 0x2a, 0x1a, 0x46, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x7d,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0xfb, 0x01, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62,
	0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x01, 0x92, 0x41, 0x40, 0x12, 0x1e, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe6, 0x89, 0x80,
	0xe6, 0x9c, 0x89, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0x1a, 0x1e, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe6, 0x89, 0x80,
	0xe6, 0x9c, 0x89, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x46, 0x12, 0x44, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0xa4, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb2, 0x01, 0x92, 0x41, 0x4c,
	0x12, 0x24, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9,
	0xba, 0xe9, 0x97, 0xb4, 0xe7, 0x9a, 0x84, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0x8f, 0x98,
	0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0x1a, 0x24, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x91,
	0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe7, 0x9a, 0x84, 0xe6, 0x89, 0x80,
	0xe6, 0x9c, 0x89, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x5d, 0x12, 0x5b, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x84, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x62, 0x63, 0x73,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x92, 0x01, 0x92, 0x41, 0x40, 0x12, 0x1e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0x8f,
	0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0x1a, 0x1e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0x8f,
	0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x3a, 0x01, 0x2a,
	0x1a, 0x44, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0xad, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5,
	0x01, 0x92, 0x41, 0x4c, 0x12, 0x24, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe7, 0x9a, 0x84, 0xe6, 0x89, 0x80, 0xe6, 0x9c,
	0x89, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc, 0x1a, 0x24, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe7, 0x9a,
	0x84, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x80, 0xbc,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x60, 0x3a, 0x01, 0x2a, 0x1a, 0x5b, 0x2f, 0x62, 0x63, 0x73, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0xd4, 0x01, 0x0a, 0x0f, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x62, 0x63, 0x73,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x78, 0x92, 0x41, 0x34, 0x12, 0x18, 0xe4, 0xbb, 0x8e, 0xe6, 0x96, 0x87,
	0xe4, 0xbb, 0xb6, 0xe4, 0xb8, 0xad, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe5, 0x8f, 0x98, 0xe9,
	0x87, 0x8f, 0x1a, 0x18, 0xe4, 0xbb, 0x8e, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe4, 0xb8, 0xad,
	0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3b, 0x3a, 0x01, 0x2a, 0x22, 0x36, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0xb2, 0x02,
	0x0a, 0x0f, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x22, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x52,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd5, 0x01, 0x92, 0x41, 0x68,
	0x12, 0x32, 0xe6, 0xb8, 0xb2, 0xe6, 0x9f, 0x93, 0xe5, 0x8f, 0x98, 0xe9, 0x87, 0x8f, 0xe5, 0x9c,
	0xa8, 0xe7, 0x89, 0xb9, 0xe5, 0xae, 0x9a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x2c, 0x20, 0xe5,
	0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe4, 0xb8, 0x8b, 0xe7, 0x9a,
	0x84, 0xe5, 0x80, 0xbc, 0x1a, 0x32, 0xe6, 0xb8, 0xb2, 0xe6, 0x9f, 0x93, 0xe5, 0x8f, 0x98, 0xe9,
	0x87, 0x8f, 0xe5, 0x9c, 0xa8, 0xe7, 0x89, 0xb9, 0xe5, 0xae, 0x9a, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0x2c, 0x20, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe4,
	0xb8, 0x8b, 0xe7, 0x9a, 0x84, 0xe5, 0x80, 0xbc, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x64, 0x12, 0x62,
	0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x7d, 0x2f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x32, 0x8f, 0x02, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x12, 0x87,
	0x01, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x12, 0x1a, 0x2e, 0x62, 0x63, 0x73,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x43, 0x92, 0x41, 0x22, 0x1a, 0x20, 0xe6, 0x8e, 0xa2, 0xe9, 0x92, 0x88,
	0x41, 0x50, 0x49, 0x2c, 0x20, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0x72, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0xe6, 0x8e, 0xa2, 0xe6, 0xb5, 0x8b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x12, 0x16, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x12, 0x7a, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67,
	0x12, 0x17, 0x2e, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x62, 0x63, 0x73, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3f, 0x92, 0x41, 0x21, 0x1a, 0x1f, 0xe6, 0x8e, 0xa2, 0xe9, 0x92, 0x88,
	0x41, 0x50, 0x49, 0x2c, 0x20, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0x6c, 0x69, 0x76, 0x65, 0x6e,
	0x65, 0x73, 0x73, 0xe6, 0x8e, 0xa2, 0xe6, 0xb5, 0x8b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12,
	0x13, 0x2f, 0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x69, 0x6e, 0x67, 0x42, 0xa3, 0x01, 0x92, 0x41, 0x90, 0x01, 0x12, 0x24, 0x0a, 0x1b, 0x42,
	0x63, 0x73, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x20, 0x44, 0x6f, 0x63, 0x32, 0x05, 0x30, 0x2e, 0x30, 0x2e,
	0x31, 0x22, 0x0a, 0x2f, 0x62, 0x63, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x34, 0x2a, 0x01, 0x01,
	0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x23, 0x0a, 0x21, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x13, 0x08, 0x02, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x41,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x5a, 0x0d, 0x2e, 0x2f, 0x3b,
	0x62, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_bcsproject_proto_rawDescOnce sync.Once
	file_bcsproject_proto_rawDescData = file_bcsproject_proto_rawDesc
)

func file_bcsproject_proto_rawDescGZIP() []byte {
	file_bcsproject_proto_rawDescOnce.Do(func() {
		file_bcsproject_proto_rawDescData = protoimpl.X.CompressGZIP(file_bcsproject_proto_rawDescData)
	})
	return file_bcsproject_proto_rawDescData
}

var file_bcsproject_proto_msgTypes = make([]protoimpl.MessageInfo, 88)
var file_bcsproject_proto_goTypes = []interface{}{
	(*Project)(nil),                           // 0: bcsproject.Project
	(*CreateProjectRequest)(nil),              // 1: bcsproject.CreateProjectRequest
	(*GetProjectRequest)(nil),                 // 2: bcsproject.GetProjectRequest
	(*UpdateProjectRequest)(nil),              // 3: bcsproject.UpdateProjectRequest
	(*DeleteProjectRequest)(nil),              // 4: bcsproject.DeleteProjectRequest
	(*ProjectResponse)(nil),                   // 5: bcsproject.ProjectResponse
	(*ListProjectsRequest)(nil),               // 6: bcsproject.ListProjectsRequest
	(*ListProjectData)(nil),                   // 7: bcsproject.ListProjectData
	(*ListProjectsResponse)(nil),              // 8: bcsproject.ListProjectsResponse
	(*Perms)(nil),                             // 9: bcsproject.Perms
	(*ListAuthorizedProjReq)(nil),             // 10: bcsproject.ListAuthorizedProjReq
	(*ListAuthorizedProjResp)(nil),            // 11: bcsproject.ListAuthorizedProjResp
	(*ListProjectsForIAMReq)(nil),             // 12: bcsproject.ListProjectsForIAMReq
	(*ListProjectsForIAMResp)(nil),            // 13: bcsproject.ListProjectsForIAMResp
	(*GetBusinessRequest)(nil),                // 14: bcsproject.GetBusinessRequest
	(*GetBusinessResponse)(nil),               // 15: bcsproject.GetBusinessResponse
	(*ListBusinessRequest)(nil),               // 16: bcsproject.ListBusinessRequest
	(*ListBusinessResponse)(nil),              // 17: bcsproject.ListBusinessResponse
	(*GetBusinessTopologyRequest)(nil),        // 18: bcsproject.GetBusinessTopologyRequest
	(*GetBusinessTopologyResponse)(nil),       // 19: bcsproject.GetBusinessTopologyResponse
	(*BusinessData)(nil),                      // 20: bcsproject.BusinessData
	(*TopologyData)(nil),                      // 21: bcsproject.TopologyData
	(*SyncNamespaceRequest)(nil),              // 22: bcsproject.SyncNamespaceRequest
	(*SyncNamespaceResponse)(nil),             // 23: bcsproject.SyncNamespaceResponse
	(*WithdrawNamespaceRequest)(nil),          // 24: bcsproject.WithdrawNamespaceRequest
	(*WithdrawNamespaceResponse)(nil),         // 25: bcsproject.WithdrawNamespaceResponse
	(*CreateNamespaceRequest)(nil),            // 26: bcsproject.CreateNamespaceRequest
	(*CreateNamespaceResponse)(nil),           // 27: bcsproject.CreateNamespaceResponse
	(*NamespaceCallbackRequest)(nil),          // 28: bcsproject.NamespaceCallbackRequest
	(*NamespaceCallbackResponse)(nil),         // 29: bcsproject.NamespaceCallbackResponse
	(*UpdateNamespaceRequest)(nil),            // 30: bcsproject.UpdateNamespaceRequest
	(*UpdateNamespaceResponse)(nil),           // 31: bcsproject.UpdateNamespaceResponse
	(*GetNamespaceRequest)(nil),               // 32: bcsproject.GetNamespaceRequest
	(*GetNamespaceResponse)(nil),              // 33: bcsproject.GetNamespaceResponse
	(*ListNamespacesRequest)(nil),             // 34: bcsproject.ListNamespacesRequest
	(*ListNamespacesResponse)(nil),            // 35: bcsproject.ListNamespacesResponse
	(*ListNativeNamespacesRequest)(nil),       // 36: bcsproject.ListNativeNamespacesRequest
	(*ListNativeNamespacesResponse)(nil),      // 37: bcsproject.ListNativeNamespacesResponse
	(*DeleteNamespaceRequest)(nil),            // 38: bcsproject.DeleteNamespaceRequest
	(*DeleteNamespaceResponse)(nil),           // 39: bcsproject.DeleteNamespaceResponse
	(*NamespaceData)(nil),                     // 40: bcsproject.NamespaceData
	(*NativeNamespaceData)(nil),               // 41: bcsproject.NativeNamespaceData
	(*Label)(nil),                             // 42: bcsproject.Label
	(*Annotation)(nil),                        // 43: bcsproject.Annotation
	(*ResourceQuota)(nil),                     // 44: bcsproject.ResourceQuota
	(*CreateVariableRequest)(nil),             // 45: bcsproject.CreateVariableRequest
	(*CreateVariableResponse)(nil),            // 46: bcsproject.CreateVariableResponse
	(*UpdateVariableRequest)(nil),             // 47: bcsproject.UpdateVariableRequest
	(*UpdateVariableResponse)(nil),            // 48: bcsproject.UpdateVariableResponse
	(*ListVariableDefinitionsRequest)(nil),    // 49: bcsproject.ListVariableDefinitionsRequest
	(*ListVariableDefinitionsResponse)(nil),   // 50: bcsproject.ListVariableDefinitionsResponse
	(*DeleteVariableDefinitionsRequest)(nil),  // 51: bcsproject.DeleteVariableDefinitionsRequest
	(*DeleteVariableDefinitionsResponse)(nil), // 52: bcsproject.DeleteVariableDefinitionsResponse
	(*ListClustersVariablesRequest)(nil),      // 53: bcsproject.ListClustersVariablesRequest
	(*ListClustersVariablesResponse)(nil),     // 54: bcsproject.ListClustersVariablesResponse
	(*ListNamespacesVariablesRequest)(nil),    // 55: bcsproject.ListNamespacesVariablesRequest
	(*ListNamespacesVariablesResponse)(nil),   // 56: bcsproject.ListNamespacesVariablesResponse
	(*UpdateClustersVariablesRequest)(nil),    // 57: bcsproject.UpdateClustersVariablesRequest
	(*UpdateClustersVariablesResponse)(nil),   // 58: bcsproject.UpdateClustersVariablesResponse
	(*UpdateNamespacesVariablesRequest)(nil),  // 59: bcsproject.UpdateNamespacesVariablesRequest
	(*UpdateNamespacesVariablesResponse)(nil), // 60: bcsproject.UpdateNamespacesVariablesResponse
	(*ListClusterVariablesRequest)(nil),       // 61: bcsproject.ListClusterVariablesRequest
	(*ListClusterVariablesResponse)(nil),      // 62: bcsproject.ListClusterVariablesResponse
	(*ListNamespaceVariablesRequest)(nil),     // 63: bcsproject.ListNamespaceVariablesRequest
	(*ListNamespaceVariablesResponse)(nil),    // 64: bcsproject.ListNamespaceVariablesResponse
	(*UpdateClusterVariablesRequest)(nil),     // 65: bcsproject.UpdateClusterVariablesRequest
	(*UpdateClusterVariablesResponse)(nil),    // 66: bcsproject.UpdateClusterVariablesResponse
	(*UpdateNamespaceVariablesRequest)(nil),   // 67: bcsproject.UpdateNamespaceVariablesRequest
	(*UpdateNamespaceVariablesResponse)(nil),  // 68: bcsproject.UpdateNamespaceVariablesResponse
	(*ImportVariablesRequest)(nil),            // 69: bcsproject.ImportVariablesRequest
	(*ImportVariablesResponse)(nil),           // 70: bcsproject.ImportVariablesResponse
	(*RenderVariablesRequest)(nil),            // 71: bcsproject.RenderVariablesRequest
	(*RenderVariablesResponse)(nil),           // 72: bcsproject.RenderVariablesResponse
	(*VariableDefinition)(nil),                // 73: bcsproject.VariableDefinition
	(*VariableValue)(nil),                     // 74: bcsproject.VariableValue
	(*CreateVariableData)(nil),                // 75: bcsproject.CreateVariableData
	(*UpdateVariableData)(nil),                // 76: bcsproject.UpdateVariableData
	(*ListVariableDefinitionData)(nil),        // 77: bcsproject.ListVariableDefinitionData
	(*DeleteVariableDefinitionsData)(nil),     // 78: bcsproject.DeleteVariableDefinitionsData
	(*ListVariableValuesData)(nil),            // 79: bcsproject.ListVariableValuesData
	(*ImportVariableData)(nil),                // 80: bcsproject.ImportVariableData
	(*ImportVariableVarData)(nil),             // 81: bcsproject.ImportVariableVarData
	(*HealthzRequest)(nil),                    // 82: bcsproject.HealthzRequest
	(*HealthzResponse)(nil),                   // 83: bcsproject.HealthzResponse
	(*HealthzData)(nil),                       // 84: bcsproject.HealthzData
	(*PingRequest)(nil),                       // 85: bcsproject.PingRequest
	(*PingResponse)(nil),                      // 86: bcsproject.PingResponse
	(*ListProjectsForIAMResp_Project)(nil),    // 87: bcsproject.ListProjectsForIAMResp.Project
	(*wrappers.BoolValue)(nil),                // 88: google.protobuf.BoolValue
	(*_struct.Struct)(nil),                    // 89: google.protobuf.Struct
}
var file_bcsproject_proto_depIdxs = []int32{
	88, // 0: bcsproject.UpdateProjectRequest.useBKRes:type_name -> google.protobuf.BoolValue
	88, // 1: bcsproject.UpdateProjectRequest.isOffline:type_name -> google.protobuf.BoolValue
	88, // 2: bcsproject.UpdateProjectRequest.isSecret:type_name -> google.protobuf.BoolValue
	0,  // 3: bcsproject.ProjectResponse.data:type_name -> bcsproject.Project
	9,  // 4: bcsproject.ProjectResponse.web_annotations:type_name -> bcsproject.Perms
	0,  // 5: bcsproject.ListProjectData.results:type_name -> bcsproject.Project
	7,  // 6: bcsproject.ListProjectsResponse.data:type_name -> bcsproject.ListProjectData
	9,  // 7: bcsproject.ListProjectsResponse.web_annotations:type_name -> bcsproject.Perms
	89, // 8: bcsproject.Perms.perms:type_name -> google.protobuf.Struct
	7,  // 9: bcsproject.ListAuthorizedProjResp.data:type_name -> bcsproject.ListProjectData
	9,  // 10: bcsproject.ListAuthorizedProjResp.web_annotations:type_name -> bcsproject.Perms
	87, // 11: bcsproject.ListProjectsForIAMResp.data:type_name -> bcsproject.ListProjectsForIAMResp.Project
	20, // 12: bcsproject.GetBusinessResponse.data:type_name -> bcsproject.BusinessData
	9,  // 13: bcsproject.GetBusinessResponse.web_annotations:type_name -> bcsproject.Perms
	20, // 14: bcsproject.ListBusinessResponse.data:type_name -> bcsproject.BusinessData
	9,  // 15: bcsproject.ListBusinessResponse.web_annotations:type_name -> bcsproject.Perms
	21, // 16: bcsproject.GetBusinessTopologyResponse.data:type_name -> bcsproject.TopologyData
	9,  // 17: bcsproject.GetBusinessTopologyResponse.web_annotations:type_name -> bcsproject.Perms
	21, // 18: bcsproject.TopologyData.child:type_name -> bcsproject.TopologyData
	44, // 19: bcsproject.CreateNamespaceRequest.quota:type_name -> bcsproject.ResourceQuota
	42, // 20: bcsproject.CreateNamespaceRequest.labels:type_name -> bcsproject.Label
	43, // 21: bcsproject.CreateNamespaceRequest.annotations:type_name -> bcsproject.Annotation
	74, // 22: bcsproject.CreateNamespaceRequest.variables:type_name -> bcsproject.VariableValue
	40, // 23: bcsproject.CreateNamespaceResponse.data:type_name -> bcsproject.NamespaceData
	9,  // 24: bcsproject.CreateNamespaceResponse.web_annotations:type_name -> bcsproject.Perms
	42, // 25: bcsproject.UpdateNamespaceRequest.labels:type_name -> bcsproject.Label
	43, // 26: bcsproject.UpdateNamespaceRequest.annotations:type_name -> bcsproject.Annotation
	44, // 27: bcsproject.UpdateNamespaceRequest.quota:type_name -> bcsproject.ResourceQuota
	9,  // 28: bcsproject.UpdateNamespaceResponse.web_annotations:type_name -> bcsproject.Perms
	40, // 29: bcsproject.GetNamespaceResponse.data:type_name -> bcsproject.NamespaceData
	9,  // 30: bcsproject.GetNamespaceResponse.web_annotations:type_name -> bcsproject.Perms
	40, // 31: bcsproject.ListNamespacesResponse.data:type_name -> bcsproject.NamespaceData
	9,  // 32: bcsproject.ListNamespacesResponse.web_annotations:type_name -> bcsproject.Perms
	41, // 33: bcsproject.ListNativeNamespacesResponse.data:type_name -> bcsproject.NativeNamespaceData
	9,  // 34: bcsproject.ListNativeNamespacesResponse.web_annotations:type_name -> bcsproject.Perms
	9,  // 35: bcsproject.DeleteNamespaceResponse.perms:type_name -> bcsproject.Perms
	44, // 36: bcsproject.NamespaceData.quota:type_name -> bcsproject.ResourceQuota
	44, // 37: bcsproject.NamespaceData.used:type_name -> bcsproject.ResourceQuota
	42, // 38: bcsproject.NamespaceData.labels:type_name -> bcsproject.Label
	43, // 39: bcsproject.NamespaceData.annotations:type_name -> bcsproject.Annotation
	74, // 40: bcsproject.NamespaceData.variables:type_name -> bcsproject.VariableValue
	75, // 41: bcsproject.CreateVariableResponse.data:type_name -> bcsproject.CreateVariableData
	76, // 42: bcsproject.UpdateVariableResponse.data:type_name -> bcsproject.UpdateVariableData
	77, // 43: bcsproject.ListVariableDefinitionsResponse.data:type_name -> bcsproject.ListVariableDefinitionData
	78, // 44: bcsproject.DeleteVariableDefinitionsResponse.data:type_name -> bcsproject.DeleteVariableDefinitionsData
	79, // 45: bcsproject.ListClustersVariablesResponse.data:type_name -> bcsproject.ListVariableValuesData
	79, // 46: bcsproject.ListNamespacesVariablesResponse.data:type_name -> bcsproject.ListVariableValuesData
	74, // 47: bcsproject.UpdateClustersVariablesRequest.data:type_name -> bcsproject.VariableValue
	74, // 48: bcsproject.UpdateNamespacesVariablesRequest.data:type_name -> bcsproject.VariableValue
	79, // 49: bcsproject.ListClusterVariablesResponse.data:type_name -> bcsproject.ListVariableValuesData
	79, // 50: bcsproject.ListNamespaceVariablesResponse.data:type_name -> bcsproject.ListVariableValuesData
	74, // 51: bcsproject.UpdateClusterVariablesRequest.data:type_name -> bcsproject.VariableValue
	74, // 52: bcsproject.UpdateNamespaceVariablesRequest.data:type_name -> bcsproject.VariableValue
	80, // 53: bcsproject.ImportVariablesRequest.data:type_name -> bcsproject.ImportVariableData
	74, // 54: bcsproject.RenderVariablesResponse.data:type_name -> bcsproject.VariableValue
	73, // 55: bcsproject.ListVariableDefinitionData.results:type_name -> bcsproject.VariableDefinition
	74, // 56: bcsproject.ListVariableValuesData.results:type_name -> bcsproject.VariableValue
	81, // 57: bcsproject.ImportVariableData.vars:type_name -> bcsproject.ImportVariableVarData
	84, // 58: bcsproject.HealthzResponse.data:type_name -> bcsproject.HealthzData
	1,  // 59: bcsproject.BCSProject.CreateProject:input_type -> bcsproject.CreateProjectRequest
	2,  // 60: bcsproject.BCSProject.GetProject:input_type -> bcsproject.GetProjectRequest
	3,  // 61: bcsproject.BCSProject.UpdateProject:input_type -> bcsproject.UpdateProjectRequest
	4,  // 62: bcsproject.BCSProject.DeleteProject:input_type -> bcsproject.DeleteProjectRequest
	6,  // 63: bcsproject.BCSProject.ListProjects:input_type -> bcsproject.ListProjectsRequest
	10, // 64: bcsproject.BCSProject.ListAuthorizedProjects:input_type -> bcsproject.ListAuthorizedProjReq
	12, // 65: bcsproject.BCSProject.ListProjectsForIAM:input_type -> bcsproject.ListProjectsForIAMReq
	14, // 66: bcsproject.Business.GetBusiness:input_type -> bcsproject.GetBusinessRequest
	16, // 67: bcsproject.Business.ListBusiness:input_type -> bcsproject.ListBusinessRequest
	18, // 68: bcsproject.Business.GetBusinessTopology:input_type -> bcsproject.GetBusinessTopologyRequest
	26, // 69: bcsproject.Namespace.CreateNamespace:input_type -> bcsproject.CreateNamespaceRequest
	28, // 70: bcsproject.Namespace.CreateNamespaceCallback:input_type -> bcsproject.NamespaceCallbackRequest
	30, // 71: bcsproject.Namespace.UpdateNamespace:input_type -> bcsproject.UpdateNamespaceRequest
	28, // 72: bcsproject.Namespace.UpdateNamespaceCallback:input_type -> bcsproject.NamespaceCallbackRequest
	32, // 73: bcsproject.Namespace.GetNamespace:input_type -> bcsproject.GetNamespaceRequest
	34, // 74: bcsproject.Namespace.ListNamespaces:input_type -> bcsproject.ListNamespacesRequest
	38, // 75: bcsproject.Namespace.DeleteNamespace:input_type -> bcsproject.DeleteNamespaceRequest
	28, // 76: bcsproject.Namespace.DeleteNamespaceCallback:input_type -> bcsproject.NamespaceCallbackRequest
	22, // 77: bcsproject.Namespace.SyncNamespace:input_type -> bcsproject.SyncNamespaceRequest
	24, // 78: bcsproject.Namespace.WithdrawNamespace:input_type -> bcsproject.WithdrawNamespaceRequest
	36, // 79: bcsproject.Namespace.ListNativeNamespaces:input_type -> bcsproject.ListNativeNamespacesRequest
	45, // 80: bcsproject.Variable.CreateVariable:input_type -> bcsproject.CreateVariableRequest
	47, // 81: bcsproject.Variable.UpdateVariable:input_type -> bcsproject.UpdateVariableRequest
	49, // 82: bcsproject.Variable.ListVariableDefinitions:input_type -> bcsproject.ListVariableDefinitionsRequest
	51, // 83: bcsproject.Variable.DeleteVariableDefinitions:input_type -> bcsproject.DeleteVariableDefinitionsRequest
	53, // 84: bcsproject.Variable.ListClustersVariables:input_type -> bcsproject.ListClustersVariablesRequest
	55, // 85: bcsproject.Variable.ListNamespacesVariables:input_type -> bcsproject.ListNamespacesVariablesRequest
	57, // 86: bcsproject.Variable.UpdateClustersVariables:input_type -> bcsproject.UpdateClustersVariablesRequest
	59, // 87: bcsproject.Variable.UpdateNamespacesVariables:input_type -> bcsproject.UpdateNamespacesVariablesRequest
	61, // 88: bcsproject.Variable.ListClusterVariables:input_type -> bcsproject.ListClusterVariablesRequest
	63, // 89: bcsproject.Variable.ListNamespaceVariables:input_type -> bcsproject.ListNamespaceVariablesRequest
	65, // 90: bcsproject.Variable.UpdateClusterVariables:input_type -> bcsproject.UpdateClusterVariablesRequest
	67, // 91: bcsproject.Variable.UpdateNamespaceVariables:input_type -> bcsproject.UpdateNamespaceVariablesRequest
	69, // 92: bcsproject.Variable.ImportVariables:input_type -> bcsproject.ImportVariablesRequest
	71, // 93: bcsproject.Variable.RenderVariables:input_type -> bcsproject.RenderVariablesRequest
	82, // 94: bcsproject.Healthz.Healthz:input_type -> bcsproject.HealthzRequest
	85, // 95: bcsproject.Healthz.Ping:input_type -> bcsproject.PingRequest
	5,  // 96: bcsproject.BCSProject.CreateProject:output_type -> bcsproject.ProjectResponse
	5,  // 97: bcsproject.BCSProject.GetProject:output_type -> bcsproject.ProjectResponse
	5,  // 98: bcsproject.BCSProject.UpdateProject:output_type -> bcsproject.ProjectResponse
	5,  // 99: bcsproject.BCSProject.DeleteProject:output_type -> bcsproject.ProjectResponse
	8,  // 100: bcsproject.BCSProject.ListProjects:output_type -> bcsproject.ListProjectsResponse
	11, // 101: bcsproject.BCSProject.ListAuthorizedProjects:output_type -> bcsproject.ListAuthorizedProjResp
	13, // 102: bcsproject.BCSProject.ListProjectsForIAM:output_type -> bcsproject.ListProjectsForIAMResp
	15, // 103: bcsproject.Business.GetBusiness:output_type -> bcsproject.GetBusinessResponse
	17, // 104: bcsproject.Business.ListBusiness:output_type -> bcsproject.ListBusinessResponse
	19, // 105: bcsproject.Business.GetBusinessTopology:output_type -> bcsproject.GetBusinessTopologyResponse
	27, // 106: bcsproject.Namespace.CreateNamespace:output_type -> bcsproject.CreateNamespaceResponse
	29, // 107: bcsproject.Namespace.CreateNamespaceCallback:output_type -> bcsproject.NamespaceCallbackResponse
	31, // 108: bcsproject.Namespace.UpdateNamespace:output_type -> bcsproject.UpdateNamespaceResponse
	29, // 109: bcsproject.Namespace.UpdateNamespaceCallback:output_type -> bcsproject.NamespaceCallbackResponse
	33, // 110: bcsproject.Namespace.GetNamespace:output_type -> bcsproject.GetNamespaceResponse
	35, // 111: bcsproject.Namespace.ListNamespaces:output_type -> bcsproject.ListNamespacesResponse
	39, // 112: bcsproject.Namespace.DeleteNamespace:output_type -> bcsproject.DeleteNamespaceResponse
	29, // 113: bcsproject.Namespace.DeleteNamespaceCallback:output_type -> bcsproject.NamespaceCallbackResponse
	23, // 114: bcsproject.Namespace.SyncNamespace:output_type -> bcsproject.SyncNamespaceResponse
	25, // 115: bcsproject.Namespace.WithdrawNamespace:output_type -> bcsproject.WithdrawNamespaceResponse
	37, // 116: bcsproject.Namespace.ListNativeNamespaces:output_type -> bcsproject.ListNativeNamespacesResponse
	46, // 117: bcsproject.Variable.CreateVariable:output_type -> bcsproject.CreateVariableResponse
	48, // 118: bcsproject.Variable.UpdateVariable:output_type -> bcsproject.UpdateVariableResponse
	50, // 119: bcsproject.Variable.ListVariableDefinitions:output_type -> bcsproject.ListVariableDefinitionsResponse
	52, // 120: bcsproject.Variable.DeleteVariableDefinitions:output_type -> bcsproject.DeleteVariableDefinitionsResponse
	54, // 121: bcsproject.Variable.ListClustersVariables:output_type -> bcsproject.ListClustersVariablesResponse
	56, // 122: bcsproject.Variable.ListNamespacesVariables:output_type -> bcsproject.ListNamespacesVariablesResponse
	58, // 123: bcsproject.Variable.UpdateClustersVariables:output_type -> bcsproject.UpdateClustersVariablesResponse
	60, // 124: bcsproject.Variable.UpdateNamespacesVariables:output_type -> bcsproject.UpdateNamespacesVariablesResponse
	62, // 125: bcsproject.Variable.ListClusterVariables:output_type -> bcsproject.ListClusterVariablesResponse
	64, // 126: bcsproject.Variable.ListNamespaceVariables:output_type -> bcsproject.ListNamespaceVariablesResponse
	66, // 127: bcsproject.Variable.UpdateClusterVariables:output_type -> bcsproject.UpdateClusterVariablesResponse
	68, // 128: bcsproject.Variable.UpdateNamespaceVariables:output_type -> bcsproject.UpdateNamespaceVariablesResponse
	70, // 129: bcsproject.Variable.ImportVariables:output_type -> bcsproject.ImportVariablesResponse
	72, // 130: bcsproject.Variable.RenderVariables:output_type -> bcsproject.RenderVariablesResponse
	83, // 131: bcsproject.Healthz.Healthz:output_type -> bcsproject.HealthzResponse
	86, // 132: bcsproject.Healthz.Ping:output_type -> bcsproject.PingResponse
	96, // [96:133] is the sub-list for method output_type
	59, // [59:96] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_bcsproject_proto_init() }
func file_bcsproject_proto_init() {
	if File_bcsproject_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bcsproject_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Perms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuthorizedProjReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuthorizedProjResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectsForIAMReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectsForIAMResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessTopologyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessTopologyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceCallbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceCallbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNativeNamespacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNativeNamespacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeNamespaceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceQuota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVariableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVariableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVariableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVariableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVariableDefinitionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVariableDefinitionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVariableDefinitionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVariableDefinitionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClustersVariablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClustersVariablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespacesVariablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespacesVariablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClustersVariablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClustersVariablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNamespacesVariablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNamespacesVariablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClusterVariablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClusterVariablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespaceVariablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespaceVariablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterVariablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterVariablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNamespaceVariablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNamespaceVariablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportVariablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportVariablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderVariablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderVariablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVariableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVariableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVariableDefinitionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVariableDefinitionsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVariableValuesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportVariableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportVariableVarData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthzRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthzResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthzData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcsproject_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectsForIAMResp_Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bcsproject_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   88,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_bcsproject_proto_goTypes,
		DependencyIndexes: file_bcsproject_proto_depIdxs,
		MessageInfos:      file_bcsproject_proto_msgTypes,
	}.Build()
	File_bcsproject_proto = out.File
	file_bcsproject_proto_rawDesc = nil
	file_bcsproject_proto_goTypes = nil
	file_bcsproject_proto_depIdxs = nil
}
